- en: How to Draw Environment Diagrams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何绘制环境图
- en: EnvDraw
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EnvDraw
- en: 'EnvDraw is a cool program that you can run on your class account to help you
    draw environment diagrams. To use it:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: EnvDraw 是一个很酷的程序，你可以在你的课程账户上运行它来帮助你绘制环境图。要使用它：
- en: Type `envdraw` into a terminal. (If this doesn't work, first SSH into torus,
    and then type the command.) This command should then open an STk interpreter.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中键入 `envdraw`。（如果这行不通，首先 SSH 进入 torus，然后再键入命令。）然后此命令应该会打开一个 STk 解释器。
- en: At the interpreter, type `(envdraw)`.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解释器中，输入 `(envdraw)`。
- en: You should see a new EnvDraw window open. At the `EnvDraw>` prompt, try defining
    the `square` function. Then, look at the EnvDraw window and see what happens!
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该会看到一个新的 EnvDraw 窗口打开。在 `EnvDraw>` 提示符下，尝试定义 `square` 函数。然后，看看 EnvDraw 窗口会发生什么！
- en: Overview
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: Now you're going to start drawing your own environment diagrams! We'll start
    from the basics and gradually build on them. Literally all of the rules you need
    to draw these diagrams are in the previous section. Make sure you know all of
    them by the time you're done with this lesson.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你要开始绘制你自己的环境图了！我们将从基础开始逐步构建。你需要确保在完成本课程时你已经了解了前面所有的规则。
- en: All of the example environment diagrams we show you in this section are taken
    from the EnvDraw program.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节中向你展示的所有示例环境图都来自 EnvDraw 程序。
- en: Define
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义
- en: 'Let''s start by defining a variable in Scheme and looking at the corresponding
    environment diagram. Specifically, we''ll try drawing the diagram for:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 Scheme 中定义一个变量并查看相应的环境图开始。具体来说，我们将尝试绘制以下图表：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first step is to always draw the global environment. Make sure to label
    it! Next, we need to figure out how to handle the `define`. By looking at the
    rules in the previous section, you should learn that `define` adds a new binding
    to the current frame. Let''s draw it out:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步始终是绘制全局环境。确保对其进行标记！接下来，我们需要弄清楚如何处理 `define`。通过查看前面部分的规则，你应该了解到 `define` 将一个新的绑定添加到当前帧。让我们将其绘制出来：
- en: '![](/static/define_x_3.PNG)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/define_x_3.PNG)'
- en: 'That''s all there is to it! Simply write "x" with an arrow pointing to 3, all
    within the global environment. (Note: you don''t have to write "[other bindings]"
    in your own environment diagrams for this class. EnvDraw does this for completeness.)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单！只需在全局环境中写上 "x" 并用箭头指向 3。 （注意：在这门课程的你自己的环境图中，你不需要写 "[other bindings]"。EnvDraw
    会为了完整性而这样做。）
- en: Now we're going to move onto defining procedures. What happens when you type
    the following code into a STk interpreter? We'll continue off of our diagram from
    earlier.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要开始定义过程了。当你在 STk 解释器中输入以下代码时会发生什么？我们将继续前面图表的工作。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The first thing we''re going to do is change the above code so it uses a lambda:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是更改上面的代码，使其使用 lambda：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Notice that this expression now has all of the same basic parts as `(define
    x 3)`. So we follow the exact same procedure: write "square" in the global frame
    and draw an arrow pointing to the lambda. We draw a lambda as a double-bubble.
    The first bubble points to the arguments and the body. The second bubble points
    to the defining environment, or the current environment at the time the lambda
    is seen. This is how your diagram should now look.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此表达式现在具有与 `(define x 3)` 相同的所有基本部分。因此，我们遵循完全相同的过程：在全局框架中写上 "square" 并画一个指向
    lambda 的箭头。我们将 lambda 绘制为双气泡。第一个气泡指向参数和主体。第二个气泡指向定义环境，或者在看到 lambda 时的当前环境。这就是你的图表现在应该的样子。
- en: '![](/static/define_square.PNG)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/define_square.PNG)'
- en: Now you're done! To recap, you first need to draw the lambda. Make the first
    bubble point to the args and body, and the second point to the defining environment.
    Next, simply write "square" in the global environment and make it point to the
    lambda.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你完成了！回顾一下，首先你需要画 lambda。使第一个气泡指向参数和主体，第二个指向定义环境。接下来，只需在全局环境中简单地写上 "square"
    并使其指向 lambda。
- en: In the next section, we'll cover how to actually call the `square` function
    we just defined.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍如何实际调用我们刚刚定义的 `square` 函数。
- en: 'There is one very important point we''re ignoring in these examples: `define`
    doesn''t *always* add things to the global environment. Instead, it adds it to
    the *current frame* (which happens to be the global environment in the cases above).
    We''ll walk you through how to figure out what the current frame is in a later
    section.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，有一个非常重要的点我们忽略了：`define` 并不总是将事物添加到全局环境中。相反，它将其添加到*当前帧*（在上述情况下恰好是全局环境）。我们将在后面的部分中详细介绍如何确定当前帧。
- en: Applying Primitive Procedures
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用原始过程
- en: 'Now, let''s draw the environment diagram for:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为以下内容绘制环境图：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The difference from the previous example is that we must first apply the `+`
    procedure to `3` and `4` before we can assign the value of `y`. You can assume
    that all primitive procedures are applied by magic. Nothing needs to be drawn
    out for them. Thus, the full environment diagram would simply look like:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的示例不同之处在于，在我们为`y`赋值之前，我们必须首先将`+`过程应用于`3`和`4`。你可以假设所有原始过程都是通过魔法应用的。对于它们不需要绘制任何内容。因此，完整的环境图将简单地如下所示：
- en: '![](/static/define_y_3_4.PNG)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/define_y_3_4.PNG)'
- en: Applying User-Defined Procedures
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用用户定义的过程
- en: 'Let''s say we now want to actually call the `square` function we defined earlier.
    We''ll call it with the code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们现在想要实际调用我们之前定义的`square`函数。我们将使用以下代码调用它：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To call a user-defined procedure, we follow the following steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用用户定义的过程，我们按照以下步骤进行：
- en: Create a frame with the formal parameters of the procedure bound to the actual
    argument values.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有过程形式参数的框架，将其绑定到实际参数值。
- en: '![](/static/square_5_a.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/square_5_a.png)'
- en: Extend the procedure's defining environment with this new frame.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用这个新框架扩展过程的定义环境。
- en: '![](/static/square_5_b.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/square_5_b.png)'
- en: Evaluate the procedure body, using the new frame as the current frame.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新框架作为当前框架，评估过程主体。
- en: The last step doesn't actually involve changing the environment diagram. Instead,
    this is when we finally find the value of the call. To evaluate the body of square,
    we must first figure out the value of `x`. We always use the *first available*
    binding for a variable. This means we look at the binding of `x -> 5` in our current
    frame, rather than the binding of `x -> 3` in the global frame. Once we've figured
    out the value of `x`, we multiply it to itself (remember, you can just assume
    this is done by magic). And now we're done! We've multiplied `5` by itself, yielding
    the answer of `25`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步实际上并不涉及更改环境图。相反，这是当我们最终找到调用的值时。要评估`square`的主体，我们必须首先弄清楚`x`的值。我们总是使用变量的*第一个可用*绑定。这意味着我们在当前环境中查找`x
    -> 5`的绑定，而不是在全局环境中查找`x -> 3`的绑定。一旦我们弄清楚了`x`的值，我们将其乘以自身（记住，你可以假设这是通过魔法完成的）。现在我们完成了！我们将`5`乘以自身，得到`25`的答案。
- en: Remember, only compound procedure invocation creates a new frame!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，只有复合过程调用才会创建一个新的环境！
- en: Atomic Expressions
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原子表达式
- en: 'The trick to evaluating atomic expressions (such as finding the value of a
    symbol) relies on figuring out which frame is the current frame. Before we get
    into that, remember that the rules of evaluating atomic expressions are:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 评估原子表达式的技巧（例如找���符号的值）取决于确定哪个框架是当前框架。在我们深入讨论之前，请记住评估原子表达式的规则是：
- en: 'Numbers, strings, #t, and #f are self-evaluating.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '数字、字符串、#t 和 #f 是自求值的。'
- en: If the expression is a symbol, ﬁnd the ﬁrst available binding. (That is, look
    in the current frame; if not found there, look in the frame "behind" the current
    frame; and so on until the global frame is reached.)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果表达式是一个符号，找到第一个可用的绑定。（也就是说，在当前环境中查找；如果找不到，则在“当前环境”之前的环境中查找；直到找到全局环境为止。）
- en: 'All of the hard work is in case 2 above. Recall our environment diagram from
    the last section:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的辛苦工作都在上面的第2种情况中。回想一下我们上一节的环境图：
- en: '![](/static/square_5_b.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/square_5_b.png)'
- en: Remember that a new frame is only drawn when invoking a **user-defined procedure**.
    Thus, the current frame can only differ from the global environment when you are
    within the scope of another function. While this is a super important point, don't
    sweat it too much for now. Make sure you understand all of the examples thus far.
    We'll introduce more complicated examples further in the lesson.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，只有在调用**用户定义的过程**时才会绘制新的环境。因此，当前环境只有在你在另一个函数的范围内时才会与全局环境不同。虽然这是一个非常重要的观点，但现在不要太担心。确保你理解到目前为止的所有示例。我们将在课程的后面介绍更复杂的例子。
- en: '**Test Your Understanding**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: 'Recall that our environment diagram so far looks like this: ![](/static/square_5_b.png)
    If I now type `x` into the interpreter, what will its value be?'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，我们迄今为止的环境图如下：![](/static/square_5_b.png) 如果我现在在解释器中输入`x`，它的值将是多少？
- en: 'I now improperly define the function `cube` as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在错误地定义函数`cube`如下：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: First, draw the environment diagram corresponding to this definition. Add this
    definition on to the environment diagram we've drawn so far.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，绘制与此定义对应的环境图。将此定义添加到我们迄今为止绘制的环境图中。
- en: 'Draw the resulting environment diagram from evaluating the code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制从评估代码中得到的结果环境图：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What does it output?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它输出什么？
- en: Freeloading Frames
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 免费加载框架
- en: At this point, our environment diagram now has three frames, the global frame,
    E1, and E2\. E1 and E2 were created by calls to `square` and `cube`, respectively.
    However, once these functions return (or finish), the frames E1 and E2 we've created
    are useless! They are no longer reachable and their bindings no longer matter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的环境图现在有三个框架，全局框架，E1和E2。 E1和E2是通过对`square`和`cube`的调用创建的。然而，一旦这些函数返回（或完成），我们创建的框架E1和E2就变得无用！它们不再可达，它们的绑定也不再重要。
- en: This isn't always the case. In the next sections we'll go over some code that
    makes these frames useful much after the initial procedure call.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不总是这样。在接下来的章节中，我们将讨论一些使这些框架在初始过程调用之后仍然有用的代码。
- en: Using `set!`
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`set!`
- en: Now let's look at how to handle `set!`. You may recall that `set!` changes the
    *first available* binding. Remember that we find the first available binding by
    looking in the current frame, and then looking in the frames "behind" that frame.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何处理`set!`。你可能记得`set!`会改变*第一个可用*绑定。记住，我们通过查看当前框架，然后查看“在”该框架后面的框架来找到第一个可用绑定。
- en: '**Test Your Understanding**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: 'Let''s try it out! Starting fresh, draw the environment diagram that corresponds
    to the following lines of code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一试！从头开始，绘制与以下代码行对应的环境图：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What is the value of `x`?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`x`的值是多少？'
- en: How can you fix the `change` procedure so the value of `x` in the global environment
    changes? Indicate ALL possible fixes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何修复`change`过程，使全局环境中的`x`值改变？指出所有可能的修复方法。
- en: Using `let`
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`let`
- en: 'Using `let` tends to cause a lot of students trouble. But don''t despair! Whenever
    you''re having troubles with `let`, remember these simple rules:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`let`往往会让很多学生感到困扰。但不要绝望！每当你在使用`let`时遇到困难时，请记住这些简单的规则：
- en: Convert the `let` into a lambda statement plus invocation.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`let`转换为lambda语句加调用。
- en: For example, you can rewrite
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以重写
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: as
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 作为
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Draw the corresponding `lambda`. Remember, a `lambda` is just a double-bubble
    with the correct arrows.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制相应的`lambda`。记住，`lambda`只是一个带有正确箭头的双气泡。
- en: Call the `lambda` with the proper arguments. Remember, this includes drawing
    a new frame and binding the formal parameters to the actual argument values.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用适当的参数调用`lambda`。记住，这包括绘制新框架并将形式参数绑定到实际参数值。
- en: If you can remember these simple rules, you'll have no trouble at all!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能记住这些简单的规则，你就不会有任何困难！
- en: '**Test Your Understanding**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: 'Draw the environment diagram for the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为以下代码绘制环境图：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now let''s try something more complex. Draw the resulting environment diagram
    for the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试一些更复杂的东西。为以下代码绘制结果环境图：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Takeaways
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: At this point, you know everything you need to draw any environment diagram,
    no matter how complicated! As we go through problems in the future, don't forget
    the basics! Even the most complicated pieces of code can be boiled down into simple
    rules.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经掌握了绘制任何环境图所需的一切知识，无论多么复杂！当我们在未来解决问题时，不要忘记基础！即使是最复杂的代码片段也可以归结为简单的规则。
- en: If there is even a single thing covered so far that you don't understand, ask
    for help! Environment diagrams is one of those topics that a lot of students find
    difficult.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果到目前为止有任何一件事你不理解，请寻求帮助！环境图是许多学生觉得困难的主题之一。
- en: What's Next?
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: Using our new-found knowledge of the environment model of evaluation, in the
    next section we're going to walk through how to implement OOP by clever-ly using
    lambdas and lets.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 利用我们对评估环境模型的新认识，在下一节中，我们将通过巧妙地使用lambda和let来实现面向对象编程。
- en: For the Quiz
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对于测验
- en: When you are taking Quiz 8, you are allowed to have a copy of the [Environment
    Diagram Rules](https://docs.google.com/document/d/1GbRF9rB9TtFbf--89MBDEHzygF2E5_E2wpLBh4rb4Z4/edit)
    **in addition to** your double-sided cheat-sheet.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当你参加第8次测验时，你可以携带一份[环境图规则](https://docs.google.com/document/d/1GbRF9rB9TtFbf--89MBDEHzygF2E5_E2wpLBh4rb4Z4/edit)的副本**以及**你的双面作弊纸。
