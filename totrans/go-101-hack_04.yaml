- en: “go build” and “go install”
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “go build” 和 “go install”
- en: “go build” and “go install”
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “go build” 和 “go install”
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Let''s tidy up the `$GOPATH` directory and only keep `Go` source code files
    left over:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们整理一下 `$GOPATH` 目录，并且只保留 `Go` 源代码文件：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `greet.go` is `greet` package which just provides one function:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`greet.go` 是一个 `greet` 包，只提供了一个函数：'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'While `hello.go` is a `main` package which takes advantage of `greet` and can
    be built into an executable binary:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 而 `hello.go` 是一个 `main` 包，利用了 `greet` 并且可以构建成一个可执行的二进制文件：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '(1) Enter the `src/hello` directory, and execute `go build` command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: (1) 进入 `src/hello` 目录，并执行 `go build` 命令：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can see a fresh `hello` command is created in the current directory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到当前目录下生成了一个全新的 `hello` 命令。
- en: 'Check the `$GOPATH` directory:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 `$GOPATH` 目录：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Compared before executing `go build`, there is only a final executable command
    more.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与执行 `go build` 前相比，只多了一个最终的可执行命令。
- en: '(2) Clear the `$GOPATH` directory again:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: (2) 再次清理 `$GOPATH` 目录：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Running `go install` in `hello` directory:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `hello` 目录中运行 `go install`：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Check the `$GOPATH` directory now:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在检查 `$GOPATH` 目录：
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Not only the `hello` command is generated and put into `bin` directory, but
    also the `greet.a` is in the `pkg/linux_amd64`. While the `src` folder keeps clean
    with only source code files in it and unchanged.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅生成了 `hello` 命令并放入 `bin` 目录中，还有一个 `greet.a` 放在 `pkg/linux_amd64` 中。而 `src`
    文件夹保持清洁，只有源代码文件，并且没有变化。
- en: '(3) There is `-i` flag in `go build` command which will install the packages
    that are dependencies of the target, but won''t install the target. Let''s check
    it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: (3) 在 `go build` 命令中有一个 `-i` 标志，它将安装目标依赖的包，但不会安装目标本身。让我们来检查一下：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run `go build -i` under `hello` directory:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `hello` 目录下运行 `go build -i`：
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Check `$GOPATH` now:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在检查 `$GOPATH`：
- en: '[PRE10]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Except a `hello` command in `src/hello` directory, a `greet.a` library is also
    generated in `pkg/linux_amd64` too.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `src/hello` 目录中的 `hello` 命令外，还在 `pkg/linux_amd64` 中生成了一个 `greet.a` 库。
- en: '(4) By default, the `go build` uses the directory''s name as the compiled binary''s
    name, to modify it, you can use `-o` flag:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: (4) 默认情况下，`go build` 使用目录的名称作为编译后二进制文件的名称，要修改它，可以使用 `-o` 标志：
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, the command is `he`, not `hello`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，该命令是 `he`，而不是 `hello`。
