["```\nl1 = [list: 1, 2, 3]\nh1 = l1.first\nl2 = l1.rest\nh2 = l2.first\nl3 = l2.rest\nh3 = l3.first\nl4 = l3.rest\n\ncheck:\n  h1 is 1\n  h2 is 2\n  h3 is 3\n  l2 is [list: 2, 3]\n  l3 is [list: 3]\n  l4 is empty\nend\n```", "```\ncheck:\n  [list: 1, 2, 3] is link(1, link(2, link(3, empty)))\nend\n```", "```\n    my-len :: List<Any> -> Number\n    ```", "```\n    my-sum :: List<Number> -> Number\n    ```", "```\n    my-max :: List<Any> -> Any\n    ```", "```\n    my-str-len :: List<String> -> List<Number>\n    ```", "```\n    my-pos-nums :: List<Number> -> List<Number>\n    ```", "```\n    my-running-sum :: List<Number> -> List<Number>\n    ```", "```\n    my-alternating :: List<Any> -> List<Any>\n    ```", "```\n    my-avg :: List<Number> -> List<Number>\n    ```", "```\nmy-len(empty) is 0\n```", "```\nmy-len([list: 7]) is 1\n```", "```\nmy-len([list: 7, 8, 9]) is 3\n```", "```\nmy-len([list: 8, 9]) is 2\n```", "```\nmy-len([list: 9]) is 1\n```", "```\nmy-len([list: 7, 8, 9]) is 3\nmy-len([list:    8, 9]) is 2\nmy-len([list:       9]) is 1\nmy-len([list:        ]) is 0\n```", "```\nmy-len([list: 7, 8, 9]) is 1 + 2\nmy-len([list:    8, 9]) is 1 + 1\nmy-len([list:       9]) is 1 + 0\nmy-len([list:        ]) is     0\n```", "```\nmy-len([list: 7, 8, 9]) is 1 + my-len([list: 8, 9])\nmy-len([list:    8, 9]) is 1 + my-len([list:    9])\nmy-len([list:       9]) is 1 + my-len([list:     ])\nmy-len([list:        ]) is 0\n```", "```\nmy-sum([list: 7, 8, 9]) is 7 + 8 + 9\nmy-sum([list:    8, 9]) is     8 + 9\nmy-sum([list:       9]) is         9\n```", "```\nmy-sum([list: 7, 8, 9]) is 7 + my-sum([list: 8, 9])\nmy-sum([list:    8, 9]) is 8 + my-sum([list:    9])\nmy-sum([list:       9]) is 9 + my-sum([list:     ])\n```", "```\nmy-sum(empty) is 0\n```", "```\nfun my-len(l):\n  cases (List) l:\n    | empty      => 0\n    | link(f, r) => 1 + my-len(r)\n  end\nend\n```", "```\nfun my-sum(l):\n  cases (List) l:\n    | empty      => 0\n    | link(f, r) => f + my-sum(r)\n  end\nend\n```", "```\nmy-str-len([list: \"hi\", \"there\", \"mateys\"]) is [list: 2, 5, 6]\n```", "```\nmy-str-len([list:       \"there\", \"mateys\"]) is [list:    5, 6]\nmy-str-len([list:                \"mateys\"]) is [list:       6]\n```", "```\nmy-str-len([list: \"hi\", \"there\", \"mateys\"]) is link(2, [list: 5, 6])\nmy-str-len([list:       \"there\", \"mateys\"]) is link(5, [list:    6])\nmy-str-len([list:                \"mateys\"]) is link(6, [list:     ])\n```", "```\nmy-str-len(empty) is empty\n```", "```\nfun my-str-len(l):\n  cases (List) l:\n    | empty => empty\n    | link(f, r) =>\n      link(string-length(f), my-str-len(r))\n  end\nend\n```", "```\nmy-pos-nums([list: 1, -2, 3, -4]) is [list: 1, 3]\nmy-pos-nums([list:    -2, 3, -4]) is [list:    3]\nmy-pos-nums([list:        3, -4]) is [list:    3]\nmy-pos-nums([list:           -4]) is [list:     ]\nmy-pos-nums([list:             ]) is [list:     ]\n```", "```\nmy-pos-nums([list: 1, -2, 3, -4]) is link(1, [list: 3])\nmy-pos-nums([list:    -2, 3, -4]) is         [list: 3]\nmy-pos-nums([list:        3, -4]) is link(3, [list: ])\nmy-pos-nums([list:           -4]) is         [list: ]\nmy-pos-nums([list:             ]) is         [list: ]\n```", "```\nmy-pos-nums([list: 1, -2, 3, -4]) is link(1, my-pos-nums([list: -2, 3, -4]))\nmy-pos-nums([list:    -2, 3, -4]) is         my-pos-nums([list:     3, -4])\nmy-pos-nums([list:        3, -4]) is link(3, my-pos-nums([list:        -4]))\nmy-pos-nums([list:           -4]) is         my-pos-nums([list:          ])\nmy-pos-nums([list:             ]) is         [list: ]\n```", "```\nfun my-pos-nums(l):\n  cases (List) l:\n    | empty => empty\n    | link(f, r) =>\n      if f > 0:\n        link(f, my-pos-nums(r))\n      else:\n        my-pos-nums(r)\n      end\n  end\nend\n```", "```\ncheck:\n  my-alternating([list: 1, 2, 3, 4, 5, 6]) is [list: 1, 3, 5]\n  my-alternating([list:    2, 3, 4, 5, 6]) is [list: 2, 4, 6]\n  my-alternating([list:       3, 4, 5, 6]) is [list:    3, 5]\n  my-alternating([list:          4, 5, 6]) is [list:    4, 6]\nend\n```", "```\ncheck:\n  my-running-sum([list: 1, 2, 3, 4, 5]) is [list: 1, 3, 6, 10, 15]\n  my-running-sum([list:    2, 3, 4, 5]) is [list: 2, 5, 9, 14]\n  my-running-sum([list:       3, 4, 5]) is [list: 3,  7, 12]\nend\n```", "```\nmy-running-sum([list: 1, 2, 3, 4, 5]) is [list: 1, 3, 6, 10, 15]\nmy-running-sum([list:    2, 3, 4, 5]) is [list:    2, 5,  9, 14]\nmy-running-sum([list:       3, 4, 5]) is [list:       3,  7, 12]\n```", "```\nmy-max([list: 1, 2, 3]) is 3\nmy-max([list: 3, 2, 1]) is 3\nmy-max([list: 2, 3, 1]) is 3\nmy-max([list: 2, 3, 1, 3, 2]) is 3\nmy-max([list: 2, 1, 4, 3, 2]) is 4\nmy-max([list: -2, -1, -3]) is -1\n```", "```\nnum-max(1, 2) is 2\nnum-max(-1, -2) is -1\n```", "```\nmy-max([list: 1, 2, 3]) is 3\nmy-max([list:    2, 3]) is 3\nmy-max([list:       3]) is 3\n```", "```\nmy-max([list: 3, 2, 1]) is 3\nmy-max([list:    2, 1]) is 2\nmy-max([list:       1]) is 1\n```", "```\nmy-max([list: 2, 1, 4, 3, 2]) is 4\nmy-max([list:    1, 4, 3, 2]) is 4\nmy-max([list:       4, 3, 2]) is 4\nmy-max([list:          3, 2]) is 3\nmy-max([list:             2]) is 2\n```", "```\nmy-max([list: 2, 1, 4, 3, 2]) is num-max(2, 4)\nmy-max([list:    1, 4, 3, 2]) is num-max(1, 4)\nmy-max([list:       4, 3, 2]) is num-max(4, 3)\nmy-max([list:          3, 2]) is num-max(3, 2)\nmy-max([list:             2]) is \u2026\n```", "```\nmy-max([list:             2]) is num-max(2, \u2026)\n```", "```\nmy-max([list: 2, 1, 4, 3, 2]) is num-max(2, my-max([list: 1, 4, 3, 2]))\nmy-max([list:    1, 4, 3, 2]) is num-max(1, my-max([list:    4, 3, 2]))\nmy-max([list:       4, 3, 2]) is num-max(4, my-max([list:       3, 2]))\nmy-max([list:          3, 2]) is num-max(3, my-max([list:          2]))\n```", "```\nmy-max(empty) raises \"\"\n```", "```\nfun my-max(l):\n  cases (List) l:\n    | empty      => raise(\"not defined for empty lists\")\n    | link(f, r) => num-max(f, my-max(r))\n  end\nend\n```", "```\nnum-max(2, my-max([list: ]))\n```", "```\nfun my-max(l):\n  cases (List) l:\n    | empty      => raise(\"not defined for empty lists\")\n    | link(f, r) =>\n      cases (List) r:\n        | empty => \u2026\n        | \u2026\n      end\n  end\nend\n```", "```\nfun my-max(l):\n  cases (List) l:\n    | empty      => raise(\"not defined for empty lists\")\n    | link(f, r) =>\n      cases (List) r:\n        | empty => f\n        | \u2026\n      end\n  end\nend\n```", "```\nfun my-max(l):\n  cases (List) l:\n    | empty      => raise(\"not defined for empty lists\")\n    | link(f, r) =>\n      cases (List) r:\n        | empty => f\n        | else  => num-max(f, my-max(r))\n      end\n  end\nend\n```", "```\nmy-alternating([list: 1, 2, 3, 4, 5, 6]) is [list: 1, 3, 5]\nmy-alternating([list:       3, 4, 5, 6]) is [list:    3, 5]\nmy-alternating([list:             5, 6]) is [list:       5]\nmy-alternating([list:                 ]) is [list:        ]\n```", "```\nfun my-alternating(l):\n  cases (List) l:\n    | empty => empty\n    | link(f, r) =>\n      link(f, \u2026 r \u2026)\n  end\nend\n```", "```\nmy-alternating([list: 1, 2, 3, 4, 5]) is [list: 1, 3, 5]\nmy-alternating([list:       3, 4, 5]) is [list:    3, 5]\nmy-alternating([list:             5]) is [list:       5]\n```", "```\nfun my-alternating(l):\n  cases (List) l:\n    | empty => empty\n    | link(f, r) =>\n      cases (List) r: # note: deconstructing r, not l\n        | empty =>    # the list has an odd number of elements\n          [list: f]\n              | link(fr, rr) =>\n                # fr = first of rest, rr = rest of rest\n                link(f, my-alternating(rr))\n      end\n  end\nend\n```", "```\nmy-avg([list: 1, 2, 3, 4]) is 10/4\nmy-avg([list:    2, 3, 4]) is 9/3\nmy-avg([list:       3, 4]) is 7/2\nmy-avg([list:          4]) is 4/1\n```", "```\n[list: 1, 2]    # the rest has one element with sum 2\n[list: 1, 4, 0] # the rest has two elements with sum 4\n```", "```\nfun my-avg(l):\n  my-sum(l) / my-len(l)\nend\n```", "```\nmy-rs :: Number, List<Number> -> List<Number>\n```", "```\nmy-rs( 0, [list: 1, 2, 3, 4, 5]) is [list:  0 + 1] + my-rs( 0 + 1, [list: 2, 3, 4, 5])\nmy-rs( 1, [list:    2, 3, 4, 5]) is [list:  1 + 2] + my-rs( 1 + 2, [list:    3, 4, 5])\nmy-rs( 3, [list:       3, 4, 5]) is [list:  3 + 3] + my-rs( 3 + 3, [list:       4, 5])\nmy-rs( 6, [list:          4, 5]) is [list:  6 + 4] + my-rs( 6 + 4, [list:          5])\nmy-rs(10, [list:             5]) is [list: 10 + 5] + my-rs(10 + 5, [list:           ])\nmy-rs(15, [list:              ]) is empty\n```", "```\nfun my-rs(acc, l):\n  cases (List) l:\n    | empty => empty\n    | link(f, r) =>\n      new-sum = acc + f\n      link(new-sum, my-rs(new-sum, r))\n  end\nend\n```", "```\nfun my-running-sum(l):\n  my-rs(0, l)\nend\n```", "```\nmy-alt :: List<Any>, Boolean -> List<Any>\n```", "```\nfun my-alt(l, keep):\n  cases (List) l:\n    | empty => empty\n    | link(f, r) =>\n      if keep:\n        link(f, my-alt(r, false))\n      else:\n        my-alt(r, true)\n  end\nend\n```", "```\nfun my-alternating(l):\n  my-alt(l, true)\nend\n```", "```\nexamples:\n  uniq([list: 1, 2, 1, 3, 1, 2, 4, 1]) is [list: 3, 2, 4, 1]\n  uniq([list:    2, 1, 3, 1, 2, 4, 1]) is [list: 3, 2, 4, 1]\n  uniq([list:       1, 3, 1, 2, 4, 1]) is [list: 3, 2, 4, 1]\n  uniq([list:          3, 1, 2, 4, 1]) is [list: 3, 2, 4, 1]\n  uniq([list:             1, 2, 4, 1]) is [list:    2, 4, 1]\n  uniq([list:                2, 4, 1]) is [list:    2, 4, 1]\n  uniq([list:                   4, 1]) is [list:       4, 1]\n  uniq([list:                      1]) is [list:          1]\n  uniq([list:                       ]) is [list:           ]\nend\n```", "```\nuniq([list: 1, 2, 1, 3, 1, 2, 4, 1]) is [list: 1, 2, 3, 4]\n```", "```\nuniq([list: 1, 2, 1, 3, 1, 2, 4, 1]) is [list: 4, 3, 2, 1]\n```", "```\nfun uniq-rec(l :: List<Any>) -> List<Any>:\n  cases (List) l:\n    | empty => empty\n    | link(f, r) =>\n      if r.member(f):\n        uniq-rec(r)\n      else:\n        link(f, uniq-rec(r))\n      end\n  end\nend\n```", "```\nfun uniq-rec2(l :: List<Any>) -> List<Any>:\n  cases (List) l:\n    | empty => empty\n    | link(f, r) =>\n      ur = uniq-rec(r)\n      if r.member(f):\n        ur\n      else:\n        link(f, ur)\n      end\n  end\nend\n```", "```\nfun uniq-rec3(l :: List<Any>) -> List<Any>:\n  cases (List) l:\n    | empty => empty\n    | link(f, r) =>\n      ur = uniq-rec(r)\n      if ur.member(f):\n        ur\n      else:\n        link(f, ur)\n      end\n  end\nend\n```", "```\nmy-len :: List<Any> -> Number\nmy-max :: List<Any> -> Any\n```"]