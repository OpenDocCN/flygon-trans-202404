- en: 'Chapter 1: Road Map'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Road Map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book follows familiar conventions. It addresses a few house keeping topics
    (like this very chapter) before properly introducing the language. That proper
    introduction starts off with simple topics (variables and data types) and works
    its way up to more complicated areas towards the end, such as generics.
  prefs: []
  type: TYPE_NORMAL
- en: The Gloss-Overs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book won't go into any great detail about some topics. It's mostly concerned
    with the TypeScript language. As a result, the book does not provide step-by-step
    instructions for things like downloading TypeScript, installing it or configuring
    it. This and similar topics are covered in much better detail elsewhere. The final
    chapter, "Where Do I Go From Here?" points to some useful online resources focusing
    on these things.
  prefs: []
  type: TYPE_NORMAL
- en: Practical Considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This chapter covers the TypeScript development experience at a higher level.
    It answers questions such as:'
  prefs: []
  type: TYPE_NORMAL
- en: How do I write TypeScript applications in the first place?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does TypeScript run in the browser? (It doesn't, actually - it "transpiles"
    to JavaScript).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do I debug TypeScript apps?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The goal here to help ground you in the TypeScript "world" and describe the
    big picture of what's happens as you build TypeScript solutions. As you'll see,
    it's not very complicated^([1](#fn_1)).
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScript offers static types. You don't need to use them, but they are pretty
    helpful. This chapter starts off describing primitives (integers, strings and
    the like). It shows how declaring a variable's type helps good integrated development
    environments (IDEs) provide useful edit-time and compile-time feedback. We'll
    also take an opportunity to try and knock the TypeScript doubters off their perch
    with the strong typing goodness :)^([2](#fn_2)).
  prefs: []
  type: TYPE_NORMAL
- en: Types in Depth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The real world is complicated with complex data structures. TypeScript offers
    up the notion of `interfaces` to help us describe and manage them. This chapter
    introduces interfaces as a way to describe them starting with a flat object and
    moving on to a more complex JSON formatted response from a REST service.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript interfaces look and feel quite similar to interfaces in C# and Java.
    Generally speaking, interfaces are one of the backbones for many common and important
    design patterns and principles (think [SOLID](http://williamdurand.fr/2013/07/30/from-stupid-to-solid-code/)).
    TypeScript interfaces enable us to more directly implement these design patterns^([3](#fn_3)).
  prefs: []
  type: TYPE_NORMAL
- en: 'TypeScript offers several other ways to describe data. The chapter covers a
    few the most useful ones. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enumerations: Assigning a label to a fixed value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Union Types: Define a new custom type that can hold two or more different types
    of values (including hard coded strings).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript provides other types, such as intersection types. This book takes
    a pass on those types for now - they feel like edge cases and although interesting
    and vitally useful when you can, you know, use them, most of us don't live on
    the edge.
  prefs: []
  type: TYPE_NORMAL
- en: Template Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eliminate cumbersome string manipulation through the magic of template strings!
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A detailed look into how TypeScript enhances standard JavaScript functions,
    including typed parameters, void return values, default function parameter values
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, learn about Arrow Functions, often called "anonymous" or "lambda"
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Classes and Classes in Depth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'TypeScript''s static typing is, as they say, the [bee''s knees](http://www.phrases.org.uk/meanings/the-bees-knees.html).
    Classes are the honey and these two chapters cover them pretty thoroughly:'
  prefs: []
  type: TYPE_NORMAL
- en: Class syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes and interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inheritance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abstract classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static class members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes are an important building block for object oriented programming and
    TypeScript provides some solid support here.
  prefs: []
  type: TYPE_NORMAL
- en: Generics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learn TypeScripts' version of generics as you know them from C# and Java.
  prefs: []
  type: TYPE_NORMAL
- en: Continue Learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A big long list of links that will hopefully lead you to TypeScript Greatness.
  prefs: []
  type: TYPE_NORMAL
- en: ¹. Isn't this always the case? No specific thing in this post-modern JavaScript
    world of ours is particularly complicated. It surely adds up though. [↩](#reffn_1
    "Jump back to footnote [1] in the text.")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ². If you or someone you know is a TypeScript doubter, have a look at this chapter
    and its videos. Invest fifteen minutes or so here and then make up your mind about
    whether you want to invest more time after that. [↩](#reffn_2 "Jump back to footnote
    [2] in the text.")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ³. As they say in the Old Country, "Come for the static typing, stay for the
    interfaces." [↩](#reffn_3 "Jump back to footnote [3] in the text.")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
