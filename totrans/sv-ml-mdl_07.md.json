["```\npublic class StoreState {\n   private Model currentModel = null;\n   private Model newModel = null;\n...\n   public Model getCurrentModel() {return currentModel;}\n   public Model getNewModel() {return newModel;}\n...\n}\n```", "```\npublic class ModelStateStore implements StateStore{\n...\n   @Override public void init(ProcessorContext context,\n     StateStore root) {\n       StateSerdes<Integer, StoreState> serdes =\n                new StateSerdes<Integer, StoreState>(\n                name, Serdes.Integer(), new ModelStateSerde());\n       changeLogger = new ModelStateStoreChangeLogger(\n         name, context, serdes);\n       if (root != null && loggingEnabled) {\n           context.register(root, loggingEnabled,\n             new StateRestoreCallback() {\n               @Override public void restore(byte[] key,\n                 byte[] value) {\n                   if (value == null) {\n                       state.zero();\n                   } else {\n                       state = serdes.valueFrom(value);\n                   }\n               }\n           });\n       }\n       open = true;\n   }\n\n   @Override public void flush() {\n       if (loggingEnabled) {\n           changeLogger.logChange(changelogKey, state);\n       }\n   }\n...\n}\n```", "```\npublic class ModelStateStoreChangeLogger<K,V> {\n...\n   public void logChange(K key, V value) {\n       if (collector != null) {\n           Serializer<K> keySerializer =\n             serialization.keySerializer();\n           Serializer<V> valueSerializer =\n             serialization.valueSerializer();\n           collector.send(this.topic, key, value, this.partition,\n           context.timestamp(), keySerializer, valueSerializer);\n       }\n   }\n}\n```", "```\npublic class ModelStateSerde implements Serde<StoreState> {\n   ...\n   @Override public Serializer<StoreState> serializer() {\n     return serializer;}\n\n   @Override public Deserializer<StoreState> deserializer() {\n     return deserializer;}\n\n   public static class ModelStateSerializer implements Serializer<\n     StoreState> {\n       ...\n       @Override public byte[] serialize(String topic, StoreState\n         state) {\n\n           bos.reset();\n           DataOutputStream output = new DataOutputStream(bos);\n           writeModel(state.getCurrentModel(), output);\n           writeModel(state.getNewModel(), output);\n           try {\n               output.flush();\n               output.close();\n           }\n           catch(Throwable t){}\n           return bos.toByteArray();\n       }\n       private void writeModel(Model model,DataOutputStream output){\n           try{\n               if(model == null){\n                   output.writeLong(0);\n                   return;\n               }\n               byte[] bytes = model.getBytes();\n               output.writeLong(bytes.length);\n               output.writeLong(model.getType());\n               output.write(bytes);\n           }\n           catch (Throwable t){\n               ...\n           }\n       }\n       ...\n   }\n   public static class ModelStateDeserializer\n     implements Deserializer<StoreState> {\n       ...\n       @Override\n       public StoreState deserialize(String topic, byte[] data) {\n\n           ByteArrayInputStream bis =new ByteArrayInputStream(data);\n           DataInputStream input = new DataInputStream(bis);\n           Model currentModel = readModel(input);\n           Model newModel = readModel(input);\n           return new StoreState(currentModel, newModel);\n       }\n\n       @Override\n       public void close() {}\n\n       private Model readModel(DataInputStream input) {\n           try {\n               int length = (int)input.readLong();\n               if (length == 0)\n                   return null;\n               int type = (int) input.readLong();\n               byte[] bytes = new byte[length];\n               input.read(bytes);\n               ModelFactory factory = factories.get(type);\n               return factory.restore(bytes);\n           } catch (Throwable t) {\n               ...\n           }\n       }\n   }\n}\n```", "```\npublic class ModelStateStoreSupplier\n  implements StateStoreSupplier<ModelStateStore> {\n   ...\n   @Override public ModelStateStore get() {\n       return new ModelStateStore(name, loggingEnabled);\n   }\n\n   @Override public Map<String, String> logConfig() {\n     return logConfig;}\n\n   @Override public boolean loggingEnabled() {\n     return loggingEnabled;}\n}\n```", "```\npublic class ModelServerWithStore {\n   public static void main(String [ ] args) throws Throwable {\n       Properties streamsConfiguration = new Properties();\n       // Give the Streams application a unique name.\n       streamsConfiguration.put(\n             StreamsConfig.APPLICATION_ID_CONFIG, \"model-serving\");\n       streamsConfiguration.put(\n             StreamsConfig.CLIENT_ID_CONFIG,\"model_server-client\");\n       // Where to find Kafka broker(s).\n       streamsConfiguration.put(\n             StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,\n             ApplicationKafkaParameters.LOCAL_KAFKA_BROKER);\n       final File example = Files.createTempDirectory(\n             new File(\"/tmp\").toPath(), \"example\").toFile();\n       streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG,\n         example.getPath());\n       // Create topology\n       final KafkaStreams streams =\n         createStreams(streamsConfiguration);\n       streams.cleanUp();\n       streams.start();\n       // Add shutdown hook to respond to SIGTERM\n       Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n           try {\n               streams.close();\n           } catch (Exception e) {}\n       }));\n   }\n\n   static KafkaStreams createStreams(\n     final Properties streamsConfiguration) {\n\n       Serde<StoreState> stateSerde = new ModelStateSerde();\n       ByteArrayDeserializer deserializer =\n         new ByteArrayDeserializer();\n       ModelStateStoreSupplier storeSupplier =\n              new ModelStateStoreSupplier(\"modelStore\", stateSerde);\n       KStreamBuilder builder = new KStreamBuilder();\n       // Data input streams\n       builder.addSource(\"data-source\", deserializer, deserializer,\n              ApplicationKafkaParameters.DATA_TOPIC)\n              .addProcessor(\"ProcessData\",\n              DataProcessorWithStore::new,\"data-source\");\n       builder.addSource(\"model-source\", deserializer, deserializer,\n              ApplicationKafkaParameters.MODELS_TOPIC)\n              .addProcessor(\"ProcessModels\",\n              ModelProcessorWithStore::new,\"model-source\");\n       builder.addStateStore(storeSupplier, \"ProcessData\",\n              \"ProcessModels\");\n       return new KafkaStreams(builder, streamsConfiguration);\n   }\n}\n```", "```\npublic class ModelProcessorWithStore\n  extends AbstractProcessor<byte[], byte[]> {\n...\n   @Override\n   public void process(byte[] key, byte[] value) {\n\n       Optional<CurrentModelDescriptor> descriptor =\n         DataConverter.convertModel(value);\n       if(!descriptor.isPresent()){\n           return;\n       }\n       CurrentModelDescriptor model = descriptor.get();\n       System.out.println(\"New scoring model \" + model);\n       if(model.getModelData() == null) {\n           System.out.println(\"Not yet supported\");\n           return;\n       }\n       ModelFactory factory = factories.get(model.getModelType()\n         .ordinal());\n       if(factory == null){\n           System.out.println(\"Bad model type \" +\n             model.getModelType());\n           return;\n       }\n       Optional<Model> current = factory.create(model);\n       if(current.isPresent()) {\n           modelStore.setNewModel(current.get());\n           return;\n       }\n   }\n\n   @Override\n   public void init(ProcessorContext context) {\n       this.context = context;\n       this.context.schedule(10000);\n       modelStore = (ModelStateStore)\n         this.context.getStateStore(\"modelStore\");\n   }\n}\n```", "```\npublic class DataProcessorWithStore\n  extends AbstractProcessor<byte[], byte[]> {\n...\n   @Override\n   public void process(byte[] key, byte[] value) {\n       Optional<Winerecord.WineRecord> dataRecord =\n         DataConverter.convertData(value);\n       if(!dataRecord.isPresent()) {\n           return;                                 // Bad record\n       }\n       if(modelStore.getNewModel() != null){\n           // update the model\n           if(modelStore.getCurrentModel() != null)\n               modelStore.getCurrentModel().cleanup();\n           modelStore.setCurrentModel(modelStore.getNewModel());\n           modelStore.setNewModel(null);\n       }\n       // Actually score\n       if(modelStore.getCurrentModel() == null) {\n           // No model currently\n           System.out.println(\"No model available - skipping\");\n       }\n       else{\n           // Score the model\n           double quality = (double) modelStore.getCurrentModel()\n             .score(dataRecord.get());\n           System.out.println(\n               \"Calculated quality - \" + quality + \" in \" +\n                 duration + \"ms\");\n        }\n   }\n\n   @Override\n   public void init(ProcessorContext context) {\n       this.context = context;\n       this.context.schedule(10000);\n       modelStore = (ModelStateStore)\n         this.context.getStateStore(\"modelStore\");\n       Objects.requireNonNull(modelStore, \"Store can't be null\");\n   }\n}\n```"]