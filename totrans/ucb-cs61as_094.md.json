["```\n(define (make-rectangular x y)\n  (define (dispatch m)\n    (cond ((eq? m 'real-part) x)\n          ((eq? m 'imag-part) y)\n          ((eq? m 'magnitude)\n           (sqrt (+ (square x) (square y))))\n          ((eq? m 'angle) (atan y x))\n          (else\n            (error \"Unknown op -- MAKE-RECTANGULAR\" m))))\n  dispatch) \n```", "```\n((acc 'withdraw) 100) \n```", "```\n(define (ask object message . args)\n  (let ((method (object message))) ; Step 1: invoke dispatch procedure\n    (if (method? method)\n        (apply method args)        ; Step 2: invoke the method\n        (error \"No method\" message (cadr method))))) \n```", "```\n(define (class-dispatch-procedure class-message)\n  (cond ((eq? class-message 'some-var-name) (lambda () (get-the-value)))\n         (...)\n        ((eq? class-message 'instantiate)\n         (lambda (instantiation-var ...)\n           (define (instance-dispatch-procedure instance-message)\n             (cond ((eq? instance-message 'foo) (lambda ...))\n                    (...)\n                   (else (error \"No method in instance\")) ))\n             instance-dispatch-procedure))\n        (else (error \"No method in class\")) )) \n```", "```\n(define new-withdraw\n  (let ((balance 100))\n    (lambda (amount)\n      (if (>= balance amount)\n          (begin (set! balance (- balance amount)) balance)\n          \"Insufficient funds\")))) \n```", "```\n(define class-dispatch-procedure\n  (LET ((CLASS-VAR1 VAL1)\n        (CLASS-VAR2 VAL2) ...)\n    (lambda (class-message)\n      (cond ((eq? class-message 'class-var1) (lambda () class-var1))\n            ...\n            ((eq? class-message 'instantiate)\n             (lambda (INSTANTIATION-VARIABLE1 ...)\n               (LET ((INSTANCE-VAR1 VAL1)\n                     (INSTANCE-VAR2 VAL2) ...)\n                (define (instance-dispatch-procedure instance-message)\n                 ...)\n                instance-dispatch-procedure))))))) \n```", "```\n(define-class (checking-account init-balance)\n  (parent (account init-balance))\n  (method (write-check amount)\n    (ask self 'withdraw (+ amount 0.10)) )) \n```", "```\n(define Gerry-account (instantiate checking-account 20000)) \n```", "```\n(define (make-checking-account-instance init-balance)\n  (LET ((MY-ACCOUNT (INSTANTIATE ACCOUNT INIT-BALANCE)))\n    (lambda (message)\n      (cond ((eq? message 'write-check) (lambda (amount) ...))\n            ((eq? message 'init-balance) (lambda () init-balance))\n            (ELSE (MY-ACCOUNT MESSAGE)) )))) \n```", "```\n(else (ask my-parent message)) \n```", "```\n(define make-counter\n    (let ((glob 0))\n        (lambda ()\n            (let ((loc 0))\n                (lambda ()\n                    (set! loc (+ loc 1))\n                    (set! glob (+ glob 1))\n                    (list loc glob)))))) \n```", "```\n> (define counter1 (make-counter))\ncounter1\n\n> (define counter2 (make-counter))\ncounter2\n\n> (counter1)\n(1 1)\n\n> (counter1)\n(2 2)\n\n> (counter2)\n(1 3)\n\n> (counter1)\n(3 4) \n```", "```\n> (define counter1 (make-counter))\ncounter1\n> (define counter2 (make-counter))\ncounter2\n\n> ((counter1 'global) 5)\n5\n> ((counter2 'global) 3)\n8\n> ((counter1 'local) 2)\n2\n```"]