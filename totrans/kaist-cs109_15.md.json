["```\n>>> val C = listOf(\"Introduction to Programming\",\n...                \"Programming Practice\",\n...                \"Data Structures\",\n...                \"Programming Principles\",\n...                \"Algorithms\",\n...                \"Programming Languages\")\n>>> C\n[Introduction to Programming, Programming Practice, Data Structures, Programming Principles, Algorithms, Programming Languages]\n>>> for (e in C)\n...   println(e)\nIntroduction to Programming\nProgramming Practice\nData Structures\nProgramming Principles\nAlgorithms\nProgramming Languages\n\n```", "```\n>>> C.forEach { s: String -> println(s) }\nIntroduction to Programming\nProgramming Practice\nData Structures\nProgramming Principles\nAlgorithms\nProgramming Languages\n\n```", "```\n>>> C.forEach { s -> println(s) }\nIntroduction to Programming\nProgramming Practice\nData Structures\nProgramming Principles\nAlgorithms\nProgramming Languages\n\n```", "```\n\n>>> C.forEach { println(it) }\nIntroduction to Programming\nProgramming Practice\nData Structures\nProgramming Principles\nAlgorithms\nProgramming Languages\n\n```", "```\n>>> val l = listOf(15, 39, 22, 98, 37, 19, 5)\n>>> l\n[15, 39, 22, 98, 37, 19, 5]\n>>> var sum = 0\n>>> l.forEach { sum += it }\n>>> sum\n235\n\n```", "```\n>>> val C = listOf(\"Introduction to Programming\",\n...                \"Programming Practice\",\n...                \"Data Structures\",\n...                \"Programming Principles\",\n...                \"Algorithms\",\n...                \"Programming Languages\")\n>>> C.count { \"Programming\" in it }\n4\n>>> C.count { \"Programming\" !in it }\n2\n>>> C.all { \" \" in it }\nfalse\n>>> C.any { \" \" !in it }\ntrue\n>>> C.any { \"Algo\" in it }\ntrue\n>>> C.all { \"A\" in it.toUpperCase() }\ntrue\n>>> C.find { \" \" !in it }\nAlgorithms\n\n```", "```\n>>> C.filter { \" \" in it }\n[Introduction to Programming, Programming Practice, Data Structures, Programming Principles, Programming Languages]\n>>> C.filterNot { \" \" in it }\n[Algorithms]\n\n```", "```\n>>> val words = java.io.File(\"words.txt\").useLines { it.toSet() }\n>>> words.filter { \"issis\" in it }\n[missis, missises, narcissism, narcissisms, narcissist, narcissists]\n>>> words.filter { it.length > 20 }\n[counterdemonstrations, hyperaggressivenesses, microminiaturizations]\n>>> words.filterNot { \"a\" in it || \"e\" in it || \"o\" in it || \"u\" in it || \"i\" in it }\n[by, byrl, byrls, bys, crwth, crwths, cry, crypt, crypts, cwm, cwms,\n cyst, cysts, dry, dryly, drys, fly, flyby, flybys, flysch, fry,\n ghyll, ghylls, glycyl, glycyls, glyph, glyphs, gym, gyms, gyp, gyps,\n gypsy, hymn, hymns, hyp, hyps, lymph, lymphs, lynch, lynx, my,\n myrrh, myrrhs, myth, myths, nth, nymph, nymphs, phpht, pht, ply,\n pry, psst, psych, psychs, pygmy, pyx, rhythm, rhythms, rynd, rynds,\n sh, shh, shy, shyly, sky, sly, slyly, spry, spryly, spy, sty, stymy,\n sylph, sylphs, sylphy, syn, sync, synch, synchs, syncs, syzygy, thy,\n thymy, try, tryst, trysts, tsk, tsks, tsktsk, tsktsks, typp, typps,\n typy, why, whys, wry, wryly, wych, wynd, wynds, wynn, wynns, xylyl,\n xylyls, xyst, xysts]\n\n```", "```\nval n = args[0].toInt()\nval sqrtn = Math.sqrt(n.toDouble()).toInt()\n\nvar s = (2 .. n).toList()\n\nwhile (true) {\n  val k = s.first()\n  if (k > sqrtn)\n     break\n  print(\"$k \")\n  s = s.filter { it % k != 0 }\n}\n\nprintln(s.joinToString(separator=\" \"))\n\n```", "```\n>>> C\n[Introduction to Programming, Programming Practice, Data Structures, Programming Principles, Algorithms, Programming Languages]\n>>> C.map { it.length }\n[27, 20, 15, 22, 10, 21]\n>>> C.map { it.toUpperCase() }\n[INTRODUCTION TO PROGRAMMING, PROGRAMMING PRACTICE, DATA STRUCTURES,\n  PROGRAMMING PRINCIPLES, ALGORITHMS, PROGRAMMING LANGUAGES] \n>>> C.map { it + \" \" + it }\n[Introduction to Programming Introduction to Programming, Programming\n  Practice Programming Practice, Data Structures Data Structures,\n  Programming Principles Programming Principles, Algorithms\n  Algorithms, Programming Languages Programming Languages] \n\n```", "```\n>>> val words = java.io.File(\"words.txt\").useLines { it.toSet() }\n>>> words.sortedWith(java.util.Comparator { a: String, b: String -> b.length - a.length }).take(10)\n[counterdemonstrations, hyperaggressivenesses, microminiaturizations,\n  counterdemonstration, counterdemonstrators, hypersensitivenesses,\n  microminiaturization, representativenesses, anticonservationist,\n  comprehensivenesses] \n\n```", "```\n>>> 17.compareTo(19)\n-1\n>>> 17.compareTo(13)\n1\n>>> 17.compareTo(17)\n0\n>>> \"CS109\".compareTo(\"Otfried\")\n-12\n\n```", "```\n>>> words.sortedWith(java.util.Comparator<String> { a, b -> -a.length.compareTo(b.length) }).take(10)\n[counterdemonstrations, hyperaggressivenesses, microminiaturizations,\n  counterdemonstration, counterdemonstrators, hypersensitivenesses,\n  microminiaturization, representativenesses, anticonservationist,\n  comprehensivenesses] \n\n```", "```\n>>> words.sortedBy { -it.length }.take(10)\n[counterdemonstrations, hyperaggressivenesses, microminiaturizations,\n  counterdemonstration, counterdemonstrators, hypersensitivenesses,\n  microminiaturization, representativenesses, anticonservationist,\n  comprehensivenesses] \n\n```", "```\n>>> words.sortedByDescending { it.length }.take(10)\n[counterdemonstrations, hyperaggressivenesses, microminiaturizations,\n  counterdemonstration, counterdemonstrators, hypersensitivenesses,\n  microminiaturization, representativenesses, anticonservationist,\n  comprehensivenesses] \n\n```", "```\n>>> val l = listOf(13, 7, 2, 19, 20, 1, 17, 35, 9)\n>>> l.find { it > 15 }\n19\n>>> l.findLast { it > 15 }\n35\n\n```", "```\n>>> val l = mutableListOf(13, 7, 2, 19, 20, 1, 17, 35, 9)\n>>> l.filter { it > 15 }\n[19, 20, 17, 35]\n>>> l\n[13, 7, 2, 19, 20, 1, 17, 35, 9]\n>>> l.retainAll { it > 15 }\ntrue\n>>> l\n[19, 20, 17, 35]\n\n```", "```\n>>> val l = listOf(13, 7, 2, 19, 20, 1, 17, 35, 9)\n>>> l.takeWhile { it > 5 }\n[13, 7]\n>>> l.dropWhile { it > 5 }\n[2, 19, 20, 1, 17, 35, 9]\n>>> l.takeLastWhile { it > 5 }\n[17, 35, 9]\n>>> l.dropLastWhile { it > 5 }\n[13, 7, 2, 19, 20, 1]\n\n```", "```\n>>> val l = listOf(13, 7, 2, 19, 20, 1, 17, 35, 9)\n>>> l.groupBy { it % 3 }\n{1=[13, 7, 19, 1], 2=[2, 20, 17, 35], 0=[9]}\n>>> val m = words.groupBy { it.length }\n>>> m[20]\n[counterdemonstration, counterdemonstrators, hypersensitivenesses, microminiaturization, representativenesses]\n>>> m[21]\n[counterdemonstrations, hyperaggressivenesses, microminiaturizations]\n>>> m[22]\nnull\n\n```"]