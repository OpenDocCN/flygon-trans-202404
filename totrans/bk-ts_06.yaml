- en: 'Chapter 6: Template Strings'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Template Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Template strings only just barely warrant their own chapter. They aren't a kind
    of type nor are they any one of the building blocks TypeScript provides to support
    object oriented programming. However, they are quite useful. Most of the examples
    going forward in the book use them.
  prefs: []
  type: TYPE_NORMAL
- en: A template string is a "regular" JavaScript string seeded with placeholders.
    At runtime, your code replaces the placeholders with real values.
  prefs: []
  type: TYPE_NORMAL
- en: Denote a placeholder with `${}`. Place the variable or function inside the curly
    braces and it will be evaluated at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: At runtime, the code replaces `userName` with the actual value of userName.
  prefs: []
  type: TYPE_NORMAL
- en: Here's another example that uses a template string as a parameter to `console.log()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, the placeholder is a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a nice shortcut, especially when you contrast it against the plain
    JS equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use as many placeholders as you like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: I have trained myself to use the backtick character whenever I need to define
    strings. You never know when you might want to introduce some data into a string
    at run-time.
  prefs: []
  type: TYPE_NORMAL
- en: You'll see a video showcasing template strings in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Template strings actually support a bit more functionality called "Tagged Templates."
    These allow you to pre-process the string before it''s emitted. I''ve never seen
    that functionality used in the real world so I''m not covering it here. Read about
    there here and decide for yourself whether you think you''ll use them: [https://basarat.gitbooks.io/typescript/docs/template-strings.html](https://basarat.gitbooks.io/typescript/docs/template-strings.html)'
  prefs: []
  type: TYPE_NORMAL
- en: That's it for string templates. Let's get back into the weeds and dive into
    TypeScript functions.
  prefs: []
  type: TYPE_NORMAL
