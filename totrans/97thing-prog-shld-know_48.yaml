- en: Large Interconnected Data Belongs to a Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大规模互联数据属于数据库
- en: Large Interconnected Data Belongs to a Database
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大规模互联数据属于数据库
- en: If your application is going to handle a large, persistent, interconnected set
    of data elements, don't hesitate to store it in a relational database. In the
    past RDBMSs used to be expensive, scarce, complex, and unwieldy beasts. This is
    no longer the case. Nowadays RDBMS systems are easy to find — it is likely that
    the system you're using has already one or two installed. Some very capable RDBMSs,
    like MySQL and PostgreSQL, are available as open source software, so cost of purchase
    is no longer an issue. Even better, so-called embedded database systems can be
    linked as libraries directly into your application, requiring almost no setup
    or management — two notable open source ones are SQLite and HSQLDB. These systems
    are extremely efficient.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序将处理大型、持久、互联的数据元素集合，请毫不犹豫地将其存储在关系数据库中。过去，RDBMS曾经是昂贵、稀缺、复杂且笨重的怪兽。但现在不再是这样。如今，RDBMS系统很容易找到——您使用的系统很可能已经安装了一个或两个。一些非常有能力的RDBMS，如MySQL和PostgreSQL，可作为开源软件使用，因此购买成本不再是问题。更好的是，所谓的嵌入式数据库系统可以直接链接为库到您的应用程序中，几乎不需要设置或管理——两个值得注意的开源系统是SQLite和HSQLDB。这些系统非常高效。
- en: If your application's data is larger than the system's RAM, an indexed RDBMS
    table will perform orders of magnitude faster than your library's map collection
    type, which will thrash virtual memory pages. Modern database offerings can easily
    grow with your needs. With proper care, you can scale up an embedded database
    to a larger database system when required. Later on you can switch from a free,
    open source offering to a better-supported or more powerful proprietary system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序的数据大于系统的RAM，带索引的RDBMS表的性能将比您的库的映射集合类型快几个数量级，后者将导致虚拟内存页的抖动。现代数据库产品可以轻松满足您的需求。通过适当的管理，您可以在需要时将嵌入式数据库扩展到更大的数据库系统。以后，您可以从免费的开源产品切换到更受支持或更强大的专有系统。
- en: 'Once you get the hang of SQL, writing database-centric applications is a joy.
    After you''ve stored your properly normalized data in the database it''s easy
    to extract facts efficiently with a readable SQL query; there''s no need to write
    any complex code. Similarly, a single SQL command can perform complex data changes.
    For one-off modifications, say a change in the way you organize your persistent
    data, you don''t even need to write code: Just fire up the database''s direct
    SQL interface. This same interface also allows you to experiment with queries,
    sidestepping a regular programming language''s compile–edit cycle.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦掌握了SQL，编写以数据库为中心的应用程序就是一种乐趣。在将正确规范化的数据存储在数据库中之后，通过可读的SQL查询轻松高效地提取事实；无需编写任何复杂的代码。同样，单个SQL命令可以执行复杂的数据更改。对于一次性修改，比如更改持久数据组织方式，甚至不需要编写代码：只需启动数据库的直接SQL接口。这个接口还允许您尝试查询，避开常规编程语言的编译-编辑循环。
- en: Another advantage of basing your code around an RDBMS involves the handling
    of relationships between your data elements. You can describe consistency constraints
    on your data in a declarative way, avoiding the risk of the dangling pointers
    you get if you forget to update your data in an edge case. For example, you can
    specify that if a user is deleted then the messages sent by that user should be
    removed as well.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码围绕RDBMS构建的另一个优势涉及处理数据元素之间的关系。您可以以声明性方式描述数据的一致性约束，避免在边缘情况下忘记更新数据而导致悬空指针的风险。例如，您可以指定如果删除用户，则应删除该用户发送的消息。
- en: You can also create efficient links between the entities stored in the database
    anytime you want, simply by creating an index. There is no need to perform expensive
    and extensive refactorings of class fields. In addition, coding around a database
    allows multiple applications to access your data in a safe way. This makes it
    easy to upgrade your application for concurrent use and also to code each part
    of your application using the most appropriate language and platform. For instance,
    you could write the XML back-end of a web-based application in Java, some auditing
    scripts in Ruby, and a visualization interface in [Processing](http://www.processing.org/).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以随时通过创建索引在数据库中存储的实体之间创建高效的链接。无需执行昂贵且繁琐的类字段重构。此外，围绕数据库编码允许多个应用程序以安全方式访问您的数据。这使得很容易将您的应用程序升级为并发使用，并且还可以使用最合适的语言和平台对应用程序的每个部分进行编码。例如，您可以使用Java编写基于Web的应用程序的XML后端，使用Ruby编写一些审计脚本，并使用[Processing](http://www.processing.org/)编写可视化界面。
- en: Finally, keep in mind that the RDBMS will sweat hard to optimize your SQL commands,
    allowing you to concentrate on your application's functionality rather than on
    algorithmic tuning. Advanced database systems will even take advantage of multicore
    processors behind your back. And, as technology improves, so will your application's
    performance.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请记住，关系数据库管理系统（RDBMS）会努力优化您的SQL命令，使您能够专注于应用程序的功能，而不是算法调优。高级数据库系统甚至会在您不知情的情况下利用多核处理器。随着技术的提高，您的应用程序性能也会提高。
- en: By [Diomidis Spinellis](http://programmer.97things.oreilly.com/wiki/index.php/Diomidis_Spinellis)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Diomidis Spinellis](http://programmer.97things.oreilly.com/wiki/index.php/Diomidis_Spinellis)提供。
