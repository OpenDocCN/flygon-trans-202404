- en: 'Chapter 12: Applications of Differentiation: Direct Use of Linear Approximation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章：导数的应用：直接使用线性近似
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: We consider using the linear approximation as an approximation method, and using
    it by iteration to determine inverse functions to the accuracy of your machine.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们考虑将线性近似作为一种近似方法，并通过迭代使用它来确定逆函数以达到机器精度。
- en: Topics
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题
- en: 12.1  [Estimating a Function Value Using the Linear Approximation](section01.html)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 12.1 [使用线性近似估算函数值](section01.html)
- en: 12.2  [Determining an Inverse Function Accurately by Iterating the Linear Approximation](section02.html)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 12.2 [通过迭代线性近似准确确定逆函数](section02.html)
- en: 12.3  [Spreadsheet Implementation of this Procedure](section03.html)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 12.3 [此过程的电子表格实现](section03.html)
- en: 12.1 Estimating a Function Value Using the Linear Approximation
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.1 使用线性近似估算函数值
- en: Suppose we have a function f that we find difficult to evaluate, but we know
    a few things about it. We want to make use of what we know as much as possible
    to approximate its value at argument x knowing its value at some argument x[0].
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个函数 f，我们发现很难评估，但我们对它了解一些情况。我们希望尽可能利用我们所知道的东西来估计它在参数 x 处的值，知道它在某个参数 x[0]
    处的值。
- en: Suppose for example we want to evaluate the cube root of 28.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想要评估 28 的立方根。
- en: We know that the� cube root of 27 is 3.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道 27 的立方根是 3。
- en: The simplest thing we can do is to make the "constant approximation", and approximate
    the cube root of 28 by 3, as if the cube root function were a constant.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能做的最简单的事情就是进行“常数近似”，并将 28 的立方根近似为 3，好像立方根函数是一个常数。
- en: The next thing we can try, if we want to do better, is to apply the linear approximation
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想做得更好，接下来可以尝试的是应用线性近似。
- en: f[1](x) = f(x[0]) + (x-x[0])f '(x[0])
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: f[1](x) = f(x[0]) + (x-x[0])f '(x[0])
- en: in our case we have ![](../Images/9cac12b02730143b7a4fa66f63620f56.jpg)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们有 ![](../Images/9cac12b02730143b7a4fa66f63620f56.jpg)
- en: The linear approximation, ![](../Images/71f75c9bc6c0b843096ddebf33453015.jpg)
    to the cube root of 28 is then ![](../Images/26f05d5553d5b239f37fa318a9430c10.jpg)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于立方根的线性近似，![](../Images/71f75c9bc6c0b843096ddebf33453015.jpg) 那么，对于 28 的立方根，我们有
    ![](../Images/26f05d5553d5b239f37fa318a9430c10.jpg)
- en: Given any function f for which we know f(x[0]) and� f '(x[0]) we can immediately
    evaluate this approximation. Using it involves pretending that the graph of the
    function f were its tangent line at x[0], rather than whatever it is.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 给定任何我们知道 f(x[0]) 和 f '(x[0]) 的函数 f，我们可以立即评估这个近似值。使用它涉及假装函数 f 的图形是其在 x[0] 处的切线，而不是它实际的样子。
- en: We can judge how good this approximation is by considering the second derivative
    of f.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过考虑 f 的二阶导数来判断这个近似值有多好。
- en: Note that f " is negative in the range between 27 and 28, which means that the
    first derivative decreases in that interval. On the tangent line at 27 it stays
    constant.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，f '在 27 和 28 之间的范围内是负的，这意味着该区间内的一阶导数在那里减小。在 27 处的切线上保持不变。
- en: This implies that� the tangent line linear approximation at 27 overestimates
    the change in f over this interval and therefore we know
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在 27 的切线线性近似上高估了该区间内 f 的变化，因此我们知道
- en: '![](../Images/7bad0a65970f981b8b21790298da50b5.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7bad0a65970f981b8b21790298da50b5.jpg)'
- en: We can also observe that f 's third derivative is positive in the interval in
    question, so that the quadratic approximation, by the same argument underestimates
    the change in the second derivative and in all lower derivatives as well, so it
    is a lower bound to f(28), and we get
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以观察到 f 的三阶导数在问题的区间内是正的，因此二次近似也低估了二阶导数和所有较低导数的变化，因此它是 f(28) 的一个下界，我们得到
- en: '![](../Images/087ccbbf9ae5ac0bfe0dbba76e514d6e.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/087ccbbf9ae5ac0bfe0dbba76e514d6e.jpg)'
- en: Numerically, to six decimal places we get 3.03658 < f(28) < 3.03704; in fact
    we have f(28) = 3.03659 to this accuracy.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在数值上，精确到小数点后六位，我们得到 3.03658 < f(28) < 3.03704；事实上，我们有 f(28) = 3.03659 的精度。
- en: The cube root function considered here is the **inverse function** to one we
    know how to calculate directly, namely the cube. **We can use the linear approximation
    to compute any such inverse function to the accuracy that our machine will allow,**
    as we shall see next.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此处考虑的立方根函数是我们直接计算其逆函数的函数的**逆函数**，即立方函数。**我们可以使用线性近似来计算任何这样的逆函数，以机器允许的精度**，我们接下来将会看到的。
- en: 12.2 Determining an Inverse Function Accurately by Iterating the Linear Approximation
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.2 通过迭代线性近似准确确定逆函数
- en: '**How?**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何？**'
- en: Given a pair of numbers, (x[0], f(x[0])) the linear approximation, fLx[0] to
    f defined at x[0], allows us to compute fLx[0](x) as an approximation to f(x).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: If we know the inverse function to f, we can compute f ^(-1)(fLx[0](x)) and
    that gives us a new pair of numbers, (f ^(-1)(fLx[0](x)), fLx[0](x)) that we can
    call (x[1], f(x[1])) and repeat (or iterate) this operation to produce x[2], then
    x[3], ... , until it converges.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'This in the old days was so horribly boring a procedure that it could not be
    inflicted on students. Now it is duck soup for a spreadsheet, and can be set up
    and computed in a matter of minutes for all the inverse functions we encounter:
    which are the roots (x^(1/j)), the (natural) logarithm, arcsin and arctan.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '**What has to be done?**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: The linear approximation fLx[j] defined at x[j] evaluated at x is given by
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '**fLx[j](x) = f(x[j]) + f ''(x[j]) (x - x[j])**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: setting this up, setting
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '**x[j+1] = f ^(-1) (fLx[j](x))**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: and iterating is all that need be done.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises:**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '**12.1 Set up a general root finding spreadsheet so that you can input x and
    j and it will spit out the j-th root of x by using this method where the machine
    only computes integer powers. (Clues on how to do this are in the next section.)**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '**12.2 Set up a spreadsheet to find ln x using the ability of the machine to
    compute exp x.**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '**12.3 Do the same for the inverse functions to the sine and tangent. These
    are generally written as something like arcsine and arctangent or asin or atan
    or something in between.**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '**12.4 Can this method fail? If so how?**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 12.3 Spreadsheet Implementation of this Procedure
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**How can you do such things?** First put x and j in fixed locations X and
    Y.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Then set up the following columns on the spreadsheet:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '**f(x[j]):**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: In the first column enter the successive values of f(x[j]) starting with the
    first, known value.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: For roots you can start with x[0]� = f(x[0]) = 1.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Compute later values f(x[j]) by using the linear approximation tangent line
    at x[j-1] evaluated at argument x, fLx[j-1](x) or f(x[j-1]) + f '(x[j-1]) (x-x[j-1]).
    (x[j-1] is the entry in the second column in the previous row.)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '**x[j]:**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: In the second column apply the inverse function, f ^(-1) to the value in the
    first column.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Once you have entered your instructions for f(x[1]) and x[1], you can copy these
    down a hundred rows, and you are done.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: What happens if f is a root, x^(1/m)?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: In general we have
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '**f(x[j]) = fLx[j-1](x) = f(x[j-1]) + (x - x[j-1])f ''(x[j-1])**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: �For j-th root,� ![](../Images/c2394e979ecaeb208412b738fde18eb7.jpg) so that
    this formula reduces to
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '**![](../Images/a9b395b296e9be92aa38e95785ece242.jpg)**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: And that is all you need enter. The rest is copying down.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
