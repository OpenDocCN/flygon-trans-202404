- en: 'Recitation 16: Assurance'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第16讲：保证
- en: Assurance
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保证
- en: 'So, you have implemented your program using the specification methodology outlined
    in the last couple of lectures. But does it really work? You need **assurance**:
    confidence that the program works. There are two main strategies for gaining assurance:
    **verification** and **testing**, and many variations on each. Ideally we would
    like to show convincingly that a program works correctly on all possible inputs
    that it could be provided. This is often too strong a goal; we must settle for
    a assurance process that increases our confidence that the program works correctly,
    or perhaps that proves definitively that it avoids only certain kinds of errors.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，您已经使用上几节课中概述的规范方法来实现您的程序了。但它真的有效吗？您需要**保证**：对程序有效的信心。获得保证的两种主要策略是**验证**和**测试**，以及许多变体。理想情况下，我们希望能够有令人信服的证明，证明程序对可能提供的所有可能输入都能正确运行。这通常是一个过于强大的目标；我们必须采取一种增加我们对程序正确运行的信心的保证过程，或者甚至证明它明确地避免了某些类型的错误。
- en: Verification
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证
- en: In the *verification* approach, we use the program and its specifications to
    argue either formally or informally that the program satisfies all its specification
    and therefore works correctly on all possible inputs. The value of verification
    is that if carried out thoroughly, it produces a convincing demonstration that
    the program really does work on all possible inputs. For example, the OCaml type
    checker is a limited verifier that ensures that the program does not contain run-time
    type errors no matter what the inputs are. But it doesn't guarantee that the program
    does not contain other kinds of errors. There are even tools available to help
    do program verification, based on automated theorem provers. In subsequent lectures
    we will see some formal and informal arguments for correctness.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *验证* 方法中，我们使用程序及其规范来形式化或非正式地论证程序是否满足所有规范，因此在所有可能的输入上都能正确运行。验证的价值在于，如果彻底进行，它会产生一个令人信服的证明，证明程序确实在所有可能的输入上都有效。例如，OCaml
    类型检查器是一个有限的验证器，它确保程序不包含运行时类型错误，无论输入是什么。但它不保证程序不包含其他类型的错误。甚至有一些工具可用于帮助进行程序验证，基于自动定理证明器。在接下来的讲座中，我们将看到一些关于正确性的形式化和非正式论证。
- en: Testing
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: In the *testing* approach, we actually run the program or parts of the program
    on various inputs and see whether the behavior of the code is as expected. By
    comparing the actual results of the program with the expected results, we find
    out whether the program really works on the particular inputs we try it on. One
    weakness of testing is that unless we try all possible inputs to the program,
    we can't be sure that it works on all of them. Another weakness is that some programs
    are nondeterministic (particularly if they use concurrency) and the same test
    case may give different results on different runs. This contrasts with verification,
    in which we attempt to prove that the program always works. If carried out carefully,
    however, testing can give us useful assurance that the program works, at lower
    cost than formal or even informal verification.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *测试* 方法中，我们实际上运行程序或程序的部分，并在各种输入上观察代码的行为是否符合预期。通过将程序的实际结果与预期结果进行比较，我们可以发现程序是否真的在我们尝试的特定输入上工作。测试的一个弱点是，除非我们尝试对程序的所有可能输入，否则我们不能确定它是否在所有输入上都有效。另一个弱点是，一些程序是不确定性的（特别是如果它们使用并发），同一个测试用例可能在不同的运行中产生不同的结果。这与验证相对应，我们试图证明程序总是有效的。然而，如果进行仔细，测试可以以较低的成本为我们提供程序有效的保证，甚至比正式或非正式验证更低。
- en: At the beginning of the semester, we talked about writing unit tests. Let's
    go back and think about that again, using what we've learned since then.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 学期初，我们谈到了编写单元测试。让我们回过头再思考一下，利用我们此后学到的知识。
- en: Coverage
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖率
- en: 'We would like to know that the program works on all possible inputs. The problem
    with testing is that it is usually infeasible to try all the possible inputs.
    For example, suppose that we are implementing a module that provides an abstract
    data type for rational numbers. One of its operations might be an addition function
    `plus`, e.g.:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望知道程序在所有可能的输入上都能运行。测试的问题在于通常不可能尝试所有可能的输入。例如，假设我们正在实现一个提供有理数抽象数据类型的模块。其中一个操作可能是加法函数
    `plus`，例如：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What would it take to exhaustively test just this one function? We'd want to
    try all possible rationals as both the `r1` and `r2` arguments. A rational is
    formed from two ints, and there are 2^(32) ints on most machines. Therefore there
    are 2^(32)�2^(32)�2^(32)�2^(32) = 2^(128) possible inputs fo the `plus` function.
    Even if we test one addition every nanosecond (perhaps by using a lot of machines
    in parallel), it will take about 10^(29) years to finish testing this one function.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要彻底测试这个函数需要什么？我们想要尝试所有可能的有理数作为`r1`和`r2`参数。有理数由两个整数组成，在大多数计算机上有2^(32)个整数。因此，`plus`函数的可能输入为2^(32)�2^(32)�2^(32)�2^(32)
    = 2^(128)。即使我们每纳秒测试一次加法（可能通过并行使用大量机器），也需要大约10^(29)年才能完成对这个函数的测试。
- en: Clearly we can't test software exhaustively. But that doesn't mean we should
    give up on testing. It just means that we need to think carefully about what our
    test cases should be so that they are as effective as possible at convincing us
    that the code works.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们无法对软件进行彻底测试。但这并不意味着我们应该放弃测试。这只意味着我们需要仔细考虑我们的测试用例应该是什么，以便它们尽可能有效地说服我们代码是有效的。
- en: 'Consider our `create` function, above. It takes in two integers `p` and `q`
    as arguments. How should we go about selecting a relatively small number of test
    cases that will convince us that the function works correctly on all possible
    inputs? We can visualize the space of all possible inputs as a large square:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑上面的`create`函数。它以两个整数`p`和`q`作为参数。我们应该如何选择一些相对较小的测试用例，以确信函数在所有可能的输入上都正确工作？我们可以将所有可能的输入空间视为一个大方形：
- en: '![](../Images/e1e70af1c81189104b2bd2fc864c9432.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e1e70af1c81189104b2bd2fc864c9432.jpg)'
- en: There are about 2^(64) points in this square, so we can't afford to test them
    all. And testing them all is going to mostly be a waste of time—most of the possible
    inputs provide nothing new. We need a way to find a set of points in this space
    to test that are interesting and will give a good sense of the behavior of the
    program across the whole space. Input spaces generally comprise a number of subsets
    in which the behavior of the code is similar in some essential fashion across
    the entire subset. We don't get any additional information by testing more than
    one input from each such subset. If we test all the interesting regions of the
    input space, we have achieved **coverage**. We want tests that in some useful
    sense **cover** the space of possible program inputs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方形中大约有2^(64)个点，所以我们负担不起测试它们所有。而且测试它们所有基本上是浪费时间的——大多数可能的输入都没有提供新的信息。我们需要找到一种方法，在这个空间中找到一组有趣的点来测试，这些点将给我们一个对整个空间内程序行为的良好感觉。输入空间通常由若干个子集组成，在这些子集中代码的行为在某种重要的方式上在整个子集中是相似的。我们通过测试每个这样的子集中超过一个输入来获得任何额外的信息。如果我们测试了输入空间的所有有趣区域，我们就实现了**覆盖**。我们希望测试在某种有用的意义上**覆盖**了可能的程序输入空间。
- en: Testing against the specification
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根据规范进行测试
- en: 'In selecting our test cases for good coverage, we might want to consider both
    the specification and the implementation of the program or program module being
    tested. It turns out that we can often do a pretty good job of picking test cases
    by just looking at the specification and ignoring the implementation. Recall from
    early in the semester that this is known as **black-box testing**. The idea is
    that we think of the code as a black box about which all we can see is its surface:
    its specification. We pick test cases by looking at how the specification implicitly
    introduces boundaries that divide the space of possible inputs into different
    regions.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择覆盖率良好的测试用例时，我们可能想要考虑被测试的程序或程序模块的规范和实现两方面。事实证明，我们通常可以通过仅查看规范并忽略实现来很好地选择测试用例。回想一下本学期早些时候，这被称为**黑盒测试**。这个想法是我们把代码想象成一个黑盒，我们只能看到它的表面：它的规范。我们通过观察规范如何隐含地引入将可能的输入空间分成不同区域的边界来选择测试用例。
- en: When writing black-box test cases, we ask ourselves what set of test cases that
    will produce distinctive behavior as predicted by the specification. It is important
    to try out both "typical inputs" and inputs that are "corner cases". A common
    error is to only test typical inputs, with the result that the program usually
    works but fails in less frequent situations. Sometimes those are the situations
    where we really need the code to work!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写黑盒测试用例时，我们会问自己什么样的测试用例会产生符合规范预测的特殊行为。尝试典型输入和“边界情况”输入是很重要的。一个常见的错误是只测试典型输入，结果程序通常工作但在不太频繁的情况下失败。有时，这些情况是我们真正需要代码正常工作的情况！
- en: 'Here are some ideas for how to test the `create` function:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些测试`create`函数的想法：
- en: Looking at the square above, we see that it has boundaries at `minint` (usually
    -2^(31)) and `maxint` (usually 2^(31)-1). We want to try to construct rationals
    at the corners and along the sides of the square, e.g. `create(minint, minint)`,
    `create(maxint, 2)`, etc.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看看上面的方框，我们发现它的边界在`minint`（通常为-2^(31)）和`maxint`（通常为2^(31)-1）处。我们想要尝试在方框的角落和边上构建有理数，例如`create(minint,
    minint)`，`create(maxint, 2)`等等。
- en: The line p=0 is important because p/q is zero all along it. We should try (0,q)
    for various values of q.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: p=0的直线很重要，因为p/q在整条直线上都是零。我们应该尝试（0，q）以及各种q的值。
- en: We should try some typical (p,q) pairs in all four quadrants of the space.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应该在空间的四个象限中尝试一些典型的（p，q）对。
- en: We should try both (p,q) pairs in which q divides evenly into p, and pairs in
    which q does not divide into p.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应该尝试q能够整除p的（p，q）对，以及q不能整除p的对。
- en: Pairs of the form (1,q),(-1,q),(p,1),(p,-1) for various p and q also may be
    interesting given the properties of rational numbers.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于各种p和q，形式为（1，q），（-1，q），（p，1），（p，-1）的对也可能很有趣，考虑到有理数的属性。
- en: The specification also says that the code will check that q is not zero. We
    should construct some test cases to ensure this checking is done as advertised.
    Trying (1,0), (maxint,0),(minint,0),(-1,0), (0,0) would probably be an adequate
    set of black-box tests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 规范还指出，代码将检查q是否为零。我们应该构造一些测试用例来确保此检查是否按照广告进行。尝试（1,0），（maxint,0），（minint,0），（-1,0），（0,0）可能是一个足够的黑盒测试集。
- en: Of course, we can't tell much by simply creating a rational number; in testing
    we'll have to use some other function of rationals, such as `toReal`, to *observe*
    the rational created and see that it conforms to our expectations. We shouldn't
    confuse this with testing of `toReal`, however; we'll want to also test that function,
    by invoking create with arguments that correspond to ways of cutting up the space
    of real numbers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们不能简单地通过创建一个有理数来了解很多；在测试中，我们将不得不使用有理数的其他函数，例如`toReal`，来*观察*所创建的有理数，并看到它是否符合我们的期望。但我们不应该将这与`toReal`的测试混淆；我们还将测试该函数，通过使用与实数空间划分方式相对应的参数调用create。
- en: 'Here is another example: consider the function `max`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个例子：考虑函数`max`：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'What is a good set of black box test cases? Here the input space is the set
    of all possible lists of ints. We need to try some typical inputs and also consider
    boundary cases. Based on this spec, boundary cases include the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的黑盒测试用例集是什么？在这里，输入空间是所有可能的int列表的集合。我们需要尝试一些典型的输入，还要考虑边界情况。根据这个规范，边界情况包括以下内容：
- en: A list containing one element. In fact, an empty list is probably the first
    boundary case we think of. Looking at the spec above, we realize that it doesn't
    specify what happens in the case of an empty list. Thus, thinking about boundary
    cases is also useful in identifying errors in the specification.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含一个元素的列表。实际上，空列表可能是我们首先考虑的第一个边界情况。查看上面的规范，我们意识到它没有规定在空列表的情况下会发生什么。因此，在识别规范错误时，考虑边界情况也是有用的。
- en: A list containing two elements.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含两个元素的列表。
- en: A list in which the maximum is the first element. Or the last element. Or somewhere
    in the middle of the list.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大值为第一个元素的列表。或者是最后一个元素。或者在列表的中间某个位置。
- en: A list in which every element is equal.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个元素都相等的列表。
- en: A list in which the elements are arranged in ascending sorted order, and one
    in which they are arranged in descending sorted order.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素按升序排列的列表，以及元素按降序排列的列表。
- en: A list in which the maximum element is `maxint`, and a list in which the maximum
    element is `minint`.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大元素为`maxint`的列表，以及最大元素为`minint`的列表。
- en: Aliasing
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 别名
- en: When a function has side effects or manipulates mutable data structures, another
    important class of boundary conditions to check for is calls that **alias** two
    different arguments. For example, if we have a function that copies elements from
    one set to another, we should try applying this function to the same set to see
    whether we get the expected result. This function might easily be implemented
    in a way that causes it not to work when the inputs are aliased.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个函数具有副作用或操作可变数据结构时，我们要检查的另一类重要边界条件是**别名**两个不同参数的调用。例如，如果我们有一个从一个集合复制元素到另一个集合的函数，我们应该尝试将这个函数应用到相同的集合上，看看是否得到预期的结果。当输入被别名时，这个函数可能很容易被实现为导致它不在别名时工作。
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Often programmers do not think enough about the possibility of aliasing.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 经常程序员们没有足够地考虑到别名的可能性。
- en: Summary
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Black-box testing has some important advantages:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒测试具有一些重要的优点：
- en: It doesn't require that we see the code we are testing. Sometimes code will
    not be available in source code form, yet we can still construct useful test cases
    without it. The person writing the test cases does not need to understand the
    implementation.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不要求我们看到我们正在测试的代码。有时代码将不可用于源代码形式，但我们仍然可以构造有用的测试用例。编写测试用例的人不需要了解实现。
- en: The test cases do not depend on the implementation. They can be written in parallel
    with or before the implementation. Further, good black-box test cases do not need
    to be changed. even if the implementation is completely rewritten.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例不依赖于实现。它们可以与或在实现之前并行编写。此外，即使实现被完全重写，好的黑盒测试用例也不需要更改。
- en: Constructing black-box test cases causes the programmer to think carefully about
    the specification and its implications. Many specification errors are caught this
    way.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造黑盒测试用例会使程序员仔细思考规范及其含义。许多规范错误都是通过这种方式捕获的。
- en: The disadvantage of black box testing is that its coverage may not be as high
    as we'd like, because it has to work without the implementation. But it's a good
    place to start when writing test cases.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒测试的缺点是，它的覆盖范围可能不如我们希望的那样高，因为它必须在没有实现的情况下工作。但这是写测试用例时的一个很好的起点。
- en: Testing against the implementation
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对实现进行测试
- en: Using the representation invariant
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用表示不变式
- en: Looking at the implementation gives us more information about what is likely
    to give us good coverage of the space of possible inputs. Recall from early in
    the semester that testing with knowledge of the implementation is known as **white-box**
    or **glass-box testing**. A simple first step is to look at the abstraction function
    and representation invariant for hints about what boundaries may exist in the
    space of values manipulated by a data abstraction. The rep invariant is a particularly
    effective tool for constructing useful test cases.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 查看实现会给我们更多关于什么可能为我们提供对可能输入的空间的良好覆盖的信息。回想一下学期初，利用实现知识进行测试被称为**白盒**或**玻璃盒测试**。一个简单的第一步是查看抽象函数和表示不变式，以获取关于数据抽象操作的值空间中可能存在的边界的提示。rep不变式是构造有用测试用例的一个特别有效的工具。
- en: Looking at the rep invariant of the rational data abstraction above, we see
    that it requires that q is non-zero and that the gcd of p and q is 1\. Therefore
    we should construct test cases that make q as close to 0 as possible (1 or -1)
    , test cases in which p is 0, and test cases in which the gcd turns out to be
    1 in relatively interesting ways, such as by having p=1 or q=1, or test cases
    in which a bug in the arithmetic algorithms might reasonably break the gcd property
    (e.g., 3/5 + -3/5, 7/20+13/20).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 查看上述有理数数据抽象的rep不变式，我们看到它要求q非零，并且p和q的gcd为1。因此，我们应该构造尽可能使q接近0（1或-1）的测试用例，p为0的测试用例，以及使gcd以相对有趣的方式为1的测试用例，例如通过p=1或q=1或算法中的错误可能破坏gcd属性的测试用例（例如，3/5
    + -3/5，7/20+13/20）。
- en: Path completeness
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路径完整性
- en: Another way we can identify interesting regions of the input space is by trying
    to find a set of test cases that exercises every **path** through the program
    text. Test cases that collectively exercise all paths are said to be **path-complete**.
    At a minimum, path-completeness requires that for every line of code, and even
    for every expression in the program, there should be a test case that causes it
    to be executed. Any unexecuted code could contain a bug if has never been tested.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种我们可以确定输入空间的有趣区域的方法是尝试找到一组测试用例，通过程序文本的每一条**路径**。集体执行所有路径的测试用例称为**路径完备**。至少，路径完备性要求对于代码的每一行，甚至对于程序中的每一个表达式，都应该有一个测试用例导致其被执行。任何未执行的代码都可能包含错误，如果从未经过测试。
- en: 'For example, here is our code for taking the union of two sets represented
    as lists:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是我们用列表表示的两个集合取并集的代码：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Path completeness requires at a minimum that we write test cases that exercise
    both the "`then`" and "`else`" branches of the `if` statement.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 路径完备性要求至少编写测试用例，以执行`if`语句的“`then`”和“`else`”分支。
- en: For true path-completeness we must consider all possible execution paths from
    start to finish of each function, and try to exercise every distinct path. In
    general this is infeasible, because there are too many paths. For example, a program
    with a loop in it has at least one path for each number of times that the loop
    can execute. The code for `union` actually has many paths because `foldl` may
    invoke its function many times, with different branches taken on different executions.
    If there are several such loops, the number of paths can easily become intractably
    large. A good approach is to think of the set of paths as the space that we are
    trying to explore, and to identify boundary cases within this space that are worth
    testing. For example, for a program containing a loop, we want test cases that
    cause the loop to exercise 0, 1, and some *n*>=2 times. If there are several paths
    within the loop, we will want test cases for each number of loop iterations that
    exercise all these paths.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于真正的路径完备性，我们必须考虑从每个函数的开始到结束的所有可能的执行路径，并尝试执行每个不同的路径。一般来说，这是不可行的，因为路径太多。例如，一个含有循环的程序至少有一个路径，每次循环执行时都会执行一次。`union`的代码实际上有许多路径，因为`foldl`可能多次调用其函数，不同的执行可能会采用不同的分支。如果有几个这样的循环，路径的数量很容易变得难以处理。一个好的方法是将路径集合视为我们试图探索的空间，并在这个空间内识别值得测试的边界情况。例如，对于包含循环的程序，我们希望测试用例导致循环执行0、1和一些*n*>=2次。如果循环内有几条路径，我们将希望测试用例能够对每个循环迭代次数执行所有这些路径。
- en: Testing strategies
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试策略
- en: 'So far we have mostly talked about selecting test cases that ensure that modules
    meet their specification. How should we go about testing? There are two approaches,
    which are both useful: **integration testing** and **unit testing**. In integration
    testing we try the program as a whole and check that its behavior is as expected.
    We construct test cases using the techniques described above. For example, if
    a program reads an input file we will want to consider boundary cases such as
    the file not existing or the file being empty or incorrectly formatted, in addition
    to data-specific boundary cases of the sort discussed above.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们主要谈论了选择测试用例以确保模块符合其规范的方法。我们应该如何进行测试呢？有两种方法，它们都很有用：**集成测试**和**单元测试**。在集成测试中，我们尝试将程序作为一个整体，并检查其行为是否符合预期。我们使用上面描述的技术构建测试用例。例如，如果一个程序读取一个输入文件，我们将考虑边界情况，比如文件不存在、文件为空或格式不正确，以及上面讨论的数据特定边界情况。
- en: The problem with integration testing is that we are unlikely to be able to fully
    test program modules by running the program with appropriately chosen inputs;
    programs typically do not exercise the full functionality of the modules that
    make them up. Integration testing can leave undiscovered bugs that surface later
    when the program is changed in some way.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试的问题在于，我们不太可能通过以适当选择的输入运行程序来完全测试程序模块；程序通常不会执行组成它们的模块的全部功能。集成测试可能会留下未发现的错误，当程序以某种方式更改时，这些错误可能会在以后暴露出来。
- en: Therefore we should also perform unit testing to check the individual modules
    of the program. To test modules, we have to write code whose purpose is only to
    test out the module. This code is known as a **test harness**. A test harness
    should thoroughly test each of the operations provided by the module so that any
    possible use of the module by the containing program will also work correctly.
    Typically the test harness is written in the same programming language as the
    module itself. It can be hard to motivate oneself to write code that is not going
    to be part of the final program, but the increased assurance that is obtained
    by unit testing often makes it worthwhile.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们也应该执行单元测试来检查程序的各个模块。要测试模块，我们必须编写代码，其目的仅仅是为了测试模块。这段代码被称为**测试驱动程序**。测试驱动程序应该彻底测试模块提供的每个操作，以便容器程序对模块的任何可能的使用也能正常工作。通常，测试驱动程序是用与模块本身相同的编程语言编写的。写代码不会成为最终程序的一部分可能会让人难以自我激励，但通过单元测试获得的增加的保证通常是值得的。
- en: Exploiting the representation invariant
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用表示不变量
- en: If the module being tested has a `repOK` operation or equivalent, it can be
    very useful in testing. The problem with abstract data types is that they can
    only be manipulated through their interface; even if a data structure has gone
    bad, it may be difficult to find a way to observe the problem through the external
    interface. Because `repOK` checks the internal consistency of the representation
    in a thorough way, the test harness can use it after each module operation to
    gain additional confidence that the module works correctly.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果被测试的模块有一个`repOK`操作或等价物，则在测试中可以非常有用。抽象数据类型的问题在于它们只能通过它们的接口来操作；即使数据结构已经出了问题，通过外部接口找到问题的方式可能也很困难。因为`repOK`以彻底的方式检查了表示的内部一致性，所以测试驱动程序可以在每个模块操作之后使用它来获得对模块正常工作的额外信心。
- en: 'Exhaustive testing: the small-counterexample hypothesis'
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 穷尽测试：小反例假设
- en: True exhaustive testing is infeasible, but a limited form is very often successful
    in finding bugs. The observation is that bugs in programs can usually be reproduced
    with a small test case. If this is true, we can find that test case by exhaustively
    trying small test cases. By limiting ourselves to test cases smaller than some
    fixed size, we keep the number of test cases manageable. For example, if we were
    testing red-black trees, we might try constructing all possible red-black trees
    of up to 6 elements and performing operations on them. Some thought is usually
    required to keep the input state space from exploding. For example, we know that
    only the order of the elements matters to the algorithm, so we don't need to try
    all possible sets of 6 values; we could just insert the numbers 1 through 6 into
    the red-black tree in all possible orders. This results in only 720 separate cases
    that we can write a test harness to generate automatically, or 6⁶ = 46656 cases
    if duplicate elements are allowed. Testing this many cases is feasible and frequently
    useful.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的穷尽测试是不可行的，但是一种有限形式通常很成功地找到错误。观察表明，程序中的错误通常可以通过一个小的测试用例重现。如果这是真的，我们可以通过穷尽尝试小测试用例来找到该测试用例。通过将自己限制在小于某个固定大小的测试用例上，我们可以使测试用例的数量可控。例如，如果我们正在测试红黑树，我们可以尝试构造高达6个元素的所有可能的红黑树并对其进行操作。通常需要一些思考来防止输入状态空间爆炸。例如，我们知道，对算法来说只有元素的顺序才重要，因此我们不需要尝试所有可能的6个值集合；我们可以将数字1到6按所有可能的顺序插入红黑树中。这样做结果只有720个单独的情况，我们可以编写一个测试驱动程序自动生成，或者如果允许重复元素，则为6⁶
    = 46656个情况。测试这么多情况是可行的，并且经常是有用的。
- en: Regression tests
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回归测试
- en: 'Once we have constructed a nice set of test cases with good coverage and convinced
    ourselves that the code works on them, what do we do with the test cases? Perhaps
    we should throw them away -- after all, the program works; why would we need test
    cases? One reason is that software is not static; it evolves over times as bugs
    are fixed in it and new features added. The test cases developed for one version
    of the software are likely to be useful in later versions as well. The time invested
    in developing good test cases can be amortized across the whole lifetime of the
    software being developed. In fact, in a long-running software project, the test
    cases form a **test suite** that is part of the project, and is stored along with
    the code of the project proper. Whenever the software is updated, **regression
    testing** is performed: the test cases that have been developed are rerun on the
    program to make sure that the program still works properly.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们构建了一套良好覆盖率的测试用例，并且确信代码在它们上面运行正常，那么我们该怎么处理这些测试用例呢？也许我们应该把它们丢掉 —— 毕竟，程序是正常工作的；我们为什么需要测试用例呢？一个原因是软件不是静态的；随着其中的错误被修复和新功能被添加，它随着时间的推移而演变。为软件的一个版本开发的测试用例很可能也对以后的版本有用。在开发好的测试用例上投入的时间可以在开发的整个生命周期中分摊。事实上，在一个长期运行的软件项目中，测试用例形成了项目的一部分，是项目的代码一起存储的。每当软件更新时，都会执行**回归测试**：已经开发的测试用例会在程序上重新运行，以确保程序仍然正常工作。
- en: Often regression testing can be automated; the output of the program when run
    on the existing test cases is saved in a file. When the new version of the program
    is run on the regression tests, its output is compared to the previous output
    to make sure that it has not changed -- that the program has not "regressed".
    There are tools available, such as [expect](http://expect.nist.gov/), that make
    the writing of test harnesses for even complex regression tests easier. Expect
    makes it easy to generate program input and to automatically compare the output
    against the expected output while ignoring unimportant differences.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 常常，回归测试可以被自动化；当程序在现有的测试用例上运行时，其输出被保存在一个文件中。当程序的新版本在回归测试上运行时，它的输出被与先前的输出进行比较，以确保它没有改变
    —— 即程序没有“退化”。有一些可用的工具，比如[expect](http://expect.nist.gov/)，可以使编写复杂回归测试的测试框架变得更容易。Expect使得生成程序输入以及自动比较输出与预期输出变得容易，同时忽略不重要的差异。
- en: When an existing program is updated, new test cases typically need to be added
    to the regression test suite. If the program was updated to fix a bug, a test
    case should be added that causes the bug to show up. If new features are added,
    new test cases relating to that feature should be added as well.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当现有程序更新时，通常需要向回归测试套件中添加新的测试用例。如果程序更新以修复错误，则应添加导致错误出现的测试用例。如果添加了新功能，则还应添加与该功能相关的新测试用例。
- en: Testing and debugging
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试和调试
- en: Testing only tells us whether a program is correct or not; it doesn't usually
    tell us where the bug is. But careful unit testing of a program can help considerably
    in debugging. One of the hardest things in debugging a complex program is knowing
    what to trust, because you don't know where the error is. If  the individual modules
    of the program have been carefully unit tested, this can help you debug because
    you gain confidence that those modules can be relied upon to perform their function.
    Good specifications are also useful because they allow you to decide whether or
    not a given piece of code is doing what it is supposed to in isolation from the
    rest of the program.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 测试只告诉我们一个程序是否正确；它通常不告诉我们错误在哪里。但是，对程序进行仔细的单元测试在调试时可以起到相当大的帮助。调试复杂程序中最困难的事情之一就是知道什么是可信的，因为你不知道错误在哪里。如果程序的各个模块已经经过了仔细的单元测试，这可以帮助你进行调试，因为你会对这些模块能够执行其功能而感到有信心。良好的规范也是有用的，因为它们允许你决定一个给定的代码片段是否在与程序的其余部分隔离的情况下执行它应该执行的操作。
- en: Once you find a bug, it is tempting to slap a quick fix into the code and move
    on. This is quite dangerous. Industry statistics show that about *one in every
    three* bug fixes introduces a new bug! If a bug is difficult to find, it is often
    because the program logic is complex and hard to reason about. You should think
    carefully about why the bug happened in the first place and what the right solution
    to the problem is. Too often programmers simply put a "band-aid" on the code and
    hope that it does the trick. Regression testing is important whenever a bug fix
    is introduced, but nothing can replace careful thinking about the code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦发现一个 bug，很容易就想着快速修复代码然后继续。这是非常危险的。行业统计数据显示，大约*三分之一*的 bug 修复会引入新的 bug！如果一个
    bug 很难找到，通常是因为程序逻辑复杂且难以理解。你应该仔细思考为什么 bug 会发生以及问题的正确解决方案是什么。太多程序员只是简单地在代码上贴上"创可贴"，希望它能奏效。每当引入
    bug 修复时，回归测试都是重要的，但没有什么能取代对代码的仔细思考。
- en: More reading
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多阅读
- en: 'S.L. Pfleeger, *Software Engineering: Theory and Practice*.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S.L. Pfleeger，*软件工程：理论与实践*。
- en: G.J. Myers, *The Art of Software Testing*.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: G.J. Myers，*软件测试的艺术*。
