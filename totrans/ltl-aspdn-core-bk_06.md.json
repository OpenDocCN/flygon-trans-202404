["```\nhttp://localhost:5000/signin-facebook \n```", "```\nservices\n    .AddAuthentication()\n    .AddFacebook(options =>\n    {\n        options.AppId = Configuration[\"Facebook:AppId\"];\n        options.AppSecret = Configuration[\"Facebook:AppSecret\"];\n    }); \n```", "```\ndotnet user-secrets --help \n```", "```\ndotnet user-secrets set Facebook:AppId <paste app id>\ndotnet user-secrets set Facebook:AppSecret <paste app secret> \n```", "```\n[Authorize]\npublic class TodoController : Controller\n{\n    // ...\n} \n```", "```\nusing Microsoft.AspNetCore.Authorization; \n```", "```\n[Authorize]\npublic class TodoController : Controller\n{\n    private readonly ITodoItemService _todoItemService;\n    private readonly UserManager<ApplicationUser> _userManager;\n\n    public TodoController(ITodoItemService todoItemService,\n        UserManager<ApplicationUser> userManager) {\n        _todoItemService = todoItemService;\n        _userManager = userManager;\n    }\n\n    // ...\n} \n```", "```\nusing Microsoft.AspNetCore.Identity; \n```", "```\npublic async Task<IActionResult> Index() {\n    var currentUser = await _userManager.GetUserAsync(User);\n    if (currentUser == null) return Challenge();\n\n    var todoItems = await _todoItemService.GetIncompleteItemsAsync(currentUser);\n\n    var model = new TodoViewModel()\n    {\n        Items = todoItems\n    };\n\n    return View(model);\n} \n```", "```\nvar currentUser = await _userManager.GetUserAsync(User); \n```", "```\nif (currentUser == null) return Challenge(); \n```", "```\npublic interface ITodoItemService\n{\n    Task<IEnumerable<TodoItem>> GetIncompleteItemsAsync(ApplicationUser user);\n\n    // ...\n} \n```", "```\npublic string OwnerId { get; set; } \n```", "```\ndotnet ef migrations add AddItemOwnerId \n```", "```\ndotnet ef database update \n```", "```\npublic async Task<IEnumerable<TodoItem>> GetIncompleteItemsAsync(ApplicationUser user)\n{\n    return await _context.Items\n        .Where(x => x.IsDone == false && x.OwnerId == user.Id)\n        .ToArrayAsync();\n} \n```", "```\npublic async Task<IActionResult> AddItem(NewTodoItem newItem) {\n    if (!ModelState.IsValid)\n    {\n        return BadRequest(ModelState);\n    }\n\n    var currentUser = await _userManager.GetUserAsync(User);\n    if (currentUser == null) return Unauthorized();\n\n    var successful = await _todoItemService.AddItemAsync(newItem, currentUser);\n    if (!successful)\n    {\n        return BadRequest(new { error = \"Could not add item.\" });\n    }\n\n    return Ok();\n}\n\npublic async Task<IActionResult> MarkDone(Guid id) {\n    if (id == Guid.Empty) return BadRequest();\n\n    var currentUser = await _userManager.GetUserAsync(User);\n    if (currentUser == null) return Unauthorized();\n\n    var successful = await _todoItemService.MarkDoneAsync(id, currentUser);\n    if (!successful) return BadRequest();\n\n    return Ok();\n} \n```", "```\nTask<bool> AddItemAsync(NewTodoItem newItem, ApplicationUser user);\n\nTask<bool> MarkDoneAsync(Guid id, ApplicationUser user); \n```", "```\npublic async Task<bool> AddItemAsync(NewTodoItem newItem, ApplicationUser user) {\n    var entity = new TodoItem\n    {\n        Id = Guid.NewGuid(),\n        OwnerId = user.Id,\n        IsDone = false,\n        Title = newItem.Title,\n        DueAt = DateTimeOffset.Now.AddDays(3)\n    };\n\n    // ...\n} \n```", "```\npublic async Task<bool> MarkDoneAsync(Guid id, ApplicationUser user) {\n    var item = await _context.Items\n        .Where(x => x.Id == id && x.OwnerId == user.Id)\n        .SingleOrDefaultAsync();\n\n    // ...\n} \n```", "```\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing AspNetCoreTodo.Models;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace AspNetCoreTodo.Controllers\n{\n    [Authorize(Roles = \"Administrator\")]\n    public class ManageUsersController : Controller\n    {\n        private readonly UserManager<ApplicationUser> _userManager;\n\n        public ManageUsersController(UserManager<ApplicationUser> userManager) {\n            _userManager = userManager;\n        }\n\n        public async Task<IActionResult> Index() {\n            var admins = await _userManager\n                .GetUsersInRoleAsync(\"Administrator\");\n\n            var everyone = await _userManager.Users\n                .ToArrayAsync();\n\n            var model = new ManageUsersViewModel\n            {\n                Administrators = admins,\n                Everyone = everyone\n            };\n\n            return View(model);\n        }\n    }\n} \n```", "```\nusing System.Collections.Generic;\nusing AspNetCoreTodo.Models;\n\nnamespace AspNetCoreTodo\n{\n    public class ManageUsersViewModel\n    {\n        public IEnumerable<ApplicationUser> Administrators { get; set; }\n\n        public IEnumerable<ApplicationUser> Everyone { get; set; }\n    }\n} \n```", "```\n@model ManageUsersViewModel\n\n@{\n    ViewData[\"Title\"] = \"Manage users\";\n}\n\n<h2>@ViewData[\"Title\"]</h2>\n\n<h3>Administrators</h3>\n\n<table class=\"table\">\n    <thead>\n        <tr>\n            <td>Id</td>\n            <td>Email</td>\n        </tr>\n    </thead>\n\n    @foreach (var user in Model.Administrators)\n    {\n        <tr>\n            <td>@user.Id</td>\n            <td>@user.Email</td>\n        </tr>\n    }\n</table>\n\n<h3>Everyone</h3>\n\n<table class=\"table\">\n    <thead>\n        <tr>\n            <td>Id</td>\n            <td>Email</td>\n        </tr>\n    </thead>\n\n    @foreach (var user in Model.Everyone)\n    {\n        <tr>\n            <td>@user.Id</td>\n            <td>@user.Email</td>\n        </tr>\n    }\n</table> \n```", "```\nif (env.IsDevelopment())\n{\n    // (... some code)\n\n    // Make sure there's a test admin account\n    EnsureRolesAsync(roleManager).Wait();\n    EnsureTestAdminAsync(userManager).Wait();\n} \n```", "```\npublic void Configure(IApplicationBuilder app,\n    IHostingEnvironment env,\n    UserManager<ApplicationUser> userManager,\n    RoleManager<IdentityRole> roleManager) {\n    // ...\n} \n```", "```\nprivate static async Task EnsureRolesAsync(RoleManager<IdentityRole> roleManager) {\n    var alreadyExists = await roleManager.RoleExistsAsync(Constants.AdministratorRole);\n\n    if (alreadyExists) return;\n\n    await roleManager.CreateAsync(new IdentityRole(Constants.AdministratorRole));\n} \n```", "```\nnamespace AspNetCoreTodo\n{\n    public static class Constants\n    {\n        public const string AdministratorRole = \"Administrator\";\n    }\n} \n```", "```\nprivate static async Task EnsureTestAdminAsync(UserManager<ApplicationUser> userManager) {\n    var testAdmin = await userManager.Users\n        .Where(x => x.UserName == \"admin@todo.local\")\n        .SingleOrDefaultAsync();\n\n    if (testAdmin != null) return;\n\n    testAdmin = new ApplicationUser { UserName = \"admin@todo.local\", Email = \"admin@todo.local\" };\n    await userManager.CreateAsync(testAdmin, \"NotSecure123!!\");\n    await userManager.AddToRoleAsync(testAdmin, Constants.AdministratorRole);\n} \n```", "```\n@using Microsoft.AspNetCore.Identity\n@using AspNetCoreTodo.Models\n\n@inject SignInManager<ApplicationUser> SignInManager\n@inject UserManager<ApplicationUser> UserManager\n\n@if (SignInManager.IsSignedIn(User))\n{\n    var currentUser = await UserManager.GetUserAsync(User);\n\n    var isAdmin = currentUser != null\n        && await UserManager.IsInRoleAsync(currentUser, Constants.AdministratorRole);\n\n    if (isAdmin) {\n        <ul class=\"nav navbar-nav navbar-right\">\n            <li><a asp-controller=\"ManageUsers\" asp-action=\"Index\">Manage Users</a></li>\n        </ul>\n    }\n} \n```", "```\n<div class=\"navbar-collapse collapse\">\n    <ul class=\"nav navbar-nav\">\n        <li><a asp-area=\"\" asp-controller=\"Home\" asp-action=\"Index\">Home</a></li>\n        <li><a asp-area=\"\" asp-controller=\"Home\" asp-action=\"About\">About</a></li>\n        <li><a asp-area=\"\" asp-controller=\"Home\" asp-action=\"Contact\">Contact</a></li>\n    </ul>\n    @await Html.PartialAsync(\"_LoginPartial\")\n    @await Html.PartialAsync(\"_AdminActionsPartial\")\n</div> \n```"]