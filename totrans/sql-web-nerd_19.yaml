- en: '| [![Head of the Charles Regatta, Sunday, October 18, 1998\.  From the footbridge
    to Harvard Business School](../Images/19261155a6d71baa86b0d7675a7758d2.jpg)](/http://philip.greenspun.com/images/pcd3562/hoc-25.tcl)
    |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| [![1998年10月18日，星期日的查尔斯划船赛。  从步行桥到哈佛商学院](../Images/19261155a6d71baa86b0d7675a7758d2.jpg)](/http://philip.greenspun.com/images/pcd3562/hoc-25.tcl)
    |'
- en: 'Appendix A: Setting up your own RDBMS'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录A：设置您自己的RDBMS
- en: by [Philip Greenspun](http://philip.greenspun.com/), part of [SQL for Web Nerds](index.html)
    |
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Philip Greenspun](http://philip.greenspun.com/)编写，是[Web网络数据库编程指南](index.html)的一部分
    |
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This book was written for students at MIT who have access to our Web/db development
    systems. The second category of reader who could use this book painlessly is the
    corporate slave who works at Bloatco, Inc. where they have a professionally-maintained
    Oracle server. If you are unfortunate enough to fall outside of those categories,
    you might need to install and maintain your own RDBMS. This appendix is intended
    to help you choose and run an RDBMS that will be good for learning SQL and that
    will let you grow into running production Web sites.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是为麻省理工学院的学生编写的，他们可以访问我们的Web/db开发系统。第二类可以轻松使用本书的读者是在Bloatco，Inc.工作的企业奴隶，在那里他们有一个专业维护的Oracle服务器。如果你不幸不属于这些类别，你可能需要安装和维护自己的RDBMS。本附录旨在帮助你选择并运行一个适合学习SQL的RDBMS，并让你逐渐发展成为运行生产网站的能力。
- en: Choosing an RDBMS Vendor (Quick and Dirty)
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择关系数据库管理系统供应商（快速而粗糙）
- en: '[![A fruit and flower market in central Stockholm](../Images/8552a6f7b416fa6121ab0db0b4da74fc.jpg)](/http://philip.greenspun.com/images/pcd0511/stockholm-fruit-and-flower-market-101.tcl)
    The quick and dirty way to choose a database management system is to start from
    a list of products that seem viable in the long term. Basically you can choose
    from among three:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[![斯德哥尔摩市中心的水果和花卉市场](../Images/8552a6f7b416fa6121ab0db0b4da74fc.jpg)](/http://philip.greenspun.com/images/pcd0511/stockholm-fruit-and-flower-market-101.tcl)
    选择数据库管理系统的快速而粗略的方法是从一份长期看来似乎可行的产品列表开始。基本上你可以从以下三种中选择：'
- en: Microsoft SQL Server (popularity maintained by Microsoft's overall market power)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软 SQL Server（受微软整体市场影响力的支持）
- en: Oracle (you won't get fired)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle（你不会被解雇）
- en: PostgreSQL (free open-source)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL（免费开源）
- en: If want to ignore the RDBMS and concentrate your energy on attacking higher-level
    application challenges, Oracle is the best choice. It is the most powerful and
    feature-rich RDBMS. You can run the same software on a $500 PC or in a $5 million
    multiply redundant server configuration.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想忽略RDBMS，集中精力攻击更高层次的应用程序挑战，Oracle是最好的选择。它是功能最强大且功能最丰富的RDBMS。你可以在一台500美元的个人电脑上或者在一台500万美元的多重冗余服务器配置中运行相同的软件。
- en: PostgreSQL is an interesting alternative. It is free and open-source. Like Oracle,
    it has optimistic locking (writers need not wait for readers; readers need not
    wait for writers). PostgreSQL can be easier to install and maintain than Oracle.
    PostgreSQL was built from the ground up as an object-relational database and offers
    some important features that Oracle still lacks. Business folks who are more concerned
    with support, reliability, and the possibility of redundancy may question your
    choice of PostgreSQL, however. See [www.postgresql.org](http://www.postgresql.org)
    for the latest on this rapidly evolving system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL是一个有趣的替代选择。它是免费且开源的。与Oracle一样，它具有乐观锁定（写者不需要等待读者；读者不需要等待写者）。PostgreSQL的安装和维护可能比Oracle更容易。PostgreSQL是从头开始构建的对象关系数据库，并提供了一些Oracle仍然缺少的重要功能。然而，更关心支持、可靠性和冗余可能性的业务人士可能会质疑你选择PostgreSQL的决定。请查看[www.postgresql.org](http://www.postgresql.org)了解这个快速发展系统的最新信息。
- en: Microsoft SQL Server is an uninteresting alternative. Microsoft started with
    the source code from Sybase and has gradually improved the product. The system
    can be problematic for Web use because of its traditional pessimistic locking
    architecture. If you hire a new programmer and he or she executes a slow-to-return
    query, users won't be able to update information, place orders, or make comments
    until the query completes. In theory the management of these locks can be manually
    adjusted but in practice Web programmers never have the time, ability, or inclination
    to manage locks properly. SQL Server is generally behind Oracle in terms of features,
    e.g., the ability to run Java inside the database, SQL extensions that are convenient
    for data warehousing, or layered products that help organizations with extreme
    performance or reliability demands. All of this said, SQL Server probably won't
    disappear because Microsoft has so much power in a large portion of the server
    world. So if you're part of an organization that is 100 percent Microsoft and
    people are already skilled at maintaining SQL Server, it is a reasonable technical
    decision to continue to use it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 微软SQL Server是一个不太有趣的选择。微软从Sybase的源代码开始，并逐渐改进了产品。该系统在Web使用中可能存在问题，因为其传统的悲观锁定架构。如果您雇用了一个新程序员，他或她执行了一个返回缓慢的查询，用户将无法更新信息、下订单或发表评论直到查询完成。理论上，这些锁的管理可以手动调整，但实际上Web程序员从来没有时间、能力或意愿正确管理锁。在功能方面，SQL
    Server通常落后于Oracle，例如，能够在数据库内运行Java，对数据仓库方便的SQL扩展，或者帮助组织应对极端性能或可靠性需求的分层产品。尽管如此，SQL
    Server可能不会消失，因为微软在服务器领域的很大一部分拥有如此强大的影响力。因此，如果您所在的组织100%使用微软，并且人员已经熟练掌握维护SQL Server，继续使用它是一个合理的技术决定。
- en: Choosing an RDBMS Vendor (From First Principles)
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择关系数据库管理系统供应商（从第一原则出发）
- en: 'Here are the factors that we think are important in choosing an RDBMS to sit
    behind a Web site:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们认为在选择用于网站后端的关系数据库管理系统时重要的因素：
- en: cost/complexity to administer
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理成本/复杂性
- en: lock management system
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 锁管理系统
- en: full-text indexing option
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全文索引选项
- en: maximum length of VARCHAR data type
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VARCHAR数据类型的最大长度
- en: ease of running standard programming languages internally
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行标准编程语言的内部便利性
- en: support
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持
- en: Cost/Complexity to Administer
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 管理成本/复杂性
- en: '[![Stockholm viewed from Stadshuset](../Images/ecb5d6d6d42541ce6f9cd529c2a5973b.jpg)](/http://philip.greenspun.com/images/pcd0510/stockholm-from-stadshuset-6.tcl)
    Sloppy RDBMS administration is one of the most common causes of downtime at sophisticated
    sites. If you don''t have an experienced staff of database administrators to devote
    to your site, you should consider either outsourcing database administration or
    running a simple RDBMS such as PostgreSQL.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![从市政厅俯瞰斯德哥尔摩](../Images/ecb5d6d6d42541ce6f9cd529c2a5973b.jpg)](/http://philip.greenspun.com/images/pcd0510/stockholm-from-stadshuset-6.tcl)
    粗糙的关系数据库管理系统管理是复杂网站停机的最常见原因之一。如果您没有经验丰富的数据库管理员团队来为您的网站提供支持，您应该考虑外包数据库管理或运行简单的关系数据库管理系统，如PostgreSQL。'
- en: Lock Management System
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 锁管理系统
- en: '[![Guard at Royal Palace in Gamla Stan in central Stockholm](../Images/d309fc7353e0d3e04534dcb6037571f4.jpg)](/http://philip.greenspun.com/images/pcd0511/stockholm-gamla-stan-royal-palace-guard-80.tcl)
    Relational database management systems exist to support concurrent users. If you
    didn''t have 100 people simultaneously updating information, you''d probably be
    better off with a Perl script than a commercial RDBMS (i.e., 100 MB of someone
    else''s C code).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![斯德哥尔摩中央斯坦古城皇宫的卫兵](../Images/d309fc7353e0d3e04534dcb6037571f4.jpg)](/http://philip.greenspun.com/images/pcd0511/stockholm-gamla-stan-royal-palace-guard-80.tcl)
    关系数据库管理系统存在是为了支持并发用户。如果没有100人同时更新信息，你可能最好使用Perl脚本而不是商业关系数据库管理系统（即100 MB的他人C代码）。'
- en: All database management systems handle concurrency problems with locks. Before
    an executing statement can modify some data, it must grab a lock. While this lock
    is held, no other simultaneously executing SQL statement can update the same data.
    In order to prevent another user from reading half-updated data, while this lock
    is held, no simultaneously executing SQL statement can even *read* the data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据库管理系统都使用锁来处理并发问题。在执行语句修改某些数据之前，必须获取一个锁。在持有此锁时，没有其他同时执行的SQL语句可以更新相同的数据。为了防止另一个用户读取半更新的数据，当持有此锁时，没有同时执行的SQL语句甚至可以*读取*数据。
- en: '*Readers must wait for writers to finish writing. Writers must wait for readers
    to finish reading.*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*读者必须等待写者完成写作。写者必须等待读者完成阅读。*'
- en: This kind of system is simple to implement, works great in the research lab,
    and can be proven correct mathematically. The only problem with it? It doesn't
    work. Sometimes it doesn't work because of a bug. A particular RDBMS's implementation
    of this scheme get confused and stuck when there are a bunch of users. More often
    it doesn't work because pessimistic locking *is* a bug. A programmer writes an
    hour-long back-end query and forgets that by doing so he or she will cause every
    updating page on the Web site to wait for the full hour.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种系统实现简单，在研究实验室中运行良好，并且可以在数学上证明正确。唯一的问题是？它不起作用。有时它不起作用是因为有 bug。特定 RDBMS 对此方案的实现在有大量用户时会混乱和卡住。更常见的情况是它不起作用是因为悲观锁定*是*一个
    bug。程序员编写了一个长达一小时的后端查询，却忘记了这样做会导致网站上的每个更新页面等待整整一个小时。
- en: With the Oracle RDBMS, *readers never wait for writers and writers never wait
    for readers.* If a SELECT starts reading at 9:01 and encounters a row that was
    updated (by another session) at 9:02, Oracle reaches into a rollback segment and
    digs up the pre-update value for the SELECT (this preserves the *Isolation* requirement
    of the ACID test). A transaction does not need to take locks unless it is modifying
    a table and, even then, only takes locks on the specific rows that are to be modified.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Oracle RDBMS，*读者永远不用等待写入者，写入者也永远不用等待读者*。如果一个 SELECT 从 9:01 开始读取，并在 9:02 遇到另一个会话更新的行，Oracle
    会进入回滚段，并找出 SELECT 的预更新值（这保留了 ACID 测试的*隔离*要求）。事务不需要锁定，除非它正在修改表，即使是这样，也只在要修改的特定行上锁定。
- en: This is the kind of RDBMS locking architecture that you want for a Web site.
    Oracle and PostgreSQL offer it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您希望用于网站的关系数据库管理系统锁定架构。Oracle 和 PostgreSQL 提供了这种架构。
- en: Full-text Indexing Option
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 全文索引选项
- en: Suppose that a user says he wants to find out information on "dogs". If you
    had a bunch of strings in the database, you'd have to search them with a query
    like
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '假设用户说他想了解关于“dogs”的信息。如果您在数据库中有一堆字符串，您将不得不使用类似于以下查询进行搜索:'
- en: '[PRE0]'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![A door in Skansen in Stockholm](../Images/a231dae3e855c8fd3026f198d01c7e15.jpg)](/http://philip.greenspun.com/images/pcd0511/stockholm-skansen-door-55.tcl)
    This requires the RDBMS to read every row in the table, which is slow. Also, this
    won''t turn up magazines whose description includes the word "dog".'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[![斯德哥尔摩斯坎森的一扇门](../Images/a231dae3e855c8fd3026f198d01c7e15.jpg)](/http://philip.greenspun.com/images/pcd0511/stockholm-skansen-door-55.tcl)
    这需要关系数据库管理系统读取表中的每一行，这样很慢。而且，这不会显示描述中包含“dog”一词的杂志。'
- en: A full-text indexer builds a data structure (the index) on disk so that the
    RDBMS no longer has to scan the entire table to find rows containing a particular
    word or combination of words. The software is smart enough to be able to think
    in terms of word stems rather than words. So "running" and "run" or "dog" and
    "dogs" can be interchanged in queries. Full-text indexers are also generally able
    to score a user-entered phrase against a database table of documents for relevance
    so that you can query for the most relevant matches.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 全文索引器在磁盘上构建一个数据结构（索引），这样 RDBMS 不再需要扫描整个表以找到包含特定单词或单词组合的行。该软件足够智能，可以考虑单词词干而不是单词。因此，“running”和“run”或“dog”和“dogs”可以在查询中互换。全文索引器通常还能够根据用户输入的短语对文档数据库表进行相关性评分，以便您查询最相关的匹配项。
- en: Finally, the modern text search engines are very smart about how words relate.
    So they might deliver a document that did *not* contain the word "dog" but did
    contain "Golden Retriever". This makes services like classified ads, discussion
    forums, etc., much more useful to users.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，现代文本搜索引擎非常聪明地处理单词之间的关系。因此，它们可能提供一个不包含“dog”一词但包含“Golden Retriever”的文档。这使得分类广告、讨论论坛等服务对用户更加有用。
- en: Relational database management system vendors are gradually incorporating full-text
    indexing into their products. Sadly, there is no standard for querying using this
    index. Thus, if you figure out how to query Oracle 8.1 with ConText for "rows
    relating to 'running' or its synonyms", the SQL syntax will not be useful for
    asking the same question of Microsoft SQL Server 7.0 with its corresponding full-text
    indexing option.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库管理系统供应商逐渐将全文索引纳入其产品中。遗憾的是，没有关于使用此索引查询的标准。因此，如果您弄清楚如何使用 ConText 查询 Oracle
    8.1 中与“running”或其同义词相关的行，那么该 SQL 语法将无法用于询问具有相应全文索引选项的 Microsoft SQL Server 7.0
    相同问题。
- en: 'My best experiences have been with the Illustra/PLS combination. I fed it 500
    short classified ads for photography equipment then asked "What word is most related
    to *Nikon*". The answer according to Illustra/PLS: *Nikkor* (Nikon''s brand name
    for lenses).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我最好的经验是与 Illustra/PLS 结合使用。我给它输入了 500 条短的摄影设备分类广告，然后问："与 *Nikon* 最相关的词是什么"。根据
    Illustra/PLS 的答案：*Nikkor*（尼康的镜头品牌名）。
- en: Maximum Length of VARCHAR Data Type
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: VARCHAR 数据类型的最大长度
- en: '[![Malibu, California.](../Images/9952bcf9896291c4f8b0dbcdb16e67ba.jpg)](/http://philip.greenspun.com/images/pcd1626/malibu-long-hair-37.tcl)
    You might naively expect a relational database management system to provide abstraction
    for data storage. After defining a column to hold a character string, you''d expect
    to be able to give the DBMS a ten-character string or a million-character string
    and have each one stored as efficiently as possible.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[![加州马里布。](../Images/9952bcf9896291c4f8b0dbcdb16e67ba.jpg)](/http://philip.greenspun.com/images/pcd1626/malibu-long-hair-37.tcl)
    你可能天真地期望关系数据库管理系统提供数据存储的抽象。在定义一个列来容纳字符字符串之后，你希望能够给 DBMS 一个包含十个字符的字符串或一个包含一百万个字符的字符串，并希望每个字符串都能尽可能高效地存储。'
- en: 'In practice, current commercial systems are very bad at storing unexpectedly
    long data, e.g., Oracle only lets you have 4,000 characters in a VARCHAR. This
    is okay if you''re building a corporate accounting system but bad for a public
    Web site. You can''t be sure how long a user''s classified ad or bulletin board
    posting is going to be. Modern database vendors typically provide a character
    large object (CLOB) data type. A CLOB theoretically allows you to store arbitrarily
    large data. However, in practice there are so many restrictions on a CLOB column
    that it isn''t very useful. For example, with Oracle 8i you can''t use a CLOB
    in a SQL WHERE clause and thus the preceding "LIKE ''%dogs%''" would fail. You
    can''t build a standard index on a LOB column. You may also have a hard time getting
    strings into or out of a LOB. The Oracle SQL parser only accepts string literals
    up to 4,000 characters in length. After that, you''ll have to use special C API
    calls. LOBs will give your Oracle database administrator fits: they break the
    semantics of EXPORT and IMPORT. At least as of Oracle 8.1.6, if you export a database
    containing LOBs you won''t be able to import it to another Oracle installation
    unless that installation happens to have a tablespace with the same name as the
    one where the LOBs were stored in the exported installation.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，当前的商业系统在存储意外长的数据方面非常糟糕，例如，Oracle 只允许在 VARCHAR 中使用 4,000 个字符。如果你正在构建一个企业会计系统，这还可以接受，但对于公共网站来说就不好了。你无法确定用户的分类广告或公告板帖子的长度会是多少。现代数据库供应商通常提供字符大对象（CLOB）数据类型。CLOB
    理论上允许你存储任意大的数据。然而，在实践中，对 CLOB 列有很多限制，因此它并不是很有用。例如，在 Oracle 8i 中，你不能在 SQL WHERE
    子句中使用 CLOB，因此前面的 "LIKE '%dogs%'" 将失败。你无法在 LOB 列上构建标准索引。你可能很难将字符串放入或取出 LOB。Oracle
    SQL 解析器只接受长度最长为 4,000 个字符的字符串文字。之后，你将不得不使用特殊的 C API 调用。LOB 会让你的 Oracle 数据库管理员头痛：它们破坏了
    EXPORT 和 IMPORT 的语义。至少在 Oracle 8.1.6 中，如果你导出包含 LOB 的数据库，你将无法将其导入到另一个 Oracle 安装中，除非该安装恰好有一个与在导出的安装中存储
    LOB 的表空间同名的表空间。
- en: PostgreSQL has a "text" data type that theoretically has no limit. However,
    an entire PostgreSQL row must be no longer than 8,000 characters. So in practice
    PostgreSQL is less powerful than Oracle in this respect.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 有一个理论上没有限制的 "text" 数据类型。然而，整个 PostgreSQL 行的长度不能超过 8,000 个字符。所以实际上，在这方面
    PostgreSQL 比 Oracle 功能更弱。
- en: '*** research Microsoft SQL Server but last I checked it was 255 characters!
    *****'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*** 调查 Microsoft SQL Server，但据我所知，它是 255 个字符！ *****'
- en: '*Caveat emptor.*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*购买者自负。*'
- en: Ease of Running Standard Programming Languages Internally
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内部运行标准编程语言的便利性
- en: Within Oracle it is fairly easy to run Java and the quasi-standard PL/SQL. Within
    PostgreSQL it is fairly easy to run Perl, Tcl, and a sort-of-PL/SQL-like PL/pgSQL.
    Within Microsoft SQL Server ***** (research this).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Oracle 中，运行 Java 和准标准的 PL/SQL 相当容易。在 PostgreSQL 中，运行 Perl、Tcl 和类似于 PL/SQL
    的 PL/pgSQL 也相当容易。在 Microsoft SQL Server *****（需要调查）中。
- en: Support
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 支持
- en: 'In theory you won''t be calling for support very often but you want to make
    sure that when you do it is to an organization that takes RDBMS reliability and
    uptime very seriously. ### Paying an RDBMS Vendor [![Big Save.  Hawaii](../Images/35250ea3dadd6adfc71233c91d9bb64c.jpg)](/http://philip.greenspun.com/images/pcd4235/big-save-30.4.jpg)
    "PostgreSQL is available without cost," is the opening to Chapter 1 of the PostgreSQL
    documentation. Microsoft has the second easiest-to-figure-out pricing: visit [http://www.microsoft.com/sql/](http://www.microsoft.com/sql/)
    and click on "pricing and licensing". The price in 1998 was $4400 for software
    that could be used on a 4-CPU machine sitting behind a Web site. As of September
    2000 they were charging either $20,000 or $80,000 for a 4-CPU Web server, depending
    on whether you wanted "enterprise" or "standard" edition.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，你不会经常需要支持，但你希望确保当你需要时，能够得到一个非常重视关系型数据库可靠性和正常运行时间的组织。### 支付关系型数据库供应商 [![大节省。夏威夷](../Images/35250ea3dadd6adfc71233c91d9bb64c.jpg)](/http://philip.greenspun.com/images/pcd4235/big-save-30.4.jpg)
    “PostgreSQL可免费获得，”是PostgreSQL文档第1章的开头。微软的定价排名第二最容易理解：访问[http://www.microsoft.com/sql/](http://www.microsoft.com/sql/)并点击“定价和许可”。1998年的价格为$4400，可用于4-CPU机器，用于Web站点后面。截至2000年9月，他们为4-CPU
    Web服务器收费$20,000或$80,000，具体取决于您想要“企业”版还是“标准”版。
- en: Despite its industrial heritage, Oracle can be much cheaper than Microsoft.
    Microsoft charges $500 for a crippled developer edition of SQL Server; Oracle
    lets developers download the real thing for free from technet.oracle.com. Microsoft
    wants $20,000 per CPU; Oracle negotiates the best deal that they can get but lately
    has been selling startups a "garage" license for $10,000 for two years.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管拥有工业遗产，Oracle比微软要便宜得多。微软为SQL Server的残缺开发者版本收费$500；而Oracle允许开发者从technet.oracle.com免费下载完整版本。微软每CPU要价$20,000；Oracle会尽力争取最优惠的交易，但最近一直向初创公司出售为期两年的“车库”许可证，售价为$10,000。
- en: Performance
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能
- en: '[![Orangutan.  Audubon Zoo.  New Orleans, Louisiana. ](../Images/3f3ac774b5c56303cbe88b0ae4f72218.jpg)](/http://philip.greenspun.com/images/pcd0741/no-zoo-orangutan-lazing-13.tcl)
    Be assured that any RDBMS product will be plenty slow. We once had 70,000 rows
    of data to insert into Oracle8\. Each row contained six numbers. It turned out
    that the data wasn''t in the most convenient format for importation so we wrote
    a one-line Perl script to reformat it. It took less than one second to read all
    70,000 rows, reformat them, and write them back to disk in one file. Then we started
    inserting them into an Oracle 8 table from a custom C application. It took about
    20 minutes (60 rows/second). By using SQL*Loader we probably could have approached
    1000 rows/second but that still would have been 70 times slower than the Perl
    script. Providing application programmers with the ACID guarantees is always going
    to be slow.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[![猩猩。奥杜邦动物园。路易斯安那州新奥尔良。](../Images/3f3ac774b5c56303cbe88b0ae4f72218.jpg)](/http://philip.greenspun.com/images/pcd0741/no-zoo-orangutan-lazing-13.tcl)
    请放心，任何关系型数据库管理系统产品都会相当慢。我们曾经有70,000行数据要插入Oracle8。每行包含六个数字。结果发现数据并不是最方便的导入格式，所以我们编写了一个一行的Perl脚本来重新格式化它。读取所有70,000行，重新格式化并将它们写回磁盘的一个文件不到一秒。然后我们开始从自定义C应用程序向Oracle
    8表中插入它们。大约需要20分钟（每秒60行）。通过使用SQL*Loader，我们可能可以接近每秒1000行，但仍然比Perl脚本慢70倍。为应用程序员提供ACID保证总是会很慢。'
- en: There are several ways to achieve high performance. If most of your activity
    is queries, you could start by buying a huge multi-processor computer with enough
    RAM to hold your entire database at once. Unfortunately, if you are paying by
    the CPU, your RDBMS vendor will probably give your bank account a reaming that
    it will not soon forget. And if you are processing a lot of INSERTs and UPDATEs,
    all those CPUs bristling with RAM won't help you. The bottleneck will be disk
    spindle contention. The solution to this is to chant "Oh what a friend I have
    in Seagate." Disks are slow. Very slow. Literally almost one million times slower
    than the computer. It would be best to avoid ever going to disk as we did in the
    case of SELECTs by buying up enough RAM to hold the entire data set. However,
    the Durability requirement in the ACID test for transactions means that some record
    of a transaction will have to be written to a medium that won't be erased in the
    event of a power failure. If a disk can only do 100 seeks a second and you only
    have one disk, your RDBMS is going to be hard pressed to do more than about 100
    updates a second.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以实现高性能。如果你的大部分活动都是查询，你可以先购买一台大型多处理器计算机，并配备足够的 RAM 来一次性容纳整个数据库。不幸的是，如果你按
    CPU 付费，你的关系型数据库管理系统（RDBMS）供应商可能会大肆消耗你的银行账户，这是你不会忘记的。而且如果你处理大量的插入和更新，那些充斥着 RAM
    的 CPU 对你也没有帮助。瓶颈将是磁盘主轴的竞争。解决这个问题的方法是唱着“哦，我有一个名叫西格特的朋友。” 磁盘很慢。非常慢。实际上几乎比计算机慢了一百万倍。最好避免像我们在
    SELECT 的情况下那样永远不要访问磁盘，方法是购买足够的 RAM 来容纳整个数据集。然而，ACID 测试中的持久性要求意味着一些事务的记录将必须写入在断电情况下不会被抹去的介质上。如果一个磁盘只能每秒执行
    100 次寻址，而且你只有一个磁盘，那么你的 RDBMS 将很难做到每秒更新大约 100 次。
- en: Oracle manages to process more transactions per second than a disk's writes/second
    capacity. What the DBMS does is batch up transactions that come in at roughly
    the same time from different users. It writes enough to disk to make them all
    durable and then returns to those users all at once.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 比磁盘的写入/秒容量处理更多的事务。数据库管理系统所做的是将大致同时来自不同用户的事务批处理。它将足够的数据写入磁盘使它们都是持久的，然后一次返回给这些用户。
- en: The first thing you should do is mirror all of your disks. If you don't have
    the entire database in RAM, this speeds up SELECTs because the disk controller
    can read from whichever disk is closer to the desired track. The opposite effect
    can be achieved if you use "RAID level 5" where data is striped across multiple
    disks. Then the RDBMS has to wait for five disks to seek before it can cough up
    a few rows. Straight mirroring, or "RAID level 1", is what you want.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该做的第一件事是镜像所有磁盘。如果你的整个数据库不在 RAM 中，这会加快 SELECT 的速度，因为磁盘控制器可以从更接近所需磁道的磁盘读取。如果你使用“RAID
    5 级别”，数据会跨多个磁盘进行条带化，那么相反的效果就会产生。然后，关系型数据库管理系统必须等待五个磁盘进行寻址，然后才能提供几行数据。直接镜像，或“RAID
    1 级别”，是你想要的。
- en: The next decision that you must make is "How many disks?" The [*Oracle8i DBA
    Handbook*](http://www.amazon.com/exec/obidos/ASIN/0072121882/pgreenspun-20) (Loney
    and Theriault; 1999) recommends a 7x2 disk configuration as a minimum *compromise*
    for a machine doing nothing but database service. Their *solutions* start at 9x2
    disks and go up to 22x2\. The idea is to keep files that might be written in parallel
    on separate disks so that one can do 2200 seeks/second instead of 100.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你接下来必须做的决定是"要多少个磁盘？" [*Oracle8i DBA 手册*](http://www.amazon.com/exec/obidos/ASIN/0072121882/pgreenspun-20)（Loney
    和 Theriault；1999）推荐最低的 7x2 磁盘配置作为专用于数据库服务的机器的*折衷*。他们的*解决方案*从 9x2 磁盘开始，一直到 22x2。其想法是将可能并行写入的文件保存在不同的磁盘上，以便一个磁盘可以执行
    2200 次/秒的寻址，而不是 100。
- en: 'Here''s the Oracle8 DBA Handbook''s 17-disk (mirrored X2) solution for avoiding
    spindle contention:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Oracle8 DBA 手册对避免主轴竞争的 17 磁盘（镜像 X2）解决方案：
- en: '| Disk | Contents |'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 磁盘 | 内容 |'
- en: '| 1 | Oracle software |'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 1 | Oracle 软件 |'
- en: '| 2 | SYSTEM tablespace |'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 2 | 系统表空间 |'
- en: '| 3 | RBS tablespace (roll-back segment in case a transaction goes badly) |'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 3 | RBS 表空间（如果事务出现问题，则回滚段） |'
- en: '| 4 | DATA tablespace |'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 4 | 数据表空间 |'
- en: '| 5 | INDEXES tablespace (changing data requires changing indices; this allows
    those changes to proceed in parallel) |'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 5 | 索引表空间（更改数据需要更改索引；这允许这些更改并行进行） |'
- en: '| 6 | TEMP tablespace |'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 6 | 临时表空间 |'
- en: '| 7 | TOOLS tablespace |'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 7 | 工具表空间 |'
- en: '| 8 | Online Redo log 1, Control file 1 (these would be separated on a 22-disk
    machine) |'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 8 | 在线重做日志 1，控制文件 1（这些会在一个 22 磁盘的机器上分开） |'
- en: '| 9 | Online Redo log 2, Control file 2 |'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 9 | 在线重做日志 2，控制文件 2 |'
- en: '| 10 | Online Redo log 3, Control file 3 |'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 10 | 在线重做日志 3，控制文件 3 |'
- en: '| 11 | Application Software |'
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 11 | 应用软件 |'
- en: '| 12 | RBS_2 |'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 12 | RBS_2 |'
- en: '| 13 | DATA_2 (tables that tend to be grabbed in parallel with those in DATA)
    |'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 13 | DATA_2（通常与DATA中的表并行抓取的表） |'
- en: '| 14 | INDEXES_2 |'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 14 | INDEXES_2 |'
- en: '| 15 | TEMP_USER |'
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 15 | TEMP_USER |'
- en: '| 16 | Archived redo log destination disk |'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 16 | 存档的重做日志目的地磁盘 |'
- en: '| 17 | Export dump file destination disk |'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 17 | 导出转储文件目的地磁盘 |'
- en: Now that you have lots of disks, you finally have to be very thoughtful about
    how you lay your data out across them. "Enterprise" relational database management
    systems force you to think about where your data files should go. On a computer
    with one disk, this is merely annoying and keeps you from doing development; you'd
    probably get similar performance with a simple RDBMS like PostgreSQL. But the
    flexibility is there in enterprise databases because you know which of your data
    areas tend to be accessed simultaneously and the computer doesn't. So if you do
    have a proper database server with a rack of disk drives, an intelligent manual
    layout can improve performance fivefold.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了很多磁盘，你最终必须非常谨慎地考虑如何在它们之间布置数据。"企业"关系数据库管理系统会迫使你考虑数据文件应该放在哪里。在一台只有一个磁盘的计算机上，这只是令人讨厌的，让你无法进行开发；你可能会选择像PostgreSQL这样的简单关系数据库管理系统获得类似的性能。但是企业数据库具有灵活性，因为你知道哪些数据区域往往会同时访问，而计算机不知道。因此，如果你有一台带有一排磁盘驱动器的适当数据库服务器，智能的手动布局可以将性能提高五倍。
- en: Don't forget to back up
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要忘记备份
- en: '[![Burning car.  New Jersey 1995.](../Images/fbae292452a7fd3fdc9b271acd9bdc76.jpg)](/http://philip.greenspun.com/images/pcd2549/car-roast-23.tcl)
    Be afraid. Be very afraid. Standard Unix or Windows NT file system backups will
    not leave you with a consistent and therefore restoreable database on tape. Suppose
    that your RDBMS is storing your database in two separate Unix filesystem files,
    foo.db and bar.db. Each of these files is 200 MB in size. You start your backup
    program running and it writes the file foo.db to tape. As the backup is proceeding,
    a transaction comes in that requires changes to foo.db and bar.db. The RDBMS makes
    those changes, but the ones to foo.db occur to a portion of the file that has
    already been written out to tape. Eventually the backup program gets around to
    writing bar.db to tape and it writes the new version with the change. Your system
    administrator arrives at 9:00 am and sends the tapes via courier to an off-site
    storage facility.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![燃烧的汽车。1995年新泽西。](../Images/fbae292452a7fd3fdc9b271acd9bdc76.jpg)](/http://philip.greenspun.com/images/pcd2549/car-roast-23.tcl)
    要害怕。非常害怕。标准的Unix或Windows NT文件系统备份不会给你留下一致的、因此可恢复的数据库备份。假设你的关系数据库管理系统将数据库存储在两个不同的Unix文件系统文件中，foo.db和bar.db。每个文件的大小为200
    MB。你启动备份程序并将文件foo.db写入磁带。当备份正在进行时，一个需要对foo.db和bar.db进行更改的事务到来。关系数据库管理系统进行了这些更改，但对foo.db的更改发生在已经写入磁带的文件的一部分上。最终，备份程序开始将bar.db写入磁带，并写入带有更改的新版本。你的系统管理员在上午9:00到达并通过快递将磁带送往离岗存储设施。'
- en: '[![A fireplace in Skansen in Stockholm](../Images/f32c2ce2cf74df45d5794070d8110bff.jpg)](/http://philip.greenspun.com/images/pcd0511/stockholm-skansen-fireplace-51.tcl)
    At noon, an ugly mob of users assembles outside your office, angered by your introduction
    of frames and failure to include WIDTH and HEIGHT tags on IMGs. You send one of
    your graphic designers out to explain how "cool" it looked when run off a local
    disk in a demo to the vice-president. The mob stones him to death and then burns
    your server farm to the ground. You manage to pry your way out of the rubble with
    one of those indestructible HP Unix box keyboards. You manage to get the HP disaster
    support people to let you use their machines for awhile and confidently load your
    backup tape. To your horror, the RDBMS chokes up blood following the restore.
    It turned out that there were linked data structures in foo.db and bar.db. Half
    of the data structures (the ones from foo.db) are the "old pre-transaction version"
    and half are the "new post-transaction version" (the ones from bar.db). One transaction
    occurring during your backup has resulted in a complete loss of availability for
    all of your data. Maybe you think that isn''t the world''s most robust RDBMS design
    but there is nothing in the SQL standard or manufacturer''s documentation that
    says Oracle, Postgres, or SQL Server can''t work this way.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[![斯德哥尔摩斯坎森的壁炉](../Images/f32c2ce2cf74df45d5794070d8110bff.jpg)](/http://philip.greenspun.com/images/pcd0511/stockholm-skansen-fireplace-51.tcl)
    中午时分，一群愤怒的用户聚集在您的办公室外，对您引入框架并未在IMG标签上包含WIDTH和HEIGHT标签感到愤怒。您派遣其中一名平面设计师出去解释在向副总裁演示时从本地磁盘运行时看起来是多么“酷”。这群人用石头砸死了他，然后焚烧了您的服务器农场。您设法用一把那种坚不可摧的HP
    Unix键盘从废墟中挣脱出来。您设法让HP灾难支持人员让您暂时使用他们的机器，并自信地加载您的备份磁带。令您震惊的是，关系数据库管理系统在恢复后出现了问题。原来在foo.db和bar.db中有链接数据结构。备份期间发生的一个事务导致了所有数据的完全不可用。也许您认为这不是世界上最稳健的关系数据库管理系统设计，但SQL标准或制造商的文档中没有任何内容表明Oracle、Postgres或SQL
    Server不能以这种方式工作。'
- en: Full mirroring keeps you from going off-line due to media failure. But you still
    need snapshots of your database in case someone gets a little excited with a DELETE
    FROM statement or in the situation described above.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 完全镜像可以防止由于媒体故障而离线。但是，您仍然需要数据库的快照，以防某人对DELETE FROM语句有些激动，或者出现上述情况。
- en: 'There are two ways to back up a relational database: off-line and on-line.
    For an off-line backup, you shut down the databases, thus preventing transactions
    from occurring. Most vendors would prefer that you use their utility to make a
    dump file of your off-line database, but in practice it will suffice just to back
    up the Unix or NT filesystem files. Off-line backup is typically used by insurance
    companies and other big database users who only need to do transactions for eight
    hours a day.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以备份关系型数据库：离线和在线。对于离线备份，您需要关闭数据库，从而阻止事务发生。大多数供应商希望您使用他们的实用程序制作离线数据库的转储文件，但实际上只需备份Unix或NT文件系统文件即可。离线备份通常由保险公司和其他大型数据库用户使用，他们一天只需要进行八小时的交易。
- en: 'Each RDBMS vendor has an advertised way of doing on-line backups. It can be
    as simple as "call this function and we''ll grind away for a couple of hours building
    you a dump file that contains a consistent database but minus all the transactions
    that occurred after you called the function." Here is the shell command that will
    export a snapshot of an Oracle database into a dump file:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 每个关系数据库管理系统供应商都有一种宣传的在线备份方法。它可以简单到“调用此函数，我们将花几个小时为您构建一个包含一致数据库但减去您调用该函数后发生的所有事务的转储文件”。以下是将Oracle数据库快照导出到转储文件的shell命令：
- en: '[PRE1]'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This exports all the tables owned by DBUSER, pulling old rows from a rollback
    segment if a table has undergone transactions since the dump started. If you read
    [Oracle Performance Tuning](http://www.amazon.com/exec/obidos/ASIN/1565922379/pgreenspun-20)
    (Gurry and Corrigan 1996; O'Reilly), you'll find some dark warnings that you *must*
    export periodically in order to flush out cases where Oracle has corrupted its
    internal data structures. Another good reason to export is that periodically dropping
    all of your tables and importing them is a great way to defragment data. At ArsDigita
    we export every customer's Oracle database every night, except the handful of
    customers with terabytes of data.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导出由DBUSER拥有的所有表，如果表在转储开始后经历了事务，则从回滚段中提取旧行。如果你阅读[Oracle性能调优](http://www.amazon.com/exec/obidos/ASIN/1565922379/pgreenspun-20)（Gurry和Corrigan
    1996; O'Reilly），你会发现一些黑暗警告，*必须*定期导出以排除Oracle损坏其内部数据结构的情况。导出的另一个好处是，定期删除所有表并导入它们是碎片化数据的绝佳方式。在ArsDigita，我们每晚都会导出每个客户的Oracle数据库，除了那些拥有几TB数据的少数客户。
- en: 'What if your database is too large to be exported to a disk and can''t be taken
    offline? Here''s a technique practiced by a lot of experienced IT groups:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的数据库太大，无法导出到磁盘并且无法脱机？这是许多经验丰富的IT团队实践的一种技术：
- en: Break the mirror.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打破镜像。
- en: Back up from the disks that are off-line as far as the database is concerned.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库认为是脱机的磁盘备份。
- en: Reestablish the mirror.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新建立镜像。
- en: What if one of the on-line disks fails during backup? Are transactions lost?
    No. The redo log is on a separate disk from the rest of the database. This increases
    performance in day-to-day operation and ensures that it is possible to recover
    transactions that occur when the mirror is broken, albeit with some off-line time.
    Some organizations have three mirrors. They can pull pull off one set of physical
    disks and back them up without running the risk that a drive failure during the
    backup window will take the database management system offline.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果备份过程中出现在线磁盘故障怎么办？事务会丢失吗？不会。重做日志位于与数据库其余部分分开的磁盘上。这提高了日常操作的性能，并确保可以在镜像断开时恢复发生的事务，尽管会有一些离线时间。一些组织有三个镜像。他们可以拔掉一组物理磁盘并备份它们，而不会在备份窗口期间发生驱动器故障导致数据库管理系统离线的风险。
- en: The lessons here are several. First, whatever your backup procedure, make sure
    you test it with periodic restores. Second, remember that the backup and maintenance
    of an RDBMS is done by a full-time staffer at most companies, called "the dba",
    short for "database administrator". If the software worked as advertised, you
    could expect a few days of pain during the install and then periodic recurring
    pain to keep current with improved features. However, dba's earn their moderately
    lavish salaries. No amount of marketing hype suffices to make a C program work
    as advertised. That goes for an RDBMS just as much as for a word processor. Coming
    to terms with bugs can be a full-time job at a large installation. Most often
    this means finding workarounds since vendors are notoriously sluggish with fixes.
    Another full-time job is hunting down users who are doing queries that are taking
    1000 times longer than necessary because they forgot to build indices or don't
    know SQL very well. Children's Hospital has three full-time dbas and they work
    hard.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的教训有几个。首先，无论你的备份程序是什么，请确保定期进行恢复测试。其次，请记住，大多数公司的RDBMS的备份和维护是由全职员工完成的，称为“dba”，即“数据库管理员”。如果软件按照广告宣传的那样运行，你可以期望在安装期间经历几天的痛苦，然后定期遇到痛苦以保持与改进功能的同步。然而，dba们赚取他们相对丰厚的薪水。没有任何营销炒作足以使C程序按照广告宣传的那样运行。这对于关系数据库管理系统和文字处理软件都是一样的。在大型安装中，解决错误可能是一项全职工作。通常这意味着找到解决方法，因为供应商在修复问题方面出奇的慢。另一项全职工作是追踪那些由于忘记构建索引或不太了解SQL而执行查询所需时间比必要时间长1000倍的用户。儿童医院有三名全职dba，他们工作努力。
- en: If all of this sounds rather tedious just to ensure that your data are still
    around tomorrow, you might be cheered by the knowledge that Oracle dbas are always
    in high demand and start at $60,000 to $80,000 a year. When the Web bubble bursts
    and your friends who are "HTML programmers" are singing in the subway, you'll
    be kicking back at some huge financial services firm.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有这些听起来相当乏味，只是为了确保你的数据明天还在，你可能会因为知道Oracle dba总是供不应求，年薪从6万到8万美元起步而感到振奋。当互联网泡沫破裂时，你的“HTML程序员”朋友在地铁里唱歌时，你将在某个大型金融服务公司轻松自在。
- en: 'We''ll close by quoting Perrin Harkins. A participant in the Web/db question-and-answer
    forum ([http://www.arsdigita.com/bboard/q-and-a.tcl?topic=web/db](http://www.arsdigita.com/bboard/q-and-a.tcl?topic=web/db))
    asked whether caching database queries in Unix files would speed up his Web server.
    Here''s Perrin''s response:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以佩林·哈金斯的话作结。一个参与Web/db问题和答案论坛（[http://www.arsdigita.com/bboard/q-and-a.tcl?topic=web/db](http://www.arsdigita.com/bboard/q-and-a.tcl?topic=web/db)）的参与者问是否将数据库查询缓存到Unix文件中会加快他的Web服务器速度。以下是佩林的回答：
- en: '"Modern databases use buffering in RAM to speed up access to often requested
    data. You don''t have to do anything special to make this happen, except tune
    your database well (which could take the rest of your life)."'
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"现代数据库使用RAM中的缓冲来加快对经常请求的数据的访问。你不必采取任何特殊措施来实现这一点，除了很好地调整你的数据库（可能需要你的余生）。"'
- en: Reference
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考
- en: '[Oracle8i Server Backup and Recovery Guide](http://www.oradoc.com/keyword/backup_guide),
    part of the Oracle doc set'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Oracle8i服务器备份和恢复指南](http://www.oradoc.com/keyword/backup_guide)，Oracle文档集的一部分'
- en: '[Oracle Server Administrator''s Guide](http://www.oradoc.com/keyword/server_admin_guide),
    part of the Oracle doc set'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Oracle服务器管理员指南](http://www.oradoc.com/keyword/server_admin_guide)，Oracle文档集的一部分'
- en: '[Oracle 8i Backup and Recovery](http://www.amazon.com/exec/obidos/ASIN/0072127171/pgreenspun-20)
    (Velpuri 2000; Oracle Press)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Oracle 8i备份和恢复](http://www.amazon.com/exec/obidos/ASIN/0072127171/pgreenspun-20)（Velpuri
    2000; Oracle Press）'
- en: '* * *'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[philg@mit.edu](http://philip.greenspun.com/)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[philg@mit.edu](http://philip.greenspun.com/)'
- en: Reader's Comments
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读者评论
- en: Thought I'd point this out:- Oracle 9i has now apparently become [one of the
    better](http://www.xmldatabases.org/radio/xmlDatabases/2002/06/25.html)[XML databases](http://www.xml.com/pub/a/2001/10/31/nativexmldb.html")
    available. While I have no practical experience as to whether [PostgreSQL's implementation](http://gborg.postgresql.org/project/xpsql/projdisplay.php)
    is better or even comparable, it's nevertheless interesting to note that even
    [Yukon](http://www.microsoft.com/sql/yukon/default.asp)[probably wont](http://www.extremeexperts.com/sql/articles/Yukon.aspx)
    carry this feature.
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我想指出这一点：- Oracle 9i现在显然已经成为[更好的](http://www.xmldatabases.org/radio/xmlDatabases/2002/06/25.html)[XML数据库](http://www.xml.com/pub/a/2001/10/31/nativexmldb.html")之一。虽然我对[PostgreSQL的实现](http://gborg.postgresql.org/project/xpsql/projdisplay.php)是否更好或者可比性没有实际经验，但值得注意的是，即使[Yukon](http://www.microsoft.com/sql/yukon/default.asp)[可能不会](http://www.extremeexperts.com/sql/articles/Yukon.aspx)具备这一功能。
- en: ''
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [Akshay R](/shared/community-member?user_id=260669), May 25, 2004
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [Akshay R](/shared/community-member?user_id=260669), 2004年5月25日
- en: Since MS Sql Server 7, the varchar data type can hold 8000 characters. (Don't
    know about earlier versions). MS Sql Server 2005 Yukon is supposed to allow .NET
    code in stored procedures. In my opinion, the chief limitation of MS Sql Server
    is that it lacks "Oracle Forms and Reports." Yukon is supposed to remedy this.
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自从MS Sql Server 7以来，varchar数据类型可以容纳8000个字符。（不清楚早期版本）。据说MS Sql Server 2005 Yukon可以允许在存储过程中使用.NET代码。在我看来，MS
    Sql Server的主要限制是缺少"Oracle Forms和Reports"。Yukon应该解决这个问题。
- en: ''
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [Louis N](/shared/community-member?user_id=261393), July 29, 2004
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [Louis N](/shared/community-member?user_id=261393), 2004年7月29日
- en: 'PostgreSQL *does* support arbitrarily long text fields, I have been using it
    at least since the 7.3 (probably 7.2) days:'
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: PostgreSQL *确实*支持任意长的文本字段，我至少从7.3（可能是7.2）时代开始使用它：
- en: '`SELECT length(nota) as size from articulo order by size desc;'
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`SELECT length(nota) as size from articulo order by size desc;'
- en: size
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大小
- en: '-------'
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '-------'
- en: '70720'
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '70720'
- en: '56067'
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '56067'
- en: '38961'
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '38961'
- en: '34634'
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '34634'
- en: '33388'
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '33388'
- en: (...)`
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: (...)`
- en: ''
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [Gunnar Wolf](/shared/community-member?user_id=262417), December 17, 2004
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [Gunnar Wolf](/shared/community-member?user_id=262417), 2004年12月17日
- en: '[Add a comment](/comments/add?page_id=3458)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加评论](/comments/add?page_id=3458)'
