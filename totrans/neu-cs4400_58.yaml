- en: Boxes and MutationTuesday, February 21st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方框和突变星期二，2月21日
- en: 'To actually implement a circular structure, we will now use *side-effects*,
    using a new kind of Racket value which supports mutation: a box. A box value is
    built with the `box` constructor:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实际实现一个循环结构，我们现在将使用*副作用*，使用一种支持突变的新型 Racket 值：方框。方框值是用`box`构造器构建的：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: the value is retrieved with the `unbox’ function,
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 值是通过`unbox`函数检索的，
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: and finally, the value can be changed with the `set-box!` function.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，值可以通过`set-box!`函数更改。
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: An important thing to note is that `set-box!` is much like `display` etc, it
    returns a value that is not printed in the Racket REPL, because there is no point
    in using the result of a `set-box!`, it is called for the side-effect it generates.
    (Languages like C blur this distinction between returning a value and a side-effect
    with its assignment statement.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一件重要事情是，`set-box!`很像`display`等，它返回一个值，该值不会在 Racket REPL 中打印出来，因为使用`set-box!`的结果没有意义，它是因为生成的副作用而调用的。（像
    C 这样的语言会模糊返回值和副作用之间的区别，它的赋值语句与此有关。）
- en: 'As a side note, we now have side effects of two kinds: mutation of state, and
    I/O (at least the O part). (Actually, there is also infinite looping that can
    be viewed as another form of a side effect.) This means that we’re now in a completely
    different world, and lots of new things can make sense now. A few things that
    you should know about:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个旁注，我们现在有两种副作用：状态的变异，和 I/O（至少是输出部分）。（实际上，还有无限循环，可以看作是另一种形式的副作用。）这意味着我们现在处于一个完全不同的世界，现在很多新事物都变得有意义了。以下是一些你应该知道的事情：
- en: We never used more than one expression in a function body because there was
    no point in it, but now there is. To evaluate a sequence of Racket expressions,
    you wrap them in a `begin` expression.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从未在函数主体中使用多个表达式，因为这没有意义，但现在有了。要评估一系列 Racket 表达式，你将它们包装在一个`begin`表达式中。
- en: 'In most places you don’t actually need to use `begin` — these are places that
    are said to have an *implicit* `begin`: the body of a function (or any lambda
    expression), the body of a `let` (and `let`-relatives), the consequence positions
    in `cond`, `match`, and `cases` clauses and more. One of the common places where
    a `begin` is used is in an `if` expression (and some people prefer using `cond`
    instead when there is more than a single expression).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大多数地方，你实际上并不需要使用`begin`——这些地方被称为*隐式*的`begin`：函数的主体（或任何 lambda 表达式）、`let`的主体（以及`let`的相关内容）、`cond`、`match`和`cases`子句中的结果位置等等。一个常见的使用`begin`的地方是在`if`表达式中（当存在多个表达式时，有些人更喜欢使用`cond`）。
- en: '`cond` without an `else` in the end can make sense, if all you’re using it
    it for is side-effects.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在结尾没有`else`的`cond`是有意义的，如果你只是用它来进行副作用的话。
- en: '`if` could get a single expression which is executed when the condition is
    true (and an unspecified value is used otherwise), but our language (as well as
    the default Racket language) always forbids this — there are convenient special
    forms for a one-sided `if`s: `when` & `unless`, and they can have any number of
    expressions (they have an implicit `begin`). They have an advantage of saying
    “this code does some side-effects here” more explicit.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`可以得到一个在条件为真时执行的单个表达式（否则使用未指定的值），但我们的语言（以及默认的 Racket 语言）总是禁止这样做——对于一个单边的`if`，有方便的特殊形式：`when`和`unless`，它们可以有任意数量的表达式（它们有一个隐式的`begin`）。它们有一个明显的优势，即更明确地表示“这里的代码进行了一些副作用”。'
- en: There is a function called `for-each` which is just like `map`, except that
    it doesn’t collect the list of results, it is used only for performing side effects.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个称为`for-each`的函数，它与`map`完全相同，只是它不收集结果列表，仅用于执行副作用。
- en: When any one of these things is used (in Racket or other languages), you can
    tell that side-effects are involved, because there is no point in any of them
    otherwise. In addition, any name that ends with a `!` (“bang”) is used to mark
    a function that changes state (usually a function that only changes state).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当任何一个这些东西被使用时（在 Racket 或其他语言中），你可以确定涉及到了副作用，因为否则它们就没有任何意义。此外，任何以`!`（“bang”）结尾的名称都用于标记改变状态的函数（通常是仅改变状态的函数）。
- en: 'So how do we create a cycle? Simple, boxes can have any value, and they can
    be put in other values like lists, so we can do this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何创建一个循环呢？简单，方框可以有任何值，并且它们可以放在其他值中，所以我们可以这样做：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'and we get a circular value. (Note how it is printed.) And with types:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了一个循环值。（注意它是如何打印的。）并且具有类型：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
