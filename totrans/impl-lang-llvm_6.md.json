["```\n# Logical unary not.\ndef unary!(v)\n  if v then\n    0\n  else\n    1;\n\n# Define > with the same precedence as <.\ndef binary> 10 (LHS RHS)\n  RHS < LHS;\n\n# Binary \"logical or\", (note that it does not \"short circuit\")\ndef binary| 5 (LHS RHS)\n  if LHS then\n    1\n  else if RHS then\n    1\n  else\n    0;\n\n# Define = with slightly lower precedence than relationals.\ndef binary= 9 (LHS RHS)\n  !(LHS < RHS | LHS > RHS); \n```", "```\nenum Token {\n  ...\n  // operators\n  tok_binary = -11, tok_unary = -12\n};\n...\nstatic int gettok() {\n...\n    if (IdentifierStr == \"for\") return tok_for;\n    if (IdentifierStr == \"in\") return tok_in;\n    if (IdentifierStr == \"binary\") return tok_binary;\n    if (IdentifierStr == \"unary\") return tok_unary;\n    return tok_identifier; \n```", "```\n/// PrototypeAST - This class represents the \"prototype\" for a function,\n/// which captures its argument names as well as if it is an operator.\nclass PrototypeAST {\n  std::string Name;\n  std::vector<std::string> Args;\n  bool isOperator;\n  unsigned Precedence;  // Precedence if a binary op.\npublic:\n  PrototypeAST(const std::string &name, const std::vector<std::string> &args,\n               bool isoperator = false, unsigned prec = 0)\n  : Name(name), Args(args), isOperator(isoperator), Precedence(prec) {}\n\n  bool isUnaryOp() const { return isOperator && Args.size() == 1; }\n  bool isBinaryOp() const { return isOperator && Args.size() == 2; }\n\n  char getOperatorName() const {\n    assert(isUnaryOp() || isBinaryOp());\n    return Name[Name.size()-1];\n  }\n\n  unsigned getBinaryPrecedence() const { return Precedence; }\n\n  Function *Codegen();\n}; \n```", "```\n/// prototype\n///   ::= id '(' id* ')'\n///   ::= binary LETTER number? (id, id)\nstatic PrototypeAST *ParsePrototype() {\n  std::string FnName;\n\n  unsigned Kind = 0;  // 0 = identifier, 1 = unary, 2 = binary.\n  unsigned BinaryPrecedence = 30;\n\n  switch (CurTok) {\n  default:\n    return ErrorP(\"Expected function name in prototype\");\n  case tok_identifier:\n    FnName = IdentifierStr;\n    Kind = 0;\n    getNextToken();\n    break;\n  case tok_binary:\n    getNextToken();\n    if (!isascii(CurTok))\n      return ErrorP(\"Expected binary operator\");\n    FnName = \"binary\";\n    FnName += (char)CurTok;\n    Kind = 2;\n    getNextToken();\n\n    // Read the precedence if present.\n    if (CurTok == tok_number) {\n      if (NumVal < 1 || NumVal > 100)\n        return ErrorP(\"Invalid precedecnce: must be 1..100\");\n      BinaryPrecedence = (unsigned)NumVal;\n      getNextToken();\n    }\n    break;\n  }\n\n  if (CurTok != '(')\n    return ErrorP(\"Expected '(' in prototype\");\n\n  std::vector<std::string> ArgNames;\n  while (getNextToken() == tok_identifier)\n    ArgNames.push_back(IdentifierStr);\n  if (CurTok != ')')\n    return ErrorP(\"Expected ')' in prototype\");\n\n  // success.\n  getNextToken();  // eat ')'.\n\n  // Verify right number of names for operator.\n  if (Kind && ArgNames.size() != Kind)\n    return ErrorP(\"Invalid number of operands for operator\");\n\n  return new PrototypeAST(FnName, ArgNames, Kind != 0, BinaryPrecedence);\n} \n```", "```\nValue *BinaryExprAST::Codegen() {\n  Value *L = LHS->Codegen();\n  Value *R = RHS->Codegen();\n  if (L == 0 || R == 0) return 0;\n\n  switch (Op) {\n  case '+': return Builder.CreateFAdd(L, R, \"addtmp\");\n  case '-': return Builder.CreateFSub(L, R, \"subtmp\");\n  case '*': return Builder.CreateFMul(L, R, \"multmp\");\n  case '<':\n    L = Builder.CreateFCmpULT(L, R, \"cmptmp\");\n    // Convert bool 0/1 to double 0.0 or 1.0\n    return Builder.CreateUIToFP(L, Type::getDoubleTy(getGlobalContext()),\n                                \"booltmp\");\n  default: break;\n  }\n\n  // If it wasn't a builtin binary operator, it must be a user defined one. Emit\n  // a call to it.\n  Function *F = TheModule->getFunction(std::string(\"binary\")+Op);\n  assert(F && \"binary operator not found!\");\n\n  Value *Ops[2] = { L, R };\n  return Builder.CreateCall(F, Ops, \"binop\");\n} \n```", "```\nFunction *FunctionAST::Codegen() {\n  NamedValues.clear();\n\n  Function *TheFunction = Proto->Codegen();\n  if (TheFunction == 0)\n    return 0;\n\n  // If this is an operator, install it.\n  if (Proto->isBinaryOp())\n    BinopPrecedence[Proto->getOperatorName()] = Proto->getBinaryPrecedence();\n\n  // Create a new basic block to start insertion into.\n  BasicBlock *BB = BasicBlock::Create(getGlobalContext(), \"entry\", TheFunction);\n  Builder.SetInsertPoint(BB);\n\n  if (Value *RetVal = Body->Codegen()) {\n    ... \n```", "```\n/// UnaryExprAST - Expression class for a unary operator.\nclass UnaryExprAST : public ExprAST {\n  char Opcode;\n  ExprAST *Operand;\npublic:\n  UnaryExprAST(char opcode, ExprAST *operand)\n    : Opcode(opcode), Operand(operand) {}\n  virtual Value *Codegen();\n}; \n```", "```\n/// unary\n///   ::= primary\n///   ::= '!' unary\nstatic ExprAST *ParseUnary() {\n  // If the current token is not an operator, it must be a primary expr.\n  if (!isascii(CurTok) || CurTok == '(' || CurTok == ',')\n    return ParsePrimary();\n\n  // If this is a unary operator, read it.\n  int Opc = CurTok;\n  getNextToken();\n  if (ExprAST *Operand = ParseUnary())\n    return new UnaryExprAST(Opc, Operand);\n  return 0;\n} \n```", "```\n/// binoprhs\n///   ::= ('+' unary)*\nstatic ExprAST *ParseBinOpRHS(int ExprPrec, ExprAST *LHS) {\n  ...\n    // Parse the unary expression after the binary operator.\n    ExprAST *RHS = ParseUnary();\n    if (!RHS) return 0;\n  ...\n}\n/// expression\n///   ::= unary binoprhs\n///\nstatic ExprAST *ParseExpression() {\n  ExprAST *LHS = ParseUnary();\n  if (!LHS) return 0;\n\n  return ParseBinOpRHS(0, LHS);\n} \n```", "```\n/// prototype\n///   ::= id '(' id* ')'\n///   ::= binary LETTER number? (id, id)\n///   ::= unary LETTER (id)\nstatic PrototypeAST *ParsePrototype() {\n  std::string FnName;\n\n  unsigned Kind = 0;  // 0 = identifier, 1 = unary, 2 = binary.\n  unsigned BinaryPrecedence = 30;\n\n  switch (CurTok) {\n  default:\n    return ErrorP(\"Expected function name in prototype\");\n  case tok_identifier:\n    FnName = IdentifierStr;\n    Kind = 0;\n    getNextToken();\n    break;\n  case tok_unary:\n    getNextToken();\n    if (!isascii(CurTok))\n      return ErrorP(\"Expected unary operator\");\n    FnName = \"unary\";\n    FnName += (char)CurTok;\n    Kind = 1;\n    getNextToken();\n    break;\n  case tok_binary:\n    ... \n```", "```\nValue *UnaryExprAST::Codegen() {\n  Value *OperandV = Operand->Codegen();\n  if (OperandV == 0) return 0;\n\n  Function *F = TheModule->getFunction(std::string(\"unary\")+Opcode);\n  if (F == 0)\n    return ErrorV(\"Unknown unary operator\");\n\n  return Builder.CreateCall(F, OperandV, \"unop\");\n} \n```", "```\nready> extern printd(x);\nRead extern:\ndeclare double @printd(double)\n\nready> def binary : 1 (x y) 0;  # Low-precedence operator that ignores operands.\n..\nready> printd(123) : printd(456) : printd(789);\n123.000000\n456.000000\n789.000000\nEvaluated to 0.000000 \n```", "```\n# Logical unary not.\ndef unary!(v)\n  if v then\n    0\n  else\n    1;\n\n# Unary negate.\ndef unary-(v)\n  0-v;\n\n# Define > with the same precedence as <.\ndef binary> 10 (LHS RHS)\n  RHS < LHS;\n\n# Binary logical or, which does not short circuit.\ndef binary| 5 (LHS RHS)\n  if LHS then\n    1\n  else if RHS then\n    1\n  else\n    0;\n\n# Binary logical and, which does not short circuit.\ndef binary& 6 (LHS RHS)\n  if !LHS then\n    0\n  else\n    !!RHS;\n\n# Define = with slightly lower precedence than relationals.\ndef binary = 9 (LHS RHS)\n  !(LHS < RHS | LHS > RHS);\n\n# Define ':' for sequencing: as a low-precedence operator that ignores operands\n# and just returns the RHS.\ndef binary : 1 (x y) y; \n```", "```\nready>\n\nextern putchard(char)\ndef printdensity(d)\n  if d > 8 then\n    putchard(32)  # ' '\n  else if d > 4 then\n    putchard(46)  # '.'\n  else if d > 2 then\n    putchard(43)  # '+'\n  else\n    putchard(42); # '*'\n...\nready> printdensity(1): printdensity(2): printdensity(3):\n       printdensity(4): printdensity(5): printdensity(9):\n       putchard(10);\n**++. \n```", "```\n# Determine whether the specific location diverges.\n# Solve for z = z^2 + c in the complex plane.\ndef mandleconverger(real imag iters creal cimag)\n  if iters > 255 | (real*real + imag*imag > 4) then\n    iters\n  else\n    mandleconverger(real*real - imag*imag + creal,\n                    2*real*imag + cimag,\n                    iters+1, creal, cimag);\n\n# Return the number of iterations required for the iteration to escape\ndef mandleconverge(real imag)\n  mandleconverger(real, imag, 0, real, imag); \n```", "```\n# Compute and plot the mandlebrot set with the specified 2 dimensional range\n# info.\ndef mandelhelp(xmin xmax xstep   ymin ymax ystep)\n  for y = ymin, y < ymax, ystep in (\n    (for x = xmin, x < xmax, xstep in\n       printdensity(mandleconverge(x,y)))\n    : putchard(10)\n  )\n\n# mandel - This is a convenient helper function for plotting the mandelbrot set\n# from the specified position with the specified Magnification.\ndef mandel(realstart imagstart realmag imagmag)\n  mandelhelp(realstart, realstart+realmag*78, realmag,\n             imagstart, imagstart+imagmag*40, imagmag); \n```", "```\nready> mandel(-2.3, -1.3, 0.05, 0.07);\n*******************************+++++++++++*************************************\n*************************+++++++++++++++++++++++*******************************\n**********************+++++++++++++++++++++++++++++****************************\n*******************+++++++++++++++++++++.. ...++++++++*************************\n*****************++++++++++++++++++++++.... ...+++++++++***********************\n***************+++++++++++++++++++++++.....   ...+++++++++*********************\n**************+++++++++++++++++++++++....     ....+++++++++********************\n*************++++++++++++++++++++++......      .....++++++++*******************\n************+++++++++++++++++++++.......       .......+++++++******************\n***********+++++++++++++++++++....                ... .+++++++*****************\n**********+++++++++++++++++.......                     .+++++++****************\n*********++++++++++++++...........                    ...+++++++***************\n********++++++++++++............                      ...++++++++**************\n********++++++++++... ..........                        .++++++++**************\n*******+++++++++.....                                   .+++++++++*************\n*******++++++++......                                  ..+++++++++*************\n*******++++++.......                                   ..+++++++++*************\n*******+++++......                                     ..+++++++++*************\n*******.... ....                                      ...+++++++++*************\n*******.... .                                         ...+++++++++*************\n*******+++++......                                    ...+++++++++*************\n*******++++++.......                                   ..+++++++++*************\n*******++++++++......                                   .+++++++++*************\n*******+++++++++.....                                  ..+++++++++*************\n********++++++++++... ..........                        .++++++++**************\n********++++++++++++............                      ...++++++++**************\n*********++++++++++++++..........                     ...+++++++***************\n**********++++++++++++++++........                     .+++++++****************\n**********++++++++++++++++++++....                ... ..+++++++****************\n***********++++++++++++++++++++++.......       .......++++++++*****************\n************+++++++++++++++++++++++......      ......++++++++******************\n**************+++++++++++++++++++++++....      ....++++++++********************\n***************+++++++++++++++++++++++.....   ...+++++++++*********************\n*****************++++++++++++++++++++++....  ...++++++++***********************\n*******************+++++++++++++++++++++......++++++++*************************\n*********************++++++++++++++++++++++.++++++++***************************\n*************************+++++++++++++++++++++++*******************************\n******************************+++++++++++++************************************\n*******************************************************************************\n*******************************************************************************\n*******************************************************************************\nEvaluated to 0.000000\nready> mandel(-2, -1, 0.02, 0.04);\n**************************+++++++++++++++++++++++++++++++++++++++++++++++++++++\n***********************++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n*********************+++++++++++++++++++++++++++++++++++++++++++++++++++++++++.\n*******************+++++++++++++++++++++++++++++++++++++++++++++++++++++++++...\n*****************+++++++++++++++++++++++++++++++++++++++++++++++++++++++++.....\n***************++++++++++++++++++++++++++++++++++++++++++++++++++++++++........\n**************++++++++++++++++++++++++++++++++++++++++++++++++++++++...........\n************+++++++++++++++++++++++++++++++++++++++++++++++++++++..............\n***********++++++++++++++++++++++++++++++++++++++++++++++++++........        .\n**********++++++++++++++++++++++++++++++++++++++++++++++.............\n********+++++++++++++++++++++++++++++++++++++++++++..................\n*******+++++++++++++++++++++++++++++++++++++++.......................\n******+++++++++++++++++++++++++++++++++++...........................\n*****++++++++++++++++++++++++++++++++............................\n*****++++++++++++++++++++++++++++...............................\n****++++++++++++++++++++++++++......   .........................\n***++++++++++++++++++++++++.........     ......    ...........\n***++++++++++++++++++++++............\n**+++++++++++++++++++++..............\n**+++++++++++++++++++................\n*++++++++++++++++++.................\n*++++++++++++++++............ ...\n*++++++++++++++..............\n*+++....++++................\n*..........  ...........\n*\n*..........  ...........\n*+++....++++................\n*++++++++++++++..............\n*++++++++++++++++............ ...\n*++++++++++++++++++.................\n**+++++++++++++++++++................\n**+++++++++++++++++++++..............\n***++++++++++++++++++++++............\n***++++++++++++++++++++++++.........     ......    ...........\n****++++++++++++++++++++++++++......   .........................\n*****++++++++++++++++++++++++++++...............................\n*****++++++++++++++++++++++++++++++++............................\n******+++++++++++++++++++++++++++++++++++...........................\n*******+++++++++++++++++++++++++++++++++++++++.......................\n********+++++++++++++++++++++++++++++++++++++++++++..................\nEvaluated to 0.000000\nready> mandel(-0.9, -1.4, 0.02, 0.03);\n*******************************************************************************\n*******************************************************************************\n*******************************************************************************\n**********+++++++++++++++++++++************************************************\n*+++++++++++++++++++++++++++++++++++++++***************************************\n+++++++++++++++++++++++++++++++++++++++++++++**********************************\n++++++++++++++++++++++++++++++++++++++++++++++++++*****************************\n++++++++++++++++++++++++++++++++++++++++++++++++++++++*************************\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++**********************\n+++++++++++++++++++++++++++++++++.........++++++++++++++++++*******************\n+++++++++++++++++++++++++++++++....   ......+++++++++++++++++++****************\n+++++++++++++++++++++++++++++.......  ........+++++++++++++++++++**************\n++++++++++++++++++++++++++++........   ........++++++++++++++++++++************\n+++++++++++++++++++++++++++.........     ..  ...+++++++++++++++++++++**********\n++++++++++++++++++++++++++...........        ....++++++++++++++++++++++********\n++++++++++++++++++++++++.............       .......++++++++++++++++++++++******\n+++++++++++++++++++++++.............        ........+++++++++++++++++++++++****\n++++++++++++++++++++++...........           ..........++++++++++++++++++++++***\n++++++++++++++++++++...........                .........++++++++++++++++++++++*\n++++++++++++++++++............                  ...........++++++++++++++++++++\n++++++++++++++++...............                 .............++++++++++++++++++\n++++++++++++++.................                 ...............++++++++++++++++\n++++++++++++..................                  .................++++++++++++++\n+++++++++..................                      .................+++++++++++++\n++++++........        .                               .........  ..++++++++++++\n++............                                         ......    ....++++++++++\n..............                                                    ...++++++++++\n..............                                                    ....+++++++++\n..............                                                    .....++++++++\n.............                                                    ......++++++++\n...........                                                     .......++++++++\n.........                                                       ........+++++++\n.........                                                       ........+++++++\n.........                                                           ....+++++++\n........                                                             ...+++++++\n.......                                                              ...+++++++\n                                                                    ....+++++++\n                                                                   .....+++++++\n                                                                    ....+++++++\n                                                                    ....+++++++\n                                                                    ....+++++++\nEvaluated to 0.000000\nready> ^D \n```"]