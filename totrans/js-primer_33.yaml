- en: '[ES2015] ECMAScriptモジュール'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://jsprimer.net/basic/module/](https://jsprimer.net/basic/module/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: モジュールとは、変数や関数などをまとめたものです。 JavaScriptにおいては、1つのモジュールは1つのJavaScriptファイルに対応します。
  prefs: []
  type: TYPE_NORMAL
- en: モジュールについては[Node.jsでCLIアプリのユースケース](../../use-case/nodecli/)や[Todoアプリのユースケース](../../use-case/todoapp/)で実際に動かしながら学ぶため、ここでは構文の説明とモジュールのイメージをつかむのが目的です。
    この章のサンプルコードを実際に動かすためにはローカルサーバーなどの準備が必要です。 そのため、ユースケースの章を先に読んでから戻ってきてもかまいません。
  prefs: []
  type: TYPE_NORMAL
- en: モジュールは、保守性・名前空間・再利用性のために使われます。
  prefs: []
  type: TYPE_NORMAL
- en: '保守性: 依存性の高いコードの集合を一箇所にまとめ、それ以外のモジュールへの依存性を減らせます'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '名前空間: モジュールごとに分かれたスコープがあり、グローバルの名前空間を汚染しません'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '再利用性: 便利な変数や関数を複数の場所にコピーアンドペーストせず、モジュールとして再利用できます'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: モジュールは変数や関数などをモジュール外部にエクスポートできます。また、モジュールからエクスポートされた変数や関数などをインポートして利用できます。 モジュールに処理を分けることで、コードの見通しが良くなったり、特定のことに関する処理をモジュールにまとめたり、処理を再利用できるようになります。
    それによって、コードの行数が増えてきた場合にも、一度にみるコードの量をモジュールで分割できるようになり、メンテナンス性がよくなります。
  prefs: []
  type: TYPE_NORMAL
- en: この章では、**ECMAScriptモジュール（ESモジュール、JavaScriptモジュールとも呼ばれる）** について見ていきます。 ECMAScriptモジュールは、ES2015で導入されたJavaScriptファイルをモジュール化する言語標準の機能です。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#es-module-syntax)*ECMAScriptモジュールの構文*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*ECMAScriptモジュールは、[export文](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/export)によって変数や関数などをエクスポートできます。
    また、[import文](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/import)を使って別のモジュールからエクスポートされたものをインポートできます。
    インポートとエクスポートはそれぞれに **名前つき** と **デフォルト** という2種類の方法があります。'
  prefs: []
  type: TYPE_NORMAL
- en: まずは名前つきエクスポート／インポート文について見ていきましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#named-export-import)*名前つきエクスポート／インポート*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***名前つきエクスポート**は、モジュールごとに複数の変数や関数などをエクスポートできます。 次の例では、`foo`変数と`bar`関数をそれぞれ名前つきエクスポートしています。
    `export`文のあとに続けて`{}`を書き、その中にエクスポートする変数を入れることで、宣言済みの変数を名前つきエクスポートできます。'
  prefs: []
  type: TYPE_NORMAL
- en: named-export.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: また、名前つきエクスポートでは`export`文を宣言の前につけると、宣言と同時に名前つきエクスポートできます。
  prefs: []
  type: TYPE_NORMAL
- en: named-export-declare.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**名前つきインポート**は、指定したモジュールから名前を指定して選択的にインポートできます。 次の例では `my-module.js`から名前つきエクスポートされたオブジェクトの名前を指定して名前つきインポートしています。
    `import`文のあとに続けて`{}`を書き、その中にインポートしたい名前つきエクスポートの名前を入れます。 複数の値をインポートしたい場合は、それぞれの名前をカンマで区切ります。'
  prefs: []
  type: TYPE_NORMAL
- en: my-module.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: named-import.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[](#named-export-import-alias)*名前つきエクスポート／インポートのエイリアス*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*名前つきエクスポート／インポートには**エイリアス**の仕組みがあります。 エイリアスを使うと、宣言済みの変数を違う名前で名前つきエクスポートできます。
    エイリアスをつけるには、次のように`as`のあとにエクスポートしたい名前を記述します。'
  prefs: []
  type: TYPE_NORMAL
- en: named-export-alias.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: また、名前つきインポートしたオブジェクトにも別名をつけることができます。 インポートでも同様に、`as`のあとに別名を記述します。
  prefs: []
  type: TYPE_NORMAL
- en: named-import-alias.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[](#default-export-import)*デフォルトエクスポート／インポート*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*次に、デフォルトエクスポート／インポートについて見ていきましょう。 **デフォルトエクスポート**は、モジュールごとに1つしかエクスポートできない特殊なエクスポートです。
    次の例は、すでに宣言されている変数をデフォルトエクスポートしています。 `export default`文で、後に続く式の評価結果をデフォルトエクスポートします。'
  prefs: []
  type: TYPE_NORMAL
- en: default-export.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: また、`export`文を宣言の前につけると、宣言と同時にデフォルトエクスポートできます。 このとき関数やクラスの名前を省略できます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: ただし、変数宣言は宣言とデフォルトエクスポートを同時に行うことはできません。 なぜなら、変数宣言はカンマ区切りで複数の変数を定義できてしまうためです。
    次の例は実行できない不正なコードです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**デフォルトインポート**は、指定したモジュールのデフォルトエクスポートに名前をつけてインポートします。 次の例では `my-module.js`のデフォルトエクスポートに`myModule`という名前をつけてインポートしています。
    `import`文のあとに任意の名前をつけることで、デフォルトエクスポートをインポートできます。'
  prefs: []
  type: TYPE_NORMAL
- en: my-module.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: default-import.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 実はデフォルトエクスポートは、`default`という固有の名前による名前つきエクスポートと同じものです。 そのため、名前つきエクスポートで`as default`とエイリアスをつけることでデフォルトエクスポートすることもできます。
  prefs: []
  type: TYPE_NORMAL
- en: default-export-alias.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 同様に、名前つきインポートにおいても`default`という名前がデフォルトインポートに対応しています。 次のように、名前つきインポートで`default`を指定するとデフォルトインポートできます。
    ただし、`default`は予約語なので、この方法では必ず`as`構文を使ってエイリアスをつける必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: default-import-alias.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: また、名前つきインポートとデフォルトインポートの構文は同時に記述できます。 次のように2つの構文をカンマでつなげます。
  prefs: []
  type: TYPE_NORMAL
- en: default-import-with-named.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: ECMAScriptモジュールでは、エクスポートされていないものはインポートできません。 なぜならECMAScriptモジュールはJavaScriptのパース段階で依存関係が解決され、インポートする対象が存在しない場合はパースエラーとなるためです。
    デフォルトインポートは、インポート先のモジュールがデフォルトエクスポートをしている必要があります。 同様に名前つきインポートは、インポート先のモジュールが指定した名前つきエクスポートをしている必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#other-syntax)*その他の構文*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*ECMAScriptモジュールには名前つきとデフォルト以外にもいくつかの構文があります。'
  prefs: []
  type: TYPE_NORMAL
- en: '[](#re-export)*再エクスポート*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*再エクスポートとは、別のモジュールからインポートしたものを、改めて自分自身からエクスポートし直すことです。 複数のモジュールからエクスポートされたものをまとめたモジュールを作るときなどに使われます。'
  prefs: []
  type: TYPE_NORMAL
- en: 再エクスポートは次のように`export`文のあとに`from`を続けて、別のモジュール名を指定します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[](#namespace-import)*すべてをインポート*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*`import * as`構文は、すべての名前つきエクスポートをまとめてインポートします。 この方法では、モジュールごとの **名前空間** となるオブジェクトを宣言します。
    エクスポートされた変数や関数などにアクセスするには、その名前空間オブジェクトのプロパティを使います。 また、先ほどのとおり、`default` という固有名を使うとデフォルトエクスポートにもアクセスできます。'
  prefs: []
  type: TYPE_NORMAL
- en: my-module.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: namespace-import.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[](#import-for-side-effect)*副作用のためのインポート*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*モジュールの中には、グローバルのコードを実行するだけで何もエクスポートしないものがあります。 たとえば次のような、グローバル変数を操作するためのモジュールなどです。'
  prefs: []
  type: TYPE_NORMAL
- en: side-effects.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: このようなモジュールをインポートするには、副作用のためのインポート構文を使います。 この構文では、指定したモジュールを読み込んで実行するだけで、何もインポートしません。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[](#run-es-modules)*ECMAScriptモジュールを実行する*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*作成したECMAScriptモジュールを実行するためには、起点となるJavaScriptファイルをECMAScriptモジュールとしてウェブブラウザに読み込ませる必要があります。
    ウェブブラウザは`script`要素によってJavaScriptファイルを読み込み、実行します。 次のように`script`要素に`type="module"`属性を付与すると、ウェブブラウザはJavaScriptファイルをECMAScriptモジュールとして読み込みます。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`type="module"`属性が付与されない場合は通常のスクリプトとして扱われ、ECMAScriptモジュールの機能は使えません。 スクリプトとして読み込まれたJavaScriptで`import`文や`export`文を使用すると、構文エラーが発生します。'
  prefs: []
  type: TYPE_NORMAL
- en: ウェブブラウザの環境では、インポートされるモジュールの取得はネットワーク経由で解決されます。 そのため、モジュール名はJavaScriptファイルの絶対URLあるいは相対URLを指定します。
    詳しくは[Todoアプリのユースケース](../../use-case/todoapp/)を参照してください。*********
  prefs: []
  type: TYPE_NORMAL
