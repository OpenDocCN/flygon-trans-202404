- en: Know Well More than Two Programming Languages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精通两种以上编程语言
- en: Know Well More than Two Programming Languages
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精通两种以上编程语言
- en: The psychology of programming people have known for a long time now that programming
    expertise is related directly to the number of different programming paradigms
    that a programmer is comfortable with. That is not just know about, or know a
    bit, but genuinely can program with.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 编程人员的心理长期以来都知道，编程专业知识与程序员熟悉的不同编程范式的数量直接相关。这不仅仅是知道或知道一点，而是真正能够用编程。
- en: Every programmer starts with one programming language. That language has a dominating
    effect on the way that programmer thinks about software. No matter how many years
    of experience the programmer gets using that language, if they stay with that
    language, they will only know that language. A *one language* programmer is constrained
    in their thinking by that language.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个程序员都从一种编程语言开始。那种语言对程序员思考软件的方式具有主导作用。无论程序员使用那种语言多少年的经验，如果他们一直使用那种语言，他们只会知道那种语言。一个*单一语言*的程序员被那种语言的限制所束缚着思考。
- en: A programmer who learns a second language will be challenged, especially if
    that language has a different computational model than the first. C, Pascal, Fortran,
    all have the same fundamental computational model. Switching from Fortran to C
    introduces a few, but not many, challenges. Moving from C or Fortran to C++ or
    Ada introduces fundamental challenges in the way programs behave. Moving from
    C++ to Haskell is a significant change and hence a significant challenge. Moving
    from C to Prolog is a very definite challenge.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 学习第二种语言的程序员将面临挑战，尤其是如果那种语言的计算模型与第一种不同的话。C、Pascal、Fortran，所有这些都有相同的基本计算模型。从Fortran转到C会引入一些，但不多的挑战。从C或Fortran转到C++或Ada会在程序行为方式上引入根本性的挑战。从C++转到Haskell是一个重大变化，因此是一个重大挑战。从C转到Prolog是一个非常明显的挑战。
- en: 'We can enumerate a number of paradigms of computation: procedural, object-oriented,
    functional, logic, dataflow, etc. Moving between these paradigms creates the greatest
    challenges.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以列举出许多计算范式：过程式、面向对象、函数式、逻辑、数据流等。在这些范式之间转换会带来最大的挑战。
- en: Why are these challenges good? It is to do with the way we think about the implementation
    of algorithms and the idioms and patterns of implementation that apply. In particular,
    cross-fertilization is at the core of expertise. Idioms for problem solutions
    that apply in one language may not be possible in another language. Trying to
    port the idioms from one language to another teaches us about both languages and
    about the problem being solved.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这些挑战是好的？这与我们思考算法的实现方式以及适用的习语和实现模式有关。特别是，相互渗透是专业知识的核心。在一个语言中适用于问题解决的习语在另一种语言中可能不可行。尝试将习语从一种语言移植到另一种语言会让我们了解两种语言以及正在解决的问题。
- en: Cross-fertilization in the use of programming languages has huge effects. Perhaps
    the most obvious is the increased and increasing use of declarative modes of expression
    in systems implemented in imperative languages. Anyone versed in functional programming
    can easily apply a declarative approach even when using a language such as C.
    Using declarative approaches generally leads to shorter and more comprehensible
    programs. C++, for instance, certainly takes this on board with its wholehearted
    support for generic programming, which almost necessitates a declarative mode
    of expression.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用编程语言方面的相互渗透产生了巨大的影响。最明显的可能是在使用命令式语言实现的系统中增加和增加了声明式表达模式的使用。任何熟悉函数式编程的人都可以在使用诸如C之类的语言时轻松应用声明式方法。使用声明式方法通常会导致更短、更易理解的程序。例如，C++肯定会接受这一点，并全心全意支持泛型编程，这几乎要求采用声明式表达方式。
- en: The consequence of all this is that it behooves every programmer to be well
    skilled in programming in at least two different paradigms, and ideally at least
    the five mentioned above. Programmers should always be interested in learning
    new languages, preferably from an unfamiliar paradigm. Even if the day job always
    uses the same programming language, the increased sophistication of use of that
    language when a person can cross-fertilize from other paradigms should not be
    underestimated. Employers should take this on board and allow in their training
    budget for employees to learn languages that are not currently being used as a
    way of increasing the sophistication of use of the languages that are used.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切的结果是，每个程序员都应该精通至少两种不同的编程范式，并理想情况下至少掌握上述提到的五种范式。程序员应该始终有兴趣学习新的语言，最好是来自不熟悉的范式。即使白天工作总是使用相同的编程语言，当一个人可以从其他范式中进行交叉施肥时，该语言的使用的提高程度也不容小觑。雇主应该考虑到这一点，并在培训预算中允许员工学习当前未被使用的语言，以提高已使用语言的使用水平。
- en: 'Although it''s a start, a one-week training course is not sufficient to learn
    a new language: It generally takes a good few months of use, even if part-time,
    to gain a proper working knowledge of a language. It is the idioms of use, not
    just the syntax and computational model, that are the important factors.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是一个开始，但一周的培训课程并不足以学会一门新语言：通常需要相当长的时间，即使是兼职，才能获得对一门语言的适当工作知识。重要的是使用习惯，而不仅仅是语法和计算模型。
- en: By [Russel Winder](http://programmer.97things.oreilly.com/wiki/index.php/Russel_Winder)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[Russel Winder](http://programmer.97things.oreilly.com/wiki/index.php/Russel_Winder)
