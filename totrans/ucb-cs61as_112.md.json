["```\n> (assoc 1 '((1 2) (3 4)))\n  (1 2)     ;returns the pair with car 1\n\n> (assoc 'cupcake '((1 2) (3 4) (cupcake donut) (galaxy star)))\n  (cupcake donut)    ;anything can be a key.\n\n> (assoc 2 '((1 2) (3 4)))\n  #f      ;No pair has 2 as its car, hence returns #f\n\n> (assoc 'froyo '((cupcake donut eclair)\n                  (froyo gingerbread honeycomb) \n                  (sandwich jellybean kitkat)))\n  (froyo gingerbread honeycomb)    ;Pairs can be of any length \n```", "```\n(define (assoc key records)\n  (cond ((null? records) false)\n        ((equal? key (caar records)) (car records))\n        (else (assoc key (cdr records))))) \n```", "```\n(define (make-table)\n  (list '*table*)) \n```", "```\n(define (lookup key table)\n  (let ((record (assoc key (cdr table))))\n    (if record\n        (cdr record)\n        false)))  \n\n> (lookup 'b table)  ;table refers to the table made above\n2 \n```", "```\nmath:\n    + : 43\n    - : 45\n    * : 42\n\nletters:\n    a : 97\n    b : 98 \n```", "```\n(define (lookup key-1 key-2 table)\n  (let ((subtable (assoc key-1 (cdr table))))\n    (if subtable\n        (let ((record (assoc key-2 (cdr subtable))))\n          (if record\n              (cdr record)\n              #f))\n        #f))) \n```", "```\n(define (insert! key-1 key-2 value table)\n  (let ((subtable (assoc key-1 (cdr table))))\n    (if subtable\n        (let ((record (assoc key-2 (cdr subtable))))\n          (if record\n              (set-cdr! record value)\n              (set-cdr! subtable\n                        (cons (cons key-2 value)\n                              (cdr subtable)))))\n        (set-cdr! table\n                  (cons (list key-1\n                              (cons key-2 value))\n                        (cdr table)))))\n  'ok) \n```", "```\n(define (make-table)\n  (let ((local-table (list '*table*)))\n    (define (lookup key-1 key-2)\n      (let ((subtable (assoc key-1 (cdr local-table))))\n        (if subtable\n            (let ((record (assoc key-2 (cdr subtable))))\n              (if record\n                  (cdr record)\n                  false))\n            false)))\n    (define (insert! key-1 key-2 value)\n      (let ((subtable (assoc key-1 (cdr local-table))))\n        (if subtable\n            (let ((record (assoc key-2 (cdr subtable))))\n              (if record\n                  (set-cdr! record value)\n                  (set-cdr! subtable\n                            (cons (cons key-2 value)\n                                  (cdr subtable)))))\n            (set-cdr! local-table\n                      (cons (list key-1\n                                  (cons key-2 value))\n                            (cdr local-table)))))\n      'ok)    \n    (define (dispatch m)\n      (cond ((eq? m 'lookup-proc) lookup)\n            ((eq? m 'insert-proc!) insert!)\n            (else (error \"Unknown operation -- TABLE\" m))))\n    dispatch)) \n```", "```\n(put <key-1> <key-2> <value>)\n(get <key-1> <key-2>) \n```", "```\n(define operation-table (make-table))\n(define get (operation-table 'lookup-proc))\n(define put (operation-table 'insert-proc!)) \n```"]