- en: Python Homework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due by April 28th, 2016 at 11:59PM PST
  prefs: []
  type: TYPE_NORMAL
- en: (but you should probably do this before/during Project 4)
  prefs: []
  type: TYPE_NORMAL
- en: Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download [here](https://drive.google.com/open?id=0Bx-YJoc_dDDGQjhHSnNlRDNkaTg).
  prefs: []
  type: TYPE_NORMAL
- en: Autograder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sorry! There's no autograder as of now. Just test your work as best you can,
    you'll be graded pretty leniently. A for effort. It'll be in the works if time
    permits.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Homework Problem 1: Naughty Strings**'
  prefs: []
  type: TYPE_NORMAL
- en: What is the error message returned when you improperly use quotes inside of
    strings?
  prefs: []
  type: TYPE_NORMAL
- en: Provide an example and explain the error message.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Homework Problem 2: Fruits and Vegetables**'
  prefs: []
  type: TYPE_NORMAL
- en: '`x = ["apple", "banana", "carrot"]`'
  prefs: []
  type: TYPE_NORMAL
- en: Write one line of code that when executed returns "apples bananas and carrots".
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Homework Problem 3: Fizz Buzz**'
  prefs: []
  type: TYPE_NORMAL
- en: Write a program that prints the integers from 1 to n (n is an argument to the
    procedure). But for multiples of three print "Fizz" instead of the number, and
    for the multiples of five print "Buzz". For numbers which are multiples of both
    three and five print "FizzBuzz".
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Homework Problem 4: Snow White and the Seven Dwarves**'
  prefs: []
  type: TYPE_NORMAL
- en: Write a program called `snow_white` that takes in two numbers as arguments,
    the first is the `num_chants`, the second is the `max_sing`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The program: 1\. prints "heigh" "ho" alternatingly 2\. prints "its off to work
    we go" after `num_chants` of "heigh" or "ho" 3\. stops printing after having "it''s
    off to work we go" `max_sing` times'
  prefs: []
  type: TYPE_NORMAL
- en: 'EXAMPLE: should print it''s off to work we go between every `5` alternating
    his and hos, for a maximum of `2` times.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Use a while loop (and possibly control statements) to accomplish this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Homework Problem 5: Push First Odd Back (taken from CS10)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a function called `push_first_odd_back` that takes in a list as an argument
    This function should place the first odd number at the back of the input list.
    Do not return a new list - in fact this function shouldn''t return anything, it
    should only modify the input list. (Hint: use the while loop)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Homework Problem 6: Cats and Dogs**'
  prefs: []
  type: TYPE_NORMAL
- en: Write a program that return True if the string "cat" and "dog" appear the same
    number of times in the given string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Homework Problem 7: Character Frequencies**'
  prefs: []
  type: TYPE_NORMAL
- en: Write a function `char_freq()` that takes a string and builds a frequency listing
    of the characters contained in it. Represent the frequency listing as a Python
    dictionary with each letter as a key that stores the number of times that letter
    appears.
  prefs: []
  type: TYPE_NORMAL
- en: Try it with something like `char_freq("abbabcbdbabdbdbabababcbcbab")`.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Homework Problem 8.1: Caesar''s Ciphers**'
  prefs: []
  type: TYPE_NORMAL
- en: Write a function `rotate_letters()` that takes in a number and creates a new
    mapping of lower case letters offset by that number. Return the new mapping as
    a dictionary such that the original letter is mapped to the shifted letter. For
    example, `rotate_letters(2)` would map `'a'`->`'c'`, `'b'`->`'d'`, `'c'`->`'e'`
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '**Homework Problem 8.2: Caesar''s Ciphers**'
  prefs: []
  type: TYPE_NORMAL
- en: Write a function `decode_cipher()` that takes in a dictionary of letter mappings
    and a cipher string (of only lower case letters). Return the decoded string that
    is created when every character is replaced by its mapping from the dictionary
    For example, `decode_cipher(rotate_letters(2), "abc")` should return `"cde"`.
  prefs: []
  type: TYPE_NORMAL
- en: Use this function to decode `"jbj fpurzr vf terng"` given that the letters had
    been shifted by 13.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Homework Problem 9: Memoized Factorial**'
  prefs: []
  type: TYPE_NORMAL
- en: Write a memoized accumulated factorial procedure in a similar fashion to `memo_fib`.
    You MUST use recursion.
  prefs: []
  type: TYPE_NORMAL
- en: Accumulated Factorial of 5 = 5! * 4! * 3! * 2! * 1!
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Homework Problem 10: Growing Pains (Exponentially)**'
  prefs: []
  type: TYPE_NORMAL
- en: Write a generator `gen_exp()` that takes a number n and generates (for eternity)
    the exponential of n to the n to the n starting at n. For example the first few
    elements of `gen_exp(2)` should be 2, (2^2), ((2^2)^ 2), (((2^2)^ 2) ^ 2)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Submit Your Homework!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Submit as python_hw instead of hw12\. Please submit on/after April 1, 2016 (not
    earlier)!
  prefs: []
  type: TYPE_NORMAL
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  prefs: []
  type: TYPE_NORMAL
