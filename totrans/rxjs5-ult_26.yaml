- en: Subject
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Subject
- en: Subject
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Subject
- en: 'A Subject is a double nature. It has both the behaviour from an [Observer](observer.html)
    and an [Observable](observable-anatomy.html). Thus the following is possible:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Subject具有双重性质。它既具有[Observer](observer.html)的行为，也具有[Observable](observable-anatomy.html)的行为。因此，以下是可能的：
- en: Emitting values
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 发出值
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Subscribing to values
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅值
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To sum it up the following operations exist on it:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下操作在其上存在：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Acting as a proxy
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 充当代理
- en: A `Subject` can act as a proxy, i.e receive values from another stream that
    the subscriber of the `Subject` can listen to.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`Subject`可以充当代理，即从另一个流接收值，订阅者可以监听`Subject`的值。'
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So essentially proxySubject `listens` to `source$`
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，proxySubject `监听` `source$`
- en: But it can also add its own contribution
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但它也可以做出自己的贡献
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**GOTCHA**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: Any `next()` that happens before a subscription is created is lost. There are
    other Subject types that can cater to this below.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 任何在创建订阅之前发生的`next()`都会丢失。还有其他可以满足此要求的Subject类型如下。
- en: Business case
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务案例
- en: So what's interesting about this? It can listen to some source when that data
    arrives as well as it has the ability to emit its own data and all arrives to
    the same subscriber. Ability to communicate between components in a bus like manner
    is the most obvious use case I can think of. Component 1 can place its value through
    `next()` and Component 2 can subscribe and conversely Component 2 can emit values
    in turn that Component 1 can subscribe to.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这有什么有趣之处？它可以在某些数据到达时监听某个源，同时具有发出自己数据的能力，所有数据都到达同一订阅者。在组件之间以总线方式通信的能力是我能想到的最明显的用例。组件1可以通过`next()`传递其值，组件2可以订阅，反之亦然，组件2可以反过来发出值，组件1可以订阅。
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ReplaySubject
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ReplaySubject
- en: 'prototype:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 原型：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Wow, what happened here, what happened to the first number?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，这里发生了什么，第一个数字怎么了？
- en: So a `.next()` that happens before the subscription is created, is normally
    lost. But in the case of a `ReplaySubject` we have a chance to save emitted values
    in the cache. Upon creation the cache has been decided to save two values.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在创建订阅之前发生的`.next()`通常会丢失。但是在`ReplaySubject`的情况下，我们有机会将发出的值保存在缓存中。在创建时，决定了缓存要保存两个值。
- en: 'Let''s illustrate how this works:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们说明一下这是如何工作的：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**GOTCHA**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: It matters both when the `.next()` operation happens, the size of the cache
    as well as when your subscription is created.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`.next()`操作发生的时间、缓存的大小以及订阅创建的时间都很重要。'
- en: In the example above it was demonstrated how to use the constructor using `bufferSize`
    argument in the constructor. However there also exist a `windowSize` argument
    where you can specify how long the values should remain in the cache. Set it to
    `null` and it remains in the cache indefinite.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，演示了如何在构造函数中使用`bufferSize`参数。但是还存在一个`windowSize`参数，您可以指定值在缓存中保留的时间。将其设置为`null`，它将无限期保留在缓存中。
- en: Business case
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务案例
- en: It's quite easy to imagine the business case here. You fetch some data and want
    the app to remember what was fetched latest, and what you fetched might only be
    relevant for a certain time and when enough time has passed you clear the cache.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里很容易想象到业务案例。您获取了一些数据，并希望应用程序记住最新获取的内容，您获取的内容可能只在一定时间内有效，当足够的时间过去后，您会清除缓存。
- en: AsyncSubject
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AsyncSubject
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Looking at this we expect 1,2 to be emitted right? WRONG.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 看到这个我们期望1,2会被发出对吗？错误。
- en: Nothing will be emitted unless `complete()` happen
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除非发生`complete()`，否则不会发出任何内容
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`complete()` needs to happen regardless of the finishing operation before it
    succeeds or fails so'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`complete()`需要发生，无论之前的操作成功还是失败，所以'
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Business case
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务案例
- en: When you care about preserving the last state just before the stream ends, be
    it a value or an error. So NOT last emitted state generally but last *before closing
    time*. With state I mean value or error.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当您关心在流结束之前保留最后状态时，无论是值还是错误。因此，通常不是最后发出的状态，而是在关闭时间之前的最后状态。状态指的是值或错误。
- en: BehaviourSubject
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BehaviourSubject
- en: 'This Subject emits the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Subject发出以下内容：
- en: the initial value
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始值
- en: the values emitted generally
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常发出的值
- en: last emitted value.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后发出的值。
- en: 'methods:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Business case
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务案例
- en: This is quite similar to `ReplaySubject`. There is a difference though, we can
    utilize a default / start value that we can show initially if it takes some time
    before the first values starts to arrive. We can inspect the latest emitted value
    and of course listen to everything that has been emitted. So think of `ReplaySubject`
    as more *long term memory* and `BehaviourSubject` as short term memory with default
    behaviour.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`ReplaySubject`非常相似。不过有一个区别，我们可以利用一个默认/初始值，在第一个值开始到达之前，我们可以首先显示它。我们可以检查最新发出的值，当然也可以监听所有已发出的内容。因此，将`ReplaySubject`视为更长期的记忆，而将`BehaviourSubject`视为具有默认行为的短期记忆。
