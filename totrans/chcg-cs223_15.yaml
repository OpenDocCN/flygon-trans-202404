- en: Queues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Queue` abstraction employs a First-In-First-Out (FIFO) policy for removing
    ("dequeing") elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Without having *O(1)* time access to the last element in a `List`, special care
    must be taken to provide efficient `Queue` operations in a purely functional language.
  prefs: []
  type: TYPE_NORMAL
- en: First Attempt — [`SlowQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/SlowQueue.elm)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Running times:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enqueue` : *Θ(n)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dequeue` : *O(1)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`peek` : *O(1)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second Attempt — [`AnotherSlowQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/AnotherSlowQueue.elm)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Running times:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enqueue` : *O(n)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dequeue` : *O(n)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`peek` : *O(n)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third Attempt — [`MediumQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/MediumQueue.elm)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Running times:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enqueue` : *O(1)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dequeue` : *O(n)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`peek` : *O(n)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Final Version — [`FastQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/FastQueue.elm)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Same representation `Q {front, back}` as previous version, but with the invariant
    `front = []` implies `back = []`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can factor out a common pattern from `enqueue` and `dequeue`. Notice that
    arguments `f` and `b` to `checkFront` do *not* necessarily satisfy the invariant,
    but the output `Queue` does.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Running times:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enqueue` : *O(1)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dequeue` : *O(n)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`peek` : *O(1)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The worst-case bound for `dequeue` does not tell the whole story, however, since
    it often runs in *O(1)* time and only occasionally runs in *O(n)* time. Using
    amortized asymptotic analysis, we will be able to argue that `dequeue` runs in
    *O(1)* on average.
  prefs: []
  type: TYPE_NORMAL
- en: Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Required
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Okasaki, Chapter 5.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
