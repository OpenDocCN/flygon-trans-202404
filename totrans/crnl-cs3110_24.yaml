- en: 'Recitation 15: Socket Programming in Async'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讲座15：Async中的套接字编程
- en: This recitation introduces the key ideas behind programming with *sockets* using
    the Async library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这个讲座介绍了使用Async库进行*套接字*编程的关键思想。
- en: Addresses and Ports
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地址和端口
- en: Many programs communicate with other programs over a network. Examples include
    web browsers, databases, SSH, streaming music services, and many others. To support
    such programs, most operating systems provide an abstraction called *sockets*
    that facilitates communicating with programs running on other hosts (or even the
    same host).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 许多程序通过网络与其他程序通信。例如，Web浏览器、数据库、SSH、流媒体音乐服务等。为了支持这些程序，大多数操作系统提供了一个称为*套接字*的抽象，便于与运行在其他主机（甚至同一主机）上的程序通信。
- en: 'There are two ways to use a socket: a *client* can connect to a server over
    a socket, while a *server* can listen for connections from clients and then respond
    to requests.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用套接字有两种方式：*客户端*可以通过套接字连接到服务器，而*服务器*可以监听来自客户端的连接，然后响应请求。
- en: A socket is usually identified by either a DNS name (e.g., `www.cs.cornell.edu`)
    or an IP address (e.g., `128.84.154.137`), as well as a port (e.g., 80). By convention,
    commonly used services are associated with specific ports. For example, port `80`
    is typically used for HTTP traffic. On UNIX machines, a listing of common ports
    is given in the /etc/services file.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，套接字通过DNS名称（例如，`www.cs.cornell.edu`）或IP地址（例如，`128.84.154.137`）以及端口（例如，80）来标识。按照惯例，常用服务与特定端口相关联。例如，端口`80`通常用于HTTP流量。在UNIX机器上，常用端口的列表在/etc/services文件中给出。
- en: Servers
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器
- en: The primary job of a server is to create a socket, listen for connections from
    clients, and handle their requests. Hence, a server consists of some initialization
    code, and an infinite loop that continuously listens for new connections from
    clients. To allow multiple clients to use the same server, it is important that
    the code for different clients execute concurrently—otherwise only one client
    could interact with the server at a time.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的主要工作是创建一个套接字，监听来自客户端的连接，并处理他们的请求。因此，服务器由一些初始化代码和一个无限循环组成，不断监听来自客户端的新连接。为了允许多个客户端使用同一个服务器，重要的是不同客户端的代码能够并发执行，否则一次只能有一个客户端与服务器交互。
- en: 'To create a server in Async, we can use the `create` function from the [Tcp.Server](https://ocaml.janestreet.com/ocaml-core/111.03.00/doc/async/#Std.Tcp.Server)
    module:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Async中创建一个服务器，我们可以使用[Tcp.Server](https://ocaml.janestreet.com/ocaml-core/111.03.00/doc/async/#Std.Tcp.Server)模块中的`create`函数：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The details of these arguments is explained below. The `create` function handles
    much of the boilerplate code needed to initialize a TCP server.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些论点的细节在下面有解释。`create`函数处理了初始化TCP服务器所需的大部分样板代码。
- en: 'As an example, consider the following code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑以下代码：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first line creates the server itself. The first optional argument, `on_handler_error`,
    specifies what should happen if the `handler` function raises an exception. The
    ``Ignore` variant, indicates that the exception should be silently dropped. Other
    alternatives include propagating the exception to the enclosing context (``Raise`),
    or calling an handler function `f` provided as an argument (``Call f`). The second
    argument specifies the TCP port to listen on, in this instance `3110`. The next
    argument is a handler function that is invoked on each client. In this case, it
    is just a dummy that returns a unit value immediately. More generally, it might
    read input from the client, do some computation, and send a response. The function
    receives as arguments `a`, `r`, and `w`, which represent the address of the client
    and the read and write endpoints of a communication channel for interacting with
    it respectively. The `r` and `w` arguments can be converted into values of type
    `Pipe.Reader.t` and `Pipe.Writer.t` using the `Reader.pipe` and `Writer.pipe`
    functions. The final line uses the `ignore` function to convert the resulting
    deferred value to a unit value.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行创建服务器本身。第一个可选参数`on_handler_error`指定了如果`handler`函数引发异常应该发生什么。``Ignore`变体表示异常应该被静默丢弃。其他替代方案包括将异常传播到封闭的上下文（``Raise`），或调用作为参数提供的处理程序函数`f`（``Call
    f`）。下一个参数指定要侦听的TCP端口，在本示例中为`3110`。下一个参数是一个在每个客户端上调用的处理程序函数。在这种情况下，它只是一个立即返回单位值的虚拟函数。更普遍地，它可能会从客户端读取输入，执行一些计算，并发送响应。该函数接收`a`、`r`和`w`作为参数，它们分别表示客户端的地址和用于与其交互的通信通道的读取和写入端点。可以使用`Reader.pipe`和`Writer.pipe`函数将`r`和`w`参数转换为`Pipe.Reader.t`和`Pipe.Writer.t`类型的值。最后一行使用`ignore`函数将生成的延迟值转换为单位值。
- en: 'To actually run the server, we need need to start the Async scheduler:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要实际运行服务器，我们需要启动Async调度器：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To test the server, we can connect to it using command-line utilities such as
    `telnet` or `netcat`. On UNIX systems, details can be found in the manual pages
    (e.g., `man telnet` or `man netcat`).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试服务器，我们可以使用诸如`telnet`或`netcat`之类的命令行工具连接到它。在UNIX系统上，详情可以在手册页面中找到（例如，`man telnet`或`man
    netcat`）。
- en: There are several things to notice about this code. First, the handler for each
    client returns a value of type `unit Deferred.t`. This allows the server to continue
    to process requests from other clients while the handler is being executed. It
    is essential that the code be concurrent because in general the handler may involve
    a lot of waiting or computation—reading files off of the disk, computing the result
    of a database query, or waiting for interactive input from the client, etc. For
    example, in the case of an SSH server, the handler will run as long as the remote
    shell session is open, which can be weeks or even months! Second, the deferred
    value corresponding to the server is simply ignored. Usually it is not a good
    idea to ignore values. However, in the case of a server, this value is often not
    needed because the server continues listening for connections until the `close`
    function is called,
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这段代码有几件事需要注意。首先，每个客户端的处理程序返回`unit Deferred.t`类型的值。这使得服务器能够在处理程序执行时继续处理来自其他客户端的请求。代码必须是并发的，因为通常情况下处理程序可能会涉及大量的等待或计算——从磁盘读取文件，计算数据库查询的结果，或等待来自客户端的交互输入等等。例如，在SSH服务器的情况下，处理程序将在远程shell会话保持打开状态时运行，这可能会持续数周甚至数月！其次，与服务器对应的延迟值简单地被忽略了。通常情况下忽略值并不是一个好主意。然而，在服务器的情况下，通常不需要此值，因为服务器会继续监听连接，直到调用`close`函数，
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: or the whole process is terminated by the operating system. In this case, we
    will never need to call `close`, so the server will run until we kill it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 或者整个过程被操作系统终止。在这种情况下，我们将永远不需要调用`close`，因此服务器将持续运行直到我们终止它。
- en: Clients
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端
- en: As we've already seen, one simple way to interact with a server is to use command-line
    utilities such as `telnet` to connect to a server, send it input, and receive
    responses. More generally, we may want to embed a client into a programs. For
    example, a client could connect to one web server to read a list of prices for
    a given item, and then connect to a database server to store the data for later
    analysis. The Async library also includes functions that make it easy to create
    TCP clients, which can be used hand-in-hand with the functions for creating servers,
    or with arbitrary other servers on the Internet.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的，与服务器进行交互的一个简单方式是使用诸如`telnet`之类的命令行工具连接服务器，发送输入并接收响应。更一般地，我们可能想要将客户端嵌入到程序中。例如，一个客户端可以连接到一个网络服务器以读取给定物品的价格列表，然后连接到数据库服务器以存储数据以供以后分析。Async库还包括一些函数，可以轻松创建TCP客户端，这些客户端可以与创建服务器的函数一起使用，也可以与互联网上的任意其他服务器一起使用。
- en: 'To create a server we can use the following pair of functions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建服务器，我们可以使用以下一对函数：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As an example, the following code
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，以下代码
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: connects to the server listening at port `3110` on the local machine, sends
    the string `"Hello World!"` to the server, reads the response, and then shuts
    down the connection. The variant ``Both` passed to `Socket.shutdown` indicates
    that both the read and write pipes should be closed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到本地机器上侦听端口`3110`的服务器，向服务器发送字符串`"Hello World!"`，读取响应，然后关闭连接。`Socket.shutdown`传递给`Both`的变体表示读取和写入管道都应该关闭。
- en: Going Further
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步探索
- en: The essential pieces of many clients and servers can be expressed using just
    these simple functions for creating and communicating over TCP sockets. Analogous
    functions exist in most other languages, although without Async's abstraction
    of deferred computation, there are typically many more details related to forking
    and synchronizing operating-system level threads. If you want to go further, we
    suggest coding up some simple servers that implement functionality such as serving
    up a fortune cookie to clients, or fetching the weather from a server such as
    `weather.cornell.edu`. On the client side, you may find it interesting to write
    programs that automate common tasks such as fetching headlines from your favorite
    newspaper. Another issue to investigate concerns exceptions—what should happen
    when a client or server does not behave as expected. Generally speaking, exceptions
    must be handled gracefully, so that a single misbehaving client does not interrupt
    the service for others. Finally, the [Typed TCP](https://ocaml.janestreet.com/ocaml-core/111.03.00/doc/async/#Std.Typed_tcp)
    module provides a number of useful helper functions for creating clients and servers
    that communicate using messages drawn from a specific application-level protocol.
    These functions can be used to automate much of the boilerplate code related to
    parsing and pretty-printing strings, and also provides a simple form of typechecking.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 许多客户端和服务器的基本部件可以仅使用这些简单的创建和通过TCP套接字通信的函数来表达。大多数其他语言中都存在类似的函数，尽管没有Async对延迟计算的抽象，通常会涉及更多与进程分叉和操作系统级线程同步相关的细节。如果你想进一步，我们建议编写一些简单的服务器代码，实现诸如为客户端提供幸运饼干或从服务器（如`weather.cornell.edu`）获取天气等功能。在客户端方面，你可能会发现编写自动执行常见任务的程序很有趣，比如从你喜欢的报纸获取头条新闻。另一个要调查的问题涉及异常——当客户端或服务器的行为不符合预期时应该发生什么。一般来说，异常必须得到优雅地处理，以便一个行为不端的客户端不会中断其他人的服务。最后，[Typed
    TCP](https://ocaml.janestreet.com/ocaml-core/111.03.00/doc/async/#Std.Typed_tcp)模块提供了许多有用的辅助函数，用于创建使用来自特定应用级协议的消息进行通信的客户端和服务器。这些函数可以用于自动化与解析和漂亮打印字符串相关的样板代码的大部分，同时还提供了一种简单的类型检查形式。
