["```\n# Lab 11 MNIST and Deep learning CNN\nimport tensorflow as tf\nimport random\n# import matplotlib.pyplot as plt\n\nfrom tensorflow.examples.tutorials.mnist import input_data\n\ntf.set_random_seed(777)  # reproducibility\n\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n# Check out https://www.tensorflow.org/get_started/mnist/beginners for\n# more information about the mnist dataset\n\n# hyper parameters\nlearning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100\n\n# dropout (keep_prob) rate  0.7~0.5 on training, but should be 1 for testing\nkeep_prob = tf.placeholder(tf.float32)\n\n# input place holders\nX = tf.placeholder(tf.float32, [None, 784])\nX_img = tf.reshape(X, [-1, 28, 28, 1])   # img 28x28x1 (black/white)\nY = tf.placeholder(tf.float32, [None, 10])\n\n# L1 ImgIn shape=(?, 28, 28, 1)\nW1 = tf.Variable(tf.random_normal([3, 3, 1, 32], stddev=0.01))\n#    Conv     -> (?, 28, 28, 32)\n#    Pool     -> (?, 14, 14, 32)\nL1 = tf.nn.conv2d(X_img, W1, strides=[1, 1, 1, 1], padding='SAME')\nL1 = tf.nn.relu(L1)\nL1 = tf.nn.max_pool(L1, ksize=[1, 2, 2, 1],\n                    strides=[1, 2, 2, 1], padding='SAME')\nL1 = tf.nn.dropout(L1, keep_prob=keep_prob)\n'''\nTensor(\"Conv2D:0\", shape=(?, 28, 28, 32), dtype=float32)\nTensor(\"Relu:0\", shape=(?, 28, 28, 32), dtype=float32)\nTensor(\"MaxPool:0\", shape=(?, 14, 14, 32), dtype=float32)\nTensor(\"dropout/mul:0\", shape=(?, 14, 14, 32), dtype=float32)\n'''\n\n# L2 ImgIn shape=(?, 14, 14, 32)\nW2 = tf.Variable(tf.random_normal([3, 3, 32, 64], stddev=0.01))\n#    Conv      ->(?, 14, 14, 64)\n#    Pool      ->(?, 7, 7, 64)\nL2 = tf.nn.conv2d(L1, W2, strides=[1, 1, 1, 1], padding='SAME')\nL2 = tf.nn.relu(L2)\nL2 = tf.nn.max_pool(L2, ksize=[1, 2, 2, 1],\n                    strides=[1, 2, 2, 1], padding='SAME')\nL2 = tf.nn.dropout(L2, keep_prob=keep_prob)\n'''\nTensor(\"Conv2D_1:0\", shape=(?, 14, 14, 64), dtype=float32)\nTensor(\"Relu_1:0\", shape=(?, 14, 14, 64), dtype=float32)\nTensor(\"MaxPool_1:0\", shape=(?, 7, 7, 64), dtype=float32)\nTensor(\"dropout_1/mul:0\", shape=(?, 7, 7, 64), dtype=float32)\n'''\n\n# L3 ImgIn shape=(?, 7, 7, 64)\nW3 = tf.Variable(tf.random_normal([3, 3, 64, 128], stddev=0.01))\n#    Conv      ->(?, 7, 7, 128)\n#    Pool      ->(?, 4, 4, 128)\n#    Reshape   ->(?, 4 * 4 * 128) # Flatten them for FC\nL3 = tf.nn.conv2d(L2, W3, strides=[1, 1, 1, 1], padding='SAME')\nL3 = tf.nn.relu(L3)\nL3 = tf.nn.max_pool(L3, ksize=[1, 2, 2, 1], strides=[\n                    1, 2, 2, 1], padding='SAME')\nL3 = tf.nn.dropout(L3, keep_prob=keep_prob)\nL3_flat = tf.reshape(L3, [-1, 128 * 4 * 4])\n'''\nTensor(\"Conv2D_2:0\", shape=(?, 7, 7, 128), dtype=float32)\nTensor(\"Relu_2:0\", shape=(?, 7, 7, 128), dtype=float32)\nTensor(\"MaxPool_2:0\", shape=(?, 4, 4, 128), dtype=float32)\nTensor(\"dropout_2/mul:0\", shape=(?, 4, 4, 128), dtype=float32)\nTensor(\"Reshape_1:0\", shape=(?, 2048), dtype=float32)\n'''\n\n# L4 FC 4x4x128 inputs -> 625 outputs\nW4 = tf.get_variable(\"W4\", shape=[128 * 4 * 4, 625],\n                     initializer=tf.contrib.layers.xavier_initializer())\nb4 = tf.Variable(tf.random_normal([625]))\nL4 = tf.nn.relu(tf.matmul(L3_flat, W4) + b4)\nL4 = tf.nn.dropout(L4, keep_prob=keep_prob)\n'''\nTensor(\"Relu_3:0\", shape=(?, 625), dtype=float32)\nTensor(\"dropout_3/mul:0\", shape=(?, 625), dtype=float32)\n'''\n\n# L5 Final FC 625 inputs -> 10 outputs\nW5 = tf.get_variable(\"W5\", shape=[625, 10],\n                     initializer=tf.contrib.layers.xavier_initializer())\nb5 = tf.Variable(tf.random_normal([10]))\nlogits = tf.matmul(L4, W5) + b5\n'''\nTensor(\"add_1:0\", shape=(?, 10), dtype=float32)\n'''\n\n# define cost/loss & optimizer\ncost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=logits, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)\n\n# initialize\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\n\n# train my model\nprint('Learning started. It takes sometime.')\nfor epoch in range(training_epochs):\n    avg_cost = 0\n    total_batch = int(mnist.train.num_examples / batch_size)\n\n    for i in range(total_batch):\n        batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n        feed_dict = {X: batch_xs, Y: batch_ys, keep_prob: 0.7}\n        c, _ = sess.run([cost, optimizer], feed_dict=feed_dict)\n        avg_cost += c / total_batch\n\n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n\nprint('Learning Finished!')\n\n# Test model and check accuracy\n\n# if you have a OOM error, please refer to lab-11-X-mnist_deep_cnn_low_memory.py\n\ncorrect_prediction = tf.equal(tf.argmax(logits, 1), tf.argmax(Y, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint('Accuracy:', sess.run(accuracy, feed_dict={\n      X: mnist.test.images, Y: mnist.test.labels, keep_prob: 1}))\n\n# Get one and predict\nr = random.randint(0, mnist.test.num_examples - 1)\nprint(\"Label: \", sess.run(tf.argmax(mnist.test.labels[r:r + 1], 1)))\nprint(\"Prediction: \", sess.run(\n    tf.argmax(logits, 1), feed_dict={X: mnist.test.images[r:r + 1], keep_prob: 1}))\n\n# plt.imshow(mnist.test.images[r:r + 1].\n#           reshape(28, 28), cmap='Greys', interpolation='nearest')\n# plt.show()\n\n'''\nLearning stared. It takes sometime.\nEpoch: 0001 cost = 0.385748474\nEpoch: 0002 cost = 0.092017397\nEpoch: 0003 cost = 0.065854684\nEpoch: 0004 cost = 0.055604566\nEpoch: 0005 cost = 0.045996377\nEpoch: 0006 cost = 0.040913645\nEpoch: 0007 cost = 0.036924479\nEpoch: 0008 cost = 0.032808939\nEpoch: 0009 cost = 0.031791007\nEpoch: 0010 cost = 0.030224456\nEpoch: 0011 cost = 0.026849916\nEpoch: 0012 cost = 0.026826763\nEpoch: 0013 cost = 0.027188021\nEpoch: 0014 cost = 0.023604777\nEpoch: 0015 cost = 0.024607201\nLearning Finished!\nAccuracy: 0.9938\n''' \n```"]