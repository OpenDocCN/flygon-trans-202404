["```\n# Lab 13 Saver and Restore\nimport tensorflow as tf\nimport random\n# import matplotlib.pyplot as plt\nimport os\n\nfrom tensorflow.examples.tutorials.mnist import input_data\n\ntf.set_random_seed(777)  # reproducibility\n\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n# Check out https://www.tensorflow.org/get_started/mnist/beginners for\n# more information about the mnist dataset\n\n# parameters\nlearning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100\n\nCHECK_POINT_DIR = TB_SUMMARY_DIR = './tb/mnist2'\n\n# input place holders\nX = tf.placeholder(tf.float32, [None, 784])\nY = tf.placeholder(tf.float32, [None, 10])\n\n# Image input\nx_image = tf.reshape(X, [-1, 28, 28, 1])\ntf.summary.image('input', x_image, 3)\n\n# dropout (keep_prob) rate  0.7~0.5 on training, but should be 1 for testing\nkeep_prob = tf.placeholder(tf.float32)\n\n# weights & bias for nn layers\n# http://stackoverflow.com/questions/33640581/how-to-do-xavier-initialization-on-tensorflow\nwith tf.variable_scope('layer1'):\n    W1 = tf.get_variable(\"W\", shape=[784, 512],\n                         initializer=tf.contrib.layers.xavier_initializer())\n    b1 = tf.Variable(tf.random_normal([512]))\n    L1 = tf.nn.relu(tf.matmul(X, W1) + b1)\n    L1 = tf.nn.dropout(L1, keep_prob=keep_prob)\n\n    tf.summary.histogram(\"X\", X)\n    tf.summary.histogram(\"weights\", W1)\n    tf.summary.histogram(\"bias\", b1)\n    tf.summary.histogram(\"layer\", L1)\n\nwith tf.variable_scope('layer2'):\n    W2 = tf.get_variable(\"W\", shape=[512, 512],\n                         initializer=tf.contrib.layers.xavier_initializer())\n    b2 = tf.Variable(tf.random_normal([512]))\n    L2 = tf.nn.relu(tf.matmul(L1, W2) + b2)\n    L2 = tf.nn.dropout(L2, keep_prob=keep_prob)\n\n    tf.summary.histogram(\"weights\", W2)\n    tf.summary.histogram(\"bias\", b2)\n    tf.summary.histogram(\"layer\", L2)\n\nwith tf.variable_scope('layer3'):\n    W3 = tf.get_variable(\"W\", shape=[512, 512],\n                         initializer=tf.contrib.layers.xavier_initializer())\n    b3 = tf.Variable(tf.random_normal([512]))\n    L3 = tf.nn.relu(tf.matmul(L2, W3) + b3)\n    L3 = tf.nn.dropout(L3, keep_prob=keep_prob)\n\n    tf.summary.histogram(\"weights\", W3)\n    tf.summary.histogram(\"bias\", b3)\n    tf.summary.histogram(\"layer\", L3)\n\nwith tf.variable_scope('layer4'):\n    W4 = tf.get_variable(\"W\", shape=[512, 512],\n                         initializer=tf.contrib.layers.xavier_initializer())\n    b4 = tf.Variable(tf.random_normal([512]))\n    L4 = tf.nn.relu(tf.matmul(L3, W4) + b4)\n    L4 = tf.nn.dropout(L4, keep_prob=keep_prob)\n\n    tf.summary.histogram(\"weights\", W4)\n    tf.summary.histogram(\"bias\", b4)\n    tf.summary.histogram(\"layer\", L4)\n\nwith tf.variable_scope('layer5'):\n    W5 = tf.get_variable(\"W\", shape=[512, 10],\n                         initializer=tf.contrib.layers.xavier_initializer())\n    b5 = tf.Variable(tf.random_normal([10]))\n    hypothesis = tf.matmul(L4, W5) + b5\n\n    tf.summary.histogram(\"weights\", W5)\n    tf.summary.histogram(\"bias\", b5)\n    tf.summary.histogram(\"hypothesis\", hypothesis)\n\n# define cost/loss & optimizer\ncost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=hypothesis, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)\n\ntf.summary.scalar(\"loss\", cost)\n\nlast_epoch = tf.Variable(0, name='last_epoch')\n\n# Summary\nsummary = tf.summary.merge_all()\n\n# initialize\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\n\n# Create summary writer\nwriter = tf.summary.FileWriter(TB_SUMMARY_DIR)\nwriter.add_graph(sess.graph)\nglobal_step = 0\n\n# Saver and Restore\nsaver = tf.train.Saver()\ncheckpoint = tf.train.get_checkpoint_state(CHECK_POINT_DIR)\n\nif checkpoint and checkpoint.model_checkpoint_path:\n    try:\n        saver.restore(sess, checkpoint.model_checkpoint_path)\n        print(\"Successfully loaded:\", checkpoint.model_checkpoint_path)\n    except:\n        print(\"Error on loading old network weights\")\nelse:\n    print(\"Could not find old network weights\")\n\nstart_from = sess.run(last_epoch)\n\n# train my model\nprint('Start learning from:', start_from)\n\nfor epoch in range(start_from, training_epochs):\n    print('Start Epoch:', epoch)\n\n    avg_cost = 0\n    total_batch = int(mnist.train.num_examples / batch_size)\n\n    for i in range(total_batch):\n        batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n        feed_dict = {X: batch_xs, Y: batch_ys, keep_prob: 0.7}\n        s, _ = sess.run([summary, optimizer], feed_dict=feed_dict)\n        writer.add_summary(s, global_step=global_step)\n        global_step += 1\n\n        avg_cost += sess.run(cost, feed_dict=feed_dict) / total_batch\n\n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n\n    print(\"Saving network...\")\n    sess.run(last_epoch.assign(epoch + 1))\n    if not os.path.exists(CHECK_POINT_DIR):\n        os.makedirs(CHECK_POINT_DIR)\n    saver.save(sess, CHECK_POINT_DIR + \"/model\", global_step=i)\n\nprint('Learning Finished!')\n\n# Test model and check accuracy\ncorrect_prediction = tf.equal(tf.argmax(hypothesis, 1), tf.argmax(Y, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint('Accuracy:', sess.run(accuracy, feed_dict={\n      X: mnist.test.images, Y: mnist.test.labels, keep_prob: 1}))\n\n# Get one and predict\nr = random.randint(0, mnist.test.num_examples - 1)\nprint(\"Label: \", sess.run(tf.argmax(mnist.test.labels[r:r + 1], 1)))\nprint(\"Prediction: \", sess.run(\n    tf.argmax(hypothesis, 1), feed_dict={X: mnist.test.images[r:r + 1], keep_prob: 1}))\n\n# plt.imshow(mnist.test.images[r:r + 1].\n#           reshape(28, 28), cmap='Greys', interpolation='nearest')\n# plt.show()\n\n'''\n\n...\n\nSuccessfully loaded: ./tb/mnist/model-549\nStart learning from: 2\nEpoch: 2\n\n...\ntensorboard --logdir tb/\nStarting TensorBoard b'41' on port 6006\n(You can navigate to http://10.0.1.4:6006)\n\n''' \n```"]