- en: Formal Rules for Cached SubstitutionsTuesday, January 31st
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The formal evaluation rules are now different. Evaluation carries along a *substitution
    cache* that begins its life as empty: so `eval` needs an extra argument. We begin
    by writing the rules that deal with the cache, and use the above function names
    for simplicity — the behavior of the three definitions can be summed up in a single
    rule for `lookup`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: And now we can write the new rules for `eval`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that there is no mention of `subst` — the whole point is that we don’t
    really do substitution, but use the cache instead. The `lookup` rules, and the
    places where `extend` is used replaces `subst`, and therefore specifies our scoping
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that the rule for `call` is still very similar to the rule for `with`,
    but it looks like we have lost something — the interesting bit with substituting
    into `fun` expressions.
  prefs: []
  type: TYPE_NORMAL
