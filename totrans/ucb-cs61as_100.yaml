- en: Exercises for Partner A
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伙伴 A 的练习
- en: Question A3
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 A3
- en: 'You will notice that whenever a person goes to a new place, the place gets
    an `''enter` message. In addition, the place the person previously inhabited gets
    an `''exit` message. When the place gets the message, it calls each procedure
    on its list of `entry-procedures` or `exit-procedures` as appropriate. Places
    have the following methods defined for manipulating these lists of procedures:
    `add-entry-procedure`, `add-exit-procedure`, `remove-entry-procedure`, `remove-exit-procedure`,
    and `clear-all-procs`. You can read their definitions in the code.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，每当一个人去一个新地方时，这个地方会收到一个`'enter`消息。此外，这个人之前所在的地方会收到一个`'exit`消息。当地方收到消息时，它会调用其`entry-procedures`或`exit-procedures`列表中的每个过程。地方有以下用于操作这些过程列表的方法：`add-entry-procedure`、`add-exit-procedure`、`remove-entry-procedure`、`remove-exit-procedure`和`clear-all-procs`。你可以在代码中阅读它们的定义。
- en: Sproul Hall has a particularly obnoxious exit procedure attached to it. Fix
    `sproul-hall-exit` so that it counts how many times it gets called, and stops
    being obnoxious after the third time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Sproul Hall 附有一个特别讨厌的退出过程。修复`sproul-hall-exit`，使其在第三次调用后停止讨厌。
- en: Remember that the `exit-procs` list contains procedures, not names of procedures!
    It's not good enough to redefine `sproul-hall-exit`, since Sproul Hall's list
    of exit procedures still contains the old procedure. The best thing to do is just
    to load `adv-world.scm` again, which will define a new Sproul Hall and add the
    new exit procedure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`exit-procs`列表包含的是过程，而不是过程的名称！重新定义`sproul-hall-exit`是不够的，因为 Sproul Hall
    的退出过程列表仍然包含旧的过程。最好的做法是再次加载`adv-world.scm`，这将定义一个新的 Sproul Hall 并添加新的退出过程。
- en: 'Question A4: Part 1'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 A4：第1部分
- en: 'We''ve provided people with the ability to say something using the messages
    `''talk` and `''set-talk`. As you may have noticed, some people around this campus
    start talking whenever anyone walks by. We want to simulate this behavior. In
    any such interaction there are two people involved: the one who was already at
    the place (hereafter called the `talker`) and the one who is just entering the
    place (the `listener`). We have already provided a mechanism so that the `listener`
    sends an `enter` message to the place when entering. Also, each person is ready
    to accept a `notice` message, meaning that the person should notice that someone
    new has come. The `talker` should get a `notice` message, and will then talk,
    because we''ve made a person''s `notice` method send itself a `talk` message.
    (Later we''ll see that some special kinds of people have different `notice` methods.)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为人们提供了使用消息`'talk`和`'set-talk`来说话的能力。正如你可能已经注意到的，这个校园周围的一些人在别人经过时开始交谈。我们想要模拟这种行为。在任何这样的互动中，涉及到两个人：一个是已经在这个地方的人（以下简称为`talker`），另一个是刚刚进入这个地方的人（`listener`）。我们已经提供了一个机制，让`listener`在进入时向这个地方发送一个`enter`消息。此外，每个人都准备接受一个`notice`消息，意味着这个人应该注意到有新人来了。`talker`应该收到一个`notice`消息，然后开始交谈，因为我们让一个人的`notice`方法发送一个`talk`消息给自己。（稍后我们会看到一些特殊类型的人有不同的`notice`方法。）
- en: Your job is to modify the `enter` method for places, so that in addition to
    what that method already does, it sends a `notice` message to each person in that
    place **other than the person who is entering**. The `notice` message should have
    the newly-entered person as an argument. (You won't do anything with that argument
    now, but you'll need it later.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你的任务是修改地方的`enter`方法，以便除了正在进入的人之外，还向该地方的每个人发送一个`notice`消息。`notice`消息应该有新进入的人作为参数。（现在你不会对该参数做任何操作，但以后会用到。）
- en: 'Add the following to `adv-world.scm`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到`adv-world.scm`中：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Try walking around to `sproul-plaza` and `telegraph-ave` to see if the messages
    are triggered.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试四处走动到`sproul-plaza`和`telegraph-ave`，看看是否触发了消息。
- en: '**You must include a transcript in which your character walks around and triggers
    these messages.**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**你必须包含一个脚本，其中你的角色四处走动并触发这些消息。**'
- en: 'Question A4: Part 2'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 A4：第2部分
- en: So far the program assumes that anyone can go anywhere they want. In real life,
    many places have locked doors.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，程序假设任何人都可以去任何地方。在现实生活中，许多地方都有上锁的门。
- en: 'Invent a `may-enter?` message for places that takes a person as an argument
    and always returns `#t`. Then invent a `locked-place` class in which the `may-
    enter?` method returns #t if the place is unlocked, or #f if it''s locked. (It
    should initially be locked.) The `locked-place` class must also have an `unlock`
    message. For simplicity, write this method with no arguments and have it always
    succeed. In a real game, we would also invent keys, and a mechanism requiring
    that the person have the correct key in order to unlock the door. (That''s why
    `may-enter?` takes the person as an argument.)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为地方发明一个`may-enter?`消息，它接受一个人作为参数，并始终返回`#t`。然后发明一个`locked-place`类，在其中`may-enter?`方法如果地方是未锁定的则返回`#t`，如果地方是锁定的则返回`#f`。（它应该最初是锁定的。）`locked-place`类还必须有一个`unlock`消息。为简单起见，编写此方法时不带参数，并始终成功。在真实的游戏中，我们还会发明钥匙，并且需要��个机制，要求人必须有正确的钥匙才能打开门。（这就是为什么`may-enter?`接受人作为参数的原因。）
- en: Modify the `person` class so that it checks for permission to enter before moving
    from one place to another. If a person cannot enter, return an error. Then create
    a locked place and test it out.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`person`类，以便在从一个地方移动到另一个地方之前检查是否有权限进入。如果一个人无法进入，返回一个错误。然后创建一个锁定的地方并进行测试。
- en: '**Note:** A locked-place should take one instantiation variable, its name.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 一个锁定的地方应该有一个实例化变量，即它的名称。'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Question A5
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 A5
- en: 'Walking around is great, but some people commute from far away, so they need
    to park their vehicles in garages. A vehicle is just a `thing`, but you''ll have
    to invent a special kind of place called a `garage`. Garages have two methods
    (besides the ones all places have): `park` and `unpark`. You''ll also need a special
    kind of `thing` called a `ticket`; what''s special about it is that it has a `number`
    as an instantiation variable.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 四处走动很棒，但有些人从远处通勤，所以他们需要把车辆停放在车库里。车辆只是一个`thing`，但你需要发明一种特殊类型的地方，称为`garage`。车库有两种方法（除了所有地方都有的方法）：`park`和`unpark`。你还需要一种特殊类型的`thing`，称为`ticket`；它的特殊之处在于它有一个`number`作为实例化变量。
- en: The `park` method takes a vehicle (a `thing`) as its argument. First check to
    be sure that the vehicle is actually in the garage. (The person who possesses
    the vehicle will enter the garage, then ask to park it, so the vehicle should
    have entered the garage along with the person before the `park` message is sent.)
    Then generate a `ticket` with a unique serial number. (The counter for serial
    numbers should be shared among all garages, so that we don't get in trouble later
    trying to `unpark` a vehicle from one garage that was parked in a different garage.)
    Every ticket should have the name `ticket`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`park`方法接受一个车辆（一个`thing`）作为参数。首先检查车辆是否实际上在车库里。（拥有车辆的人会进入车库，然后要求停放车辆，所以在发送`park`消息之前，车辆应该与人一起进入车库。）然后生成一个带有唯一序列号的`ticket`。（序列号计数器应该在所有车库之间共享，这样我们以后不会因为尝试从一个车库取车在另一个车库停放的车辆而陷入麻烦。）每张票据都应该有名称`ticket`。'
- en: 'You''ll associate the ticket number with the vehicle in a key-value table like
    the one that we used with `get` and `put` in Lesson 6\. However, `get` and `put`
    refer to a single, fixed table for all operations; in this situation we need a
    separate table for every garage. The file `tables.scm` contains an implementation
    of the table Abstract Data Type:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你将把票据号码与车辆关联在一个键值表中，就像我们在第6课中使用`get`和`put`一样。然而，`get`和`put`是针对所有操作使用单个固定表格；在这种情况下，我们需要为每个车库使用单独的表格。文件`tables.scm`包含了表格抽象数据类型的实现：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You'll learn how tables are implemented in [SICP 3.3.3 (pp. 266-268)](https://mitpress.mit.edu/sicp/full-text/sicp/book/node63.html).
    For now, just take them as primitive.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习如何在[SICP 3.3.3 (pp. 266-268)](https://mitpress.mit.edu/sicp/full-text/sicp/book/node63.html)中实现表格。现在，暂时将它们视为原始的。
- en: Make a table entry with the ticket number as the key, and the vehicle as the
    value. Then ask the vehicle's owner to lose the vehicle and take the ticket.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个以票据号码为键，车辆为值的表格条目。然后要求车辆的所有者丢失车辆并带走票据。
- en: The `unpark` method takes a ticket as argument. First make sure the object you
    got is actually a ticket (by checking the name). Then look up the ticket number
    in the garage's table. If you find a vehicle, ask the ticket's owner to lose the
    ticket and take the vehicle. Also, insert `#f` in the table for that ticket number,
    so that people can't unpark the vehicle twice.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`unpark`方法接受一个票据作为参数。首先确保你得到的对象实际上是一个票据（通过检查名称）。然后在车库的表格中查找票据号码。如果找到车辆，要求票据的所有者丢失票据并带走车辆。此外，在该票据号码的表格中插入`#f`，以防止人们两次取车。'
- en: A real-life garage would have a limited capacity, and would charge money for
    parking, but to simplify the project you don't have to simulate those aspects
    of garages.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真实的车库会有限定的容量，并且会收取停车费，但为了简化项目，你不必模拟车库的这些方面。
- en: '**Be sure not to name anything a "car"! This will mess up everything!**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**一定不要将任何东西命名为"car"！这会搞乱一切！**'
- en: 'Notes:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: A ticket only has one instantiation variable, a serial number. (e.g., `(instantiate
    ticket 120)`).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个停车票只有一个实例化变量，即一个序列号。（例如，`(instantiate ticket 120)`）。
- en: A ticket is a thing with the name `'ticket`
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个停车票是一个带有名称`'ticket`的物品。
- en: A garage takes one instantiation variable, its name. (e.g., `(instantiate garage
    'soda-garage)`).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个车库需要一个实例化变量，即它的名称。（例如，`(instantiate garage 'soda-garage)`）。
- en: Do NOT define a new class for vehicles. You can assume that park is called with
    the correct argument.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要为车辆定义一个新的类。你可以假设 park 被正确的参数调用。
- en: Parking a vehicle that is not owned by anyone should return an error.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停放一个无主的车辆应该返回一个错误。
- en: Unparking a vehicle that is not parked should return an error.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解除停车一个未停放的车辆应该返回一个错误。
