- en: The Core of `make-recursive`Tuesday, February 14th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`make-recursive`的核心星期二，二月14日'
- en: As in Racket, being able to express recursive functions is a fundamental property
    of the language. It means that we can have loops in our language, and that’s the
    essence of making a language powerful enough to be TM-equivalent — able to express
    undecidable problems, where we don’t know whether there is an answer or not.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在Racket中一样，能够表达递归函数是语言的一个基本属性。这意味着我们的语言中可以有循环，这就是使语言强大到足以成为TM等价的本质——能够表达不可判定问题，我们不知道是否有答案。
- en: 'The core of what makes this possible is the expression that we have seen in
    our derivation:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切能够实现的核心是我们在推导中看到的表达式：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'which reduces to itself, and therefore has no value: trying to evaluate it
    gets stuck in an infinite loop. (This expression is often called “Omega”.)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 它简化为自身，因此没有价值：试图评估它会陷入无限循环。（这个表达式通常被称为“Omega”。）
- en: 'This is the key for creating a loop — we use it to make recursion possible.
    Looking at our final `make-recursive` definition and ignoring for a moment the
    “protection” that we need against being stuck prematurely in an infinite loop:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建循环的关键——我们用它来实现递归。忽略我们最终的`make-recursive`定义，暂时不考虑我们需要防止过早陷入无限循环的“保护”：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'we can see that this is almost the same as the Omega expression — the only
    difference is that application of `f`. Indeed, this expression (the result of
    (make-recursive F) for some `F`) reduces in a similar way to Omega:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，这几乎与Omega表达式相同——唯一的区别在于`f`的应用。实际上，这个表达式（某些`F`的（make-recursive F）的结果）以类似的方式减少到Omega：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'which means that the actual value of this expression is:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着这个表达式的实际值是：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This definition would be sufficient if we had a lazy language, but to get things
    working in a strict one we need to bring back the protection. This makes things
    a little different — if we use `(protect f)` to be a shorthand for the protection
    trick,
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个惰性语言，这个定义就足够了，但是为了在严格的语言中使事情正常工作，我们需要重新引入保护。这使得事情有些不同——如果我们使用`(protect
    f)`作为保护技巧的简写，
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'then we have:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: which makes the (make-recursive F) evaluation reduce to
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得（make-recursive F）的评估简化为
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: and this is still the same result (as long as `F` is a single-argument function).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 而这仍然是相同的结果（只要`F`是一个单参数函数）。
- en: (Note that `protect` cannot be implemented as a plain function!)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意，`protect` 不能被实现为普通函数！）
