- en: Chapter 8 - DocumentFragment Nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 8.1 *DocumentFragment* object overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The creation and use of a *DocumentFragment* node provides a light weight document
    DOM that is external to the live DOM tree. Think of a *DocumentFragment* as an
    empty document template that acts just like the live DOM tree, but only lives
    in memory, and its child nodes can easily be manipulated in memory and then appended
    to the live DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 8.2 Creating *DocumentFragment*'s using *createDocumentFragment()*
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the code below a *DocumentFragment* is created using *createDocumentFragment()*
    and *<li>*'s are appended to the fragment.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/6e3uX](http://jsfiddle.net/domenlightenment/6e3uX)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using a *documentFragment* to create node structures in memory is extrememly
    efficent when it comes time to inject the *documentFragment* into live node structures.
  prefs: []
  type: TYPE_NORMAL
- en: You might wonder what is the advantage to using a *documentFragment* over simply
    creating (via *createElement()*) a *<div>* in memory and working within this *<div>*
    to create a DOM structure. The follow are the differences.
  prefs: []
  type: TYPE_NORMAL
- en: A document fragment may contain any kind of node (except *<body*> or *<html>*)
    where as an element may not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The document fragment itself, is not added to the DOM when you append a fragment.
    The contents of the node are. As opposed to appending an element node in which
    the element itself is part of the appending.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a document fragment is appended to the DOM it transfers from the document
    fragment to the place its appended. Its no longer in memory in the place you created
    it. This is not true for element nodes that are temperately used to contained
    nodes briefly and then are moved to the live DOM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.3 Adding a *DocumentFragment* to the live DOM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By passing the *appendChild()* and *insertBefore()* node methods a *documentFragment*
    argument the child nodes of the *documentFragment* are transported as children
    nodes to the DOM node the methods are called on. Below we create a *documentfragment*,
    add some *<li>*'s to it, then append these new element nodes to the live DOM tree
    using *appendChild()*.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/Z2LpU](http://jsfiddle.net/domenlightenment/Z2LpU)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Document fragments passed as arguments to inserting node methods will insert
    the entire child node structure ignoring the documentFragment node itself.
  prefs: []
  type: TYPE_NORMAL
- en: 8.4 Using *innerHTML* on a *documentFragment*
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a DOM structure in memory using node methods can be verbose and laboring.
    One way around this would be to created a *documentFragment*, append a *<div>*
    to this fragment because *innerHTML* does not work on document fragments, and
    then use the *innerHTML* property to update the fragment with a string of HTML.
    By doing this a DOM structure is crafted from the HTML string. In the code below
    I construct a DOM structure that I can then treat as a tree of nodes and not just
    a JavaScript string.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/4W9sH](http://jsfiddle.net/domenlightenment/4W9sH)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When it comes time to append a DOM structure created using a *documentFragment*
    and *<div>* you'll want to append the structure skipping the injection of the
    *<div>*.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/kkyKJ](http://jsfiddle.net/domenlightenment/kkyKJ)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addtion to *DocumentFragment* we also have *[DOMParser](http://html5.org/specs/dom-parsing.html#domparser)*
    to look forward too. *DOMParser* can parse HTML stored in a string into a DOM [Document](https://developer.mozilla.org/en/DOM/document
    "document"). It's only supported in Opera & Firefox as of today, but a [polyfill](https://gist.github.com/1129031)
    is avaliable. Of course, if you need a stand alone HTML to DOM script try [domify](https://github.com/component/domify).
  prefs: []
  type: TYPE_NORMAL
- en: 8.5 Leaving a fragments containing nodes in memory by cloning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When appending a *documentFragment* the nodes contained in the Fragment are
    moved from the Fragment to the structure you are appending too. To leave the contents
    of a fragment in memory, so the nodes remain after appending, simply clone using
    *cloneNode()* the *documentFragment* when appending. In the code below instead
    of tranporting the *<li>*'s from the document fragment I clone the
  prefs: []
  type: TYPE_NORMAL
- en: '*<li>*''s, which keeps the *<li>*''s being clonded in memory inside of the
    *documentFragment* node.'
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/bcJGS](http://jsfiddle.net/domenlightenment/bcJGS)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
