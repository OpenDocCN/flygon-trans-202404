- en: Chapter 8 - DocumentFragment Nodes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 - DocumentFragment 节点
- en: 8.1 *DocumentFragment* object overview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.1 *DocumentFragment* 对象概述
- en: The creation and use of a *DocumentFragment* node provides a light weight document
    DOM that is external to the live DOM tree. Think of a *DocumentFragment* as an
    empty document template that acts just like the live DOM tree, but only lives
    in memory, and its child nodes can easily be manipulated in memory and then appended
    to the live DOM.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和使用*DocumentFragment*节点提供了一个轻量级的文档 DOM，它是外部的实时 DOM 树。将*DocumentFragment*视为一个空的文档模板，它的行为就像实时
    DOM 树一样，但只存在于内存中，其子节点可以在内存中轻松操作，然后附加到实时 DOM 中。
- en: 8.2 Creating *DocumentFragment*'s using *createDocumentFragment()*
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.2 使用*createDocumentFragment()*创建*DocumentFragment*
- en: In the code below a *DocumentFragment* is created using *createDocumentFragment()*
    and *<li>*'s are appended to the fragment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，使用*createDocumentFragment()*创建了一个*DocumentFragment*，并向片段附加了*<li>*。
- en: 'live code: [http://jsfiddle.net/domenlightenment/6e3uX](http://jsfiddle.net/domenlightenment/6e3uX)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/6e3uX](http://jsfiddle.net/domenlightenment/6e3uX)
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using a *documentFragment* to create node structures in memory is extrememly
    efficent when it comes time to inject the *documentFragment* into live node structures.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当将*documentFragment*用于在内存中创建节点结构时，当将*documentFragment*注入到实时节点结构中时，效率非常高。
- en: You might wonder what is the advantage to using a *documentFragment* over simply
    creating (via *createElement()*) a *<div>* in memory and working within this *<div>*
    to create a DOM structure. The follow are the differences.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道使用*documentFragment*相对于简单地在内存中创建（通过*createElement()*）一个*<div>*并在其中工作以创建
    DOM 结构的优势是什么。以下是区别。
- en: A document fragment may contain any kind of node (except *<body*> or *<html>*)
    where as an element may not
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个文档片段可以包含任何类型的节点（除了*<body*>或*<html>*），而元素则不行
- en: The document fragment itself, is not added to the DOM when you append a fragment.
    The contents of the node are. As opposed to appending an element node in which
    the element itself is part of the appending.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当附加片段时，片段本身并不会添加到 DOM 中。节点的内容会被添加。与附加元素节点不同，其中元素本身是附加的一部分。
- en: When a document fragment is appended to the DOM it transfers from the document
    fragment to the place its appended. Its no longer in memory in the place you created
    it. This is not true for element nodes that are temperately used to contained
    nodes briefly and then are moved to the live DOM.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当将文档片段附加到 DOM 时，它会从文档片段转移到其附加的位置。它不再存在于创建它的地方的内存中。对于暂时用于包含节点并随后移动到实时 DOM 的元素节点，这并不成立。
- en: 8.3 Adding a *DocumentFragment* to the live DOM
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.3 将*DocumentFragment*添加到实时 DOM
- en: By passing the *appendChild()* and *insertBefore()* node methods a *documentFragment*
    argument the child nodes of the *documentFragment* are transported as children
    nodes to the DOM node the methods are called on. Below we create a *documentfragment*,
    add some *<li>*'s to it, then append these new element nodes to the live DOM tree
    using *appendChild()*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将*appendChild()*和*insertBefore()*节点方法传递一个*documentFragment*参数，*documentFragment*的子节点将作为子节点传输到调用这些方法的
    DOM 节点上。下面我们创建一个*documentfragment*，向其中添加一些*<li>*，然后使用*appendChild()*将这些新元素节点附加到实时
    DOM 树中。
- en: 'live code: [http://jsfiddle.net/domenlightenment/Z2LpU](http://jsfiddle.net/domenlightenment/Z2LpU)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/Z2LpU](http://jsfiddle.net/domenlightenment/Z2LpU)
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notes
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Document fragments passed as arguments to inserting node methods will insert
    the entire child node structure ignoring the documentFragment node itself.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作为插入节点方法的参数传递的文档片段将插入整个子节点结构，忽略文档片段节点本身。
- en: 8.4 Using *innerHTML* on a *documentFragment*
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.4 在*documentFragment*上使用*innerHTML*
- en: Creating a DOM structure in memory using node methods can be verbose and laboring.
    One way around this would be to created a *documentFragment*, append a *<div>*
    to this fragment because *innerHTML* does not work on document fragments, and
    then use the *innerHTML* property to update the fragment with a string of HTML.
    By doing this a DOM structure is crafted from the HTML string. In the code below
    I construct a DOM structure that I can then treat as a tree of nodes and not just
    a JavaScript string.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用节点方法在内存中创建 DOM 结构可能会冗长而费力。一个解决方法是创建一个*documentFragment*，向该片段附加一个*<div>*，因为*innerHTML*不能在文档片段上工作，然后使用*innerHTML*属性使用
    HTML 字符串更新片段。通过这样做，可以从 HTML 字符串中构建 DOM 结构。在下面的代码中，我构建了一个 DOM 结构，然后将其视为节点树，而不仅仅是
    JavaScript 字符串。
- en: 'live code: [http://jsfiddle.net/domenlightenment/4W9sH](http://jsfiddle.net/domenlightenment/4W9sH)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/4W9sH](http://jsfiddle.net/domenlightenment/4W9sH)
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When it comes time to append a DOM structure created using a *documentFragment*
    and *<div>* you'll want to append the structure skipping the injection of the
    *<div>*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要附加使用*documentFragment*和*<div>*创建的DOM结构时，您将希望附加结构，跳过*<div>*的注入。
- en: 'live code: [http://jsfiddle.net/domenlightenment/kkyKJ](http://jsfiddle.net/domenlightenment/kkyKJ)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/kkyKJ](http://jsfiddle.net/domenlightenment/kkyKJ)
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notes
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In addtion to *DocumentFragment* we also have *[DOMParser](http://html5.org/specs/dom-parsing.html#domparser)*
    to look forward too. *DOMParser* can parse HTML stored in a string into a DOM [Document](https://developer.mozilla.org/en/DOM/document
    "document"). It's only supported in Opera & Firefox as of today, but a [polyfill](https://gist.github.com/1129031)
    is avaliable. Of course, if you need a stand alone HTML to DOM script try [domify](https://github.com/component/domify).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了*DocumentFragment*，我们还有*[DOMParser](http://html5.org/specs/dom-parsing.html#domparser)*可以期待。*DOMParser*可以将存储在字符串中的HTML解析为DOM [Document](https://developer.mozilla.org/en/DOM/document
    "document")。截至今天，它仅在Opera和Firefox中受支持，但有一个[polyfill](https://gist.github.com/1129031)可用。当然，如果您需要一个独立的HTML到DOM脚本，请尝试[domify](https://github.com/component/domify)。
- en: 8.5 Leaving a fragments containing nodes in memory by cloning
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.5 离开包含节点的片段，通过克隆在内存中
- en: When appending a *documentFragment* the nodes contained in the Fragment are
    moved from the Fragment to the structure you are appending too. To leave the contents
    of a fragment in memory, so the nodes remain after appending, simply clone using
    *cloneNode()* the *documentFragment* when appending. In the code below instead
    of tranporting the *<li>*'s from the document fragment I clone the
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当附加*documentFragment*时，片段中包含的节点从片段移动到您要附加的结构中。为了将片段的内容保留在内存中，使得节点在附加后仍然存在，只需在附加时使用*cloneNode()*克隆*documentFragment*。在下面的代码中，我克隆了*<li>*而不是从文档片段中传输*<li>*。
- en: '*<li>*''s, which keeps the *<li>*''s being clonded in memory inside of the
    *documentFragment* node.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*<li>*，保持*<li>*在*documentFragment*节点内存中被克隆。'
- en: 'live code: [http://jsfiddle.net/domenlightenment/bcJGS](http://jsfiddle.net/domenlightenment/bcJGS)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/bcJGS](http://jsfiddle.net/domenlightenment/bcJGS)
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
