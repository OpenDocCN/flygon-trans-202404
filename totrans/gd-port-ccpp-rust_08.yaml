- en: Let's Start Simple
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们从简单的开始
- en: Let's Start Simple
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们从简单的开始
- en: The usual introduction to any language is "Hello, World!". A simple program
    that prints that message out to the console.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 任何语言的通常介绍都是"Hello, World!"。一个将该消息打印到控制台的简单程序。
- en: 'Here is how we might write it for C:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何为C编写它的方式：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'C++ could write it the same way, or we could use the C++ stream classes if
    we preferred:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: C++可以以相同的方式编写，或者如果我们更喜欢的话，可以使用C++的流类：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And here is the equivalent in Rust:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Rust中的等效部分：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are some obvious points of similarity that we can observe:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以观察到一些明显的相似之处：
- en: C/C++ and Rust follow the convention of having a `main()` function as the entry
    point into code. Note that Rust's main doesn't return anything. It's effectively
    a void method.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C/C++和Rust都遵循将`main()`函数作为代码入口点的约定。注意，Rust的main函数不返回任何内容。它实际上是一个空方法。
- en: There is a general purpose print statement.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个通用的打印语句。
- en: The general structure in terms of main, use of { } and semi-colons is mostly
    the same. In both languages a block of code is enclosed in curly braces, and a
    semi-colon is used as a separator between statements.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主要方面的一般结构，即主要部分，使用{ }和分号大部分相同。在两种语言中，一段代码被大括号括起来，分号用作语句之间的分隔符。
- en: Rust looks a little bit more terse than either C or C++ because it automatically
    includes references to part of its standard runtime that it refers to as its "prelude".
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rust看起来比C或C++更为简洁，因为它自动包含对其称为"预导入"的标准运行时的部分的引用。
- en: The `println!()` is actually a macro that expands into code that writes to the
    standard output. We know it's a macro because it ends in a ! character but you
    may treat it like a function call for now. We'll see how Rust macros differ to
    those in C/C++ later.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`println!()`实际上是一个宏，它会扩展成写入标准输出的代码。我们知道它是一个宏，因为它以一个!字符结尾，但是你现在可以将它视为一个函数调用。我们将在后面看到Rust宏与C/C++中的宏有何不同。'
- en: Compiling our code
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译我们的代码
- en: Open a command prompt and set up your compiler environments.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符并设置您的编译器环境。
- en: 'If you were using gcc, you’d compile your code like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用gcc，你会像这样编译你的代码：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you were using Microsoft Visual C++ you''d compile like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Microsoft Visual C++，你会这样编译：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To compile in Rust you invoke the rustc compiler.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Rust中编译，你需要调用rustc编译器。
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And to run either
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 并运行其中一个
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Again there are points of similarity:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 再次有相似之处：
- en: There is a shell command that compiles the code and creates an executable from
    it.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个shell命令，用于编译代码并创建可执行文件。
- en: The binary runs in the same way.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制文件以相同的方式运行。
- en: A less obvious point of similarity is that Rust shares its code generation backend
    with gcc-llvm and clang. Rustc outputs llvm bitcode which is compiled (and optimized)
    into machine code via LLVM. This means the resulting executable is very similar
    in form to that output by C++ compilers. That includes the symbolic information
    it supplies for debugging purposes. A rust executable can be debugged in gdb,
    lldb or Microsoft Visual Studio depending on the target platform.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不太明显的相似之处是Rust与gcc-llvm和clang共享其代码生成后端。Rustc输出llvm比特码，通过LLVM编译（和优化）成机器码。这意味着生成的可执行文件在形式上与C++编译器输出的非常相似。这包括它为调试目的提供的符号信息。一个Rust可执行文件可以在gdb、lldb或Microsoft
    Visual Studio中进行调试，具体取决于目标平台。
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
