["```\nimport csv\n\ndata = [[\"first\", 1, 234],\n        [\"second\", 5, 678]]\n\noutfile = open('example.csv', 'w')\nwriter = csv.writer(outfile, delimiter=';', quotechar='\"')\nwriter.writerows(data)\noutfile.close() \n```", "```\nfor row in csv.reader(open('example.csv'), delimiter=';'):\n   print(row)\n\n['first', '1', '234']\n['second', '5', '678'] \n```", "```\nimport json\n\ndata = {'first': 1, 'second': 'two', 'third': [3,4,5]}\njj = json.dumps(data)\nprint(jj)\n'{\"second\": \"two\", \"first\": 1, \"third\": [3, 4, 5]}' \n```", "```\nd = json.loads(jj)\nprint(d)\n\n{'second': 'two', 'first': 1, 'third': [3, 4, 5]} \n```", "```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<actor_list>\n<actor name=\"Hamlet\">the Prince of Denmark</actor>\n<actor name=\"Polonius\">Ophelias father</actor>\n</actor_list> \n```", "```\nfrom xml.dom.minidom import parse\n\ndocument = parse('hamlet.xml')\n\nactors = document.getElementsByTagName(\"actor\")\nfor act in actors:\n    name = act.getAttribute('name')\n    for node in act.childNodes:\n        if node.nodeType == node.TEXT_NODE:\n            print(\"{} - {}\".format(name, node.data))\n\nHamlet - the Prince of Denmark\nPolonius - Ophelias father \n```", "```\nimport zipfile\nz = zipfile.ZipFile('archive.zip', 'w')\nz.write('myfile.txt')                   # has to exist\nz.writestr('test.txt', 'Hello World')   # new\nz.close() \n```", "```\nz = zipfile.ZipFile('archive.zip')\nprint(z.namelist()) \n```", "```\nprint(z.extract('test.txt', 'myfolder'))\nz.close() \n```", "```\npip install numpy \n```", "```\nimport numpy as np\n\nvector = np.array([[0, 1, 2, 3], [4, 5, 6, 7]])\nprint(vector + 10)\n\n[[10 11 12 13]\n [14 15 16 17]]\n\nprint(vector.shape)\n\n(2, 4) \n```", "```\npip install pandas \n```", "```\nimport pandas as pd\n\nhamlet = [['Hamlet', 1.76], ['Polonius', 1.52], ['Ophelia', 1.83], ['Claudius', 1.95]]\ndf = pd.DataFrame(data = hamlet, columns = ['name', 'size'])\nprint(df)\n\n       name  size\n0    Hamlet  1.76\n1  Polonius  1.52\n2   Ophelia  1.83\n3  Claudius  1.95 \n```", "```\nsorted = df.sort_values(by='name', ascending=False)\ntall = sorted[sorted['size'] > 1.70]\nprint(tall.head(2))\n\n       name  size\n3  Claudius  1.95\n2   Ophelia  1.83\n\ndf.to_csv('hamlet.csv', index=False, header=True) \n```", "```\npip install scipy \n```", "```\ndef func(x, a, b):\n    return a * x**2 + b\n\nimport numpy as np \nx = np.linspace(-10, 10, 100)\ny = func(x, 1, 5)\nynoise = y + 20 * np.random.laplace(size=len(x)) \n```", "```\nfrom scipy.optimize import curve_fit\nparams, pcov = curve_fit(func, x , ynoise)\nyfit = func(x, params[0], params[1]) \n```", "```\nimport matplotlib.pyplot as plt\nfig = plt.figure\nplt.plot(x, yfit, \"k-\")\nplt.plot(x, ynoise, \"bx\")\nplt.savefig('fit.png') \n```", "```\npip install scikit-learn \n```", "```\nfrom sklearn import svm, datasets, cross_validation\n\niris = datasets.load_iris()\nX_train, X_test, Y_train, Y_test = \\\n    cross_validation.train_test_split(iris.data, iris.target, \\\n    test_size=0.4, random_state=True) \n```", "```\nsvc = svm.SVC(kernel='linear', C=1.0, probability=True).fit(X_train, Y_train)\nprint(svc.score(X_test, Y_test))\n\n0.983333333333 \n```", "```\nprint(accuracy = cross_validation.cross_val_score(svc, X, Y, cv=5, scoring='accuracy'))\n\n[ 0.96666667  1\\.          0.96666667  0.96666667  1\\.        ] \n```", "```\npip install matplotlib \n```", "```\nfrom pylab import *\n\nx = list(range(-10, 10))\ny = [xval**2 for xval in x]\nfigure()\nplot(x, y, 'bo') # blue circles\ntitle('square function')\nxlabel('x')\nylabel('$x^2$')\nsavefig('plot.png') \n```", "```\npip install pillow \n```", "```\nfrom PIL import Image\nimport os\n\nfor filename in os.listdir('.'):\n    if filename.endswith('.png'):\n        im = Image.open(filename)\n        x = im.size[0] // 2\n        y = im.size[1] // 2\n        small = im.resize((x, y))\n        small.save('sm_' + filename) \n```", "```\nimport requests\n\nr = requests.get('http://www.academis.eu')\nprint(r.text) \n```", "```\nurl = \"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi\"\nparam_dict = {'db':'pubmed', 'term':'escherichia', 'rettype':'uilist'}\n\nr = requests.get(url, params=param_dict)\nprint(r.text) \n```", "```\npip install bs4 \n```", "```\nfrom bs4 import BeautifulSoup\n\nhtml = \"\"\"<html><head></head><body>\n<h1>Hamlet</h1>\n<ul class=\"cast\"> \n  <li>Hamlet</li>\n  <li>Polonius</li>\n  <li>Ophelia</li>\n  <li>Claudius</li>\n</ul>\n</body></html\"\"\"\n\nsoup = BeautifulSoup(html, \"lxml\")\n\nfor ul in soup.find_all('ul'):\n    if \"cast\" in ul.get('class', []):\n        for item in ul.find_all('li'):\n            print(item.get_text(), end=\", \") \n```", "```\nfrom paramiko import SSHClient\nclient = SSHClient()\nclient.load_system_host_keys()\nclient.connect('ssh.example.com', username=\"username\", password=\"password\")\nstdin, stdout, stderr = client.exec_command('ls -l') \n```", "```\nimport math\n\nprint(math.sqrt(49))\n\nprint(math.sin(math.pi / 2))\n\nprint(math.exp(1.0) == math.e)\n\nprint(math.log(256,2)) \n```", "```\nimport os\n\nos.chdir('/home/krother/python_modules/')\nos.listdir('.')\n\n['sys.md', 'os.md', 'csv.md', 're.md', 'random.md', \n'pprint.md', 'numpy.md', 'time.md', 'itertools.md', \n'json.md', 'template.md', 'math.md', 'urllib.md'] \n```", "```\nos.path.exists('os.md') \n```", "```\nos.system('cp os.md copy.md')\nos.remove('copy.md') \n```", "```\ndice = random.randint(1,6) \n```", "```\nimport random\nprint random.random() \n```", "```\nimport random\n\nrandom.randint(1,6)\n\nrandom.random()\n\nrandom.gauss(0.0, 1.0) \n```", "```\ndata = [1, 2, 3, 4]\nrandom.shuffle(data) \n```", "```\nfrom random import choice\n\nbases = ['A','C','G','T']\ndna = [choice(bases) for i in range(20)]\nprint ''.join(dna) \n```", "```\nfrom random import sample\n\nflavors = ['vanilla','banana','mint']\nicecream = sample(flavors, 2) \n```", "```\nimport re\n\ntext = \"the quick brown fox jumps over the lazy dog\" \n```", "```\nre.findall(\".o.\", text)\nprint(re.findall(\".o.\", text))\n\n['row', 'fox', ' ov', 'dog'] \n```", "```\nprint(re.findall(\"\\s(\\wo\\w)\\s*\", text))\n\n['fox', 'dog'] \n```", "```\nprint(re.sub(\"[dflj]\", \"w\", text))\n\n'the quick brown wox wumps over the wazy wog' \n```", "```\nprint(re.search('jumps|swims', text))\n\n<_sre.SRE_Match object; span=(20, 25), match='jumps'> \n```", "```\nimport time\n\nprint(time.asctime())\n\nprint(time.strftime('%a %d.%m.', time.localtime())) \n```", "```\ntime.sleep(2) \n```", "```\ndate = datetime.date(2015, 12, 24)\ndate.strftime(\"%d.%m.%Y\") \n```", "```\ndate = datetime.date(2015, 12, 24)\nnumber = date.toordinal() \n```", "```\ndatetime.date.fromordinal(7) \n```", "```\nimport sqlite3\n\nDB_SETUP = '''\n  CREATE TABLE IF NOT EXISTS person (\n    id INTEGER,\n    name VARCHAR(32),\n    description TEXT\n  );'''\ndb = sqlite3.connect('hamlet.db')\ndb.executescript(DB_SETUP) \n```", "```\nquery = 'INSERT INTO person VALUES (?,?,?)'\ndb.execute(query, (1, \"Hamlet\", \"the prince of Denkmark\"))\ndb.execute(query, (2, \"Polonius\", \"Ophelias father\"))\ndb.commit() \n```", "```\nquery = '''SELECT name, description FROM person'''\nresult = db.execute(query)\nprint(list(result))\n\ndb.close() \n```", "```\nimport sys\nprint(sys.argv) \n```", "```\nprint(sys.version) \n```", "```\nprint(sys.path) \n```", "```\nsys.exit() \n```", "```\nimport itertools\nch = itertools.chain([1,2],[3,4])\nprint(list(ch))\n\n[1, 2, 3, 4]\n\nprint(list(itertools.repeat([1,2], 3)))\n\n[[1, 2], [1, 2], [1, 2]] \n```", "```\np = itertools.permutations([1,2,3])\nprint(list(p))\n\n[(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\n\nc = itertools.combinations([1,2,3], 2)\nprint(list(c))\n\n[(1, 2), (1, 3), (2, 3)] \n```"]