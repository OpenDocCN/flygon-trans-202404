["```\n$(document).ready(function() {\n\n    // Wire up the Add button to send the new item to the server\n    $('#add-item-button').on('click', addItem);\n\n}); \n```", "```\nfunction addItem() {\n    $('#add-item-error').hide();\n    var newTitle = $('#add-item-title').val();\n\n    $.post('/Todo/AddItem', { title: newTitle }, function() {\n        window.location = '/Todo';\n    })\n    .fail(function(data) {\n        if (data && data.responseJSON) {\n            var firstError = data.responseJSON[Object.keys(data.responseJSON)[0]];\n            $('#add-item-error').text(firstError);\n            $('#add-item-error').show();\n        }\n    });\n} \n```", "```\npublic async Task<IActionResult> AddItem(NewTodoItem newItem) {\n    if (!ModelState.IsValid)\n    {\n        return BadRequest(ModelState);\n    }\n\n    var successful = await _todoItemService.AddItemAsync(newItem);\n    if (!successful)\n    {\n        return BadRequest(new { error = \"Could not add item\" });\n    }\n\n    return Ok();\n} \n```", "```\nusing System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace AspNetCoreTodo.Models\n{\n    public class NewTodoItem\n    {\n        [Required]\n        public string Title { get; set; }\n    }\n} \n```", "```\n$.post('/Todo/AddItem', { title: newTitle }  // ...\n\n// A JSON object with one property:\n// {\n//   title: (whatever the user typed)\n// } \n```", "```\nif (!ModelState.IsValid)\n{\n    return BadRequest(ModelState);\n} \n```", "```\nvar successful = await _todoItemService.AddItemAsync(newItem);\nif (!successful)\n{\n    return BadRequest(new { error = \"Could not add item.\" });\n} \n```", "```\npublic interface ITodoItemService\n{\n    Task<IEnumerable<TodoItem>> GetIncompleteItemsAsync();\n\n    Task<bool> AddItemAsync(NewTodoItem newItem);\n} \n```", "```\npublic async Task<bool> AddItemAsync(NewTodoItem newItem) {\n    var entity = new TodoItem\n    {\n        Id = Guid.NewGuid(),\n        IsDone = false,\n        Title = newItem.Title,\n        DueAt = DateTimeOffset.Now.AddDays(3)\n    };\n\n    _context.Items.Add(entity);\n\n    var saveResult = await _context.SaveChangesAsync();\n    return saveResult == 1;\n} \n```", "```\n<input type=\"checkbox\" name=\"@item.Id\" value=\"true\" class=\"done-checkbox\"> \n```", "```\n$(document).ready(function() {\n\n    // ...\n\n    // Wire up all of the checkboxes to run markCompleted()\n    $('.done-checkbox').on('click', function(e) {\n        markCompleted(e.target);\n    });\n\n}); \n```", "```\nfunction markCompleted(checkbox) {\n    checkbox.disabled = true;\n\n    $.post('/Todo/MarkDone', { id: checkbox.name }, function() {\n        var row = checkbox.parentElement.parentElement;\n        $(row).addClass('done');\n    });\n} \n```", "```\nPOST http://localhost:5000/Todo/MarkDone\nContent-Type: application/x-www-form-urlencoded\n\nid=<some guid> \n```", "```\npublic async Task<IActionResult> MarkDone(Guid id) {\n    if (id == Guid.Empty) return BadRequest();\n\n    var successful = await _todoItemService.MarkDoneAsync(id);\n\n    if (!successful) return BadRequest();\n\n    return Ok();\n} \n```", "```\nif (id == Guid.Empty) return BadRequest(); \n```", "```\nvar successful = await _todoItemService.MarkDoneAsync(id);\nif (!successful) return BadRequest(); \n```", "```\nTask<bool> MarkDoneAsync(Guid id); \n```", "```\npublic async Task<bool> MarkDoneAsync(Guid id) {\n    var item = await _context.Items\n        .Where(x => x.Id == id)\n        .SingleOrDefaultAsync();\n\n    if (item == null) return false;\n\n    item.IsDone = true;\n\n    var saveResult = await _context.SaveChangesAsync();\n    return saveResult == 1; // One entity should have been updated\n} \n```", "```\nitem.IsDone = true; \n```"]