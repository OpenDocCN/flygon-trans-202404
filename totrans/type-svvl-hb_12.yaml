- en: TypeScriptの射程
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScriptの射程
- en: 原文：[https://typescriptbook.jp/overview/range-of-typescript](https://typescriptbook.jp/overview/range-of-typescript)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/overview/range-of-typescript](https://typescriptbook.jp/overview/range-of-typescript)
- en: TypeScriptを覚えるとさまざまなものを作れるようになります。TypeScriptはJavaScriptにコンパイルして使う言語です。そのため、JavaScriptで作れるものは何でも作れます。ここでは、TypeScriptを学んだらどのようなソフトウェアを作れるのか、「TypeScriptの射程」について説明します。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScriptを覚えるとさまざまなものを作れるようになります。TypeScriptはJavaScriptにコンパイルして使う言語です。そのため、JavaScriptで作れるものは何でも作れます。ここでは、TypeScriptを学んだらどのようなソフトウェアを作れるのか、「TypeScriptの射程」について説明します。
- en: フロントエンド[​](#フロントエンド "フロントエンド への直接リンク")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: フロントエンド[​](#フロントエンド "フロントエンド への直接リンク")
- en: TypeScriptがもっとも人気な分野は、フロントエンドアプリケーション開発です。ブラウザで動くアプリです。ブラウザではJavaScriptが圧倒的な地位を確立しています。TypeScriptはJavaScriptのエコシステムに乗っかっているため、フロントエンドアプリケーション開発で大きな力を発揮します。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScriptがもっとも人気な分野は、フロントエンドアプリケーション開発です。ブラウザで動くアプリです。ブラウザではJavaScriptが圧倒的な地位を確立しています。TypeScriptはJavaScriptのエコシステムに乗っかっているため、フロントエンドアプリケーション開発で大きな力を発揮します。
- en: バックエンド[​](#バックエンド "バックエンド への直接リンク")
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: バックエンド[​](#バックエンド "バックエンド への直接リンク")
- en: バックエンドアプリケーションもTypeScriptを使って開発ができます。技術的にはNode.jsというサーバーサイドJavaScriptのエコシステムに乗ることができます。バックエンド言語はJava、Ruby、PHPなどの多数の競合があるものの、TypeScriptもサーバーサイドプログラミングのひとつの選択肢になります。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: バックエンドアプリケーションもTypeScriptを使って開発ができます。技術的にはNode.jsというサーバーサイドJavaScriptのエコシステムに乗ることができます。バックエンド言語はJava、Ruby、PHPなどの多数の競合があるものの、TypeScriptもサーバーサイドプログラミングのひとつの選択肢になります。
- en: フロントエンドとバックエンドの両方でTypeScriptを採用するメリット[​](#フロントエンドとバックエンドの両方でtypescriptを採用するメリット
    "フロントエンドとバックエンドの両方でTypeScriptを採用するメリット への直接リンク")
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: フロントエンドとバックエンドの両方でTypeScriptを採用するメリット[​](#フロントエンドとバックエンドの両方でtypescriptを採用するメリット
    "フロントエンドとバックエンドの両方でTypeScriptを採用するメリット への直接リンク")
- en: フロントエンドとバックエンドの両方でTypeScriptを採用するとメリットがあります。プロジェクトで扱う言語が1つでよいという点です。言語が1つであると、次のような利点が生まれます。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: フロントエンドとバックエンドの両方でTypeScriptを採用するとメリットがあります。プロジェクトで扱う言語が1つでよいという点です。言語が1つであると、次のような利点が生まれます。
- en: モジュールを共有できる[​](#モジュールを共有できる "モジュールを共有できる への直接リンク")
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: モジュールを共有できる[​](#モジュールを共有できる "モジュールを共有できる への直接リンク")
- en: 両方で言語が異なる場合、同じロジックであっても各言語で実装しなければなりません。テストも倍になります。一方、両方でTypeScriptを採用すると、一方で作ったTypeScriptのモジュールをもう一方で再利用できます。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 両方で言語が異なる場合、同じロジックであっても各言語で実装しなければなりません。テストも倍になります。一方、両方でTypeScriptを採用すると、一方で作ったTypeScriptのモジュールをもう一方で再利用できます。
- en: プロジェクト内でのノウハウが共有できる[​](#プロジェクト内でのノウハウが共有できる "プロジェクト内でのノウハウが共有できる への直接リンク")
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: プロジェクト内でのノウハウが共有できる[​](#プロジェクト内でのノウハウが共有できる "プロジェクト内でのノウハウが共有できる への直接リンク")
- en: 言語の壁はノウハウ共有を難しくします。フロントエンドとバックエンドで言語が異なる場合、ノウハウ共有はフロントエンドとバックエンドの垣根を超えにくいものになります。たとえば、バックエンドで便利な日付操作ライブラリを見つけていたとしても、フロントエンドではそれが使えないので、そのノウハウはバックエンドだけで終わってしまいます。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 言語の壁はノウハウ共有を難しくします。フロントエンドとバックエンドで言語が異なる場合、ノウハウ共有はフロントエンドとバックエンドの垣根を超えにくいものになります。たとえば、バックエンドで便利な日付操作ライブラリを見つけていたとしても、フロントエンドではそれが使えないので、そのノウハウはバックエンドだけで終わってしまいます。
- en: もしも、両方でTypeScriptを使っているなら、フロントエンドのノウハウをバックエンドに還元したり、その逆が成立しやすくなります。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: もしも、両方でTypeScriptを使っているなら、フロントエンドのノウハウをバックエンドに還元したり、その逆が成立しやすくなります。
- en: 学習のコストパフォーマンスが最大化する[​](#学習のコストパフォーマンスが最大化する "学習のコストパフォーマンスが最大化する への直接リンク")
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学習のコストパフォーマンスが最大化する[​](#学習のコストパフォーマンスが最大化する "学習のコストパフォーマンスが最大化する への直接リンク")
- en: 新しい言語を覚えることは思いの外、時間のかかるものです。チュートリアルやリファレンスで座学するだけなら、短期間で学習できます。しかし、その言語のエコシステムや実務上のベストプラクティス、言語の細かい癖や陥りがちな罠などまで、しっかり理解した実践レベルに到達しようとなると、多くの学習時間を要します。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 新しい言語を覚えることは思いの外、時間のかかるものです。チュートリアルやリファレンスで座学するだけなら、短期間で学習できます。しかし、その言語のエコシステムや実務上のベストプラクティス、言語の細かい癖や陥りがちな罠などまで、しっかり理解した実践レベルに到達しようとなると、多くの学習時間を要します。
- en: フロントエンドとバックエンドの両方を担当する場合にそれぞれが別言語であれば、安心して実務的なコードを書けるようになるまで、個人であれ、組織であれ、言語習得にかなりの時間を投資することになるでしょう。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: フロントエンドとバックエンドの両方を担当する場合にそれぞれが別言語であれば、安心して実務的なコードを書けるようになるまで、個人であれ、組織であれ、言語習得にかなりの時間を投資することになるでしょう。
- en: 逆にどこでもTypeScriptが使えるようになっていれば、言語やエコシステムの学習オーバーヘッドが最小限で済みます。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 逆にどこでもTypeScriptが使えるようになっていれば、言語やエコシステムの学習オーバーヘッドが最小限で済みます。
- en: デスクトップアプリケーション[​](#デスクトップアプリケーション "デスクトップアプリケーション への直接リンク")
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: デスクトップアプリケーション[​](#デスクトップアプリケーション "デスクトップアプリケーション への直接リンク")
- en: WindowsやmacOS、Linux向けにデスクトップアプリケーションを作る場合もTypeScriptが使えます。デスクトップアプリケーションをJavaScript、HTML、CSSの技術スタックで開発できる[Electron](https://www.electronjs.org/)を用います。Electron
    + TypeScript製の著名なアプリとしては、SlackやMicrosoft社のVS Codeがあります。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: WindowsやmacOS、Linux向けにデスクトップアプリケーションを作る場合もTypeScriptが使えます。デスクトップアプリケーションをJavaScript、HTML、CSSの技術スタックで開発できる[Electron](https://www.electronjs.org/)を用います。Electron
    + TypeScript製の著名なアプリとしては、SlackやMicrosoft社のVS Codeがあります。
- en: CLIアプリケーション[​](#cliアプリケーション "CLIアプリケーション への直接リンク")
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CLIアプリケーション[​](#cliアプリケーション "CLIアプリケーション への直接リンク")
- en: コマンドラインツールの開発もTypeScriptで行えます。サーバーサイドJavaScript実行環境のNode.jsとTypeScriptを組み合わせて開発します。CLIアプリケーションフレームワークには、Heroku製の[oclif](https://github.com/oclif/oclif)などがあります。Google製の[zx](https://github.com/google/zx)を用いると、シェルスクリプトの代わりにTypeScriptを使うのもしやすくなります。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: コマンドラインツールの開発もTypeScriptで行えます。サーバーサイドJavaScript実行環境のNode.jsとTypeScriptを組み合わせて開発します。CLIアプリケーションフレームワークには、Heroku製の[oclif](https://github.com/oclif/oclif)などがあります。Google製の[zx](https://github.com/google/zx)を用いると、シェルスクリプトの代わりにTypeScriptを使うのもしやすくなります。
- en: サーバーレス (FaaS)[​](#サーバーレス-faas "サーバーレス (FaaS) への直接リンク")
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: サーバーレス (FaaS)[​](#サーバーレス-faas "サーバーレス (FaaS) への直接リンク")
- en: サーバーレスとは、サーバーの構築や保守なしに、サーバーサイドのプログラムを実行できる仕組みです。通常、バックエンドアプリケーションを動かそうとすると、Linuxなどのサーバーを立てたり、メンテナンスする必要が出てきます。サーバーレスでは、AWSなどのクラウドベンダーがJavaScriptなどのマネージド実行環境を提供することで、アプリケーション開発者はサーバーを保守する必要がなくなります。開発者はJavaScriptの関数を書いたファイルをアップロードするだけで、バックエンドなどのウェブサービスを公開できます。このような関数を実行するクラウドサービスのことをFaaS(Function
    as a Service)と言います。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: サーバーレスとは、サーバーの構築や保守なしに、サーバーサイドのプログラムを実行できる仕組みです。通常、バックエンドアプリケーションを動かそうとすると、Linuxなどのサーバーを立てたり、メンテナンスする必要が出てきます。サーバーレスでは、AWSなどのクラウド��ンダーがJavaScriptなどのマネージド実行環境を提供することで、アプリケーション開発者はサーバーを保守する必要がなくなります。開発者はJavaScriptの関数を書いたファイルをアップロードするだけで、バックエンドなどのウェブサービスを公開できます。このような関数を実行するクラウドサービスのことをFaaS(Function
    as a Service)と言います。
- en: JavaScriptをサポートしているFaaSは多数あります。もっとも有名なのがAWSの[Lambda](https://aws.amazon.com/lambda/)です。この他に、[Google
    Cloud Functions](https://cloud.google.com/functions)やMicrosoftの[Azure Functions](https://azure.microsoft.com/ja-jp/products/functions/)、Next.jsと親和性の高いVercelの[Serverless
    Functions](https://vercel.com/docs/functions/introduction)、静的サイトホスティングで有名なNetlifyの[Netlify
    Functions](https://www.netlify.com/products/functions/)、世界90カ国194の都市にエッジを持つCDN
    Cloudflareの[Cloudflare Workers](https://workers.cloudflare.com/)などがあります。これらのサービスを用いると、TypeScriptでサーバーレスなウェブアプリケーションを提供できます。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptをサポートしているFaaSは多数あります。もっとも有名なのがAWSの[Lambda](https://aws.amazon.com/lambda/)です。この他に、[Google
    Cloud Functions](https://cloud.google.com/functions)やMicrosoftの[Azure Functions](https://azure.microsoft.com/ja-jp/products/functions/)、Next.jsと親和性の高いVercelの[Serverless
    Functions](https://vercel.com/docs/functions/introduction)、静的サイトホスティングで有名なNetlifyの[Netlify
    Functions](https://www.netlify.com/products/functions/)、世界90カ国194の都市にエッジを持つCDN
    Cloudflareの[Cloudflare Workers](https://workers.cloudflare.com/)などがあります。これらのサービスを用いると、TypeScriptでサーバーレスなウェブアプリケーションを提供できます。
- en: インフラ構成管理 (IaC)[​](#インフラ構成管理-iac "インフラ構成管理 (IaC) への直接リンク")
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: インフラ構成管理 (IaC)[​](#インフラ構成管理-iac "インフラ構成管理 (IaC) への直接リンク")
- en: インフラが物理的なものから仮想的なものになり、自社サーバーからクラウド化が進んだ結果、サーバーをいくつどのように配置するか、ネットワークはどう繋ぎこむかといったインフラ構成管理も、ソフトウェアで自動化されることが増えてきました。インフラ構成をコードで定義し、プログラマブルにすることをIaC(Infrastructure
    as Code)と呼びます。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: インフラが物理的なものから仮想的なものになり、自社サーバーからクラウド化が進んだ結果、サーバーをいくつどのように配置するか、ネットワークはどう繋ぎこむかといったインフラ構成管理も、ソフトウェアで自動化されることが増えてきました。インフラ構成をコードで定義し、プログラマブルにすることをIaC(Infrastructure
    as Code)と呼びます。
- en: TypeScriptでもIaCを行えます。AWSのインフラ構成を自動化するツールに[AWS CDK(Cloud Development Kit)](https://aws.amazon.com/cdk/#:~:text=The%20AWS%20Cloud%20Development%20Kit,resources%20using%20familiar%20programming%20languages.&text=AWS%20CDK%20uses%20the%20familiarity,languages%20for%20modeling%20your%20applications.)があります。これはTypeScriptをサポートしています。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScriptでもIaCを行えます。AWSのインフラ構成を自動化するツールに[AWS CDK(Cloud Development Kit)](https://aws.amazon.com/cdk/#:~:text=The%20AWS%20Cloud%20Development%20Kit,resources%20using%20familiar%20programming%20languages.&text=AWS%20CDK%20uses%20the%20familiarity,languages%20for%20modeling%20your%20applications.)があります。これはTypeScriptをサポートしています。
- en: AWSやGoogle Platformなど複数のクラウドベンダーに対応したインフラ構成ツールとして、[Pulumi](https://www.pulumi.com/)もあります。PulumiはTypeScriptで各ベンダーのインフラ構成を記述できます。インフラ構成ツールでもっとも有名なのは[Terraform](https://www.terraform.io/)ですが、TerraformはHCLと呼ばれる独自言語で記述するのに対し、PulumiはTypeScriptなので、TypeScriptプログラマーにとって手が届きやすいツールです。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: AWSやGoogle Platformなど複数のクラウドベンダーに対応したインフラ構成ツールとして、[Pulumi](https://www.pulumi.com/)もあります。PulumiはTypeScriptで各ベンダーのインフラ構成を記述できます。インフラ構成ツールでもっとも有名なのは[Terraform](https://www.terraform.io/)��すが、TerraformはHCLと呼ばれる独自言語で記述するのに対し、PulumiはTypeScriptなので、TypeScriptプログラマーにとって手が届きやすいツールです。
- en: Google Apps Script[​](#google-apps-script "Google Apps Script への直接リンク")
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google Apps Script[​](#google-apps-script "Google Apps Script への直接リンク")
- en: GoogleはSpreadsheetやDocsなどのオフィススイートを提供していて、多くの企業で導入されています。Google Spreadsheetなどには、JavaScriptで機能を拡張する仕組みが備わっています。それをGoogle
    Apps Scriptと呼びます。Google Apps Scriptを使うと、スプレッドシートに独自の関数を作ったり、操作を自動化したりでき、業務の効率化に役立ちます。TypeScriptで書いたコードはJavaScriptにコンパイルすれば、Google
    Apps Scriptで利用できます。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: GoogleはSpreadsheetやDocsなどのオフィススイートを提供していて、多くの企業で導入されています。Google Spreadsheetなどには、JavaScriptで機能を拡張する仕組みが備わっています。それをGoogle
    Apps Scriptと呼びます。Google Apps Scriptを使うと、スプレッドシートに独自の関数を作ったり、操作を自動化したりでき、業務の効率化に役立ちます。TypeScriptで書いたコードはJavaScriptにコンパイルすれば、Google
    Apps Scriptで利用できます。
- en: ブラウザ拡張[​](#ブラウザ拡張 "ブラウザ拡張 への直接リンク")
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[ブラウザ拡張](#ブラウザ拡張 "ブラウザ拡張 への直接リンク")'
- en: Google ChromeやFirefoxなどのブラウザには、ブラウザの機能を拡張する仕組みがあります。ブラウザ拡張はJavaScriptで書くことができます。TypeScriptで書いたコードもJavaScriptにコンパイルすることで、ブラウザ拡張として動かせます。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Google ChromeやFirefoxなどのブラウザには、ブラウザの機能を拡張する仕組みがあります。ブラウザ拡張はJavaScriptで書くことができます。TypeScriptで書いたコードもJavaScriptにコンパイルすることで、ブラウザ拡張として動かせます。
- en: 機械学習[​](#機械学習 "機械学習 への直接リンク")
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 機械学習[​](#機械学習 "機械学習 への直接リンク")
- en: 機械学習やニューラルネットワーク、ディープラーニングなどの分野はPythonが一強であることは異論がないでしょう。しかし、JavaScriptでも機械学習などのツールが多数作られてきており、TypeScriptプログラマーも手が届きやすくなってきています。[TensorFlow.js](https://www.tensorflow.org/js/)はGoogleが開発した機械学習ライブラリです。[Brain.js](https://brain.js.org/)はニューラルネットワークのライブラリです。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 機械学習やニューラルネットワーク、ディープラーニングなどの分野はPythonが一強であることは異論がないでしょう。しかし、JavaScriptでも機械学習などのツールが多数作られてきており、TypeScriptプログラマーも手が届きやすくなってきています。[TensorFlow.js](https://www.tensorflow.org/js/)はGoogleが開発した機械学習ライブラリです。[Brain.js](https://brain.js.org/)はニューラルネットワークのライブラリです。
- en: 組み込み系[​](#組み込み系 "組み込み系 への直接リンク")
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 組み込み系[​](#組み込み系 "組み込み系 への直接リンク")
- en: MicrosoftはTypeScriptのサブセット言語として、リソースの少ない組み込みデバイスを対象としたStatic TypeScript(STS)を開発し、実際にそれで組み込み系のソフトウェアを作る[研究成果を発表](https://www.infoq.com/jp/news/2019/11/static-typescript-msft-paper/)しました。STSはTypeScriptと同じではありませんし、まだ研究段階ですが、こうした動きが活発になってくれば、組み込み系プログラミングもTypeScriptプログラマーの射程圏内に入ってくることでしょう。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MicrosoftはTypeScriptのサブセット言語として、リソースの少ない組み込みデバイスを対象としたStatic TypeScript(STS)を開発し、実際にそれで組み込み系のソフトウェアを作る[研究成果を発表](https://www.infoq.com/jp/news/2019/11/static-typescript-msft-paper/)しました。STSはTypeScriptと同じではありませんし、まだ研究段階ですが、こうした動きが活発になってくれば、組み込み系プログラミングもTypeScriptプログラマーの射程圏内に入ってくることでしょう。
- en: WebAssembly[​](#webassembly "WebAssembly への直接リンク")
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[WebAssembly](#webassembly "WebAssembly への直接リンク")'
- en: WebAssembly(WASM)はブラウザで動くアセンブリー言語です。WASMはJavaScriptよりも高速な処理が必要とされるところで用いられます。WASMのプログラムはC言語やC++、Rustといったシステム言語で開発されることが多いですが、TypeScriptでWASMを開発できるようにする試みも出てきています。その筆頭が[AssemblyScript](https://www.assemblyscript.org/)です。AssemblyScriptを使うと、TypeScript風のコードをWASMに変換できます。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: WebAssembly(WASM)はブラウザで動くアセンブリー言語です。WASMはJavaScriptよりも高速な処理が必要とされるところで用いられます。WASMのプログラムはC言語やC++、Rustといったシステム言語で開発されることが多いですが、TypeScriptでWASMを開発できるようにする試みも出てきています。その筆頭が[AssemblyScript](https://www.assemblyscript.org/)です。AssemblyScriptを使うと、TypeScript風のコードをWASMに変換できます。
