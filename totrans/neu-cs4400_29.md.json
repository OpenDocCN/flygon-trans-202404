["```\n(: plus : Number -> (Number -> Number))(define (plus x)\u00a0 (lambda (y)\u00a0 \u00a0 (+ x y)))\n```", "```\n(define (currify f)\u00a0 (lambda (x)\u00a0 \u00a0 (lambda (y)\u00a0 \u00a0 \u00a0 (f x y))))\n```", "```\n(: currify : (All (A B C) (A B -> C) -> (A -> (B -> C))));; convert a double-argument function to a curried one(define (currify f)\u00a0 (lambda (x) (lambda (y) (f x y))))(: add : Number Number -> Number)(define (add x y) (+ x y))(: plus : Number -> (Number -> Number))(define plus (currify add))(test ((plus 1) 2) => 3)(test (((currify add) 1) 2) => 3)(test (map (plus 1) '(1 2 3)) => '(2 3 4))(test (map ((currify add) 1) '(1 2 3)) => '(2 3 4))(test (map ((currify +) 1) '(1 2 3)) => '(2 3 4))\n```", "```\n(: currify : (All (A B C) (A B -> C) -> (A -> (B -> C))))\n```", "```\ncurrify : (A B -> C) -> (A -> B -> C)\n```", "```\ncurrify : (A B -> C) -> A -> B -> C\n```"]