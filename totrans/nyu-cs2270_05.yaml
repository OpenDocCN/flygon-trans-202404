- en: Notes for October 7 class -- Introduction to matrices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Homogeneous coordinates**'
  prefs: []
  type: TYPE_NORMAL
- en: We can deal with both points in a scene and directions (which are essentially
    points at infinity) by adding an extra coordinate, which we call the *homogeneous
    coordinate*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example, in two dimensions, we would write [x,y,w] to represent (x/w, y/w).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the example to the right, we have both points and directions. The point at
    (1,0) is represented by [1,0,1], whereas the direction vector (1,0) (shown in
    **red**) is represented by [1,0,0].
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By convention we place all points on the w=1 plane (shown in gray), although
    scaling arbitrarily to [cx,cy,cz] still describes the same point (x/w, y/w), as
    shown by the upward slanting arrows in the figure.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/d3a58e4dc91bc0a155ba7fc97b6f0d7c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Coordinate transformations**'
  prefs: []
  type: TYPE_NORMAL
- en: The default coordinate system in three dimensions has coordinate axes [1,0,0,0],
    [0,1,0,0] and [0,0,1,0], respectively (the x, y and z global direction vectors).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Its origin is [0,0,0,1] (the point (0,0,0)), as shown in the figure to the right
    in **black**.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We can describe a *transformed* coordinate system by redefining each of the
    x, y and z axes, and by translating the origin to point t, as shown in the figure
    to the right in **blue**.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that this is a very general representation. For example, the new x, y and
    z directions do not need to be perpendicular to each other. Nor do they need to
    be unit length. For
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/9512872cfed2cffd83fe4508b5885bc1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Transformation matrices**'
  prefs: []
  type: TYPE_NORMAL
- en: All of the information of a coordinate transformation can be placed in a 4×4
    matrix, as shown in the figure to the right.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The x, y and z axes form the first three respective columns of the matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The origin t forms the right-most column of the matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this class we will follow the convention of storing the 16 matrix values
    in *row-major* order:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[ x[0], x[1], x[2], x[3],   y[0], y[1], y[2], y[3],   z[0], z[1], z[2], z[3],
      t[0], t[1], t[2], t[3] ]'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/2010fd64522800377351ea4ae5e6fc92.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Transforming a point**'
  prefs: []
  type: TYPE_NORMAL
- en: We can use a 4×4 matrix to transform a vector.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By convention, we represent the input as a column vector, and place it to the
    right of the matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Also, by convention, if we leave out the fourth (homogeneous) coordinate of
    the input, we assume a value of 1.0 for its homogeneous coordinate, unless otherwise
    specified.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The result of the transformation is another column vector, which we obtain by
    taking the inner product of each successive row of the matrix with the input vector.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this case, the matrix is rotating the point (1,0,0) about the z axis.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/15b69cd008a3b73cb8e26b600618e2f6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**The identity transformation**'
  prefs: []
  type: TYPE_NORMAL
- en: The identity matrix is the "do nothing" transformation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It will transform any point or direction to itself. You generally want to call
    the identity() method on a matrix object to initialize that matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/df2e0670639b369ff5d99f102e4cd795.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**The translate transformation**'
  prefs: []
  type: TYPE_NORMAL
- en: To translate a point, we use only the right-most column of the matrix. The rest
    of the matrix is the same as the identity matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that translation affects only points, not directions. Because the homogeneous
    coordinate of a direction is zero, its value cannot be affected by the right-most
    column of the matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/ce3239e2fe0e2785699a404a506e870b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Rotate about the x axis**'
  prefs: []
  type: TYPE_NORMAL
- en: Rotation about the x axis only affects the y and z axes.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"Positive" rotation is counterclockwise when looking from the positive x direction.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/bbe0fa5811b98d95140fc37a9116b527.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Rotate about the y axis**'
  prefs: []
  type: TYPE_NORMAL
- en: Rotation about the y axis only affects the z and x axes.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"Positive" rotation is counterclockwise when looking from the positive y direction.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](https://mrl.nyu.edu/~perlin/courses/fall2015/1007/imgs/mrotatey.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Rotate about the z axis**'
  prefs: []
  type: TYPE_NORMAL
- en: Rotation about the z axis only affects the x and y axes.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"Positive" rotation is counterclockwise when looking from the positive z direction.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/cf06dafd20eecc7ce4360d680e95f0d3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**The scale transformation**'
  prefs: []
  type: TYPE_NORMAL
- en: Like rotation, a scale transformation (which makes shapes bigger or smaller)
    only uses the top-left 3×3 portion of the 4#215;4 matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this case we are performing a *uniform* scale, by using the same values for
    the three locations along the diagonal of the matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If we were to use differing values at these three locations, then we would perform
    a non-uniform scale, which would result in the shape becoming squashed or stretched.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/ea77462cfd594d45107d3af81889046d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**For this week''s assignment, we will define a shape as:**'
  prefs: []
  type: TYPE_NORMAL
- en: A list of vertices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of edges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example: A square**'
  prefs: []
  type: TYPE_NORMAL
- en: '***Vertices:***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As an array of arrays:'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[-1,-1, 0],'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: '[ 1,-1, 0],'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: '[-1, 1, 0],'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: '[ 1, 1, 0]'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Or as an array of objects (more flexible):'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: new Vector3(-1,-1,0);
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: new Vector3( 1,-1,0);
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: new Vector3(-1, 1,0);
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: new Vector3( 1, 1,0);
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Edges (an array of pairs of vertex indices):***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[0,1], [1,3], [3,2], [2,0]'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Example: A cube**'
  prefs: []
  type: TYPE_NORMAL
- en: '***Vertices***:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: new Vector3(-1,-1,-1);
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: new Vector3( 1,-1,-1);
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: new Vector3(-1, 1,-1);
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: new Vector3( 1, 1,-1);
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: new Vector3(-1,-1, 1);
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: new Vector3( 1,-1, 1);
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: new Vector3(-1, 1, 1);
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: new Vector3( 1, 1, 1);
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Edges***:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Left as an exercise for the reader. ☺
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Viewport transformation:**'
  prefs: []
  type: TYPE_NORMAL
- en: '***You''ll want to do all your 3D modeling and matrix math in "model space":***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Values go from -1...+1 in both x and y.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***But you will need to do your drawing as pixels in "image space":***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Values go from 0...canvas.width in x (left to right).
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Values go from 0...canvas.height in y (top to bottom).
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***To transform from 3D modeling space to pixels in image space:***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
- en: '**The HTML5 Canvas object:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this assignment you will really need to know only the following few Canvas
    methods:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`beginPath(), moveTo(x,y), lineTo(x,y), stroke()`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: But you might be interested in exploring the full power of the Canvas object.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By following this link you can find a [comprehensive reference](http://www.w3schools.com/tags/ref_canvas.asp)
    to the methods available to you for drawing on an HTML5 Canvas.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Examples we started in class:**'
  prefs: []
  type: TYPE_NORMAL
- en: Both of the below interactive diagrams make use of my little convenience library
    [drawlib1.js](drawlib1.js).
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how the diagrams themselves are implemented you can look at the Javascript
    source for this page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In **Chrome**: View → Developer → View Source'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In **Firefox**: Tools → Web Developer → Page Source'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In **Safari**: Develop → Show Page Source'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <canvas id="canvas1" width="300" height="200">Here is where you would put a
    description of what you are trying to explain with this animated diagram.</canvas>
  prefs: []
  type: TYPE_NORMAL
- en: For example, in this case I am showing how to use **`cursor.x`** and **`cursor.y`**
    to position a square, while using **`cursor.z`** (the indicator of whether the
    mouse button is pressed) to change the color of the square.
  prefs: []
  type: TYPE_NORMAL
- en: <canvas id="canvas2" width="300" height="200">Here is where you would put a
    description of what you are trying to explain with this animated diagram.
  prefs: []
  type: TYPE_NORMAL
- en: For example, here I am showing how to animate on object using variable **`time`.**
  prefs: []
  type: TYPE_NORMAL
- en: The above example is also available via this [zip file](exammple1.zip).
  prefs: []
  type: TYPE_NORMAL
- en: '**Homework (due before class on Wednesday October 14)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Matrix object class in Javascript. For that class, implement the following
    methods:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Show that you have these working by creating the vertices and edges of some
    cool shape or set of shapes, applying matrix transformations to them every animation
    frame, and showing the result by drawing on a Canvas to create an animated diagram.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You will get extra credit if you create something really beautiful or interestingly
    interactive, maybe that tells a story or forms a fun game or puzzle.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: </canvas>
  prefs: []
  type: TYPE_NORMAL
