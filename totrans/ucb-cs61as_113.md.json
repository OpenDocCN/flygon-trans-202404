["```\n(define (map fn lst) \n    (if (null? lst) \n        '() \n        (cons (fn (car lst)) \n              (map (cdr lst))))) \n```", "```\n(define (vector-map fn v) \n    (define (loop newvec i) \n        (if (< i 0) \n            newvec \n           (begin (vector-set! newvec i (fn (vector-ref v i))) \n                  (loop newvec (- i 1))))) \n    (loop (make-vector (vector-length v))\n          (- (vector-length v) 1))) \n```", "```\n(define (list-shuffle! lst) \n    (if (null? lst) \n        '() \n        (let ((index (random (length lst)))) \n          (let ((pair ((repeated cdr index) lst)) \n                (temp (car lst))) \n            (set-car! lst (car pair)) \n            (set-car! pair temp) \n            (list-shuffle! (cdr lst)) \n            lst)))) \n```", "```\n(define (vector-shuffle! vec) \n    (define (loop n) \n        (if (= n 0) \n            vec \n            (let ((index (random n)) \n                  (temp (vector-ref vec (- n 1))))  \n              (vector-set! vec (- n 1) (vector-ref vec index)) \n              (vector-set! vec index temp) \n              (loop (- n 1)) \n    (loop (vector-length vec))) \n```"]