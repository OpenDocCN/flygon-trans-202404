- en: Considering Threadability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Considering Threadability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Avoid Global Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Global data leads to unintended side effects between functions and can make
    code difficult or impossible to parallelize. Even if the code is not intended
    today for parallelization, there is no reason to make it impossible for the future.
  prefs: []
  type: TYPE_NORMAL
- en: Statics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Besides being global data, statics are not always constructed and deconstructed
    as you would expect. This is particularly true in cross-platform environments.
    See for example, [this g++ bug](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66830)
    regarding the order of destruction of shared static data loaded from dynamic modules.
  prefs: []
  type: TYPE_NORMAL
- en: Shared Pointers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`std::shared_ptr` is "as good as a global" ([http://stackoverflow.com/a/18803611/29975](http://stackoverflow.com/a/18803611/29975))
    because it allows multiple pieces of code to interact with the same data.'
  prefs: []
  type: TYPE_NORMAL
- en: Singletons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A singleton is often implemented with a static and/or `shared_ptr`.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid Heap Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Much slower in threaded environments. In many or maybe even most cases, copying
    data is faster. Plus with move operations and such and things.
  prefs: []
  type: TYPE_NORMAL
- en: Mutex and mutable go together (M&M rule, C++11)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For member variables it is good practice to use mutex and mutable together.
    This applies in both ways:'
  prefs: []
  type: TYPE_NORMAL
- en: A mutable member variable is presumed to be a shared variable so it should be
    synchronized with a mutex (or made atomic)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a member variable is itself a mutex, it should be mutable. This is required
    to use it inside a const member function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information see the following article from Herb Sutter: [http://herbsutter.com/2013/05/24/gotw-6a-const-correctness-part-1-3/](http://herbsutter.com/2013/05/24/gotw-6a-const-correctness-part-1-3/)'
  prefs: []
  type: TYPE_NORMAL
- en: See also [related safety discussion](04-Considering_Safety.html#consider-return-by-value-for-mutable-data-const--for-immutable)
    about `const &` return values
  prefs: []
  type: TYPE_NORMAL
