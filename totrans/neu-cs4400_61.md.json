["```\n(: extend-rec : Symbol FLANG ENV -> ENV);; extend an environment with a new binding that is the result of;; evaluating an expression in the same environment as the extended;; result(define (extend-rec id expr rest-env)\u00a0 (let ([new-cell (box (NumV 42))])\u00a0 \u00a0 (let ([new-env (Extend id new-cell rest-env)])\u00a0 \u00a0 \u00a0 (let ([value (eval expr new-env)])\u00a0 \u00a0 \u00a0 \u00a0 (set-box! new-cell value)\u00a0 \u00a0 \u00a0 \u00a0 new-env))))\n```", "```\n(: extend-rec : Symbol FLANG ENV -> ENV);; extend an environment with a new binding that is the result of;; evaluating an expression in the same environment as the extended;; result(define (extend-rec id expr rest-env)\u00a0 (let* ([new-cell (box (NumV 42))]\u00a0 \u00a0 \u00a0 \u00a0  [new-env\u00a0 (Extend id new-cell rest-env)]\u00a0 \u00a0 \u00a0 \u00a0  [value\u00a0 \u00a0 (eval expr new-env)])\u00a0 \u00a0 (set-box! new-cell value)\u00a0 \u00a0 new-env))\n```", "```\nfun extend_rec(id, expr, rest_env) {\u00a0 new_cell\u00a0 = new NumV(42);\u00a0 new_env\u00a0  = Extend(id, new_cell, rest_env);\u00a0 value\u00a0 \u00a0  = eval(expr, new_env);\u00a0 *new_cell = value;\u00a0 return new_env;}\n```", "```\n(: extend-rec : Symbol FLANG ENV -> ENV)(define (extend-rec id expr rest-env)\u00a0 (define new-env (Extend id (box (NumV 42)) rest-env))\u00a0 (set-box! (lookup id new-env) (eval expr new-env))\u00a0 new-env)\n```", "```\n[\u25b6](flang-box.rkt \"flang-box.rkt\")#lang pl(define-type FLANG\u00a0 [Num\u00a0 Number]\u00a0 [Add\u00a0 FLANG FLANG]\u00a0 [Sub\u00a0 FLANG FLANG]\u00a0 [Mul\u00a0 FLANG FLANG]\u00a0 [Div\u00a0 FLANG FLANG]\u00a0 [Id\u00a0  Symbol]\u00a0 [With Symbol FLANG FLANG]\u00a0 [WRec Symbol FLANG FLANG]\u00a0 [Fun\u00a0 Symbol FLANG]\u00a0 [Call FLANG FLANG])(: parse-sexpr : Sexpr -> FLANG);; parses s-expressions into FLANGs(define (parse-sexpr sexpr)\u00a0 (match sexpr\u00a0 \u00a0 [(number: n)\u00a0 \u00a0 (Num n)]\u00a0 \u00a0 [(symbol: name) (Id name)]\u00a0 \u00a0 [(cons (or 'with 'rec) more)\u00a0 \u00a0  (match sexpr\u00a0 \u00a0 \u00a0  [(list 'with (list (symbol: name) named) body)\u00a0 \u00a0 \u00a0 \u00a0 (With name (parse-sexpr named) (parse-sexpr body))]\u00a0 \u00a0 \u00a0  [(list 'rec (list (symbol: name) named) body)\u00a0 \u00a0 \u00a0 \u00a0 (WRec name (parse-sexpr named) (parse-sexpr body))]\u00a0 \u00a0 \u00a0  [(cons x more)\u00a0 \u00a0 \u00a0 \u00a0 (error 'parse-sexpr \"bad `~s' syntax in ~s\" x sexpr)])]\u00a0 \u00a0 [(cons 'fun more)\u00a0 \u00a0  (match sexpr\u00a0 \u00a0 \u00a0  [(list 'fun (list (symbol: name)) body)\u00a0 \u00a0 \u00a0 \u00a0 (Fun name (parse-sexpr body))]\u00a0 \u00a0 \u00a0  [else (error 'parse-sexpr \"bad `fun' syntax in ~s\" sexpr)])]\u00a0 \u00a0 [(list '+ lhs rhs) (Add (parse-sexpr lhs) (parse-sexpr rhs))]\u00a0 \u00a0 [(list '- lhs rhs) (Sub (parse-sexpr lhs) (parse-sexpr rhs))]\u00a0 \u00a0 [(list '* lhs rhs) (Mul (parse-sexpr lhs) (parse-sexpr rhs))]\u00a0 \u00a0 [(list '/ lhs rhs) (Div (parse-sexpr lhs) (parse-sexpr rhs))]\u00a0 \u00a0 [(list 'call fun arg)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (Call (parse-sexpr fun) (parse-sexpr arg))]\u00a0 \u00a0 [else (error 'parse-sexpr \"bad syntax in ~s\" sexpr)]))(: parse : String -> FLANG);; parses a string containing a FLANG expression to a FLANG AST(define (parse str)\u00a0 (parse-sexpr (string->sexpr str)));; Types for environments, values, and a lookup function(define-type ENV\u00a0 [EmptyEnv]\u00a0 [Extend Symbol (Boxof VAL) ENV])(define-type VAL\u00a0 [NumV Number]\u00a0 [FunV Symbol FLANG ENV])(: lookup : Symbol ENV -> (Boxof VAL));; lookup a symbol in an environment, return its value or throw an;; error if it isn't bound(define (lookup name env)\u00a0 (cases env\u00a0 \u00a0 [(EmptyEnv) (error 'lookup \"no binding for ~s\" name)]\u00a0 \u00a0 [(Extend id boxed-val rest-env)\u00a0 \u00a0  (if (eq? id name) boxed-val (lookup name rest-env))]))(: extend-rec : Symbol FLANG ENV -> ENV);; extend an environment with a new binding that is the result of;; evaluating an expression in the same environment as the extended;; result(define (extend-rec id expr rest-env)\u00a0 (define new-env (Extend id (box (NumV 42)) rest-env))\u00a0 (set-box! (lookup id new-env) (eval expr new-env))\u00a0 new-env)(: NumV->number : VAL -> Number);; convert a FLANG runtime numeric value to a Racket one(define (NumV->number val)\u00a0 (cases val\u00a0 \u00a0 [(NumV n) n]\u00a0 \u00a0 [else (error 'arith-op \"expected a number, got: ~s\" val)]))(: arith-op : (Number Number -> Number) VAL VAL -> VAL);; gets a Racket numeric binary operator, and uses it within a NumV;; wrapper(define (arith-op op val1 val2)\u00a0 (NumV (op (NumV->number val1) (NumV->number val2))))(: eval : FLANG ENV -> VAL);; evaluates FLANG expressions by reducing them to values(define (eval expr env)\u00a0 (cases expr\u00a0 \u00a0 [(Num n) (NumV n)]\u00a0 \u00a0 [(Add l r) (arith-op + (eval l env) (eval r env))]\u00a0 \u00a0 [(Sub l r) (arith-op - (eval l env) (eval r env))]\u00a0 \u00a0 [(Mul l r) (arith-op * (eval l env) (eval r env))]\u00a0 \u00a0 [(Div l r) (arith-op / (eval l env) (eval r env))]\u00a0 \u00a0 [(With bound-id named-expr bound-body)\u00a0 \u00a0  (eval bound-body\u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (Extend bound-id (box (eval named-expr env)) env))]\u00a0 \u00a0 [(WRec bound-id named-expr bound-body)\u00a0 \u00a0  (eval bound-body\u00a0 \u00a0 \u00a0 \u00a0 \u00a0  (extend-rec bound-id named-expr env))]\u00a0 \u00a0 [(Id name) (unbox (lookup name env))]\u00a0 \u00a0 [(Fun bound-id bound-body)\u00a0 \u00a0  (FunV bound-id bound-body env)]\u00a0 \u00a0 [(Call fun-expr arg-expr)\u00a0 \u00a0  (let ([fval (eval fun-expr env)])\u00a0 \u00a0 \u00a0  (cases fval\u00a0 \u00a0 \u00a0 \u00a0  [(FunV bound-id bound-body f-env)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (eval bound-body\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (Extend bound-id (box (eval arg-expr env)) f-env))]\u00a0 \u00a0 \u00a0 \u00a0  [else (error 'eval \"`call' expects a function, got: ~s\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fval)]))]))(: run : String -> Number);; evaluate a FLANG program contained in a string(define (run str)\u00a0 (let ([result (eval (parse str) (EmptyEnv))])\u00a0 \u00a0 (cases result\u00a0 \u00a0 \u00a0 [(NumV n) n]\u00a0 \u00a0 \u00a0 [else (error 'run \"evaluation returned a non-number: ~s\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  result)])));; tests(test (run \"{call {fun {x} {+ x 1}} 4}\")\u00a0 \u00a0 \u00a0 => 5)(test (run \"{with {add3 {fun {x} {+ x 3}}}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {call add3 1}}\")\u00a0 \u00a0 \u00a0 => 4)(test (run \"{with {add3 {fun {x} {+ x 3}}}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {with {add1 {fun {x} {+ x 1}}}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {with {x 3}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {call add1 {call add3 x}}}}}\")\u00a0 \u00a0 \u00a0 => 7)(test (run \"{with {identity {fun {x} x}}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {with {foo {fun {x} {+ x 1}}}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {call {call identity foo} 123}}}\")\u00a0 \u00a0 \u00a0 => 124)(test (run \"{with {x 3}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {with {f {fun {y} {+ x y}}}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {with {x 5}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {call f 4}}}}\")\u00a0 \u00a0 \u00a0 => 7)(test (run \"{call {with {x 3}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {fun {y} {+ x y}}}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4}\")\u00a0 \u00a0 \u00a0 => 7)(test (run \"{call {call {fun {x} {call x 1}}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {fun {x} {fun {y} {+ x y}}}}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 123}\")\u00a0 \u00a0 \u00a0 => 124)\n```"]