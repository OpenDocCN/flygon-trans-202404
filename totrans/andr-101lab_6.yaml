- en: 'Lab 06: Donation 5.0 - REST/Cloud Support'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lab 06: Donation 5.0 - REST/Cloud Support'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Objectives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Objectives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this Lab, you will complete an additional refactor of our Donation Case Study
    - **Donation.5.0**. We will build on the previous lab and add in some new features
    and most importantly,connect to a REST based Web Service. On completion of this
    lab you'll be able to
  prefs: []
  type: TYPE_NORMAL
- en: connect to a remote server to retrieve & delete Donations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: connect to a remote server to retrieve a single Donation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add Event Handling to an Image on our Custom Donation Row
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 01
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setup - Starter Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with the previous labs, you can download the solution/starter code for [Donation.5.0.starter](Donation.5.0.Starter.zip),
    or continue on with your own version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your current project (after renaming/copying) should looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab6s101.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this lab, you are required to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add REST Support via the [Donation sister site](http://donationweb-4-0.herokuapp.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the Database Support and revert to the original Donation List
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactor existing Classes to accommodate the new REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following steps will guide you through these requirements, so we'll start
    with bringing in the classes we need to connect to our Web Service.
  prefs: []
  type: TYPE_NORMAL
- en: Step 02
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding REST Support & Project Clean Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main purpose of this version of Donation is to connect to a Web Service
    ([our sister site](http://donationweb-4-0.herokuapp.com)) and be able to retrieve,
    insert and delete Donations.
  prefs: []
  type: TYPE_NORMAL
- en: To make things a bit easier I've devloped a simple API to make the HTTP calls
    and convert the responses from JSON into objects our Android App can use.
  prefs: []
  type: TYPE_NORMAL
- en: So go ahead and download the package [here](api.zip).
  prefs: []
  type: TYPE_NORMAL
- en: 'The extracted archive consists of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: DonationApi.java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rest.java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (viewed in Finder)
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab6s201.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will need to add these classes to your Android Studio Project and the simplest
    way is to copy the api folder in Windows Explorer or Finder and paste directly
    into your **ie.app** package in your Android Studio Project. Once completed, your
    project should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab6s202.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, if you Rebuild the project
  prefs: []
  type: TYPE_NORMAL
- en: Build->Rebuild Project
  prefs: []
  type: TYPE_NORMAL
- en: 'you''ll have a number of errors relating to [Googles Gson](https://sites.google.com/site/gson/gson-user-guide),
    so first thing to do is add **Googles Gson''s** dependency to our project:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your 'build.gradle' file for **app**, **NOT THE PROJECT!**
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab6s203.png)'
  prefs: []
  type: TYPE_IMG
- en: Add the Gson dependency
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: so your dependencies in your build file looks something like this
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab6s204.png)'
  prefs: []
  type: TYPE_IMG
- en: Rebuild your project again and you should now be error free!
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we need to do is remove/delete our database classes and reintroduce
    a simple list back into our DonationApp Application class.
  prefs: []
  type: TYPE_NORMAL
- en: So,
  prefs: []
  type: TYPE_NORMAL
- en: first, just delete the whole **ie.app.database** package (don't worry about
    the errors, we'll fix those soon)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: next, reintroduce our donations list into the DonationApp class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: finally, remove all references to **dbManager** in the project and replace with
    our **donations** or **app.donations** (depending on the context).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We've actually taken a step back as regards functionality, as we're not adding
    donations to our list directly - the list is only to be used to hold the result
    of our REST calls.
  prefs: []
  type: TYPE_NORMAL
- en: So let's go ahead and start using our REST classes for data retrieval.
  prefs: []
  type: TYPE_NORMAL
- en: Step 03
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Donate Activity - Getting the Running Total
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When our Donation App initially starts we want to ensure that the current total
    (if any) is set correctly and corresponds to the donations listed on our sister
    web app.
  prefs: []
  type: TYPE_NORMAL
- en: We need to retrieve a list of all our donations from the Server and set our
    total. We will achieve this through our REST classes and the use of AsyncTasks
    to execute those calls on a background thread.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start, we need to allow our app to access the internet (and network)
    so we need to add some permissions to our manifest file, so add the following
    to your **AndroidManifest.xml** file (just before the <application tag)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Introduce the following **private** class into the Donate activity
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To actually invoke this Task, add the following method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you try and run your app, it'll connect to the web service and return our
    list from the sister site - but it will then crash. Can you work out why this
    is happening from the Logs, and how to fix it?
  prefs: []
  type: TYPE_NORMAL
- en: Step 04
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refactoring our Donation Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've payed particular attention to the JSON string that was returned in
    the previous request, you'll see that there are 4 attributes, of different types
    - which don't match our current **Donation** class.
  prefs: []
  type: TYPE_NORMAL
- en: This is why the app crashed - we were trying to convert our json string into
    a list of objects that are not the same type.
  prefs: []
  type: TYPE_NORMAL
- en: So go ahead and replace your current Donation Model with this one
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'There''ll be a few small errors to fix, but once you do, run your app again
    and you should get something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab6s401.png)'
  prefs: []
  type: TYPE_IMG
- en: Step 05
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Report Activity - Refactoring our Layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we can see our Total Donations, let's display them in our Report Activity.
  prefs: []
  type: TYPE_NORMAL
- en: We've a few modifications to make on our layouts first, and we're going to introduce
    Androids [SwipereRreshLayout](http://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html)
    feature so replace your current report layout with this one
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We also need to modify our custom row, so the user can see the number of 'upvotes'
    for each donation, so go ahead and refactor your row_donate.xml by introducing
    a new TextView Resource to display the 'upvotes'. We're also going to be able
    to delete a donation via a 'delete' button, so while you're refactoring the custom
    row, have a go at that too (like so)
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab6s501.png)'
  prefs: []
  type: TYPE_IMG
- en: (And don't worry, the solution is on the next step, but have a go first)
  prefs: []
  type: TYPE_NORMAL
- en: Step 06
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Report Activity - Displaying our Donations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here's the updated custom layout you should have (or something similar)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you run the app again, and select the Report Menu Option, you'll actually
    see the list that has been retrieved from the server (without any upvotes yet)
    - with no extra coding - how is this possible?
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab6s601.png)'
  prefs: []
  type: TYPE_IMG
- en: Experiment with the Swipe Refresh gesture and see what happens?
  prefs: []
  type: TYPE_NORMAL
- en: Step 07
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Report Activity - Implementing Swipe Refresh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've probably noticed that even though we can 'refresh' our report list, all
    we see is the refresh progress spin indefinitely - we've no way to stop it except
    closing the activity.
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab6s701.png)'
  prefs: []
  type: TYPE_IMG
- en: The reason being, we have no backend implementation of the gesture to actually
    refresh the data in the list - so let's do that.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is introduce a new AsyncTask to retrieve the donations
    - more advanced approaches could utilise interfaces and inheritance to reuse already
    existing AsyncTasks (like our GetAllTask), but for the moment, we'll try and keep
    it as simple as possible and write a new GetAllTask specifically for the Report
    activity.
  prefs: []
  type: TYPE_NORMAL
- en: Add the below AsyncTask to the Report Activity;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Fix all the errors (bar 1) and then bring in the following reference
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: replace the existing onCreate() method with this one
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Run your app again and confirm that the refresh is working correctly, by adding
    or deleting a donation on the Web and then refreshing your Report Screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note : as everyone and anyone :-) can add and/or delete donations via the
    web app, I''d encourage you to keep the list of donations to 4 or 5 while you''re
    testing**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We should also be displaying the 'upvotes' values for each donation so see if
    you can get that implemented before looking at the solution on the next step.
  prefs: []
  type: TYPE_NORMAL
- en: Step 08
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Report Activity - Event Handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here's the solution to our updated DonationAdapter class so replace your current
    DonationAdapter with this one, and run and test your app again, to complete the
    step.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: While we working on the Report Activity, let's add some event handling so we
    can
  prefs: []
  type: TYPE_NORMAL
- en: view the details of an individual Donation and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: delete a specific Donation via the delete Button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduce this AsyncTask into the Report Activity
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Fix any errors, and see can you add an **OnItemClickListener** to our Report
    class to display the Toast (below) when a row is selected, by invoking the above
    AsyncTask.
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab6s801.png)'
  prefs: []
  type: TYPE_IMG
- en: To implement the delete feature, we need to implement an **OnClickListener**
    interface so go ahead and do that and bring in this AsyncTask to begin with.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: and also this method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, see can you call the above **onDonationDelete()** in your **onClick()**
    method so you get something like this when you click on the delete button
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab6s802.png)'
  prefs: []
  type: TYPE_IMG
- en: Step 09
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Donate Activity - Add a Donation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here's the complete **Report.java** activity before we complete our penultimate
    step in this lab
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's look at how we can add a new Donation and 'insert' it into the remote
    list of Donations, maintained on the Server.
  prefs: []
  type: TYPE_NORMAL
- en: Open your **Donate.java** Activity and have a look at the current implementations
    of donateButtonPressed() & reset()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: They add to our local list of Donations, and reset a simple field - we'll implement
    the reset feature in the final step so now, the first thing to do, is look at
    how we can refactor the donateButtonPressed() method to add a donation to our
    remote list and then update our total.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to need another AsyncTask for this so see if you can complete this
    'InsertTask' based on the previous Tasks you've implemented
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: And referring to the lecture material, complete the donateButtonPressed() method
    that will invoke the above Task.
  prefs: []
  type: TYPE_NORMAL
- en: Step 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Donate Activity - Reset/Delete all Donations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final step in this lab is the ability to delete, or reset, all our Donations.
  prefs: []
  type: TYPE_NORMAL
- en: Remember - once you reset the Donations associated with this version of our
    Server (donationweb-4-0) Everyones Donations will be deleted, so you'll have to
    add in more Donations to keep testing your App.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Anyway :)
  prefs: []
  type: TYPE_NORMAL
- en: Let's finish off our Donation 5.0 App by implementing the 'Reset' Menu option.
  prefs: []
  type: TYPE_NORMAL
- en: First thing to do is bring in this AsyncTask
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: There's really only one line of code which needs to be added to the reset()
    method so see if you can work out what it is and be able to 'reset' (delete) all
    the Donations on the Server.
  prefs: []
  type: TYPE_NORMAL
- en: If you get this all working, you'll notice there's a small bug in the app that
    allows the user to still view the Report Screen, even after we called the reset
    menu option.
  prefs: []
  type: TYPE_NORMAL
- en: See can you fix this bug and also add in a feature to ask the user if they're
    sure they want to reset all the donations (similar to the delete a Donation feature
    on the Report Screen) like so
  prefs: []
  type: TYPE_NORMAL
- en: '![](lab6s1001.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a solution to the lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Donation.5.0](Donation.5.0.zip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
