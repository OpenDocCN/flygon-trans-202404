- en: Conditional Expressions and Predicates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Review on Conditionals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used `if` and conditionals in our first lab. In this section, we will flesh
    out more details.
  prefs: []
  type: TYPE_NORMAL
- en: We generally use an `if` or a `cond` when we want our function to behave differently
    depending on a certain condition. Note that these two functions are *special forms*
    in Racket; we don't evaluate them using the usual "evaluate the operands fully,
    and then apply the operator" method.
  prefs: []
  type: TYPE_NORMAL
- en: '`cond` Examples'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The general form of a `cond` expression is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Each `(<test> <result>)` pair is called a *clause*. The first part of each pair
    (the `<test>`) is a *predicate*â€”an expression that must evaluate to either true
    or false.
  prefs: []
  type: TYPE_NORMAL
- en: To evaluate a `cond` expression, start by evaluating `<test1>`. If it is true,
    evaluate and return `<result1>`. If `<test1>` is false, repeat for `<test2>`,
    and so on until there are no more tests. If you hit an `else`, return the value
    corresponding to it (the "default value").
  prefs: []
  type: TYPE_NORMAL
- en: 'You can write a `cond` expression as a series of ''if'' statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Exercise
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function `plural` below takes in a word and returns its plural form. For
    example, `(plural 'carrot)` returns `'carrots` and `(plural 'body)` returns `'bodies`.
    It does *not* perform correctly for `(plural 'boy)`, which *should* return `'boys`;
    the buggy version below returns `'boies` instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Choose which line of code to add in the blank below so that (plural 'boy) behaves
    correctly (that is, it should return boys). Suppose `vowel?` is defined as before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Predicate and Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A predicate is any expression that returns true or false. Some examples include
    `(< 3 4)`,`(> 10 -2)`, and `(= 'apple 'orange)`. You can form compound predicates
    by using `and`, `or`, and `not`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a predicate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When defining a predicate, it is conventional to end the name of the procedure
    with a question mark (`?`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s another way to define `even?`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Although this definition is equivalent to the original definition above, it
    contains redundancies. We urge you to avoid writing code like this. Redundant
    code can make your programs more difficult to understand, and is typically considered
    an example of bad programming style.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We define a procedure that takes three numbers as arguments and returns the
    sum of the squares of the two larger numbers
  prefs: []
  type: TYPE_NORMAL
- en: For example, `(max-sum-squares 1 2 3)` returns `13`, which is `4 + 9`
  prefs: []
  type: TYPE_NORMAL
- en: Why isn't the code below correct?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'PRACTICE QUESTION: Write a procedure `pigl` that takes a word as an argument
    and returns that word in pig latin. Here are the rules for pig latin:'
  prefs: []
  type: TYPE_NORMAL
- en: If the input word starts with a vowel then we append "ay" to the input.
  prefs: []
  type: TYPE_NORMAL
- en: If the input word starts with a consonant then we move all the starting consonants
    to the end of the word and then append "ay" to the end.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: What happens if our input doesn't have a vowel, like `(pigl 'my)`? Make sure
    your `pigl` checks if a word has no vowels and just returns that word directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Check your answer in your Racket interpreter with the examples above!
  prefs: []
  type: TYPE_NORMAL
