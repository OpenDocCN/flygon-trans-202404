- en: Homework 0.2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Type the following command at the terminal to copy the template file to the
    current directory (note the period at the end):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Or you can download the template [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw0-2.rkt).
  prefs: []
  type: TYPE_NORMAL
- en: Autograder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are working on the lab computers, the `grader` command will run the autograder.
    If you are working on your own personal machine, you should download [grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)
    and the [hw0-2-tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw0-2-tests.rkt).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The expression `(+ 8 2)` has the value `10`. It is a compound expression made
    up of three atoms. For this problem, write five other Racket expressions whose
    values are also `10`:'
  prefs: []
  type: TYPE_NORMAL
- en: An atom
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another compound expression made up of three atoms
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A compound expression made up of four atoms
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A compound expression made up of an atom and two compound subexpressions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any other kind of expression
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's build some functions to deal with words and sentences. We'll give you
    the second procedure from the previous lab. You might also find the [word](/textbook/words-and-sentences.html#sub3)
    function useful.
  prefs: []
  type: TYPE_NORMAL
- en: Write a procedure `first-two` that takes a word as its argument, returning a
    two-letter word containing the first two letters of the argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a procedure `two-first` that takes two words as arguments, returning a
    two-letter word containing the first letters of the two arguments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now write a procedure `two-first-sent` that takes a two-word sentence as argument,
    returning a two-letter word containing the first letters of the two words.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a predicate `teen?` that returns `#t` if its argument is between 13 and
    19, inclusive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a procedure `indef-article` that takes in a word as its only argument
    and returns a sentence. See examples below for how `indef-article` should work.
    Remember that the indefinite article for anything that starts with a consonant
    is "a", and the indefinite article for anything that starts with a vowel is "an".
    You can ignore any edge cases.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a procedure `insert-and` that takes a sentence of items and returns a
    new sentence with an `and` in the grammatically correct place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a procedure `query` that turns a statement into a question by swapping
    the first two words and adding a question mark to the end of the last word. You
    can ignore any edge cases.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a procedure `european-time` to convert a time from American AM/PM notation
    into European 24-hour notation. Also, write `american-time`, which does the opposite.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a procedure `describe-time` that takes a number of seconds as its argument
    and returns a more useful description of that amount of time. Assume that there
    are 365.25 days in a year. You only need to account for time periods up to a day.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may notice that Racket handles integer division a little strangely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can force Racket to return numbers with decimal points (AKA *floating-point
    numbers*) by using decimal points in one or more of your arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following program doesn't work. Why not? Fix it and explain why.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how `superlative` should work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Submit Your Homework!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  prefs: []
  type: TYPE_NORMAL
