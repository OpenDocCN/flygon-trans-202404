["```\nimport image as I\nimport world as W\n```", "```\nAIRPLANE-URL =\n  \"http://world.cs.brown.edu/1/clipart/airplane-small.png\"\nAIRPLANE = I.image-url(AIRPLANE-URL)\n```", "```\nAIRPLANE-X-MOVE = 10\n```", "```\ncheck:\n  move-airplane-x-on-tick(50) is 50 + AIRPLANE-X-MOVE\n  move-airplane-x-on-tick(0) is 0 + AIRPLANE-X-MOVE\n  move-airplane-x-on-tick(100) is 100 + AIRPLANE-X-MOVE\nend\n```", "```\nfun move-airplane-x-on-tick(w):\n  w + AIRPLANE-X-MOVE\nend\n```", "```\nWIDTH = 800\nHEIGHT = 500\n\nBASE-HEIGHT = 50\nWATER-WIDTH = 500\n```", "```\nBLANK-SCENE = I.empty-scene(WIDTH, HEIGHT)\n\nWATER = I.rectangle(WATER-WIDTH, BASE-HEIGHT, \"solid\", \"blue\")\nLAND = I.rectangle(WIDTH - WATER-WIDTH, BASE-HEIGHT, \"solid\", \"brown\")\n\nBASE = I.beside(WATER, LAND)\n\nBACKGROUND =\n  I.place-image(BASE,\n    WIDTH / 2, HEIGHT - (BASE-HEIGHT / 2),\n    BLANK-SCENE)\n```", "```\nI.place-image(AIRPLANE,\n  # some x position,\n  50,\n  BACKGROUND)\n```", "```\nfun place-airplane-x(w):\n  I.place-image(AIRPLANE,\n    w,\n    50,\n    BACKGROUND)\nend\n```", "```\nW.big-bang(0, [list:\n    W.on-tick(move-airplane-x-on-tick),\n    W.to-draw(place-airplane-x)])\n```", "```\nfun move-airplane-wrapping-x-on-tick(x):\n  num-modulo(x + AIRPLANE-X-MOVE, WIDTH)\nend\n```", "```\nfun move-airplane-wrapping-x-on-tick(x):\n  num-modulo(move-airplane-x-on-tick(x), WIDTH)\nend\n```", "```\ndata Posn:\n  | posn(x, y)\nend\n```", "```\nAIRPLANE-Y-MOVE = 3\n```", "```\ncheck:\n  move-airplane-xy-on-tick(posn(10, 10)) is posn(20, 13)\nend\n```", "```\ncheck:\n  p = posn(10, 10)\n  move-airplane-xy-on-tick(p) is\n    posn(move-airplane-wrapping-x-on-tick(p.x),\n      move-airplane-y-on-tick(p.y))\nend\n```", "```\n> check:\n>   p = posn(10, 10)\n>   move-airplane-xy-on-tick(p) is\n>    posn(num-modulo(p.x + AIRPLANE-X-MOVE, WIDTH),\n>     p.y + AIRPLANE-Y-MOVE)\n> end\n> ```", "```\nfun move-airplane-xy-on-tick(w):\n  posn(move-airplane-wrapping-x-on-tick(w.x),\n    move-airplane-y-on-tick(w.y))\nend\n```", "```\nfun move-airplane-y-on-tick(y):\n  y + AIRPLANE-Y-MOVE\nend\n```", "```\nINIT-POS = posn(0, 0)\n\nW.big-bang(INIT-POS, [list:\n    W.on-tick(move-airplane-xy-on-tick),\n    W.to-draw(place-airplane-xy)])\n```", "```\nKEY-DISTANCE = 10\n```", "```\nfun alter-airplane-y-on-key(w, key):\n  ask:\n    | key == \"up\"   then: posn(w.x, w.y - KEY-DISTANCE)\n    | key == \"down\" then: posn(w.x, w.y + KEY-DISTANCE)\n    | otherwise: w\n  end\nend\n```", "```\n> > | otherwise: w\n> > ```", "```\nW.big-bang(INIT-POS, [list:\n    W.on-tick(move-airplane-xy-on-tick),\n    W.on-key(alter-airplane-y-on-key),\n    W.to-draw(place-airplane-xy)])\n```", "```\nfun is-on-land-or-water(w):\n  w.y >= (HEIGHT - BASE-HEIGHT)\nend\n```", "```\nW.big-bang(INIT-POS, [list:\n    W.on-tick(move-airplane-xy-on-tick),\n    W.on-key(alter-airplane-y-on-key),\n    W.to-draw(place-airplane-xy),\n    W.stop-when(is-on-land-or-water)])\n```", "```\nBALLOON-LOC = posn(600, 300)\n```", "```\nBALLOON-LOC = posn(random(WIDTH), random(HEIGHT))\n```", "```\nfun are-overlapping(airplane-posn, balloon-posn):\n  distance(airplane-posn, balloon-posn)\n    < COLLISION-THRESHOLD\nend\n```", "```\nfun distance(p1, p2):\n  fun square(n): n * n end\n  num-sqrt(square(p1.x - p2.x) + square(p1.y - p2.y))\nend\n```", "```\nfun game-ends(w):\n  ask:\n    | is-on-land-or-water(w)      then: true\n    | are-overlapping(w, BALLOON) then: true\n    | otherwise: false\n  end\nend\n```", "```\nW.big-bang(INIT-POS, [list:\n    W.on-tick(move-airplane-xy-on-tick),\n    W.on-key(alter-airplane-y-on-key),\n    W.to-draw(place-airplane-xy),\n    W.stop-when(game-ends)])\n```", "```\nfun game-ends(w):\n  is-on-land-or-water(w) or are-overlapping(w, BALLOON-LOC)\nend\n```", "```\ndata World:\n  | world(p, f)\nend\n```", "```\nfun move-airplane-xy-on-tick(w :: World):\n  world(\n    posn(\n      move-airplane-wrapping-x-on-tick(w.p.x),\n      move-airplane-y-on-tick(w.p.y)),\n    w.f)\nend\n```", "```\nfun alter-airplane-y-on-key(w, key):\n  ask:\n    | key == \"up\"   then:\n      if w.f > 0:\n        world(posn(w.p.x, w.p.y - KEY-DISTANCE), w.f - 1)\n      else:\n        w # there's no fuel, so ignore the keystroke\n      end\n    | key == \"down\" then:\n      world(posn(w.p.x, w.p.y + KEY-DISTANCE), w.f)\n    | otherwise: w\n  end\nend\n```", "```\ndata World:\n  | world(p :: Posn, b :: Posn, f :: Number)\nend\n```"]