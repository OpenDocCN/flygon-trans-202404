- en: The internals of slice
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切片的内部
- en: The internals of slice
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切片的内部
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'There are `3` components of slice:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 切片有`3`个组成部分：
- en: 'a) `Pointer`: Points to the start position of slice in the underlying array;'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: a) `指针`：指向底层数组中切片的起始位置；
- en: 'b) `length` (type is `int`): the number of the valid elements of the slice;'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: b) `长度`（类型为`int`）：切片的有效元素数目；
- en: 'b) `capacity` (type is `int`): the total number of slots of the slice.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: b) `容量`（类型为`int`）：切片的总槽数。
- en: 'Check the following code:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 检查以下代码：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The result is `24` on my `64-bit` system (The `pointer` and `int` both occupy
    `8` bytes).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的`64位`系统上结果为`24`（`指针`和`int`都占据`8`个字节）。
- en: 'In the next example, I will use `gdb` to poke the internals of slice. The code
    is like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我将使用`gdb`来查看切片的内部。 代码如下：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Use `gdb` to step into the code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`gdb`进入代码：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Before executing "`s1 = append(s1, 4)`", `fmt.Println` outputs the length(`3`),
    capacity(`5`) and the starting element address(`0xc820010240`) of the slice, let''s
    check the memory layout of `s1`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行"`s1 = append(s1, 4)`"之前，`fmt.Println`输出了切片的长度（`3`）、容量（`5`）和起始元素地址（`0xc820010240`），让我们来检查`s1`的内存布局：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Through examining the memory content of `s1`(the start memory address is `0xc82003fe40`),
    we can see its content matches the output of `fmt.Println`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查内存内容`s1`（起始内存地址为`0xc82003fe40`），我们可以看到其内容与`fmt.Println`的输出匹配。
- en: 'Continue executing, and check the result before "`s2 := s1[1:]`":'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 继续执行，并在"`s2 := s1[1:]`"之前检查结果：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can see after appending a new element(`s1 = append(s1, 4)`), the length of
    `s1` is changed to `4`, but the capacity remains the original value.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在追加新元素（`s1 = append(s1, 4)`）后，`s1`的长度更改为`4`，但容量保持原始值。
- en: 'Let''s check the internals of `s2`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来检查`s2`的内部：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The element start address of `s2` is `0xc820010248`, actually the second element
    of `s1`(`0xc82003fe40`), and the length(`3`) and capacity(`4`) are both one less
    than the counterparts of `s1`(`4` and `5` respectively).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`s2`的元素起始地址是`0xc820010248`，实际上是`s1`的第二个元素（`0xc82003fe40`），长度（`3`）和容量（`4`）都比`s1`的对应值小一个（分别为`4`和`5`）。'
