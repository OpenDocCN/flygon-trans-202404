- en: Low-risk ways to use F# at work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So you're all excited about functional programming, and you've been learning
    F# in your spare time, and you're annoying your co-workers by ranting about how
    great it is, and you're itching to use it for serious stuff at work...
  prefs: []
  type: TYPE_NORMAL
- en: But then you hit a brick wall.
  prefs: []
  type: TYPE_NORMAL
- en: Your workplace has a "C# only" policy and won't let you use F#.
  prefs: []
  type: TYPE_NORMAL
- en: If you work in a typical enterprise environment, getting a new language approved
    will be a long drawn out process, involving persuading your teammates, the QA
    guys, the ops guys, your boss, your boss's boss, and the [mysterious bloke down
    the hall](http://www.joelonsoftware.com/articles/fog0000000018.html) who you've
    never talked to. I would encourage you to start that process (a [helpful link
    for your manager](http://fpbridge.co.uk/why-fsharp.html)), but still, you're impatient
    and thinking "what can I do now?"
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, perhaps you work in a flexible, easy going place, where you
    can do what you like.
  prefs: []
  type: TYPE_NORMAL
- en: But you're conscientious, and don't want to be one of those people who re-write
    some mission critical system in APL, and then vanish without trace, leaving your
    replacement some mind-bendingly cryptic code to maintain. No, you want to make
    sure that you are not doing anything that will affect your team's [bus factor](https://en.wikipedia.org/wiki/Bus_factor).
  prefs: []
  type: TYPE_NORMAL
- en: So in both these scenarios, you want to use F# at work, but you can't (or don't
    want to) use it for core application code.
  prefs: []
  type: TYPE_NORMAL
- en: What can you do?
  prefs: []
  type: TYPE_NORMAL
- en: Well, don't worry! This series will suggest a number of ways you can get your
    hands dirty with F# in a low-risk, incremental way, without affecting any mission
    critical code.
  prefs: []
  type: TYPE_NORMAL
- en: '[Twenty six low-risk ways to use F# at work](low-risk-ways-to-use-fsharp-at-work1.html).
    You can start right now -- no permission needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using F# for development and devops scripts](low-risk-ways-to-use-fsharp-at-work-2.html).
    Twenty six low-risk ways to use F# at work (part 2).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using F# for testing](low-risk-ways-to-use-fsharp-at-work-3.html). Twenty
    six low-risk ways to use F# at work (part 3).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using F# for database related tasks](low-risk-ways-to-use-fsharp-at-work-4.html).
    Twenty six low-risk ways to use F# at work (part 4).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Other interesting ways of using F# at work](low-risk-ways-to-use-fsharp-at-work-5.html).
    Twenty six low-risk ways to use F# at work (part 5).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twenty six low-risk ways to use F# at work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Twenty six low-risk ways to use F# at work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So you're all excited about functional programming, and you've been learning
    F# in your spare time, and you're annoying your co-workers by ranting about how
    great it is, and you're itching to use it for serious stuff at work...
  prefs: []
  type: TYPE_NORMAL
- en: But then you hit a brick wall.
  prefs: []
  type: TYPE_NORMAL
- en: Your workplace has a "C# only" policy and won't let you use F#.
  prefs: []
  type: TYPE_NORMAL
- en: If you work in a typical enterprise environment, getting a new language approved
    will be a long drawn out process, involving persuading your teammates, the QA
    guys, the ops guys, your boss, your boss's boss, and the [mysterious bloke down
    the hall](http://www.joelonsoftware.com/articles/fog0000000018.html) who you've
    never talked to. I would encourage you to start that process (a [helpful link
    for your manager](http://fpbridge.co.uk/why-fsharp.html)), but still, you're impatient
    and thinking "what can I do now?"
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, perhaps you work in a flexible, easy going place, where you
    can do what you like.
  prefs: []
  type: TYPE_NORMAL
- en: But you're conscientious, and don't want to be one of those people who re-write
    some mission critical system in APL, and then vanish without trace, leaving your
    replacement some mind-bendingly cryptic code to maintain. No, you want to make
    sure that you are not doing anything that will affect your team's [bus factor](http://en.wikipedia.org/wiki/Bus_factor).
  prefs: []
  type: TYPE_NORMAL
- en: So in both these scenarios, you want to use F# at work, but you can't (or don't
    want to) use it for core application code.
  prefs: []
  type: TYPE_NORMAL
- en: What can you do?
  prefs: []
  type: TYPE_NORMAL
- en: Well, don't worry! This series of articles will suggest a number of ways you
    can get your hands dirty with F# in a low-risk, incremental way, without affecting
    any critical code.
  prefs: []
  type: TYPE_NORMAL
- en: Series contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here's a list of the twenty six ways so that you can go straight to any one
    that you find particularly interesting.
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 1 - Using F# to explore and develop interactively**'
  prefs: []
  type: TYPE_NORMAL
- en: '[1\. Use F# to explore the .NET framework interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2\. Use F# to test your own code interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3\. Use F# to play with webservices interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4\. Use F# to play with UI''s interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 2 - Using F# for development and devops scripts**'
  prefs: []
  type: TYPE_NORMAL
- en: '[5\. Use FAKE for build and CI scripts](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6\. An F# script to check that a website is responding](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
  prefs: []
  type: TYPE_NORMAL
- en: '[7\. An F# script to convert an RSS feed into CSV](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
  prefs: []
  type: TYPE_NORMAL
- en: '[8\. An F# script that uses WMI to check the stats of a process](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
  prefs: []
  type: TYPE_NORMAL
- en: '[9\. Use F# for configuring and managing the cloud](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 3 - Using F# for testing**'
  prefs: []
  type: TYPE_NORMAL
- en: '[10\. Use F# to write unit tests with readable names](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
  prefs: []
  type: TYPE_NORMAL
- en: '[11\. Use F# to run unit tests programmatically](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
  prefs: []
  type: TYPE_NORMAL
- en: '[12\. Use F# to learn to write unit tests in other ways](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
  prefs: []
  type: TYPE_NORMAL
- en: '[13\. Use FsCheck to write better unit tests](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
  prefs: []
  type: TYPE_NORMAL
- en: '[14\. Use FsCheck to create random dummy data](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
  prefs: []
  type: TYPE_NORMAL
- en: '[15\. Use F# to create mocks](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
  prefs: []
  type: TYPE_NORMAL
- en: '[16\. Use F# to do automated browser testing](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
  prefs: []
  type: TYPE_NORMAL
- en: '[17\. Use F# for Behaviour Driven Development](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 4\. Using F# for database related tasks**'
  prefs: []
  type: TYPE_NORMAL
- en: '[18\. Use F# to replace LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
  prefs: []
  type: TYPE_NORMAL
- en: '[19\. Use F# to unit test stored procedures](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
  prefs: []
  type: TYPE_NORMAL
- en: '[20\. Use FsCheck to generate random database records](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
  prefs: []
  type: TYPE_NORMAL
- en: '[21\. Use F# to do simple ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
  prefs: []
  type: TYPE_NORMAL
- en: '[22\. Use F# to generate SQL Agent scripts](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 5: Other interesting ways of using F#**'
  prefs: []
  type: TYPE_NORMAL
- en: '[23\. Use F# for parsing](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
  prefs: []
  type: TYPE_NORMAL
- en: '[24\. Use F# for diagramming and visualization](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
  prefs: []
  type: TYPE_NORMAL
- en: '[25\. Use F# for accessing web-based data stores](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
  prefs: []
  type: TYPE_NORMAL
- en: '[26\. Use F# for data science and machine learning](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
  prefs: []
  type: TYPE_NORMAL
- en: '[(BONUS) 27: Balance the generation schedule for the UK power station fleet](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're using Visual Studio, you've already got F# installed, so you're ready
    to go! No need to ask anyone's permission.
  prefs: []
  type: TYPE_NORMAL
- en: If you're on a Mac or Linux, you will have to a bit of work, alas (instructions
    for [Mac](http://fsharp.org/use/mac/) and [Linux](http://fsharp.org/use/linux/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to use F# interactively: (1) typing in the F# interactive
    window directly, or (2) creating a F# script file (.FSX) and then evaluating code
    snippets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the F# interactive window in Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Show the window with `Menu > View > Other Windows > F# Interactive`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type an expression, and use double semicolon (`;;`) to tell the interpreter
    you're finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Personally, I prefer to create a script file (`File > New > File` then pick
    "F# script") and type code there, because you get auto-complete and intellisense.
  prefs: []
  type: TYPE_NORMAL
- en: '![](fsharp-script-intellisense.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To run a bit of code, just highlight and right click, or simply do `Alt+Enter`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](fsharp-script-evaluate.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Working with external libraries and NuGet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the code samples reference external libraries which are expected to
    be under the script directory.
  prefs: []
  type: TYPE_NORMAL
- en: You could download or compile these DLLs explicitly, but I think using NuGet
    from the command line is simpler.
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to install Chocolately (from [chocolatey.org](http://chocolatey.org/))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next install the NuGet command line using `cinst nuget.commandline`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, go to your script directory, and install the NuGet package from the
    command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, `nuget install FSharp.Data -o Packages -ExcludeVersion`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you see, I prefer to exclude versions from Nuget packages when using them
    from scripts so that I can update later without breaking existing code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 1: Using F# to explore and develop interactively'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first area where F# is valuable is as a tool to interactively explore .NET
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Before, in order to do this, you might have created unit tests and then stepped
    through them with a debugger to understand what is happening. But with F#, you
    don't need to do that, you can run the code directly.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some examples.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Use F# to explore the .NET framework interactively
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/explore-net-interactively.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: When I'm coding, I often have little questions about how the .NET library works.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here are some questions that I have had recently that I answered
    by using F# interactively:'
  prefs: []
  type: TYPE_NORMAL
- en: Have I got a custom DateTime format string correct?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does XML serialization handle local DateTimes vs. UTC DateTimes?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is `GetEnvironmentVariable` case-sensitive?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these questions can be found in the MSDN documentation, of course, but can
    also answered in seconds by running some simple F# snippets, shown below.
  prefs: []
  type: TYPE_NORMAL
- en: Have I got a custom DateTime format string correct?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I want to use 24 hour clock in a custom format. I know that it's "h", but is
    it upper or lowercase "h"?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How does XML serialization handle local DateTimes vs. UTC DateTimes?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How exactly, does XML serialization work with dates? Let's find out!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: So I can see it uses "Z" for UTC times.
  prefs: []
  type: TYPE_NORMAL
- en: Is GetEnvironmentVariable case-sensitive?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This can be answered with a simple snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The answer is therefore "not case-sensitive".
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Use F# to test your own code interactively
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/explore-own-code-interactively.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: You are not restricted to playing with the .NET libraries, of course. Sometimes
    it can be quite useful to test your own code.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, just reference the DLL and then open the namespace as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'WARNING: in older versions of F#, opening a reference to your DLL will lock
    it so that you can''t compile it! In which case, before recompiling, be sure to
    reset the interactive session to release the lock. In newer versions of F#, [the
    DLL is shadow-copied](https://visualfsharp.codeplex.com/SourceControl/changeset/4c10b32c4f417701f4e6c3284b0a8dadab5a9b98),
    and there is no lock.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Use F# to play with webservices interactively
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/explore-webservices-interactively.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to play with the WebAPI and Owin libraries, you don't need to create
    an executable -- you can do it through script alone!
  prefs: []
  type: TYPE_NORMAL
- en: There is a little bit of setup involved, as you will need a number of library
    DLLs to make this work.
  prefs: []
  type: TYPE_NORMAL
- en: So, assuming you have got the NuGet command line set up (see above), go to your
    script directory, and install the self hosting libraries via `nuget install Microsoft.AspNet.WebApi.OwinSelfHost
    -o Packages -ExcludeVersion`
  prefs: []
  type: TYPE_NORMAL
- en: Once these libraries are in place, you can use the code below as a skeleton
    for a simple WebAPI app.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This example is just to demonstrate that you can use the OWIN and WebApi libraries
    "out-of-the-box".
  prefs: []
  type: TYPE_NORMAL
- en: For a more F# friendly web framework, have a look at [Suave](http://suave.io/)
    or [WebSharper](http://www.websharper.com). There is a lot [more webby stuff at
    fsharp.org](http://fsharp.org/webstacks/).
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Use F# to play with UI's interactively
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/explore-winforms-interactively.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: Another use for F# interactive is to play with UI's while they are running --
    live!
  prefs: []
  type: TYPE_NORMAL
- en: Here's an example of developing a WinForms screen interactively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](fsharp-interactive-ui1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here''s the window after clicking, with the title bar changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](fsharp-interactive-ui2.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's add a FlowLayoutPanel and a button.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the window now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](fsharp-interactive-ui3.png)'
  prefs: []
  type: TYPE_IMG
- en: But the button is too small -- we need to set `AutoSize` to be true.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That's better!
  prefs: []
  type: TYPE_NORMAL
- en: '![](fsharp-interactive-ui4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add a yellow button too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](fsharp-interactive-ui5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But the button is cut off, so let''s change the flow direction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](fsharp-interactive-ui6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But now the yellow button is not the same width as the green button, which
    we can fix with `Dock`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](fsharp-interactive-ui7.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it is really easy to play around with layouts interactively
    this way. Once you're happy with the layout logic, you can convert the code back
    to C# for your real application.
  prefs: []
  type: TYPE_NORMAL
- en: This example is WinForms specific. For other UI frameworks the logic would be
    different, of course.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: So that's the first four suggestions. We're not done yet! The next post will
    cover using F# for development and devops scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Using F# for development and devops scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using F# for development and devops scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This post is a continuation of the series on [low-risk ways to use F# at work](low-risk-ways-to-use-fsharp-at-work1.html).
    I've been suggesting a number of ways you can get your hands dirty with F# in
    a low-risk, incremental way, without affecting any mission critical code.
  prefs: []
  type: TYPE_NORMAL
- en: In this one, we'll talk about using F# for builds and other development and
    devops scripts.
  prefs: []
  type: TYPE_NORMAL
- en: If you're new to F#, you might want to read the sections on [getting started](low-risk-ways-to-use-fsharp-at-work1.html#getting-started)
    and [working with NuGet](low-risk-ways-to-use-fsharp-at-work1.html#working-with-nuget)
    in the previous post.
  prefs: []
  type: TYPE_NORMAL
- en: Series contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s a list of shortcuts to the twenty six ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 1 - Using F# to explore and develop interactively**'
  prefs: []
  type: TYPE_NORMAL
- en: '[1\. Use F# to explore the .NET framework interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2\. Use F# to test your own code interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3\. Use F# to play with webservices interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4\. Use F# to play with UI''s interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 2 - Using F# for development and devops scripts**'
  prefs: []
  type: TYPE_NORMAL
- en: '[5\. Use FAKE for build and CI scripts](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6\. An F# script to check that a website is responding](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
  prefs: []
  type: TYPE_NORMAL
- en: '[7\. An F# script to convert an RSS feed into CSV](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
  prefs: []
  type: TYPE_NORMAL
- en: '[8\. An F# script that uses WMI to check the stats of a process](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
  prefs: []
  type: TYPE_NORMAL
- en: '[9\. Use F# for configuring and managing the cloud](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 3 - Using F# for testing**'
  prefs: []
  type: TYPE_NORMAL
- en: '[10\. Use F# to write unit tests with readable names](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
  prefs: []
  type: TYPE_NORMAL
- en: '[11\. Use F# to run unit tests programmatically](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
  prefs: []
  type: TYPE_NORMAL
- en: '[12\. Use F# to learn to write unit tests in other ways](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
  prefs: []
  type: TYPE_NORMAL
- en: '[13\. Use FsCheck to write better unit tests](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
  prefs: []
  type: TYPE_NORMAL
- en: '[14\. Use FsCheck to create random dummy data](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
  prefs: []
  type: TYPE_NORMAL
- en: '[15\. Use F# to create mocks](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
  prefs: []
  type: TYPE_NORMAL
- en: '[16\. Use F# to do automated browser testing](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
  prefs: []
  type: TYPE_NORMAL
- en: '[17\. Use F# for Behaviour Driven Development](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 4\. Using F# for database related tasks**'
  prefs: []
  type: TYPE_NORMAL
- en: '[18\. Use F# to replace LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
  prefs: []
  type: TYPE_NORMAL
- en: '[19\. Use F# to unit test stored procedures](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
  prefs: []
  type: TYPE_NORMAL
- en: '[20\. Use FsCheck to generate random database records](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
  prefs: []
  type: TYPE_NORMAL
- en: '[21\. Use F# to do simple ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
  prefs: []
  type: TYPE_NORMAL
- en: '[22\. Use F# to generate SQL Agent scripts](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 5: Other interesting ways of using F#**'
  prefs: []
  type: TYPE_NORMAL
- en: '[23\. Use F# for parsing](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
  prefs: []
  type: TYPE_NORMAL
- en: '[24\. Use F# for diagramming and visualization](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
  prefs: []
  type: TYPE_NORMAL
- en: '[25\. Use F# for accessing web-based data stores](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
  prefs: []
  type: TYPE_NORMAL
- en: '[26\. Use F# for data science and machine learning](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
  prefs: []
  type: TYPE_NORMAL
- en: '[(BONUS) 27: Balance the generation schedule for the UK power station fleet](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Using F# for development and devops scripts'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next set of suggestions relates to using F# for the various scripts that
    revolve around development activities: builds, continuous integration, deployment,
    etc.'
  prefs: []
  type: TYPE_NORMAL
- en: For these kinds of small tasks, you need a good scripting language with a REPL.
    You could use PowerShell, or [ScriptCS](http://scriptcs.net/), or even Python.
    But why not give F# a go?
  prefs: []
  type: TYPE_NORMAL
- en: F# feels lightweight like Python (few or no type declarations).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: F# can access .NET libraries, both the core ones and those downloaded via NuGet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: F# has type providers (a big advantage over PowerShell and ScriptCS) that let
    you easily access a wide range of data sources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All this in a concise, type-safe manner, with intellisense too!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using F# in this way will allow you and your fellow developers to use F# code
    to solve practical problems. There shouldn't be any resistance from managers for
    this low-risk approach -- in the worse case you can easily switch to using a different
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: A hidden agenda, of course, is that once your fellow developers get a chance
    to play with F#, they'll be hooked, and you'll be one step closer to using [F#
    end to end](http://colinbul.wordpress.com/2013/02/23/f-end-to-end/)!
  prefs: []
  type: TYPE_NORMAL
- en: What can you do with F# scripts?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the next few sections we''ll see three examples of F# scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[An F# script to check that a website is responding](#dev-website-responding)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An F# script to convert an RSS feed into CSV](#dev-rss-to-csv)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An F# script that uses WMI to check the stats of a process](#dev-wmi-stats)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'But of course, you can integrate F# scripts with almost any .NET library. Here
    are other suggestions for utilities that can be scripted:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple file copying, directory traversal, and archiving (e.g. of log files).
    If you're using .NET 4.5, you can use the new [System.IO.Compression.ZipArchive](http://msdn.microsoft.com/en-us/library/vstudio/hh485720.aspx)
    class to do zipping and unzipping without needing a third party library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing things with JSON, either with a known format (using the [JSON Type Provider](http://fsharp.github.io/FSharp.Data/library/JsonProvider.html))
    or unknown format (using the [JSON parser](http://fsharp.github.io/FSharp.Data/library/JsonValue.html)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with GitHub using [Octokit](http://www.nuget.org/packages/Octokit/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting data from, or manipulating data in, Excel. F# supports COM for doing
    Office automation, or you can use one of the type providers or libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing numerics with [Math.NET](http://numerics.mathdotnet.com/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web crawling, link checking, and screenscraping. The built-in async workflows
    and agents make this kind of "multithreaded" code very easy to write.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduling things with [Quartz.NET](http://www.quartz-scheduler.net/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If these suggestions whet your interest, and you want to use more F#, then check
    out the [F# community projects](http://fsharp.org/community/projects/) page. It's
    a great source of useful libraries being written for F#, and most of them will
    work well with F# scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging F# scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A great thing about using F# scripts is that you don't need to create a whole
    project, nor launch Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'But if you need to debug a script, and you''re not in Visual Studio, what can
    you do? Here are some tips:'
  prefs: []
  type: TYPE_NORMAL
- en: First, you can just use tried and true printing to the console using `printfn`.
    I generally wrap this in a simple `log` function so that I can turn logging on
    or off with a flag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use the [FsEye](http://code.google.com/p/fseye/) tool to inspect and
    watch variables in an interactive session.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, you can still use the Visual Studio debugger. The trick is to [attach
    the debugger](http://stackoverflow.com/a/9337016/1136133) to the fsi.exe process,
    and then you can use [`Debugger.Break`](http://msdn.microsoft.com/en-us/library/vstudio/system.diagnostics.debugger.break)
    to halt at a certain point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5\. Use FAKE for build and CI scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/fake.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with [FAKE](http://fsharp.github.io/FAKE/), which is a cross platform
    build automation tool written in F#, analogous to Ruby's [Rake](http://rake.rubyforge.org/).
  prefs: []
  type: TYPE_NORMAL
- en: FAKE has built-in support for git, NuGet, unit tests, Octopus Deploy, Xamarin
    and more, and makes it easy to develop complex scripts with dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: You can even use it with [TFS to avoid using XAML](http://blog.ctaggart.com/2014/01/code-your-tfs-builds-in-f-instead-of.html).
  prefs: []
  type: TYPE_NORMAL
- en: One reason to use FAKE rather than something like Rake is that you can standardize
    on .NET code throughout your tool chain. In theory, you could use [NAnt](http://en.wikipedia.org/wiki/NAnt)
    instead, but in practice, no thanks, because XML. [PSake](http://github.com/psake/psake)
    is also a possibility, but more complicated than FAKE, I think.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use FAKE to remove dependencies on a particular build server. For
    example, rather than using TeamCity's integration to run tests and other tasks,
    you might consider [doing them in FAKE](http://www.jamescrowley.co.uk/2014/04/22/code-coverage-using-dotcover-and-f-make/)
    instead, which means you can run full builds without having TeamCity installed.
  prefs: []
  type: TYPE_NORMAL
- en: Here's an example of a very simple FAKE script, taken from [a more detailed
    example on the FAKE site](http://fsharp.github.io/FAKE/gettingstarted.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The syntax takes a little getting used to, but that effort is well spent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some further reading on FAKE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Migrating to FAKE](http://bugsquash.blogspot.co.uk/2010/11/migrating-to-fake.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hanselman on FAKE](http://www.hanselman.com/blog/ExploringFAKEAnFBuildSystemForAllOfNET.aspx).
    Many of the comments are from people who are using FAKE actively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A NAnt user tries out FAKE](http://putridparrot.com/blog/trying-fake-out/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6\. An F# script to check that a website is responding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/dev-website-responding.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: This script checks that a website is responding with a 200. This might be useful
    as the basis for a post-deployment smoke test, for example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note that I'm using the Http utilities code in `Fsharp.Data`, which provides
    a nice wrapper around `HttpClient`. [More on HttpUtilities here](http://fsharp.github.io/FSharp.Data/library/Http.html).
  prefs: []
  type: TYPE_NORMAL
- en: 7\. An F# script to convert an RSS feed into CSV
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/dev-rss-to-csv.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: Here's a little script that uses the Xml type provider to parse an RSS feed
    (in this case, [F# questions on StackOverflow](https://stackoverflow.com/questions/tagged/f%23?sort=newest&pageSize=10))
    and convert it to a CSV file for later analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the RSS parsing code is just one line of code! Most of the code is
    concerned with writing the CSV. Yes, I could have used a CSV library (there are
    lots on NuGet) but I thought I'd leave it as is to show you how simple it is.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note that the type provider generates intellisense (shown below) to show you
    the available properties based on the actual contents of the feed. That's very
    cool.
  prefs: []
  type: TYPE_NORMAL
- en: '![](fsharp-xml-dropdown.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The result is something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: For more on the XML type provider, [see the FSharp.Data pages](http://fsharp.github.io/FSharp.Data/library/XmlProvider.html).
  prefs: []
  type: TYPE_NORMAL
- en: 8\. An F# script that uses WMI to check the stats of a process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/dev-wmi-stats.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: If you use Windows, being able to access WMI is very useful. Luckily there is
    an F# type provider for WMI that makes using it easy.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we'll get the system time and also check some stats for a process.
    This could be useful during and after a load test, for example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Again, using a type provider means that you get intellisense (shown below).
    Very useful for the hundreds of WMI options.
  prefs: []
  type: TYPE_NORMAL
- en: '![](fsharp-wmi-dropdown.png)'
  prefs: []
  type: TYPE_IMG
- en: '[More on the WMI type provider here](http://fsprojects.github.io/FSharp.Management/WMIProvider.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Use F# for configuring and managing the cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One area which deserves special mention is using F# for configuring and managing
    cloud services. The [cloud page](http://fsharp.org/cloud/) at fsharp.org has many
    helpful links.
  prefs: []
  type: TYPE_NORMAL
- en: For simple scripting, [Fog](http://dmohl.github.io/Fog/) is a nice wrapper for
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'So for example, to upload a blob, the code is as simple as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'or to add and receive messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: What's especially nice about using F# for this is that you can do it in micro
    scripts -- you don't need any heavy tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I hope you found these suggestions useful. Let me know in the comments if you
    apply them in practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up: using F# for testing.'
  prefs: []
  type: TYPE_NORMAL
- en: Using F# for testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using F# for testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This post is a continuation of the previous series on [low-risk and incremental
    ways to use F# at work](low-risk-ways-to-use-fsharp-at-work1.html) -- how can
    you get your hands dirty with F# in a low-risk, incremental way, without affecting
    any mission critical code?
  prefs: []
  type: TYPE_NORMAL
- en: In this one, we'll talk about using F# for testing.
  prefs: []
  type: TYPE_NORMAL
- en: Series contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before moving on to the content of the post, here''s the full list of the twenty
    six ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 1 - Using F# to explore and develop interactively**'
  prefs: []
  type: TYPE_NORMAL
- en: '[1\. Use F# to explore the .NET framework interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2\. Use F# to test your own code interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3\. Use F# to play with webservices interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4\. Use F# to play with UI''s interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 2 - Using F# for development and devops scripts**'
  prefs: []
  type: TYPE_NORMAL
- en: '[5\. Use FAKE for build and CI scripts](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6\. An F# script to check that a website is responding](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
  prefs: []
  type: TYPE_NORMAL
- en: '[7\. An F# script to convert an RSS feed into CSV](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
  prefs: []
  type: TYPE_NORMAL
- en: '[8\. An F# script that uses WMI to check the stats of a process](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
  prefs: []
  type: TYPE_NORMAL
- en: '[9\. Use F# for configuring and managing the cloud](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 3 - Using F# for testing**'
  prefs: []
  type: TYPE_NORMAL
- en: '[10\. Use F# to write unit tests with readable names](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
  prefs: []
  type: TYPE_NORMAL
- en: '[11\. Use F# to run unit tests programmatically](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
  prefs: []
  type: TYPE_NORMAL
- en: '[12\. Use F# to learn to write unit tests in other ways](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
  prefs: []
  type: TYPE_NORMAL
- en: '[13\. Use FsCheck to write better unit tests](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
  prefs: []
  type: TYPE_NORMAL
- en: '[14\. Use FsCheck to create random dummy data](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
  prefs: []
  type: TYPE_NORMAL
- en: '[15\. Use F# to create mocks](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
  prefs: []
  type: TYPE_NORMAL
- en: '[16\. Use F# to do automated browser testing](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
  prefs: []
  type: TYPE_NORMAL
- en: '[17\. Use F# for Behaviour Driven Development](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 4\. Using F# for database related tasks**'
  prefs: []
  type: TYPE_NORMAL
- en: '[18\. Use F# to replace LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
  prefs: []
  type: TYPE_NORMAL
- en: '[19\. Use F# to unit test stored procedures](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
  prefs: []
  type: TYPE_NORMAL
- en: '[20\. Use FsCheck to generate random database records](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
  prefs: []
  type: TYPE_NORMAL
- en: '[21\. Use F# to do simple ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
  prefs: []
  type: TYPE_NORMAL
- en: '[22\. Use F# to generate SQL Agent scripts](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 5: Other interesting ways of using F#**'
  prefs: []
  type: TYPE_NORMAL
- en: '[23\. Use F# for parsing](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
  prefs: []
  type: TYPE_NORMAL
- en: '[24\. Use F# for diagramming and visualization](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
  prefs: []
  type: TYPE_NORMAL
- en: '[25\. Use F# for accessing web-based data stores](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
  prefs: []
  type: TYPE_NORMAL
- en: '[26\. Use F# for data science and machine learning](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
  prefs: []
  type: TYPE_NORMAL
- en: '[(BONUS) 27: Balance the generation schedule for the UK power station fleet](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Part 3 - Using F# for testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to start writing useful code in F# without touching core code, writing
    tests is a great way to start.
  prefs: []
  type: TYPE_NORMAL
- en: Not only does F# have a more compact syntax, it also has many nice features,
    such as the "double backtick" syntax, that make test names much more readable.
  prefs: []
  type: TYPE_NORMAL
- en: As with all of the suggestions in this series, I think this is a low risk option.
    Test methods tend to be short, so almost anyone will be able to read them without
    having to understand F# deeply. In the worst-case, you can easily port them back
    to C#.
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Use F# to write unit tests with readable names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TestWithNUnit.fs).*'
  prefs: []
  type: TYPE_NORMAL
- en: Just like C#, F# can be used to write standard unit tests using the standard
    frameworks like NUnit, MsUnit, xUnit, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Here's an example of a test class written for use with NUnit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there's a class with the `TestFixture` attribute, and a public
    void method with the `Test` attribute. All very standard.
  prefs: []
  type: TYPE_NORMAL
- en: But there are some nice extras you get when you use F# rather than C#. First
    you can use the double backtick syntax to create more readable names, and second,
    you can use `let` bound functions in modules rather than classes, which simplifies
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The double backtick syntax makes the test results much easier to read. Here
    is the output of the test with a standard class name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'vs. the output using the more friendly name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: So if you want to write test names that are accessible to non-programmers, give
    F# a go!
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Use F# to run unit tests programmatically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often, you might want to run the unit tests programmatically. This can be for
    various reasons, such as using custom filters, or doing custom logging, or not
    wanting to install NUnit on test machines.
  prefs: []
  type: TYPE_NORMAL
- en: One simple way to do this is to use the [Fuchu library](http://github.com/mausch/Fuchu)
    which lets you organize tests directly, especially parameterized tests, without
    any complex test attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You can run these tests directly in F# interactive using code like this: `run
    simpleTest`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also combine these tests into one or more lists, or hierarchical lists
    of lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '*The code above is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/OrganizeTestsWithFuchu.fs).*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, with Fuchu, the test assembly becomes its own test runner. Just make
    the assembly a console app instead of a library and add this code to the `program.fs`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[More on Fuchu here](http://bugsquash.blogspot.co.uk/2012/06/fuchu-functional-test-library-for-net.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the NUnit test runner
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do need to use an existing test runner (such as the NUnit one), then
    it's very simple to put together a simple script to do this.
  prefs: []
  type: TYPE_NORMAL
- en: I've made a little example, below, using the `Nunit.Runners` package.
  prefs: []
  type: TYPE_NORMAL
- en: All right, this might not be the most exciting use of F#, but it does show off
    F#'s "object expression" syntax to create the `NUnit.Core.EventListener` interface,
    so I thought I'd leave it in as a demo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '*The code above is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/nunit-test-runner.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Use F# to learn to write unit tests in other ways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [unit test code above](#test-nunit) is familiar to all of us, but there
    are other ways to write tests. Learning to code in different styles is a great
    way to add some new techniques to your repertoire and expand your thinking in
    general, so let's have a quick look at some of them.
  prefs: []
  type: TYPE_NORMAL
- en: First up is [FsUnit](http://github.com/fsharp/FsUnit), which replaces `Assert`
    with a more fluent and idiomatic approach (natural language and piping).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '*The above code is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TestWithFsUnit.fs).*'
  prefs: []
  type: TYPE_NORMAL
- en: A very different approach is used by [Unquote](http://code.google.com/p/unquote/).
    The Unquote approach is to wrap any F# expression in [F# quotations](http://msdn.microsoft.com/en-us/library/dd233212.aspx)
    and then evaluate it. If a test expression throws an exception, the test will
    fail and print not just the exception, but each step up to the point of the exception.
    This information could potentially give you much more insight in why the assert
    fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a very simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: There are also a number of shortcut operators such as `=?` and `>?` that allow
    you to write your tests even more simply -- no asserts anywhere!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '*The above code is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TestWithUnquote.fs).*'
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Use FsCheck to write better unit tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TestWithFsCheck.fs).*'
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that we have written a function that converts numbers to Roman numerals,
    and we want to create some test cases for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We might start writing tests like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: But the problem with this approach is that it only tests a very specific example.
    There might be some edge cases that we haven't thought of.
  prefs: []
  type: TYPE_NORMAL
- en: A much better approach is to find something that must be true for *all* cases.
    Then we can create a test that checks that this something (a "property") is true
    for all cases, or at least a large random subset.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the Roman numeral example, we can say that one property is "all
    Roman numerals have at most one 'V' character" or "all Roman numerals have at
    most three 'X' characters". We can then construct tests that check this property
    is indeed true.
  prefs: []
  type: TYPE_NORMAL
- en: This is where [FsCheck](http://github.com/fsharp/FsCheck) can help. FsCheck
    is a framework designed for exactly this kind of property-based testing. It's
    written in F# but it works equally well for testing C# code.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's see how we'd use FsCheck for our Roman numerals.
  prefs: []
  type: TYPE_NORMAL
- en: First, we define some properties that we expect to hold for all Roman numerals.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place we create tests that:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a property checker function suitable for passing to FsCheck.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `Check.Quick` function to generate hundreds of random test cases and
    send them into that property checker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Here are the results of the test. You can see that 100 random numbers have been
    tested, not just one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'If we changed the test to be "Test that roman numerals have no more than TWO
    Xs", then the test result is false, and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In other words, after generating 33 different inputs, FsCheck has correctly
    found a number (30) that does not meet the required property. Very nice!
  prefs: []
  type: TYPE_NORMAL
- en: Using FsCheck in practice
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not all situations have properties that can be tested this way, but you might
    find that it is more common than you think.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, property based testing is especially useful for "algorithmic"
    code. Here a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: If you reverse a list and then reverse it again, you get the original list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you factorize an integer and then multiply the factors, you get the original
    number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'But even in Boring Line-Of-Business Applications?, you may find that property
    based testing has a place. For example, here are some things that can be expressed
    as properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Roundtripping**. For example, if you save a record to a database and then
    reload it, the record''s fields should be unchanged. Similarly, if you serialize
    and then deserialize something, you should get the original thing back.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invariants**. If you add products to a sales order, the sum of the individual
    lines should be the same as the order total. Or, the sum of word counts for each
    page should be the sum of the word count for the entire book. More generally,
    if you calculate things via two different paths, you should get the same answer
    ([monoid homomorphisms!](monoids-part2.html#monoid-homomorphism))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rounding**. If you add ingredients to a recipe, the sum of the ingredient
    percentages (with 2 place precision) should always be exactly 100%. Similar rules
    are needed for most partitioning logic, such as shares, tax calculations, etc.
    (e.g. [the "share pie" example in the DDD book](http://books.google.co.uk/books?id=xColAAPGubgC&pg=PA198&lpg=PA198&dq=%22domain+driven+design%22+%22share+pie%22&source=bl&ots=q9-HdfTK4p&sig=IUnHGFUdwQv2p0tuWVbrqqwdAk4&hl=en&sa=X&ei=IdFbU5bLK8SMOPLFgfgC&ved=0CC8Q6AEwAA#v=onepage&q=%22domain%20driven%20design%22%20%22share%20pie%22&f=false)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making sure you get the rounding right in situations like this is where FsCheck
    shines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See this [SO question](http://stackoverflow.com/questions/2446242/difficulty-thinking-of-properties-for-fscheck?rq=1)
    for other ideas.
  prefs: []
  type: TYPE_NORMAL
- en: FsCheck is also very useful for doing refactoring, because once you trust that
    the tests are extremely thorough, you can confidently work on tweaks and optimization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some more links for FsCheck:'
  prefs: []
  type: TYPE_NORMAL
- en: I have written [an introduction to property-based testing](http://fsharpforfunandprofit.com/posts/property-based-testing/)
    and [a follow up on choosing properties for property-based testing](http://fsharpforfunandprofit.com/posts/property-based-testing-2/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[FsCheck documentation](http://github.com/fsharp/FsCheck/blob/master/Docs/Documentation.md).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An article on using FsCheck in practice](http://www.clear-lines.com/blog/post/FsCheck-and-XUnit-is-The-Bomb.aspx).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[My post on the Roman Numerals kata that mentions FsCheck](roman-numeral-kata.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more on property-based testing in general, look for articles and videos
    about QuickCheck.
  prefs: []
  type: TYPE_NORMAL
- en: '[Intro to QuickCheck by John Hughes](http://www.cs.utexas.edu/~ragerdl/fmcad11/slides/tutorial-a.pdf)
    (PDF)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fascinating talk on [using QuickCheck to find bugs in Riak](https://skillsmatter.com/skillscasts/4505-quickchecking-riak)
    ([another version](http://www.cs.utexas.edu/~ragerdl/fmcad11/slides/tutorial-a.pdf))
    (videos)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 14\. Use FsCheck to create random dummy data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/RandomDataWithFsCheck.fs).*'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to doing testing, FsCheck can be used to create random dummy data.
  prefs: []
  type: TYPE_NORMAL
- en: For example, below is the complete code for generating random customers.
  prefs: []
  type: TYPE_NORMAL
- en: When you combine this with the SQL Type Provider (discussed later) or CSV writer,
    you can easily generate thousands of rows of random customers in a database or
    CSV file. Or you can use it with the JSON type provider to call a web service
    for testing validation logic, or load testing.
  prefs: []
  type: TYPE_NORMAL
- en: '*(Dont worry about not understanding the code -- this sample is just to show
    you how easy it is!)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is a sampling of the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 15\. Use F# to create mocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're using F# to write test cases for code written in C#, you may want
    to create mocks and stubs for interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: In C# you might use [Moq](http://github.com/Moq/moq4) or [NSubstitute](http://nsubstitute.github.io/).
    In F# you can use object expressions to create interfaces directly, or the [Foq
    library](http://foq.codeplex.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Both are easy to do, and in a way that is similar to Moq.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s some Moq code in C#:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the equivalent Foq code in F#:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'For more on mocking in F#, see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[F# as a Unit Testing Language](http://trelford.com/blog/post/fstestlang.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mocking with Foq](http://trelford.com/blog/post/Foq.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing and mocking your C# code with F#](http://www.clear-lines.com/blog/post/Testing-and-mocking-your-C-sharp-code-with-F-sharp.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And you need to mock external services such as SMTP over the wire, there is
    an interesting tool called [mountebank](http://www.mbtest.org/), which is [easy
    to interact with in F#](http://nikosbaxevanis.com/blog/2014/04/22/mountebank-mocks-with-f-number/).
  prefs: []
  type: TYPE_NORMAL
- en: 16\. Use F# to do automated browser testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to unit tests, you should be doing some kind of automated web testing,
    driving the browser with [Selenium](http://docs.seleniumhq.org/) or [WatiN](http://watin.sourceforge.net/).
  prefs: []
  type: TYPE_NORMAL
- en: But what language should you write the automation in? Ruby? Python? C#? I think
    you know the answer!
  prefs: []
  type: TYPE_NORMAL
- en: To make your life even easier, try using [Canopy](http://lefthandedgoat.github.io/canopy/),
    a web testing framework built on top of Selenium and written in F#. Their site
    claims *"Quick to learn. Even if you've never done UI Automation, and don't know
    F#."*, and I'm inclined to believe them.
  prefs: []
  type: TYPE_NORMAL
- en: Below is a snippet taken from the Canopy site. As you can see, the code is simple
    and easy to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Also, FAKE integrates with Canopy, so you can [run automated browser tests as
    part of a CI build](http://fsharp.github.io/FAKE/canopy.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 17\. Use F# for Behaviour Driven Development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TickSpec.StepDefinitions.fs).*'
  prefs: []
  type: TYPE_NORMAL
- en: If you're not familiar with Behaviour Driven Development (BDD), the idea is
    that you express requirements in a way that is both human-readable and *executable*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The standard format (Gherkin) for writing these tests uses the Given/When/Then
    syntax -- here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If you are using BDD already with .NET, you're probably using [SpecFlow](http://www.specflow.org/)
    or similar.
  prefs: []
  type: TYPE_NORMAL
- en: You should consider using [TickSpec](http://tickspec.codeplex.com/) instead
    because, as with all things F#, the syntax is much more lightweight.
  prefs: []
  type: TYPE_NORMAL
- en: For example, here's the full implementation of the scenario above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The C# equivalent has a lot more clutter, and the lack of double backtick syntax
    really hurts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '*Examples taken from the [TickSpec](http://tickspec.codeplex.com/) site.*'
  prefs: []
  type: TYPE_NORMAL
- en: Summary of testing in F#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can of course combine all the test techniques we''ve seen so far ([as this
    slide deck demonstrates](http://www.slideshare.net/bartelink/testing-cinfdublinaltnet2013)):'
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests (FsUnit, Unquote) and property-based tests (FsCheck).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated acceptance tests (or at least a smoke test) written in BDD (TickSpec)
    driven by browser automation (Canopy).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both types of tests run on every build (with FAKE).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's a lot of advice on test automation out there, and you'll find that it
    is easy to port concepts from other languages to these F# tools. Have fun!
  prefs: []
  type: TYPE_NORMAL
- en: Using F# for database related tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using F# for database related tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This post is a continuation of the previous series on [low-risk and incremental
    ways to use F# at work](low-risk-ways-to-use-fsharp-at-work1.html).
  prefs: []
  type: TYPE_NORMAL
- en: In this one, we'll see how F# can be unexpectedly helpful when it comes to database
    related tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Series contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before moving on to the content of the post, here''s the full list of the twenty
    six ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 1 - Using F# to explore and develop interactively**'
  prefs: []
  type: TYPE_NORMAL
- en: '[1\. Use F# to explore the .NET framework interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2\. Use F# to test your own code interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3\. Use F# to play with webservices interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4\. Use F# to play with UI''s interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 2 - Using F# for development and devops scripts**'
  prefs: []
  type: TYPE_NORMAL
- en: '[5\. Use FAKE for build and CI scripts](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6\. An F# script to check that a website is responding](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
  prefs: []
  type: TYPE_NORMAL
- en: '[7\. An F# script to convert an RSS feed into CSV](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
  prefs: []
  type: TYPE_NORMAL
- en: '[8\. An F# script that uses WMI to check the stats of a process](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
  prefs: []
  type: TYPE_NORMAL
- en: '[9\. Use F# for configuring and managing the cloud](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 3 - Using F# for testing**'
  prefs: []
  type: TYPE_NORMAL
- en: '[10\. Use F# to write unit tests with readable names](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
  prefs: []
  type: TYPE_NORMAL
- en: '[11\. Use F# to run unit tests programmatically](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
  prefs: []
  type: TYPE_NORMAL
- en: '[12\. Use F# to learn to write unit tests in other ways](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
  prefs: []
  type: TYPE_NORMAL
- en: '[13\. Use FsCheck to write better unit tests](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
  prefs: []
  type: TYPE_NORMAL
- en: '[14\. Use FsCheck to create random dummy data](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
  prefs: []
  type: TYPE_NORMAL
- en: '[15\. Use F# to create mocks](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
  prefs: []
  type: TYPE_NORMAL
- en: '[16\. Use F# to do automated browser testing](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
  prefs: []
  type: TYPE_NORMAL
- en: '[17\. Use F# for Behaviour Driven Development](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 4\. Using F# for database related tasks**'
  prefs: []
  type: TYPE_NORMAL
- en: '[18\. Use F# to replace LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
  prefs: []
  type: TYPE_NORMAL
- en: '[19\. Use F# to unit test stored procedures](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
  prefs: []
  type: TYPE_NORMAL
- en: '[20\. Use FsCheck to generate random database records](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
  prefs: []
  type: TYPE_NORMAL
- en: '[21\. Use F# to do simple ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
  prefs: []
  type: TYPE_NORMAL
- en: '[22\. Use F# to generate SQL Agent scripts](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 5: Other interesting ways of using F#**'
  prefs: []
  type: TYPE_NORMAL
- en: '[23\. Use F# for parsing](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
  prefs: []
  type: TYPE_NORMAL
- en: '[24\. Use F# for diagramming and visualization](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
  prefs: []
  type: TYPE_NORMAL
- en: '[25\. Use F# for accessing web-based data stores](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
  prefs: []
  type: TYPE_NORMAL
- en: '[26\. Use F# for data science and machine learning](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
  prefs: []
  type: TYPE_NORMAL
- en: '[(BONUS) 27: Balance the generation schedule for the UK power station fleet](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Part 4\. Using F# for database related tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This next group of suggestions is all about working with databases, and MS SQL
    Server in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Relational databases are a critical part of most applications, but most teams
    do not approach the management of these in the same way as with other development
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: For example, how many teams do you know that unit test their stored procedures?
  prefs: []
  type: TYPE_NORMAL
- en: Or their ETL jobs?
  prefs: []
  type: TYPE_NORMAL
- en: Or generate T-SQL admin scripts and other boilerplate using a non-SQL scripting
    language that's stored in source control?
  prefs: []
  type: TYPE_NORMAL
- en: Here's where F# can shine over other scripting languages, and even over T-SQL
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: The database type providers in F# give you the power to create simple, short
    scripts for testing and admin, with the bonus that...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scripts are *type-checked* and will fail at compile time if the database
    schema changes, which means that...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The whole process works really well with builds and continuous integration processes,
    which in turn means that...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have really high confidence in your database related code!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll look at a few examples to demonstrate what I''m talking about:'
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing stored procedures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using FsCheck to generate random records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing simple ETL with F#
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating SQL Agent scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting set up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/).
    In there, there are some SQL scripts to create the sample database, tables and
    stored procs that I'll use in these examples.
  prefs: []
  type: TYPE_NORMAL
- en: To run the examples, then, you'll need SQL Express or SQL Server running locally
    or somewhere accessible, with the relevant setup scripts having been run.
  prefs: []
  type: TYPE_NORMAL
- en: Which type provider?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a number of SQL Type Providers for F# -- see [the fsharp.org Data
    Access page](http://fsharp.org/data-access/). For these examples, I'm going to
    use the [`SqlDataConnection` type provider](http://msdn.microsoft.com/en-us/library/hh361033.aspx),
    which is part of the `FSharp.Data.TypeProviders` DLL. It uses [SqlMetal](http://msdn.microsoft.com/en-us/library/bb386987.aspx)
    behind the scenes and so only works with SQL Server databases.
  prefs: []
  type: TYPE_NORMAL
- en: The [SQLProvider](http://fsprojects.github.io/SQLProvider/) project is another
    good choice -- it supports MySql, SQLite and other non-Microsoft databases.
  prefs: []
  type: TYPE_NORMAL
- en: 18\. Use F# to replace LINQPad
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/FsharpInsteadOfLinqpad.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: '[LINQPad](http://www.linqpad.net/) is a great tool for doing queries against
    databases, and is also a general scratchpad for C#/VB/F# code.'
  prefs: []
  type: TYPE_NORMAL
- en: You can use F# interactive to do many of the same things -- you get queries,
    autocompletion, etc., just like LINQPad.
  prefs: []
  type: TYPE_NORMAL
- en: For example, here's one that counts customers with a certain email domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to see what SQL code is generated, you can turn logging on, of
    course:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The logged output for this query is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also do more complicated things, such as using subqueries. Here''s
    an example from [MSDN](http://msdn.microsoft.com/en-us/library/hh225374.aspx):'
  prefs: []
  type: TYPE_NORMAL
- en: Note that, as befitting a functional approach, queries are nice and composable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: And if the SQL engine doesn't support certain functions such as regexes, and
    assuming the size of the data is not too large, you can just stream the data out
    and do the processing in F#.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the code above, the nice thing about doing the processing
    in F# is that you can define helper functions separately and connect them together
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: 19\. Use F# to unit test stored procedures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/TestUpsertCustomer.fs).*'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at how we can use the type provider to make creating unit tests
    for stored procs really easy.
  prefs: []
  type: TYPE_NORMAL
- en: First, I create a helper module (which I'll call `DbLib`) to set up the connection
    and to provide shared utility functions such as `resetDatabase`, which will be
    called before each test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Now I can write a unit test, using NUnit say, just like any other unit test.
  prefs: []
  type: TYPE_NORMAL
- en: Assume that we have `Customer` table, and a sproc called `up_Customer_Upsert`
    that either inserts a new customer or updates an existing one, depending on whether
    the passed in customer id is null or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what a test looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Note that, because the setup is expensive, I do multiple asserts in the test.
    This could be refactored if you find this too ugly!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s one that tests that updates work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'And one more, that checks for exceptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the whole process is very straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: These tests can be compiled and run as part of the continuous integration scripts.
    And what is great is that, if the database schema gets out of sync with the code,
    then the tests will fail to even compile!
  prefs: []
  type: TYPE_NORMAL
- en: 20\. Use FsCheck to generate random database records
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/InsertDummyData.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: As I showed in an earlier example, you can use FsCheck to generate random data.
    In this case we'll use it to generate random records in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say we have a `CustomerImport` table, defined as below. (We'll use this
    table in the next section on ETL)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Using the same code as before, we can then generate random instances of `CustomerImport`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: So far so good.
  prefs: []
  type: TYPE_NORMAL
- en: Now we get to the `age` column, which is nullable. This means we can't generate
    random `int`s, but instead we have to generate random `Nullable<int>`s. This is
    where type checking is really useful -- the compiler has forced us to take that
    into account. So to make sure we cover all the bases, we'll generate a null value
    one time out of twenty.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Putting it altogether...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Once we have a random generator, we can fetch as many records as we like, and
    insert them using the type provider.
  prefs: []
  type: TYPE_NORMAL
- en: In the code below, we'll generate 10,000 records, hitting the database in batches
    of 1,000 records.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let's do it and time it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: It's not as fast as using BCP, but it is plenty adequate for testing. For example,
    it only takes a few seconds to create the 10,000 records above.
  prefs: []
  type: TYPE_NORMAL
- en: I want to stress that this is a *single standalone script*, not a heavy binary,
    so it is really easy to tweak and run on demand.
  prefs: []
  type: TYPE_NORMAL
- en: And of course you get all the goodness of a scripted approach, such as being
    able to store it in source control, track changes, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 21\. Use F# to do simple ETL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/EtlExample.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: Say that you need to transfer data from one table to another, but it is not
    a totally straightforward copy, as you need to do some mapping and transformation.
  prefs: []
  type: TYPE_NORMAL
- en: This is a classic ETL (Extract/Transform/Load) situation, and most people will
    reach for [SSIS](http://en.wikipedia.org/wiki/SQL_Server_Integration_Services).
  prefs: []
  type: TYPE_NORMAL
- en: But for some situations, such as one off imports, and where the volumes are
    not large, you could use F# instead. Let's have a look.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say that we are importing data into a master table that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'But the system we''re importing from has a different format, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'As part of this import then, we''re going to have to:'
  prefs: []
  type: TYPE_NORMAL
- en: Concatenate the `FirstName` and `LastName` columns into one `Name` column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Map the `EmailAddress` column to the `Email` column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculate a `Birthdate` given an `Age`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'm going to skip the `CustomerId` for now -- hopefully we aren't using IDENTITY
    columns in practice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first step is to define a function that maps source records to target records.
    In this case, we'll call it `makeTargetCustomer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s some code for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: With this transform in place, the rest of the code is easy, we just just read
    from the source and write to the target.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Because these are sequence operations, only one record at a time is in memory
    (excepting the LINQ submit buffer), so even large data sets can be processed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see it in use, first insert a number of records using the dummy data script
    just discussed, and then run the transfer as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Again, it only takes a few seconds to transfer 10,000 records.
  prefs: []
  type: TYPE_NORMAL
- en: And again, this is a *single standalone script* -- it's a very lightweight way
    to create simple ETL jobs.
  prefs: []
  type: TYPE_NORMAL
- en: 22\. Use F# to generate SQL Agent scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the last database related suggestion, let me suggest the idea of generating
    SQL Agent scripts from code.
  prefs: []
  type: TYPE_NORMAL
- en: In any decent sized shop you may have hundreds or thousands of SQL Agent jobs.
    In my opinion, these should all be stored as script files, and loaded into the
    database when provisioning/building the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alas, there are often subtle differences between dev, test and production environments:
    connection strings, authorization, alerts, log configuration, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: 'That naturally leads to the problem of trying to keep three different copies
    of a script around, which in turn makes you think: why not have *one* script and
    parameterize it for the environment?'
  prefs: []
  type: TYPE_NORMAL
- en: But now you are dealing with lots of ugly SQL code! The scripts that create
    SQL agent jobs are typically hundreds of lines long and were not really designed
    to be maintained by hand.
  prefs: []
  type: TYPE_NORMAL
- en: F# to the rescue!
  prefs: []
  type: TYPE_NORMAL
- en: In F#, it's really easy to create some simple record types that store all the
    data you need to generate and configure a job.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the script below:'
  prefs: []
  type: TYPE_NORMAL
- en: I created a union type called `Step` that could store a `Package`, `Executable`,
    `Powershell` and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these step types in turn have their own specific properties, so that
    a `Package` has a name and variables, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `JobInfo` consists of a name plus a list of `Step`s.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An agent script is generated from a `JobInfo` plus a set of global properties
    associated with an environment, such as the databases, shared folder locations,
    etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: I can't share the actual F# code, but I think you get the idea. It's quite simple
    to create.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have these .FSX files, we can generate the real SQL Agent scripts en-masse
    and then deploy them to the appropriate servers.
  prefs: []
  type: TYPE_NORMAL
- en: Below is an example of a SQL Agent script that might be generated automatically
    from the .FSX file.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it is a nicely laid out and formatted T-SQL script. The idea
    is that a DBA can review it and be confident that no magic is happening, and thus
    be willing to accept it as input.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, it would be risky to maintain scripts like. Editing the SQL
    code directly could be risky. Better to use type-checked (and more concise) F#
    code than untyped T-SQL!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I hope that this set of suggestions has thrown a new light on what F# can be
    used for.
  prefs: []
  type: TYPE_NORMAL
- en: In my opinion, the combination of concise syntax, lightweight scripting (no
    binaries) and SQL type providers makes F# incredibly useful for database related
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Please leave a comment and let me know what you think.
  prefs: []
  type: TYPE_NORMAL
- en: Other interesting ways of using F# at work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Other interesting ways of using F# at work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This post is the conclusion of the series on [low-risk and incremental ways
    to use F# at work](low-risk-ways-to-use-fsharp-at-work1.html).
  prefs: []
  type: TYPE_NORMAL
- en: To wrap up, we'll look at a few more ways in which F# can help you with various
    development tasks around the edges, without impacting any core or mission critical
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Series contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before moving on to the content of the post, here''s the full list of the twenty
    six ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 1 - Using F# to explore and develop interactively**'
  prefs: []
  type: TYPE_NORMAL
- en: '[1\. Use F# to explore the .NET framework interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2\. Use F# to test your own code interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3\. Use F# to play with webservices interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4\. Use F# to play with UI''s interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 2 - Using F# for development and devops scripts**'
  prefs: []
  type: TYPE_NORMAL
- en: '[5\. Use FAKE for build and CI scripts](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6\. An F# script to check that a website is responding](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
  prefs: []
  type: TYPE_NORMAL
- en: '[7\. An F# script to convert an RSS feed into CSV](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
  prefs: []
  type: TYPE_NORMAL
- en: '[8\. An F# script that uses WMI to check the stats of a process](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
  prefs: []
  type: TYPE_NORMAL
- en: '[9\. Use F# for configuring and managing the cloud](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 3 - Using F# for testing**'
  prefs: []
  type: TYPE_NORMAL
- en: '[10\. Use F# to write unit tests with readable names](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
  prefs: []
  type: TYPE_NORMAL
- en: '[11\. Use F# to run unit tests programmatically](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
  prefs: []
  type: TYPE_NORMAL
- en: '[12\. Use F# to learn to write unit tests in other ways](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
  prefs: []
  type: TYPE_NORMAL
- en: '[13\. Use FsCheck to write better unit tests](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
  prefs: []
  type: TYPE_NORMAL
- en: '[14\. Use FsCheck to create random dummy data](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
  prefs: []
  type: TYPE_NORMAL
- en: '[15\. Use F# to create mocks](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
  prefs: []
  type: TYPE_NORMAL
- en: '[16\. Use F# to do automated browser testing](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
  prefs: []
  type: TYPE_NORMAL
- en: '[17\. Use F# for Behaviour Driven Development](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 4\. Using F# for database related tasks**'
  prefs: []
  type: TYPE_NORMAL
- en: '[18\. Use F# to replace LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
  prefs: []
  type: TYPE_NORMAL
- en: '[19\. Use F# to unit test stored procedures](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
  prefs: []
  type: TYPE_NORMAL
- en: '[20\. Use FsCheck to generate random database records](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
  prefs: []
  type: TYPE_NORMAL
- en: '[21\. Use F# to do simple ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
  prefs: []
  type: TYPE_NORMAL
- en: '[22\. Use F# to generate SQL Agent scripts](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 5: Other interesting ways of using F#**'
  prefs: []
  type: TYPE_NORMAL
- en: '[23\. Use F# for parsing](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
  prefs: []
  type: TYPE_NORMAL
- en: '[24\. Use F# for diagramming and visualization](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
  prefs: []
  type: TYPE_NORMAL
- en: '[25\. Use F# for accessing web-based data stores](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
  prefs: []
  type: TYPE_NORMAL
- en: '[26\. Use F# for data science and machine learning](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
  prefs: []
  type: TYPE_NORMAL
- en: '[(BONUS) 27: Balance the generation schedule for the UK power station fleet](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 5: Other ways of using F# outside the core'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This last group of suggestions is a bit of a mish-mash I'm afraid. These are
    things that didn't fit into earlier posts, mostly concerning using F# for analysis
    and data processing.
  prefs: []
  type: TYPE_NORMAL
- en: 23\. Use F# for parsing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is surprising how often you need to parse something in the course of routine
    development: splitting strings at spaces, reading a CSV file, doing substitutions
    in a template, finding HTML links for a web crawler, parsing a query string in
    a URI, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: F#, being an ML-derived language, is ideal for parsing tasks of all kinds, from
    simple regexes to full fledged parsers.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are many off-the-shelf libraries for common tasks, but sometimes
    you need to write your own. A good example of this is TickSpec, the BDD framework
    that [we saw earlier](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd).
  prefs: []
  type: TYPE_NORMAL
- en: TickSpec needs to parse the so-called "Gherkin" format of Given/When/Then. Rather
    than create a dependency on another library, I imagine that it was easier (and
    more fun) for [Phil](http://trelford.com/blog/post/TickSpec.aspx) to write his
    own parser in a few hundred lines. You can see part of the [source code here](http://tickspec.codeplex.com/SourceControl/latest#TickSpec/LineParser.fs).
  prefs: []
  type: TYPE_NORMAL
- en: Another situation where it might be worth writing your own parser is when you
    have some complex system, such as a rules engine, which has a horrible XML configuration
    format. Rather than manually editing the configuration, you could create a very
    simple domain specific language (DSL) that is parsed and then converted to the
    complex XML.
  prefs: []
  type: TYPE_NORMAL
- en: In [his book on DSLs](http://ptgmedia.pearsoncmg.com/images/9780321712943/samplepages/0321712943.pdf),
    Martin Fowler gives an example of this, [a DSL that is parsed to create a state
    machine](http://www.informit.com/articles/article.aspx?p=1592379&seqNum=3). And
    here is an [F# implementation](http://www.fssnip.net/5h) of that DSL.
  prefs: []
  type: TYPE_NORMAL
- en: For more complicating parsing tasks, I highly recommend using [FParsec](http://www.quanttec.com/fparsec/),
    which is perfectly suited for this kind of thing. For example, it has been used
    for parsing [search queries for FogCreek](http://blog.fogcreek.com/fparsec/),
    [CSV files](http://blog.jb55.com/post/4247991875/f-csv-parsing-with-fparsec),
    [chess notation](http://github.com/iigorr/pgn.net), and a [custom DSL for load
    testing scenarios](http://www.frenk.com/2012/01/real-world-f-my-experience-part-two/).
  prefs: []
  type: TYPE_NORMAL
- en: 24\. Use F# for diagramming and visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have parsed or analyzed something, it is always nice if you can display
    the results visually, rather than as tables full of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in a [previous post](cycles-and-modularity-in-the-wild.html) I
    used F# in conjunction with [GraphViz](http://www.graphviz.org/) to create diagrams
    of dependency relationships. You can see a sample below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](tickspec_svg.png)'
  prefs: []
  type: TYPE_IMG
- en: The code to generate the diagram itself was short, only about 60 lines, which
    you can [see here](http://gist.github.com/swlaschin/5742974#file-type-dependency-graph-fsx-L428).
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to GraphViz, you could also consider using [FSGraph](http://github.com/piotrosz/FSGraph).
  prefs: []
  type: TYPE_NORMAL
- en: 'For more mathematical or data-centric visualizations, there are a number of
    good libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[FSharp.Charting](http://fsharp.github.io/FSharp.Charting/) for desktop visualizations
    that is well integrated with F# scripting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[FsPlot](http://github.com/TahaHachana/FsPlot) for interactive visualizations
    in HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[VegaHub](http://github.com/panesofglass/VegaHub), an F# library for working
    with [Vega](http://trifacta.github.io/vega/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[F# for Visualization](http://www.ffconsultancy.com/products/fsharp_for_visualization/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And finally, there's the 800 lb gorilla -- Excel.
  prefs: []
  type: TYPE_NORMAL
- en: Using the built-in capabilities of Excel is great, if it is available. And F#
    scripting plays well with Excel.
  prefs: []
  type: TYPE_NORMAL
- en: You can [chart in Excel](http://msdn.microsoft.com/en-us/library/vstudio/hh297098.aspx),
    [plot functions in Excel](http://www.clear-lines.com/blog/post/Plot-functions-from-FSharp-to-Excel.aspx),
    and for even more power and integration, you have the [FCell](http://fcell.io/)
    and [Excel-DNA](http://excel-dna.net/) projects.
  prefs: []
  type: TYPE_NORMAL
- en: 25\. Use F# for accessing web-based data stores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a lot of public data out on the web, just waiting to pulled down and
    loved. With the magic of type providers, F# is a good choice for direct integrating
    these web-scale data stores into your workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, we''ll look at two data stores: Freebase and World Bank. More will
    be available soon -- see the [fsharp.org Data Access page](http://fsharp.org/data-access/)
    for the latest information.'
  prefs: []
  type: TYPE_NORMAL
- en: Freebase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/freebase.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Freebase](http://en.wikipedia.org/wiki/Freebase) is a large collaborative
    knowledge base and online collection of structured data harvested from many sources.'
  prefs: []
  type: TYPE_NORMAL
- en: To get started, just link in the type provider DLL as we have seen before.
  prefs: []
  type: TYPE_NORMAL
- en: The site is throttled, so you'll probably need an API key if you're using it
    a lot ([api details here](http://developers.google.com/console/help/?csw=1#activatingapis))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Once the type provider is loaded, you can start asking questions, such as...
  prefs: []
  type: TYPE_NORMAL
- en: '*"Who are the US presidents?"*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Not bad for just four lines of code!
  prefs: []
  type: TYPE_NORMAL
- en: How about *"what awards did Casablanca win?"*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: So that's Freebase. Lots of good information, both useful and frivolous.
  prefs: []
  type: TYPE_NORMAL
- en: '[More on how to use the Freebase type provider](http://fsharp.github.io/FSharp.Data/library/Freebase.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Using Freebase to generate realistic test data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've seen how FsCheck can be used to [generate test data](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy).
    Well, you can also get the same affect by getting data from Freebase, which makes
    the data much more realistic.
  prefs: []
  type: TYPE_NORMAL
- en: '[Kit Eason](http://twitter.com/kitlovesfsharp) showed how to do this in a [tweet](http://twitter.com/kitlovesfsharp/status/296240699735695360),
    and here''s an example based on his code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: World Bank
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/world-bank.fsx).*'
  prefs: []
  type: TYPE_NORMAL
- en: On the other extreme from Freebase is the [World Bank Open Data](http://data.worldbank.org/),
    which has lots of detailed economic and social information from around the world.
  prefs: []
  type: TYPE_NORMAL
- en: The setup is identical to Freebase, but no API key is needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'With the type provider set up, we can do a serious query, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"How do malnutrition rates compare between low income and high income countries?"*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, here is the code to compare maternal mortality rates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[More on how to use the World Bank type provider](http://fsharp.github.io/FSharp.Data/library/WorldBank.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 26\. Use F# for data science and machine learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So you're putting all these suggestions into practice. You're parsing your web
    logs with FParsec, extracting stats from your internal databases with the SQL
    type provider, and pulling down external data from web services. You've got all
    this data -- what can you do with it?
  prefs: []
  type: TYPE_NORMAL
- en: Let's finish up by having a quick look at using F# for data science and machine
    learning.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen, F# is great for exploratory programming -- it has a REPL with
    intellisense. But unlike Python and R, your code is type checked, so you know
    that your code is not going to fail with an exception halfway through a two hour
    processing job!
  prefs: []
  type: TYPE_NORMAL
- en: If you are familiar with the Pandas library from Python or the ?tseries' package
    in R, then you should take a serious look at [Deedle](http://bluemountaincapital.github.io/Deedle/),
    an easy-to-use, high quality package for data and time series manipulation. Deedle
    is designed to work well for exploratory programming using the REPL, but can be
    also used in efficient compiled .NET code.
  prefs: []
  type: TYPE_NORMAL
- en: And if you use R a lot, there's an [R type provider](http://bluemountaincapital.github.io/FSharpRProvider)(of
    course). This means you can use R packages as if they were .NET libraries. How
    awesome is that!
  prefs: []
  type: TYPE_NORMAL
- en: There's lots of other F# friendly packages too. You can find out all about them
    at fsharp.org.
  prefs: []
  type: TYPE_NORMAL
- en: '[Data science](http://fsharp.org/data-science/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Math](http://fsharp.org/math/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine learning](http://fsharp.org/machine-learning)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Series summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Phew! That was a long list of examples and a lot of code to look at. If you've
    made it to the end, congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: I hope that this has given you some new insights into the value of F#. It's
    not just a math-y or financial language -- it's a practical one too. And it can
    help you with all sorts of things in your development, testing, and data management
    workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, as I have stressed throughout this series, all these uses are safe,
    low risk and incremental. What's the worst that can happen?
  prefs: []
  type: TYPE_NORMAL
- en: So go on, persuade your team mates and boss to give F# a try, and let me know
    how it goes.
  prefs: []
  type: TYPE_NORMAL
- en: Postscript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After I posted this, Simon Cousins tweeted that I missed one -- I can't resist
    adding it.
  prefs: []
  type: TYPE_NORMAL
- en: '[@ScottWlaschin](https://twitter.com/ScottWlaschin) 27: balance the generation
    schedule for the uk power station fleet. seriously, the alternative to [#fsharp](https://twitter.com/search?q=%23fsharp&src=hash)
    was way too risky'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — Simon Cousins (@simontcousins) [April 25, 2014](https://twitter.com/simontcousins/statuses/459591939902697472)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can read more about Simon's real-world of use of F# (for power generation)
    on [his blog](http://www.simontylercousins.net/does-the-language-you-use-make-a-difference-revisited/).
    There are more testimonials to F# at [fsharp.org](http://fsharp.org/testimonials/).
  prefs: []
  type: TYPE_NORMAL
