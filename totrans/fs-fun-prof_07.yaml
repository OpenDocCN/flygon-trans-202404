- en: Low-risk ways to use F# at work
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在工作中使用F#的低风险方式
- en: So you're all excited about functional programming, and you've been learning
    F# in your spare time, and you're annoying your co-workers by ranting about how
    great it is, and you're itching to use it for serious stuff at work...
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你对函数式编程很兴奋，业余时间一直在学习F#，并且因为它有多棒而烦扰着你的同事，你迫不及待地想在工作中用它来做一些严肃的事情...
- en: But then you hit a brick wall.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但是然后你撞上了一堵墙。
- en: Your workplace has a "C# only" policy and won't let you use F#.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你的工作场所有一个“仅限C#”的政策，不允许你使用F#。
- en: If you work in a typical enterprise environment, getting a new language approved
    will be a long drawn out process, involving persuading your teammates, the QA
    guys, the ops guys, your boss, your boss's boss, and the [mysterious bloke down
    the hall](http://www.joelonsoftware.com/articles/fog0000000018.html) who you've
    never talked to. I would encourage you to start that process (a [helpful link
    for your manager](http://fpbridge.co.uk/why-fsharp.html)), but still, you're impatient
    and thinking "what can I do now?"
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在典型的企业环境中工作，要批准一门新的语言将是一个漫长的过程，需要说服你的队友、QA团队、运维团队、你的老板、你老板的老板，以及走廊尽头的[神秘家伙](http://www.joelonsoftware.com/articles/fog0000000018.html)，他是你从未交流过的。我鼓励你开始这个过程（[给你的经理的有用链接](http://fpbridge.co.uk/why-fsharp.html)），但你仍然心急如焚，想着“我现在能做什么呢？”
- en: On the other hand, perhaps you work in a flexible, easy going place, where you
    can do what you like.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，也许你在一个灵活、随和的地方工作，你可以做你想做的事情。
- en: But you're conscientious, and don't want to be one of those people who re-write
    some mission critical system in APL, and then vanish without trace, leaving your
    replacement some mind-bendingly cryptic code to maintain. No, you want to make
    sure that you are not doing anything that will affect your team's [bus factor](https://en.wikipedia.org/wiki/Bus_factor).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 但你是个有责任心的人，不想成为那些用APL重写某个关键系统然后消失得无影无踪的人之一，留下一些令人费解的代码给你的接班人去维护。不，你想确保你不做任何会影响你团队[巴士因子](https://en.wikipedia.org/wiki/Bus_factor)的事情。
- en: So in both these scenarios, you want to use F# at work, but you can't (or don't
    want to) use it for core application code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这两种情况下，你想在工作中使用F#，但你不能（或不想）将其用于核心应用程序代码。
- en: What can you do?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你能做什么呢？
- en: Well, don't worry! This series will suggest a number of ways you can get your
    hands dirty with F# in a low-risk, incremental way, without affecting any mission
    critical code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，别担心！本系列将提出一些方式，以低风险、渐进的方式让你在工作中涉足F#，而不影响任何关键任务的代码。
- en: '[Twenty six low-risk ways to use F# at work](low-risk-ways-to-use-fsharp-at-work1.html).
    You can start right now -- no permission needed.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在工作中使用F#的二十六种低风险方式](low-risk-ways-to-use-fsharp-at-work1.html)。你可以立即开始——无需许可。'
- en: '[Using F# for development and devops scripts](low-risk-ways-to-use-fsharp-at-work-2.html).
    Twenty six low-risk ways to use F# at work (part 2).'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用F#进行开发和DevOps脚本编写](low-risk-ways-to-use-fsharp-at-work-2.html)。二十六种在工作中使用F#的低风险方式（第二部分）。'
- en: '[Using F# for testing](low-risk-ways-to-use-fsharp-at-work-3.html). Twenty
    six low-risk ways to use F# at work (part 3).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用F#进行测试](low-risk-ways-to-use-fsharp-at-work-3.html)。二十六种在工作中使用F#的低风险方式（第三部分）。'
- en: '[Using F# for database related tasks](low-risk-ways-to-use-fsharp-at-work-4.html).
    Twenty six low-risk ways to use F# at work (part 4).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用F#进行数据库相关任务](low-risk-ways-to-use-fsharp-at-work-4.html)。二十六种在工作中使用F#的低风险方式（第四部分）。'
- en: '[Other interesting ways of using F# at work](low-risk-ways-to-use-fsharp-at-work-5.html).
    Twenty six low-risk ways to use F# at work (part 5).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在工作中使用F#的其他有趣方式](low-risk-ways-to-use-fsharp-at-work-5.html)。二十六种在工作中使用F#的低风险方式（第五部分）。'
- en: Twenty six low-risk ways to use F# at work
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二十六种在工作中使用F#的低风险方式
- en: Twenty six low-risk ways to use F# at work
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二十六种在工作中使用F#的低风险方式
- en: So you're all excited about functional programming, and you've been learning
    F# in your spare time, and you're annoying your co-workers by ranting about how
    great it is, and you're itching to use it for serious stuff at work...
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你对函数式编程很兴奋，业余时间一直在学习F#，并且因为它有多棒而烦扰着你的同事，你迫不及待地想在工作中用它来做一些严肃的事情...
- en: But then you hit a brick wall.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是然后你撞上了一堵墙。
- en: Your workplace has a "C# only" policy and won't let you use F#.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你的工作场所有一个“仅限C#”的政策，不允许你使用F#。
- en: If you work in a typical enterprise environment, getting a new language approved
    will be a long drawn out process, involving persuading your teammates, the QA
    guys, the ops guys, your boss, your boss's boss, and the [mysterious bloke down
    the hall](http://www.joelonsoftware.com/articles/fog0000000018.html) who you've
    never talked to. I would encourage you to start that process (a [helpful link
    for your manager](http://fpbridge.co.uk/why-fsharp.html)), but still, you're impatient
    and thinking "what can I do now?"
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在典型的企业环境中工作，获得批准使用新语言将是一个漫长的过程，涉及说服您的队友、质量保证人员、运维人员、您的老板、老板的老板，以及您从未与之交谈过的[走廊那个神秘的家伙](http://www.joelonsoftware.com/articles/fog0000000018.html)。我鼓励您开始这个过程（一个[为您的经理提供的有用链接](http://fpbridge.co.uk/why-fsharp.html)），但是，您仍然不耐烦，并在想“我现在能做什么？”
- en: On the other hand, perhaps you work in a flexible, easy going place, where you
    can do what you like.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，也许你在一个灵活、随意的地方工作，你可以随心所欲。
- en: But you're conscientious, and don't want to be one of those people who re-write
    some mission critical system in APL, and then vanish without trace, leaving your
    replacement some mind-bendingly cryptic code to maintain. No, you want to make
    sure that you are not doing anything that will affect your team's [bus factor](http://en.wikipedia.org/wiki/Bus_factor).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你很有责任感，不想成为那种用APL重新编写一些关键系统，然后不留痕迹就消失的人之一，让你的接替者需要维护一些令人费解的代码。不，你想确保自己不做任何会影响团队[巴士因子](http://en.wikipedia.org/wiki/Bus_factor)的事情。
- en: So in both these scenarios, you want to use F# at work, but you can't (or don't
    want to) use it for core application code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这两种情况下，您想在工作中使用F#，但是您不能（或不想）将其用于核心应用程序代码。
- en: What can you do?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你能做什么？
- en: Well, don't worry! This series of articles will suggest a number of ways you
    can get your hands dirty with F# in a low-risk, incremental way, without affecting
    any critical code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心！这一系列的文章将建议您以低风险、渐进式的方式使用F#，而不会影响任何关键代码。
- en: Series contents
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系列内容
- en: Here's a list of the twenty six ways so that you can go straight to any one
    that you find particularly interesting.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个二十六种方法的列表，以便您可以直接跳转到您特别感兴趣的任何一种方法。
- en: '**Part 1 - Using F# to explore and develop interactively**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**第1部分 - 使用F#进行交互式探索和开发**'
- en: '[1\. Use F# to explore the .NET framework interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[1\. 使用F#交互式地探索.NET框架](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
- en: '[2\. Use F# to test your own code interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[2\. 使用F#交互式地测试您自己的代码](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
- en: '[3\. Use F# to play with webservices interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[3\. 使用F#与网络服务进行交互式玩耍](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
- en: '[4\. Use F# to play with UI''s interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[4\. 使用F#交互式地玩弄UI](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
- en: '**Part 2 - Using F# for development and devops scripts**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**第2部分 - 使用F#进行开发和devops脚本**'
- en: '[5\. Use FAKE for build and CI scripts](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[5\. 使用FAKE进行构建和CI脚本](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
- en: '[6\. An F# script to check that a website is responding](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[6\. 用F#脚本检查网站是否响应](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
- en: '[7\. An F# script to convert an RSS feed into CSV](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[7\. 用F#脚本将RSS订阅源转换为CSV](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
- en: '[8\. An F# script that uses WMI to check the stats of a process](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[8\. 使用WMI的F#脚本检查进程的统计信息](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
- en: '[9\. Use F# for configuring and managing the cloud](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[9\. 使用F#配置和管理云](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
- en: '**Part 3 - Using F# for testing**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**第3部分 - 使用F#进行测试**'
- en: '[10\. Use F# to write unit tests with readable names](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[10\. 使用F#编写具有可读名称的单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
- en: '[11\. Use F# to run unit tests programmatically](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[11\. 使用F#编程运行单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
- en: '[12\. Use F# to learn to write unit tests in other ways](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[12\. 使用F#学习其他编写单元测试的方法](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
- en: '[13\. Use FsCheck to write better unit tests](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[13\. 使用 FsCheck 编写更好的单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
- en: '[14\. Use FsCheck to create random dummy data](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[14\. 使用 FsCheck 创建随机虚拟数据](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
- en: '[15\. Use F# to create mocks](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[15\. 使用 F# 创建模拟对象](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
- en: '[16\. Use F# to do automated browser testing](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[16\. 使用 F# 进行自动化浏览器测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
- en: '[17\. Use F# for Behaviour Driven Development](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[17\. 使用 F# 进行行为驱动开发](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
- en: '**Part 4\. Using F# for database related tasks**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 4 部分：使用 F# 处理与数据库相关的任务**'
- en: '[18\. Use F# to replace LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[18\. 使用 F# 替代 LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
- en: '[19\. Use F# to unit test stored procedures](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[19\. 使用 F# 单元测试存储过程](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
- en: '[20\. Use FsCheck to generate random database records](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[20\. 使用 FsCheck 生成随机数据库记录](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
- en: '[21\. Use F# to do simple ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[21\. 使用 F# 进行简单的 ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
- en: '[22\. Use F# to generate SQL Agent scripts](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[22\. 使用 F# 生成 SQL Agent 脚本](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
- en: '**Part 5: Other interesting ways of using F#**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 5 部分：使用 F# 的其他有趣方式**'
- en: '[23\. Use F# for parsing](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[23\. 使用 F# 进行解析](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
- en: '[24\. Use F# for diagramming and visualization](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[24\. 使用 F# 进行图表和可视化](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
- en: '[25\. Use F# for accessing web-based data stores](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[25\. 使用 F# 访问基于 Web 的数据存储](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
- en: '[26\. Use F# for data science and machine learning](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[26\. 使用 F# 进行数据科学和机器学习](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
- en: '[(BONUS) 27: Balance the generation schedule for the UK power station fleet](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[(额外) 27: 平衡英国发电站机组的发电计划](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
- en: Getting started
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门指南
- en: If you're using Visual Studio, you've already got F# installed, so you're ready
    to go! No need to ask anyone's permission.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Visual Studio，你已经安装了 F#，所以你可以立即开始！无需征得任何人的许可。
- en: If you're on a Mac or Linux, you will have to a bit of work, alas (instructions
    for [Mac](http://fsharp.org/use/mac/) and [Linux](http://fsharp.org/use/linux/)).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Mac 或 Linux，你将不得不做一些工作，��憾地（[Mac](http://fsharp.org/use/mac/) 和 [Linux](http://fsharp.org/use/linux/)
    的说明）。
- en: 'There are two ways to use F# interactively: (1) typing in the F# interactive
    window directly, or (2) creating a F# script file (.FSX) and then evaluating code
    snippets.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以交互使用 F#：（1）直接在 F# 交互式窗口中输入，或者（2）创建一个 F# 脚本文件（.FSX）然后评估代码片段。
- en: 'To use the F# interactive window in Visual Studio:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Visual Studio 中使用 F# 交互式窗口：
- en: Show the window with `Menu > View > Other Windows > F# Interactive`
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示窗口：`菜单 > 视图 > 其他窗口 > F# 交互式`
- en: Type an expression, and use double semicolon (`;;`) to tell the interpreter
    you're finished.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个表达式，然后使用双分号 (`;;`) 告诉解释器你已经完成了。
- en: 'For example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Personally, I prefer to create a script file (`File > New > File` then pick
    "F# script") and type code there, because you get auto-complete and intellisense.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我更喜欢创建一个脚本文件（`文件 > 新建 > 文件` 然后选择 "F# 脚本"）并在那里输入代码，因为你会得到自动完成和智能感知。
- en: '![](fsharp-script-intellisense.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](fsharp-script-intellisense.jpg)'
- en: To run a bit of code, just highlight and right click, or simply do `Alt+Enter`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行一小段代码，只需高亮显示然后右键单击，或者简单地按下 `Alt+Enter`。
- en: '![](fsharp-script-evaluate.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](fsharp-script-evaluate.jpg)'
- en: Working with external libraries and NuGet
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用外部库和 NuGet
- en: Most of the code samples reference external libraries which are expected to
    be under the script directory.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数代码示例引用了预期位于脚本目录下的外部库。
- en: You could download or compile these DLLs explicitly, but I think using NuGet
    from the command line is simpler.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以显式下载或编译这些 DLL，但我认为使用 NuGet 命令行更简单。
- en: First, you need to install Chocolately (from [chocolatey.org](http://chocolatey.org/))
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要安装 Chocolately（从 [chocolatey.org](http://chocolatey.org/)）
- en: Next install the NuGet command line using `cinst nuget.commandline`
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来使用 `cinst nuget.commandline` 安装 NuGet 命令行。
- en: Finally, go to your script directory, and install the NuGet package from the
    command line.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，转到您的脚本目录，并从命令行安装 NuGet 包。
- en: For example, `nuget install FSharp.Data -o Packages -ExcludeVersion`
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，`nuget install FSharp.Data -o Packages -ExcludeVersion`
- en: As you see, I prefer to exclude versions from Nuget packages when using them
    from scripts so that I can update later without breaking existing code.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如您所看到的，我更喜欢在脚本中使用 Nuget 包时排除版本，这样以后可以更新而不会破坏现有代码。
- en: '* * *'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Part 1: Using F# to explore and develop interactively'
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一部分：使用 F# 交互式地探索和开发
- en: The first area where F# is valuable is as a tool to interactively explore .NET
    libraries.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: F# 最有价值的第一个领域是作为一个工具来交互式地探索 .NET 库。
- en: Before, in order to do this, you might have created unit tests and then stepped
    through them with a debugger to understand what is happening. But with F#, you
    don't need to do that, you can run the code directly.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，为了做到这一点，您可能已经创建了单元测试，然后通过调试器逐步执行它们以了解发生了什么。但是使用 F#，您不需要这样做，可以直接运行代码。
- en: Let's look at some examples.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些例子。
- en: 1\. Use F# to explore the .NET framework interactively
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 使用 F# 交互式地探索 .NET 框架
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/explore-net-interactively.fsx).*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节的代码可以在 [github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/explore-net-interactively.fsx)
    上找到。*'
- en: When I'm coding, I often have little questions about how the .NET library works.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我编码时，我经常对 .NET 库的工作方式���一些小问题。
- en: 'For example, here are some questions that I have had recently that I answered
    by using F# interactively:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是我最近遇到的一些问题，我通过使用 F# 交互式解决了：
- en: Have I got a custom DateTime format string correct?
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的自定义 DateTime 格式字符串正确吗？
- en: How does XML serialization handle local DateTimes vs. UTC DateTimes?
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML 序列化如何处理本地 DateTime 和 UTC DateTime？
- en: Is `GetEnvironmentVariable` case-sensitive?
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetEnvironmentVariable` 区分大小写吗？'
- en: All these questions can be found in the MSDN documentation, of course, but can
    also answered in seconds by running some simple F# snippets, shown below.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些问题当然可以在 MSDN 文档中找到，但也可以通过运行一些简单的 F# 代码片段来在几秒钟内得到答案，如下所示。
- en: Have I got a custom DateTime format string correct?
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我的自定义 DateTime 格式字符串正确吗？
- en: I want to use 24 hour clock in a custom format. I know that it's "h", but is
    it upper or lowercase "h"?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我想在自定义格式中使用 24 小时制。我知道是 "h"，但是是大写还是小写的 "h"？
- en: '[PRE1]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How does XML serialization handle local DateTimes vs. UTC DateTimes?
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XML 序列化如何处理本地 DateTime 和 UTC DateTime？
- en: How exactly, does XML serialization work with dates? Let's find out!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: XML 序列化如何准确处理日期？让我们找出来！
- en: '[PRE2]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output is:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是：
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So I can see it uses "Z" for UTC times.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我可以看到它在 UTC 时间中使用 "Z"。
- en: Is GetEnvironmentVariable case-sensitive?
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`GetEnvironmentVariable` 区分大小写吗？'
- en: 'This can be answered with a simple snippet:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用一个简单的代码片段回答：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The answer is therefore "not case-sensitive".
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此答案是 "不区分大小写"。
- en: 2\. Use F# to test your own code interactively
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 使用 F# 交互式地测试您自己的代码
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/explore-own-code-interactively.fsx).*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节的代码可以在 [github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/explore-own-code-interactively.fsx)
    上找到。*'
- en: You are not restricted to playing with the .NET libraries, of course. Sometimes
    it can be quite useful to test your own code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您并不局限于与 .NET 库一起玩耍。有时测试您自己的代码可能非常有用。
- en: To do this, just reference the DLL and then open the namespace as shown below.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，只需引用 DLL，然后按照下面所示打开命名空间。
- en: '[PRE5]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'WARNING: in older versions of F#, opening a reference to your DLL will lock
    it so that you can''t compile it! In which case, before recompiling, be sure to
    reset the interactive session to release the lock. In newer versions of F#, [the
    DLL is shadow-copied](https://visualfsharp.codeplex.com/SourceControl/changeset/4c10b32c4f417701f4e6c3284b0a8dadab5a9b98),
    and there is no lock.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 警告：在较旧版本的 F# 中，打开对 DLL 的引用会锁定它，导致无法编译！在这种情况下，在重新编译之前，请确保重置交互式会话以释放锁定。在较新版本的
    F# 中，[DLL 是影子复制的](https://visualfsharp.codeplex.com/SourceControl/changeset/4c10b32c4f417701f4e6c3284b0a8dadab5a9b98)，不会锁定。
- en: 3\. Use F# to play with webservices interactively
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 使用 F# 交互式地玩耍网络服务
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/explore-webservices-interactively.fsx).*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节的代码可以在 [github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/explore-webservices-interactively.fsx)
    上找到。*'
- en: If you want to play with the WebAPI and Owin libraries, you don't need to create
    an executable -- you can do it through script alone!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试使用 WebAPI 和 Owin 库，你无需创建可执行文件 —— 你可以仅通过脚本完成！
- en: There is a little bit of setup involved, as you will need a number of library
    DLLs to make this work.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要一点设置，因为你需要一些库 DLL 才能让其正常工作。
- en: So, assuming you have got the NuGet command line set up (see above), go to your
    script directory, and install the self hosting libraries via `nuget install Microsoft.AspNet.WebApi.OwinSelfHost
    -o Packages -ExcludeVersion`
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，假设你已经设置好了 NuGet 命令行（见上文），转到你的脚本目录，并通过 `nuget install Microsoft.AspNet.WebApi.OwinSelfHost
    -o Packages -ExcludeVersion` 安装自托管库。
- en: Once these libraries are in place, you can use the code below as a skeleton
    for a simple WebAPI app.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些库就位，你就可以使用下面的代码作为简单 WebAPI 应用程序的骨架。
- en: '[PRE6]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s the output:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '[PRE7]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This example is just to demonstrate that you can use the OWIN and WebApi libraries
    "out-of-the-box".
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例只是为了演示你可以直接使用 OWIN 和 WebApi 库。
- en: For a more F# friendly web framework, have a look at [Suave](http://suave.io/)
    or [WebSharper](http://www.websharper.com). There is a lot [more webby stuff at
    fsharp.org](http://fsharp.org/webstacks/).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更加 F# 友好的 Web 框架，请看 [Suave](http://suave.io/) 或 [WebSharper](http://www.websharper.com)。在
    [fsharp.org](http://fsharp.org/webstacks/) 上还有更多与 web 相关的内容。
- en: 4\. Use F# to play with UI's interactively
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 使用 F# 与 UI 交互玩耍
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/explore-winforms-interactively.fsx).*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*这部分的代码可在 [github 上找到](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/explore-winforms-interactively.fsx)。*'
- en: Another use for F# interactive is to play with UI's while they are running --
    live!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: F# 交互的另一个用途是在 UI 运行时进行交互 —— 实时的！
- en: Here's an example of developing a WinForms screen interactively.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个开发 WinForms 屏幕交互的示例。
- en: '[PRE8]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s the window:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是窗口：
- en: '![](fsharp-interactive-ui1.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](fsharp-interactive-ui1.png)'
- en: 'And here''s the window after clicking, with the title bar changed:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 并且在点击后，窗口的标题栏已更改：
- en: '![](fsharp-interactive-ui2.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](fsharp-interactive-ui2.png)'
- en: Now let's add a FlowLayoutPanel and a button.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加一个 FlowLayoutPanel 和一个按钮。
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here''s the window now:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在窗口如下：
- en: '![](fsharp-interactive-ui3.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](fsharp-interactive-ui3.png)'
- en: But the button is too small -- we need to set `AutoSize` to be true.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 但按钮太小了 —— 我们需要将 `AutoSize` 设置为 true。
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That's better!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 那就更好了！
- en: '![](fsharp-interactive-ui4.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](fsharp-interactive-ui4.png)'
- en: 'Let''s add a yellow button too:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再添加一个黄色按钮：
- en: '[PRE11]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](fsharp-interactive-ui5.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](fsharp-interactive-ui5.png)'
- en: 'But the button is cut off, so let''s change the flow direction:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 但按钮被截断了，所以让我们改变流向：
- en: '[PRE12]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](fsharp-interactive-ui6.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](fsharp-interactive-ui6.png)'
- en: 'But now the yellow button is not the same width as the green button, which
    we can fix with `Dock`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在黄色按钮的宽度与绿色按钮不同，我们可以使用 `Dock` 来修复：
- en: '[PRE13]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](fsharp-interactive-ui7.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](fsharp-interactive-ui7.png)'
- en: As you can see, it is really easy to play around with layouts interactively
    this way. Once you're happy with the layout logic, you can convert the code back
    to C# for your real application.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，通过这种方式轻松地与布局进行交互是非常容易的。一旦你满意布局逻辑，你就可以将代码转换回 C#，用于你的真实应用程序。
- en: This example is WinForms specific. For other UI frameworks the logic would be
    different, of course.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例是针对 WinForms 特定的。当然，对于其他 UI 框架，逻辑会有所不同。
- en: '* * *'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: So that's the first four suggestions. We're not done yet! The next post will
    cover using F# for development and devops scripts.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是前四个建议。我们还没结束！下一篇文章将涵盖使用 F# 进行开发和 DevOps 脚本。
- en: Using F# for development and devops scripts
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 F# 进行开发和 DevOps 脚本
- en: Using F# for development and devops scripts
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 F# 进行开发和 DevOps 脚本
- en: This post is a continuation of the series on [low-risk ways to use F# at work](low-risk-ways-to-use-fsharp-at-work1.html).
    I've been suggesting a number of ways you can get your hands dirty with F# in
    a low-risk, incremental way, without affecting any mission critical code.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章是系列文章 [在工作中使用 F# 的低风险方法](low-risk-ways-to-use-fsharp-at-work1.html) 的延续。我已经提出了一些低风险、增量式地使用
    F# 的方法，而不会影响到任何关键任务的代码。
- en: In this one, we'll talk about using F# for builds and other development and
    devops scripts.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将讨论使用 F# 构建和其他开发和 DevOps 脚本。
- en: If you're new to F#, you might want to read the sections on [getting started](low-risk-ways-to-use-fsharp-at-work1.html#getting-started)
    and [working with NuGet](low-risk-ways-to-use-fsharp-at-work1.html#working-with-nuget)
    in the previous post.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 F# 的新手，你可能想要阅读前一篇文章中关于 [入门](low-risk-ways-to-use-fsharp-at-work1.html#getting-started)
    和 [使用 NuGet](low-risk-ways-to-use-fsharp-at-work1.html#working-with-nuget) 的部分。
- en: Series contents
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系列目录
- en: 'Here''s a list of shortcuts to the twenty six ways:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一份指向 26 种方式的快捷方式列表：
- en: '**Part 1 - Using F# to explore and develop interactively**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 1 部分 - 使用 F# 交互式探索和开发**'
- en: '[1\. Use F# to explore the .NET framework interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[1\. 使用 F# 交互式探索 .NET Framework](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
- en: '[2\. Use F# to test your own code interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[2\. 使用 F# 交互式测试你自己的代码](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
- en: '[3\. Use F# to play with webservices interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[3\. 使用 F# 交互式玩转网络服务](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
- en: '[4\. Use F# to play with UI''s interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[4\. 使用 F# 交互式玩转 UI](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
- en: '**Part 2 - Using F# for development and devops scripts**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 2 部分 - 使用 F# 编写开发和运维脚本**'
- en: '[5\. Use FAKE for build and CI scripts](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[5\. 使用 FAKE 编写构建和 CI 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
- en: '[6\. An F# script to check that a website is responding](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[6\. 检查网站是否响应的 F# 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
- en: '[7\. An F# script to convert an RSS feed into CSV](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[7\. 一个将 RSS 订阅转换为 CSV 的 F# 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
- en: '[8\. An F# script that uses WMI to check the stats of a process](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[8\. 使用 WMI 检查进程状态的 F# 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
- en: '[9\. Use F# for configuring and managing the cloud](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[9\. 使用 F# 配置和管理云](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
- en: '**Part 3 - Using F# for testing**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 3 部分 - 使用 F# 进行测试**'
- en: '[10\. Use F# to write unit tests with readable names](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[10\. 使用 F# 编写具有可读名称的单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
- en: '[11\. Use F# to run unit tests programmatically](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[11\. 使用 F# 以编程方式运行单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
- en: '[12\. Use F# to learn to write unit tests in other ways](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[12\. 使用 F# 学习以其他方式编写单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
- en: '[13\. Use FsCheck to write better unit tests](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[13\. 使用 FsCheck 编写更好的单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
- en: '[14\. Use FsCheck to create random dummy data](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[14\. 使用 FsCheck 创建随机虚拟数据](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
- en: '[15\. Use F# to create mocks](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[15\. 使用 F# 创建模拟对象](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
- en: '[16\. Use F# to do automated browser testing](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[16\. 使用 F# 进行自动化浏览器测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
- en: '[17\. Use F# for Behaviour Driven Development](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[17\. 使用 F# 进行行为驱动开发](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
- en: '**Part 4\. Using F# for database related tasks**'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 4 部分：使用 F# 处理与数据库相关的任务**'
- en: '[18\. Use F# to replace LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[18\. 使用 F# 替代 LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
- en: '[19\. Use F# to unit test stored procedures](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[19\. 使用 F# 对存储过程进行单元测试](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
- en: '[20\. Use FsCheck to generate random database records](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[20\. 使用 FsCheck 生成随机数据库记录](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
- en: '[21\. Use F# to do simple ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[21\. 使用 F# 进行简单的 ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
- en: '[22\. Use F# to generate SQL Agent scripts](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[22\. 使用 F# 生成 SQL Agent 脚本](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
- en: '**Part 5: Other interesting ways of using F#**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 5 部分：其他有趣的 F# 使用方式**'
- en: '[23\. Use F# for parsing](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[23\. 使用 F# 进行解析](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
- en: '[24\. Use F# for diagramming and visualization](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[24\. 使用 F# 进行图表和可视化](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
- en: '[25\. Use F# for accessing web-based data stores](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[25\. 使用 F# 访问基于 Web 的数据存储](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
- en: '[26\. Use F# for data science and machine learning](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[26\. 使用 F# 进行数据科学和机器学习](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
- en: '[(BONUS) 27: Balance the generation schedule for the UK power station fleet](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[(奖励) 27: 平衡英国发电站群的发电计划](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
- en: '* * *'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Part 2: Using F# for development and devops scripts'
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二部分：使用 F# 编写开发和运维脚本
- en: 'The next set of suggestions relates to using F# for the various scripts that
    revolve around development activities: builds, continuous integration, deployment,
    etc.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的建议涉及使用 F# 编写围绕开发活动的各种脚本：构建、持续集成、部署等。
- en: For these kinds of small tasks, you need a good scripting language with a REPL.
    You could use PowerShell, or [ScriptCS](http://scriptcs.net/), or even Python.
    But why not give F# a go?
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些小任务，您需要一个带有 REPL 的良��脚本语言。您可以使用 PowerShell，或者 [ScriptCS](http://scriptcs.net/)，甚至是
    Python。但为什么不试试 F# 呢？
- en: F# feels lightweight like Python (few or no type declarations).
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: F# 感觉轻量级，就像 Python（很少或没有类型声明）。
- en: F# can access .NET libraries, both the core ones and those downloaded via NuGet.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: F# 可以访问 .NET 库，包括核心库和通过 NuGet 下载的库。
- en: F# has type providers (a big advantage over PowerShell and ScriptCS) that let
    you easily access a wide range of data sources.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: F# 具有类型提供程序（相对于 PowerShell 和 ScriptCS 的一个巨大优势），可以让您轻松访问各种数据源。
- en: All this in a concise, type-safe manner, with intellisense too!
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有这些都以简洁、类型安全的方式进行，还有智能感知！
- en: Using F# in this way will allow you and your fellow developers to use F# code
    to solve practical problems. There shouldn't be any resistance from managers for
    this low-risk approach -- in the worse case you can easily switch to using a different
    tool.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式使用 F# 将使您和您的同事能够使用 F# 代码解决实际问题。对于这种低风险方法，管理人员不应该有任何抵抗力 -- 在最坏的情况下，您可以轻松切换到使用其他工具。
- en: A hidden agenda, of course, is that once your fellow developers get a chance
    to play with F#, they'll be hooked, and you'll be one step closer to using [F#
    end to end](http://colinbul.wordpress.com/2013/02/23/f-end-to-end/)!
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，一个隐藏的目的是，一旦您的同事有机会尝试 F#，他们就会上瘾，您离 [全程使用 F#](http://colinbul.wordpress.com/2013/02/23/f-end-to-end/)
    又近了一步！
- en: What can you do with F# scripts?
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 您可以用 F# 脚本做什么？
- en: 'In the next few sections we''ll see three examples of F# scripts:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将看到三个 F# 脚本示例：
- en: '[An F# script to check that a website is responding](#dev-website-responding)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个用于检查网站是否响应的 F# 脚本](#dev-website-responding)'
- en: '[An F# script to convert an RSS feed into CSV](#dev-rss-to-csv)'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个将 RSS 订阅转换为 CSV 的 F# 脚本](#dev-rss-to-csv)'
- en: '[An F# script that uses WMI to check the stats of a process](#dev-wmi-stats)'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个使用 WMI 检查进程统计数据的 F# 脚本](#dev-wmi-stats)'
- en: 'But of course, you can integrate F# scripts with almost any .NET library. Here
    are other suggestions for utilities that can be scripted:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可以将 F# 脚本与几乎任何 .NET 库集成。以下是可以编写脚本的其他实用程序的建议：
- en: Simple file copying, directory traversal, and archiving (e.g. of log files).
    If you're using .NET 4.5, you can use the new [System.IO.Compression.ZipArchive](http://msdn.microsoft.com/en-us/library/vstudio/hh485720.aspx)
    class to do zipping and unzipping without needing a third party library.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的文件复制、目录遍历和归档（例如日志文件）。如果您使用 .NET 4.5，可以使用新的 [System.IO.Compression.ZipArchive](http://msdn.microsoft.com/en-us/library/vstudio/hh485720.aspx)
    类来进行压缩和解压缩，而无需使用第三方库。
- en: Doing things with JSON, either with a known format (using the [JSON Type Provider](http://fsharp.github.io/FSharp.Data/library/JsonProvider.html))
    or unknown format (using the [JSON parser](http://fsharp.github.io/FSharp.Data/library/JsonValue.html)).
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 JSON 数据，可以是已知格式（使用 [JSON 类型提供程序](http://fsharp.github.io/FSharp.Data/library/JsonProvider.html)）或未知格式（使用
    [JSON 解析器](http://fsharp.github.io/FSharp.Data/library/JsonValue.html)）。
- en: Interacting with GitHub using [Octokit](http://www.nuget.org/packages/Octokit/).
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [Octokit](http://www.nuget.org/packages/Octokit/) 与 GitHub 进行交互。
- en: Extracting data from, or manipulating data in, Excel. F# supports COM for doing
    Office automation, or you can use one of the type providers or libraries.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Excel 中提取数据或操作数据。F# 支持使用 COM 进行 Office 自动化，或者您可以使用其中一种类型提供程序或库。
- en: Doing numerics with [Math.NET](http://numerics.mathdotnet.com/).
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [Math.NET](http://numerics.mathdotnet.com/) 进行数值计算。
- en: Web crawling, link checking, and screenscraping. The built-in async workflows
    and agents make this kind of "multithreaded" code very easy to write.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 爬取、链接检查和屏幕抓取。内置的异步工作流和代理使得编写这种“多线程”代码非常容易。
- en: Scheduling things with [Quartz.NET](http://www.quartz-scheduler.net/).
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[Quartz.NET](http://www.quartz-scheduler.net/)进行调度。
- en: If these suggestions whet your interest, and you want to use more F#, then check
    out the [F# community projects](http://fsharp.org/community/projects/) page. It's
    a great source of useful libraries being written for F#, and most of them will
    work well with F# scripting.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些建议激起了你的兴趣，并且你想使用更多的 F#，那么请查看[F# 社区项目](http://fsharp.org/community/projects/)页面。这是一个为
    F# 编写的有用库的绝佳来源，其中大多数库与 F# 脚本兼容。
- en: Debugging F# scripts
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试 F# 脚本
- en: A great thing about using F# scripts is that you don't need to create a whole
    project, nor launch Visual Studio.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 F# 脚本的一个很棒的地方是你不需要创建一个完整的项目，也不需要启动 Visual Studio。
- en: 'But if you need to debug a script, and you''re not in Visual Studio, what can
    you do? Here are some tips:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你需要调试一个脚本，而又不在 Visual Studio 中，你可以做些什么？以下是一些提示：
- en: First, you can just use tried and true printing to the console using `printfn`.
    I generally wrap this in a simple `log` function so that I can turn logging on
    or off with a flag.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，你可以只是使用经过尝试和真实的控制台打印使用`printfn`。我通常会将其包装在一个简单的`log`函数中，这样我就可以通过一个标志打开或关闭日志记录。
- en: You can use the [FsEye](http://code.google.com/p/fseye/) tool to inspect and
    watch variables in an interactive session.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用[FsEye](http://code.google.com/p/fseye/)工具来检查和监视交互式会话中的变量。
- en: Finally, you can still use the Visual Studio debugger. The trick is to [attach
    the debugger](http://stackoverflow.com/a/9337016/1136133) to the fsi.exe process,
    and then you can use [`Debugger.Break`](http://msdn.microsoft.com/en-us/library/vstudio/system.diagnostics.debugger.break)
    to halt at a certain point.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，你仍然可以使用 Visual Studio 调试器。诀窍是[附加调试器](http://stackoverflow.com/a/9337016/1136133)到
    fsi.exe 进程，然后你可以使用[`Debugger.Break`](http://msdn.microsoft.com/en-us/library/vstudio/system.diagnostics.debugger.break)在某个特定点中断。
- en: 5\. Use FAKE for build and CI scripts
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 使用 FAKE 来构建和 CI 脚本
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/fake.fsx).*'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节的代码[在 github 上可用](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/fake.fsx)。*'
- en: Let's start with [FAKE](http://fsharp.github.io/FAKE/), which is a cross platform
    build automation tool written in F#, analogous to Ruby's [Rake](http://rake.rubyforge.org/).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从[FAKE](http://fsharp.github.io/FAKE/)开始，它是一个用 F# 编写的跨平台构建自动化工具，类似于 Ruby
    的[Rake](http://rake.rubyforge.org/)。
- en: FAKE has built-in support for git, NuGet, unit tests, Octopus Deploy, Xamarin
    and more, and makes it easy to develop complex scripts with dependencies.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: FAKE 内置支持 git、NuGet、单元测试、Octopus Deploy、Xamarin 等等，并且可以轻松开发具有依赖关系的复杂脚本。
- en: You can even use it with [TFS to avoid using XAML](http://blog.ctaggart.com/2014/01/code-your-tfs-builds-in-f-instead-of.html).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以将其与[TFS一起使用以避免使用 XAML](http://blog.ctaggart.com/2014/01/code-your-tfs-builds-in-f-instead-of.html)。
- en: One reason to use FAKE rather than something like Rake is that you can standardize
    on .NET code throughout your tool chain. In theory, you could use [NAnt](http://en.wikipedia.org/wiki/NAnt)
    instead, but in practice, no thanks, because XML. [PSake](http://github.com/psake/psake)
    is also a possibility, but more complicated than FAKE, I think.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 FAKE 而不是像 Rake 这样的东西的一个原因是，你可以在整个工具链中标准化 .NET 代码。理论上，你可以使用[NAnt](http://en.wikipedia.org/wiki/NAnt)，但实际上，不需要，因为
    XML。[PSake](http://github.com/psake/psake)也是一个可能的选择，但我认为比 FAKE 更复杂。
- en: You can also use FAKE to remove dependencies on a particular build server. For
    example, rather than using TeamCity's integration to run tests and other tasks,
    you might consider [doing them in FAKE](http://www.jamescrowley.co.uk/2014/04/22/code-coverage-using-dotcover-and-f-make/)
    instead, which means you can run full builds without having TeamCity installed.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 FAKE 来消除对特定构建服务器的依赖。例如，你可以考虑[在 FAKE 中执行它们](http://www.jamescrowley.co.uk/2014/04/22/code-coverage-using-dotcover-and-f-make/)，而不是使用
    TeamCity 的集成来运行测试和其他任务，这意味着你可以在不安装 TeamCity 的情况下运行完整的构建。
- en: Here's an example of a very simple FAKE script, taken from [a more detailed
    example on the FAKE site](http://fsharp.github.io/FAKE/gettingstarted.html).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个非常简单的 FAKE 脚本示例，摘自[FAKE 网站上的更详细的示例](http://fsharp.github.io/FAKE/gettingstarted.html)。
- en: '[PRE14]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The syntax takes a little getting used to, but that effort is well spent.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 语法需要一点时间来适应，但这些努力是值得的。
- en: 'Some further reading on FAKE:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 FAKE 的一些进一步阅读：
- en: '[Migrating to FAKE](http://bugsquash.blogspot.co.uk/2010/11/migrating-to-fake.html).'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[迁移到 FAKE](http://bugsquash.blogspot.co.uk/2010/11/migrating-to-fake.html)。'
- en: '[Hanselman on FAKE](http://www.hanselman.com/blog/ExploringFAKEAnFBuildSystemForAllOfNET.aspx).
    Many of the comments are from people who are using FAKE actively.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Hanselman 关于 FAKE](http://www.hanselman.com/blog/ExploringFAKEAnFBuildSystemForAllOfNET.aspx)。很多评论都来自积极使用
    FAKE 的人。'
- en: '[A NAnt user tries out FAKE](http://putridparrot.com/blog/trying-fake-out/).'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个 NAnt 用户尝试使用 FAKE](http://putridparrot.com/blog/trying-fake-out/)。'
- en: 6\. An F# script to check that a website is responding
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 一个检查网站是否响应的 F# 脚本
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/dev-website-responding.fsx).*'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节的代码可在 [github 上获取](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/dev-website-responding.fsx)。*'
- en: This script checks that a website is responding with a 200. This might be useful
    as the basis for a post-deployment smoke test, for example.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本检查网站是否以 200 响应。例如，这可能是进行部署后的冒烟测试的基础。
- en: '[PRE15]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The result is:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE16]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note that I'm using the Http utilities code in `Fsharp.Data`, which provides
    a nice wrapper around `HttpClient`. [More on HttpUtilities here](http://fsharp.github.io/FSharp.Data/library/Http.html).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我在`Fsharp.Data`中使用了 Http 实用程序代码，它提供了一个很好的包装器，用于`HttpClient`。[这里了解更多关于 HttpUtilities
    的信息](http://fsharp.github.io/FSharp.Data/library/Http.html)。
- en: 7\. An F# script to convert an RSS feed into CSV
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. 一个将 RSS 订阅转换为 CSV 的 F# 脚本
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/dev-rss-to-csv.fsx).*'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节的代码可在 [github 上获取](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/dev-rss-to-csv.fsx)。*'
- en: Here's a little script that uses the Xml type provider to parse an RSS feed
    (in this case, [F# questions on StackOverflow](https://stackoverflow.com/questions/tagged/f%23?sort=newest&pageSize=10))
    and convert it to a CSV file for later analysis.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 Xml 类型提供程序解析 RSS 订阅（在本例中是 [StackOverflow 上关于 F# 的问题](https://stackoverflow.com/questions/tagged/f%23?sort=newest&pageSize=10)）并将其转换为
    CSV 文件以供以后分析的小脚本。
- en: Note that the RSS parsing code is just one line of code! Most of the code is
    concerned with writing the CSV. Yes, I could have used a CSV library (there are
    lots on NuGet) but I thought I'd leave it as is to show you how simple it is.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，RSS 解析代码只有一行代码！大部分代码用于编写 CSV。是的，我可以使用 CSV 库（NuGet 上有很多），但我想保持原样，向你展示它有多简单。
- en: '[PRE17]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that the type provider generates intellisense (shown below) to show you
    the available properties based on the actual contents of the feed. That's very
    cool.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，类型提供程序会生成智能提示（如下所示），以根据订阅的实际内容显示可用的属性。这非常酷。
- en: '![](fsharp-xml-dropdown.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](fsharp-xml-dropdown.png)'
- en: 'The result is something like this:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 结果类似于这样：
- en: '[PRE18]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: For more on the XML type provider, [see the FSharp.Data pages](http://fsharp.github.io/FSharp.Data/library/XmlProvider.html).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 XML 类型提供程序的信息，请[参见 FSharp.Data 页面](http://fsharp.github.io/FSharp.Data/library/XmlProvider.html)。
- en: 8\. An F# script that uses WMI to check the stats of a process
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8\. 一个使用 WMI 检查进程状态的 F# 脚本
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/dev-wmi-stats.fsx).*'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节的代码可在 [github 上获取](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/dev-wmi-stats.fsx)。*'
- en: If you use Windows, being able to access WMI is very useful. Luckily there is
    an F# type provider for WMI that makes using it easy.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 Windows，能够访问 WMI 非常有用。幸运的是，有一个用于 WMI 的 F# 类型提供程序，可以使使用变得容易。
- en: In this example, we'll get the system time and also check some stats for a process.
    This could be useful during and after a load test, for example.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将获取系统时间，并检查一些进程的统计信息。例如，在负载测试期间和之后可能会很有用。
- en: '[PRE19]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output is something like this:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 输出类似于这样：
- en: '[PRE20]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Again, using a type provider means that you get intellisense (shown below).
    Very useful for the hundreds of WMI options.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，使用类型提供程序意味着您可以获得智能提示（如下所示）。对于数百个 WMI 选项非常有用。
- en: '![](fsharp-wmi-dropdown.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](fsharp-wmi-dropdown.png)'
- en: '[More on the WMI type provider here](http://fsprojects.github.io/FSharp.Management/WMIProvider.html).'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多关于 WMI 类型提供程序的信息在这里](http://fsprojects.github.io/FSharp.Management/WMIProvider.html)。'
- en: 9\. Use F# for configuring and managing the cloud
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9\. 使用 F# 配置和管理云
- en: One area which deserves special mention is using F# for configuring and managing
    cloud services. The [cloud page](http://fsharp.org/cloud/) at fsharp.org has many
    helpful links.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 值得特别一提的一个领域是使用 F# 配置和管理云服务。fsharp.org 的 [云页面](http://fsharp.org/cloud/)上有许多有用的链接。
- en: For simple scripting, [Fog](http://dmohl.github.io/Fog/) is a nice wrapper for
    Azure.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的脚本编写，[Fog](http://dmohl.github.io/Fog/) 是 Azure 的一个不错的封装。
- en: 'So for example, to upload a blob, the code is as simple as this:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要上传一个 blob，代码就是这么简单：
- en: '[PRE21]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'or to add and receive messages:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 或者添加和接收消息：
- en: '[PRE22]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: What's especially nice about using F# for this is that you can do it in micro
    scripts -- you don't need any heavy tooling.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 F# 进行这项工作的特别之处在于，你可以在微型脚本中完成 -- 无需任何繁重的工具。
- en: Summary
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: I hope you found these suggestions useful. Let me know in the comments if you
    apply them in practice.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你觉得这些建议有用。如果你在实践中应用了它们，请在评论中告诉我。
- en: 'Next up: using F# for testing.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来：使用 F# 进行测试。
- en: Using F# for testing
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 F# 进行测试
- en: Using F# for testing
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 F# 进行测试
- en: This post is a continuation of the previous series on [low-risk and incremental
    ways to use F# at work](low-risk-ways-to-use-fsharp-at-work1.html) -- how can
    you get your hands dirty with F# in a low-risk, incremental way, without affecting
    any mission critical code?
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是之前系列文章的延续，关于[在工作中低风险和渐进式使用 F# 的方式](low-risk-ways-to-use-fsharp-at-work1.html)
    -- 如何以低风险、渐进式的方式涉足 F#，而不影响任何关键任务代码？
- en: In this one, we'll talk about using F# for testing.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将讨论使用 F# 进行测试。
- en: Series contents
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系列内容
- en: 'Before moving on to the content of the post, here''s the full list of the twenty
    six ways:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续阅读本文内容之前，这里是二十六种方法的完整列表：
- en: '**Part 1 - Using F# to explore and develop interactively**'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '**第一部分 - 使用 F# 进行交互式探索和开发**'
- en: '[1\. Use F# to explore the .NET framework interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '[1\. 使用 F# 与 .NET 框架进行交互式探索](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
- en: '[2\. Use F# to test your own code interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[2\. 使用 F# 交互式测试自己的代码](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
- en: '[3\. Use F# to play with webservices interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '[3\. 使用 F# 与网络服务进行交互式操作](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
- en: '[4\. Use F# to play with UI''s interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '[4\. 使用 F# 与 UI 进行交互式操作](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
- en: '**Part 2 - Using F# for development and devops scripts**'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二部分 - 使用 F# 进行开发和运维脚本**'
- en: '[5\. Use FAKE for build and CI scripts](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[5\. 使用 FAKE 编写构建和 CI 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
- en: '[6\. An F# script to check that a website is responding](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '[6\. 一个检查网站是否响应的 F# 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
- en: '[7\. An F# script to convert an RSS feed into CSV](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[7\. 一个将 RSS 订阅转换为 CSV 的 F# 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
- en: '[8\. An F# script that uses WMI to check the stats of a process](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '[8\. 使用 WMI 检查进程统计信息的 F# 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
- en: '[9\. Use F# for configuring and managing the cloud](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '[9\. 使用 F# 进行云配置和管理](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
- en: '**Part 3 - Using F# for testing**'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '**第三部分 - 使用 F# 进行测试**'
- en: '[10\. Use F# to write unit tests with readable names](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[10\. 使用 F# 编写具有可读名称的单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
- en: '[11\. Use F# to run unit tests programmatically](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '[11\. 使用 F# 运行单元测试程序化](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
- en: '[12\. Use F# to learn to write unit tests in other ways](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[12\. 使用 F# 学习以其他方式编写单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
- en: '[13\. Use FsCheck to write better unit tests](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '[13\. 使用 FsCheck 编写更好的单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
- en: '[14\. Use FsCheck to create random dummy data](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[14\. 使用 FsCheck ��建随机虚拟数据](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
- en: '[15\. Use F# to create mocks](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '[15\. 使用 F# 创建模拟对象](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
- en: '[16\. Use F# to do automated browser testing](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '[16\. 使用 F# 进行自动化浏览器测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
- en: '[17\. Use F# for Behaviour Driven Development](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '[17\. 使用 F# 进行行为驱动开发](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
- en: '**Part 4\. Using F# for database related tasks**'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '**第四部分 - 使用 F# 进行与数据库相关的任务**'
- en: '[18\. Use F# to replace LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '[18\. 使用 F# 替代 LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
- en: '[19\. Use F# to unit test stored procedures](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[19\. 使用 F# 单元测试存储过程](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
- en: '[20\. Use FsCheck to generate random database records](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '[20\. 使用 FsCheck 生成随机数据库记录](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
- en: '[21\. Use F# to do simple ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '[21\. 使用 F# 进行简单的 ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
- en: '[22\. Use F# to generate SQL Agent scripts](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '[22\. 使用 F# 生成 SQL Agent 脚本](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
- en: '**Part 5: Other interesting ways of using F#**'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '**第五部分：其他有趣的 F# 使用方式**'
- en: '[23\. Use F# for parsing](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '[23\. 使用 F# 进行解析](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
- en: '[24\. Use F# for diagramming and visualization](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '[24\. 使用 F# 进行图表和可视化](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
- en: '[25\. Use F# for accessing web-based data stores](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '[25\. 使用 F# 访问基于 Web 的数据存储](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
- en: '[26\. Use F# for data science and machine learning](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '[26\. 使用 F# 进行数据科学和机器学习](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
- en: '[(BONUS) 27: Balance the generation schedule for the UK power station fleet](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '[(奖励) 27: 平衡英国发电站机组的发电计划](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
- en: '* * *'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Part 3 - Using F# for testing
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三部分 - 使用 F# 进行测试
- en: If you want to start writing useful code in F# without touching core code, writing
    tests is a great way to start.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要开始在 F# 中编写有用的代码而不触及核心代码，编写测试是一个很好的开始。
- en: Not only does F# have a more compact syntax, it also has many nice features,
    such as the "double backtick" syntax, that make test names much more readable.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: F# 不仅具有更紧凑的语法，还有许多好用的功能，比如“双反引号”语法，使测试名称更易读。
- en: As with all of the suggestions in this series, I think this is a low risk option.
    Test methods tend to be short, so almost anyone will be able to read them without
    having to understand F# deeply. In the worst-case, you can easily port them back
    to C#.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 与本系列中的所有建议一样，我认为这是一个低风险选项。测试方法往往很简短，所以几乎任何人都能够阅读它们，而不必深入了解 F#。在最坏的情况下，你可以轻松地将它们转回到
    C#。
- en: 10\. Use F# to write unit tests with readable names
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10\. 使用 F# 编写具有可读名称的单元测试
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TestWithNUnit.fs).*'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节的代码可在 [github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TestWithNUnit.fs)
    上找到。*'
- en: Just like C#, F# can be used to write standard unit tests using the standard
    frameworks like NUnit, MsUnit, xUnit, etc.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 与 C# 一样，F# 可以用于使用标准框架编写标准单元测试，如 NUnit、MsUnit、xUnit 等。
- en: Here's an example of a test class written for use with NUnit.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个带有 `TestFixture` 属性的类，以及一个带有 `Test` 属性的公共 void 方法。非常标准。
- en: '[PRE23]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, there's a class with the `TestFixture` attribute, and a public
    void method with the `Test` attribute. All very standard.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这里有一个带有 `TestFixture` 属性的类，以及一个带有 `Test` 属性的公共 void 方法。非常标准。
- en: But there are some nice extras you get when you use F# rather than C#. First
    you can use the double backtick syntax to create more readable names, and second,
    you can use `let` bound functions in modules rather than classes, which simplifies
    the code.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，与使用 C# 相比，使用 F# 时您会得到一些额外的好处。首先，您可以使用双反引号语法创建更易读的名称，其次，您可以在模块中使用 `let` 绑定函数而不是类，这简化了代码。
- en: '[PRE24]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The double backtick syntax makes the test results much easier to read. Here
    is the output of the test with a standard class name:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 双反引号语法使测试结果更易读。这是一个使用 NUnit 编写的测试类的输出示例。
- en: '[PRE25]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'vs. the output using the more friendly name:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用更友好名称的输出相比：
- en: '[PRE26]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: So if you want to write test names that are accessible to non-programmers, give
    F# a go!
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您想要编写对非程序员可访问的��试名称，请尝试使用 F#！
- en: 11\. Use F# to run unit tests programmatically
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11\. 使用 F# 来编程运行单元测试
- en: Often, you might want to run the unit tests programmatically. This can be for
    various reasons, such as using custom filters, or doing custom logging, or not
    wanting to install NUnit on test machines.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您可能希望以编程方式运行单元测试。这可能是出于各种原因，比如使用自定义过滤器，或进行自定义日志记录，或不想在测试机器上安装 NUnit。
- en: One simple way to do this is to use the [Fuchu library](http://github.com/mausch/Fuchu)
    which lets you organize tests directly, especially parameterized tests, without
    any complex test attributes.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的一个简单方法是使用[Fuchu库](http://github.com/mausch/Fuchu)，它允许您直接组织测试，特别是参数化测试，而无需任何复杂的测试属性。
- en: 'Here''s an example:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个例子：
- en: '[PRE27]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can run these tests directly in F# interactive using code like this: `run
    simpleTest`.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用类似于此的代码直接在 F# 交互式中运行这些测试：`run simpleTest`。
- en: 'You can also combine these tests into one or more lists, or hierarchical lists
    of lists:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将这些测试组合成一个或多个列表，或列表的层次结构列表：
- en: '[PRE28]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '*The code above is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/OrganizeTestsWithFuchu.fs).*'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '*以上代码在 [github 上可用](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/OrganizeTestsWithFuchu.fs)。*'
- en: 'Finally, with Fuchu, the test assembly becomes its own test runner. Just make
    the assembly a console app instead of a library and add this code to the `program.fs`
    file:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用 Fuchu，测试装配体成为其自己的测试运行程序。只需将装配体设置为控制台应用程序而不是库，并将此代码添加到 `program.fs` 文件中：
- en: '[PRE29]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[More on Fuchu here](http://bugsquash.blogspot.co.uk/2012/06/fuchu-functional-test-library-for-net.html).'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '[这里有关于 Fuchu 的更多信息](http://bugsquash.blogspot.co.uk/2012/06/fuchu-functional-test-library-for-net.html)。'
- en: Using the NUnit test runner
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 NUnit 测试运行程序
- en: If you do need to use an existing test runner (such as the NUnit one), then
    it's very simple to put together a simple script to do this.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如果确实需要使用现有的测试运行程序（如 NUnit），那么制作一个简单的脚本非常简单。
- en: I've made a little example, below, using the `Nunit.Runners` package.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我做了一个小例子，如下所示，使用了`Nunit.Runners`包。
- en: All right, this might not be the most exciting use of F#, but it does show off
    F#'s "object expression" syntax to create the `NUnit.Core.EventListener` interface,
    so I thought I'd leave it in as a demo.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这可能不是 F# 最激动人心的用途，但它展示了 F# 的“对象表达式”语法来创建`NUnit.Core.EventListener`接口，所以我想把它留作演示。
- en: '[PRE30]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '*The code above is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/nunit-test-runner.fsx).*'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '*以上代码在 [github 上可用](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/nunit-test-runner.fsx)。*'
- en: 12\. Use F# to learn to write unit tests in other ways
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12\. 使用 F# 学习以其他方式编写单元测试
- en: The [unit test code above](#test-nunit) is familiar to all of us, but there
    are other ways to write tests. Learning to code in different styles is a great
    way to add some new techniques to your repertoire and expand your thinking in
    general, so let's have a quick look at some of them.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '[上述单元测试代码](#test-nunit)对我们所有人来说都很熟悉，但是还有其他编写测试的方法。学习以不同的风格编码是增加一些新技术到你的工具箱并扩展你的思维的好方法，所以让我们快速看一些吧。'
- en: First up is [FsUnit](http://github.com/fsharp/FsUnit), which replaces `Assert`
    with a more fluent and idiomatic approach (natural language and piping).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是[FsUnit](http://github.com/fsharp/FsUnit)，它用更流畅和习惯的方式（自然语言和管道）替换了`Assert`。
- en: 'Here''s a snippet:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个代码片段：
- en: '[PRE31]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '*The above code is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TestWithFsUnit.fs).*'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '*以上代码在 [github 上可用](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TestWithFsUnit.fs)。*'
- en: A very different approach is used by [Unquote](http://code.google.com/p/unquote/).
    The Unquote approach is to wrap any F# expression in [F# quotations](http://msdn.microsoft.com/en-us/library/dd233212.aspx)
    and then evaluate it. If a test expression throws an exception, the test will
    fail and print not just the exception, but each step up to the point of the exception.
    This information could potentially give you much more insight in why the assert
    fails.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '[Unquote](http://code.google.com/p/unquote/) 使用了一种非常不同的方法。Unquote 的方法是将任何 F#
    表达式包装在[F# 引用](http://msdn.microsoft.com/en-us/library/dd233212.aspx)中，然后评估它。如果测试表达式抛出异常，则测试将失败并打印不仅是异常，而且是直到异常点的每一步。这些信息可能会为您提供更多关于为何断言失败的见解。'
- en: 'Here''s a very simple example:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个非常简单的例子：
- en: '[PRE32]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: There are also a number of shortcut operators such as `=?` and `>?` that allow
    you to write your tests even more simply -- no asserts anywhere!
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多快捷操作符，比如`=?`和`>?`，可以让你更简单地编写测试——完全不需要`assert`！
- en: '[PRE33]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '*The above code is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TestWithUnquote.fs).*'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '*以上代码在 [github 上可用](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TestWithUnquote.fs)。*'
- en: 13\. Use FsCheck to write better unit tests
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13\. 使用 FsCheck 编写更好的单元测试
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TestWithFsCheck.fs).*'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节的代码可以在[github上找到](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TestWithFsCheck.fs)。*'
- en: Let's say that we have written a function that converts numbers to Roman numerals,
    and we want to create some test cases for it.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经编写了一个将数字转换为罗马数字的函数，并且我们想为它创建一些测试用例。
- en: 'We might start writing tests like this:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会开始编写这样的测试：
- en: '[PRE34]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: But the problem with this approach is that it only tests a very specific example.
    There might be some edge cases that we haven't thought of.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种方法的问题在于它只测试一个非常具体的例子。可能有一些我们没有考虑到的边缘情况。
- en: A much better approach is to find something that must be true for *all* cases.
    Then we can create a test that checks that this something (a "property") is true
    for all cases, or at least a large random subset.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的方法是找到对*所有*情况都必须为真的东西。然后我们可以创建一个检查这个东西（一个“属性”）对所有情况是否为真，或者至少对一个大的随机子集是否为真的测试。
- en: For example, in the Roman numeral example, we can say that one property is "all
    Roman numerals have at most one 'V' character" or "all Roman numerals have at
    most three 'X' characters". We can then construct tests that check this property
    is indeed true.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在罗马数字的例子中，我们可以说一个属性是“所有罗马数字最多有一个'V'字符”或“所有罗马数字最多有三个'X'字符”。然后我们可以构建检查这个属性确实为真的测试。
- en: This is where [FsCheck](http://github.com/fsharp/FsCheck) can help. FsCheck
    is a framework designed for exactly this kind of property-based testing. It's
    written in F# but it works equally well for testing C# code.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是[ FsCheck](http://github.com/fsharp/FsCheck)可以帮助的地方。FsCheck是一个专为这种基于属性的测试设计的框架。它是用F#编写的，但同样适用于测试C#代码。
- en: So, let's see how we'd use FsCheck for our Roman numerals.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看我们如何为我们的罗马数字使用FsCheck。
- en: First, we define some properties that we expect to hold for all Roman numerals.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义一些我们期望对所有罗马数字成立的属性。
- en: '[PRE35]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'With this in place we create tests that:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们创建测试：
- en: Create a property checker function suitable for passing to FsCheck.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个适合传递给FsCheck的属性检查器函数。
- en: Use the `Check.Quick` function to generate hundreds of random test cases and
    send them into that property checker.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Check.Quick`函数生成数百个随机测试用例，并将它们发送到属性检查器中。
- en: '[PRE36]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Here are the results of the test. You can see that 100 random numbers have been
    tested, not just one.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是测试的结果。你可以看到已经测试了100个随机数，而不仅仅是一个。
- en: '[PRE37]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If we changed the test to be "Test that roman numerals have no more than TWO
    Xs", then the test result is false, and looks like this:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将测试改为“测试罗马数字中不超过两个X”，那么测试结果为false，看起来像这样：
- en: '[PRE38]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In other words, after generating 33 different inputs, FsCheck has correctly
    found a number (30) that does not meet the required property. Very nice!
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，在生成了33个不同的输入后，FsCheck正确地找到了一个不符合所需属性的数字（30）。非常好！
- en: Using FsCheck in practice
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在实践中使用FsCheck
- en: Not all situations have properties that can be tested this way, but you might
    find that it is more common than you think.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有情况都有可以通过这种方式测试的属性，但你可能会发现这种情况比你想象的更常见。
- en: 'For example, property based testing is especially useful for "algorithmic"
    code. Here a few examples:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，基于属性的测试对于“算法”代码特别有用。以下是一些例子：
- en: If you reverse a list and then reverse it again, you get the original list.
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你反转一个列表然后再次反转，你会得到原始列表。
- en: If you factorize an integer and then multiply the factors, you get the original
    number.
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你因式分解一个整数然后将因子相乘，你会得到原始数字。
- en: 'But even in Boring Line-Of-Business Applications?, you may find that property
    based testing has a place. For example, here are some things that can be expressed
    as properties:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 但即使在乏味的业务应用程序中，你可能会发现基于属性的测试也有用武之地。例如，以下是一些可以表达为属性的事物：
- en: '**Roundtripping**. For example, if you save a record to a database and then
    reload it, the record''s fields should be unchanged. Similarly, if you serialize
    and then deserialize something, you should get the original thing back.'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**往返测试**。例如，如果你将一个记录保存到数据库，然后重新加载它，记录的字段应该保持不变。同样，如果你序列化然后反序列化某些东西，你应该得到原始的东西。'
- en: '**Invariants**. If you add products to a sales order, the sum of the individual
    lines should be the same as the order total. Or, the sum of word counts for each
    page should be the sum of the word count for the entire book. More generally,
    if you calculate things via two different paths, you should get the same answer
    ([monoid homomorphisms!](monoids-part2.html#monoid-homomorphism))'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不变性**。如果你向销售订单添加产品，那么各个行的总和应与订单总额相同。或者，每页的字数总和应等于整本书的字数总和。更普遍地说，如果你通过两种不同的路径计算事物，你应该得到相同的答案（[幺半群同态！](monoids-part2.html#monoid-homomorphism)）'
- en: '**Rounding**. If you add ingredients to a recipe, the sum of the ingredient
    percentages (with 2 place precision) should always be exactly 100%. Similar rules
    are needed for most partitioning logic, such as shares, tax calculations, etc.
    (e.g. [the "share pie" example in the DDD book](http://books.google.co.uk/books?id=xColAAPGubgC&pg=PA198&lpg=PA198&dq=%22domain+driven+design%22+%22share+pie%22&source=bl&ots=q9-HdfTK4p&sig=IUnHGFUdwQv2p0tuWVbrqqwdAk4&hl=en&sa=X&ei=IdFbU5bLK8SMOPLFgfgC&ved=0CC8Q6AEwAA#v=onepage&q=%22domain%20driven%20design%22%20%22share%20pie%22&f=false)).'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**舍入**。如果你向食谱中添加配料，那么配料百分比的总和（精确到小数点后 2 位）应始终精确地为 100%。大多数分区逻辑都需要类似的规则，例如份额、税收计算等（例如[DDD
    书中的“份额饼图”示例](http://books.google.co.uk/books?id=xColAAPGubgC&pg=PA198&lpg=PA198&dq=%22domain+driven+design%22+%22share+pie%22&source=bl&ots=q9-HdfTK4p&sig=IUnHGFUdwQv2p0tuWVbrqqwdAk4&hl=en&sa=X&ei=IdFbU5bLK8SMOPLFgfgC&ved=0CC8Q6AEwAA#v=onepage&q=%22domain%20driven%20design%22%20%22share%20pie%22&f=false)）。'
- en: Making sure you get the rounding right in situations like this is where FsCheck
    shines.
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保在这种情况下正确进行舍入是 FsCheck 突出的地方。
- en: See this [SO question](http://stackoverflow.com/questions/2446242/difficulty-thinking-of-properties-for-fscheck?rq=1)
    for other ideas.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[此 SO 问题](http://stackoverflow.com/questions/2446242/difficulty-thinking-of-properties-for-fscheck?rq=1)以获取其他想法。
- en: FsCheck is also very useful for doing refactoring, because once you trust that
    the tests are extremely thorough, you can confidently work on tweaks and optimization.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: FsCheck 在进行重构时也非常有用，因为一旦你相信测试非常彻底，你就可以自信地进行调整和优化工作。
- en: 'Some more links for FsCheck:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: FsCheck 的更多链接：
- en: I have written [an introduction to property-based testing](http://fsharpforfunandprofit.com/posts/property-based-testing/)
    and [a follow up on choosing properties for property-based testing](http://fsharpforfunandprofit.com/posts/property-based-testing-2/).
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已经写了[关于基于属性的测试的介绍](http://fsharpforfunandprofit.com/posts/property-based-testing/)和[选择基于属性的测试属性的后续](http://fsharpforfunandprofit.com/posts/property-based-testing-2/)。
- en: '[FsCheck documentation](http://github.com/fsharp/FsCheck/blob/master/Docs/Documentation.md).'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[FsCheck 文档](http://github.com/fsharp/FsCheck/blob/master/Docs/Documentation.md)。'
- en: '[An article on using FsCheck in practice](http://www.clear-lines.com/blog/post/FsCheck-and-XUnit-is-The-Bomb.aspx).'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[关于在实践中使用 FsCheck 的文章](http://www.clear-lines.com/blog/post/FsCheck-and-XUnit-is-The-Bomb.aspx)。'
- en: '[My post on the Roman Numerals kata that mentions FsCheck](roman-numeral-kata.html).'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[提到 FsCheck 的罗马数字 kata 的我的帖子](roman-numeral-kata.html)。'
- en: For more on property-based testing in general, look for articles and videos
    about QuickCheck.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于属性的测试的更多内容，请查找关于 QuickCheck 的文章和视频。
- en: '[Intro to QuickCheck by John Hughes](http://www.cs.utexas.edu/~ragerdl/fmcad11/slides/tutorial-a.pdf)
    (PDF)'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[约翰·休斯的 QuickCheck 简介](http://www.cs.utexas.edu/~ragerdl/fmcad11/slides/tutorial-a.pdf)（PDF）'
- en: Fascinating talk on [using QuickCheck to find bugs in Riak](https://skillsmatter.com/skillscasts/4505-quickchecking-riak)
    ([another version](http://www.cs.utexas.edu/~ragerdl/fmcad11/slides/tutorial-a.pdf))
    (videos)
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关[使用 QuickCheck 发现 Riak 中的错误](https://skillsmatter.com/skillscasts/4505-quickchecking-riak)的迷人讲座（[另一个版本](http://www.cs.utexas.edu/~ragerdl/fmcad11/slides/tutorial-a.pdf)）（视频）
- en: 14\. Use FsCheck to create random dummy data
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14\. 使用 FsCheck 创建随机虚拟数据
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/RandomDataWithFsCheck.fs).*'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节代码[可在 github 上找到](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/RandomDataWithFsCheck.fs)。*'
- en: In addition to doing testing, FsCheck can be used to create random dummy data.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 除了进行测试之外，FsCheck 还可用于创建随机虚拟数据。
- en: For example, below is the complete code for generating random customers.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面是生成随机客户的完整代码。
- en: When you combine this with the SQL Type Provider (discussed later) or CSV writer,
    you can easily generate thousands of rows of random customers in a database or
    CSV file. Or you can use it with the JSON type provider to call a web service
    for testing validation logic, or load testing.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将其与SQL类型提供程序（稍后讨论）或CSV写入器结合使用时，你可以轻松生成数据库或CSV文件中的数千行随机客户。或者您可以将其与JSON类型提供程序一起使用，调用Web服务进行测试验证逻辑或负载测试。
- en: '*(Dont worry about not understanding the code -- this sample is just to show
    you how easy it is!)*'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '*(不要担心不理解代码 -- 这个示例只是为了向您展示它是多么简单！)*'
- en: '[PRE39]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'And here is a sampling of the results:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果的一小部分示例：
- en: '[PRE40]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 15\. Use F# to create mocks
  id: totrans-411
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15\. 使用F#创建模拟对象
- en: If you're using F# to write test cases for code written in C#, you may want
    to create mocks and stubs for interfaces.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用F#为在C#中编写的代码编写测试用例，则可能希望为接口创建模拟对象和存根。
- en: In C# you might use [Moq](http://github.com/Moq/moq4) or [NSubstitute](http://nsubstitute.github.io/).
    In F# you can use object expressions to create interfaces directly, or the [Foq
    library](http://foq.codeplex.com/).
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，您可能会使用[Moq](http://github.com/Moq/moq4)或[NSubstitute](http://nsubstitute.github.io/)。在F#中，您可以使用对象表达式直接创建接口，或者使用[Foq库](http://foq.codeplex.com/)。
- en: Both are easy to do, and in a way that is similar to Moq.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者都很容易做到，并且类似于Moq。
- en: 'Here''s some Moq code in C#:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 这是C#中的一些Moq代码：
- en: '[PRE41]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'And here''s the equivalent Foq code in F#:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是等效的F#中的Foq代码：
- en: '[PRE42]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'For more on mocking in F#, see:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 有关F#中模拟的更多信息，请参见：
- en: '[F# as a Unit Testing Language](http://trelford.com/blog/post/fstestlang.aspx)'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[F#作为单元测试语言](http://trelford.com/blog/post/fstestlang.aspx)'
- en: '[Mocking with Foq](http://trelford.com/blog/post/Foq.aspx)'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Foq进行模拟](http://trelford.com/blog/post/Foq.aspx)'
- en: '[Testing and mocking your C# code with F#](http://www.clear-lines.com/blog/post/Testing-and-mocking-your-C-sharp-code-with-F-sharp.aspx)'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用F#测试和模拟您的C#代码](http://www.clear-lines.com/blog/post/Testing-and-mocking-your-C-sharp-code-with-F-sharp.aspx)'
- en: And you need to mock external services such as SMTP over the wire, there is
    an interesting tool called [mountebank](http://www.mbtest.org/), which is [easy
    to interact with in F#](http://nikosbaxevanis.com/blog/2014/04/22/mountebank-mocks-with-f-number/).
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要模拟外部服务（如通过线路的SMTP）时，有一个有趣的工具叫做[mountebank](http://www.mbtest.org/)，在F#中[与之交互很容易](http://nikosbaxevanis.com/blog/2014/04/22/mountebank-mocks-with-f-number/)。
- en: 16\. Use F# to do automated browser testing
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16\. 使用F#进行自动化浏览器测试
- en: In addition to unit tests, you should be doing some kind of automated web testing,
    driving the browser with [Selenium](http://docs.seleniumhq.org/) or [WatiN](http://watin.sourceforge.net/).
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 除了单元测试外，您还应该进行某种类型的自动化Web测试，使用[Selenium](http://docs.seleniumhq.org/)或[WatiN](http://watin.sourceforge.net/)驱动浏览器。
- en: But what language should you write the automation in? Ruby? Python? C#? I think
    you know the answer!
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 但是您应该用什么语言编写自动化呢？Ruby？Python？C#？我想你知道答案！
- en: To make your life even easier, try using [Canopy](http://lefthandedgoat.github.io/canopy/),
    a web testing framework built on top of Selenium and written in F#. Their site
    claims *"Quick to learn. Even if you've never done UI Automation, and don't know
    F#."*, and I'm inclined to believe them.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你的生活更轻松，试试使用[Canopy](http://lefthandedgoat.github.io/canopy/)，这是一个构建在Selenium之上、用F#编写的Web测试框架。他们的网站声称*"快速学习。即使你以前没有做过UI自动化，也不懂F#。"*,
    我倾向于相信他们。
- en: Below is a snippet taken from the Canopy site. As you can see, the code is simple
    and easy to understand.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是从Canopy网站中摘录的代码片段。如您所见，代码简单易懂。
- en: Also, FAKE integrates with Canopy, so you can [run automated browser tests as
    part of a CI build](http://fsharp.github.io/FAKE/canopy.html).
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，FAKE与Canopy集成，因此您可以[作为CI构建的一部分运行自动化浏览器测试](http://fsharp.github.io/FAKE/canopy.html)。
- en: '[PRE43]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 17\. Use F# for Behaviour Driven Development
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17\. 使用F#进行行为驱动开发
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TickSpec.StepDefinitions.fs).*'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节的代码[可在github上获得](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/TestsInFsharp/TickSpec.StepDefinitions.fs)。*'
- en: If you're not familiar with Behaviour Driven Development (BDD), the idea is
    that you express requirements in a way that is both human-readable and *executable*.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉行为驱动开发（BDD），那么您可以以既可读又*可执行*的方式表达需求。
- en: 'The standard format (Gherkin) for writing these tests uses the Given/When/Then
    syntax -- here''s an example:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 编写这些测试的标准格式（Gherkin）使用了Given/When/Then语法 -- 这是一个例子：
- en: '[PRE44]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: If you are using BDD already with .NET, you're probably using [SpecFlow](http://www.specflow.org/)
    or similar.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在.NET中使用BDD，您可能正在使用[SpecFlow](http://www.specflow.org/)或类似工具。
- en: You should consider using [TickSpec](http://tickspec.codeplex.com/) instead
    because, as with all things F#, the syntax is much more lightweight.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该考虑使用[TickSpec](http://tickspec.codeplex.com/)，因为与所有 F# 相关的事物一样，语法更加轻量级。
- en: For example, here's the full implementation of the scenario above.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是上述场景的完整实现。
- en: '[PRE45]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The C# equivalent has a lot more clutter, and the lack of double backtick syntax
    really hurts:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: C# 的等价物有更多的杂乱，而且缺乏双反引号语法真的很糟糕：
- en: '[PRE46]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '*Examples taken from the [TickSpec](http://tickspec.codeplex.com/) site.*'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例取自[TickSpec](http://tickspec.codeplex.com/)网站。*'
- en: Summary of testing in F#
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: F# 中测试的总结
- en: 'You can of course combine all the test techniques we''ve seen so far ([as this
    slide deck demonstrates](http://www.slideshare.net/bartelink/testing-cinfdublinaltnet2013)):'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以结合我们迄今所见的所有测试技术（[正如这个幻灯片演示所示](http://www.slideshare.net/bartelink/testing-cinfdublinaltnet2013)）：
- en: Unit tests (FsUnit, Unquote) and property-based tests (FsCheck).
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试（FsUnit，Unquote）和基于属性的测试（FsCheck）。
- en: Automated acceptance tests (or at least a smoke test) written in BDD (TickSpec)
    driven by browser automation (Canopy).
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化验收测试（或至少是冒烟测试）使用 BDD（TickSpec）编写，由浏览器自动化驱动。
- en: Both types of tests run on every build (with FAKE).
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这两种类型的测试都在每次构建时运行（使用 FAKE）。
- en: There's a lot of advice on test automation out there, and you'll find that it
    is easy to port concepts from other languages to these F# tools. Have fun!
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多关于测试自动化的建议，你会发现很容易将其他语言的概念移植到这些 F# 工具中。玩得开心！
- en: Using F# for database related tasks
  id: totrans-449
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 F# 处理数据库相关任务
- en: Using F# for database related tasks
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 F# 处理数据库相关任务
- en: This post is a continuation of the previous series on [low-risk and incremental
    ways to use F# at work](low-risk-ways-to-use-fsharp-at-work1.html).
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章是之前关于[在工作中使用 F# 的低风险和渐进方式](low-risk-ways-to-use-fsharp-at-work1.html)系列的延续。
- en: In this one, we'll see how F# can be unexpectedly helpful when it comes to database
    related tasks.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将看到 F# 在处理数据库相关任务时是如何意外地有帮助的。
- en: Series contents
  id: totrans-453
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系列内容
- en: 'Before moving on to the content of the post, here''s the full list of the twenty
    six ways:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续文章内容之前，这是二十六种方法的完整列表：
- en: '**Part 1 - Using F# to explore and develop interactively**'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 1 部分 - 使用 F# 进行交互式探索和开发**'
- en: '[1\. Use F# to explore the .NET framework interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '[1\. 使用 F# 交互式探索 .NET 框架](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
- en: '[2\. Use F# to test your own code interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '[2\. 使用 F# 交互式测试自己的代码](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
- en: '[3\. Use F# to play with webservices interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '[3\. 使用 F# 与网络服务进行交互式操作](low-risk-ways-to-usefsharp-at-work1.html#explore-webservices-interactively)'
- en: '[4\. Use F# to play with UI''s interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '[4\. 使用 F# 交互式操作 UI](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
- en: '**Part 2 - Using F# for development and devops scripts**'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 2 部分 - 使用 F# 进行开发和运维脚本**'
- en: '[5\. Use FAKE for build and CI scripts](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '[5\. 使用 FAKE 编写构建和 CI 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
- en: '[6\. An F# script to check that a website is responding](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '[6\. 一个用于检查网站是否响应的 F# 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
- en: '[7\. An F# script to convert an RSS feed into CSV](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '[7\. 一个将 RSS 订阅转换为 CSV 的 F# 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
- en: '[8\. An F# script that uses WMI to check the stats of a process](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '[8\. 使用 WMI 检查进程统计信息的 F# 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
- en: '[9\. Use F# for configuring and managing the cloud](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '[9\. 使用 F# 配置和管理云](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
- en: '**Part 3 - Using F# for testing**'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 3 部分 - 使用 F# 进行测试**'
- en: '[10\. Use F# to write unit tests with readable names](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '[10\. 使用 F# 编写具有可读名称的单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
- en: '[11\. Use F# to run unit tests programmatically](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '[11\. 使用 F# 程序化运行单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
- en: '[12\. Use F# to learn to write unit tests in other ways](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '[12\. 使用 F# 学习其他方式编写单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
- en: '[13\. Use FsCheck to write better unit tests](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '[13\. 使用FsCheck编写更好的单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
- en: '[14\. Use FsCheck to create random dummy data](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '[14\. 使用FsCheck创建随机虚拟数据](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
- en: '[15\. Use F# to create mocks](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '[15\. 使用F#创建模拟对象](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
- en: '[16\. Use F# to do automated browser testing](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '[16\. 使用F#进行自动化浏览器测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
- en: '[17\. Use F# for Behaviour Driven Development](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '[17\. 使用F#进行行为驱动开发](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
- en: '**Part 4\. Using F# for database related tasks**'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '**第4部分。使用F#进行与数据库相关的任务**'
- en: '[18\. Use F# to replace LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '[18\. 使用F#替代LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
- en: '[19\. Use F# to unit test stored procedures](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '[19\. 使用F#对存储过程进行单元测试](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
- en: '[20\. Use FsCheck to generate random database records](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '[20\. 使用FsCheck生成随机数据库记录](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
- en: '[21\. Use F# to do simple ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '[21\. 使用F#进行简单的ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
- en: '[22\. Use F# to generate SQL Agent scripts](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '[22\. 使用F#生成SQL Agent脚本](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
- en: '**Part 5: Other interesting ways of using F#**'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '**第5部分：使用F#的其他有趣方法**'
- en: '[23\. Use F# for parsing](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '[23\. 使用F#进行解析](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
- en: '[24\. Use F# for diagramming and visualization](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '[24\. 使用F#进行图表和可视化](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
- en: '[25\. Use F# for accessing web-based data stores](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '[25\. 使用F#访问基于Web的数据存储](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
- en: '[26\. Use F# for data science and machine learning](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '[26\. 使用F#进行数据科学和机器学习](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
- en: '[(BONUS) 27: Balance the generation schedule for the UK power station fleet](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: （奖励）27：平衡英国发电站船队的发电计划](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)
- en: '* * *'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Part 4\. Using F# for database related tasks
  id: totrans-488
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4部分。使用F#进行与数据库相关的任务
- en: This next group of suggestions is all about working with databases, and MS SQL
    Server in particular.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的一组建议都是关于与数据库一起工作，特别是MS SQL Server。
- en: Relational databases are a critical part of most applications, but most teams
    do not approach the management of these in the same way as with other development
    tasks.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库是大多数应用程序的关键部分，但大多数团队在管理这些数据库时并没有像对待其他开发任务那样的方法。
- en: For example, how many teams do you know that unit test their stored procedures?
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你知道有多少团队对他们的存储过程进行单元测试了吗？
- en: Or their ETL jobs?
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 或者他们的ETL任务呢？
- en: Or generate T-SQL admin scripts and other boilerplate using a non-SQL scripting
    language that's stored in source control?
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用非SQL脚本语言存储在源代码控制中的T-SQL管理脚本和其他样板代码？
- en: Here's where F# can shine over other scripting languages, and even over T-SQL
    itself.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是F#可以胜过其他脚本语言，甚至胜过T-SQL本身的地方。
- en: The database type providers in F# give you the power to create simple, short
    scripts for testing and admin, with the bonus that...
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: F#中的数据库类型提供程序为您提供了创建简单、简短脚本用于测试和管理的能力，而且还有额外的好处...
- en: The scripts are *type-checked* and will fail at compile time if the database
    schema changes, which means that...
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些脚本是*类型检查*的，如果数据库架构发生更改，它们将在编译时失败，这意味着...
- en: The whole process works really well with builds and continuous integration processes,
    which in turn means that...
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个流程与构建和持续集成流程非常契合，这意味着...
- en: You have really high confidence in your database related code!
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你对与数据库相关的代码真的很有信心！
- en: 'We''ll look at a few examples to demonstrate what I''m talking about:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一些例子来说明我所说的：
- en: Unit testing stored procedures
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试存储过程
- en: Using FsCheck to generate random records
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用FsCheck生成随机记录
- en: Doing simple ETL with F#
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用F#进行简单的ETL
- en: Generating SQL Agent scripts
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成SQL Agent脚本
- en: Getting set up
  id: totrans-504
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进行设置
- en: The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/).
    In there, there are some SQL scripts to create the sample database, tables and
    stored procs that I'll use in these examples.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 这节的代码可以在 [github 上找到](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/)。在这里，有一些
    SQL 脚本，用来创建示例数据库、表和存储过程，我将在这些示例中使用。
- en: To run the examples, then, you'll need SQL Express or SQL Server running locally
    or somewhere accessible, with the relevant setup scripts having been run.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这些示例，你需要在本地或可访问的地方运行 SQL Express 或 SQL Server，并已运行相关的设置脚本。
- en: Which type provider?
  id: totrans-507
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用哪个类型提供程序？
- en: There are a number of SQL Type Providers for F# -- see [the fsharp.org Data
    Access page](http://fsharp.org/data-access/). For these examples, I'm going to
    use the [`SqlDataConnection` type provider](http://msdn.microsoft.com/en-us/library/hh361033.aspx),
    which is part of the `FSharp.Data.TypeProviders` DLL. It uses [SqlMetal](http://msdn.microsoft.com/en-us/library/bb386987.aspx)
    behind the scenes and so only works with SQL Server databases.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多适用于 F# 的 SQL 类型提供程序 -- 参见 [fsharp.org 数据访问页面](http://fsharp.org/data-access/)。在这些示例中，我将使用
    [`SqlDataConnection` 类型提供程序](http://msdn.microsoft.com/en-us/library/hh361033.aspx)，它是
    `FSharp.Data.TypeProviders` DLL 的一部分。它在幕后使用 [SqlMetal](http://msdn.microsoft.com/en-us/library/bb386987.aspx)，因此只能与
    SQL Server 数据库一起使用。
- en: The [SQLProvider](http://fsprojects.github.io/SQLProvider/) project is another
    good choice -- it supports MySql, SQLite and other non-Microsoft databases.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLProvider](http://fsprojects.github.io/SQLProvider/) 项目是另一个不错的选择 -- 它支持
    MySql、SQLite 和其他非微软数据库。'
- en: 18\. Use F# to replace LINQPad
  id: totrans-510
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 18\. 使用 F# 替代 LINQPad
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/FsharpInsteadOfLinqpad.fsx).*'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '*这节的代码可以在 [github 上找到](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/FsharpInsteadOfLinqpad.fsx)。*'
- en: '[LINQPad](http://www.linqpad.net/) is a great tool for doing queries against
    databases, and is also a general scratchpad for C#/VB/F# code.'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '[LINQPad](http://www.linqpad.net/) 是一个用于对数据库进行查询的好工具，也是用于 C#/VB/F# 代码的通用记事本。'
- en: You can use F# interactive to do many of the same things -- you get queries,
    autocompletion, etc., just like LINQPad.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 F# 交互来执行许多相同的操作 -- 你可以获得查询、自动完成等功能，就像 LINQPad 一样。
- en: For example, here's one that counts customers with a certain email domain.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里有一个统计具有特定电子邮件域的客户的示例。
- en: '[PRE47]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If you want to see what SQL code is generated, you can turn logging on, of
    course:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看生成的 SQL 代码，你当然可以打开日志记录：
- en: '[PRE48]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The logged output for this query is:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询的记录输出是：
- en: '[PRE49]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You can also do more complicated things, such as using subqueries. Here''s
    an example from [MSDN](http://msdn.microsoft.com/en-us/library/hh225374.aspx):'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以做更复杂的事情，比如使用子查询。这是来自 [MSDN](http://msdn.microsoft.com/en-us/library/hh225374.aspx)
    的一个示例：
- en: Note that, as befitting a functional approach, queries are nice and composable.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，正如函数式方法所适用的那样，查询是非常可组合的。
- en: '[PRE50]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: And if the SQL engine doesn't support certain functions such as regexes, and
    assuming the size of the data is not too large, you can just stream the data out
    and do the processing in F#.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 SQL 引擎不支持某些函数，比如正则表达式，假设数据的大小不是太大，你可以将数据流出并在 F# 中进行处理。
- en: '[PRE51]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: As you can see from the code above, the nice thing about doing the processing
    in F# is that you can define helper functions separately and connect them together
    easily.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从上面的代码中看到的，使用 F# 进行处理的好处是你可以单独定义辅助函数，并且很容易将它们连接在一起。
- en: 19\. Use F# to unit test stored procedures
  id: totrans-526
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19\. 使用 F# 进行单元测试存储过程
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/TestUpsertCustomer.fs).*'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '*这节的代码可以在 [github 上找到](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/TestUpsertCustomer.fs)。*'
- en: Now let's look at how we can use the type provider to make creating unit tests
    for stored procs really easy.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用类型提供程序来轻松创建用于存储过程的单元测试。
- en: First, I create a helper module (which I'll call `DbLib`) to set up the connection
    and to provide shared utility functions such as `resetDatabase`, which will be
    called before each test.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我创建一个辅助模块（我将称之为 `DbLib`），来设置连接并提供共享的实用函数，比如 `resetDatabase`，它将在每个测试之前调用。
- en: '[PRE52]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Now I can write a unit test, using NUnit say, just like any other unit test.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我可以编写一个单元测试，使用 NUnit 之类的工具，就像任何其他单元测试一样。
- en: Assume that we have `Customer` table, and a sproc called `up_Customer_Upsert`
    that either inserts a new customer or updates an existing one, depending on whether
    the passed in customer id is null or not.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个 `Customer` 表，以及一个名为 `up_Customer_Upsert` 的存储过程，该存储过程根据传入的客户 ID 是 null
    还是非 null 来插入新客户或更新现有客户。
- en: 'Here''s what a test looks like:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个测试的样子：
- en: '[PRE53]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Note that, because the setup is expensive, I do multiple asserts in the test.
    This could be refactored if you find this too ugly!
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于设置费用昂贵，我在测试中进行了多次断言。如果你觉得这样做太丑陋，可以重构！
- en: 'Here''s one that tests that updates work:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个测试更新是否有效的示例：
- en: '[PRE54]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'And one more, that checks for exceptions:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个，用于检查异常情况：
- en: '[PRE55]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: As you can see, the whole process is very straightforward.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，整个过程非常直接。
- en: These tests can be compiled and run as part of the continuous integration scripts.
    And what is great is that, if the database schema gets out of sync with the code,
    then the tests will fail to even compile!
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试可以编译并作为连续集成脚本的一部分运行。而且最棒的是，如果数据库架构与代码不同步，那么这些测试甚至会无法通过编译！
- en: 20\. Use FsCheck to generate random database records
  id: totrans-542
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 20\. 使用 FsCheck 生成随机数据库记录
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/InsertDummyData.fsx).*'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '*此部分代码[可在 github 上找到](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/InsertDummyData.fsx)。*'
- en: As I showed in an earlier example, you can use FsCheck to generate random data.
    In this case we'll use it to generate random records in the database.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在早期示例中所展示的，你可以使用 FsCheck 生成随机数据。在这种情况下，我们将使用它在数据库中生成随机记录。
- en: Let's say we have a `CustomerImport` table, defined as below. (We'll use this
    table in the next section on ETL)
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个 `CustomerImport` 表，定义如下。（我们将在下一节 ETL 中使用此表）
- en: '[PRE56]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Using the same code as before, we can then generate random instances of `CustomerImport`.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与之前相同的代码，我们可以生成 `CustomerImport` 的随机实例。
- en: '[PRE57]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: So far so good.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一切顺利。
- en: Now we get to the `age` column, which is nullable. This means we can't generate
    random `int`s, but instead we have to generate random `Nullable<int>`s. This is
    where type checking is really useful -- the compiler has forced us to take that
    into account. So to make sure we cover all the bases, we'll generate a null value
    one time out of twenty.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到了 `age` 列，它是可空的。这意味着我们不能生成随机的 `int`，而是必须生成随机的 `Nullable<int>`。这就是类型检查真正有用的地方——编译器已经强制我们考虑到了这一点。因此，为了确保我们覆盖所有情况，我们将每二十次生成一个空值。
- en: '[PRE58]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Putting it altogether...
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起...
- en: '[PRE59]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Once we have a random generator, we can fetch as many records as we like, and
    insert them using the type provider.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了随机生成器，我们可以获取任意数量的记录，并使用类型提供程序插入它们。
- en: In the code below, we'll generate 10,000 records, hitting the database in batches
    of 1,000 records.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们将生成 10,000 条记录，以 1,000 条记录的批次命中数据库。
- en: '[PRE60]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Finally, let's do it and time it.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来做并计时。
- en: '[PRE61]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: It's not as fast as using BCP, but it is plenty adequate for testing. For example,
    it only takes a few seconds to create the 10,000 records above.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不及使用 BCP 快速，但对于测试来说已经足够了。例如，仅需几秒钟即可创建上述的 10,000 条记录。
- en: I want to stress that this is a *single standalone script*, not a heavy binary,
    so it is really easy to tweak and run on demand.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 我要强调这是一个*单独的独立脚本*，而不是一个庞大的二进制文件，因此非常容易进行调整和按需运行。
- en: And of course you get all the goodness of a scripted approach, such as being
    able to store it in source control, track changes, etc.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以享受到脚本化方法的所有好处，比如能够将其存储在源代码控制中，跟踪更改等。
- en: 21\. Use F# to do simple ETL
  id: totrans-562
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21\. 使用 F# 进行简单的 ETL
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/EtlExample.fsx).*'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '*此部分代码[可在 github 上找到](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/SqlInFsharp/EtlExample.fsx)。*'
- en: Say that you need to transfer data from one table to another, but it is not
    a totally straightforward copy, as you need to do some mapping and transformation.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要将数据从一个表传输到另一个表，但这不是完全简单的复制，因为你需要进行一些映射和转换。
- en: This is a classic ETL (Extract/Transform/Load) situation, and most people will
    reach for [SSIS](http://en.wikipedia.org/wiki/SQL_Server_Integration_Services).
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的 ETL（提取/转换/加载）情况，大多数人会选择[SSIS](http://en.wikipedia.org/wiki/SQL_Server_Integration_Services)。
- en: But for some situations, such as one off imports, and where the volumes are
    not large, you could use F# instead. Let's have a look.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 但对于一些情况，比如一次性导入，并且数据量不大的情况下，你可以使用 F#。我们来看一下。
- en: 'Say that we are importing data into a master table that looks like this:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在将数据导入到一个主表中，看起来像这样：
- en: '[PRE62]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'But the system we''re importing from has a different format, like this:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们正在导入的系统有一个不同的格式，像这样：
- en: '[PRE63]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'As part of this import then, we''re going to have to:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 作为这次导入的一部分，我们将不得不：
- en: Concatenate the `FirstName` and `LastName` columns into one `Name` column
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`FirstName`和`LastName`列连接成一个`Name`列
- en: Map the `EmailAddress` column to the `Email` column
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`EmailAddress`列映射到`Email`列
- en: Calculate a `Birthdate` given an `Age`
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定一个`年龄`计算`出生日期`
- en: I'm going to skip the `CustomerId` for now -- hopefully we aren't using IDENTITY
    columns in practice.
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我现在要跳过`CustomerId` -- 希望我们实际上没有在使用 IDENTITY 列。
- en: The first step is to define a function that maps source records to target records.
    In this case, we'll call it `makeTargetCustomer`.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是定义一个将源记录映射到目标记录的函数。在这种情况下，我们将其称为`makeTargetCustomer`。
- en: 'Here''s some code for this:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些代码：
- en: '[PRE64]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: With this transform in place, the rest of the code is easy, we just just read
    from the source and write to the target.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个转换，其余的代码就很容易了，我们只需从源读取并写入目标。
- en: '[PRE65]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Because these are sequence operations, only one record at a time is in memory
    (excepting the LINQ submit buffer), so even large data sets can be processed.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这些是序列操作，每次只有一条记录在内存中（除了 LINQ 提交缓冲区），所以即使是大型数据集也可以被处理。
- en: 'To see it in use, first insert a number of records using the dummy data script
    just discussed, and then run the transfer as follows:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 要看它的使用情况，首先使用刚讨论的虚拟数据脚本插入多条记录，然后按以下方式运行传输：
- en: '[PRE66]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Again, it only takes a few seconds to transfer 10,000 records.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，转移 10,000 条记录只需要几秒钟。
- en: And again, this is a *single standalone script* -- it's a very lightweight way
    to create simple ETL jobs.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这是一个*单独的独立脚本* -- 这是创建简单 ETL 作业的非常轻量级的方式。
- en: 22\. Use F# to generate SQL Agent scripts
  id: totrans-586
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 22\. 使用 F# 生成 SQL Agent 脚本
- en: For the last database related suggestion, let me suggest the idea of generating
    SQL Agent scripts from code.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最后一个与数据库相关的建议，让我提出从代码生成 SQL Agent 脚本的想法。
- en: In any decent sized shop you may have hundreds or thousands of SQL Agent jobs.
    In my opinion, these should all be stored as script files, and loaded into the
    database when provisioning/building the system.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何体量较大的商店中，你可能会有数百甚至数千个 SQL Agent 作业。在我看来，这些应该都存储为脚本文件，并在系统配置/构建时加载到数据库中。
- en: 'Alas, there are often subtle differences between dev, test and production environments:
    connection strings, authorization, alerts, log configuration, etc.'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，开发、测试和生产环境之间经常存在微妙的差异：连接字符串、授权、警报、日志配置等。
- en: 'That naturally leads to the problem of trying to keep three different copies
    of a script around, which in turn makes you think: why not have *one* script and
    parameterize it for the environment?'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 这自然会导致一个问题，即尝试保留三个不同副本的脚本，这又让你想到：为什么不只有*一个*脚本，并为环境参数化呢？
- en: But now you are dealing with lots of ugly SQL code! The scripts that create
    SQL agent jobs are typically hundreds of lines long and were not really designed
    to be maintained by hand.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在你正在处理大量丑陋的 SQL 代码！创建 SQL Agent 作业的脚本通常有数百行长，并不是真的设计成手动维护的。
- en: F# to the rescue!
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: F# 来拯救！
- en: In F#, it's really easy to create some simple record types that store all the
    data you need to generate and configure a job.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 在 F# 中，创建一些简单的记录类型来存储生成和配置作业所需的所有数据非常容易。
- en: 'For example, in the script below:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在下面的脚本中：
- en: I created a union type called `Step` that could store a `Package`, `Executable`,
    `Powershell` and so on.
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我创建了一个称为`Step`的联合类型，可以存储`Package`、`Executable`、`Powershell`等。
- en: Each of these step types in turn have their own specific properties, so that
    a `Package` has a name and variables, and so on.
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些步骤类型各自具有自己特定的属性，因此`Package`有一个名称和变量，依此类推。
- en: A `JobInfo` consists of a name plus a list of `Step`s.
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`JobInfo`由一个名称加上一个`Step`列表组成。
- en: An agent script is generated from a `JobInfo` plus a set of global properties
    associated with an environment, such as the databases, shared folder locations,
    etc.
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个代理脚本是从一个`JobInfo`加上与环境相关的一组全局属性生成的，比如数据库、共享文件夹位置等。
- en: '[PRE67]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: I can't share the actual F# code, but I think you get the idea. It's quite simple
    to create.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 我不能分享实际的 F# 代码，但我想你明白了。创建起来非常简单。
- en: Once we have these .FSX files, we can generate the real SQL Agent scripts en-masse
    and then deploy them to the appropriate servers.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了这些 .FSX 文件，我们就可以批量生成真正的 SQL Agent 脚本，然后将它们部署到适当的服务器上。
- en: Below is an example of a SQL Agent script that might be generated automatically
    from the .FSX file.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个 SQL 代理脚本的示例，可能是从 .FSX 文件自动生成的。
- en: As you can see, it is a nicely laid out and formatted T-SQL script. The idea
    is that a DBA can review it and be confident that no magic is happening, and thus
    be willing to accept it as input.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这是一个布局良好、格式化良好的 T-SQL 脚本。其想法是，数据库管理员可以审查它，并确信没有任何奇怪的地方，因此愿意接受它作为输入。
- en: On the other hand, it would be risky to maintain scripts like. Editing the SQL
    code directly could be risky. Better to use type-checked (and more concise) F#
    code than untyped T-SQL!
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，维护诸如此类的脚本可能存在风险。直接编辑 SQL 代码可能存在风险。最好使用经过类型检查（更简洁）的 F# 代码，而不是未经类型检查的 T-SQL！
- en: '[PRE68]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Summary
  id: totrans-606
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: I hope that this set of suggestions has thrown a new light on what F# can be
    used for.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这些建议能够让你对可以使用 F# 做什么有新的认识。
- en: In my opinion, the combination of concise syntax, lightweight scripting (no
    binaries) and SQL type providers makes F# incredibly useful for database related
    tasks.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，简洁的语法、轻量级脚本编写（无需二进制文件）以及 SQL 类型提供程序的组合使得 F# 在处理与数据库相关的任务时非常有用。
- en: Please leave a comment and let me know what you think.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 请留下评论，让我知道你的想法。
- en: Other interesting ways of using F# at work
  id: totrans-610
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在工作中使用 F# 的其他有趣方式
- en: Other interesting ways of using F# at work
  id: totrans-611
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在工作中使用 F# 的其他有趣方式
- en: This post is the conclusion of the series on [low-risk and incremental ways
    to use F# at work](low-risk-ways-to-use-fsharp-at-work1.html).
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章是关于[在工作中低风险和渐进式使用 F# 的系列](low-risk-ways-to-use-fsharp-at-work1.html)的结论。
- en: To wrap up, we'll look at a few more ways in which F# can help you with various
    development tasks around the edges, without impacting any core or mission critical
    code.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们将看一些更多的方式，F# 如何帮助你处理各种开发任务，而不影响任何核心或关键任务代码。
- en: Series contents
  id: totrans-614
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系列内容
- en: 'Before moving on to the content of the post, here''s the full list of the twenty
    six ways:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入帖子的内容之前，这是二十六种方法的完整列表：
- en: '**Part 1 - Using F# to explore and develop interactively**'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 1 部分 - 使用 F# 进行交互式探索和开发**'
- en: '[1\. Use F# to explore the .NET framework interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '[1\. 使用 F# 交互式地探索 .NET 框架](low-risk-ways-to-use-fsharp-at-work1.html#explore-net-interactively)'
- en: '[2\. Use F# to test your own code interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '[2\. 使用 F# 交互式地测试自己的代码](low-risk-ways-to-use-fsharp-at-work1.html#explore-own-code-interactively)'
- en: '[3\. Use F# to play with webservices interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '[3\. 使用 F# 与网络服务进行交互式操作](low-risk-ways-to-use-fsharp-at-work1.html#explore-webservices-interactively)'
- en: '[4\. Use F# to play with UI''s interactively](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '[4\. 使用 F# 与 UI 进行交互式操作](low-risk-ways-to-use-fsharp-at-work1.html#explore-winforms-interactively)'
- en: '**Part 2 - Using F# for development and devops scripts**'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 2 部分 - 使用 F# 进行开发和 DevOps 脚本**'
- en: '[5\. Use FAKE for build and CI scripts](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '[5\. 使用 FAKE 编写构建和 CI 脚本](low-risk-ways-to-use-fsharp-at-work-2.html#fake)'
- en: '[6\. An F# script to check that a website is responding](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '[6\. 使用 F# 脚本检查网站是否响应](low-risk-ways-to-use-fsharp-at-work-2.html#dev-website-responding)'
- en: '[7\. An F# script to convert an RSS feed into CSV](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '[7\. 使用 F# 脚本将 RSS 订阅转换为 CSV](low-risk-ways-to-use-fsharp-at-work-2.html#dev-rss-to-csv)'
- en: '[8\. An F# script that uses WMI to check the stats of a process](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '[8\. 使用 F# 脚本使用 WMI 检查进程的统计信息](low-risk-ways-to-use-fsharp-at-work-2.html#dev-wmi-stats)'
- en: '[9\. Use F# for configuring and managing the cloud](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '[9\. 使用 F# 进行云配置和管理](low-risk-ways-to-use-fsharp-at-work-2.html#dev-cloud)'
- en: '**Part 3 - Using F# for testing**'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 3 部分 - 使用 F# 进行测试**'
- en: '[10\. Use F# to write unit tests with readable names](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '[10\. 使用 F# 以可读名称编写单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-nunit)'
- en: '[11\. Use F# to run unit tests programmatically](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '[11\. 使用 F# 以编程方式运行单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-runner)'
- en: '[12\. Use F# to learn to write unit tests in other ways](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '[12\. 使用 F# 学习以其他方式编写单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-other)'
- en: '[13\. Use FsCheck to write better unit tests](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '[13\. 使用 FsCheck 编写更好的单元测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-fscheck)'
- en: '[14\. Use FsCheck to create random dummy data](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '[14\. 使用 FsCheck 创建随机虚拟数据](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)'
- en: '[15\. Use F# to create mocks](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '[15\. 使用 F# 创建模拟对象](low-risk-ways-to-use-fsharp-at-work-3.html#test-mock)'
- en: '[16\. Use F# to do automated browser testing](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '[16\. 使用 F# 进行自动化浏览器测试](low-risk-ways-to-use-fsharp-at-work-3.html#test-canopy)'
- en: '[17\. Use F# for Behaviour Driven Development](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '[17\. 使用 F# 进行行为驱动开发](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd)'
- en: '**Part 4\. Using F# for database related tasks**'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 4 部分：使用 F# 处理数据库相关任务**'
- en: '[18\. Use F# to replace LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '[18\. 使用 F# 替代 LINQpad](low-risk-ways-to-use-fsharp-at-work-4.html#sql-linqpad)'
- en: '[19\. Use F# to unit test stored procedures](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '[19\. 使用 F# 对存储过程进行单元测试](low-risk-ways-to-use-fsharp-at-work-4.html#sql-testprocs)'
- en: '[20\. Use FsCheck to generate random database records](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '[20\. 使用 FsCheck 生成随机数据库记录](low-risk-ways-to-use-fsharp-at-work-4.html#sql-randomdata)'
- en: '[21\. Use F# to do simple ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '[21\. 使用 F# 进行简单的 ETL](low-risk-ways-to-use-fsharp-at-work-4.html#sql-etl)'
- en: '[22\. Use F# to generate SQL Agent scripts](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '[22\. 使用 F# 生成 SQL Agent 脚本](low-risk-ways-to-use-fsharp-at-work-4.html#sql-sqlagent)'
- en: '**Part 5: Other interesting ways of using F#**'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '**第 5 部分：使用 F# 的其他有趣方法**'
- en: '[23\. Use F# for parsing](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: '[23\. 使用 F# 进行解析](low-risk-ways-to-use-fsharp-at-work-5.html#other-parsers)'
- en: '[24\. Use F# for diagramming and visualization](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '[24\. 使用 F# 进行绘图和可视化](low-risk-ways-to-use-fsharp-at-work-5.html#other-diagramming)'
- en: '[25\. Use F# for accessing web-based data stores](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '[25\. 使用 F# 访问基于 web 的数据存储](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-access)'
- en: '[26\. Use F# for data science and machine learning](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '[26\. 使用 F# 进行数据科学和机器学习](low-risk-ways-to-use-fsharp-at-work-5.html#other-data-science)'
- en: '[(BONUS) 27: Balance the generation schedule for the UK power station fleet](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: '[(奖励) 27: 平衡英国发电站的发电计划](low-risk-ways-to-use-fsharp-at-work-5.html#other-balance-power)'
- en: '* * *'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Part 5: Other ways of using F# outside the core'
  id: totrans-649
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 5 部分：F# 在核心之外的其他用法
- en: This last group of suggestions is a bit of a mish-mash I'm afraid. These are
    things that didn't fit into earlier posts, mostly concerning using F# for analysis
    and data processing.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 这组建议的最后一部分有点杂乱，我怕是这些东西之前的帖子中都没有提到，主要是关于使用 F# 进行分析和数据处理的。
- en: 23\. Use F# for parsing
  id: totrans-651
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 23\. 使用 F# 进行解析
- en: 'It is surprising how often you need to parse something in the course of routine
    development: splitting strings at spaces, reading a CSV file, doing substitutions
    in a template, finding HTML links for a web crawler, parsing a query string in
    a URI, and so on.'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，在日常开发中经常需要解析某些内容：在空格处拆分字符串，读取 CSV 文件，在模板中执行替换，在 web 爬虫中查找 HTML 链接，在 URI
    中解析查询字符串，等等。
- en: F#, being an ML-derived language, is ideal for parsing tasks of all kinds, from
    simple regexes to full fledged parsers.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: F# 作为一种源自 ML 的语言，非常适合各种解析任务，从简单的正则表达式到完整的解析器。
- en: Of course, there are many off-the-shelf libraries for common tasks, but sometimes
    you need to write your own. A good example of this is TickSpec, the BDD framework
    that [we saw earlier](low-risk-ways-to-use-fsharp-at-work-3.html#test-bdd).
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有许多常见任务的现成库，但有时您需要自己编写。TickSpec 就是一个很好的例子，这是一个 BDD 框架，我们之前就看过了。
- en: TickSpec needs to parse the so-called "Gherkin" format of Given/When/Then. Rather
    than create a dependency on another library, I imagine that it was easier (and
    more fun) for [Phil](http://trelford.com/blog/post/TickSpec.aspx) to write his
    own parser in a few hundred lines. You can see part of the [source code here](http://tickspec.codeplex.com/SourceControl/latest#TickSpec/LineParser.fs).
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: TickSpec 需要解析所谓的 "Gherkin" 格式的 Given/When/Then。与其依赖另一个库，我想 [Phil](http://trelford.com/blog/post/TickSpec.aspx)
    写几百行自己的解析器更容易（也更有趣）。你可以在 [这里看到部分源代码](http://tickspec.codeplex.com/SourceControl/latest#TickSpec/LineParser.fs)。
- en: Another situation where it might be worth writing your own parser is when you
    have some complex system, such as a rules engine, which has a horrible XML configuration
    format. Rather than manually editing the configuration, you could create a very
    simple domain specific language (DSL) that is parsed and then converted to the
    complex XML.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能值得编写自己的解析器的情况是当你有一些复杂的系统，比如一个有可怕的 XML 配置格式的规则引擎。与其手动编辑配置，不如创建一个非常简单的领域特定语言（DSL）来解析，然后转换为复杂的
    XML。
- en: In [his book on DSLs](http://ptgmedia.pearsoncmg.com/images/9780321712943/samplepages/0321712943.pdf),
    Martin Fowler gives an example of this, [a DSL that is parsed to create a state
    machine](http://www.informit.com/articles/article.aspx?p=1592379&seqNum=3). And
    here is an [F# implementation](http://www.fssnip.net/5h) of that DSL.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 在[他关于 DSL 的书中](http://ptgmedia.pearsoncmg.com/images/9780321712943/samplepages/0321712943.pdf)
    ，Martin Fowler 给出了一个例子，[一个被解析以创建状态机的 DSL](http://www.informit.com/articles/article.aspx?p=1592379&seqNum=3)。这里是那个
    DSL 的 [F# 实现](http://www.fssnip.net/5h)。
- en: For more complicating parsing tasks, I highly recommend using [FParsec](http://www.quanttec.com/fparsec/),
    which is perfectly suited for this kind of thing. For example, it has been used
    for parsing [search queries for FogCreek](http://blog.fogcreek.com/fparsec/),
    [CSV files](http://blog.jb55.com/post/4247991875/f-csv-parsing-with-fparsec),
    [chess notation](http://github.com/iigorr/pgn.net), and a [custom DSL for load
    testing scenarios](http://www.frenk.com/2012/01/real-world-f-my-experience-part-two/).
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的解析任务，我强烈建议使用 [FParsec](http://www.quanttec.com/fparsec/)，它非常适合这种情况。例如，它已经被用于解析
    [FogCreek 的搜索查询](http://blog.fogcreek.com/fparsec/)，[CSV 文件](http://blog.jb55.com/post/4247991875/f-csv-parsing-with-fparsec)，[国际象棋记谱](http://github.com/iigorr/pgn.net)，以及一个[用于负载测试场景的自定义
    DSL](http://www.frenk.com/2012/01/real-world-f-my-experience-part-two/)。
- en: 24\. Use F# for diagramming and visualization
  id: totrans-659
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 24\. 使用 F# 进行图表和可视化
- en: Once you have parsed or analyzed something, it is always nice if you can display
    the results visually, rather than as tables full of data.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你解析或分析了某些东西，最好能以可视化的方式显示结果，而不是作为充满数据的表格。
- en: 'For example, in a [previous post](cycles-and-modularity-in-the-wild.html) I
    used F# in conjunction with [GraphViz](http://www.graphviz.org/) to create diagrams
    of dependency relationships. You can see a sample below:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在[之前的一篇文章](cycles-and-modularity-in-the-wild.html)中，我使用了 F# 与 [GraphViz](http://www.graphviz.org/)
    结合来创建依赖关系图表。你可以看到下面的一个示例：
- en: '![](tickspec_svg.png)'
  id: totrans-662
  prefs: []
  type: TYPE_IMG
  zh: '![](tickspec_svg.png)'
- en: The code to generate the diagram itself was short, only about 60 lines, which
    you can [see here](http://gist.github.com/swlaschin/5742974#file-type-dependency-graph-fsx-L428).
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 生成图表本身的代码很简短，只有约 60 行，你可以[在这里看到](http://gist.github.com/swlaschin/5742974#file-type-dependency-graph-fsx-L428)。
- en: As an alternative to GraphViz, you could also consider using [FSGraph](http://github.com/piotrosz/FSGraph).
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 GraphViz 的替代方案，你也可以考虑使用 [FSGraph](http://github.com/piotrosz/FSGraph)。
- en: 'For more mathematical or data-centric visualizations, there are a number of
    good libraries:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更多数学或数据中心的可视化，有许多好的库：
- en: '[FSharp.Charting](http://fsharp.github.io/FSharp.Charting/) for desktop visualizations
    that is well integrated with F# scripting.'
  id: totrans-666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[FSharp.Charting](http://fsharp.github.io/FSharp.Charting/) 用于与 F# 脚本集成良好的桌面可视化。'
- en: '[FsPlot](http://github.com/TahaHachana/FsPlot) for interactive visualizations
    in HTML.'
  id: totrans-667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[FsPlot](http://github.com/TahaHachana/FsPlot) 用于 HTML 中的交互式可视化。'
- en: '[VegaHub](http://github.com/panesofglass/VegaHub), an F# library for working
    with [Vega](http://trifacta.github.io/vega/)'
  id: totrans-668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[VegaHub](http://github.com/panesofglass/VegaHub)，一个用于与 [Vega](http://trifacta.github.io/vega/)
    一起工作的 F# 库'
- en: '[F# for Visualization](http://www.ffconsultancy.com/products/fsharp_for_visualization/index.html)'
  id: totrans-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[F# for Visualization](http://www.ffconsultancy.com/products/fsharp_for_visualization/index.html)'
- en: And finally, there's the 800 lb gorilla -- Excel.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一个 800 磅的大猩猩 -- Excel。
- en: Using the built-in capabilities of Excel is great, if it is available. And F#
    scripting plays well with Excel.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Excel 的内置功能非常好，如果可用的话。而且 F# 脚本与 Excel 配合得很好。
- en: You can [chart in Excel](http://msdn.microsoft.com/en-us/library/vstudio/hh297098.aspx),
    [plot functions in Excel](http://www.clear-lines.com/blog/post/Plot-functions-from-FSharp-to-Excel.aspx),
    and for even more power and integration, you have the [FCell](http://fcell.io/)
    and [Excel-DNA](http://excel-dna.net/) projects.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以[在 Excel 中绘制图表](http://msdn.microsoft.com/en-us/library/vstudio/hh297098.aspx)，[在
    Excel 中绘制函数图像](http://www.clear-lines.com/blog/post/Plot-functions-from-FSharp-to-Excel.aspx)，而且为了更强大的功能和集成，你还有
    [FCell](http://fcell.io/) 和 [Excel-DNA](http://excel-dna.net/) 项目。
- en: 25\. Use F# for accessing web-based data stores
  id: totrans-673
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 25\. 使用 F# 访问基于 web 的数据存储
- en: There is a lot of public data out on the web, just waiting to pulled down and
    loved. With the magic of type providers, F# is a good choice for direct integrating
    these web-scale data stores into your workflow.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上有大量的公共数据，等待被下载和使用。借助类型提供程序的魔力，F# 是将这些 Web 规模的数据存储直接集成到你的工作流程中的不错选择。
- en: 'Right now, we''ll look at two data stores: Freebase and World Bank. More will
    be available soon -- see the [fsharp.org Data Access page](http://fsharp.org/data-access/)
    for the latest information.'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看两个数据存储：Freebase 和 世界银行。更多内容即将推出 -- 请查看 [fsharp.org 数据访问页面](http://fsharp.org/data-access/)
    获取最新信息。
- en: Freebase
  id: totrans-676
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Freebase
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/freebase.fsx).*'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节的代码在 [github 上可用](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/freebase.fsx)。*'
- en: '[Freebase](http://en.wikipedia.org/wiki/Freebase) is a large collaborative
    knowledge base and online collection of structured data harvested from many sources.'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '[Freebase](http://en.wikipedia.org/wiki/Freebase) 是一个大型的协作知识库和从多个来源采集的结构化数据的在线集合。'
- en: To get started, just link in the type provider DLL as we have seen before.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，只需像之前一样链接类型提供程序的 DLL。
- en: The site is throttled, so you'll probably need an API key if you're using it
    a lot ([api details here](http://developers.google.com/console/help/?csw=1#activatingapis))
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 该站点受到限制，所以如果你经常使用它，你可能需要一个 API 密钥 ([API 详情在这里](http://developers.google.com/console/help/?csw=1#activatingapis))。
- en: '[PRE69]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Once the type provider is loaded, you can start asking questions, such as...
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提供程序加载完成后，你可以开始提出问题，比如...
- en: '*"Who are the US presidents?"*'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '*"美国总统是谁？"*'
- en: '[PRE70]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Result:'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '[PRE71]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Not bad for just four lines of code!
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅四行代码，效果不错！
- en: How about *"what awards did Casablanca win?"*
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '*"卡萨布兰卡赢得了哪些奖项？"*'
- en: '[PRE72]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The result is:'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE73]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: So that's Freebase. Lots of good information, both useful and frivolous.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是 Freebase。有很多有用的和轻浮的信息。
- en: '[More on how to use the Freebase type provider](http://fsharp.github.io/FSharp.Data/library/Freebase.html).'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多关于如何使用 Freebase 类型提供程序的信息](http://fsharp.github.io/FSharp.Data/library/Freebase.html)。'
- en: Using Freebase to generate realistic test data
  id: totrans-694
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Freebase 生成逼真的测试数据
- en: We've seen how FsCheck can be used to [generate test data](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy).
    Well, you can also get the same affect by getting data from Freebase, which makes
    the data much more realistic.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了 FsCheck 如何用于[生成测试数据](low-risk-ways-to-use-fsharp-at-work-3.html#test-dummy)。同样，你也可以通过从
    Freebase 获取数据来达到相同的效果，这样数据会更加逼真。
- en: '[Kit Eason](http://twitter.com/kitlovesfsharp) showed how to do this in a [tweet](http://twitter.com/kitlovesfsharp/status/296240699735695360),
    and here''s an example based on his code:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: '[Kit Eason](http://twitter.com/kitlovesfsharp) 在一条 [推文](http://twitter.com/kitlovesfsharp/status/296240699735695360)
    中展示了如何做到这一点，这里是基于他的代码的示例：'
- en: '[PRE74]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The results are:'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE75]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: World Bank
  id: totrans-700
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 世界银行
- en: '*The code for this section is [available on github](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/world-bank.fsx).*'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节的代码在 [github 上可用](http://github.com/swlaschin/low-risk-ways-to-use-fsharp-at-work/blob/master/world-bank.fsx)。*'
- en: On the other extreme from Freebase is the [World Bank Open Data](http://data.worldbank.org/),
    which has lots of detailed economic and social information from around the world.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Freebase 相反的极端是 [世界银行开放数据](http://data.worldbank.org/)，该网站提供了来自世界各地的大量详细的经济和社会信息。
- en: The setup is identical to Freebase, but no API key is needed.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 设置与 Freebase 相同，但不需要 API 密钥。
- en: '[PRE76]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'With the type provider set up, we can do a serious query, such as:'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好类型提供程序后，我们可以进行严肃的查询，比如：
- en: '*"How do malnutrition rates compare between low income and high income countries?"*'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '*"低收入国家和高收入国家的营养不良率如何比较？"*'
- en: '[PRE77]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The result is:'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE78]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Similarly, here is the code to compare maternal mortality rates:'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，这里是用于比较孕产妇死亡率的代码：
- en: '[PRE79]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The result is:'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE80]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[More on how to use the World Bank type provider](http://fsharp.github.io/FSharp.Data/library/WorldBank.html).'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多关于如何使用世界银行类型提供程序的信息](http://fsharp.github.io/FSharp.Data/library/WorldBank.html)。'
- en: 26\. Use F# for data science and machine learning
  id: totrans-715
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 26\. 使用 F# 进行数据科学和机器学习
- en: So you're putting all these suggestions into practice. You're parsing your web
    logs with FParsec, extracting stats from your internal databases with the SQL
    type provider, and pulling down external data from web services. You've got all
    this data -- what can you do with it?
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你正在将所有这些建议付诸实践。你正在使用 FParsec 解析你的网络日志，使用 SQL 类型提供程序从内部数据库中提取统计数据，并从 Web 服务中提取外部数据。你有这么多的数据
    -- 你可以做什么呢？
- en: Let's finish up by having a quick look at using F# for data science and machine
    learning.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们最后快速看一下如何使用 F# 进行数据科学和机器学习。
- en: As we have seen, F# is great for exploratory programming -- it has a REPL with
    intellisense. But unlike Python and R, your code is type checked, so you know
    that your code is not going to fail with an exception halfway through a two hour
    processing job!
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，F#非常适合探索式编程——它具有具有智能感知的 REPL。但与Python和R不同，你的代码是经过类型检查的，所以你知道你的代码不会在处理两小时后出现异常！
- en: If you are familiar with the Pandas library from Python or the ?tseries' package
    in R, then you should take a serious look at [Deedle](http://bluemountaincapital.github.io/Deedle/),
    an easy-to-use, high quality package for data and time series manipulation. Deedle
    is designed to work well for exploratory programming using the REPL, but can be
    also used in efficient compiled .NET code.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉Python中的Pandas库或R中的`tseries`包，那么你应该认真看看[Deedle](http://bluemountaincapital.github.io/Deedle/)，这是一个易于使用、高质量的数据和时间序列操作包。Deedle旨在在REPL中进行探索式编程时表现良好，但也可以在高效的编译后.NET代码中使用。
- en: And if you use R a lot, there's an [R type provider](http://bluemountaincapital.github.io/FSharpRProvider)(of
    course). This means you can use R packages as if they were .NET libraries. How
    awesome is that!
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你经常使用 R，当然会有一个[R 类型提供者](http://bluemountaincapital.github.io/FSharpRProvider)。这意味着你可以像使用
    .NET 库一样使用 R 包。多么令人惊讶的事情！
- en: There's lots of other F# friendly packages too. You can find out all about them
    at fsharp.org.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多其他友好的F#包。你可以在fsharp.org找到关于它们的所有信息。
- en: '[Data science](http://fsharp.org/data-science/)'
  id: totrans-722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学](http://fsharp.org/data-science/)'
- en: '[Math](http://fsharp.org/math/)'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数学](http://fsharp.org/math/)'
- en: '[Machine learning](http://fsharp.org/machine-learning)'
  id: totrans-724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习](http://fsharp.org/machine-learning)'
- en: '* * *'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Series summary
  id: totrans-726
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系列摘要
- en: Phew! That was a long list of examples and a lot of code to look at. If you've
    made it to the end, congratulations!
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 哦！这是一个很长的例子列表，也是很多代码需要查看的。如果你看到了结尾，恭喜你！
- en: I hope that this has given you some new insights into the value of F#. It's
    not just a math-y or financial language -- it's a practical one too. And it can
    help you with all sorts of things in your development, testing, and data management
    workflows.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这给了你一些关于 F# 价值的新见解。它不仅仅是一种数学或金融语言，它也是一种实用的语言。它可以帮助你处理开发、测试和数据管理工作流中的各种事务。
- en: Finally, as I have stressed throughout this series, all these uses are safe,
    low risk and incremental. What's the worst that can happen?
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，正如我在整个系列中强调的那样，所有这些用途都是安全的、低风险的、增量的。最糟糕的情况是什么？
- en: So go on, persuade your team mates and boss to give F# a try, and let me know
    how it goes.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，继续说服你的队友和老板试用 F#，然后告诉我结果如何。
- en: Postscript
  id: totrans-731
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后记
- en: After I posted this, Simon Cousins tweeted that I missed one -- I can't resist
    adding it.
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 在我发布这篇文章后，Simon Cousins发推文说我漏掉了一个——我忍不住要补充一下。
- en: '[@ScottWlaschin](https://twitter.com/ScottWlaschin) 27: balance the generation
    schedule for the uk power station fleet. seriously, the alternative to [#fsharp](https://twitter.com/search?q=%23fsharp&src=hash)
    was way too risky'
  id: totrans-733
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[@ScottWlaschin](https://twitter.com/ScottWlaschin) 27: 平衡英国电站机组的发电计划。严肃地说，除了[#fsharp](https://twitter.com/search?q=%23fsharp&src=hash)，没有其他更危险的选择。'
- en: ''
  id: totrans-734
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — Simon Cousins (@simontcousins) [April 25, 2014](https://twitter.com/simontcousins/statuses/459591939902697472)
  id: totrans-735
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — Simon Cousins (@simontcousins) [2014年4月25日](https://twitter.com/simontcousins/statuses/459591939902697472)
- en: You can read more about Simon's real-world of use of F# (for power generation)
    on [his blog](http://www.simontylercousins.net/does-the-language-you-use-make-a-difference-revisited/).
    There are more testimonials to F# at [fsharp.org](http://fsharp.org/testimonials/).
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[他的博客](http://www.simontylercousins.net/does-the-language-you-use-make-a-difference-revisited/)上阅读更多关于Simon使用F#（用于发电）的真实案例。在[fsharp.org](http://fsharp.org/testimonials/)上还有更多关于F#的推荐。
