["```\nint main(int arcg, char **argv) {\n  // our code\n} \n```", "```\nuse std::env;\nfn main() {\n    for argument in env::args() {\n        println!(\"{}\", argument);\n    }\n} \n```", "```\nuse std::env;\nuse std::collections::HashSet;\nfn main() {\n    let args: HashSet<String> = env::args().collect();\n    let verbose_flag = args.contains(\"--verbose\");\n} \n```", "```\n[dependencies]\nclap = \"2.27\" \n```", "```\n#[macro_use] extern crate clap;\nuse clap::*;\nfn main() {\n  let matches = App::new(\"Sample App\")\n    .author(\"My Name <myname@foocorp.com>\")\n    .about(\"Sample application\")\n    .arg(Arg::with_name(\"T\")\n        .long(\"timetowait\")\n        .help(\"Waits some period of time for something to happen\")\n        .default_value(\"10\")\n        .takes_value(true)\n        .possible_values(&[\"10\", \"20\", \"30\"])\n        .required(false))\n    .get_matches();\n\n  let time_to_wait = value_t_or_exit!(matches, \"T\", u32);\n  println!(\"Time to wait value is {}\", time_to_wait);\n} \n```", "```\nfn main() {\n    //... my code\n    std::os::set_exit_status(1);\n} \n```", "```\nrustc -O hw.rs \n```", "```\nSRCS = main.o pacman.o sprites.o sfx.o\nOBJS = $(SRCS:.cpp=.o)\nEXE = pacman\n$(EXE): $(OBJS)\n    $(CC) $(CFLAGS) -o $(EXE) $(OBJS)\n.cpp.o:\n    $(CC) $(CFLAGS) -c $< -o $@ \n```", "```\nmod pacman;\n\nfn main() {\n  let mut game = pacman::Game::new();\n  game.start();\n} \n```", "```\ncargo new hello_world \u2013bin \n```", "```\nhello_world/\n  .git/ (git repo)\n  .gitignore\n  Cargo.toml\n  src/\n    main.rs \n```", "```\ncargo build \n```", "```\ncargo build --release \n```", "```\ncargo test \n```", "```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nauthors = [\"Joe Blogs <jbloggs@somewhere.com>\"]\n\n[dependencies]\ntime = \"0.1.35\" \n```", "```\nextern crate time;\n\nfn main() {\n  let now = time::PreciseTime::now();\n  println!(\"The time is {:?}\", now);\n} \n```"]