["```\n(define (list-ref lst n)\n  (if (= n 0)\n      (car lst)\n      (list-ref (cdr lst) (- n 1)))) \n```", "```\n-> (define squares (list 1 4 9 16 25))\nsquares\n-> (list-ref squares 3)\n16 \n```", "```\n(null? (list 1 3))\n#f\n\n(null? '())\n#t \n```", "```\n(define (length items)\n  (if (null? items)\n      0\n      (+ 1 (length (cdr items))))) \n```", "```\n-> (define odds (list 1 3 5 7))\nodds\n-> (length odds)\n4 \n```", "```\n(define (map proc items)\n  (if (null? items)\n      null\n      (cons (proc (car items))\n            (map proc (cdr items))))) \n```", "```\n-> (map square (list 1 2 3 4 5))\n(1 4 9 16 25)\n-> (map car (list (cons 1 2) (cons 3 4) (cons 5 6)))\n(1 3 5) \n```", "```\n(define (filter pred lst)\n  (cond ((null? lst) null)\n        ((pred (car lst))\n          (cons (car lst) (filter pred (cdr lst))))\n        (else (filter pred (cdr lst))))) \n```", "```\n-> (filter odd? '(1 2 3 4 5))\n(1 3 5)\n-> (filter (lambda (x) (> x 2)) '(1 2 3 4 5))\n(3 4 5) \n```", "```\n-> (foldl cons '() '(1 2 3 4))\n... (cons 4 (cons 3 (cons 2 (cons 1 '()))))\n(4 3 2 1) \n```", "```\n-> (define combiner (lambda (x y) (cons (add1 x) y)))\ncombiner\n(foldl combiner '() '(1 2 3 4))\n... (combiner 4 (combiner 3 (combiner 2 (combiner 1 '()))))\n... (5 . (4 . (3 . (2 . ()))))\n(5 4 3 2) \n```", "```\n-> (foldr cons '() '(1 2 3 4))\n... (cons 1 (cons 2 (cons 3 (cons 4 '()))))\n(1 2 3 4)\n\n-> (foldr + 0 '(1 2 3 4))\n... (+ 1 (+ 2 (+ 3 (+ 4 0))))\n10 \n```"]