- en: Lecture 26 - Demos, Reservations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Final exam date
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comments from yesterday's demo
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We had a positive impression
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It is normal for groups to be a different levels, because it is unpredictable
    when the 48 hou and 72-hour bugs will appear
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that this milestone had three discrete parts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing the stopping distance
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing where the train is when travelling at a fixed speed
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing where the train is when accelerating and decelerating
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: There were a variety of ways for doing accel/decel
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All the ones we saw will work
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We don't know enough to assess how time-efficient different approaches are.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a workaround for acceleration/deceleration that works pretty well
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Try using one dynamic parameter to tune all the other parameters
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Normalized units are very helpful here
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A good UI shows you a lot of information that is useful when something funny
    occurs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: E.g. a turn-out switches under a traveling train
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Was the train ahead of its calibration? Or was the switch command given too
    late?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Some groups had demos that seemed unsatisfactory because everything was 80%
    done
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two parts operating robustly is
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: more impressive and easier to judge for your audience
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: more encouraging to you
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: quicker to accomplish
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: than three parts that are 80% complete
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Some things we saw may give problems when you have more than one train on the
    tracks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting all the switches at once
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Refinding the train as standard operating procedure
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Not keeping track of train position as it is stopping
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Sensor Attribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Predictions work fine once you know where the trains are. How do you find them
    at the beginning?
  prefs: []
  type: TYPE_NORMAL
- en: Easy when there is only one train on the track
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move it very slowly until you encounter a sensor, now you know where it is
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Not a bad idea to get a second sensor to confirm direction.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hard when there is more than one train on the track
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To which train do you attribute the next sensor hit
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Trains may collide before they are found
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How might you do this for multiple trains?
  prefs: []
  type: TYPE_NORMAL
- en: One at a time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting the next train
  prefs: []
  type: TYPE_NORMAL
- en: Stop the previous trains in convenient places
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start start this train slowly, you don't know where it is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When it hits a sensor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: make a prediction about the next sensor it will hit
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: get permission, probably a track reservation, to travel beyond the next sensor
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclude that you know where the train is when it hits the predicted sensor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: A Typical Reservation System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A reservation system is not the only way to keep trains from hitting one another.
  prefs: []
  type: TYPE_NORMAL
- en: The reservation system described below is not the only reservation system that
    works. I created it to illustrate the problems you must solve when you are keeping
    trains from colliding.
  prefs: []
  type: TYPE_NORMAL
- en: In past terms, students have succeeded using
  prefs: []
  type: TYPE_NORMAL
- en: systems similar to the one described below
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: systems that didn't break the track into blocks but gave out reservations of
    arbitrary size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: systems that gave reservation that were areas covered by the track rather than
    lines the length of the track..
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing the need for communication with the train controller by doing more
    computation on the CPU consistenly outperform.
  prefs: []
  type: TYPE_NORMAL
- en: Hard Conditions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Needed to avoid collisions
  prefs: []
  type: TYPE_NORMAL
- en: '**Every train must have a reservation for the track it occupies.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Every train must travel at a low enough velocity that it can stop before
    the end of the track it has reserved.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Every train should reserve enough to handle single sensor or (exclusive)
    single switch errors.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**No piece of track should ever be reserved by more than one train.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Soft Conditions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Needed to keep the trains moving
  prefs: []
  type: TYPE_NORMAL
- en: Every train must release blocks it no longer occupies and will not occupy in
    the immediate future.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a train is stopped it would normally have a reservation for only one block,
    but it might have a reservation for two blocks.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Every reservation held by a train should be contiguous
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Who enforces these conditions?
  prefs: []
  type: TYPE_NORMAL
- en: Nobody does so explicitly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are several constraints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reservation server always gives out reservations that are contiguous.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The reservation server never gives out an already reserved piece of track.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The reservation serve never revokes a reservation.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The train always travels slowly enough that it can stop within its current reservation
    if a request for extension is refused.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Responsibility for enforcement is distributed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a situation in which these conditions cannot be enforced?
  prefs: []
  type: TYPE_NORMAL
- en: What is it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here's how it works in theory
  prefs: []
  type: TYPE_NORMAL
- en: Train gets a route from the route finder, and looks ahead along the route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Train has a desired speed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Train asks reservation system for several blocks of track along the route
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Blocks usually end at switches and/or sensors
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are ending blocks at switches you must know well enough how enough where
    the train is to be confident it is completely clear of the switch.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reservation system grants the blocks if they are available
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grants include the condition that the train must travel so that it can come
    to a complete stop without leaving any reserved block.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Here's one way for it to work in practice
  prefs: []
  type: TYPE_NORMAL
- en: A train receives a reservation that will allow it to travel at its desired speed
    for one or more blocks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The reservation includes enough track at the end of these blocks so that the
    train can stop before reaching the end of its reservation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each time the train leaves a block it frees the reservation it had for that
    block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before reaching the end of the blocks on which it can travel at speed, it requests
    an extention of its reservation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the request is granted it continues travelling at speed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise it starts slowing down so that it stops before the end of its reservation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reservation Implementation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You might grant reservations as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Every time a train receives a sensor report it does its reservation procedure
  prefs: []
  type: TYPE_NORMAL
- en: Release the reservation I just vacated
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If I give a stop signal at the next sensor can I stop within my reservation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If yes, finished
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If no, how much do I need beyond my current reservation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Request what's needed, possibly more
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Indicate the order in which you want the reservations (contiguity).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This depends on the direction in which you are travelling, which it's not necessary
    for the reservation server to know.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It could be deduced by the reservation server, but why bother.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reservation server gives as much as it can
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Train rechecks stopping condition using the complete reservation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If yes, finished
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If no, stop, or slow down so that the stopping condition is yes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
