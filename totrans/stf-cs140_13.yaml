- en: Linkers and Dynamic Linking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lecture Notes for CS 140
  prefs: []
  type: TYPE_NORMAL
- en: Spring 2014
  prefs: []
  type: TYPE_NORMAL
- en: John Ousterhout
  prefs: []
  type: TYPE_NORMAL
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    none.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When a process is running, what does its memory look like? A collection of
    regions called *sections*. Basic memory layout for Linux and other Unix systems:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code (or "text" in Unix terminology): starts at location 0'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data: starts immediately above code, grows upward'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stack: starts at highest address, grows downward'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'System components that take part in managing a process''s memory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compiler and assembler:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate one *object file* for each source code file containing information
    for that source file.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Information is incomplete, since each source file generally references some
    things defined in other source files.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linker:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Combines all of the object files for one program into a single object file.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Linker output is complete and self-sufficient.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Operating system:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Loads object files into memory.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows several different processes to share memory at once.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides facilities for processes to get more memory after they've started running.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run-time library:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Works together with OS to provide dynamic allocation routines, such as malloc
    and free in C.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linkers (or Linkage Editors, ld in Unix, LINK on Windows): combine many separate
    pieces of a program, re-organize storage allocation. Typically invoked invisibly
    by compilers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Three functions of a linker:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combine all the pieces of a program.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Figure out a new memory organization so that all the pieces fit together (combine
    like sections).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Touch up addresses so that the program can run under the new memory organization.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Result: a runnable program stored in a new object file called an *executable*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Problems linker must solve:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assembler doesn't know addresses of external objects when assembling files separately.
    E.g. where is printf routine?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assembler just puts zero in the object file for each unknown address
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assembler doesn't know where the things it's assembling will go in memory
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assume that things start at address zero, let linker re-arrange.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each object file consists of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Sections*, each holding a distinct kind of information.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Typical sections: code ("text") and data.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For each section, object file contains size and current location of the section,
    plus initial contents, if any
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Symbol table*: name and current location of variable or procedure that can
    be referenced in other object files.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Relocation records* : information about addresses referenced in this object
    file that the linker must adjust once it knows the final memory allocation.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional information for debugging (e.g. map from line numbers in the source
    file to location in the code section).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linker executes in three passes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pass 1: read in section sizes, compute final memory layout.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pass 2: read in all symbols, create complete symbol table in memory.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pass 3: read in section and relocation information, update addresses, write
    out new file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic Linking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Originally all programs were linked *statically*, as described above:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All external references fully *resolved*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each program complete
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since late 1980''s most systems have supported *shared libraries* and *dynamic
    linking*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For common library packages, only keep a single copy in memory, shared by all
    processes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't know where library is loaded until runtime; must resolve references dynamically,
    when program runs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One way of implementing dynamic linking: *jump table*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If any of the files being linked are shared libraries, the linker doesn''t
    actually include the shared library code in the final program. Instead, it includes
    two things that implement dynamic linking:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Jump table: an array in which each entry is a single machine instruction containing
    an unconditional branch (jump).'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For each function in a shared library used by the program, there is one entry
    in the jump table that will jump to the beginning of that function.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dynamic loader: library package invoked at startup to fill in the jump table.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For relocation records referring to functions in the shared library, the linker
    substitutes the address of the jump table entry: when the function is invoked,
    the caller will "call" the jump table entry, which redirects the call to the real
    function.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Initially, all jump table entries jump to zero (unresolved).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When the program starts up, the dynamic load library is invoked:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It invokes the OS mmap functions to load each shared library into memory.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It fills in the jump table with the correct address for each function in a shared
    library.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
