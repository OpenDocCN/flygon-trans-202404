- en: 'Recitation 10: Red-Black Trees'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十讲：红黑树
- en: Sets and maps are important and useful abstractions. We've seen various ways
    to implement an abstract data type for sets and maps, since data structures that
    implement sets can be used to implement maps as well. Today we will look at an
    implementation of sets that is asymptotically efficient and useful in practice.
    This implementation is one of several *balanced binary tree* schemes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 集合和映射是重要且有用的抽象。我们已经看到了实现集合和映射的抽象数据类型的各种方法，因为实现集合的数据结构也可以用来实现映射。今天我们将看一种渐进有效且在实践中有用的集合实现。这种实现是几种*平衡二叉树*方案之一。
- en: 'Binary trees have two advantages above the asymptotically more efficient hash
    table: first, they support nondestructive update with the same asymptotic efficiency.
    Second, they store their values (or keys, in the case of a map) in order, which
    makes range queries and in-order iteration possible.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与渐进更高效的哈希表相比，二叉树具有两个优点：首先，它们支持非破坏性更新，具有相同的渐进效率。其次，它们按顺序存储它们的值（或键，在地图的情况下），这使得范围查询和按顺序迭代成为可能。
- en: 'An important property of a search tree is that it can be used to implement
    an **ordered set** or ordered map easily: a set (map) that keeps its elements
    in sorted order. Although we will not consider such operations today, ordered
    sets generally provide operations for finding the minimum and maximum elements
    of the set, for iterating over all the elements between two elements, and for
    extracting (or iterating over) ordered subsets of the elements between a range.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索树的一个重要属性是它可以轻松实现**有序集合**或有序映射：保持其元素按排序顺序排列的集合（映射）。虽然我们今天不会考虑这样的操作，但有序集合通常提供查找集合的最小和最大元素、在两个元素之间迭代所有元素以及提取（或迭代）在范围之间的元素的操作。
- en: Binary Search Trees
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二叉搜索树
- en: A binary tree is easy to define inductively in OCaml. We will use the following
    definition that represents an internal (nonleaf) node as a `TNode` containing
    a value of type `'a` and two children and a leaf as a `TLeaf`. Leaves do not contain
    data in this representation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在OCaml中，很容易归纳地定义二叉树。我们将使用以下定义，将内部（非叶）节点表示为包含类型为`'a`的值和两个子节点的`TNode`，将叶表示为`TLeaf`。在这种表示中，叶子不包含数据。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A **binary search tree** is a binary tree with the following representation
    invariant:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**二叉搜索树**是具有以下表示不变式的二叉树：
- en: For any node *n*, every node in the left subtree of *n* has a value less than
    *n*'s value, and every node in the right subtree of *n* has a value greater than
    *n*'s value.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于任何节点*n*，*n*的左子树中的每个节点的值都小于*n*的值，而*n*的右子树中的每个节点的值都大于*n*的值。
- en: 'Given such a tree, how do you perform a lookup operation? Start from the root.
    At every node, if the value of the node is the value you are looking for, you
    are done. Otherwise, recursively search in the left or right subtree depending
    on whether the value you are looking for is less than or greater than the one
    stored at the current node, respectively. In code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定这样的树，如何执行查找操作？从根开始。在每个节点，如果节点的值是你要查找的值，那么就完成了。否则，根据你要查找的值是小于还是大于当前节点存储的值，在左子树或右子树中递归搜索。在代码中：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Note the use of the keyword `function` so that the variable used in the pattern
    matching need not be named. This is equivalent to (unneccessarily) naming a variable
    and then using `match`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意关键字`function`的使用，这样模式匹配中使用的变量不需要被命名。这相当于（不必要地）命名一个变量，然后使用`match`：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Adding an element is similar: you perform a lookup until you find the empty
    node that should contain the value. This is a nondestructive update, so as the
    recursion completes, a new tree is constructed that is just like the old one except
    that it has a new node (if needed):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 添加元素类似：你进行查找，直到找到应该包含该值的空节点。这是一种非破坏性更新，因此当递归完成时，将构造一个新的树，它与旧树完全相同，只是具有一个新节点（如果需要）：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What is the running time of those operations? Since `add` is just a `lookup`
    with an extra constant-time node creation, we focus on the `lookup` operation.
    Clearly, the run time of `lookup` is *O*(*h*), where *h* is the height of the
    tree. What's the worst-case height of a tree? It occurs with a tree of *n* nodes
    all in a single long branch (imagine adding the numbers 1,2,3,4,5,6,7 in order
    into a binary search tree). So the worst-case running time of lookup is still
    *O*(*n*) (for *n* the number of nodes in the tree).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作的运行时间是多少？由于`add`仅是具有额外常量时间节点创建的`lookup`，我们将重点放在`lookup`操作上。显然，`lookup`的运行时间为*O*(*h*)，其中*h*为树的高度。树的最坏情况高度是多少？它发生在所有节点都在单个长分支上的树中（想象一下按顺序将数字1,2,3,4,5,6,7添加到二叉搜索树中）。因此，查找的最坏运行时间仍然是*O*(*n*)（*n*为树中的节点数）。
- en: 'What is a good shape for a tree that would allow for fast lookup? A **perfect
    binary tree** has the largest number of nodes *n* for a given height *h*: *n*
    = 2^(*h*+1)−1\. Therefore *h* = log(*n*+1)−1 = *O*(log *n*). (If unspecified,
    logs are always base 2, although it doesn''t really matter because of the *O*( ).)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 什么样的树形状能够实现快速查找呢？一个**完美二叉树**在给定高度*h*时具有最大的节点数*n*：*n* = 2^(*h*+1)−1。因此*h* = log(*n*+1)−1
    = *O*(log *n*)。（如果未指定，对数始终以2为底，虽然这并不重要，因为是*O*( )。）
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If a tree with *n* nodes is kept balanced, its height is *O*(log *n*), which
    leads to a lookup operation running in time *O*(log *n*).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果保持一棵拥有*n*个节点的树平衡，其高度为*O*(log *n*)，这导致查找操作在*O*(log *n*)的时间内完成。
- en: How can we keep a tree balanced? It can become unbalanced during element addition
    or deletion. Most balanced tree schemes involve adding or deleting an element
    just like in a normal binary search tree, followed by some kind of tree surgery
    to rebalance the tree. Some examples of balanced binary search tree data structures
    include
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何保持树的平衡？在添加或删除元素过程中，树可能会失去平衡。大多数平衡树方案涉及添加或删除元素，就像在普通二叉搜索树中一样，然后进行某种树形手术来重新平衡树。一些平衡二叉搜索树数据结构的例子包括
- en: AVL (or height-balanced) trees (1962)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AVL（或高度平衡）树（1962）
- en: 2-3 trees (1970's)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2-3树（1970年代）
- en: Red-black trees (1970's)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 红黑树（1970年代）
- en: In each of these, we ensure asymptotic complexity *O*(log *n*) by enforcing
    a stronger invariant on the data structure than just the binary search tree invariant.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，我们通过对数据结构施加比二叉搜索树不变式更强的不变式，确保渐近复杂度为*O*(log *n*)。
- en: Red-Black Trees
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 红黑树
- en: Red-black trees are a fairly simple and very efficient data structure for maintaining
    a balanced binary tree. The idea is to strengthen the representation invariant
    so a tree has height logarithmic in *n*. To help enforce the invariant, we color
    each node of the tree either *red* or *black*. Where it matters, we consider the
    color of an empty tree to be black.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 红黑树是一种维持平衡二叉树的相当简单而非常有效的数据结构。其思想是加强表示不变式，使得树的高度对数于*n*。为了帮助执行不变式，我们给树的每个节点着色为*红*或*黑*。在需要时，我们将空树的颜色视为黑色。
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here are the new conditions we add to the binary search tree representation
    invariant:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们添加到二叉搜索树表示不变式的新条件：
- en: There are no two adjacent red nodes along any path.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 沿着任意路径不存在两个相邻的红色节点。
- en: Every path from the root to a leaf has the same number of black nodes. This
    number is called the *black height* (BH) of the tree.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从根到叶子的每条路径上具有相同数量的黑色节点。这个数字称为树的*黑高度*（BH）。
- en: If a tree satisfies these two conditions, it must also be the case that every
    subtree of the tree also satisfies the conditions. If a subtree violated either
    of the conditions, the whole tree would also.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一棵树满足这两个条件，那么每棵子树也必须满足这些条件。如果一棵子树违反了这些条件中的任何一个，那么整棵树也会违反。
- en: Additionally, we require that the root of the tree be colored black. This can
    always be enforced by simply setting its color to black; doing this does not cause
    any other invariants to be violated.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们要求树的根节点着色为黑色。这总是可以通过简单地将其颜色设置为黑色来实现；这样做不会违反任何其他不变式。
- en: 'With these invariants, the longest possible path from the root to an empty
    node would alternately contain red and black nodes; therefore it is at most twice
    as long as the shortest possible path, which only contains black nodes. If *n*
    is the number of nodes in the tree, the longest path cannot have a length greater
    than twice the length of the paths in a perfect binary tree: 2 log *n*, which
    is O(log *n*). Therefore, the tree has height O(log *n*) and the operations are
    all asymptotically logarithmic in the number of nodes.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 具有这些不变量，从根到空节点的最长可能路径将交替包含红色和黑色节点；因此，它最多比只包含黑色节点的最短路径长两倍。如果*n*是树中的节点数，则最长路径的长度不能大于完美二叉树中路径的两倍长度：2
    log *n*，即O(log *n*)。因此，树的高度为O(log *n*)，所有操作在节点数的渐近对数中。
- en: Another way to see this is to think about just the black nodes in the tree.
    Suppose we snip all the red nodes out of the trees and reconnecting each black
    node to its closest black ancestor. Then we have a tree whose leaves are all at
    depth BH, and whose branching factor ranges between 2 and 4\. Such a tree must
    contain at least Ω(2^(BH)) nodes, and so must the whole tree when we add the red
    nodes back in. If *n* is Ω(2^(BH)), then black height BH is *O*(log *n*). But
    invariant 1 says that the longest path is at most *h* = 2BH. So *h* is *O*(log
    *n*) too.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种看待这个问题的方法是只考虑树中的黑色节点。假设我们剪掉树中的所有红色节点，并将每个黑色节点重新连接到其最近的黑色祖先。然后我们得到一棵树，其叶子节点都在深度BH处，其分支因子在2和4之间。这样的树必须包含至少Ω(2^(BH))个节点，当我们将红色节点重新添加时，整个树也必须包含这么多节点。如果*n*是Ω(2^(BH))，那么黑色高度BH是*O*(log
    *n*)。但不变量1表明最长路径最多为*h* = 2BH。因此*h*也是*O*(log *n*)。
- en: How do we check for membership in red-black trees? Exactly the same way as for
    general binary trees.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何检查红黑树中的成员资格？与一般二叉树一样。
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: More interesting is the `insert` operation. As with standard binary trees, we
    add a node by replacing the leaf found by the search procedure. We also color
    the new node red to ensure that invariant 2 is preserved. However, this may destroy
    invariant 1 by producing two adjacent red nodes. In order to restore the invariant,
    we consider not only the new red node and its red parent, but also its (black)
    grandparent. The next figure shows the four possible cases that can arise.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 更有趣的是`insert`操作。与标准二叉树一样，我们通过替换搜索过程找到的叶子节点来添加一个节点。我们还将新节点着为红色，以确保保持不变量2。然而，这可能通过产生两个相邻的红色节点破坏不变量1。为了恢复不变量，我们不仅考虑新的红色节点及其红色父节点，还考虑其（黑色）祖父节点。下图显示了可能出现的四种情况。
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Notice that in each of these trees, the values of the nodes in a, b, c, d must
    have the same relative ordering with respect to x, y, and z: a < x < b < y < c
    < z < d. Therefore, we can transform the tree to restore the invariant locally
    by replacing any of the above four cases with:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这些树中，节点a、b、c、d的值必须相对于x、y和z具有相同的顺序关系：a < x < b < y < c < z < d。因此，我们可以通过用上述四种情况之一替换任何一个来转换树，从而在本地恢复不变量。
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This balance function can be written simply and concisely using pattern matching,
    where each of the four input cases is mapped to the same output case. In addition,
    there is the case where the tree is left unchanged locally.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个平衡函数可以简单而简洁地使用模式匹配编写，其中每个四种输入情况映射到相同的输出情况。此外，还有一种情况是树在本地保持不变。
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This balancing transformation possibly breaks invariant 1 one level up in the
    tree, but it can be restored again at that level in the same way, and so on up
    the tree. In the worst case, the process cascades all the way up to the root,
    resulting in two adjacent red nodes, one of them the root. But if this happens,
    we can just recolor the root black, which increases the BH by one. The amount
    of work is *O*(log *n*). The `insert` code using `balance` is as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种平衡转换可能会在树中的上一级破坏不变量1，但可以以相同方式在该级别恢复，依此类推。在最坏的情况下，这个过程一直级联到根，导致两个相邻的红色节点，其中一个是根。但如果这种情况发生，我们可以将根节点重新着色为黑色，这会增加BH一次。工作量为*O*(log
    *n*)。使用`balance`的`insert`代码如下：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Removing elements
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除元素
- en: Removing an element from a red-black tree works analogously. We start with BST
    element removal and then do rebalancing. When an interior (nonleaf) node is removed,
    we simply splice it out if it has fewer than two nonleaf children; if it has two
    nonleaf children, we find the next value in the tree, which must be found inside
    its right child.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从红黑树中移除一个元素的操作类似于二叉搜索树的元素移除。我们首先执行二叉搜索树的元素移除操作，然后再进行重新平衡。当删除一个内部（非叶子）节点时，如果它有少于两个非叶子子节点，我们就简单地将其拼接出来；如果它有两个非叶子子节点，我们就在树中找到下一个值，这个值必须在它的右子节点中找到。
- en: Balancing the trees during removal from red-black tree requires considering
    more cases. Deleting a black element from the tree creates the possibility that
    some path in the tree has too few black nodes, breaking the black-height invariant
    2\. The solution is to consider that path to contain a "doubly-black" node. A
    series of tree rotations can then eliminate the doubly-black node by propagating
    the "blackness" up until a red node can be converted to a black node, or until
    the root is reached and it can be changed from doubly-black to black without breaking
    the invariant.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在从红黑树中删除元素时平衡树需要考虑更多情况。从树中删除一个黑色元素会导致树中某些路径上的黑色节点过少，从而破坏黑高不变性2。解决方法是将该路径视为包含一个“双黑”节点。然后，一系列树旋转可以通过将“黑色”传播上去直到一个红色节点可以转换为黑色节点，或者直到达到根节点并且可以将其从双黑变为黑色而不破坏不变性。
