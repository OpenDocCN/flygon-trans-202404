- en: Two-dimensional slice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two-dimensional slice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '`Go` supports multiple-dimensional slice, but I only want to introduce two-dimensional
    slice here. One reason is the two-dimensional slice is usually used in daily life,
    while multiple-dimensional seems not common. If you often use multiple-dimensional
    slice, personally I think the code is a little clumsy and not easy to maintain,
    so maybe you can try to check whether there is a better method; the other reason
    is the principle behind multiple-dimensional slice is the same with two-dimensional
    slice, you can also understand it if you know two-dimensional slice well.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'I still use gdb to inspect the execution flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`s` is a slice (the start memory address is `0xc82003fe70`), but its elements
    are also slices. Let''s check the elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'All the memory content are `0`, nothing exciting! Continue to step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now since `s` contains a valid slice element, check its underlying array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Yeah, the memory has been updated by the pointer, length and capacity of `s[0]`,
    the same with previous output from `fmt.Println`. Check the underlying array of
    `s[0]`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see `3` elements: `1`, `2`, `3`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the same method to check the `s[1]`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can see `s` contains all the info of its slice elements, and the elements
    of `s[1]` are initialized to `0`.
  prefs: []
  type: TYPE_NORMAL
