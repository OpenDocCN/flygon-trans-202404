- en: Two-dimensional slice
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二维切片
- en: Two-dimensional slice
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二维切片
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`Go` supports multiple-dimensional slice, but I only want to introduce two-dimensional
    slice here. One reason is the two-dimensional slice is usually used in daily life,
    while multiple-dimensional seems not common. If you often use multiple-dimensional
    slice, personally I think the code is a little clumsy and not easy to maintain,
    so maybe you can try to check whether there is a better method; the other reason
    is the principle behind multiple-dimensional slice is the same with two-dimensional
    slice, you can also understand it if you know two-dimensional slice well.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`Go`支持多维切片，但我只想在这里介绍二维切片。一个原因是二维切片通常在日常生活中使用，而多维切片似乎不常见。如果你经常使用多维切片，我个人认为代码有点笨拙，不容易维护，所以也许你可以尝试检查是否有更好的方法；另一个原因是多维切片背后的原理与二维切片相同，如果你对二维切片很了解，也可以理解它。'
- en: 'Let''s the following example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看下面的例子：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I still use gdb to inspect the execution flow:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然使用gdb来检查执行流程：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`s` is a slice (the start memory address is `0xc82003fe70`), but its elements
    are also slices. Let''s check the elements:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`s`是一个切片（起始内存地址为`0xc82003fe70`），但其元素也是切片。让我们检查元素：'
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'All the memory content are `0`, nothing exciting! Continue to step by step:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的内存内容都是`0`，没有什么激动人心的！继续一步一步地进行：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now since `s` contains a valid slice element, check its underlying array:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于`s`包含一个有效的切片元素，请检查其底层数组：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Yeah, the memory has been updated by the pointer, length and capacity of `s[0]`,
    the same with previous output from `fmt.Println`. Check the underlying array of
    `s[0]`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，内存已经被指针、长度和`s[0]`的容量更新了，与之前从`fmt.Println`输出的内容相同。检查`s[0]`的底层数组：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can see `3` elements: `1`, `2`, `3`.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`3`个元素：`1`，`2`，`3`。
- en: 'Following the same method to check the `s[1]`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 按照相同的方法检查`s[1]`：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, we can see `s` contains all the info of its slice elements, and the elements
    of `s[1]` are initialized to `0`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到`s`包含了其切片元素的所有信息，而`s[1]`的元素被初始化为`0`。
