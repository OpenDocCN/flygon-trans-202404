- en: Heroku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Heroku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are basic steps needed to quickly set up a Node.js app with Express
    and deploy to Heroku.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - Heroku account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you have a Heroku account set up
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 - Install Heroku Toolbelt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download and install the tool belt package specific for your OS
  prefs: []
  type: TYPE_NORMAL
- en: OSX
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[https://toolbelt.heroku.com/osx](https://toolbelt.heroku.com/osx)'
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[https://toolbelt.heroku.com/windows](https://toolbelt.heroku.com/windows)'
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Step 3 - Log into you account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once toolbelt is installed, you should be able to access your account
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That's pretty much about it. Pass these steps and you are ready to DEPLOY THE
    CODES!
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the codes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploy your first app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you should have an app that works locally on your computer. The
    following steps outline updates you need to make in order to deploy the codes.
  prefs: []
  type: TYPE_NORMAL
- en: Update package.json
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this step, we need to add some code to the `package.json` file so that we
    can run the app from a remote server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, there is a good chance that the file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the `dependencies": { ... }` object, you need to add a comma
    `,` so that we can add more code. First let''s add the `main` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the trailing comma? This is because we are going to add more stuff.
    After that, add in the `engines` object and the specific engines we need to run
    this app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should have something that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget the Grunt + Bower
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If at this time you do not have any of the Grunt packages or Bower in the `dependenciess`
    object, we need to get that in there.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can either add them manually to the `package.json` file or dun:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Something that you probably don't have is the ability for the deployed server
    to run the Grunt tasks. For this we need Grunt-CLI.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Right about now, you should be looking pretty good.
  prefs: []
  type: TYPE_NORMAL
- en: Postinstall instructions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we deploy the codes to Heroku, we have to tell it to run some commands,
    basically install the Bower packages and run the Grunt tasks. To do this, we need
    to add the instructions within the `scripts` object of the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Directly under the `"start": "node ./bin/www"`, add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: There, now we have everything that Heroku needs to install the packages and
    run the scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Add the Procfile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a file that Heroku needs in order to start the app.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Heroku will use this to kick start the app.
  prefs: []
  type: TYPE_NORMAL
- en: Make this a Git repo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to make this a git repo BEFORE you create the Heroku server.
    **WAIT!** Before you go all crazy on the Git, there are some things we need to
    do.
  prefs: []
  type: TYPE_NORMAL
- en: You should have a `.gitignore` file in your repo at this point. open that up
    and make sure you are ignoring all the `node_modules`, all the `bower_components`
    and anything in the `/stylesheets/*.css` spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Great. Now you can `git init` your repo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It is not required at this time to make this a Github repo, but you may want
    to do this if you make this a real app.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the codes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is pretty hard here. Make sure to follow the commands specifically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Rejoice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If all is well, you should see a return like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Go to that URL and REJOICE!!!!!
  prefs: []
  type: TYPE_NORMAL
