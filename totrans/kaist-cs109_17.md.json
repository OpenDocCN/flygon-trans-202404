["```\ndata class Date(val year: Int, val month: Int, val day: Int)\n\n```", "```\n>>> data class Date(val year: Int, val month: Int, val day: Int)\n>>> val d = Date(2017, 13, -5)\n>>> d\nDate(year=2017, month=13, day=-5)\n\n```", "```\nval monthLength = intArrayOf(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n\ndata class Date(val year: Int, val month: Int, val day: Int) {\n  init {\n    require(1901 <= year && year <= 2099)\n    require(1 <= month && month <= 12)\n    require(1 <= day && day <= monthLength[month - 1])\n    require(month != 2 || day <= 28 || (year % 4) == 0)\n  }\n}\n\n```", "```\n>>> val d1 = Date(2017, 3, 17)\n>>> d1\nDate(year=2017, month=3, day=17)\n>>> d1.year\n2017\n>>> d1.day\n17\n>>> var d2 = Date(2017, 2, 29)\njava.lang.IllegalArgumentException: Failed requirement\n\tat Date.<init>(days1.kt:24)\n\n```", "```\nval monthLength = intArrayOf(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\nval weekday = arrayOf(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n\t\t      \"Friday\", \"Saturday\", \"Sunday\")\n\ndata class Date(val year: Int, val month: Int, val day: Int) {\n  init {\n    require(1901 <= year && year <= 2099)\n    require(1 <= month && month <= 12)\n    require(1 <= day && day <= monthLength[month - 1])\n    require(month != 2 || day <= 28 || (year % 4) == 0)\n  }\n\n  // returns the number of days since 1901/01/01 (day 0)\n  fun dayIndex(): Int {\n    val fourY = (365 + 365 + 365 + 366)\n    val yearn = year - 1901\n    var total = 0\n    total += fourY * (yearn / 4)\n    total += 365 * (yearn % 4)\n    for (m in 0 until month - 1)\n      total += monthLength[m]\n    total += day - 1\n    if (year%4 != 0 && month > 2)\n      total -= 1\n    return total\n  }\n\n  fun dayOfWeek(): String = weekday[(dayIndex() + 1) % 7]\n}\n\n```", "```\n$ ktc days3.kt \n$ ktc\nWelcome to Kotlin version 1.0.1-2 (JRE 1.8.0_74-b02)\nType :help for help, :quit for quit\n>>> var d1 = Date(2017, 4, 16)\n>>> var d2 = Date(2000, 1, 1)\n>>> d1.year\n2017\n>>> d2.month\n1\n>>> d1.dayIndex()\n42474\n>>> d2.dayIndex()\n36159\n>>> d1.dayOfWeek()\nSunday\n>>> d2.dayOfWeek()\nSaturday\n\n```", "```\n>>> d1\nDate(year=2017, month=4, day=16)\n>>> d1.toString()\nDate(year=2017, month=4, day=16)\n>>> println(d1)\nDate(year=2017, month=4, day=16)\n\n```", "```\noverride fun toString(): String = \n  \"%s, %s %d, %d\".format(dayOfWeek(), monthname[month-1], day, year)\n\n```", "```\n$ ktc days4.kt \n$ ktc\nWelcome to Kotlin version 1.0.1-2 (JRE 1.8.0_74-b02)\nType :help for help, :quit for quit\n>>> val d1 = Date(2017, 4, 16)\n>>> d1\nSunday, April 16, 2017\n>>> d1.toString()\nSunday, April 16, 2017\n>>> println(d1)\nSunday, April 16, 2017\n\n```", "```\n  fun diff(rhs: Date): Int = dayIndex() - rhs.dayIndex()\n\n```", "```\n$ ktc days5.kt \n$ ktc\nWelcome to Kotlin version 1.0.1-2 (JRE 1.8.0_74-b02)\nType :help for help, :quit for quit\n>>> var d1 = Date(1993, 7, 9)\n>>> var d2 = Date(2017, 4, 9)\n>>> d2.diff(d1)\n8675\n\n```", "```\n  operator fun minus(rhs: Date): Int = dayIndex() - rhs.dayIndex()\n\n```", "```\n$ ktc days6.kt \n$ ktc\nWelcome to Kotlin version 1.0.1-2 (JRE 1.8.0_74-b02)\nType :help for help, :quit for quit\n>>> val birth = Date(1993, 7, 9)\n>>> val today = Date(2017, 4, 17)\n>>> today - birth\n8683\n\n```", "```\n\nfun f(n: Int) {\n  println(\"Int \" + n)\n}\n\nfun f(s: String) {\n  println(\"String \" + s)\n}\n\nf(17)\nf(\"CS109\")\n\n```", "```\nval monthLength = intArrayOf(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\nval weekday = arrayOf(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n\t\t      \"Friday\", \"Saturday\", \"Sunday\")\nval monthname = arrayOf(\"January\", \"February\", \"March\",\n\t\t        \"April\", \"May\", \"June\",\n\t\t        \"July\", \"August\", \"September\",\n\t\t        \"October\", \"November\", \"December\")\n\ndata class Date(val year: Int, val month: Int, val day: Int) {\n  init {\n    require(1901 <= year && year <= 2099)\n    require(1 <= month && month <= 12)\n    require(1 <= day && day <= monthLength[month - 1])\n    require(month != 2 || day <= 28 || (year % 4) == 0)\n  }\n\n  // returns the number of days since 1901/01/01 (day 0)\n  fun dayIndex(): Int {\n    val fourY = (365 + 365 + 365 + 366)\n    val yearn = year - 1901\n    var total = 0\n    total += fourY * (yearn / 4)\n    total += 365 * (yearn % 4)\n    for (m in 0 until month - 1)\n      total += monthLength[m]\n    total += day - 1\n    if (year%4 != 0 && month > 2)\n      total -= 1\n    return total\n  }\n\n  fun num2date(n: Int): Date {\n    val fourY = (365 + 365 + 365 + 366)\n    var year = 1901 + (n / fourY) * 4\n    var day = n % fourY \n    if (day >= 365 + 365 + 365 + 59) {\n      year += 3\n      day -= 365 + 365 + 365\n    } else {\n      year += (day / 365)\n      day = day % 365\n      if (day >= 59)\n\tday += 1\n    }\n    var month = 1\n    while (day >= monthLength[month-1]) {\n      day -= monthLength[month-1]\n      month += 1\n    }\n    return Date(year, month, day+1)\n  }\n\n  fun dayOfWeek(): String = weekday[(dayIndex() + 1) % 7]\n\n  override fun toString(): String = \n    \"%s, %s %d, %d\".format(dayOfWeek(), monthname[month-1],\n\t\t\t   day, year)\n\n  operator fun minus(rhs: Date): Int = dayIndex() - rhs.dayIndex()\n\n  operator fun plus(n: Int): Date = num2date(dayIndex() + n)\n  operator fun minus(n: Int): Date = num2date(dayIndex() - n)\n\n}\n\n```", "```\n$ ktc days7.kt \n$ ktc\nWelcome to Kotlin version 1.0.1-2 (JRE 1.8.0_74-b02)\nType :help for help, :quit for quit\n>>> val birth = Date(1992, 8, 21)\n>>> val baekil = birth + 100\n>>> baekil\nSunday, November 29, 1992\n>>> val today = Date(2017, 4, 19)\n>>> today - birth\n9007\n>>> today - 9007\nFriday, August 21, 1992\n>>> birth + 9007\nWednesday, April 19, 2017\n\n```", "```\nval digits = \"0123456789\"\n\n// if s is not a legal date, or is not in range, \n// then throws IllegalArgumentException\nfun getDate(s: String): Date {\n  if (s.length != 10 || s[4] != '/' || s[7] != '/')\n    throw IllegalArgumentException()\n  for ((i, ch) in s.withIndex()) {\n    if (i != 4 && i != 7 && ch !in digits)\n      throw IllegalArgumentException()\n  }\n  val year = s.substring(0, 4).toInt()\n  val month = s.substring(5, 7).toInt()\n  val day = s.substring(8).toInt()\n  return Date(year, month, day)\n}\n\nfun main(args: Array<String>) {\n  try {\n    if (args.size == 1) {\n      val d = getDate(args[0])\n      println(\"$d is a ${d.dayOfWeek()}\")\n    } else if (args.size == 2) {\n      val d1 = getDate(args[0])\n      val d2 = getDate(args[1])\n      println(\"There are ${d2 - d1} days between $d1 and $d2\")\n    } else if (args.size == 3) {\n      val d1 = getDate(args[0])\n      val sign = if (args[1] == \"-\") -1 else +1\n      val dist = args[2].toInt()\n      val d2 = d1 + sign * dist\n      println(\"$d1 ${args[1]} $dist days = $d2\")\n    } else {\n      System.err.println(\"Must have one, two, or three arguments\")\n    }\n  }\n  catch (e: NumberFormatException) {\n    System.err.println(\"Illegal number\")\n  }\n  catch (e: IllegalArgumentException) {\n    System.err.println(\"Illegal date\")\n  }\n}\n\n```", "```\n$ ktc days.kt \n\n```", "```\n$ kt DaysKt 2015/a3/04\nIllegal date\n$ kt DaysKt 2016/04/26\nTuesday, April 26, 2016 is a Tuesday\n$ kt DaysKt 2016/04/26 2017/01/01\nThere are 250 days between Tuesday, April 26, 2016 and Sunday, January 1, 2017\n$ kt DaysKt 2016/04/26 + 250\nTuesday, April 26, 2016 + 250 days = Sunday, January 1, 2017\n$ kt DaysKt 2016/04/26 - 100\nTuesday, April 26, 2016 - 100 days = Sunday, January 17, 2016\n\n```"]