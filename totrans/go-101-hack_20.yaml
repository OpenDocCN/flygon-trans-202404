- en: switch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: switch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compared to other programming languages (such as `C`), `Go`''s `switch-case`
    statement doesn''t need explicit "`break`", and not have `fall-though` characteristic.
    Take the following code as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Your real intention is the "`fmt.Println("The value is: ", val)`" will be executed
    when `val` is `0` or `1`, but in fact, the statement only takes effect when `val`
    is `1`. To fulfill your request, there are `2` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '(1) Use `fallthrough`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '(2) Put `0` and `1` in the same `case`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`switch` can also be used as a better `if-else`, and you may find it may be
    more clearer and simpler than multiple `if-else` statements.E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
