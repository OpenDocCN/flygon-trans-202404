["```\nio_loop \u2013 \u5f53\u524d\u7684ioloop\u5b9e\u4f8b\u3002\nmax_buffer_size \u2013 \u6700\u5927\u7684\u53ef\u63a5\u53d7\u6570\u636e\u5927\u5c0f\uff0c\u9ed8\u8ba4\u662f100M\u3002\nread_chunk_size \u2013 \u8bfb\u53d6\u7684\u6570\u636e\u5927\u5c0f\uff0c\u9ed8\u8ba464k\u3002\nmax_write_buffer_size \u2013 \u6700\u5927\u7684\u5199buffer\u5927\u5c0f\u3002 \n```", "```\nimport tornado.ioloop\nimport tornado.iostream\nimport socket\n\ndef send_request():\n    #\u5411\u76ee\u6807\u5199\u6570\u636e\n    stream.write(b\"GET / HTTP/1.0\\r\\nHost: friendfeed.com\\r\\n\\r\\n\")\n    #\u8bfb\u6570\u636e\uff0c\u6267\u884c\u56de\u8c03on_headers\n    stream.read_until(b\"\\r\\n\\r\\n\", on_headers)\n\ndef on_headers(data):\n    headers = {}\n    for line in data.split(b\"\\r\\n\"):\n       parts = line.split(b\":\")\n       if len(parts) == 2:\n           headers[parts[0].strip()] = parts[1].strip()\n    #\u8bfb\u6570\u636e\uff0c\u6700\u540e\u5173\u95edstream\uff0cioloop\n    stream.read_bytes(int(headers[b\"Content-Length\"]), on_body)\n\ndef on_body(data):\n    print(data)\n    stream.close()\n    tornado.ioloop.IOLoop.current().stop()\n\nif __name__ == '__main__':\n    #\u521b\u5efa\u4e00\u4e2asocket\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)\n    #\u521b\u5efa\u4e00\u4e2astream\n    stream = tornado.iostream.IOStream(s)\n    #\u8fde\u63a5\u76ee\u6807\uff0c\u6267\u884c\u56de\u8c03\u51fd\u6570send_request\n    stream.connect((\"friendfeed.com\", 80), send_request)\n    \u5f00\u542fioloop\n    tornado.ioloop.IOLoop.current().start() \n```", "```\nserver = TCPServer()\nserver.listen(8888)\nIOLoop.current().start() \n```", "```\nserver = TCPServer()\nserver.bind(8888)\nserver.start(0)  # Forks multiple sub-processes\nIOLoop.current().start() \n```", "```\nsockets = bind_sockets(8888)\ntornado.process.fork_processes(0)\nserver = TCPServer()\nserver.add_sockets(sockets)\nIOLoop.current().start() \n```", "```\nclass TcpServer(object):\n    def __init__(self, address, build_class, **build_kwargs):\n        self._address = address\n        self._build_class = build_class\n        self._build_kwargs = build_kwargs\n\n    def _accept_handler(self, sock, fd, events):\n        while True:\n            try:\n                \u83b7\u5f97conn\n                connection, address = sock.accept()\n            except socket.error, e:\n                return\n\n            #\u901a\u8fc7conn\u89e3\u6790\n            self._handle_connect(connection)\n\n    def _handle_connect(self, sock):\n        #\u8fd9\u91cc\u7684conn\u4e3b\u8981\u662f\u6211\u4eec\u6765\u89e3\u6790\u6570\u636e\u7684protocol\n        conn = self._build_class(sock, **self._build_kwargs)\n        self.on_connect(conn)\n\n        close_callback = functools.partial(self.on_close, conn)\n        #\u8bbe\u7f6e\u4e00\u4e2aconn\u5173\u95ed\u65f6\u6267\u884c\u7684\u56de\u8c03\u51fd\u6570\n        conn.set_close_callback(close_callback)\n\n    def startFactory(self):\n        pass\n\n    def start(self, backlog=0):\n        #\u521b\u5efasocket\n        socks = build_listener(self._address, backlog=backlog)\n\n        io_loop = ioloop.IOLoop.instance()\n        for sock in socks:\n            #\u63a5\u53d7\u6570\u636e\u7684handler\n            callback = functools.partial(self._accept_handler, sock)\n            #\u4e3aioloop\u6dfb\u52a0handler\uff0ccallback\n            io_loop.add_handler(sock.fileno(), callback, WRITE_EVENT | READ_EVENT | ERROR_EVENT)\n        #\u5728ioloop\u5f00\u542f\u540e\uff0c\u6dfb\u52a0\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\n        ioloop.IOLoop.current().add_callback(self.startFactory)\n\n    #\u63a5\u53d7buff\u7684\u51fd\u6570\uff0c\u7ee7\u627ftcpserver\u7684\u65f6\u5019\u53ef\u4ee5\u91cd\u5199\u3002\n    def handle_stream(self, conn, buff):\n        logger.debug('handle_stream')\n\n    def stopFactory(self):\n        pass\n\n    def on_close(self, conn):\n        logger.debug('on_close')\n\n    def on_connect(self, conn):\n\n        logger.debug('on_connect: %s' % repr(conn.getaddress()))\n\n        handle_receive = functools.partial(self.handle_stream, conn)\n        conn.read_util_close(handle_receive) \n```"]