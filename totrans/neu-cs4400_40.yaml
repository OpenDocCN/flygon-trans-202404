- en: More Closures (on both levels)Tuesday, February 7th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多闭包（在两个级别上）Tuesday, February 7th
- en: Racket closures (= functions) can be used in other places too, and as we have
    seen, they can do more than encapsulate various values — they can also hold the
    behavior that is expected of these values.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Racket闭包（=函数）也可以在其他地方使用，正如我们所见，它们不仅可以封装各种值，还可以保存这些值所期望的行为。
- en: 'To demonstrate this we will deal with closures in our language. We currently
    use a variant that holds the three pieces of relevant information:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，我们将处理我们语言中的闭包。我们目前使用的一种变体保存了三个相关信息：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can replace this by a functional object, which will hold the three values.
    First, change the `VAL` type to hold functions for `FunV` values:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其替换为一个功能对象，它将保存这三个值。首先，将`VAL`类型更改为保存`FunV`值的函数：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And note that the function should somehow encapsulate the same information
    that was there previously, the question is *how* this information is going to
    be done, and this will determine the actual type. This information plays a role
    in two places in our evaluator — generating a closure in the `Fun` case, and using
    it in the `Call` case:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意函数应该以某种方式封装先前存在的相同信息，问题是*如何*完成这些信息，这将决定实际类型。这些信息在我们的求值器中扮演两个角色 — 在`Fun`情况下生成一个闭包，在`Call`情况下使用它：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'we can simply fold the marked functionality bit of `Call` into a Racket function
    that will be stored in a `FunV` object — this piece of functionality takes an
    argument value, extends the closure’s environment with its value and the function’s
    name, and continues to evaluate the function body. Folding all of this into a
    function gives us:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地将`Call`中标记的功能位折叠到一个Racket函数中，该函数将存储在`FunV`对象中 — 这个功能部分接受一个参数值，将闭包的环境扩展为其值和函数的名称，并继续评估函数体。将所有这些折叠到一个函数中给我们带来：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'where the values of `bound-body`, `bound-id`, and `val` are known at the time
    that the `FunV` is *constructed*. Doing this gives us the following code for the
    two cases:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`bound-body`、`bound-id`和`val`的值在构造`FunV`时已知。这样做给我们带来了两种情况的以下代码：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And now the type of the function is clear:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在函数的类型是清晰的：
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And again, the rest of the code is unmodified:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，代码的其余部分未经修改：
- en: '[PRE6]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
