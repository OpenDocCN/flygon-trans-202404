- en: More Closures (on both levels)Tuesday, February 7th
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Racket closures (= functions) can be used in other places too, and as we have
    seen, they can do more than encapsulate various values — they can also hold the
    behavior that is expected of these values.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this we will deal with closures in our language. We currently
    use a variant that holds the three pieces of relevant information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can replace this by a functional object, which will hold the three values.
    First, change the `VAL` type to hold functions for `FunV` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And note that the function should somehow encapsulate the same information
    that was there previously, the question is *how* this information is going to
    be done, and this will determine the actual type. This information plays a role
    in two places in our evaluator — generating a closure in the `Fun` case, and using
    it in the `Call` case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'we can simply fold the marked functionality bit of `Call` into a Racket function
    that will be stored in a `FunV` object — this piece of functionality takes an
    argument value, extends the closure’s environment with its value and the function’s
    name, and continues to evaluate the function body. Folding all of this into a
    function gives us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'where the values of `bound-body`, `bound-id`, and `val` are known at the time
    that the `FunV` is *constructed*. Doing this gives us the following code for the
    two cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And now the type of the function is clear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And again, the rest of the code is unmodified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
