["```\npackage main\n\nimport (\n        \"fmt\"\n        \"sync\"\n)\n\nvar global int\nvar wg sync.WaitGroup\n\nfunc count() {\n        defer wg.Done()\n        for i := 0; i < 10000; i++{\n                global++\n        }\n}\n\nfunc main() {\n        wg.Add(2)\n        go count()\n        go count()\n        wg.Wait()\n        fmt.Println(global)\n} \n```", "```\n# go run -race race.go\n==================\nWARNING: DATA RACE\nRead by goroutine 7:\n  main.count()\n      /root/gocode/src/race.go:14 +0x6d\n\nPrevious write by goroutine 6:\n  main.count()\n      /root/gocode/src/race.go:14 +0x89\n\nGoroutine 7 (running) created at:\n  main.main()\n      /root/gocode/src/race.go:21 +0x6d\n\nGoroutine 6 (running) created at:\n  main.main()\n      /root/gocode/src/race.go:20 +0x55\n==================\n19444\nFound 1 data race(s)\nexit status 66 \n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\nvar global int\nvar wg sync.WaitGroup\nvar w sync.Mutex\n\nfunc count() {\n    defer wg.Done()\n    for i := 0; i < 10000; i++{\n        w.Lock()\n        global++\n        w.Unlock()\n    }\n}\n\nfunc main() {\n    wg.Add(2)\n    go count()\n    go count()\n    wg.Wait()\n    fmt.Println(global)\n} \n```", "```\n# go run -race non_race.go\n20000 \n```"]