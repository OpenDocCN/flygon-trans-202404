- en: Quotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section is a short review and overview of the `quote` function (more commonly
    seen as `'`) and its functionalities to help you prep for the next section, `calc.rkt`.
  prefs: []
  type: TYPE_NORMAL
- en: Refresher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have used quotation `''` as a shortcut to create words and sentences since
    the beginning of this class. The example below should be painstakingly simple
    to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The use of a single quote is actually a shortcut - `'a` is equivalent to `(quote
    a)`. Similarly, `'(a 1 b 2)` is equivalent to `(quote (a 1 b 2))`
  prefs: []
  type: TYPE_NORMAL
- en: '**Test Your Understanding**'
  prefs: []
  type: TYPE_NORMAL
- en: The function quote (') is a special form.
  prefs: []
  type: TYPE_NORMAL
- en: Predicates and Quotes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To check for equality, we can use the primitive `eq?`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Another useful primitive for handling symbols/quotes is `memq`. `memq` takes
    two arguments, a symbol and a list. If the symbol is not contained in the list
    (i.e., it is not `eq?` to any item in the list), then `memq` returns `false`.
    Otherwise, it returns the sublist of the list beginning with the first occurrence
    of the symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the last example returns `#f` because `(eq? ''apple ''(apple android))`
    returns #f. Thus, `memq` does not work on deep lists.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can implement `memq` with the following definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Test Your Understanding**'
  prefs: []
  type: TYPE_NORMAL
- en: What do the following expressions return?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: What Will Racket Print?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For each of the following expressions, predict what Racket will print without
    using the interpreter. Then, use the interpreter to check your answers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Takeaways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this subsection, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: '`''hi` is a shorcut for `(quote hi)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`memq` is a predicate that determines whether a symbol is in a list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
