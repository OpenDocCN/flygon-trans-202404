- en: 変数と宣言
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 変数と宣言
- en: 原文：[https://jsprimer.net/basic/variables/](https://jsprimer.net/basic/variables/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/basic/variables/](https://jsprimer.net/basic/variables/)
- en: プログラミング言語には、文字列や数値などのデータに名前をつけることで、繰り返し利用できるようにする**変数**という機能があります。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: プログラミング言語には、文字列や数値などのデータに名前をつけることで、繰り返し利用できるようにする**変数**という機能があります。
- en: JavaScriptには「これは変数です」という宣言をするキーワードとして、 `const`、`let`、`var`の3つがあります。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptには「これは変数です」という宣言をするキーワードとして、 `const`、`let`、`var`の3つがあります。
- en: '`var`はもっとも古くからある変数宣言のキーワードですが、意図しない動作を作りやすい問題が知られています。 そのためECMAScript 2015で、`var`の問題を改善するために`const`と`let`という新しいキーワードが導入されました。'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`var`はもっとも古くからある変数宣言のキーワードですが、意図しない動作を作りやすい問題が知られています。 そのためECMAScript 2015で、`var`の問題を改善するために`const`と`let`という新しいキーワードが導入されました。'
- en: この章では`const`、`let`、`var`の順に、それぞれの方法で宣言した変数の違いについて見ていきます。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: この章では`const`、`let`、`var`の順に、それぞれの方法で宣言した変数の違いについて見ていきます。
- en: '[](#const)*[ES2015] `const`*'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#const)*[ES2015] `const`*'
- en: '*`const`キーワードでは、再代入できない変数の宣言とその変数が参照する値（初期値）を定義できます。'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*`const`キーワードでは、再代入できない変数の宣言とその変数が参照する値（初期値）を定義できます。'
- en: 次のように、`const`キーワードに続いて`変数名`を書き、代入演算子（`=`）の右辺に変数の`初期値`を書いて変数を定義できます。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 次のように、`const`キーワードに続いて`変数名`を書き、代入演算子（`=`）の右辺に変数の`初期値`を書いて変数を定義できます。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 次のコードでは`bookTitle`という変数を宣言し、初期値が`"JavaScript Primer"`という文字列であることを定義しています。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは`bookTitle`という変数を宣言し、初期値が`"JavaScript Primer"`という文字列であることを定義しています。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`const`、`let`、`var`どのキーワードも共通の仕組みですが、変数同士を`,`（カンマ）で区切ることにより、同時に複数の変数を定義できます。'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`const`、`let`、`var`どのキーワードも共通の仕組みですが、変数同士を`,`（カンマ）で区切ることにより、同時に複数の変数を定義できます。'
- en: 次のコードでは、`bookTitle`と`bookCategory`という変数を順番に定義しています。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、`bookTitle`と`bookCategory`という変数を順番に定義しています。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: これは次のように書いた場合と同じ意味になります。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: これは次のように書いた場合と同じ意味になります。
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: また、`const`は再代入できない変数を宣言するキーワードです。 そのため、`const`キーワードで宣言した変数に対して、後から値を代入することはできません。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: また、`const`は再代入できない変数を宣言するキーワードです。 そのため、`const`キーワードで宣言した変数に対して、後から値を代入することはできません。
- en: 次のコードでは、`const`で宣言した変数`bookTitle`に対して値を再代入しているため、次のようなエラー（`TypeError`）が発生します。
    エラーが発生するとそれ以降の処理は実行されなくなります。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、`const`で宣言した変数`bookTitle`に対して値を再代入しているため、次のようなエラー（`TypeError`）が発生します。
    エラーが発生するとそれ以降の処理は実行されなくなります。
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 一般的に変数への再代入は「変数の値は最初に定義した値と常に同じである」という参照透過性と呼ばれるルールを壊すため、バグを発生させやすい要因として知られています。そのため、変数に対して値を再代入する必要がない場合は、`const`キーワードで変数宣言することを推奨しています。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一般的に変数への再代入は「変数の値は最初に定義した値と常に同じである」という参照透過性と呼ばれるルールを壊すため、バグを発生させやすい要因として知られています。そのため、変数に対して値を再代入する必要がない場合は、`const`キーワードで変数宣言することを推奨しています。
- en: 変数に値を再代入したいケースとして、ループなどの反復処理の途中で特定の変数が参照する値を変化させたい場合があります。 そのような場合には、変数への再代入が可能な`let`キーワードを利用します。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 変数に値を再代入したいケースとして、ループなどの反復処理の途中で特定の変数が参照する値を変化させたい場合があります。 そのような場合には、変数への再代入が可能な`let`キーワードを利用します。
- en: '[](#let)*[ES2015] `let`*'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#let)*[ES2015] `let`*'
- en: '*`let`キーワードでは、値の再代入が可能な変数を宣言できます。 `let`の使い方は`const`とほとんど同じです。'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*`let`キーワードでは、値の再代入が可能な変数を宣言できます。 `let`の使い方は`const`とほとんど同じです。'
- en: 次のコードでは、`bookTitle`という変数を宣言し、初期値が`"JavaScript Primer"`という文字列であることを定義しています。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、`bookTitle`という変数を宣言し、初期値が`"JavaScript Primer"`という文字列であることを定義しています。
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`let`は`const`とは異なり、初期値を指定しない変数も定義できます。 初期値が指定されなかった変数はデフォルト値として`undefined`という値で初期化されます（`undefined`は値が未定義ということを表す値です）。'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`let`は`const`とは異なり、初期値を指定しない変数も定義できます。 初期値が指定されなかった変数はデフォルト値として`undefined`という値で初期化されます（`undefined`は値が未定義ということを表す値です）。'
- en: 次のコードでは、`bookTitle`という変数を宣言しています。 このとき`bookTitle`には初期値が指定されていないため、デフォルト値として`undefined`で初期化されます。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、`bookTitle`という変数を宣言しています。 このとき`bookTitle`には初期値が指定されていないため、デフォルト値として`undefined`で初期化されます。
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: この`let`で宣言された`bookTitle`という変数には、代入演算子（`=`）を使うことで値を代入できます。 代入演算子（`=`）の右側には変数へ代入する値を書きますが、ここでは`"JavaScript
    Primer"`という文字列を代入しています。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: この`let`で宣言された`bookTitle`という変数には、代入演算子（`=`）を使うことで値を代入できます。 代入演算子（`=`）の右側には変数へ代入する値を書きますが、ここでは`"JavaScript
    Primer"`という文字列を代入しています。
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`let`で宣言した変数に対しては何度でも値の代入が可能です。'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`let`で宣言した変数に対しては何度でも値の代入が可能です。'
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[](#var)*`var`*'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#var)*`var`*'
- en: '*`var`キーワードでは、値の再代入が可能な変数を宣言できます。 `var`の使い方は`let`とほとんど同じです。'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*`var`キーワードでは、値の再代入が可能な変数を宣言できます。 `var`の使い方は`let`とほとんど同じです。'
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`var`では、`let`と同じように初期値がない変数を宣言でき、変数に対して値の再代入もできます。'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`var`では、`let`と同じように初期値がない変数を宣言でき、変数に対して値の再代入もできます。'
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[](#var-issues)*`var`の問題*'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#var-issues)*`var`の問題*'
- en: '*`var`は`let`とよく似ていますが、`var`キーワードには同じ名前の変数を再定義できてしまう問題があります。'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*`var`は`let`とよく似ていますが、`var`キーワードには同じ名前の変数を再定義できてしまう問題があります。'
- en: '`let`や`const`では、同じ名前の変数を再定義しようとすると、次のような構文エラー（`SyntaxError`）が発生します。 そのため、間違えて変数を二重に定義してしまうというミスを防ぐことができます。'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`let`や`const`では、同じ名前の変数を再定義しようとすると、次のような構文エラー（`SyntaxError`）が発生します。 そのため、間違えて変数を二重に定義してしまうというミスを防ぐことができます。'
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 一方、`var`は同じ名前の変数を再定義できます。 これは意図せずに同じ変数名で定義してもエラーとならずに、値を上書きしてしまいます。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一方、`var`は同じ名前の変数を再定義できます。 これは意図せずに同じ変数名で定義してもエラーとならずに、値を上書きしてしまいます。
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: また`var`には変数の巻き上げと呼ばれる意図しない挙動があり、`let`や`const`ではこの問題が解消されています。 `var`による変数の巻き上げの問題については「[関数とスコープ](../function-scope/)」の章で解説します。
    そのため、現時点では「`let`は`var`を改善したバージョン」ということだけ覚えておくとよいです。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: また`var`には変数の巻き上げと呼ばれる意図しない挙動があり、`let`や`const`ではこの問題が解消されています。 `var`による変数の巻き上げの問題については「[関数とスコープ](../function-scope/)」の章で解説します。
    そのため、現時点では「`let`は`var`を改善したバージョン」ということだけ覚えておくとよいです。
- en: このように、`var`にはさまざまな問題があります。 また、ほとんどすべてのケースで`var`は`const`か`let`に置き換えが可能です。 そのため、これから書くコードに対して`var`を利用することは避けたほうがよいでしょう。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: このように、`var`にはさまざまな問題があります。 また、ほとんどすべてのケースで`var`は`const`か`let`に置き換えが可能です。 そのため、これから書くコードに対して`var`を利用することは避けたほうがよいでしょう。
- en: '[](#why-add-let-and-const)*[コラム] なぜ`let`や`const`は追加されたのか？*'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#why-add-let-and-const)*[コラム] なぜ`let`や`const`は追加されたのか？*'
- en: '*ECMAScript 2015では、`var`そのものを改善するのではなく、新しく`const`と`let`というキーワードを追加することで、`var`の問題を回避できるようにしました。`var`自体の動作を変更しなかったのは、後方互換性のためです。'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*ECMAScript 2015では、`var`そのものを改善するのではなく、新しく`const`と`let`というキーワードを追加することで、`var`の問題を回避できるようにしました。`var`自体の動作を変更しなかったのは、後方互換性のためです。'
- en: なぜなら、`var`の挙動自体を変更してしまうと、すでに`var`で書かれたコードの動作が変わってしまい、動かなくなるアプリケーションが出てくるためです。
    新しく`const`や`let`などのキーワードをECMAScript仕様に追加しても、そのキーワードを使っているソースコードは追加時点では存在しません。^([1](#fn_1))
    そのため、`const`や`let`が追加されても後方互換性には影響がありません。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: なぜなら、`var`の挙動自体を変更してしまうと、すでに`var`で書かれたコードの動作が変わってしまい、動かなくなるアプリケーションが出てくるためです。
    新しく`const`や`let`などのキーワードをECMAScript仕様に追加しても、そのキーワードを使っているソースコードは追加時点では存在しません。^([1](#fn_1))
    そのため、`const`や`let`が追加されても後方互換性には影響がありません。
- en: このように、ECMAScriptでは機能を追加する際にも後方互換性を重視しているため、`var`自体の挙動は変更されませんでした。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: このように、ECMAScriptでは機能を追加する際にも後方互換性を重視しているため、`var`自体の挙動は変更されませんでした。
- en: '[](#variable-name)*変数名に使える名前のルール*'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#variable-name)*変数名に使える名前のルール*'
- en: '*ここまでで`const`、`let`、`var`での変数宣言とそれぞれの特徴について見てきました。 どのキーワードにおいても宣言できる変数に利用できる名前のルールは同じです。
    また、このルールは変数の名前や関数の名前といったJavaScriptの識別子において共通するルールとなります。'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*到目前为止，我们已经了解了`const`、`let`、`var`关键字以及它们各自的变量声明特性。 在任何关键字中，可用于声明变量的名称规则都是相同的。
    此外，此规则适用于JavaScript标识符，如变量名和函数名。'
- en: 変数名の名前（識別子）には、次のルールがあります。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 变量名（标识符）有以下规则：
- en: 半角のアルファベット、`_`（アンダースコア）、`$`（ダラー）、数字を組み合わせた名前にする
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将变量名设为由半角字母、`_`（下划线）、`$`（美元符号）和数字`0`至`9`组成的名称
- en: 変数名は数字から開始できない
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变量名不能以数字开头
- en: 予約語と被る名前は利用できない
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不能使用保留字作为名称
- en: 変数の名前は、半角のアルファベットである`A`から`Z`（大文字）と`a`から`z`（小文字）、`_`（アンダースコア）、`$`（ダラー）、数字の`0`から`9`を組み合わせた名前にします。
    JavaScriptでは、アルファベットの大文字と小文字は区別されます。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 变量名应为由半角字母`A`至`Z`（大写）和`a`至`z`（小写）、`_`（下划线）、`$`（美元符号）、数字`0`至`9`组成的名称。 在JavaScript中，区分大小写。
- en: これらに加えて、ひらがなや一部の漢字なども変数名に利用できますが、全角の文字列が混在すると環境によって扱いにくいこともあるためお勧めしません。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，虽然可以在变量名中使用平假名和部分汉字等，但是如果混合全角字符，则可能会因环境问题而难以处理，因此不建议使用。
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 変数名に数字を含めることはできますが、変数名を数字から開始することはできません。 これは変数名と数値が区別できなくなってしまうためです。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在变量名中包含数字，但是变量名不能以数字开头。 这是因为会导致无法区分变量名和数字。
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: また、予約語として定義されているキーワードは変数名には利用できません。 予約語とは、`let`のように構文として意味を持つキーワードのことです。 予約語の一覧は[予約語
    - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Lexical_grammar)で確認できますが、基本的には構文として利用される名前が予約されています。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，无法将保留字用作变量名。 保留字是指具有语法意义的关键字，例如`let`。 可以在[保留字 - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Lexical_grammar)上找到保留字列表，但基本上是保留用于语法的名称。
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[](#const-is-not-constant)*[コラム] `const`は定数ではない*'
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#const-is-not-constant)*[专栏] `const`并非常量*'
- en: '*`const`は「再代入できない変数」を定義する変数宣言であり、必ずしも定数を定義するわけではありません。 定数とは、一度定義した名前（変数名）が常に同じ値を示すものです。'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*`const`是定义“不能重新赋值的变量”的变量声明，并不一定定义常量。常量是指一旦定义的名称（变量名）始终表示相同值的东西。'
- en: JavaScriptでも、`const`宣言によって定数に近い変数を定義できます。 次のように、`const`宣言によって定義した変数を、変更できないプリミティブな値で初期化すれば、それは実質的に定数です。
    プリミティブな値とは、数値や文字列などオブジェクト以外のデータです（詳細は「[データ型とリテラル](../data-type/)」の章で解説します）。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，也可以使用`const`声明接近常量的变量。如果使用`const`声明的变量初始化为无法更改的原始值，则实际上就是常量。原始值是指除对象之外的数据，例如数字和字符串（有关详细信息，请参阅“[数据类型和字面量](../data-type/)”章节）。
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: しかし、JavaScriptではオブジェクトなども`const`宣言できます。 次のコードのように、オブジェクトという値そのものは、初期化したあとでも変更できます。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在JavaScript中，也可以使用`const`声明对象等。 例如，对象值本身在初始化后也可以更改。
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: このように、`const`で宣言した変数が常に同じ値を示すとは限らないため、定数とは呼べません （詳細は「[オブジェクト](../object/#const-and-object)」の章で解説します）。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，由于使用`const`声明的变量不一定始终表示相同的值，因此不能称之为常量（有关详细信息，请参见“[对象](../object/#const-and-object)”章节）。
- en: また`const`には、変数名の命名規則はなく、代入できる値にも制限はありません。 そのため、`const`宣言の特性として「再代入できない変数」を定義すると理解しておくのがよいでしょう。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`const`没有变量命名规则，也没有赋值限制。因此，最好理解`const`声明的特性是定义“不能重新赋值的变量”。
- en: '[](#summary)*まとめ*'
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#summary)*总结*'
- en: '*この章では、JavaScriptにおける変数を宣言するキーワードとして`const`、`let`、`var`があることについて学びました。'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章介绍了JavaScript中用于声明变量的关键字`const`、`let`、`var`。'
- en: '`const`は、再代入できない変数を宣言できる'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`const`可以声明不能重新赋值的变量'
- en: '`let`は、再代入ができる変数を宣言できる'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`let`可以声明可以重新赋值的变量'
- en: '`var`は、再代入ができる変数を宣言できるが、いくつかの問題が知られている'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var`可以声明可以重新赋值的变量，但已知存在一些问题'
- en: 変数の名前（識別子）には利用できる名前のルールがある
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名（标识符）有一些可用的名称规则
- en: '`var`はほとんどすべてのケースで`let`や`const`に置き換えが可能です。 `const`は再代入できない変数を定義するキーワードです。再代入を禁止することで、ミスから発生するバグを減らすことが期待できます。
    そのため変数を宣言する場合には、まず`const`で定義できないかを検討し、できない場合は`let`を使うことを推奨しています。'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`var`在大多数情况下都可以用`let`或`const`来替代。`const`定义了不能重新赋值的变量。通过禁止重新赋值，可以减少因错误而引起的bug。因此，在声明变量时，首先考虑是否可以用`const`定义，如果不行，则建议使用`let`。'
- en: ¹. `let`や`const`はECMAScript 2015以前に予約語として定義されていたため、既存のコードと衝突する可能性はありませんでした。
    [↩](#reffn_1 "Jump back to footnote [1] in the text.")********
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. 由于`let`和`const`在ECMAScript 2015之前被定义为保留字，所以不会与现有代码冲突。 [↩](#reffn_1 "跳回到正文中的脚注
    [1]")********
