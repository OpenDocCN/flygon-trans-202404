- en: Managing Flash Memory
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理闪存
- en: Lecture Notes for CS 140
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CS 140 的讲座笔记
- en: Spring 2014
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 2014 年春季
- en: John Ousterhout
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰·奥斯特豪特
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    Section 12.2.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本主题的阅读来自*操作系统：原理与实践*：第 12.2 节。
- en: 'Solid state (semiconductor) storage, replacing disks in many applications (e.g.
    phones and other devices). Primary advantages:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固态（半导体）存储，取代许多应用中的磁盘（例如手机和其他设备）。主要优势：
- en: 'Nonvolatile (unlike DRAM): values persist even if device is powered off'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非易失性（不像 DRAM）：即使设备断电，值仍然保持不变
- en: 'Better than disk:'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比磁盘更好：
- en: No moving parts, so more reliable
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有移动部件，因此更可靠
- en: Faster access
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的访问
- en: More shock-resistant
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更抗震击
- en: 5-10x more expensive than disk
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比磁盘贵 5-10 倍
- en: 5-10x cheaper than DRAM
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比 DRAM 便宜 5-10 倍
- en: 'Two styles, NAND and NOR; NAND is most popular today:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两种风格，NAND 和 NOR；NAND 是今天最流行的：
- en: Total chip capacity up to 8 Gbytes today
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 今天的总芯片容量高达8 G字节
- en: Storage divided into *erase units* (typically 256 Kbytes), which are subdivided
    into *pages* (typically 512 bytes or 4 Kbytes)
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储��为*擦除单元*（通常为 256 K字节），这些单元被细分为*页*（通常为 512 字节或 4 K字节）
- en: Storage is read in units of pages
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储以页为单位读取
- en: 'Two kinds of writes:'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两种写入方式：
- en: 'Erase: sets all of the bits in an erase unit to 1''s.'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 擦除：将擦除单元中的所有位设置为 1。
- en: 'Write: modifies an individual page, can only clear bits to 0 (writing 1''s
    has no effect).'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入：修改单个页，只能将位清除为 0（写入 1 没有效果）。
- en: Can write repeatedly to clear more bits.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以重复写入以清除更多位。
- en: '*Wear-out*: once a page has been erased many times (typically around 100,000,
    as low as 10,000 in some new devices) it no longer stores information reliably.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*磨损*：一旦一页被擦除多次（通常约为10万次，在一些新设备中低至1万次），它就不再可靠地存储信息。'
- en: 'Typical flash memory performance:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型的闪存性能：
- en: 'Read performance: 20-100 microsconds latency, 100-500 MBytes/sec.'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取性能：20-100 微秒延迟，100-500 M字节/秒。
- en: 'Erasure time: 2 ms'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 擦除时间：2 毫秒
- en: 'Write performance: 200 microseconds latency, 100-200 MBytes/sec.'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入性能：200 微秒延迟，100-200 M字节/秒。
- en: 'In practice, most flash memory devices are packaged with a *flash translation
    layer* (FTL):'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际上，大多数闪存设备都打包了一个*闪存转换层*（FTL）：
- en: Software that manages the flash device
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理闪存设备的软件
- en: Typically provides an interface like that for a disk (read and write blocks)
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常提供类似磁盘的接口（读取和写入块）
- en: Use with existing file system software
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与现有文件系统软件一起使用
- en: 'FTLs are interesting pieces of software, but most FTLs today aren''t very good:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FTL 是有趣的软件组件，但今天大多数 FTL 并不是很好：
- en: Sacrifice performance
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 牺牲性能
- en: Waste capacity
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浪费容量
- en: 'One possible approach for FTLs: *direct mapped* (e.g., some cheap flash sticks)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FTL 的一种可能方法：*直接映射*（例如，一些廉价的闪存棒）
- en: Virtual block *i* is stored on page *i* of the flash device
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟块 *i* 存储在闪存设备的第 *i* 页上
- en: Reads are simple
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取很简单
- en: 'To write virtual block *i*:'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要写入虚拟块 *i*：
- en: Read erase unit containing page *i*
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取包含页 *i* 的擦除单元
- en: Erase the entire unit
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 擦除整个单元
- en: Rewrite erase unit with modified page
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用修改后的页重写擦除单元
- en: What's wrong with this approach?
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种方法有什么问题？
- en: To avoid these problems, must separate virtual block number from physical location
    in flash memory, so a given virtual block can occupy different pages in flash
    memory over time.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要避免这些问题，必须在闪存中将虚拟块号与物理位置分开，以便给定的虚拟块可以随着时间在闪存中占据不同的页。
- en: Keep a *block map* that maps from virtual blocks to physical pages
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留一个*块映射*，将虚拟块映射到物理页
- en: Reads must first lookup the physical location in the block map
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取必须首先查找块映射中的物理位置
- en: 'For writes:'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于写入：
- en: Find a free and erased page
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到一个空闲和擦除的页
- en: Write virtual block to that page
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将虚拟块写入该页
- en: Update block map with new location
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新块映射到新位置
- en: Mark previous page for virtual block as free
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记前一页的虚拟块为自由
- en: This introduces additional issues
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这引入了额外的问题
- en: How to manage map (is it stored on the flash device?)
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何管理映射（是否存储在闪存设备上？）
- en: How to manage free space (e.g. wear leveling)
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何管理空闲空间（例如磨损平衡）
- en: 'One approach: keep block map in memory, rebuild on startup:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种方法：将块映射保留在内存中，在启动时重建：
- en: Don't store block map on flash device
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要将块映射存储在闪存设备上
- en: 'Each page on flash contains an additional header:'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闪存上的每一页包含额外的页头：
- en: Virtual block number
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟块号
- en: Free/used bit (1 => free)
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自由/已用位（1 => 自由）
- en: Prevalid/valid bit (1 => prevalid)
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预验证/有效位（1 => 预验证）
- en: valid/Obsolete bit (1 => valid)
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效/废弃位（1 => 有效）
- en: 'F-P-O bits track lifecycle of page:'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: F-P-O 位跟踪页面的生命周期：
- en: 'Just erased: 1-1-1'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 刚擦除：1-1-1
- en: 'About to write data: 0-1-1'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即将写入数据：0-1-1
- en: 'Block successfully written: 0-0-1'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功写入块：0-0-1
- en: 'Block deleted (new copy written elsewhere): 0-0-0'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 块已删除（新副本写入其他位置）：0-0-0
- en: Why is 0-1-1 state needed?
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么需要 0-1-1 状态？
- en: On startup, read entire contents of flash memory to rebuild block map (32 seconds
    for 8GB, 512 seconds for 128GB).
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在启动时，读取闪存内存的全部内容以重建块映射（8GB 需要 32 秒，128GB 需要 512 秒）。
- en: To reduce memory utilization for block map, store block map in flash, cache
    parts of it in memory
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了减少块映射的内存利用率，将块映射存储在闪存中，部分缓存在内存中
- en: Header for each flash page indicates whether that page is a data page or a map
    page
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个闪存页的标头指示该页是数据页还是映射页。
- en: Keep locations of map pages in memory (map-map)
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在内存中保留映射页的位置（映射-映射）
- en: Scan flash on startup to re-create map-map
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在启动时扫描闪存以重新创建映射-映射
- en: During writes, must write new map page plus new data page
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在写入期间，必须写入新的映射页和新的数据页。
- en: Some reads may require 2 flash operations
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有些读取可能需要 2 个闪存操作。
- en: Obsolete blocks accumulate in erase units, which reduces effective capacity.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 废弃的块堆积在擦除单元中，这降低了有效容量。
- en: 'Solution: *garbage collection*'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案：*垃圾回收*
- en: Find erase units with many free pages
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到具有许多空闲页的擦除单元。
- en: Copy live pages to a clean erase unit (update block map)
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将活动页复制到干净的擦除单元（更新块映射）。
- en: Erase and reuse old erase unit
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 擦除并重新使用旧擦除单元
- en: 'Note: must always keep at least one clean erase unit to use for garbage collection!'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意：必须始终保留至少一个干净的擦除单元用于垃圾回收！
- en: 'Wear-leveling:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磨损平衡：
- en: Want all erase units to be erased at about the same rate
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 希望所有擦除单元的擦除速度大致相同。
- en: Use garbage collection to move data between "hot" and "cold" pages.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用垃圾回收在“热”和“冷”页面之间移动数据。
- en: 'Hard to achieve good performance, good utilization, and longevity all the same
    time:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很难同时实现良好的性能、良好的利用率和长寿命：
- en: 'If the flash device is 90% utilized, write cost increases by 10x:'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果闪存设备利用率为 90%，写入成本将增加 10 倍：
- en: To get space for one new page, must garbage collect 10 old pages
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了为一个新页面腾出空间，必须垃圾回收 10 个旧页面。
- en: 9 will still be valid and must be copied
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9 仍然有效，必须被复制。
- en: 1 new page gets written
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入 1 个新页面
- en: 'Total: 9 reads, 10 writes to write 1 new page!'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总计：读取 9 次，写入 10 次才能写入 1 个新页面！
- en: This is called *write amplification*
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这被称为 *写放大*。
- en: Lower utilization makes writes cheaper, but wastes space.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低利用率使得写入更便宜，但浪费空间。
- en: Frequent garbage collection (e.g. because of high utilization) also wears out
    the device faster
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频繁的垃圾回收（例如因为高利用率）也会更快地耗损设备。
- en: 'Ideal situation: hot and cold data'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理想情况：热数据和冷数据
- en: Some erase units contain only data that is never modified ("cold"), so they
    are always full and never need to be garbage collected.
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有些擦除单元只包含从不修改的数据（“冷”数据），因此它们总是满的，从不需要进行垃圾回收。
- en: Other erase units contain data that is quickly overwritten; we can just wait
    until all of the pages have been overwritten, then garbage collect the erase unit
    for free.
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他擦除单元包含的数据很快被覆盖；我们可以等待所有页面都被覆盖，然后免费进行垃圾回收。
- en: There are ways to encourage such a bimodal distribution.
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有方法鼓励这种双峰分布。
- en: 'Incorporating flash memory as a disk-like device with FTL is inefficient:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将闪存内存作为带有FTL的类磁盘设备整合是低效的：
- en: 'Duplication:'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制：
- en: 'OS already keeps various index structures for files:'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统已经为文件保留了各种索引结构：
- en: These are equivalent to the block map
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些等同于块映射
- en: If OS could manage the flash directly, it could combine the block map with file
    indexes
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果操作系统可以直接管理闪存，它可以将块映射与文件索引合并。
- en: 'Lack of information:'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏信息：
- en: FTL doesn't know when OS has freed a block; only finds out when block is overwritten
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: FTL 不知道操作系统何时释放了一个块；只有在块被重写时才发现。
- en: Thus FTL may rewrite dead blocks during garbage collection!
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，FTL 在垃圾回收期间可能会重写已失效的块！
- en: Newer flash devices offer *trim* command that allows OS to indicate deletion
    (but must modify OS file systems).
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较新的闪存设备提供了 *trim* 命令，允许操作系统指示删除（但必须修改操作系统文件系统）。
- en: 'Better long-term solution: new file systems designed just for flash memory'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的长期解决方案：专门为闪存设计的新文件系统。
- en: Lots of interesting issues and design alternatives
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多有趣的问题和设计替代方案
- en: Has been explored by research teams, but no widely-used implementations
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已被研究团队探索，但没有广泛使用的实现
- en: Need ability to bypass the FTL
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要绕过FTL的能力
- en: Interesting opportunity
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有趣的机会
