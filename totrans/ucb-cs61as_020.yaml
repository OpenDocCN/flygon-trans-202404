- en: How Recursion Works
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归是如何工作的
- en: Breaking Down Recursion
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分解递归
- en: 'Let''s see how recursion can magically find the factorial of any number. We''ve
    replicated the code below:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看递归如何神奇地找到任何数字的阶乘。我们在下面复制了代码：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`factorial` returns `1` when `n` is `0`, otherwise it returns the product of
    `n` and the factorial of `n - 1`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当`n`为`0`时，`factorial`返回`1`，否则返回`n`和`n - 1`的阶乘的乘积。
- en: 'Every recursive procedure uses conditionals, and will need two cases:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 每个递归过程都使用条件语句，并且需要两种情况：
- en: '**Base case:** This case ends the recursion. Any input to a recursive procedure
    will eventually reach the base case.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本情况：** 这种情况结束递归。递归过程的任何输入最终都会达到基本情况。'
- en: '**Recursive case:** This case reduces the size of the problem. The recursive
    case will always try to make the problem smaller until it reaches the base case.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**递归情况：** 这种情况减小了问题的规模。递归情况总是尝试将问题变小，直到达到基本情况。'
- en: There can be more than one base case or recursive case in a recursive procedure,
    but there must be at least one of each in order for any procedure to be correct
    and recursive.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 递归过程中可以有多个基本情况或递归情况，但为了使任何过程正确和递归，至少必须有一个基本情况和一个递归情况。
- en: There is one base case and one recursive case in our `factorial` procedure.
    Can you identify them?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`factorial`过程中有一个基本情况和一个递归情况。你能识别出它们吗？
- en: '**Test Your Understanding**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: 'The case in which `n` is `0` is the *base case* of `factorial`. Consider this
    alternate definition of `factorial`, which has no base case:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当`n`为`0`时，是`factorial`的*基本情况*。考虑这个没有基本情况的`factorial`的替代定义：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What is wrong with this alternate definition?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个替代定义有什么问题吗？
- en: 'The second case in which we call `factorial` within itself is the *recursive
    case*. Notice that the recursive call solves a smaller problem (i.e., `(factorial
    (- n 1))`) than the one we were originally given. Consider this alternate definition
    of `factorial`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`factorial`内部调用`factorial`的第二种情况是*递归情况*。请注意，递归调用解决的是一个比我们最初给定的问题更小的问题（即`(factorial
    (- n 1))`）。考虑`factorial`的另一种定义：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What's wrong with this alternate definition?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个替代定义有什么问题？
- en: Which of the following statements must hold for every recursive procedure you
    write? Choose all that apply.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你编写的每个递归过程，以下哪些陈述必须成立？选择所有适用的。
- en: Leap of Faith
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信仰的飞跃
- en: At this point, you may still be wondering how a function can be defined in terms
    of itself. If you use `factorial` in the middle of defining `factorial`, shouldn't
    you get an error saying that `factorial` isn't defined yet? In order to make it
    work, you have to believe that it works. This is, in a sense, a *leap of faith*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可能仍然在想一个函数如何可以根据自身来定义。如果在定义`factorial`的过程中使用`factorial`，那么不应该会出现一个错误，说`factorial`还未定义吗？为了使其正常工作，你必须相信它可以工作。从某种意义上说，这是一种*信仰的飞跃*。
- en: The leap of faith is actually a technique for writing recursive procedures.
    We must imagine that the procedure you are writing already works for any problem
    smaller than the one you are currently tackling. Thus, while you are thinking
    about how to compute `(factorial 5)`, imagine that `(factorial 4)` has already
    been solved. This will keep your own thoughts from getting stuck in an infinite
    loop.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 信仰的飞跃实际上是编写递归过程的一种技术。我们必须想象你正在编写的过程已经可以解决比当前正在解决的问题更小的问题。因此，当你考虑如何计算`(factorial
    5)`时，想象`(factorial 4)`已经被解决。这将防止你的思维陷入无限循环。
- en: Back in Lesson 0-2, we stated an important property of defining procedures,
    where the procedure body is not evaluated when it is definted. This is the technical
    reason why recursion can work. Thus, `define` is a special form that does not
    evaluate its arguments and keeps the procedure body from being evaluated. The
    body is only evaluated when you call the procedure outside of the definition.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在第0-2课时，我们提到了定义过程的一个重要属性，即在定义时不会评估过程体。这是递归可以工作的技术原因。因此，`define`是一个特殊形式，不会评估其参数，并且保持过程体不被评估。只有在定义之外调用过程时才会评估过程体。
- en: '**Test Your Understanding**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: Which of these expressions cause an error in Racket? Select all that apply.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下列哪些表达式在Racket中会导致错误？选择所有适用的。
- en: Enter each expression into the Racket interpreter and see what happens.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个表达式输入Racket解释器中，看看会发生什么。
- en: '`factorial` Revisited'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新审视`factorial`
- en: Let's take a look at the definition of `factorial` again.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看看`factorial`的定义。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we would like to evaluate `(factorial 6)`, then we reach the else case of
    the `if` statement and reduce the problem to `(* 6 (factorial 5))`. To simplify
    this further, we''ll need to evaluate `(factorial 5)`. Thus, we get `(* 5 (factorial
    4))`. If we substitute this into the original expression, we get `(* 6 (* 5 (factorial
    4)))`. A few more recursive calls later, we''ll get something like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要计算`(factorial 6)`，那么我们会到达`if`语句的else情况，并将问题简化为`(* 6 (factorial 5))`。为了进一步简化这个问题，我们需要计算`(factorial
    5)`。因此，我们得到`(* 5 (factorial 4))`。如果我们将这个替换到原始表达式中，我们得到`(* 6 (* 5 (factorial 4)))`。再经过几次递归调用，我们会得到类似这样的东西：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'What should we do with `(factorial 0)`? This is the base case, and we should
    just return `1`. Thus, we get this expression:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该如何处理`(factorial 0)`？这是基本情况，我们应该返回`1`。因此，我们得到这个表达式：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is simply a series of nested multiplication expressions, which we can
    simplify easily, from inside out:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一系列嵌套的乘法表达式，我们可以很容易地从内向外简化：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In Racket, there is a very useful procedure called `trace`, which takes a procedure
    as an argument and returns the process of the procedure when the procedure is
    invoked.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在Racket中，有一个非常有用的过程叫做`trace`，它接受一个过程作为参数，并在调用该过程时返回该过程的过程。
- en: In your Racket interpreter, type `(trace factorial)` after defining the `factorial`
    procedure, then call `(factorial 6)`. What do you see? If you no longer want to
    trace the procedure, simply type `(untrace factorial)`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Racket解释器中，在定义`factorial`过程后键入`(trace factorial)`，然后调用`(factorial 6)`。你看到了什么？如果您不再想要跟踪该过程，只需键入`(untrace
    factorial)`。
- en: 'Example: Fibonacci Numbers'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子：斐波那契数列
- en: 'Consider computing the sequence of Fibonacci numbers, in which each number
    is the sum of the preceding two:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑计算斐波那契数列，其中每个数字是前两个数字的和：
- en: \begin{align} 0, 1, 1, 2, 3, 5, 8, 13, 21 \end{align}
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: \begin{align} 0, 1, 1, 2, 3, 5, 8, 13, 21 \end{align}
- en: 'In general, the Fibonacci numbers can be defined by the following rule:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，斐波那契数可以通过以下规则定义：
- en: \begin{align} Fib(n) = \begin{cases} 0, & \text{if n = 0} \\ 1, & \text{if n
    = 1} \\ Fib(n - 1) + Fib(n - 2), & \text{otherwise} \end{cases} \end{align}
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: \begin{align} Fib(n) = \begin{cases} 0, & \text{如果 n = 0} \\ 1, & \text{如果 n
    = 1} \\ Fib(n - 1) + Fib(n - 2), & \text{其他情况} \end{cases} \end{align}
- en: 'We can immediately translate this definition into a recursive procedure for
    computing Fibonacci numbers:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以立即将这个定义转换为一个递归过程，用于计算斐波那契数：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Consider what happens when we call `(fib 2)`. The procedure makes two recursive
    calls `(fib 1)` and `(fib 0)`, which return `1` and `0` respectively. These numbers
    are added together, and the procedure returns `1`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑调用`(fib 2)`时会发生什么。该过程进行两次递归调用`(fib 1)`和`(fib 0)`，分别返回`1`和`0`。这些数字相加，过程返回`1`。
- en: You may be wondering if it's really necessary to have two separate base cases.
    Consider what would happen if we left out the base case for when `n` is `1`. `(fib
    1)` would call `(+ (fib 0) (fib -1))`. `(fib 0)` would return `0`, but `(fib -1)`
    would never reach a base case, and the procedure would loop indefinitely.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你会想知道是否真的有必要有两个单独的基本情况。考虑一下，如果我们省略了`n`为`1`时的基本情况会发生什么。`(fib 1)`会调用`(+ (fib
    0) (fib -1))`。`(fib 0)`会返回`0`，但`(fib -1)`永远不会达到基本情况，过程会无限循环。
- en: 'Example: Pig Latin'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子：Pig Latin
- en: 'You may be familiar with Pig Latin, which is a language game where words in
    English are altered according to a simple set of rules: take the first consonant
    (or consonant cluster) of an English word and move it to the end of the word and
    append "ay" to the word. For example, "pig" yields "igpay", "trash" yields "ashtray",
    and "object" yields "objectay".'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你熟悉Pig Latin，这是一个语言游戏，根据一组简单的规则改变英语单词：取英语单词的第一个辅音（或辅音簇）并将其移动到单词的末尾，然后在单词后附加“ay”。例如，“pig”变为“igpay”，“trash”变为“ashtray”，“object”变为“objectay”。
- en: 'We can write Pig Latin in Racket using recursion and helper procedure:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用递归和辅助过程在Racket中编写Pig Latin：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As a reminder, `member?` is a Racket primitive procedure that takes two arguments,
    a letter and a word and returns true if the letter is in the word.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，`member?`是一个Racket原始过程，它接受两个参数，一个字母和一个单词，并在字母在单词中时返回true。
- en: Pig Latin is done when a vowel is found, so the base case is when `pl-done?`
    returns true, and it just concatenates "ay" at the end of the word. Otherwise,
    in the recursive case, it calls itself with the concatenation of the `butfirst`
    of the word and the first of word. Think about what happens if the word contains
    no vowels.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当找到元音时，Pig Latin结束，因此基本情况是当`pl-done?`返回true时，它只是在单词末尾连接“ay”。否则，在递归情况下，它调用自身与单词的`butfirst`和单词的第一个的连接。想想如果单词不包含元音会发生什么。
- en: Use your Racket interpreter to try out this implementation of `pigl`. Don't
    forget to take advantage of the `trace` procedure!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的 Racket 解释器尝试这个`pigl`的实现。不要忘记利用`trace`过程！
- en: 'Example: `sum-sent`'
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：`sum-sent`
- en: 'Suppose we have a sentence of numbers, such as the one below:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个数字句子，如下所示：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We want to define a procedure called `sum-sent` that can find the sum of all
    the numbers in `sent`, but we also want `sum-sent` to be able to find the sum
    of *any* sentence of numbers. Since the output depends on the size of the input
    sentence, we will have to use recursion!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要定义一个名为`sum-sent`的过程，它可以找到`sent`中所有数字的总和，但我们也希望`sum-sent`能够找到*任何*数字句子的总和。由于输出取决于输入句子的大小，我们将不得不使用递归！
- en: 'Let''s take the leap of faith. Imagine that `sum-sent` already knows how to
    calculate the sentence containing all but the first number, e.g, `''(2 3 4 5)`.
    To find this, we would simply call `(sum-sent (bf sent))`, and we should have
    faith that it will give us the correct sum. Given that, we know that:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们跨出信任的一步。想象一下`sum-sent`已经知道如何计算除第一个数字外的所有数字的句子，例如，`'(2 3 4 5)`。要找到这个，我们只需调用`(sum-sent
    (bf sent))`，并且我们应该相信它会给我们正确的总和。鉴于此，我们知道：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we generalize this for any sentence of numbers, this gives us our recursive
    case:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这个推广到任何数字句子，这就给我们了递归情况：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Test Your Understanding**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: What happens when we stop here and define `sum-sent` as follows?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们停在这里并将`sum-sent`定义如下时会发生什么？
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We''re missing the base case! To solve this problem, we must add a case that
    will handle the empty sentence. The predicate `empty?` can be used to check for
    the empty sentence. Here is the completed version of `sum-sent`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们缺少基本情况！为了解决这个问题，我们必须添加一个处理空句子的情况。谓词`empty?`可用于检查空句子。这是`sum-sent`的完成版本：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Test Your Understanding**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: Suppose we have a sentence of negative numbers, `'(-1 -3 -4 -6)`. What will
    Racket output? Run through this example using the code for `sum-sent` above without
    typing it into the interpeter. Then, use the interpreter to check your work.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个负数句子，`'(-1 -3 -4 -6)`。Racket 会输出什么？使用上面`sum-sent`的代码运行此示例，而不要将其输入到解释器中。然后，使用解释器检查你的工作。
- en: Feel free to try out more examples with `sum-sent` in the Racket interpreter.
    If the recursion is confusing, try looking at what `trace` outputs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 随意在 Racket 解释器中尝试更多与`sum-sent`相关的示例。如果递归令人困惑，尝试查看`trace`输出。
- en: Exercises
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: '**Test Your Understanding: `count-ums`**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解：`count-ums`**'
- en: 'When you teach a class, people will get distracted if you say "um" too many
    times. Write a procedure called `count-ums` that takes in a sentence of words
    as its arguments and counts the number of times "um" appears in that sentence:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你教课时，如果你说“嗯”太多次，人们会分心。编写一个名为`count-ums`的过程，它以单词句子作为参数，并计算该句子中“嗯”出现的次数：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Write `count-ums` recursively.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 递归地编写`count-ums`。
- en: '**Hint #1:** What should happen when the sentence is empty?'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示＃1：** 当句子为空时会发生什么？'
- en: '**Hint #2:** What should happen when the first word of the sentence is "um"?'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示＃2：** 当句子的第一个单词是“嗯”时会发生什么？'
- en: '**Hint #3:** What should happen when the first word of the sentence is NOT
    "um"?'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示＃3：** 当句子的第一个单词不是“嗯”时会发生什么？'
- en: '**Test Your Understanding: `countdown`**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解：`倒计时`**'
- en: 'Write a procedure called `countdown` that takes in a number and works as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`countdown`的过程，它接受一个数字，并按以下方式工作：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
