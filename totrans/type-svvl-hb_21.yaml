- en: Reactコンポーネントのテストを書こう
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/tutorials/component-test](https://typescriptbook.jp/tutorials/component-test)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: このチュートリアルでは、Reactコンポーネントのテストを書くことを学びます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 本章で学べること[​](#本章で学べること "本章で学べること への直接リンク")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 本章では、簡単なコンポーネントのテストを書くことを目標に、具体的には次のことをやっていきます。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: UIテストのためのライブラリ群`testing-library`を使ったテストの作成
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Jest`を使ったスナップショットテストの作成'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 本章の目的はコンポーネントのテストを完全に理解することではありません。むしろ、それがどういったものなのか、その雰囲気を実際に体験することに主眼を置いています。そのため、内容はかなり最低限のものとなりますが、逆に言えば少しの時間でコンポーネントテストを試してみれるシンプルな内容にまとまってますから、ぜひ手を動かしてみてください。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 備考
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Reactでコンポーネントが作れることを前提にしますので、Reactの基本的な使い方を知りたいという方は[Reactでいいねボタンを作ろう](/tutorials/react-like-button-tutorial)をご参照ください。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: このチュートリアルで作成するテストコードの完成形は[GitHub](https://github.com/yytypescript/component-test-tutorial/blob/main/src/SimpleButton.test.tsx)で確認することができます。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: このチュートリアルに必要なもの[​](#このチュートリアルに必要なもの "このチュートリアルに必要なもの への直接リンク")
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: このチュートリアルをやるに当たって、必要なツールがあります。それらはここにリストアップしておくのであらかじめ用意しておいてください。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Node.js (このチュートリアルではv18.15.0で動作確認しています)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPM
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yarn v1系 (このチュートリアルはv1.22.19で動作確認しています)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.jsの導入については、[開発環境の準備](/tutorials/setup)をご覧ください。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: パッケージ管理ツールとしてYarnを利用します。最初にインストールをしておきましょう。すでにインストール済みの方はここのステップはスキップして大丈夫です。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Reactプロジェクトの作成[​](#reactプロジェクトの作成 "Reactプロジェクトの作成 への直接リンク")
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: テストに使用するためのReactプロジェクトを作成します。下記コマンドを実行してください。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 成功すると今いるディレクトリ配下に`component-test-tutorial`というディレクトリが作られます。そのまま下記コマンドを実行して`component-test-tutorial`に移動しましょう。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`component-test-tutorial`配下のファイル構成は次のようになっているはずです。'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ここで次のコマンドを実行してください。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 自動的にブラウザが開かれて次の画像のように表示されれば、プロジェクト作成が成功しています。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![ひながた初期状態の画面](../Images/940efb79352dea6bd89223ae243ee499.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: テストするコンポーネント[​](#テストするコンポーネント "テストするコンポーネント への直接リンク")
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここでは、簡単なボタンコンポーネントのテストを書くことを例に進めていきます。具体的には、はじめは`OFF`となっているボタン上の文字が、ボタンをクリックするたびに`ON`/`OFF`と切り替わるようなボタンを題材にします。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![ボタン上の文字がクリックによってON,OFFと切り替わる様子](../Images/359aa14f06ae7f018264516fb26b4722.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: このコンポーネントについて、ボタンをクリックすると`ON`/`OFF`の表示が切り替わることをテストしましょう。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: テスト対象のコンポーネントを作る[​](#テスト対象のコンポーネントを作る "テスト対象のコンポーネントを作る への直接リンク")
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: テストを作成するために、まずはテスト対象となるコンポーネントを実装していきます。`src`ディレクトリ配下に、`SimpleButton.tsx`という名前でファイルを作成してください。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: このファイルを作ると、`src`ディレクトリのファイル構成は次のようになります。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`SimpleButton.tsx`の内容は次のようにします。'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ここで、この`SimpleButton`コンポーネントの挙動を確認してみましょう。`index.tsx`ファイルを次のようにして保存してください。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: そのうえで下記コマンドを実行しましょう。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: すると、ブラウザが自動で立ち上がり、次のようなボタンが表示されます。初めは`OFF`と表示され、クリックにより`ON`と`OFF`が交互に切り替わることを確認してください。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![ボタン上の文字がクリックによってON,OFFと切り替わる様子](../Images/359aa14f06ae7f018264516fb26b4722.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: 備考
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: ボタンが小さければ、ブラウザの拡大率を上げてみると大きく表示されます。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: これで今回テストするコンポーネントを作成できました。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '`testing-library`を使ったテストの作り方とやり方[​](#testing-libraryを使ったテストの作り方とやり方 "testing-libraryを使ったテストの作り方とやり方
    への直接リンク")'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここからはテストの作り方とやり方に入ります。今回は、ボタンをクリックすると`ON`/`OFF`の表示が切り替わることをテストしていきます。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Reactコンポーネントをテストする方法は複数ありますが、ここでは利用者が比較的多い`testing-library`というライブラリ群を用いる方法を紹介します。`testing-library`はUIコンポーネントのテストをするためのライブラリ群であり、コンポーネントの描画やコンポーネントに対する操作などが実現できます。`testing-library`があれば、コンポーネントのテストはひととおりできると考えてよいでしょう。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: testing-libraryをインストールする[​](#testing-libraryをインストールする "testing-libraryをインストールする
    への直接リンク")
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 次のコマンドを実行してtesting-libraryをインストールしてください。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: テストを作る[​](#テストを作る "テストを作る への直接リンク")
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: それでは、実際に`testing-library`を使ってテストを作っていきましょう。まずは先ほどと同じ`src`ディレクトリ配下で`SimpleButton.test.tsx`というファイルを作成します。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: このファイルに、テストを実行するためのひな形を書きます。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: ここにテストの中身を追加していきます。今回はボタンをクリックすると`ON`/`OFF`の表示が切り替わることがテストしたいので、次のような流れのテストコードになります。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: ボタンを描画する
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`OFF`と表示されていることを確かめる'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ボタンをクリックする
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ON`と表示されていることを確かめる'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 備考
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: コンポーネントのテストは、コンポーネントを描画した後、次の2つのことを組み合わせて実現されます。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: コンポーネントに操作を施す
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: コンポーネントの状態を確かめる
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 今回の例もボタンを描画した後、「`OFF`と表示されている」という状態確認から始まり、「クリック」という操作を施した後、再び「`ON`と表示されている」という状態確認をします。みなさんが自分でコンポーネントのテストを書く際も、どのような操作と状態確認を行えばよいかを意識することでテスト作成がスムーズにできるはずです。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: まずはボタンを描画してみましょう。コンポーネントの描画は`@testing-library/react`の`render()`を使って、次のようにするだけです。なお、この`@testing-library/react`というライブラリは、今回`yarn
    create react-app`でReactアプリケーションを作成したためすでにプロジェクトにインストールされています。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: ボタンが描画されたので、次は`OFF`と表示されていることを確かめます。具体的には、ボタンのDOM(DOMとは、ここではボタンを表すオブジェクトくらいに捉えていただければ大丈夫です)を取得し、そのテキストが`OFF`という文字列に等しいかのアサーションを実施します。今回、ボタンのDOMの取得には`@testing-library/react`が提供するクエリのひとつである`getByRole()`を使います。これは[WAI-ARIA](https://developer.mozilla.org/ja/docs/Learn/Accessibility/WAI-ARIA_basics)(アクセシビリティ向上を主目的として定められたwebの仕様)で定められたRoleを引数に指定すると、そのRoleを持つコンポーネントを取得するクエリです。詳細は[公式ドキュメント](https://testing-library.com/docs/queries/byrole)をご参照ください。具体的には、このように書けます。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: そして、ボタンのテキストのアサーションは`@testing-library/jest-dom`が提供する`toHaveTextContent()`を使います。`expect()`にコンポーネントを渡し、そのまま`toHaveTextContent()`を呼び出すと、そのコンポーネントがどのようなテキストを持っているかのアサーションが行なえます。具体的には次のようになります。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: ここで一旦`yarn test`コマンドでテストを実行し、テストが通ることを確認しましょう。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 次のような結果になるはずです。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![テストがPASSしているコンソールの画面](../Images/b974269b3b3bc82ae70f35a8eb2511c2.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: さて、次にボタンをクリックします。コンポーネントの操作は`testing-library`に収録されている`@testing-library/user-event`を使って実現できます。`@testing-library/user-event`はコンポーネントの操作を含む、色々なユーザーイベントをテストで実行するライブラリです。具体的には`click()`にクエリでみつけた`simpleButton`を引数として渡すことで、ボタンのクリックを実現できます。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 続けて、ボタンがクリックされた後のアサーションを実施します。先ほどと同様に`toHaveTextContent()`を用いますが、今度はボタンのテキストが`ON`になっていることを確認しましょう。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: この状態で`yarn test`コマンドでテストを実行し、テストが通ることを確認しましょう。次のような結果になるはずです。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![テストがPASSしているコンソールの画面](../Images/b974269b3b3bc82ae70f35a8eb2511c2.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: 以上が、`testing-library`を用いてコンポーネントのテストを作成する流れです。`testing-library`からは、ここで紹介したもの以外にも多くのクエリやアサーション、ユーザーイベントの機能が提供されています。英語にはなってしまいますが、クエリは[こちら](https://testing-library.com/docs/queries/about)、アサーションは[こちら](https://github.com/testing-library/jest-dom#custom-matchers)、ユーザーイベントは[こちら](https://testing-library.com/docs/user-event/intro)に公式ドキュメントによる詳細な説明があります。実際に自分でテストを作る際には、ぜひそれらも確認してみてください。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '`Jest`を使ったスナップショットテストの作り方とやり方[​](#jestを使ったスナップショットテストの作り方とやり方 "jestを使ったスナップショットテストの作り方とやり方
    への直接リンク")'
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここからは「スナップショットテスト」と呼ばれるテスト手法について解説します。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '先ほどまでのテストはコンポーネントのある部分(例: テキスト)の状態を確認するものでしたが、「スナップショットテスト」はコンポーネントの全体の状態を確かめるためのテストです。より正確には、コンポーネントのDOMをまるごと保存し、その保存したDOMと、テスト実行時にコンポーネントを描画して生成したDOMとが一致するかを確認します(DOMとは何かがよく分からない場合、ここではひとまず「コンポーネントを表すオブジェクト」程度に捉えてください)。'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 「スナップショットテスト」は簡単に書くことができます。それでいてスタイルなど含めた全体の確認ができるので、手軽なリグレッションテストとして活用できます。一方で、そうであるからこそコンポーネントを一旦作り終えるまでは機能しないテストですので、テストファーストの開発には不向きです。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 注意
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 本来、スナップショットテストの対象はコンポーネントおよびDOMに限られたものではありません。幅広い対象にスナップショットテストが実施できます。詳しくはJestの[公式ドキュメント](https://jestjs.io/ja/docs/snapshot-testing#%E3%82%B9%E3%83%8A%E3%83%83%E3%83%97%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%E3%83%86%E3%82%B9%E3%83%88%E3%81%AFreact%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%A7%E3%81%AE%E3%81%BF%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%81%8B)をご参照ください。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，快照测试的对象不仅限于组件和DOM。快照测试可以应用于广泛的对象。更多信息，请参阅Jest的[官方文档](https://jestjs.io/ja/docs/snapshot-testing#%E3%82%B9%E3%83%8A%E3%83%83%E3%83%97%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%E3%83%86%E3%82%B9%E3%83%88%E3%81%AFreact%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%A7%E3%81%AE%E3%81%BF%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%81%8B)。
- en: それでは、スナップショットテストを実際にやってみましょう。先ほどと同じ`src`ディレクトリ配下で`SimpleButton.test.tsx`というファイルを作成します。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实际进行快照测试。在与之前相同的`src`目录下创建一个名为`SimpleButton.test.tsx`的文件。
- en: '[PRE38]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 備考
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: 「`testing-library`を使ったテストの作り方とやり方」から続けてこのチュートリアルを実施される方は、ここから作成するテストケースを`SimpleButton.test.tsx`内に追加で書いていくのでも大丈夫です。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是从「`testing-library`を使ったテストの作り方とやり方」继续进行本教程的话，可以在`SimpleButton.test.tsx`文件中继续添加测试用例。
- en: スナップショットテストは次の2ステップから成ります。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 快照测试包括以下两个步骤。
- en: スナップショットを検証したい状態にコンポーネントを持っていく
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将组件带入要验证快照的状态
- en: スナップショットに照合する
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对快照进行比对
- en: ここではボタンが描画されてまだ何も操作されていない状態、つまりボタンにOFFと表示されている状態についてスナップショットテストを実施することを考えます。描画されたばかりの状態を検証したいので、描画してすぐにスナップショット照合を行えばよいことになります。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们考虑对刚刚渲染的按钮显示为OFF的状态进行快照测试。因为我们想验证刚刚渲染的状态，所以只需渲染后立即进行快照比对即可。
- en: この考えをもとに、実際のコードを書いてみましょう。コンポーネントの描画には`@testing-library/react`の`render`関数を、スナップショットの照合にはJestの`toMatchSnapshot()`関数をそれぞれ使用して次のように書くことができます。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个思路，让我们来编写实际的代码。您可以使用`@testing-library/react`的`render`函数进行组件渲染，使用Jest的`toMatchSnapshot()`函数进行快照比对。
- en: '[PRE40]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 備考
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: Jest単体ではReactコンポーネントの描画ができません。そこで、コンポーネントの描画をするためのライブラリを使用する必要があります。多くのライブラリがありますが、ここでは前章「`testing-library`を使ったテストの作り方とやり方」でも紹介した`@testing-library/react`を用いました。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Jest本身无法渲染React组件。因此，您需要使用用于渲染组件的库。有许多库可供选择，但在这里我们使用了前一章中介绍过的`@testing-library/react`。
- en: テストファイルが作成できたら、`yarn test`コマンドを実行します。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 创建测试文件后，运行`yarn test`命令。
- en: '[PRE42]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: そうすると次のように表示され、テストが実行されて成功した(`PASS`した)ことがわかります。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就会显示如下内容，表明测试已经执行并成功（通过）。
- en: '![SimpleButtonコンポーネントのテストがPASSした結果画面](../Images/fc889109b8d4bb5453b5f00984cf647c.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![SimpleButton组件测试通过的结果页面](../Images/fc889109b8d4bb5453b5f00984cf647c.png)'
- en: さて、このとき`src`ディレクトリの中に`__snapshots__`というディレクトリが自動で追加されているはずです。これはJestがスナップショットテスト用のファイルを保存していくためのフォルダです。Jestのスナップショットテストは初回実行時にスナップショットテスト用のファイルを生成し、2回目から照合を行います。いまは初回実行だったため、ファイルとその置き場であるディレクトリが自動で生成されました。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该在`src`目录中自动添加了一个名为`__snapshots__`的目录。这是Jest用于保存快照测试文件的文件夹。Jest的快照测试会在首次运行时生成快照测试文件，并从第二次开始进行比对。因为这是第一次运行，所以文件和目录都会自动生成。
- en: ここでスナップショットテストについてもう少しだけ知るために、生成されたスナップショットテスト用のファイルの中身を覗いてみましょう。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更多了解快照测试，让我们看看生成的快照测试文件的内容。
- en: '`__snapshots__`ディレクトリの中に作られた`SimpleButton.test.tsx.snap`は次のようになっています。'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`SimpleButton.test.tsx.snap`文件位于`__snapshots__`目录中。
- en: '[PRE44]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: このように、スナップショットテスト用のファイルはテストケースの名前と、そのテストケースで使われるスナップショットで構成されています。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，用于快照测试的文件由测试用例的名称和该测试用例使用的快照组成。
- en: さて、今回生成されたスナップショットは`OFF`というテキストを持った`button`タグと、その親要素である`div`タグで構成されています。これは、まさに先ほど作った`SimpleButton`コンポーネントのDOMに一致します(`div`要素はReactの起動時に自動生成される要素です)。このスナップショットテストは実行のたびに、`SimpleButton`コンポーネントを描画して、たった今作られたこのスナップショットとの違いが生まれていないかを確認してくれます。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在生成的快照包含一个带有`OFF`文本的`button`标签和其父元素`div`标签。这正好与之前创建的`SimpleButton`组件的DOM相匹配（`div`元素是React启动时自动生成的元素）。这个快照测试会在每次执行时渲染`SimpleButton`组件，并检查是否与刚刚创建的快照��任何差异。
- en: たとえば、もしも何かの手違いで`SimpleButton`コンポーネントが描画されたときに`ON`と表示されるようになっていたら、このスナップショットテストに引っかかるのです。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果由于某种错误，`SimpleButton`组件被渲染为显示`ON`，那么这个快照测试就会失败。
- en: ここで、実際に失敗する様子も確認してみましょう。`SimpleButton`コンポーネントが描画されたときに`ON`と表示されるよう変更を加えます。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看实际失败的情况。当`SimpleButton`组件被渲染时，我们将其更改为显示`ON`。
- en: '[PRE46]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: この状態で`yarn start`コマンドを実行すると、描画されたボタンの文字の初期値が`ON`になっていることが分かります。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`yarn start`命令后，您会发现渲染的按钮文本初始值为`ON`。
- en: さて、ここで`yarn test`コマンドを実行します。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行`yarn test`命令。
- en: '[PRE48]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 先ほどのスナップショットテストが実行されますが、今回はテストが通らず、描画されたコンポーネントとスナップショットの差分が表示されます。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管之前的快照测试已经执行过了，但是这次测试未通过，显示了渲染的组件与快照之间的差异。
- en: '![SimpleButtonコンポーネントのテストがFAILし、描画されたコンポーネントとスナップショットの差分が表示されている結果画面](../Images/e65fcac21eeeec63f812ca07d0130d35.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![SimpleButton组件测试未通过，显示了渲染的组件与快照之间的差异的结果页面](../Images/e65fcac21eeeec63f812ca07d0130d35.png)'
- en: 今回はボタン内テキストの初期値を変更しましたが、たとえば`button`タグから`div`タグへの変更や`button`タグへのクラスの追加など、DOMに対する変更のほとんどをスナップショットテストで検知できます。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这次我们只更改了按钮内文本的初始值，但是几乎所有对DOM的更改，比如从`button`标签更改为`div`标签或者向`button`标签添加类等，都可以通过快照测试检测到。
- en: スナップショットテストの詳しいやり方やベストプラクティスなど、さらに詳しい情報に触れたい方はJestの[公式ドキュメント](https://jestjs.io/ja/docs/snapshot-testing)をご参照ください。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于快照测试的详细步骤和最佳实践，请参阅Jest的[官方文档](https://jestjs.io/ja/docs/snapshot-testing)。
- en: 以上でJestを使ったスナップショットテストのチュートリアルは完了です。また、Reactコンポーネントのテストのチュートリアルも完了です。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Jest进行快照测试的教程到此结束。同时，React组件的测试教程也已完成。
