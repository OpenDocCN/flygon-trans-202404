- en: Lecture 18 - Projects, Calibration III, Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Exam: 9.00, August 8'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First milestone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Route finding is part of this milestone only so that you can do things that
    show your calibration to be correct. For milestone 2 you will have to do route
    finding on track graphs with edges missing, so choose an approach to route finding
    that generalizes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the demo you can use your preferred train and your preferred track, but only
    if they are working, and either may not be working. In that case we expect you
    to run your demo using another train and/or another track. Be prepared!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. Train style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Give trains roles and objectives. For example,
  prefs: []
  type: TYPE_NORMAL
- en: Passenger train travels on a repetitive route meeting a schedule.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Freight train travels to random destinations as fast as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Objective is to deliver as much freight as possible while keeping a passenger
    train on time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another example,
  prefs: []
  type: TYPE_NORMAL
- en: Trains are taxis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a load appears they race to see if they can get it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another example,
  prefs: []
  type: TYPE_NORMAL
- en: Trains are buses, which travel long routes from one place on the track to another.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the route is a scheduled trip to a different location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a bus is late arriving, the dispatcher must find another, unused bus to
    leave at the scheduled leaving time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2\. Game style: AI'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The track is a graph.
  prefs: []
  type: TYPE_NORMAL
- en: Several different ways to choose vertices and edges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many games are played on graphs
  prefs: []
  type: TYPE_NORMAL
- en: Checkers, snakes & ladders, maze games, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a graph game played on the track graph.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, watchmen and bandit.
  prefs: []
  type: TYPE_NORMAL
- en: One train is the bandit, which tries to move from one hide-out to another.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other trains are watchmen, who try to prevent the bandit from getting to
    a hide-out once he is out in the open.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another example, PAC man
  prefs: []
  type: TYPE_NORMAL
- en: One train tries to cover as much track as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other trains try to trap him so that he can't get reservations that would allow
    him to keep moving.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3\. Game style: interactive'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the games you play for pleasure, the user normally controls one or more of
    the game entities.
  prefs: []
  type: TYPE_NORMAL
- en: the bandit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the trapping trains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Students often want to make an interactive project. It has been done successfully
    in the past, but constructing a usable interface is a real challenge
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Calibration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. Calibrating Stopping Distance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Hint.** Interacting with other groups is useful to confirm that you are on
    track. Of course, simply using another group''s calibration without saying so
    is `academic dishonesty''.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Calibrating Constant Velocity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point there are a few places on the track where you can stop with a
    precision of a trainlength or better. However, suppose you want to reverse direction
    at a switch.
  prefs: []
  type: TYPE_NORMAL
- en: You want to be close to the switch, clear of the switch, and on the right side
    of the switch when you stop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to know when the train has stopped because, until then you cannot give
    the command to start moving again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Much Time does it Take to Stop?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Try the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Choose a sensor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put the train on a course that will cross the sensor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the train up to a constant speed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the speed zero command at a location that stops the train with its contact
    on the sensor. (You know the stopping distance.).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the time between when you gave the command and when the sensor triggered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for regularities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How Long does it Take the Train to Get up to Speed?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We call the time the train takes to get up to speed the *acceleration time*.
    Finding the acceleration time is left as an exercise for the reader.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hint.** The distance travelled from a standing start, graphed as a function
    of time, is a straight line after the train reaches a constant speed'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Stage 3\. Calibrating Acceleration and Deceleration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thinking again about the problem of following a route that has reverses.
  prefs: []
  type: TYPE_NORMAL
- en: Reverses always occur in order to go a different direction at a turn-out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You want to move as little beyond the switch as possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Much of this manoeuvering is done at non-constant velocities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Physics of Acceleration and Deceleration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose a train is at x1=x(t1) with velocity v1=v(t1) at time t1, and we want
    to get it go x2=x(t2) with velocity v2=v(t2) at time t2, and we want to do it
    without exceeding any of the physical limits of the train.
  prefs: []
  type: TYPE_NORMAL
- en: At the core is a relation, (x, t), which is a space-time point. The relation
    says that as time passes a train takes up successive positions x(t). Velocity
    is deduced as the time derivative of x(t).
  prefs: []
  type: TYPE_NORMAL
- en: Our task is to create a physically possible path x(t) obeying such constraints.
    To do so we must know how the train's velocity varies when its speed is changed.
  prefs: []
  type: TYPE_NORMAL
- en: Our task is simplified because the velocity change function is artificial,
  prefs: []
  type: TYPE_NORMAL
- en: created by programmers just like us, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: intended to imitate real trains.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We try to get into the programmer/designer's head and think their thoughts
  prefs: []
  type: TYPE_NORMAL
- en: Teleportation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The simplest way of moving the train from one place to another.
  prefs: []
  type: TYPE_NORMAL
- en: At time t teleport the train to x=x2, v=0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At time t2 increase the velocity to v2\.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first thing that we rule out is teleportation.
  prefs: []
  type: TYPE_NORMAL
- en: Why?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A train having infinite velocity is impossible in practice
  prefs: []
  type: TYPE_NORMAL
- en: Leave to the physicists whether or not it is possible for a train to have infinite
    velocity in theory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No teleportation means that x(t) must be continuous.
  prefs: []
  type: TYPE_NORMAL
- en: Constant Velocity
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Suppose you have a train at (x1, t1) and you have to get it to (x2, t2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Two questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Is it possible? If the maximum velocity is vmax, and vmax < (x2 - x1) / (t2
    - t1), then it's impossible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you do it? If vmax > (x2 - x1) / (t2 - t1) then you might try
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set v = (x2 - x1) / (t2 - t1) at t1
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your velocity calibration for this!
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set v = 0 at t2.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Doesn't quite work.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Because of acceleration you arrive at x2 after t2.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Because of deceleration you don't stop until the stopping distance beyond x2.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You could
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: curse the inadequate train dynamics
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: constrain vmax to be very small
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: only accept requests for long in the future and be successful because the acceleration
    and deceleration times are negligible.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: But
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It's against the rules.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You would be unsuccessful because of stalling on curves.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Your project would only be interesting to trees and other long-lived creatures.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: More Fundamental
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Infinite acceleration is impossible because the train would be crushed, if not
    vaporized!
  prefs: []
  type: TYPE_NORMAL
- en: This is true both in theory and in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Constant Acceleration/Deceleration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Intuitively a good idea to minimize acceleration
  prefs: []
  type: TYPE_NORMAL
- en: Accelerate at a from t1 to (t2 + t1) / 2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Velocity is a*(t-t1)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Position is x1 + (1/2)*a*(t-t1)^2
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Decelerate at -a from (t2 + t1) / 2 to t2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Velocity is a*(t2-t1) / 2 - a*(t - (t2+t1)/2 )
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Position is ...
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: At t2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Velocity is 0
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Position is x1 + (1/8)*a*(t2 - t1) ^2, which should be x2.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore choose a = (8 * (x2 - x1)) / (t2 - t1)^2
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: But, what happens at t = t1, (t2 + t1) / 2, t2?
  prefs: []
  type: TYPE_NORMAL
- en: discontinuities in acceleration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: experienced as jerk, in fact, infinite jerk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And you know from experience that when you jerk things hard enough they break.
    E.g.,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tooth
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: knuckle
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Constant Jerk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Third order curve for position, second order for velocity, linear acceleration.
    We usually go one better, and try to minimize jerk over the whole journey.
  prefs: []
  type: TYPE_NORMAL
- en: Minimize Jerk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Acceleration/Deceleration is continuous
  prefs: []
  type: TYPE_NORMAL
- en: The result is a fourth order curve in position, third order in velocity, which
    is what you try to achieve when you drive.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Is it Worth Having an Explicit Function?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can calculate position explicitly without having to do numerical integration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Euler integration is unstable because of accumulating error.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can calculate the parameters of a function with less measurement. How?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start at x = t = 0, which assumes that you get the same function regrardless
    of position on the track and time of day.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Check deceleration inverse of acceleration?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '&c.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The idea is that the person who programmed acceleration/deceleration into the
    train was lazy, so there's probably one basic function used over and over again
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Drawbacks
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You need to check that the functional form you have is the right one, or a right-enough
    one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For practical purposes small look-up tables may be perfectly adequate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
