["```\nList.map f [a; b; c] = [f a; f b; f c]\n\n```", "```\ntype 'a list_ = Nil | Cons of ('a * 'a list_)\n\n```", "```\nlet rec map (f : 'a -> 'b) (x : 'a list_) : 'b list_ = \n  match x with\n      Nil -> Nil\n    | Cons (h, t) -> Cons (f h, map f t)\n\n```", "```\n('a -> 'b) -> 'a list_ -> 'b list_\n\n```", "```\nlet copy = map (fun x -> x)\n\n```", "```\nlet copy lst = map (fun x -> x) lst\n\n```", "```\n# let string_list_of_int_list = map string_of_int;;\n*val string_list_of_int_list : int list_ -> string list_ = <fun>*\n# string_list_of_int_list (Cons (1, Cons (2, Cons (3, Nil))));;\n*- : string list_ = Cons (\"1\", Cons (\"2\", Cons (\"3\", Nil)))*\n\n```", "```\nfold_right f [a; b; c] r = f a (f b (f c r))\nfold_left f r [a; b; c] = f (f (f r a) b) c\n\n```", "```\nlet rec fold_right (f : 'a -> 'b -> 'b) (lst : 'a list_) (r :'b) : 'b = \n  match lst with\n    Nil -> r\n  | Cons (hd, tl) -> f hd (fold_right f tl r)\n\nlet rec fold_left (f : 'a -> 'b -> 'a) (r : 'a) (lst : 'b list_) : 'a = \n  match lst with\n    Nil -> r\n  | Cons (hd, tl) -> fold_left f (f r hd) tl\n\n```", "```\n('a -> 'b -> 'b) -> 'a list_ -> 'b -> 'b\n('a -> 'b -> 'a) -> 'a -> 'b list_ -> 'a\n\n```", "```\nlet sum_right_to_left il = fold_right (+) il 0\nlet sum_left_to_right = fold_left (+) 0\n\n```", "```\nlet mapp f lst = fold_right (fun x y -> Cons (f x, y)) lst Nil\n\n```", "```\nlet maprev f = fold_left (fun x y -> Cons (f y, x)) Nil\n\n```", "```\nlet filter f lst =\n  fold_right (fun x y -> if f x then Cons (x, y) else y) lst Nil\n\n```", "```\nlet select_evens = filter (fun x -> (x / 2) * 2 = x)\n\n```", "```\nlet length = fold_left (fun x _ -> 1 + x) 0\n\n```"]