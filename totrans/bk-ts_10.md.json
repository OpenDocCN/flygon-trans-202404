["```\nclass Game {\n    private _gameState: any;\n\n    public CurrentPlayerIndex: number;\n    public Players: Player[];\n\n    constructor(initialGameState: any) { this._gameState = initialGameState;}\n\n}\n\nclass Player {\n    private _playerState: any;\n\n    public PlayerName: string;\n    public PlayerScore: number;\n\n    constructor(initialPlayerState: any) { this._playerState = initialPlayerState; }\n}\n\nclass GameStateDBHelper {\n\n    public CreateNewGame(): Game {\n        // Initialize a new Game object and save it to the back end database.\n        // Return the empty game.\n        return new Game(null);\n    }\n\n    public LoadGame(query: string): Game {\n        // Use supplied query to load some game state from the database.\n        // Convert that to a GameState object\n        // return it\n        return new Game(null);\n    }\n\n    public SaveGame(gameToSave: Game): boolean {\n        // Marshall game state and save it to the back end database.\n        return true; // indicates successful save\n    }\n\n    public DeleteGame(gameToDelete: Game): boolean {\n        // Issue database command to delete game state.\n        return true; // indicates successful deletion\n    }\n\n}\n\nconst gameHelper = new GameStateDBHelper();\nconst newGame = gameHelper.CreateNewGame();\nconst oldGame = gameHelper.LoadGame(\"a database query\");\n\nconst didSaveGame = gameHelper.SaveGame(oldGame);\nconst didDeleteGame = gameHelper.DeleteGame(newGame); \n```", "```\n public LoadGame(query: string): Game {\n        // Use supplied query to load some game state from the database.\n        // Convert that to a GameState object\n        // return it\n        return new Game(null);\n    } \n```", "```\nconst gameHelper = new GameStateDBHelper();\nconst newGame = gameHelper.CreateNewGame();\nconst oldGame = gameHelper.LoadGame(\"a database query\");\n\nconst didSaveGame = gameHelper.SaveGame(oldGame);\nconst didDeleteGame = gameHelper.DeleteGame(newGame); \n```", "```\ninterface DBBackedEntity {\n    TableName: string;\n}\n\nclass GameState implements DBBackedEntity {\n    private myDBTableName: string;\n    public get TableName(): string { return this.myDBTableName; }\n\n    public CurrentPlayerIndex: number;\n    public AllPlayers: GamePlayer[];\n\n    constructor(someGameState: any) { \n        this.myDBTableName = \"Games\";\n    }\n\n}\n\nclass GamePlayer implements DBBackedEntity {\n    private myDBTableName: string;\n    public get TableName(): string { return this.myDBTableName; }\n\n    public PlayerName: string;\n    public Score: number;\n\n    constructor(somePlayerState: any) { \n        this.myDBTableName = \"Players\";\n    }\n}\n\nclass DBHelper<T extends DBBackedEntity> {\n    public CreateRecord() : T { return null; }\n    public ReadRecord(query: any): T { return null; }\n    public DeleteRecord(basedOn: T): boolean { return true; }\n    public UpdateRecord(basedOn: T) : boolean { return true; }\n}\n\nconst gameStateHelper = new DBHelper<GameState>();\nconst gamePlayerHelper = new DBHelper<GamePlayer>();\n\nconst newPlayer = gamePlayerHelper.CreateRecord();\nconsole.log(`New player score: ${newPlayer.Score}.`)\n\nconst existingGameState = gameStateHelper.ReadRecord(\"some query goes here\");\nconst newGameState = gameStateHelper.CreateRecord();\n\nconst deleteResult = gameStateHelper.DeleteRecord(newGameState);\nconst updateResult = gameStateHelper.UpdateRecord(existingGameState); \n```", "```\nclass DBHelper<T extends DBBackedEntity> {\n    public CreateRecord() : T { return null; }\n    public ReadRecord(query: any): T { return null; }\n    public DeleteRecord(basedOn: T): boolean { return true; }\n    public UpdateRecord(basedOn: T) : boolean { return true; }\n} \n```", "```\nconst gameStateHelper = new DBHelper<GameState>();\nconst gamePlayerHelper = new DBHelper<GamePlayer>(); \n```"]