["```\n    $ dig +short web.mit.edu\n    18.9.22.69\n\n    ```", "```\n__A__://__B__:__C__\n```", "```\ntry (\n    // create new objects here that require cleanup after being used,\n    // and assign them to variables\n) {\n    // code here runs with those variables\n    // cleanup happens automatically after the code completes\n} catch(...) {\n    // you can include catch clauses if the code might throw exceptions\n}\n```", "```\n$ telnet www.eecs.mit.edu 80\nTrying 18.62.0.96...\nConnected to eecsweb.mit.edu.\nEscape character is '^]'.\nGET /\u21b5\n<!DOCTYPE html>\n*... lots of output ...*\n<title>Homepage | MIT EECS</title>\n*... lots more output ...*\n\n```", "```\n$ telnet web.mit.edu 80\nTrying 18.9.22.69...\nConnected to web.mit.edu.\nEscape character is '^]'.\nGET /aboutmit/ HTTP/1.1\u21b5\nHost: web.mit.edu\u21b5\n\u21b5\nHTTP/1.1 200 OK\nDate: Tue, 31 Mar 2015 15:14:22 GMT\n*... more headers ...*\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n*... more HTML ...*\n<title>MIT \u2014 About</title>\n*... lots more HTML ...*\n\n```", "```\n*... lots more HTML ...*\n</html>\n*Ctrl-]*\u21b5\ntelnet> quit\u21b5\nConnection closed.\n\n```", "```\n$ telnet dmz-mailsec-scanner-4.mit.edu 25\nTrying 18.9.25.15...\nConnected to dmz-mailsec-scanner-4.mit.edu.\nEscape character is '^]'.\n220 dmz-mailsec-scanner-4.mit.edu ESMTP Symantec Messaging Gateway\nHELO *your-IP-address-here*\u21b5\n250 2.0.0 dmz-mailsec-scanner-4.mit.edu says HELO to *your-ip-address*:*port*\nMAIL FROM: <*your-username-here*@mit.edu>\u21b5\n250 2.0.0 MAIL FROM accepted\nRCPT TO: <*your-username-here*@mit.edu>\u21b5\n250 2.0.0 RCPT TO accepted\nDATA\u21b5\n354 3.0.0 continue.  finished with \"\\r\\n.\\r\\n\"\nFrom: <*your-username-here*@mit.edu>\u21b5\nTo: <*your-username-here*@mit.edu>\u21b5\nSubject: testing\u21b5\nThis is a hand-crafted artisanal email.\u21b5\n.\u21b5\n250 2.0.0 OK 99/00-11111-22222222\nQUIT\u21b5\n221 2.3.0 dmz-mailsec-scanner-4.mit.edu closing connection\nConnection closed by foreign host.\n\n```", "```\nrequest ::= request-line\n            ((general-header | request-header | entity-header) CRLF)*\n            CRLF\n            message-body?\nrequest-line ::= method SPACE request-uri SPACE http-version CRLF\nmethod ::= \"OPTIONS\" | \"GET\" | \"HEAD\" | \"POST\" | ...\n...\n```", "```\nGET /aboutmit/ HTTP/1.1\nHost: web.mit.edu\n```", "```\nMESSAGE ::= ( ON | OFF | HELP_REQ ) NEWLINE\nON ::= \"on \" ID\nOFF ::= \"off \" ID\nHELP_REQ ::= \"help\"\nNEWLINE ::= \"\\r\"? \"\\n\"\nID ::= [1-9][0-9]*\n```", "```\nMESSAGE ::= ( STATUS | HELP ) NEWLINE\nSTATUS ::= ONE_STATUS ( NEWLINE \"and \" ONE_STATUS )*\nONE_STATUS ::= ID \" is \" ( \"on\" | \"off\" )\nHELP ::= [^\\r\\n]+\nNEWLINE ::= \"\\r\"? \"\\n\"\nID ::= [1-9][0-9]*\n```", "```\nvoid upperCaseLine(BufferedReader input, PrintWriter output) throws IOException\n  *requires*: input and output are open\n  *effects*: attempts to read a line from input\n           and attempts to write that line, in upper case, to output\n```", "```\nSocket sock = ...\n\n// read a stream of characters from the socket input stream\nBufferedReader in = new BufferedReader(new InputStreamReader(sock.getInputStream()));\n// write characters to the socket output stream\nPrintWriter out = new PrintWriter(sock.getOutputStream(), true);\n\nupperCaseLine(in, out);\n```", "```\n// fixed input stream of \"dog\" (line 1) and \"cat\" (line 2)\nString inString = \"dog\\ncat\\n\";\nByteArrayInputStream inBytes = new ByteArrayInputStream(inString.getBytes());\nByteArrayOutputStream outBytes = new ByteArrayOutputStream();\n\n// read a stream of characters from the fixed input string\nBufferedReader in = new BufferedReader(new InputStreamReader(inBytes));\n// write characters to temporary storage\nPrintWriter out = new PrintWriter(outBytes, true);\n\nupperCaseLine(in, out);\n\n// check that it read the expected amount of input\nassertEquals(\"expected input line 2 remaining\", \"cat\", in.readLine());\n// check that it wrote the expected output\nassertEquals(\"expected upper case of input line 1\", \"DOG\\n\", outBytes.toString());\n```"]