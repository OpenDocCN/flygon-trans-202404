- en: Writing Python programs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing Python programs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A program consists of multiple lines that are executed in one go.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually a program contains the following sections:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '![input-processing-output](IPO.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
- en: Of course, programs can grow a lot more complicated than that.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn to know the `print()` function for producing
    output, loops and branching statements.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Turing Completeness
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the second part of the tutorial, you will learn a basic set of Python commands.
    Theoretically, they are sufficient to write any program on the planet (this is
    called *Turing completeness*).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Practically, you will need shortcuts that make programs prettier, faster, and
    less painful to write. We will save these shortcuts for the later parts.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: My first program
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: My first program
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the interactive IPython shell alone is exciting only for a while. To write
    more complex programs, you need to store your instructions in *programs*, so that
    you can *execute* them later.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: In this section we will write our first Python program. It is going to simply
    write a few names of babies to the screen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open a text editor (e.g. Spyder) and create a new file. Write into it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save the file with the name `output.py` ab.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let's execute our program.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: In **Anaconda Spyder** you can use the *"Play"* button or press `F5`.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In **Unix** open a terminal, change to the directory with the Python file and
    type:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: python3 output.py
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Exercise 3
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Explain the following program:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Exercise 4
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write the following program:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What happens when you execute the code?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Repeating instructions
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Repeating instructions
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our early programs, each Python instruction was executed only once. That
    makes programming a bit pointless, because our programs are limited by our typing
    speed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: In this section we will take a closer look at the `for` statement that repeats
    one or more instructions several times.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What does the following program do?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Exercise 2
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What advantages does the `for` loop have over the following one?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Exercise 3
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a for loop that creates the following output
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Exercise 4
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Explain the difference between the following two programs:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: and
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Exercise 5
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What does the following program do?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Exercise 6
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a program that calculates the number of characters in `Stefani Joanne
    Angelina Germanotta`. **Spaces count as well!**
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Making decisions
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Making decisions
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last missing piece in our basic set of commands is the ability to make decisions
    in a program. This is done in Python using the `if` command.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![making decisions](list.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: Exercise 1
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Execute the following program and explain its output.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Exercise 2
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Set `name` to such a value that one, two or all three conditions apply.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Exercise 3
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following program writes the positions of all letters *"n"* in the name
    to the screen. Unfortunately, it contains **three errors**. Make the program execute
    correctly:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Exercise 4
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Which of these `if` statements are syntactically correct?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '`if a and b:`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if len(s) == 23:`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if a but not b < 3:`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if a ** 2 >= 49:`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if a ** 2 >= 49:`'
- en: '`if a != 3`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if a != 3`'
- en: '`if (a and b) or (c and d):`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if (a and b) or (c and d):`'
