- en: Writing Python programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing Python programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A program consists of multiple lines that are executed in one go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually a program contains the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![input-processing-output](IPO.png)'
  prefs: []
  type: TYPE_IMG
- en: Of course, programs can grow a lot more complicated than that.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn to know the `print()` function for producing
    output, loops and branching statements.
  prefs: []
  type: TYPE_NORMAL
- en: Turing Completeness
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the second part of the tutorial, you will learn a basic set of Python commands.
    Theoretically, they are sufficient to write any program on the planet (this is
    called *Turing completeness*).
  prefs: []
  type: TYPE_NORMAL
- en: Practically, you will need shortcuts that make programs prettier, faster, and
    less painful to write. We will save these shortcuts for the later parts.
  prefs: []
  type: TYPE_NORMAL
- en: My first program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: My first program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the interactive IPython shell alone is exciting only for a while. To write
    more complex programs, you need to store your instructions in *programs*, so that
    you can *execute* them later.
  prefs: []
  type: TYPE_NORMAL
- en: In this section we will write our first Python program. It is going to simply
    write a few names of babies to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open a text editor (e.g. Spyder) and create a new file. Write into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save the file with the name `output.py` ab.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let's execute our program.
  prefs: []
  type: TYPE_NORMAL
- en: In **Anaconda Spyder** you can use the *"Play"* button or press `F5`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In **Unix** open a terminal, change to the directory with the Python file and
    type:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: python3 output.py
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Exercise 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Explain the following program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write the following program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What happens when you execute the code?
  prefs: []
  type: TYPE_NORMAL
- en: Repeating instructions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Repeating instructions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our early programs, each Python instruction was executed only once. That
    makes programming a bit pointless, because our programs are limited by our typing
    speed.
  prefs: []
  type: TYPE_NORMAL
- en: In this section we will take a closer look at the `for` statement that repeats
    one or more instructions several times.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What does the following program do?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What advantages does the `for` loop have over the following one?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a for loop that creates the following output
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Explain the difference between the following two programs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What does the following program do?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a program that calculates the number of characters in `Stefani Joanne
    Angelina Germanotta`. **Spaces count as well!**
  prefs: []
  type: TYPE_NORMAL
- en: Making decisions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Making decisions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last missing piece in our basic set of commands is the ability to make decisions
    in a program. This is done in Python using the `if` command.
  prefs: []
  type: TYPE_NORMAL
- en: '![making decisions](list.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Execute the following program and explain its output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Set `name` to such a value that one, two or all three conditions apply.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following program writes the positions of all letters *"n"* in the name
    to the screen. Unfortunately, it contains **three errors**. Make the program execute
    correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Which of these `if` statements are syntactically correct?
  prefs: []
  type: TYPE_NORMAL
- en: '`if a and b:`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if len(s) == 23:`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if a but not b < 3:`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if a ** 2 >= 49:`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if a != 3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if (a and b) or (c and d):`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
