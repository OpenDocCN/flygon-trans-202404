- en: Notes for September 30 class -- More Ray Tracing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9 月 30 日课堂笔记 -- 更多光线追踪
- en: '**Phong model for specular reflection**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Phong 镜面反射模型**'
- en: The first really interesting model for surface reflection was developed by Bui-Tong
    Phong in 1973. Before that, computer graphics surfaces were rendered using only
    diffuse lambert reflection. Phong's was the first model that accounted for specular
    highlights.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 表面反射的第一个真正有趣的模型是由 Bui-Tong Phong 在 1973 年开发的。在此之前，计算机图形学表面仅使用漫反射兰伯特反射来渲染。Phong
    的模型是第一个考虑到镜面高光的模型。
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Phong model begins by defining a reflection vector R, which is a reflection
    of the direction to the light source L about the surface normal N.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Phong 模型首先通过定义一个反射向量 R 来开始，该向量是光源方向 L 关于表面法线 N 的反射。
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As we showed in class, and as you can see from the diagram on the right, it
    is given by:'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 正如我们在课堂上展示的，并且从右边的图表中可以看到的那样，它由以下公式给出：
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: R = 2 (N • L) N - L
  id: totrans-8
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: R = 2 (N • L) N - L
- en: '![](../Images/c6a507e6c31d54eee688470f6ceb06f9.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c6a507e6c31d54eee688470f6ceb06f9.jpg)'
- en: 'Once R has been defined, then the Phong model approximates the *specular* component
    of surface reflectance as:'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一旦 R 被定义，那么 Phong 模型近似表面反射的 *镜面* 组件为：
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: s[rgb] max(0, E • R)^p )
  id: totrans-12
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s[rgb] max(0, E • R)^p )
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: where s[rgb] is the color of specular reflection, p is a specular power, and
    E is the direction to the eye (in our case, E = -W, the reverse of the ray direction).
    The larger the specular power p, the "shinier" the surface will appear.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 其中 s[rgb] 是镜面反射的颜色，p 是镜面功率，E 是指向眼睛的方向（在我们的情况下，E = -W，即光线方向的反向）。镜面功率 p 越大，表面看起来就越
    "光滑"。
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To get the complete Phong reflectance, we sum over the lights in the scene:'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要得到完整的 Phong 反射，我们对场景中的光源求和：
- en: ''
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[rgb] + ∑[i] lightColor[i] ( d[rgb] max(0, N • L[i]) + s[rgb] max(0, E • R)
    ^p )
  id: totrans-18
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[rgb] + ∑[i] lightColor[i] ( d[rgb] max(0, N • L[i]) + s[rgb] max(0, E • R)
    ^p )
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: where a[rgb], d[rgb] and s[rgb] are the ambient, diffuse and specular color,
    respectively, and p is the specular power.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[rgb]、d[rgb] 和 s[rgb] 分别表示环境光、漫反射和镜面反射颜色，p 是镜面功率。
- en: '![](../Images/2770813ee2d1c88e575f42edfd7bf5c9.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2770813ee2d1c88e575f42edfd7bf5c9.jpg)'
- en: '**Blinn model for specular reflection**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**Blinn 镜面反射模型**'
- en: A few years later, Jim Blinn created a variation on the Phong model which produced
    somewhat more realistic highlights in extreme cases (when the viewer is looking
    from an angle that is far from the surface normal).
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 几年后，吉姆·布林创建了 Phong 模型的一个变体，以在极端情况下（当观察者从远离表面法线的角度观看时）产生更逼真的高光。
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Blinn model is also appreciably faster in the special case where we approximate
    E by a constant vector everywhere, and we assume that the light direction L is
    constant throughout the object.
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在我们通过在整个物体上近似 E 为一个常矢量并且假设光源方向 L 在整个物体上都是恒定的特殊情况下，Blinn 模型也相对较快。
- en: ''
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The basic idea is that a halfway vector H is defined as the normalized midpoint
    between direction to light L and direction to eye E. If E and L are constant,
    this needs to be done only once for each light source.
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 基本思想是中间向量 H 被定义为从光源方向 L 到眼睛方向 E 的中点。如果 E 和 L 是恒定的，这只需要对每个光源执行一次。
- en: ''
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Then at each pixel, we just take the inner product between N and H:'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 然后在每个像素点，我们只需计算 N 和 H 的内积：
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: s[rgb] max(0, N • H)^p
  id: totrans-31
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s[rgb] max(0, N • H)^p
- en: ''
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Because H tends to stay relatively near to N, to get the same level of specularity
    the power p needs to be about three times greater in the Blinn model than the
    corresponding value in the Phong model.
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因为 H 倾向于保持相对接近 N，所以为了获得相同水平的镜面反射，Blinn 模型中的功率 p 需要比 Phong 模型中的对应值大大约三倍。
- en: '![](../Images/cf02950a9f00a38497907141b0bccf6c.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cf02950a9f00a38497907141b0bccf6c.jpg)'
- en: '**Shadows**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**阴影**'
- en: Casting shadows is relatively easy in ray tracing. Once we have found a surface
    point S, then for each light source, we shoot another ray whose origin V' is just
    the surface point S, and whose direction W' is the direction toward that light
    source L[i].
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在光线追踪中，投射阴影相对容易。一旦我们找到表面点 S，然后对于每个光源，我们发射另一条光线，其起点 V' 就是表面点 S，方向 W' 就是指向那个光源
    L[i] 的方向。
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We want to make sure that the ray misses the object we are starting from, so
    we move the origin V'' of our new ray slightly out of the surface toward the light
    source. Our "shadow ray" will therefore be:'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们要确保光线未击中我们起始的对象，所以我们将新光线的起点 V' 稍微向表面朝向光源的方向移动。因此，我们的 "阴影光线" 将是：
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: V' = S + ε L[i]
  id: totrans-40
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: V' = S + ε L[i]
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: W' = L[i]
  id: totrans-42
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: W' = L[i]
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: where ε can be any tiny positive value, such as 0.001.
  id: totrans-44
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 其中 ε 可以是任何微小的正值，例如 0.001。
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: If this shadow ray encounters any other object, then the surface is in shadow
    at this pixel, and we do not add in the diffuse and specular components of surface
    reflectance.
  id: totrans-46
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果此阴影射线遇到任何其他物体，则此像素处的表面处于阴影中，我们不会添加表面反射的漫反射和镜面反射分量。
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: To the right above is an example of the surface not being in shadow. Just below
    that is an example of a surface being in shadow, because its light path is blocked
    by another object.
  id: totrans-48
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 右上方是一个表面不在阴影中的示例。就在下方，是一个表面在阴影中的示例，因为它的光线路径被另一个物体挡住了。
- en: '![](../Images/d8c6b7c36abbd59b4dd069d02a2ed365.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d8c6b7c36abbd59b4dd069d02a2ed365.jpg)'
- en: '![](../Images/3c3873a203f0358d9cd11c1231ecff43.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c3873a203f0358d9cd11c1231ecff43.jpg)'
- en: '**Reflection**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**反射**'
- en: 'Another great thing about ray tracing is that we can continue to follow the
    path of a light ray backward from the camera, to model the behavior of mirror
    reflection. Adapting the technique that we used to calculate the reflection direction
    R for the Phong reflectance model, but replacing L in that equation by -W (the
    direction back along the incoming ray):'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 光线追踪的另一个伟大之处在于，我们可以从摄像机向后继续跟踪光线的路径，以模拟镜面反射的行为。我们采用了计算菲涅尔反射模型的反射方向R的技术，但在该方程中用-W（沿着入射光线的反方向）替换了L：
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: W' = 2 (N • (-W)) N - (-W)
  id: totrans-54
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: W' = 2 (N • (-W)) N - (-W)
- en: ''
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'we can compute a new ray that starts at surface point S, and goes into that
    reflected direction:'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们可以计算出一个新的射线，它从表面点S开始，朝着那个反射方向前进：
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: V' = S + ε W'
  id: totrans-58
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: V' = S + ε W'
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As shown in the figure on the right, we want to offset the origin of this ray
    a bit out of the surface, so that the ray does not accidentally encounter the
    object itself.
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如右图所示，我们希望将射线的起点偏移一点出表面，这样射线就不会意外地遇到物体本身。
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Whatever color is computed by this ray, we mix it into the result of the Phong
    reflectance algorithm. The result is the appearance of a shaded surface with a
    mirror finish.
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由此射线计算出的任何颜色，我们都将其混合到菲涅尔反射算法的结果中。结果就是具有镜面光泽的阴影表面的外观。
- en: '![](../Images/f321c6f49e0a6a5c8b7f5e118f792b35.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f321c6f49e0a6a5c8b7f5e118f792b35.jpg)'
- en: '**Boolean intersection**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**布尔交集**'
- en: Another nice thing about ray tracing is that we can use it to do *boolean modeling*,
    as we discussed in class. For example, given two spheres A and B, we can compute
    the intersection (if any) of those spheres by calculating their intersection along
    the ray.
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 光线追踪的另一个好处是，我们可以用它来进行*布尔建模*，正如我们在课堂上讨论的那样。例如，给定两个球体A和B，我们可以通过沿着射线计算它们的交点（如果有）来计算这些球体的交集。
- en: ''
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Suppose, along a given ray, the values of t when entering and exiting sphere
    A are A[in] and A[out], respectively.
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 假设，沿着给定的射线，进入和退出球体A的值分别为A[in]和A[out]。
- en: ''
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Also suppose that along this ray the values of t when entering and exiting sphere
    B are B[in] and B[out], respectively.
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还假设沿着这条射线，进入和退出球体B时的值分别为B[in]和B[out]。
- en: ''
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Then the intersection of the two shapes, along the ray, is given by the maximum
    of the enter (in) values and the minimum of the exit (out) values:'
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 然后，两个形状沿射线的交点由进入（in）值的最大值和退出（out）值的最小值给出：
- en: ''
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: t[in] of entry into intersection shape = max(A[in] , B[in])
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 进入交点形状的t[in] = max(A[in]，B[in])
- en: t[out] of exit from intersection shape = min(A[out] , B[out])
  id: totrans-74
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从交点形状退出的t[out] = min(A[out]，B[out])
- en: ''
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If t[in] < t[out], then the ray has intersected the intersection shape. Otherwise,
    the ray has missed the intersection shape.
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果t[in] < t[out]，那么射线就与交点形状相交。否则，射线就未与交点形状相交。
- en: ''
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To shade the resulting intersection shape at a pixel, we need to use the normal
    of the surface that was actually hit by the ray. For example, if A[in] > B[in],
    then we need to use the surface normal of A.
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要在像素处着色所得的交点形状，我们需要使用实际被射线击中的表面的法线。例如，如果A[in] > B[in]，则我们需要使用A的表面法线。
- en: '![](../Images/4e5091838a01bcc4e3ddcdca03139b81.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4e5091838a01bcc4e3ddcdca03139b81.jpg)'
- en: '**Refraction**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**折射**'
- en: In the real world many materials, such as oil, water, plastic, glass and diamond,
    are transparent. A transparent material has an *index of refraction* which measures
    how much light slows down as it enters that medium. For example, the index of
    refraction of water is about 1.333, of glass is about 1.5\. The index of refraction
    of diamond, the substance with the highest known index of refraction, is 2.42.
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在现实世界中，许多材料，如油、水、塑料、玻璃和钻石，都是透明的。透明材料具有*折射率*，它衡量了光线进入介质时减速的程度。例如，水的折射率约为1.333，玻璃的折射率约为1.5。钻石的折射率是已知折射率中最高的物质，为2.42。
- en: ''
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As in the diagram to the right, you can add refraction to your ray tracing
    by following Snell''s law:'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如右侧图中所示，您可以通过遵循斯涅尔定律为您的光线追踪添加折射：
- en: ''
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: n1 / n2 = sin(θ2) / sin(θ1)
  id: totrans-85
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: n1 / n2 = sin(θ2) / sin(θ1)
- en: ''
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: to determine how much the ray should bend as it enters or exits a transparent
    object.
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 以确定光线进入或退出透明物体时应该弯曲多少。
- en: ''
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that you will need to change your ray tracing model to incorporate refraction.
    In addition to your initial incoming ray, and any shadow or reflection rays, you
    also need to add a refraction ray, which starts just inside the surface, and continues
    inward.
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，您需要更改您的光线追踪模型以包含折射。除了您最初的入射光线和任何阴影或反射光线外，您还需要添加一个折射光线，该光线从表面内部开始，并向内延伸。
- en: ''
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that if you have ray traced to a sphere, and are now computing where the
    refracting ray will exit that sphere, you will want to compute the *second* root
    of the quadratic equation.
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，如果您已经对一个球体进行了光线追踪，并且现在正在计算折射光线将从该球体退出的位置，您将需要计算二次方程的*第二*根。
- en: ''
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Then, after this refracting ray has exited out the back of the transparent sphere,
    you will want to compute how much it refracts on its way out, and then shoot a
    ray from there into the scene behind the sphere.
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 然后，在这个折射光线从透明球体的背面退出后，您将需要计算它在出射时折射多少，并从那里向球体后面的场景发射一道光线。
- en: ''
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In general, you use the results of refraction by mixing the color it returns
    together with whatever surface color you have computed due to pure reflection
    or blinn/phong reflectance.
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一般来说，您可以通过混合返回的颜色与由纯反射或Blinn/Phong反射计算出的表面颜色来使用折射的结果。
- en: '![](../Images/33e3353b748d7d1f122bba9dc8127b7e.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/33e3353b748d7d1f122bba9dc8127b7e.jpg)'
- en: '**Homework (due before class on Wednesday Oct 8)**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**作业（截止日期为10月8日星期三课前）**'
- en: Implement either the Phong or the Blinn reflectance model.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现Phong或Blinn反射模型之一。
- en: Implement shadows.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现阴影。
- en: Implement boolean intersection between two spheres.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现两个球体之间的布尔交集。
- en: 'Extra credit:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外加分：
- en: Implement both Phong and Blinn reflectdance.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现Phong和Blinn反射模型。
- en: Implement reflection.
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现反射。
- en: Implement refraction.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现折射。
- en: Implement boolean intersection between more than two spheres.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现两个以上球体之间的布尔交集。
- en: As always, make something cool and fun, try to create something interactive
    (using uCursor) and/or animated (using uTime).
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一如既往，制作一些酷炫有趣的东西，尝试创建一些交互式的（使用uCursor）和/或动画的（使用uTime）东西。
