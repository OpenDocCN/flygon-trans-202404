["```\n(define (attach-tag tag data)\n  (cons tag data))\n\n(define (type-tag tagged-data)\n  (if (pair? tagged-data)\n      (car tagged-data)\n      (error \"Not tagged data\")))\n\n(define (contents tagged-data)\n  (if (pair? tagged-data)\n      (cdr tagged-data)\n      (error \"Not tagged data\"))) \n```", "```\n(define (make-rational numer denom)\n  (cons num denom))\n\n(define (make-complex real imag)\n  (cons real imag)) \n```", "```\n(define (make-rational numer denom)\n  (attach-tag 'rational (cons num denom)))\n\n(define (make-complex real imag)\n  (attach-tag 'complex (cons real imag))) \n```", "```\n(define (numer n)\n  (car (contents n)))\n\n(define (denom n)\n  (cdr (contents n))) \n```", "```\n(define (add-rational x y)\n  (make-rational (+ (* (numer x) (denom y))\n                    (* (numer y) (denom x)))\n                 (* (denom x) (denom y)))) \n```", "```\n(define (add-numbers num1 num2)\n  (cond ((and (equal? (type-tag num1) 'rational)\n              (equal? (type-tag num2) 'rational))\n         (add-rational num1 num2))\n        ((and (equal? (type-tag num1) 'complex)\n              (equal? (type-tag num2) 'complex))\n         (add-complex num1 num2))\n        ((and (equal? (type-tag num1) 'rational)\n              (equal? (type-tag num2) 'complex))\n         (add-rational-complex num1 num2))\n        (else\n         (add-rational-complex num2 num1)))) \n```"]