["```\n(define (apply procedure arguments)\n  (cond ((primitive-procedure? procedure)\n         (apply-primitive-procedure procedure arguments))\n        ((compound-procedure? procedure)\n         (eval-sequence\n           (procedure-body procedure)\n           (extend-environment\n             (procedure-parameters procedure)\n             arguments\n             (procedure-environment procedure))))\n        (else\n         (error\n          \"Unknown procedure type -- APPLY\" procedure)))) \n```", "```\n(define (make-procedure parameters body env)\n  (list 'procedure parameters body env))\n(define (compound-procedure? p)\n  (tagged-list? p 'procedure))\n(define (procedure-parameters p) (cadr p))\n(define (procedure-body p) (caddr p))\n(define (procedure-environment p) (cadddr p)) \n```", "```\n(define (primitive-procedure? proc)\n  (tagged-list? proc 'primitive))\n\n(define (primitive-implementation proc) (cadr proc))\n\n(define primitive-procedures\n  (list (list 'car car)\n        (list 'cdr cdr)\n        (list 'cons cons)\n        (list 'null? null?)\n        <more primitives>\n        ))\n\n(define (primitive-procedure-names)\n  (map car\n       primitive-procedures))\n\n(define (primitive-procedure-objects)\n  (map (lambda (proc) (list 'primitive (cadr proc)))\n       primitive-procedures)) \n```", "```\n(define (apply-primitive-procedure proc args)\n  (apply-in-underlying-scheme\n   (primitive-implementation proc) args)) \n```", "```\n(define (enclosing-environment env) (cdr env))\n(define (first-frame env) (car env))\n(define the-empty-environment '()) \n```", "```\n(define (make-frame variables values)\n  (cons variables values))\n(define (frame-variables frame) (car frame))\n(define (frame-values frame) (cdr frame))\n(define (add-binding-to-frame! var val frame)\n  (set-car! frame (cons var (car frame)))\n  (set-cdr! frame (cons val (cdr frame)))) \n```", "```\n(define (extend-environment vars vals base-env)\n  (if (= (length vars) (length vals))\n      (cons (make-frame vars vals) base-env)\n      (if (< (length vars) (length vals))\n          (error \"Too many arguments supplied\" vars vals)\n          (error \"Too few arguments supplied\" vars vals)))) \n```", "```\n(define (lookup-variable-value var env)\n  (define (env-loop env)\n    (define (scan vars vals)\n      (cond ((null? vars)\n             (env-loop (enclosing-environment env)))\n            ((eq? var (car vars))\n             (car vals))\n            (else (scan (cdr vars) (cdr vals)))))\n    (if (eq? env the-empty-environment)\n        (error \"Unbound variable\" var)\n        (let ((frame (first-frame env)))\n          (scan (frame-variables frame)\n                (frame-values frame)))))\n  (env-loop env)) \n```", "```\n(define (set-variable-value! var val env)\n  (define (env-loop env)\n    (define (scan vars vals)\n      (cond ((null? vars)\n             (env-loop (enclosing-environment env)))\n            ((eq? var (car vars))\n             (set-car! vals val))\n            (else (scan (cdr vars) (cdr vals)))))\n    (if (eq? env the-empty-environment)\n        (error \"Unbound variable -- SET!\" var)\n        (let ((frame (first-frame env)))\n          (scan (frame-variables frame)\n                (frame-values frame)))))\n  (env-loop env)) \n```", "```\n(define (define-variable! var val env)\n  (let ((frame (first-frame env)))\n    (define (scan vars vals)\n      (cond ((null? vars)\n             (add-binding-to-frame! var val frame))\n            ((eq? var (car vars))\n             (set-car! vals val))\n            (else (scan (cdr vars) (cdr vals)))))\n    (scan (frame-variables frame)\n          (frame-values frame)))) \n```", "```\n(define (apply procedure arguments)\n  (cond ((primitive-procedure? procedure)\n         (apply-primitive-procedure procedure arguments))\n        ((compound-procedure? procedure)\n         (eval-sequence\n           (procedure-body procedure)\n           (extend-environment\n             (procedure-parameters procedure)\n             arguments\n             (procedure-environment procedure))))\n        (else\n         (error\n          \"Unknown procedure type -- APPLY\" procedure)))) \n```"]