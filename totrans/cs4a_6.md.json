["```\n>>> fuelNeeded = 42.0/1000\n>>> tank1 = 36.0/1000\n>>> tank2 = 6.0/1000\n>>> tank1 + tank2 >= fuelNeeded\nFalse\n\n```", "```\n>>> fuelNeeded\n0.042000000000000003\n>>> tank1\n0.035999999999999997\n>>> tank2\n0.0060000000000000001\n>>> tank1 + tank2\n0.041999999999999996\n\n```", "```\nclass Rational:\n    def __init__(self, num, denom):\n        self.numerator = num\n        self.denominator = denom\n\n```", "```\nr1 = Rational(36, 1000)\nr2 = Rational(6, 1000)\n\n```", "```\nr1 = Rational(36, 1000)\n\n```", "```\nr1 = Rational(36, 1000)\n\n```", "```\n>>> r1.numerator\n36\n\n```", "```\nr1 = Rational(36, 1000)\nr2 = Rational(6, 1000)\n\n```", "```\n>>> r1.add(r2)\n\n```", "```\n>>> r3 = r1.add(r2)\n\n```", "```\nclass Rational:\n    def __init__(self, num, denom):\n        self.numerator = num\n        self.denominator = denom\n\n    def add(self, other):\n        newNumerator = self.numerator * other.denominator +\n                       self.denominator * other.numerator\n        newDenominator = self.denominator*other.denominator\n        return Rational(newNumerator, newDenominator)\n\n```", "```\n>>> r1 = Rational(1, 2)\n>>> r2 = Rational(1, 3)\n>>> r3 = r1.add(r2)\n\n```", "```\n>>> r3.numerator\n>>> r3.denominator\n\n```", "```\n>>> r1 = Rational(1, 2)\n>>> r2 = Rational(1, 2)\n>>> r1 == r2\nFalse\n\n```", "```\ndef __eq__(self, other):\n    return self.numerator * other.denominator ==\n           self.denominator * other.numerator\n\n```", "```\ndef __ge__(self, other):\n    return self.numerator * other.denominator >=\n           self.denominator * other.numerator\n\n```", "```\n>>> fuelNeeded = 42.0/1000\n>>> tank1 = 36.0/1000\n>>> tank2 = 6.0/1000\n>>> tank1 + tank2 >= fuelNeeded\nFalse\n\n```", "```\n>>>  fuelNeeded = Rational(42, 1000)\n>>>  tank1 = Rational(36, 1000)\n>>>  tank2 = Rational(6, 1000)\n>>>  tank1 + tank2 >= fuelNeeded\nTrue\n\n```", "```\n>>> r1 = Rational(1, 2)\n>>> r2 = Rational(1, 3)\n>>> r3 = r1 + r2\n>>> r3\n<Rational.Rational instance at 0x6b918>\n>>> print(r3)\n<Rational.Rational instance at 0x6b918>\n\n```", "```\n>>> str(1)\n'1'\n>>> str(3.142)\n'3.142'\n\n```", "```\n>>> print(str(1))\n1\n>>> print(\"My favorite number is \" + str(42))\nMy favorite number is 42\n\n```", "```\n>>> myList = [1, 2, 3]\n>>> print(\"Here is a very nice list: \" + str(myList))\nHere is a very nice list: [1, 2, 3]\n\n```", "```\ndef __str__(self):\n    return str(self.numerator) + \"/\" + str(self.denominator)\n\n```", "```\n>>> r3\n<Rational.Rational instance at 0x6b918>\n>>> print(\"Here is r3: \"+str(r3))\nHere is r3: 5/6\n\n```", "```\nr1.numerator = 42\n\n```", "```\ndef foo():\n    r = Rational(1, 3)\n    bar(r)\n    print r\n\ndef bar(number):\n    number.numerator += 1\n\n```", "```\nr = Rational(1, 3)\n\n```", "```\nmyList = [42, 1, 3]\n\n```", "```\nmyList = list()\nmyList.append(42)\nmyList.append(1)\nmyList.append(3)\n\n```", "```\n>>> myList\n[42, 1, 3]\n>>> myList.reverse()\n>>> myList\n[3, 1, 42]\n\n```", "```\n>>> [42, 1, 3] + [4, 5]\n[42, 1, 3, 4, 5]\n\n```", "```\n>>> from vpython import *\n\n```", "```\n>>> b = box()\n\n```", "```\n>>> b = box()\n\n```", "```\n>>> b.length = 0.5  # the box's length just changed\n>>> b.width = 2.0 # the box's width just changed\n>>> b.height = 1.5  # the box's height just changed\n>>> b.color = vector(1.0, 0.0, 0.0)  # the box turned red\n>>> b.texture = textures.wood  # it's wood-grained!\n>>> b.opacity = 0.42 # it's translucent!\n\n```", "```\n>>> c = box()\n>>> c.color\n(1.0, 1.0, 1.0)\n\n```", "```\n>>> c.pos\n<0.000000, 0.000000, 0.000000>\n\n```", "```\n>>> v = vector(1, 2, 3)\n>>> w = vector(10, 20, 30)\n>>> v + w\n<11.000000, 22.000000, 33.000000>\n\n```", "```\n>>> u = vector(1, 1, 0)\n>>> u.norm()\n<0.707107, 0.707107, 0.000000>\n\n```", "```\n>>> c.pos = vector(0, 1, 2)\n\n```", "```\n>>> d = box(length = 0.5, width = 2.0, height = 1.5, color = vector(1.0, 0.0, 0.0))\n\n```", "```\n>>> d.rotate(angle=pi/4)\n\n```", "```\nfrom vpython import *\n\ndef spinBox():\n    myBox = box(color = vector(1.0, 0.0, 0.0))\n    while True:\n        # Slow down the animation to 60 frames per second.\n        # Change the value to see the effect!\n        rate(60)\n        myBox.rotate(angle=pi/100)\n\n```", "```\nfrom vpython import *\nimport random\n\ndef spinboxes():\n    boxList = []\n    for boxNumber in range(0,10):\n        x = random.randint(-5,5)\n        y = random.randint(-5,5)\n        z = random.randint(-5,5)\n        red = random.random()       # random number between 0 and 1\n        green = random.random()     # random number between 0 and 1\n        blue = random.random()      # random number between 0 and 1\n        newBox = box()\n        newBox.pos = vector(x, y, z)\n        newBox.color = vector(red, green, blue)\n        newBox.axis =\n        random.choice([vector(1,0,0),vector(0,1,0),vector(0,0,1)]) # makes boxes rotate in random directions\n        boxList.append(newBox)\n    # the physics loop, which updates the world\n    while True:\n        rate(60)\n        for myBox in boxList:\n            myBox.rotate(angle=pi/100)\nspinboxes()\n\n```", "```\nfrom vpython import *\nimport math\nimport random\n\nclass GenericBot:\n    def __init__(self, position = vector(0, 0, 0),\n                 heading = vector(0, 0, 1), speed = 1):\n        self.position = position\n        self.heading = heading.norm()\n        self.speed = speed\n        self.parts = []\n\n    def update(self):\n        self.turn(0)\n        self.forward()\n\n    def turn(self, angle):\n        # convert angle from degrees to radians (VPython\n        # assumes all angles are in radians)\n        theta = math.radians(angle)\n        self.heading = rotate(self.heading, angle = theta, axis = vector(0, 1, 0))\n        for part in self.parts:\n            part.rotate(angle = theta, axis = vector(0, 1, 0),\n                        origin = self.position)\n\n    def forward(self):\n        self.position += self.heading * self.speed\n        for part in self.parts:\n            part.pos += self.heading * self.speed\n\n```", "```\ndef __init__(self, position = vector(0, 0, 0),\n             heading = vector(0, 0, 1), speed = 1):\n\n```", "```\n>>> mybot = GenericBot(vector(1, 2, 3))\n\n```", "```\n>>> mybot = GenericBot(vector(1, 2, 3), vector(0, 0, 1))\n\n```", "```\n>>> mybot = GenericBot(heading=vector(0, 1, 0))\n\n```", "```\npart.rotate(angle = theta, axis = vector(0, 1, 0),\n            origin = self.position)\n\n```", "```\nclass ZombieBot(GenericBot):\n    def __init__(self, position = vector(0, 0, 0),\n                 heading = vector(0, 0, 1)):\n        GenericBot.__init__(self, position, heading)\n        self.body = cylinder(pos = self.position,\n                             axis = vector(0, 4, 0),\n                             radius = 1,\n                             color = vector(0, 1, 0))\n        self.arm1 = cylinder(pos = self.position + vector(0.6, 3, 0),\n                             axis = vector(0, 0, 2),\n                             radius = .3,\n                             color = vector(1, 1, 0))\n        self.arm2 = cylinder(pos = self.position + vector(-0.6, 3, 0),\n                             axis = vector(0, 0, 2),\n                             radius = .3,\n                             color = vector(1, 1, 0))\n        self.halo = ring(pos = self.position + vector(0, 5, 0),\n                             axis = vector(0, 1, 0),\n                             radius = 1,\n                             color = vector(1, 1, 0))\n        self.head = sphere(pos = self.position + vector(0, 4.5, 0),\n                             radius = 0.5,\n                             color = vector(1, 1, 1))\n        self.parts = [self.body, self.arm1, self.arm2,\n                      self.halo, self.head]\n\n    def update(self):\n        # call turn with a random angle between -5 and 5\n        # degrees\n        self.turn(random.uniform(-5, 5))\n        self.forward()\n\n```", "```\n>>> zephyr = ZombieBot()\n>>> zephyr.update()\n\n```", "```\nclass PlayerBot(GenericBot):\n    def __init__(self, position = vector(0, 0, 0),\n                 heading = vector(0, 0, 1)):\n        GenericBot.__init__(self, position, heading)\n        self.body = cylinder(pos = self.position + vector(0, 0.5, 0),\n                               axis = vector(0, 6, 0),\n                               radius = 1,\n                               color = vector(1, 0, 0))\n        self.head = box(pos = vector(0, 7, 0) + self.position,\n                               length = 2,\n                               width = 2,\n                               height = 2,\n                               color = vector(0, 1, 0))\n        self.nose = cone(pos = vector(0, 7, 1) + self.position,\n                               radius = 0.5,\n                               axis = vector(0, 0, 1),\n                               color = vector(1, 1, 0))\n        self.wheel1 = cylinder(pos = self.position + vector(1, 1, 0),\n                               axis = vector(0.5, 0, 0),\n                               radius = 1,\n                               color = vector(0, 0, 1))\n        self.wheel2 = cylinder(pos = self.position + vector(-1, 1, 0),\n                               axis = vector(-0.5, 0, 0),\n                               radius = 1,\n                               color = vector(0, 0, 1))\n        self.parts = [self.body, self.head, self.nose,\n                      self.wheel1, self.wheel2]\n\n    def update(self):\n        self.turn(0) # we'll leave the turn handling up to our buttons...\n        self.forward()\n\n```", "```\nfrom vpython import *\nfrom robot import *\nimport random\nimport math\nimport ipywidgets as widgets\n\n# variable declarations\nglobal userbot\nglobal running\nrunning = True\nGROUND_RADIUS = 50\nZOMBIES = 20\n\n# declare our buttons\nfastButton = widgets.Button(description = 'F', width = '60px', height = '60px')\nslowButton = widgets.Button(description = 'S', width = '60px', height = '60px')\nleftButton = widgets.Button(description = 'L', width = '60px', height = '60px')\nrightButton = widgets.Button(description = 'R', width = '60px', height = '60px')\nfillerButton0 = widgets.Button(description = '', width = '60px', height = '60px')\nresetButton = widgets.Button(description = 'Reset', width = '120px', height = '60px')\nquitButton = widgets.Button(description = 'Quit', width = '120px', height = '60px')\nfillerButton1 = widgets.Button(description = '', width = '120px', height = '60px')\nscene.caption = \"To use the directional pad, click on a marked direction. F = Faster, S = Slower, L = turn Left and R = turn Right.\"\n\n# These functions set up our buttons to read in inputs\ndef fastButton_handler(s):\n    global userbot\n    userbot.speed += 0.1\nfastButton.on_click(fastButton_handler)\n\ndef slowButton_handler(s):\n    global userbot\n    userbot.speed -= 0.1\nslowButton.on_click(slowButton_handler)\n\ndef leftButton_handler(s):\n    global userbot\n    userbot.turn(5)\nleftButton.on_click(leftButton_handler)\n\ndef rightButton_handler(s):\n    global userbot\n    userbot.turn(-5)\nrightButton.on_click(rightButton_handler)\n\ndef quitButton_handler(s):\n    global running\n    running = False\n    print(\"Exiting the main loop. Ending this vPython session...\")\nquitButton.on_click(quitButton_handler)\n\n# now arrange and display our GUI\ncontainer0 = widgets.HBox(children = [fillerButton0, fastButton, fillerButton0, quitButton])\ncontainer1 = widgets.HBox(children = [leftButton, fillerButton0, rightButton, fillerButton1])\ncontainer2 = widgets.HBox(children = [fillerButton0, slowButton, fillerButton0, fillerButton1])\ndisplay(container0)\ndisplay(container1)\ndisplay(container2)\n\ndef main():\n    global userbot\n    global running\n    ground = cylinder(pos = vector(0, -1, 0),\n                      axis = vector(0, 1, 0),\n                      radius = GROUND_RADIUS)\n    userbot = PlayerBot()\n    zombies = makeZombies()\n    while running:\n        rate(30)\n        userbot.update()\n        if mag(userbot.position) >= GROUND_RADIUS:\n            userbot.turn(180)\n        for z in zombies:\n            z.update()\n            if mag(z.position) >= GROUND_RADIUS:\n                z.turn(random.uniform(150, 210))\n\ndef makeZombies():\n    zombies = []\n    for z in range(ZOMBIES):\n        theta = random.uniform(0, 360)\n        r = random.uniform(0, GROUND_RADIUS)\n        x = r * cos(math.radians(theta))\n        z = r * sin(math.radians(theta))\n        zombies.append(ZombieBot(position = vector(x, 0, z)))\n    return zombies\nmain()\n\n```"]