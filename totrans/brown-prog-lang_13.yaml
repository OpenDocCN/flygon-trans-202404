- en: 13Functions as Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13函数作为数据
- en: '|     [13.1 A Little Calculus](#%28part._.A_.Little_.Calculus%29) |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|     [13.1 一点微积分](#%28part._.A_.Little_.Calculus%29) |'
- en: '|     [13.2 A Helpful Shorthand for Anonymous Functions](#%28part._lam-shorthand%29)
    |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|     [13.2 匿名函数的一个有用简写](#%28part._lam-shorthand%29) |'
- en: '|     [13.3 Streams From Functions](#%28part._streams-from-funs%29) |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '|     [13.3 函数生成流](#%28part._streams-from-funs%29) |'
- en: '|     [13.4 Combining Forces: Streams of Derivatives](#%28part._d-dx-streams%29)
    |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|     [13.4 合力：导数流](#%28part._d-dx-streams%29) |'
- en: It’s interesting to consider how expressive the little programming we’ve learned
    so far can be. To illustrate this, we’ll work through a few exercises of interesting
    concepts we can express using just functions as values. We’ll write two quite
    different things, then show how they converge nicely.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到到目前为止我们学到的少量编程可以有多具有表现力是很有趣的。为了说明这一点，我们将通过几个有趣的概念练习来展示，这些概念可以仅使用函数作为值来表达。我们将写两个非常不同的东西，然后展示它们如何很好地融合。
- en: 13.1A Little Calculus
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.1一点微积分
- en: 'If you’ve studied the differential calculus, you’ve come across curious sytactic
    statements such as this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你学过微分学，你可能遇到过这样的奇怪的句法陈述：
- en: \begin{equation*}{\frac{d}{dx}} x^2 = 2x\end{equation*}
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: \begin{equation*}{\frac{d}{dx}} x^2 = 2x\end{equation*}
- en: 'Let’s unpack what this means: the \(d/dx\), the \(x^2\), and the \(2x\).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解开这句话的含义：\(d/dx\)，\(x^2\)和\(2x\)。
- en: 'First, let’s take on the two expressions; we’ll discuss one, and the discussion
    will cover the other as well. The correct response to “what does \(x^2\) mean?”
    is, of course, an error: it doesn’t mean anything, because \(x\) is an unbound
    identifier.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看看这两个表达式；我们将讨论一个，而讨论也将涵盖另一个。对于“\(x^2\)是什么意思？”的正确回答当然是一个错误：它没有任何意义，因为\(x\)是一个未绑定的标识符。
- en: 'So what is it intended to mean? The intent, clearly, is to represent the function
    that squares its input, just as \(2x\) is meant to be the function that doubles
    its input. We have nicer ways of writing those:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么它打算表示什么？显然，意图是代表将其输入平方的函数，就像\(2x\)意味着将其输入加倍的函数一样。我们有更好的写法：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and what we’re really trying to say is that the \(d/dx\) (whatever that is)
    of square is double.We’re assuming functions of arity one in the variable that
    is changing.So now let’s unpack \(d/dx\), starting with its type. As the above
    example illustrates, \(d/dx\) is really a function from functions to functions.
    That is, we can write its type as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 而我们真正想说的是，平方的\(d/dx\)（不管那是什么）是双倍。我们假设在变化的变量中具有一元函数。现在让我们解开\(d/dx\)，从其类型开始。正如上面的例子所示，\(d/dx\)实际上是一个从函数到函数的函数。也就是说，我们可以将其类型写成如下形式：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (This type might explain why your calculus course never explained this operation
    this way—<wbr>though it’s not clear that obscuring its true meaning is any better
    for your understanding.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: （这种类型可能解释了为什么你的微积分课程从未以这种方式解释这个操作——尽管模糊其真正含义是否对你的理解更有益尚不清楚。）
- en: Let us now implement d-dx. We’ll implement numerical differentiation, though
    in principle we could also implement symbolic differentiation—<wbr>using rules
    you learned, e.g., given a polynomial, multiply by the exponent and reduce the
    exponent by one—<wbr>with a representation of expressions ([Representing Arithmetic](first-interp.html#%28part._dt-for-arith%29)).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现d-dx。我们将实现数值微分，尽管原则上我们也可以实现符号微分——使用你学到的规则，例如，给定一个多项式，乘以指数并减少一个——使用表达式的表示（[表示算术](first-interp.html#%28part._dt-for-arith%29)）。
- en: 'In general, numeric differentiation of a function at a point yields the value
    of the derivative at that point. We have a handy formula for it: the derivative
    of \(f\) at \(x\) is'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，函数在某一点的数值微分产生该点处导数的值。我们有一个方便的公式：在\(x\)处的\(f\)的导数是
- en: \begin{equation*}\frac{f(x + \epsilon) - f(x)}{\epsilon}\end{equation*}
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: \begin{equation*}\frac{f(x + \epsilon) - f(x)}{\epsilon}\end{equation*}
- en: 'as \(\epsilon\) goes to zero in the limit. For now we’ll give the infinitesimal
    a small but fixed value, and later [[Combining Forces: Streams of Derivatives](#%28part._d-dx-streams%29)]
    see how we can improve on this.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当\(\epsilon\)趋近于零时。现在我们将给予这个微小值一个小但固定的值，稍后[[合力：导数流](#%28part._d-dx-streams%29)]看看我们如何改进这一点。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s now try to translate the above formula into Pyret:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试将上述公式翻译成Pyret：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Do Now!
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在！
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What’s the problem with the above definition?
  id: totrans-25
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 上述定义有什么问题？
- en: 'If you didn’t notice, Pyret will soon tell you: x isn’t bound. Indeed, what
    is x? It’s the point at which we’re trying to compute the numeric derivative.
    That is, d-dx needs to return not a number but a function (as the type indicates)
    that will consume this x:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有注意到，Pyret 很快就会告诉你：x 没有绑定。事实上，x 是什么？这是我们试图计算数值导数的点。也就是说，d-dx 需要返回的不是一个数字，而是一个函数（如类型所示），这个函数将消耗这个
    x：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Sure enough, this definition now works. We can, for instance, test it as follows
    (note the use of num-floor to avoid numeric precision issues from making our tests
    appear to fail):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，这个定义现在有效了。例如，我们可以这样测试它（注意使用 num-floor 避免数值精度问题导致我们的测试看起来失败）：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we can return to the original example that launched this investigation:
    what the sloppy and mysterious notation of math is really trying to say is,'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以回到引发这一调查的原始示例了：数学中草率而神秘的符号到底想表达什么，
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: or, in the notation of [A Notation for Functions](predicting-growth.html#%28part._math-anon-functions%29),
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，用 [函数表示法](predicting-growth.html#%28part._math-anon-functions%29) 的符号表示，
- en: \begin{equation*}{\frac{d}{dx}} [x \rightarrow x^2] = [x \rightarrow 2x]\end{equation*}
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: \begin{equation*}{\frac{d}{dx}} [x \rightarrow x^2] = [x \rightarrow 2x]\end{equation*}
- en: Pity math textbooks for not wanting to tell us the truth!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可怜的数学教科书不愿告诉我们真相！
- en: 13.2A Helpful Shorthand for Anonymous Functions
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.2 匿名函数的有用简写
- en: Pyret offers a shorter syntax for writing anonymous functions. Though, stylistically,
    we generally avoid it so that our programs don’t become a jumble of special characters,
    sometimes it’s particularly convenient, as we will see below. This syntax is
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Pyret 提供了一种更短的语法来编写匿名函数。虽然从风格上讲，我们通常避免使用它，以免我们的程序变成一堆特殊字符，但有时它特别方便，正如我们将在下面看到的那样。这个语法是
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'where a is zero or more arguments and b is the body. For instance, we can write
    lam(x): x * x end as'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '这里 a 是零个或多个参数，b 是函数体。例如，我们可以写成 lam(x): x * x end，如下所示'
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: where we can see the benefit of brevity. In particular, note that there is no
    need for end, because the braces take the place of showing where the expression
    begins and ends. Similarly, we could have written d-dx as
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到简洁性的好处。特别要注意，因为大括号代替了显示表达式开始和结束的位置，所以不需要结束。同样地，我们也可以将 d-dx 写成
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: but many readers would say this makes the function harder to read, because the
    prominent lam makes clear that d-dx returns an (anonymous) function, whereas this
    syntax obscures it. Therefore, we will usually only use this shorthand syntax
    for “one-liners”.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但许多读者会说这使函数更难阅读，因为突出显示的 lam 清楚地表明 d-dx 返回一个（匿名）函数，而这种语法则使其模糊不清。因此，我们通常只在“一行式”中使用这种简写语法。
- en: 13.3Streams From Functions
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.3 函数流
- en: 'People typically think of a function as serving one purpose: to parameterize
    an expression. While that is both true and the most common use of a function,
    it does not justify having a function of no arguments, because that clearly parameterizes
    over nothing at all. Yet functions of no argument also have a use, because functions
    actually serve two purposes: to parameterize, and to suspend evaluation of the
    body until the function is applied. In fact, these two uses are orthogonal, in
    that one can employ one feature without the other. In [Sugaring Over Anonymity](Interpreting_Functions.html#%28part._let-desugar%29)
    we see one direction of this: parameterized functions that are used immediately,
    so that we employ only abstraction and not delay. Below, we will see the other:
    delay without abstraction.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 人们通常认为函数只有一个目的：对表达式进行参数化。虽然这既正确又是函数的最常见用法，但这并不能证明存在一个没有参数的函数的合理性，因为这显然是对什么都不参数化的参数化。然而，没有参数的函数也有用处，因为函数实际上有两个目的：参数化和推迟对函数体的求值直到函数被应用。事实上，这两个用途是正交的，即一个功能可以使用而不使用另一个功能。在
    [糖化匿名性](Interpreting_Functions.html#%28part._let-desugar%29) 中，我们看到了这一方面：立即使用的参数化函数，因此我们只使用抽象而不使用延迟。下面，我们将看到另一个方面：延迟而不使用抽象。
- en: 'Let’s consider the humble list. A list can be only finitely long. However,
    there are many lists (or sequences) in nature that have no natural upper bound:
    from mathematical objects (the sequence of natural numbers) to natural ones (the
    sequence of hits to a Web site). Rather than try to squeeze these unbounded lists
    into bounded ones, let’s look at how we might represent and program over these
    unbounded lists.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下简单的列表。列表只能是有限长的。然而，在自然界中有许多没有自然上限的列表（或序列）：从数学对象（自然数序列）到自然对象（网站点击次数序列）。与其试图将这些无限制的列表压缩成有限制的列表，不如看看我们如何表示和对这些无限制的列表进行编程。
- en: 'First, let’s write a program to compute the sequence of natural numbers:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们编写一个计算自然数序列的程序：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Do Now!
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Does this program have a problem?
  id: totrans-50
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个程序有问题吗？
- en: 'While this represents our intent, it doesn’t work: running it—<wbr>e.g., nats-from(0)—<wbr>creates
    an infinite loop evaluating nats-from for every subsequent natural number. In
    other words, we want to write something very like the above, but that doesn’t
    recur until we want it to, i.e., on demand. In other words, we want the rest of
    the list to be lazy.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这代表了我们的意图，但它不起作用：运行它——例如，nats-from(0)——会创建一个无限循环，评估每个后续自然数的 nats-from。换句话说，我们想写的东西与上面的非常相似，但不会在我们想要的时候发生递归，即，按需发生。换句话说，我们希望列表的其余部分是惰性的。
- en: This is where our insight into functions comes in. A function, as we have just
    noted, delays evaluation of its body until it is applied. Therefore, a function
    would, in principle, defer the invocation of nats-from(n + 1) until it’s needed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对函数的洞察力的地方。正如我们刚刚注意到的，函数推迟对其主体的评估，直到应用时才会执行。因此，原则上，函数会推迟对 nats-from(n +
    1) 的调用，直到需要它。
- en: 'Except, this creates a type problem: the second argument to link needs to be
    a list, and cannot be a function. Indeed, because it must be a list, and every
    value that has been constructed must be finite, every list is finite and eventually
    terminates in empty. Therefore, we need a new data structure to represent the
    links in these lazy lists (also known as streams):<stream-type-def> ::='
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了，这会导致类型问题：link 的第二个参数需要是一个列表，不能是一个函数。实际上，因为它必须是一个列表，而且每个已构造的值必须是有限的，因此每个列表都是有限的，并且最终在空处终止。因此，我们需要一种新的数据结构来表示这些惰性列表（也称为流）：<stream-type-def>
    ::=
- en: '|   data Stream<T>: |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '|   数据 Stream<T>: |'
- en: '|     &#124; lz-link(h :: T, t :: ( -> Stream<T>)) |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '|     &#124; lz-link(h :: T, t :: ( -> Stream<T>)) |'
- en: '|   end |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '|   end |'
- en: 'where the annotation ( -> Stream<T>) means a function from no arguments (hence
    the lack of anything before ->), also known as a thunk. Note that the way we have
    defined streams they must be infinite, since we have provided no way to terminate
    them.Let’s construct the simplest example we can, a stream of constant values:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注释（ -> Stream<T>）表示没有参数的函数（因此 -> 前面没有任何内容），也称为 thunk。请注意，我们定义流的方式必须是无限的，因为我们没有提供终止它们的方法。让我们构造我们可以的最简单的例子，一个常量值流：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Pyret will actually complain about this definition. Note that the list equivalent
    of this also will not work:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Pyret 实际上会抱怨这个定义。请注意，相应的列表版本也不起作用：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'because ones is not defined at the point of definition, so when Pyret evaluates
    link(1, ones), it complains that ones is not defined. However, it is being overly
    conservative with our former definition: the use of ones is “under a lam”, and
    hence won’t be needed until after the definition of ones is done, at which point
    ones will be defined. We can indicate this to Pyret by using the keyword rec:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 ones 在定义点没有被定义，所以当 Pyret 评估 link(1, ones) 时，它会抱怨 ones 未定义。但是，对于我们以前的定义，它过于保守了：ones
    的使用位于“lam”下面，因此在定义 ones 完成后才需要，此时 ones 将被定义。我们可以通过使用关键字 rec 来向 Pyret 指示这一点：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To understand more about recursive definitions, see [Recursive Functions](State__Change__and_More_Equality.html#%28part._rec-for-recursive%29).
    Note that in Pyret, every fun implicitly has a rec beneath it, which is why we
    can create recursive functions with aplomb.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关递归定义的更多信息，请参阅[递归函数](State__Change__and_More_Equality.html#%28part._rec-for-recursive%29)。请注意，在
    Pyret 中，每个 fun 隐含地有一个 rec，在此之下，这就是我们为什么可以毫不费力地创建递归函数的原因。
- en: Exercise
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Earlier we said that we can’t write
  id: totrans-66
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 之前我们说过，我们不能写
- en: ''
  id: totrans-67
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE14]'
- en: ''
  id: totrans-69
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: What if we tried to write
  id: totrans-70
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果我们试图写
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-72
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ''
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: instead? Does this work and, if so, what value is ones bound to? If it doesn’t
    work, does it fail to work for the same reason as the definition without the rec?
  id: totrans-74
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 相反？这是否有效，如果有效， ones 绑定到什么值？如果它不起作用，它是否由于没有 rec 的定义相同的原因而无法工作？
- en: 'Henceforth, we will use the shorthand [[A Helpful Shorthand for Anonymous Functions](#%28part._lam-shorthand%29)]
    instead. Therefore, we can rewrite the above definition as:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用缩写 [[匿名函数的有用缩写](#%28part._lam-shorthand%29)]。因此，我们可以将上述定义重写为：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Notice that {(): …} defines an anonymous function of no arguments. You can’t
    leave out the ()! If you do, Pyret will get confused about what your program means.Because
    functions are automatically recursive, when we write a function to create a stream,
    we don’t need to use rec. Consider this example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '注意 {(): …} 定义了一个没有参数的匿名函数。你不能忽略 ()！如果你这样做了，Pyret 将会对你的程序意义感到困惑。因为函数会自动递归，所以当我们编写一个函数来创建一个流时，我们不需要使用
    rec。考虑这个例子：'
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'with which we can define the natural numbers:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过它我们可以定义自然数：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that the definition of nats is not recursive itself—<wbr>the recursion
    is inside nats-from—<wbr>so we don’t need to use rec to define nats.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，nats 的定义本身不是递归的——递归在 nats-from 内部——所以我们不需要使用 rec 来定义 nats。
- en: Do Now!
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在动手！
- en: ''
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Earlier, we said that every list is finite and hence eventually terminates.
    How does this remark apply to streams, such as the definition of ones or nats
    above?
  id: totrans-84
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 之前，我们说过每个列表都是有限的，因此最终会终止。这个说法如何适用于流，例如上面的 ones 或 nats 的定义？
- en: 'The description of ones is still a finite one; it simply represents the potential
    for an infinite number of values. Note that:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ones 的描述仍然是有限的；它只是表示了无限数量的值的潜在性。请注意：
- en: A similar reasoning doesn’t apply to lists because the rest of the list has
    already been constructed; in contrast, placing a function there creates the potential
    for a potentially unbounded amount of computation to still be forthcoming.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似的推理不适用于列表，因为列表的其余部分已经构建完成；相反，在那里放置一个函数会导致可能有潜在的无限量的计算仍在进行中。
- en: That said, even with streams, in any given computation, we will create only
    a finite prefix of the stream. However, we don’t have to prematurely decide how
    many; each client and use is welcome to extract less or more, as needed.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 话虽如此，即使对于流，每次给定的计算中，我们只会创建流的有限前缀。但是，我们不必过早地决定有多少；每个客户端和用途都可以根据需要提取更少或更多的内容。
- en: 'Now we’ve created multiple streams, but we still don’t have an easy way to
    “see” one. First we’ll define the traditional list-like selectors. Getting the
    first element works exactly as with lists:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了多个流，但是我们仍然没有一个简单的方法来“看见”其中一个流。首先我们将定义传统的类列表选择器。获取第一个元素的方法与列表完全相同：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In contrast, when trying to access the rest of the stream, all we get out of
    the data structure is a thunk. To access the actual rest, we need to force the
    thunk, which of course means applying it to no arguments:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，当尝试访问流的其余部分时，我们从数据结构中得到的是一个惰性计算。要访问实际的剩余部分，我们需要强制执行该惰性计算，这当然意味着对其应用零个参数：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This is useful for examining individual values of the stream. It is also useful
    to extract a finite prefix of it (of a given size) as a (regular) list, which
    would be especially handy for testing. Let’s write that function:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于检查流的各个值很有用。将其作为（常规）列表提取其有限前缀（给定大小）也很有用，这对于测试将是特别方便的。让我们写一个函数：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you pay close attention, you’ll find that this body is not defined by cases
    over the structure of the (stream) input—<wbr>instead, it’s defined by the cases
    of the definition of a natural number (zero or a successor). We’ll return to this
    below ([<lz-map2-def>](#%28elem._lz-map2-def%29)).Now that we have this, we can
    use it for testing. Note that usually we use our data to test our functions; here,
    we’re using this function to test our data:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察，你会发现这个主体并不是通过对（流）输入的结构进行分析来定义的，而是通过自然数（零或后继）的定义案例来定义的。我们将在下面回到这一点（[<lz-map2-def>](#%28elem._lz-map2-def%29)）。现在我们有了这个，我们可以用它来进行测试。请注意，通常我们使用我们的数据来测试我们的函数；在这里，我们使用这个函数来测试我们的数据：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The notation (_ + 1) defines a Pyret function of one argument that adds 1 to
    the given argument.Let’s define one more function: the equivalent of map over
    streams. For reasons that will soon become obvious, we’ll define a version that
    takes two lists and applies the first argument to them pointwise:<lz-map2-def>
    ::='
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 符号（_ + 1）定义了一个参数的 Pyret 函数，该函数将给定参数加 1。让我们再定义一个函数：对流进行映射的等价函数。出于很快就会变得明显的原因，我们将定义一个接受两个列表并逐点应用第一个参数的版本：<lz-map2-def>
    ::=
- en: '|   fun lz-map2<A, B, C>( |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '|   fun lz-map2<A, B, C>( |'
- en: '|       f :: (A, B -> C), |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '|       f :: (A, B -> C), |'
- en: '|       s1 :: Stream<A>, |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '|       s1 :: Stream<A>, |'
- en: '|       s2 :: Stream<B>): |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '|       s2 :: Stream<B>): |'
- en: '|     lz-link( |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '|     lz-link( |'
- en: '|       f(lz-first(s1), lz-first(s2)), |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '|       f(lz-first(s1), lz-first(s2)), |'
- en: '|       {(): lz-map2(f, lz-rest(s1), lz-rest(s2))}) |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '|       {(): lz-map2(f, lz-rest(s1), lz-rest(s2))}) |'
- en: '|   end |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '|   end |'
- en: 'Now we can see our earlier remark about the structure of the function driven
    home especially clearly. Whereas a traditional map over lists would have two cases,
    here we have only one case because the data definition ([<stream-type-def>](#%28elem._stream-type-def%29))
    has only one case! What is the consequence of this? In a traditional map, one
    case looks like the above, but the other case corresponds to the empty input,
    for which it produces the same output. Here, because the stream never terminates,
    mapping over it doesn’t either, and the structure of the function reflects this.This
    raises a much subtler problem: if the function’s body doesn’t have base- and inductive-cases,
    how can we perform an inductive proof over it? The short answer is we can’t: we
    must instead use [☛ coinduction](glossary.html#%28elem._glossary-coinduction%29).Why
    did I define lz-map2 instead of lz-map? Because it enables us to write the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们早期关于函数结构的评论特别清晰。而传统的列表映射会有两种情况，这里只有一种情况，因为数据定义（[<stream-type-def>](#%28elem._stream-type-def%29)）只有一种情况！这有什么后果？在传统的映射中，一种情况看起来像上面那样，但另一种情况对应于空输入，对于这种情况，它产生相同的输出。在这里，因为流永远不会终止，对它进行映射也不会终止，函数的结构反映了这一点。这引出了一个更微妙的问题：如果函数的主体没有基础和归纳案例，我们如何执行归纳证明呢？简短的答案是我们不能：我们必须使用[☛
    coinduction](glossary.html#%28elem._glossary-coinduction%29)。为什么我定义lz-map2而不是lz-map？因为它使我们能够编写以下内容：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: from which, of course, we can extract as many Fibonacci numbers as we want!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以提取出我们想要的任意多个斐波那契数！
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Exercise
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Define the equivalent of map, filter, and fold for streams.
  id: totrans-111
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为流定义与映射、过滤器和折叠相当的等价物。
- en: Streams and, more generally, infinite data structures that unfold on demand
    are extremely valuable in programming. Consider, for instance, the possible moves
    in a game. In some games, this can be infinite; even if it is finite, for interesting
    games the combinatorics mean that the tree is too large to feasibly store in memory.
    Therefore, the programmer of the computer’s intelligence must unfold the game
    tree on demand. Programming it by using the encoding we have described above means
    the program describes the entire tree, lazily, and the tree unfolds automatically
    on demand, relieving the programmer of the burden of implementing such a strategy.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 流以及更一般地说，按需展开的无限数据结构在编程中非常有价值。例如考虑一场比赛中可能的走法。在某些游戏中，这可能是无限的；即使它是有限的，对于有趣的游戏，组合学意味着树太大而无法在内存中存储。因此，计算机智能的程序员必须按需展开游戏树。通过使用我们上面描述的编码来编写程序，意味着程序按需描述整个树，并且树会自动按需展开，从而解除了程序员实现这种策略的负担。
- en: In some languages, such as Haskell, lazy evaluation is built in by default.
    In such a language, there is no need to use thunks. However, lazy evaluation places
    other burdens on the language [REF].
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些语言中，如Haskell，惰性求值默认内置。在这样的语言中，不需要使用惰性。然而，惰性求值会给语言带来其他负担[REF]。
- en: '13.4Combining Forces: Streams of Derivatives'
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.4合力：导数流
- en: When we defined d-dx, we set epsilon to an arbitrary, high value. We could instead
    think of epsilon as itself a stream that produces successively finer values; then,
    for instance, when the difference in the value of the derivative becomes small
    enough, we can decide we have a sufficient approximation to the derivative.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们定义d-dx时，我们将epsilon设置为一个任意的高值。我们可以将epsilon看作是一个产生逐渐细化的值的流；然后，例如，当导数值的差异变得足够小时，我们可以决定我们对导数有足够的近似。
- en: The first step is, therefore, to make epsilon some kind of parameter rather
    than a global constant. That leaves open what kind of parameter it should be (number
    or stream?) as well as when it should be supplied.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，第一步是将epsilon变成某种参数，而不是一个全局常量。这留下了应该是什么类型的参数（数字还是流？）以及何时提供它的问题。
- en: 'It makes most sense to consume this parameter after we have decided what function
    we want to differentiate and at what value we want its derivative; after all,
    the stream of epsilon values may depend on both. Thus, we get:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们决定要对什么函数进行微分以及我们想要其导数的值之后，消耗这个参数才是最合理的；毕竟，epsilon值流可能取决于两者。因此，我们得到：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'with which we can return to our square example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以回到我们的正方形示例：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Note that at this point we have simply redefined d-dx without any reference
    to streams: we have merely made a constant into a parameter.Now let’s define the
    stream of negative powers of ten:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此时我们只是重新定义了d-dx，没有任何与流相关的引用：我们只是将一个常量变成了一个参数。现在让我们定义十的负幂流：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: so that
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以便
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'For concreteness, let’s pick an abscissa at which to compute the numeric derivative
    of square—<wbr>say 10:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了具体起见，让我们选择一个横坐标来计算平方的数值导数—比如说10：
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Recall, from the types, that this is now a function of type (Number -> Number):
    given a value for epsilon, it computes the derivative using that value. We know,
    analytically, that the value of this derivative should be 20. We can now (lazily)
    map tenths to provide increasingly better approximations for epsilon and see what
    happens:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从类型中回想起，现在这是一个类型为(Number -> Number)的函数：给定一个epsilon的值，它使用该值计算导数。我们知道，从分析上来看，这个导数的值应该是20。我们现在可以（懒惰地）映射十分之一，以提供越来越好的epsilon近似值，并看看会发生什么：
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Sure enough, the values we obtain are 20.1, 20.01, 20.001, and so on: progressively
    better numerical approximations to 20.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，我们得到的值是20.1、20.01、20.001等等：逐渐更好的对20的数值近似。
- en: Exercise
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Extend the above program to take a tolerance, and draw as many values from the
    epsilon stream as necessary until the difference between successive approximations
    of the derivative fall within this tolerance.
  id: totrans-132
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将上述程序扩展为接受一个容差，并绘制出从epsilon流中提取的值，直到连续近似值之间的差值落在此容差范围内为止。
