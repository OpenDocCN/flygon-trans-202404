- en: Dynamic Storage Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态存储管理
- en: Lecture Notes for CS 140
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CS 140的讲座笔记
- en: Spring 2014
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年春季
- en: John Ousterhout
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰·奥斯特豪特
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    none.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本主题的阅读材料来自*操作系统：原理与实践*：无。
- en: Static memory allocation is simple and convenient, but it's not sufficient for
    everything.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态内存分配简单方便，但并不适用于所有情况。
- en: 'Two basic operations in dynamic storage management:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态存储管理中的两个基本操作：
- en: Allocate a given number of bytes
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配给定字节数
- en: Free a previously allocated block
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 释放先前分配的块
- en: 'Two general approaches to dynamic storage allocation:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态存储分配的两种一般方法：
- en: 'Stack allocation (hierarchical): restricted, but simple and efficient.'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆栈分配（分层）：受限制，但简单高效。
- en: 'Heap allocation: more general, but more difficult to implement, less efficient.'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆分配：更通用，但实现更困难，效率较低。
- en: Stack Allocation
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆栈分配
- en: 'A stack can be used when memory allocation and freeing are partially predictable:
    memory is freed in opposite order from allocation.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当内存分配和释放部分可预测时，可以使用堆栈：内存释放的顺序与分配相反。
- en: 'Example: procedure call. X calls Y calls Y again.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例子：过程调用。X调用Y再次调用Y。
- en: 'Stacks are also useful for lots of other things: tree traversal, expression
    evaluation, top-down recursive descent parsers, etc.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆栈还可用于许多其他用途：树遍历，表达式求值，自顶向下递归下降解析器等。
- en: A stack-based organization keeps all the free space together in one place.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于堆栈的组织将所有空闲空间集中在一个地方。
- en: Heap Allocation
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆分配
- en: Heap allocation must be used when allocation and release are unpredictable
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当分配和释放不可预测时必须使用堆分配
- en: Memory consists of allocated areas and free areas (or holes). Inevitably end
    up with lots of holes.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存由已分配区域和空闲区域（或空洞）组成。最终会有许多空洞。
- en: 'Goal: reuse the space in holes to keep the number of holes small, keep their
    size large.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标：重复使用空洞中的空间，使空洞数量少，大小大。
- en: '*Fragmentation*: inefficient use of memory because of lots of small holes.
    Stack allocation is perfect: all free space is in one large hole.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*碎片化*：由于许多小空洞而导致内存使用效率低下。堆栈分配是完美的：所有空闲空间都在一个大空洞中。'
- en: 'Heap allocators must keep track of the storage that is not in use: *free list*.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆分配器必须跟踪未使用的存储：*空闲列表*。
- en: '*Best fit*: keep linked list of free blocks, search the whole list on each
    allocation, choose block that comes closest to matching the needs of the allocation,
    save the excess for later. During release operations, merge adjacent free blocks.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*最佳适配*：保持空闲块的链接列表，在每次分配时搜索整个列表，选择最接近满足分配需求的块，保存多余部分以备后用。在释放操作期间，合并相邻的空闲块。'
- en: '*First fit*: just scan list for the first hole that is large enough. Free excess.
    Also merge on releases. Most first fit implementations are rotating first fit.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*首次适配*：只需扫描列表以找到足够大的第一个空洞。释放多余部分。释放时还要合并。大多数首次适配实现都是旋转首次适配。'
- en: 'Problem: over time, holes tend to fragment, approaching the size of the smallest
    objects allocated'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题：随着时间的推移，空洞往往会碎片化，接近最小分配对象的大小
- en: '*Bit map*: alternate representation of the free list, useful if storage comes
    in fixed-size chunks (e.g. disk blocks).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*位图*：自由列表的替代表示，如果存储以固定大小的块（例如磁盘块）出现，则很有用。'
- en: Keep a large array of bits, one for each chunk.
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持大数组位，每个块一个位。
- en: If bit is 0 it means chunk is in use, if bit is 1 it means chunk is free.
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果位为0，则表示块正在使用中，如果位为1，则表示块是空闲的。
- en: '*Pools*: keep a separate linked list for each popular size.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*池*：为每个常用大小保留单独的链接列表。'
- en: Allocation is fast, no fragmentation.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配快速，无碎片化。
- en: What's wrong with this?
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这有什么问题吗？
- en: Storage Reclamation
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储回收
- en: How do we know when dynamically-allocated memory can be freed?
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何知道何时可以释放动态分配的内存？
- en: Easy when a chunk is only used in one place.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个块只在一个地方使用时很容易。
- en: 'Reclamation is hard when information is shared: it can''t be recycled until
    all of the users are finished.'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当信息被共享时，回收变得困难：直到所有用户完成后才能回收。
- en: Usage is indicated by the presence of *pointers* to the data. Without a pointer,
    can't access (can't find it).
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过存在指向数据的*指针*来指示使用。没有指针，无法访问（找不到）。
- en: 'Two problems in reclamation:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回收中的两个问题：
- en: 'Dangling pointers: better not recycle storage while it''s still being used.'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 悬空指针：最好不要在仍在使用时回收存储。
- en: 'Memory leaks: storage gets "lost" because no one freed it even though it can''t
    ever be used again.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存泄漏：存储“丢失”，因为没有人释放它，即使它再也不能被使用。
- en: '*Reference counts*: keep count of the number of outstanding pointers to each
    chunk of memory. When this becomes zero, free the memory. Example: Smalltalk,
    file descriptors in Unix.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*引用计数*：记录每个内存块的未解引用指针数量。当数量为零时，释放内存。例如：Smalltalk，Unix中的文件描述符。'
- en: '*Garbage collection*: storage isn''t freed explicitly (using free operation),
    but rather implicitly: just delete pointers.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*垃圾回收*：存储空间不是显式释放（使用free操作），而是隐式释放：只需删除指针。'
- en: When the system needs storage, it searches through all of the pointers (must
    be able to find them all!) and collects things that aren't used.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当系统需要存储空间时，它会搜索所有指针（必须能够找到它们所有！）并收集未使用的内容。
- en: If structures are circular then this is the only way to reclaim space.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果结构是循环的，那么这是回收空间的唯一方法。
- en: Garbage collectors typically *compact* memory, moving objects to coalesce all
    free space.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾收集器通常会*压缩*内存，将对象移动以合并所有空闲空间。
- en: 'One way to implement garbage collection: *mark and copy*:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现垃圾回收的一种方法：*标记和复制*：
- en: Must be able to find all objects.
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须能够找到所有对象。
- en: Must be able to find all pointers to objects.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须能够找到所有指向对象的指针。
- en: 'Pass 1: mark. Go through all statically-allocated and procedure-local variables,
    looking for pointers (*roots*). Mark each object pointed to, and recursively mark
    all objects it points to. The compiler has to cooperate by saving information
    about where the pointers are within structures.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一步：标记。遍历所有静态分配和过程局部变量，寻找指针（*根*）。标记指向的每个对象，并递归标记它指向的所有对象。编译器必须保存关于结构中指针位置的信息以便合作。
- en: 'Pass 2: copy and compact. Go through all objects, copy live Objects into contiguous
    memory; then free any remaining space.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二步：复制和压缩。遍历所有对象，将活动对象复制到连续内存中；然后释放任何剩余空间。
- en: 'Garbage collection is often expensive:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾回收通常很昂贵：
- en: 10-20% of all CPU time in systems that use it.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用垃圾回收的系统中，占用10-20%的CPU时间。
- en: 'Uses memory inefficiently: 2-5x overallocation.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存使用效率低：过度分配2-5倍。
