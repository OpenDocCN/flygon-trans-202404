- en: ESLintでTypeScriptのコーディング規約チェックを自動化しよう
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ESLint自动化检查TypeScript的编码规范
- en: 原文：[https://typescriptbook.jp/tutorials/eslint](https://typescriptbook.jp/tutorials/eslint)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/tutorials/eslint](https://typescriptbook.jp/tutorials/eslint)
- en: 本章では、<ruby>ESLint<rt>イーエスリント</rt></ruby>を使って、TypeScriptをチェックするためのノウハウをチュートリアル形式で学びます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将以教程形式学习如何使用<ruby>ESLint<rt>イーエスリント</rt></ruby>检查TypeScript。
- en: 本章で学べること[​](#本章で学べること "本章で学べること への直接リンク")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本章中可以学到的内容[​](#本章で学べること "本章で学べること への直接リンク")
- en: 本章では次のことを学んでいただきます。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教您以下内容。
- en: コーディング規約の必要性とコーディング規約の問題点
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码规范的必要性和问题
- en: ESLintでJavaScriptやTypeScriptをチェックする方法
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ESLint检查JavaScript和TypeScript的方法
- en: ESLintのルールの設定のしかた
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置ESLint规则的方法
- en: Airbnbのコーディング規約をESLintで活用する術
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用ESLint应用Airbnb的编码规范
- en: エラーを解消する方法
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决错误的方法
- en: チェックを部分的に無効化する方法
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何部分禁用检查
- en: VS CodeやJetBrains IDEとESLintを統合する方法
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何集成VS Code和JetBrains IDE与ESLint
- en: チュートリアルをやり終えると、ご自身のプロジェクトにESLintを導入できるようになったりと、実務で役立つ基本的なスキルが身につくはずです。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 完成教程后，您将掌握在实际工作中有用的基本技能，如在自己的项目中引入ESLint。
- en: 本章の流れと読み進め方[​](#本章の流れと読み進め方 "本章の流れと読み進め方 への直接リンク")
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本章的流程和阅读方式[​](#本章の流れと読み進め方 "本章の流れと読み進め方 への直接リンク")
- en: 本章は次の3部構成です。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为以下3部分。
- en: '[背景知識](#%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AD%98)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[背景知識](#%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AD%98)'
- en: '[ESLintでJavaScriptをリントしよう](#eslint%E3%81%A7javascript%E3%82%92%E3%83%AA%E3%83%B3%E3%83%88%E3%81%97%E3%82%88%E3%81%86)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ESLintでJavaScriptをリントしよう](#eslintでjavascriptをリントしよう)'
- en: '[ESLintでTypeScriptをリントしよう](#eslint%E3%81%A7typescript%E3%82%92%E3%83%AA%E3%83%B3%E3%83%88%E3%81%97%E3%82%88%E3%81%86)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ESLintでTypeScriptをリントしよう](#eslintでtypescriptをリントしよう)'
- en: 本章の前半は座学です。「コーディング規約」や「リンター」が何か知らない方向けに、その背景知識を解説します([背景知識](#%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AD%98))。すでにコーディング規約やリンターが分かっている方、すぐに手を動かしたい方は、ここは読み飛ばしても構いません。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的前半部分是理论学习。针对不了解“编码规范”或“代码检查工具”的人，将解释这些背景知识([背景知識](#%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AD%98))。如果您已经了解编码规范或代码检查工具，或者想立即动手的人，可以跳过这部分。
- en: 本章の後半はチュートリアルです。本章のゴールは、TypeScriptをESLintでチェックできるようになることです。しかしながら、ESLintでTypeScriptを扱うのは発展的な用法です。そこで、チュートリアルの流れとしては、まず基礎編として、JavaScriptをESLintで扱う方法を学びます([ESLintでJavaScriptをリントしよう](#eslint%E3%81%A7javascript%E3%82%92%E3%83%AA%E3%83%B3%E3%83%88%E3%81%97%E3%82%88%E3%81%86))。その後、TypeScriptをESLintを扱う方法を学んでいただきます([ESLintでTypeScriptをリントしよう](#eslint%E3%81%A7typescript%E3%82%92%E3%83%AA%E3%83%B3%E3%83%88%E3%81%97%E3%82%88%E3%81%86))。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的后半部分是教程。本章的目标是让您能够使用ESLint检查TypeScript。然而，在ESLint中处理TypeScript是一种高级用法。因此，教程的流程是，首先作为基础部分，学习如何在ESLint中处理JavaScript([ESLintでJavaScriptをリントしよう](#eslintでjavascriptをリントしよう))。然后，学习如何在ESLint中处理TypeScript([ESLintでTypeScriptをリントしよう](#eslintでtypescriptをリントしよう))。
- en: 章末にはおまけとして次のチュートリアルも用意してあります。関心と余力がある方はこちらもご覧ください。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在章节末尾，还提供了其他教程作为额外内容。如果您感兴趣并有余力，也可以查看这些内容。
- en: '[VS CodeとESLintを統合しよう](#vs-code%E3%81%A8eslint%E3%82%92%E7%B5%B1%E5%90%88%E3%81%97%E3%82%88%E3%81%86)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[集成VS Code和ESLint](#vs-codeとeslintを統合しよう)'
- en: '[JetBrains IDEとESLintを統合しよう](#jetbrains-ide%E3%81%A8eslint%E3%82%92%E7%B5%B1%E5%90%88%E3%81%97%E3%82%88%E3%81%86)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[集成JetBrains IDE和ESLint](#jetbrains-ideとeslintを統合しよう)'
- en: このチュートリアルに必要なもの[​](#このチュートリアルに必要なもの "このチュートリアルに必要なもの への直接リンク")
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本教程所需的内容[​](#このチュートリアルに必要なもの "このチュートリアルに必��なもの への直接リンク")
- en: このチュートリアルで必要なものは次のとおりです。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程所需的内容如下。
- en: Node.js v16以上
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js v16以上
- en: NPM v7系以上
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NPM v7系列以上
- en: Yarn v1系 (このチュートリアルはv1.22.18で動作確認しています)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yarn v1系列（本教程已在v1.22.18上进行了测试）
- en: Node.jsの導入については、[開発環境の準備](/tutorials/setup)をご覧ください。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Node.js的安装，请参阅[准备开发环境](/tutorials/setup)。
- en: パッケージ管理ツールとしてYarnを利用します。最初にインストールをしておきましょう。すでにインストール済みの方はここのステップはスキップして大丈夫です。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Yarn作为包管理工具。首先安装它。如果您已经安装了，请跳过这一步。
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 背景知識[​](#背景知識 "背景知識 への直接リンク")
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景知识[​](#背景知識 "背景知識 への直接リンク")
- en: TypeScriptの書き方はさまざま[​](#typescriptの書き方はさまざま "TypeScriptの書き方はさまざま への直接リンク")
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TypeScript的写法有多种[​](#typescriptの書き方はさまざま "TypeScriptの書き方はさまざま への直接リンク")
- en: TypeScriptに限らず、プログラミング言語には文法があります。文法を守って書かれたコードは、エラーなく実行やコンパイルができます。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅限于TypeScript，编程语言都有语法规则。遵循语法编写的代码可以无错误地执行或编译。
- en: プログラムは文法さえ守れば、誰が書いても一字一句同じコードになるかというと、そうではありません。たとえば、TypeScriptでは文末のセミコロンが省略できます。次の2行のコードの違いは、セミコロンの有無です。どちらも文法的に正しく、どちらを使うかは好みの問題です。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 只要程序遵循语法，无论谁写的代码都不会完全相同。例如，在TypeScript中，可以省略语句末尾的分号。下面两行代码的区别在于是否有分号。这两种写法都是语法正确的，使用哪种取决于个人喜好。
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 文字列はシングルクォート、ダブルクォート、バッククォートの3通りで書けます。シングルクォートとダブルクォートは機能上の違いがありません。バッククォートは[テンプレートリテラル](/reference/values-types-variables/string#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB)と言い、文字列リテラルとは仕様が異なります。しかし、次の例のような単純な文字列では、この3つは同じ意味になります。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串可以用单引号、双引号和反引号的三种方式编写。单引号和双引号在功能上没有区别。反引号称为[模板文字](/reference/values-types-variables/string#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB)，与字符串文字的规范不同。但是，在像下面这样简单的字符串中，这三种方式具有相同的含义。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: この例は、どれを使うか意見が割れるところです。本書独自の調査では、「原則的にどれをもっとも多く使うか？」という問いに対し、シングルクォートが55%ともっとも多く、次にダブルクォートが29%、バッククォートは16%という回答が得られました。(回答数232件)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子是一个有争议的问题。根据本书的独立调查，“基本上使用哪种引号最多？”这个问题的回答是，单引号占55%，其次是双引号占29%，反引号占16%。(共232个回答)
- en: '![](../Images/13a907c096b102715f387832f24c8a61.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/13a907c096b102715f387832f24c8a61.png)'
- en: 上でとりあげた例はほんの一例です。意味が同じで書き方が異なる例は、数多くあります。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 上述例子只是一个例子。有很多意义相同但写法不同的例子。
- en: 書き方の違いが問題になることも[​](#書き方の違いが問題になることも "書き方の違いが問題になることも への直接リンク")
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写法的差异也可能成为问题[​](#書き方の違いが問題になることも "書き方の違いが問題になることも への直接リンク")
- en: 書き方の違いが問題なることがあります。たとえば、プログラムを共同で開発する場合です。人によって書き方が異なると、その違いが気になったり驚いたりして、コードの本筋が頭に入ってこないことがあります。インデントの幅が統一されていないと、コードが読みにくくなることもあります。結果的に、**書き方に違いがあるとプログラムの保守性を損ねる**一因になります。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 书写方式的差异可能成为问题。例如，在共同开发程序的情况下。如果每个人的书写方式不同，可能会让人感到困惑或惊讶，导致无法理解代码的主要内容。如果缩进宽度不统一，代码可能会变得难以阅读。结果，**书写方式的差异会影响程序的可维护性**。
- en: コーディング規約で書き方を統一[​](#コーディング規約で書き方を統一 "コーディング規約で書き方を統一 への直接リンク")
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过编码规范统一书写方式[​](#通过编码规范统一书写方式 "直达通过编码规范统一书写方式")
- en: 理想は、誰が書いても同じコードになることです。そのためにはどうしたらよいでしょうか。解決策のひとつは、書き方のルールを決めることです。コードの**書き方の取り決めは「コーディング規約(coding
    standards)」**と呼ばれます。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，无论谁写，代码都应该相同。为了实现这一目标，有什么方法呢？其中之一是制定书写规则。**书写规则被称为“编码标准(coding standards)”**。
- en: コーディング規約では、たとえば、次のようなことを決めます。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在编码规范中，例如，可以规定以下内容。
- en: 変数名はキャメルケースにしましょう。
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名应该使用驼峰命名法。
- en: '`function`の中カッコは関数名と同じ行に書きましょう。(次の行に置いてはなりません)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function`的括号应该与函数名写在同一行。(不应该放在下一行)'
- en: '`console.log`は消しましょう。'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该删除`console.log`。
- en: if文の条件式で変数代入してはいけません。たとえば`if (data = getData())`はだめ。
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在if语句的条件中不要进行变量赋值。例如`if (data = getData())`是不行的。
- en: このようなルールを取りまとめて規約を作るのですが、実用的な規約に仕上げるにはかなりの労力を要します。実務では、公開されている規約を借りてくるほうが現実的です。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以制定这样的规则来制定规范，但要将其制定为实用的规范需要相当大的努力。在实际工作中，借用已公开的规范更为现实。
- en: 公開されている規約には主に次のものがあります。これらは実際に多くのプロジェクトで利用されています。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 公开的规范主要包括以下内容。这些规范实际上在许多项目中被广泛使用。
- en: '[Google JavaScript Style Guide](https://google.github.io/styleguide/jsguide.html)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Google JavaScript风格指南](https://google.github.io/styleguide/jsguide.html)'
- en: '[JavaScript Standard Style](https://standardjs.com/rules.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JavaScript标准风格](https://standardjs.com/rules.html)'
- en: '[Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Airbnb JavaScript风格指南](https://github.com/airbnb/javascript)'
- en: コーディング規約をチームのみんなで守れば、書き方を統一しやすくなります。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果团队中的每个人都遵守编码规范，就更容易统一书写方式。
- en: コーディング規約の問題点[​](#コーディング規約の問題点 "コーディング規約の問題点 への直接リンク")
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编码规范的问题[​](#编码规范的问题 "直达编码规范的问题")
- en: コーディング規約にも問題点があります。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 编码规范也存在问题。
- en: 運用の手間は少なくない[​](#運用の手間は少なくない "運用の手間は少なくない への直接リンク")
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运用的手续并不简单[​](#运用的手续并不简单 "直达运用的手续并不简单")
- en: 開発者ひとりひとりが規約を守れば、コーディング規約は機能します。しかし、ヒューマンエラーは起きるものです。規約を知った上で破る場合もありますが、多いのは知らずに破ってしまうことや、間違えてしまうことです。もしも、規約が守られなければ、規約は形式上のものになってしまいます。そうなると、書き方を統一するという目標は達成できなくなってしまいます。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 只要每个开发者遵守规范，编码规范就会起作用。但是，人为错误是难以避免的。有时候会违反规范，但更多的是不知不觉中违反或者出错。如果规范没有被遵守，规范就会变成形式上的东西。这样一来，统一书写的目标就无法实现。
- en: ヒューマンエラーを防ぐには、コードが**規約に準拠しているかを日々点検しなければなりません**。しかし、これには多くの労力がかかります。もっと重要な仕事がある中で、点検を行うのは無理な場合もあるかもしれません。規約を正しく運用するには、多くの手間がかかるのです。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要防止人为错误，必须每天检查代码是否**符合规范**。但是，这需要大量的工作。在有更重要的工作的情况下，可能无法进行检查。要正确运用规范，需要付出很多努力。
- en: コミュニケーション上の心理的な負担が増す[​](#コミュニケーション上の心理的な負担が増す "コミュニケーション上の心理的な負担が増す への直接リンク")
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 增加了沟通上的心理负担[​](#增加了沟通上的心理负担 "直达增加了沟通上的心理负担")
- en: コーディング規約は、何が正しく、何が間違いかを定めます。すると、明らかに誤りと判断できるコードが出てきます。他者が書いたコードの誤りを指摘する場面も出てきます。**人の仕事の誤りを指摘するのは難しいものです**。想像以上に心理的な負担になります。指摘する側は相手の心象を悪くしないよう、伝え方に苦慮します。指摘される側も、前向きに受け取れない場合もあります。相手との対人関係によっては、指摘することが遠慮される場合もあります。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 编码规范确定了什么是正确的，什么是错误的。因此，明显的错误代码会出现。也会出现指出他人编写的错误代码的情况。**指出他人工作中的错误是困难的**。这比想象中的心理负担要大。指出方会努力避免让对方感到不快。被指出方也可能无法积极接受。根据与对方的人际关系，有时可能会避免指出。
- en: コーディング規約の自動化[​](#コーディング規約の自動化 "コーディング規約の自動化 への直接リンク")
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编码规范的自动化[​](#コーディング规范的自动化 "直达编码规范的自动化")
- en: 書き方を統一するには、コーディング規約は不可欠です。しかし、運用の手間や心理的な課題もあります。これを解決する手助けとなるのがESLintです。**ESLintは、JavaScriptやTypeScriptのコードがコーディング規約に準拠しているかをチェックするツール**です。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要统一书写方式，编码规范是必不可少的。但是，运用的手续和心理问题也是存在的。解决这些问题的工具是ESLint。**ESLint是一个检查JavaScript和TypeScript代码是否符合编码规范的工具**。
- en: ESLintは、コマンドひとつでチェックが行なえます。チェックは数秒で完了し、すぐに結果がわかります。そのため、点検の手間がほぼなくなります。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint可以通过一个命令进行检查。检查只需几秒钟，结果立即可见。因此，检查的工作几乎没有任何麻烦。
- en: 加えて、自動修正機能もあります。コードによっては、ESLintが規約に準じたコードに直せる場合もあります。この機能を利用できる場合は、規約違反箇所を修正する手間もなくせます。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有自动修正功能。有些代码可能会被ESLint修正为符合规范的代码。如果可以使用此功能，则可以省去修改违规处的麻烦。
- en: 不思議なもので、同じ指摘でも人に言われるより、機械に指摘されたほうが気が楽なものです。ESLintでは機械的に問題を指摘してくれるため、コミュニケーション上の心理的負担も軽減できます。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 奇怪的是，即使是相同的指出，被机器指出比被人指出更轻松。由于ESLint可以机械地指出问题，因此可以减轻沟通上的心理负担。
- en: ESLintを導入すると、開発者は規約の運用や心理的ストレスから開放され、**開発などのより重要な仕事に集中できるようになります**。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 引入ESLint后，开发人员可以摆脱规范的运用和心理压力，**更专注于开发等更重要的工作**。
- en: 学びをシェアする
  id: totrans-72
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 学习分享
- en: 📝TypeScriptは同じ意味処理でも異なる書き方が可能
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 📝TypeScript即使在相同的意义处理下也可以有不同的书写方式
- en: 💥チーム開発では書き方の違いが問題になることも…
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 💥在团队开发中，书写方式的差异可能成为问题…
- en: 🤝書き方統一のためにコーディング規約を導入しよう
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 🤝为了统一书写方式，让我们引入编码规范
- en: 😵でも、規約には運用の手間や心理的な課題もある
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 😵但是，规范也存在运用的手续和心理问题
- en: ✅この課題はESLintで解決できる！
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ✅这个问题可以通过ESLint解决！
- en: 『サバイバルTypeScript』より
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 『生存TypeScript』摘录
- en: '[この内容をツイートする](https://twitter.com/intent/tweet?text=%F0%9F%93%9DTypeScript%E3%81%AF%E5%90%8C%E3%81%98%E6%84%8F%E5%91%B3%E5%87%A6%E7%90%86%E3%81%A7%E3%82%82%E7%95%B0%E3%81%AA%E3%82%8B%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%8C%E5%8F%AF%E8%83%BD%0A%F0%9F%92%A5%E3%83%81%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA%E3%81%A7%E3%81%AF%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%AE%E9%81%95%E3%81%84%E3%81%8C%E5%95%8F%E9%A1%8C%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%93%E3%81%A8%E3%82%82%E2%80%A6%0A%F0%9F%A4%9D%E6%9B%B8%E3%81%8D%E6%96%B9%E7%B5%B1%E4%B8%80%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%82%88%E3%81%86%0A%F0%9F%98%B5%E3%81%A7%E3%82%82%E3%80%81%E8%A6%8F%E7%B4%84%E3%81%AB%E3%81%AF%E9%81%8B%E7%94%A8%E3%81%AE%E6%89%8B%E9%96%93%E3%82%84%E5%BF%83%E7%90%86%E7%9A%84%E3%81%AA%E8%AA%B2%E9%A1%8C%E3%82%82%E3%81%82%E3%82%8B%0A%E2%9C%85%E3%81%93%E3%81%AE%E8%AA%B2%E9%A1%8C%E3%81%AFESLint%E3%81%A7%E8%A7%A3%E6%B1%BA%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%81%0A%0A%E3%80%8E%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABTypeScript%E3%80%8F%E3%82%88%E3%82%8A)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[この内容をツイートする](https://twitter.com/intent/tweet?text=%F0%9F%93%9DTypeScript%E3%81%AF%E5%90%8C%E3%81%98%E6%84%8F%E5%91%B3%E5%87%A6%E7%90%86%E3%81%A7%E3%82%82%E7%95%B0%E3%81%AA%E3%82%8B%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%8C%E5%8F%AF%E8%83%BD%0A%F0%9F%92%A5%E3%83%81%E3%83%A0%E9%96%8B%E7%99%BA%E3%81%A7%E3%81%AF%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%AE%E9%81%95%E3%81%84%E3%81%8C%E5%95%8F%E9%A1%8C%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%93%E3%81%A8%E3%82%82%E2%80%A6%0A%F0%9F%A4%9D%E6%9B%B8%E3%81%8D%E6%96%B9%E7%B5%B1%E4%B8%80%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%82%88%E3%81%86%0A%F0%9F%98%B5%E3%81%A7%E3%82%82%E3%80%81%E8%A6%8F%E7%B4%84%E3%81%AB%E3%81%AF%E9%81%8B%E7%94%A8%E3%81%AE%E6%89%8B%E9%96%93%E3%82%84%E5%BF%83%E7%90%86%E7%9A%84%E3%81%AA%E8%AA%B2%E9%A1%8C%E3%82%82%E3%81%82%E3%82%8B%0A%E2%9C%85%E3%81%93%E3%81%AE%E8%AA%B2%E9%A1%8C%E3%81%AFESLint%E3%81%A7%E8%A7%A3%E6%B1%BA%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%81%0A%0A%E3%80%8E%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABTypeScript%E3%80%8F%E3%82%88%E3%82%8A)'
- en: リンターとは[​](#リンターとは "リンターとは への直接リンク")
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: リンターとは[​](#リンターとは "リンターとは への直接リンク")
- en: ESLintは一般的に「リンター(linter)」というジャンルのツールです。リンターは、プログラムを**静的に解析し、バグや問題点を発見するツール**を言います。リンターを使って、問題点を解析することを「リントする(lint)」と言います。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: ESLintは一般的に「リンター(linter)」というジャンルのツールです。リンターは、プログラムを**静的に解析し、バグや問題点を発見するツール**を言います。リンターを使って、問題点を解析することを「リントする(lint)」と言います。
- en: リント(lint)の由来は紡績です。羊毛や綿花から、繊維をつむぐ際に不要になるホコリのような糸くずをリントと呼びます。紡績ではリントを取り除く工程があり、これにちなんでプログラミングでもリントという名前が使われだしたと言われています。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: リント(lint)の由来は紡績です。羊毛や綿花から、繊維をつむぐ際に不要になるホコリのような糸くずをリントと呼びます。紡績ではリントを取り除く工程があり、これにちなんでプログラミングでもリントという名前が使われだしたと言われています。
- en: コンパイラとリンターの違い[​](#コンパイラとリンターの違い "コンパイラとリンターの違い への直接リンク")
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: コンパイラとリンターの違い[​](#コンパイラとリンターの違い "コンパイラとリンターの違い への直接リンク")
- en: コンパイラの本質は、ある言語から別の言語に変換することです。TypeScriptコンパイラの場合は、TypeScriptからJavaScriptへの変換です。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: コンパイラの本質は、ある言語から別の言語に変換することです。TypeScriptコンパイラの場合は、TypeScriptからJavaScriptへの変換です。
- en: リンターの本質は、プログラムの問題点を指摘することです。言語から言語への変換は行いません。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: リンターの本質は、プログラムの問題点を指摘することです。言語から言語への変換は行いません。
- en: 実際は、TypeScriptコンパイラもプログラムの問題点を報告します。たとえば、コンパイラオプション[`noUnusedLocals`](/reference/tsconfig/nounusedlocals)を有効にすると、未使用の変数をチェックできます。ESLintにもこれと同等のチェックがあります。こうした点はリンターの機能と重複する部分です。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 実際は、TypeScriptコンパイラもプログラムの問題点を報告します。たとえば、コンパイラオプション[`noUnusedLocals`](/reference/tsconfig/nounusedlocals)を有効にすると、未使用の変数をチェックできます。ESLintにもこれと同等のチェックがあります。こうした点はリンターの機能と重複する部分です。
- en: 類似のチェック機能があるものの、両者は得意分野が異なります。TypeScriptコンパイラは型のチェックが充実しています。型の側面から問題点を発見するのが得意です。一方、ESLintはインデントや命名規則などのコーディングスタイルや、どのようなコードを書くべきか避けるべきかの意思決定、セキュリティやパフォーマンスに関する分野でのチェックが充実しています。どちらも相互補完的な関係です。したがって、コンパイラとリンターの両方を導入すると、より幅広いチェックが行えるようになります。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 類似のチェック機能があるものの、両者は得意分野が異なります。TypeScriptコンパイラは型のチェックが充実しています。型の側面から問題点を発見するのが得意です。一方、ESLintはインデントや命名規則などのコーディングスタイルや、どのようなコードを書くべきか避けるべきかの意思決定、セキュリティやパフォーマンスに関する分野でのチェックが充実しています。どちらも相互補完的な関係です。したがって、コンパイラとリンターの両方を導入すると、より幅広いチェックが行えるようになります。
- en: TypeScriptコンパイラとESLintの得意分野の比較
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScriptコンパイラとESLintの得意分野の比較
- en: '|  | TypeScriptコンパイラ | ESLint |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '|  | TypeScriptコンパイラ | ESLint |'
- en: '| --- | :-: | :-: |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | :-: | :-: |'
- en: '| 言語から言語への変換 | ○ |  |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 言語から言語への変換 | ○ |  |'
- en: '| 型のチェック | ○ |  |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 型のチェック | ○ |  |'
- en: '| 構文チェック | ○ | ○ |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 構文チェック | ○ | ○ |'
- en: '| コーディングスタイル |  | ○ |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| コーディングスタイル |  | ○ |'
- en: '| コードの意思決定 |  | ○ |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| コードの意思決定 |  | ○ |'
- en: '| セキュリティ |  | ○ |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| セキュリティ |  | ○ |'
- en: '| パフォーマンス |  | ○ |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| パフォーマンス |  | ○ |'
- en: 学びをシェアする
  id: totrans-98
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 学びをシェアする
- en: 🧵リンター：コードを静的解析し問題点を指摘するツール。ESLintはリンター。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 🧵リンター：コードを静的解析し問題点を指摘するツール。ESLintはリンター。
- en: 🔀コンパイラ：静的解析もするが、別言語への変換が主目的。tscはコンパイラ。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 🔀コンパイラ：静的解析もするが、別言語への変換が主目的。tscはコンパイラ。
- en: ⚖️tscとESLintの相違点
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ⚖️tscとESLintの相違点
- en: ・tsc：型のチェックが得意
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ・tsc：型のチェックが得意
- en: ・ESLint：コーディング規約のチェックが得意
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ・ESLint：コーディング規約のチェックが得意
- en: 『サバイバルTypeScript』より
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 『サバイバルTypeScript』より
- en: '[この内容をツイートする](https://twitter.com/intent/tweet?text=%F0%9F%A7%B5%E3%83%AA%E3%83%B3%E3%82%BF%E3%83%BC%EF%BC%9A%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90%E3%81%97%E5%95%8F%E9%A1%8C%E7%82%B9%E3%82%92%E6%8C%87%E6%91%98%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB%E3%80%82ESLint%E3%81%AF%E3%83%AA%E3%83%B3%E3%82%BF%E3%83%BC%E3%80%82%0A%F0%9F%94%80%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%EF%BC%9A%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90%E3%82%82%E3%81%99%E3%82%8B%E3%81%8C%E3%80%81%E5%88%A5%E8%A8%80%E8%AA%9E%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B%E3%81%8C%E4%B8%BB%E7%9B%AE%E7%9A%84%E3%80%82tsc%E3%81%AF%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E3%80%82%0A%0A%E2%9A%96%EF%B8%8Ftsc%E3%81%A8ESLint%E3%81%AE%E7%9B%B8%E9%81%95%E7%82%B9%0A%E3%83%BBtsc%EF%BC%9A%E5%9E%8B%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%8C%E5%BE%97%E6%84%8F%0A%E3%83%BBESLint%EF%BC%9A%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%8C%E5%BE%97%E6%84%8F%0A%0A%E3%80%8E%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABTypeScript%E3%80%8F%E3%82%88%E3%82%8A)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[この内容をツイートする](https://twitter.com/intent/tweet?text=%F0%9F%A7%B5%E3%83%AA%E3%83%B3%E3%82%BF%E3%83%BC%EF%BC%9A%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90%E3%81%97%E5%95%8F%E9%A1%8C%E7%82%B9%E3%82%92%E6%8C%87%E6%91%98%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB%E3%80%82ESLint%E3%81%AF%E3%83%AA%E3%83%B3%E3%82%BF%E3%83%BC%E3%80%82%0A%F0%9F%94%80%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%EF%BC%9A%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90%E3%82%82%E3%81%99%E3%82%8B%E3%81%8C%E3%80%81%E5%88%A5%E8%A8%80%E8%AA%9E%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B%E3%81%8C%E4%B8%BB%E7%9B%AE%E7%9A%84%E3%80%82tsc%E3%81%AF%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E3%80%82%0A%0A%E2%9A%96%EF%B8%8Ftsc%E3%81%A8ESLint%E3%81%AE%E7%9B%B8%E9%81%95%E7%82%B9%0A%E3%83%BBtsc%EF%BC%9A%E5%9E%8B%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%8C%E5%BE%97%E6%84%8F%0A%E3%83%BBESLint%EF%BC%9A%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%8C%E5%BE%97%E6%84%8F%0A%0A%E3%80%8E%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABTypeScript%E3%80%8F%E3%82%88%E3%82%8A)'
- en: ESLintでJavaScriptをリントしよう[​](#eslintでjavascriptをリントしよう "ESLintでJavaScriptをリントしよう
    への直接リンク")
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[ESLintでJavaScriptをリントしよう](#eslintでjavascriptをリントしよう "ESLintでJavaScriptをリントしよう
    への直接リンク")'
- en: ここからはESLintの導入方法や使い方をチュートリアル形式で説明していきます。ぜひお手元の環境で実際にトライしてみてください。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: ここからはESLintの導入方法や使い方をチュートリアル形式で説明していきます。ぜひお手元の環境で実際にトライしてみてください。
- en: プロジェクトを作成する[​](#プロジェクトを作成する "プロジェクトを作成する への直接リンク")
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[プロジェクトを作成する](#プロジェクトを作成する "プロジェクトを作成する への直接リンク")'
- en: まず、このチュートリアルに使うプロジェクトを作成します。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: まず、このチュートリアルに使うプロジェクトを作成します。
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: プロジェクトルートにpackage.jsonを作ってください。その内容は次のようにします。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: プロジェクトルートにpackage.jsonを作ってください。その内容は次のようにします。
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ESLintを導入する[​](#eslintを導入する "ESLintを導入する への直接リンク")
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[ESLintを導入する](#eslintを導入する "ESLintを導入する への直接リンク")'
- en: ESLintはYarnでインストールしましょう。ESLintは開発時だけ使うパッケージなので、`yarn add`コマンドには`-D`オプションをつけてインストールします。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ESLintはYarnでインストールしましょう。ESLintは開発時だけ使うパッケージなので、`yarn add`コマンドには`-D`オプションをつけてインストールします。
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 備考
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 備考
- en: Next.jsは最初からESLintが導入されています。実務でNext.jsプロジェクトでESLintを使う場合は、導入ステップは省略できます。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Next.jsは最初からESLintが導入されています。実務でNext.jsプロジェクトでESLintを使う場合は、導入ステップは省略できます。
- en: ESLintが正しくインストールされたか、バージョンを表示して確認してください。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ESLintが正しくインストールされたか、バージョンを表示して確認してください。
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: ちなみにこの`npx`コマンドは、Nodeモジュール(ライブラリ)の実行ファイルを起動するツールです。`npx eslint`を実行すると、`./node_modules/.bin/eslint`が実行されます。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: ちなみにこの`npx`コマンドは、Nodeモジュール(ライブラリ)の実行ファイルを起動するツールです。`npx eslint`を実行すると、`./node_modules/.bin/eslint`が実行されます。
- en: ESLintの設定ファイルを作る[​](#eslintの設定ファイルを作る "ESLintの設定ファイルを作る への直接リンク")
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[ESLintの設定ファイルを作る](#eslintの設定ファイルを作る "ESLintの設定ファイルを作る への直接リンク")'
- en: ESLintの設定ファイル`.eslintrc.js`をプロジェクトルートに作ってください。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: ESLintの設定ファイル`.eslintrc.js`をプロジェクトルートに作ってください。
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 設定ファイルの内容は次のようにします。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 設定ファイルの内容は次のようにします。
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: この設定内容は次で説明します。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: この設定内容は次で説明します。
- en: '`root`[​](#root "root への直接リンク")'
  id: totrans-135
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`root`[​](#root "root への直接リンク")'
- en: '`eslint`コマンドを実行したディレクトリを起点に、ディレクトリをさかのぼって設定ファイルを探す仕様がESLintにはあります。たとえば、ディレクトリ`/a/b/`でコマンドを実行した場合、ESLintは次の順で設定ファイルを探します。'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`eslint`コマンドを実行したディレクトリを起点に、ディレクトリをさかのぼって設定ファイルを探す仕様がESLintにはあります。たとえば、ディレクトリ`/a/b/`でコマンドを実行した場合、ESLintは次の順で設定ファイルを探します。'
- en: '`/a/b/.eslintrc.js`'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/a/b/.eslintrc.js`'
- en: '`/a/.eslintrc.js`'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/a/.eslintrc.js`'
- en: '`/.eslintrc.js`'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/.eslintrc.js`'
- en: この探索はルートディレクトリに達するまでさかのぼります。探索中に複数の設定ファイルが見つかった場合は、設定内容がマージされていきます。この仕様は便利な反面、プロジェクト外の設定ファイルまで見にいってしまう危険性もあります。設定ファイルの探索範囲をしぼるためにも、`root`に`true`を設定するのがお勧めです。これがある設定ファイルが見つかると、これ以上ディレクトリをさかのぼらなくなります。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: この探索はルートディレクトリに達するまでさかのぼります。探索中に複数の設定ファイルが見つかった場合は、設定内容がマージされていきます。この仕様は便利な反面、プロジェクト外の設定ファイルまで見にいってしまう危険性もあります。設定ファイルの探索範囲をしぼるためにも、`root`に`true`を設定するのがお勧めです。これがある設定ファイルが見つかると、これ以上ディレクトリをさかのぼらなくなります。
- en: '`env`[​](#env "env への直接リンク")'
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`env`[​](#env "env への直接リンク")'
- en: '`env`はチェック対象のJavaScript/TypeScriptコードがどの実行環境で使われるかをESLintに伝えるためのオプションです。これを設定すると、ESLintがグローバル変数を認識するようになります。たとえば、`browser:
    true`を設定すると、`window`や`alert`などのグローバル変数が認識されます。`es2021`を設定すると、ES2021までに導入されたグローバル変数が認識されます。他にも`node`などの指定ができます。指定できる実行環境の一覧は[公式ドキュメント](https://eslint.org/docs/user-guide/configuring/language-options#specifying-environments)をご覧ください。'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`env`はチェック対象のJavaScript/TypeScriptコードがどの実行環境で使われるかをESLintに伝えるためのオプションです。これを設定すると、ESLintがグローバル変数を認識するようになります。たとえば、`browser:
    true`を設定すると、`window`や`alert`などのグローバル変数が認識されます。`es2021`を設定すると、ES2021までに導入されたグローバル変数が認識されます。他にも`node`などの指定ができます。指定できる実行環境の一覧は[公式ドキュメント](https://eslint.org/docs/user-guide/configuring/language-options#specifying-environments)をご覧ください。'
- en: この設定は、ESLintの[no-undefルール](https://eslint.org/docs/rules/no-undef)に関係します。このルールは未定義の変数をチェックするルールです。グローバル変数は定義せずに利用できる変数です。ESLintはどのグローバル変数が定義済みかを知らないと、このルールを正しく適用できません。そのため、`env`オプションは正しく設定する必要があります。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: この設定は、ESLintの[no-undefルール](https://eslint.org/docs/rules/no-undef)に関係します。このルールは未定義の変数をチェックするルールです。グローバル変数は定義せずに利用できる変数です。ESLintはどのグローバル変数が定義済みかを知らないと、このルールを正しく適用できません。そのため、`env`オプションは正しく設定する必要があります。
- en: '`parserOptions`[​](#parseroptions "parseroptions への直接リンク")'
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`parserOptions`[​](#parseroptions "parseroptions への直接リンク")'
- en: '`ecmaVersion`[​](#ecmaversion "ecmaversion への直接リンク")'
  id: totrans-145
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '`parserOptions`はチェック対象のJavaScriptがどの構文を使っているかをESLintに伝えるためのオプションです。`ecmaVersion`は、どのバージョンのECMAScriptの構文を使うかを指定します。`"latest"`を設定すると、最新のECMAScriptの構文を使うという指定になります。デフォルトではECMAScript
    5になっています。これはかなり古いバージョンです。実務ではES5で開発することはまれなので、ここは必ず指定しましょう。なお、`env`オプションで`es2022`などECMAScriptのバージョンを指定している場合、`ecmaVersion`にも自動的に`es2022`が設定されます。どちらも同じバージョンを指定する場合は、`ecmaVersion`の指定は省略できます。'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '`sourceType`[​](#sourcetype "sourcetype への直接リンク")'
  id: totrans-147
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: JavaScriptにはスクリプトモードとモジュールモードがあります。`sourceType`はJavaScriptコードがどちらのモードで書かれるかを指定するオプションです。モジュールモードでは、`import`文や`export`文といった追加の構文がサポートされます。`sourceType`のデフォルト値は`"script"`(スクリプトモード)です。実務で開発する場合は、モジュールモードでJavaScript/TypeScriptを書くほうが普通なので、`sourceType`には`"module"`(モジュールモード)を指定しましょう。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: ESLintのルールを設定する[​](#eslintのルールを設定する "ESLintのルールを設定する への直接リンク")
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLintには「ルール(rule)」という概念があります。ルールはチェックの最小単位です。たとえば、ルールには次のようなものがあります。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '`no-console`: `console.log`を書いてはならない'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camelcase`: 変数名はキャメルケースにすること'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`semi`: 文末セミコロンは省略しない'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLintには200を超えるルールがあります。[全ルールのリストは公式ドキュメント](https://eslint.org/docs/rules/)にあります。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: ESLintでは、複数のルールを組み合わせてコーディング規約を組み立てていきます。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: ルールには、重大度(severity)という重み付けが設定できます。重大度は、`off`、`warn`と`error`の3種類です。`off`はルールを無効化し、チェックを行わなくする設定です。`warn`は発見した問題を警告として報告します。報告はするものの、`eslint`コマンドの終了コードには影響しません。`error`は発見した問題をエラーとして報告し、終了コードを1にする効果があります。それぞれの重大度は、`0`から`2`までの数値で設定することもできます。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: ESLintの重大度
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '| 重大度 | 数値 | 効果 |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
- en: '| off | 0 | ルールをオフにする |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| warn | 1 | 警告するが終了コードに影響しない |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| error | 2 | 警告し、終了コードを1にする |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: 'ルールは`.eslintrc.js`の`rules`フィールドに、`ルール名: 重大度`のキーバリュー形式で書きます。まずは、`no-console`をルールに追加してみましょう。'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'ルールによっては、細かく設定できるものもあります。たとえば、`camelcase`です。これは変数名がキャメルケースかをチェックするルールです。変数の種類によっては、キャメルケース以外が使いたい場合があります。たとえば、プロパティ名はアンダースコアを使いたいことがあるかもしれません。ウェブAPIによっては、JSONオブジェクトがスネークケース(`foo_bar`のようなアンダースコア区切り)を採用している場合があるからです。この場合、`ルール名:
    [重大度, 設定値]`のような配列形式で設定することで、細かいルール設定ができます。次の設定例は、プロパティ名に限ってはキャメルケースを強制しない設定です。試しに、この設定を`.eslintrc.js`に加えてみましょう。'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: ここまでのふりかえり
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: package.jsonを作りました。
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eslintをインストールしました。
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 設定ファイル`.eslintrc.js`を作りました。
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 設定ファイルには次のルールを追加しました。
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no-console`: `console.log`をコードに残しておいてはいけない。'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camelcase`: 変数名はキャメルケースにすること(プロパティ名を除く)。'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScriptをチェックする[​](#javascriptをチェックする "JavaScriptをチェックする への直接リンク")
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 設定ファイルが準備できたので、JavaScriptファイルを作り、ESLintでチェックしてみましょう。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: まず、`src`ディレクトリを作ってください。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`src`ディレクトリにJavaScriptファイル`helloWorld.js`を作ってください。'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`helloWorld.js`が加わったディレクトリ構造が、次のようになっているか確認してください。'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`helloWorld.js`の内容は次のようにします。'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: この`helloWorld.js`は、わざとコーディング規約に違反するコードになっています。1行目の変数`hello_world`はキャメルケースになっていません。2行目では、使ってはいけない`console.log`が使われています。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: では、ESLintでチェックを実行してみましょう。チェックは、`eslint`コマンドを起動するだけです。`eslint`コマンドは第一引数に、チェック対象のファイル名やディレクトリ名を指定します。ここでは、`src`ディレクトリ全体をチェックするために、引数は`src`にします。
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: これを実行すると、次の出力が表示されます。
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f045c7e20134070f7b29b93e20e26f34.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
- en: 結果の読み方[​](#結果の読み方 "結果の読み方 への直接リンク")
  id: totrans-196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: チェックした結果、問題点が見つかると表形式で詳細が表示されます。各行は4つの列からなります。左から順に、コードの行番号列番号、重大度、問題点の説明、ルール名です。
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a34d7df2450dbd5a393bd86b652fc13d.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: 結果に表示されている内容だけでは、どうして問題点になっているのか、どう直したらいいのかが分からないことがあります。その場合は、ルール名からESLintのドキュメントでルールの詳細を調べます。たとえば、上の結果ではルール名に`no-console`が挙がっていますが、この文字列をもとにルールの詳細を探します。`no-console`の詳細ページは、[https://eslint.org/docs/rules/no-console](https://eslint.org/docs/rules/no-console)にあります。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 結果に表示されている内容だけでは、どうして問題点になっているのか、どう直したらいいのかが分からないことがあります。その場合は、ルール名からESLintのドキュメントでルールの詳細を調べます。たとえば、上の結果ではルール名に`no-console`が挙がっていますが、この文字列をもとにルールの詳細を探します。`no-console`の詳細ページは、[https://eslint.org/docs/rules/no-console](https://eslint.org/docs/rules/no-console)にあります。
- en: コードを修正してエラーを解消する[​](#コードを修正してエラーを解消する "コードを修正してエラーを解消する への直接リンク")
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: コードを修正してエラーを解消する[​](#コードを修正してエラーを解消する "コードを修正してエラーを解消する への直接リンク")
- en: '[PRE34]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 上のコードをESLintでチェックした結果、2つの問題点が指摘されました。
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 上のコードをESLintでチェックした結果、2つの問題点が指摘されました。
- en: '1行目: 変数名`hello_world`がキャメルケースではない'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '1行目: 変数名`hello_world`がキャメルケースではない'
- en: '2行目: `console.log`は使ってはいけない'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '2行目: `console.log`は使ってはいけない'
- en: このエラーを解消したいので、`helloWorld.js`を編集してみましょう。変数名`hello_world`は`helloWorld`に変更します。2行目の`console.log`は削除しましょう。修正後のコードは次のようになります。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: このエラーを解消したいので、`helloWorld.js`を編集してみましょう。変数名`hello_world`は`helloWorld`に変更します。2行目の`console.log`は削除しましょう。修正後のコードは次のようになります。
- en: '[PRE36]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 再びESLintでチェックして、もう問題がなくなっているか確認してみましょう。
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 再びESLintでチェックして、もう問題がなくなっているか確認してみましょう。
- en: '[PRE38]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: この実行結果に何も出力されなければ、問題点が解消されています。
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: この実行結果に何も出力されなければ、問題点が解消されています。
- en: コードを自動修正する[​](#コードを自動修正する "コードを自動修正する への直接リンク")
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: コードを自動修正する[​](#コードを自動修正する "コードを自動修正する への直接リンク")
- en: ESLintのルールの中には、コードの自動修正ができるものがあります。たとえば、[`semi`](https://eslint.org/docs/rules/semi)は、文末セミコロンをつけるつけないを定めるルールですが、これは自動修正に対応しています。ここでは、`semi`を使ってESLintの自動修正をためしてみましょう。
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: ESLintのルールの中には、コードの自動修正ができるものがあります。たとえば、[`semi`](https://eslint.org/docs/rules/semi)は、文末セミコロンをつけるつけないを定めるルールですが、これは自動修正に対応しています。ここでは、`semi`を使ってESLintの自動修正をためしてみましょう。
- en: まず、設定ファイル`.eslintrc.js`の`rules`に`semi`を追加します。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: まず、設定ファイル`.eslintrc.js`の`rules`に`semi`を追加します。
- en: '[PRE40]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: このルール設定では、`"always"`を指定しています。これは、文末セミコロンを必須にする設定です。
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: このルール設定では、`"always"`を指定しています。これは、文末セミコロンを必須にする設定です。
- en: つぎに、`src/helloWorld.js`のコードのセミコロンを消して保存してください。
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: つぎに、`src/helloWorld.js`のコードのセミコロンを消して保存してください。
- en: '[PRE42]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 自動修正の前にチェックだけを実行し、`semi`についての問題が報告されるか確認します。
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 自動修正の前にチェックだけを実行し、`semi`についての問題が報告されるか確認します。
- en: '[PRE44]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 次のような結果が表示されれば、追加した`semi`ルールが効いていることになります。
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 次のような結果が表示されれば、追加した`semi`ルールが効いていることになります。
- en: '![](../Images/08bac0e9c2ce97388251538a40f0a038.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/08bac0e9c2ce97388251538a40f0a038.png)'
- en: ESLintでコードを自動修正するには、`eslint`コマンドに`--fix`オプションをつけます。次のコマンドを実行し、自動修正してみましょう。
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: ESLintでコードを自動修正するには、`eslint`コマンドに`--fix`オプションをつけます。次のコマンドを実行し、自動修正してみましょう。
- en: '[PRE46]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 自動修正が成功していれば、出力は何も表示されずに処理が終了します。自動修正が効いているかを確認するために、`src/helloWorld.js`を開いてみてください。文末にセミコロンが追加されているでしょうか。追加されていれば自動修正成功です。
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 自動修正が成功していれば、出力は何も表示されずに処理が終了します。自動修正が効いているかを確認するために、`src/helloWorld.js`を開いてみてください。文末にセミコロンが追加されているでしょうか。追加されていれば自動修正成功です。
- en: ここまでのふりかえり
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: ここまでのふりかえり
- en: '`src/helloWorld.js`を作りました。'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/helloWorld.js`を作りました。'
- en: '`npx eslint src`を実行し、`src`ディレクトリをチェックしてみました。'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npx eslint src`を実行し、`src`ディレクトリをチェックしてみました。'
- en: コードを手直しして、ESLintのチェックを通過する流れを体験しました。(`camelcase`, `no-console`)
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: コードを手直しして、ESLintのチェックを通過する流れを体験しました。(`camelcase`, `no-console`)
- en: '`npx eslint src --fix`を実行し、ESLintの自動修正機能を試しました。(`semi`)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npx eslint src --fix`を実行し、ESLintの自動修正機能を試しました。(`semi`)'
- en: ESLintにはどんなルールがある？[​](#eslintにはどんなルールがある "ESLintにはどんなルールがある？ への直接リンク")
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ESLintにはどんなルールがある？[​](#eslintにはどんなルールがある "ESLintにはどんなルールがある？ への直接リンク")
- en: ここまでのチュートリアルでは3つのルールを扱いました(`camelcase`、`no-console`、`semi`)。ESLintにはもっと多くのルールがあります。ルール数は200を超えます。
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: ここまでのチュートリアルでは3つのルールを扱いました(`camelcase`、`no-console`、`semi`)。ESLintにはもっと多くのルールがあります。ルール数は200を超えます。
- en: ルールの一覧は、[公式ドキュメントのRules](https://eslint.org/docs/rules/)にあります。この一覧では、どのルールが自動修正に対応しているかも確認できます。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: ルールの一覧は、[公式ドキュメントのRules](https://eslint.org/docs/rules/)にあります。この一覧では、どのルールが自動修正に対応しているかも確認できます。
- en: Shareable configを導入する[​](#shareable-configを導入する "Shareable configを導入する への直接リンク")
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Shareable configを導入する[​](#shareable-configを導入する "Shareable configを導入する への直接リンク")
- en: ESLintのルールは数があまりにも多いため、ルールをひとつひとつ調べて導入していくのは大変です。そこで、お勧めなのがshareable configの活用です。
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: ESLintのルールは数があまりにも多いため、ルールをひとつひとつ調べて導入していくのは大変です。そこで、お勧めなのがshareable configの活用です。
- en: shareable configは、誰かが設定したルールのプリセットです。これを導入すると、自分でルールを設定する手間が省けます。
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: shareable configは、誰かが設定したルールのプリセットです。これを導入すると、自分でルールを設定する手間が省けます。
- en: 有名なshareable configのひとつに、ESLint公式が公開している`eslint:recommended`があります。これを導入すると、[Rulesの一覧](https://eslint.org/docs/rules/)でチェックマークがついているルールが一括して有効化されます。これは公式が提供してるため有名ですが、有効になっているルールが少ないため、実務では物足りなさがあるかもしれません。
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 有名なshareable configのひとつに、ESLint公式が公開している`eslint:recommended`があります。これを導入すると、[Rulesの一覧](https://eslint.org/docs/rules/)でチェックマークがついているルールが一括して有効化されます。これは公式が提供してるため有名ですが、有効になっているルールが少ないため、実務では物足りなさがあるかもしれません。
- en: 第三者が公開しているshareable configもあり、次にあげるものは実務でも広く使われています。
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 第三者が公開しているshareable configもあり、次にあげるものは実務でも広く使われています。
- en: '| 名前 | 作成 | 準拠するコーディング規約 |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| 名前 | 作成 | 準拠するコーディング規約 |'
- en: '| --- | --- | --- |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| [eslint-config-airbnb](https://www.npmjs.com/package/eslint-config-airbnb)
    | Airbnb | [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)、[Airbnb
    React/JSX Style Guide](https://github.com/airbnb/javascript/tree/master/react)
    |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| [eslint-config-airbnb](https://www.npmjs.com/package/eslint-config-airbnb)
    | Airbnb | [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)、[Airbnb
    React/JSX Style Guide](https://github.com/airbnb/javascript/tree/master/react)
    |'
- en: '| [eslint-config-airbnb-base](https://www.npmjs.com/package/eslint-config-airbnb-base)
    | Airbnb | [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)
    |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| [eslint-config-airbnb-base](https://www.npmjs.com/package/eslint-config-airbnb-base)
    | Airbnb | [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)
    |'
- en: '| [eslint-config-standard](https://www.npmjs.com/package/eslint-config-standard)
    | Standard JS | [JavaScript Standard Style](https://standardjs.com/rules.html)
    |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| [eslint-config-standard](https://www.npmjs.com/package/eslint-config-standard)
    | Standard JS | [JavaScript Standard Style](https://standardjs.com/rules.html)
    |'
- en: '| [eslint-config-google](https://www.npmjs.com/package/eslint-config-google)
    | Google | [Google JavaScript Style Guide](https://google.github.io/styleguide/jsguide.html)
    |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| [eslint-config-google](https://www.npmjs.com/package/eslint-config-google)
    | Google | [Google JavaScript Style Guide](https://google.github.io/styleguide/jsguide.html)
    |'
- en: 上のshareable configはコーディング規約に基づいて作成されているため、文書としてのコーディング規約とESLintの設定をセットでプロジェクトに導入できる利点があります。
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 上のshareable configはコーディング規約に基づいて作成されているため、文書としてのコーディング規約とESLintの設定をセットでプロジェクトに導入できる利点があります。
- en: このチュートリアルでは、人気のAirbnbのものを使っていきます。Airbnbの設定には、[eslint-config-airbnb](https://www.npmjs.com/package/eslint-config-airbnb)と[eslint-config-airbnb-base](https://www.npmjs.com/package/eslint-config-airbnb-base)の2つがあります。前者は、React向けの設定が追加で盛り込まれています。今回はReactは扱わないので、よりシンプルな後者を導入します。
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: このチュートリアルでは、人気のAirbnbのものを使っていきます。Airbnbの設定には、[eslint-config-airbnb](https://www.npmjs.com/package/eslint-config-airbnb)と[eslint-config-airbnb-base](https://www.npmjs.com/package/eslint-config-airbnb-base)の2つがあります。前者は、React向けの設定が追加で盛り込まれています。今回はReactは扱わないので、よりシンプルな後者を導入します。
- en: 各shareable configのインストール件数の推移
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 各shareable configのインストール件数の推移
- en: '[https://npmcharts.com/compare/eslint-config-airbnb-base,eslint-config-airbnb,eslint-config-standard,eslint-config-google?interval=30&log=false&minimal=true](https://npmcharts.com/compare/eslint-config-airbnb-base,eslint-config-airbnb,eslint-config-standard,eslint-config-google?interval=30&log=false&minimal=true)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://npmcharts.com/compare/eslint-config-airbnb-base,eslint-config-airbnb,eslint-config-standard,eslint-config-google?interval=30&log=false&minimal=true](https://npmcharts.com/compare/eslint-config-airbnb-base,eslint-config-airbnb,eslint-config-standard,eslint-config-google?interval=30&log=false&minimal=true)'
- en: まず、Yarnで`eslint-config-airbnb-base`をインストールします。その際、合わせて`eslint-plugin-import`も導入します。
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: まず、Yarnで`eslint-config-airbnb-base`をインストールします。その際、合わせて`eslint-plugin-import`も導入します。
- en: '[PRE48]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '次に、設定ファイル`.eslintrc.js`の`rules`を消します。その上で、`extends: ["airbnb-base"]`を追加してください。'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '次に、設定ファイル`.eslintrc.js`の`rules`を消します。その上で、`extends: ["airbnb-base"]`を追加してください。'
- en: '[PRE50]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: これで、shareable configの導入は完了です。
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: これで、shareable configの導入は完了です。
- en: チェックを試すために、`src/helloWorld.js`を次の内容に置き換えてください。
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: チェックを試すために、`src/helloWorld.js`を次の内容に置き換えてください。
- en: '[PRE52]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: このコードはAirbnbの規約にわざと違反する内容になっています。
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: このコードはAirbnbの規約にわざと違反する内容になっています。
- en: 最後に`eslint`を実行し、チェックを動かしてみましょう。
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 最後に`eslint`を実行し、チェックを動かしてみましょう。
- en: '[PRE54]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: すると、次のような結果が得られるはずです。
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: すると、次のような結果が得られるはずです。
- en: '![](../Images/a46cc32944ca2c3df66d68a640cbb769.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a46cc32944ca2c3df66d68a640cbb769.png)'
- en: ここで報告されている問題点は、次のような内容になります。
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: ここで報告されている問題点は、次のような内容になります。
- en: '`import/prefer-default-export`: デフォルトエクスポートを使わければなりません。'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import/prefer-default-export`: デフォルトエクスポートを使わければなりません。'
- en: '`camelcase`: 変数`hello_world`はキャメルケースでなければなりません。'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`camelcase`: 変数`hello_world`はキャメルケースでなければなりません。'
- en: '`quotes`: 文字列リテラルはシングルクォートで囲む必要があります。'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quotes`: 文字列リテラルはシングルクォートで囲む必要があります。'
- en: '`no-console`: `console.log`は残しておいてはいけません。'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no-console`: `console.log`は残しておいてはいけません。'
- en: 続いて、shareable configのルールを上書きする方法を学んでいきましょう。
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 続いて、shareable configのルールを上書きする方法を学んでいきましょう。
- en: '上の結果では、`import/prefer-default-export`違反が報告されていました。これは、名前付きエクスポート(`export const
    helloWorld = "..."`)ではなく、デフォルトエクスポート(`export default "..."`)にすべきというエラーです。しかし、ここでは名前付きエクスポートを使いたいので、このルールをオフにすることで警告されないようにしてみましょう。ルールを上書きするには、`.eslintrc.js`の`rules`に`"import/prefer-default-export":
    "off"`を追加します。'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '上の結果では、`import/prefer-default-export`違反が報告されていました。これは、名前付きエクスポート(`export const
    helloWorld = "..."`)ではなく、デフォルトエクスポート(`export default "..."`)にすべきというエラーです。しかし、ここでは名前付きエクスポートを使いたいので、このルールをオフにすることで警告されないようにしてみましょう。ルールを上書きするには、`.eslintrc.js`の`rules`に`"import/prefer-default-export":
    "off"`を追加します。'
- en: '[PRE56]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'さらに、文字列リテラルはダブルクォートのほうを使いたいので、`rules`に`quotes: ["error", "double"]`を追加します。'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 'さらに、文字列リテラルはダブルクォートのほうを使いたいので、`rules`に`quotes: ["error", "double"]`を追加します。'
- en: '[PRE58]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 再び`eslint`を実行して、ルールの上書きが効いているか確認してみましょう。
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 再び`eslint`を実行して、ルールの上書きが効いているか確認してみましょう。
- en: '[PRE60]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 次のように、出力結果からデフォルトエクスポートと文字列クォートについての警告が消えていれば、ルールが効いています。
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 次のように、出力結果からデフォルトエクスポートと文字列クォートについての警告が消えていれば、ルールが効いています。
- en: '![](../Images/6763d9af9023e1062fdbb2d643edde52.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6763d9af9023e1062fdbb2d643edde52.png)'
- en: ルールを部分的に無効化する[​](#ルールを部分的に無効化する "ルールを部分的に無効化する への直接リンク")
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ルールを部分的に無効化する[​](#ルールを部分的に無効化する "ルールを部分的に無効化する への直接リンク")
- en: '`.eslintrc.js`で設定した規約はプロジェクト全体に及びます。コードを書いていると、どうしても規約を破らざるをえない部分が出てくることがあります。その場合は、コードのいち部分について、ルールを無効化することもできます。'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`.eslintrc.js`で設定した規約はプロジェクト全体に及びます。コードを書いていると、どうしても規約を破らざるをえない部分が出てくることがあります。その場合は、コードのいち部分について、ルールを無効化することもできます。'
- en: 部分的にルールを無効にするには、その行の前にコメント`eslint-disable-next-line`を追加します。たとえば、次の例ように書いておくと、変数名`hello_world`がキャメルケースでなくても、ESLintは警告を出さなくできます。
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 部分的にルールを無効にするには、その行の前にコメント`eslint-disable-next-line`を追加します。たとえば、次の例ように書いておくと、変数名`hello_world`がキャメルケースでなくても、ESLintは警告を出さなくできます。
- en: '[PRE62]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: この方法はいざというときに知っておくとよいというものです。ルール無効化コメントだらけになってしまうと本末転倒です。節度を持って使うのが望ましいです。
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: この方法はいざというときに知っておくとよいというものです。ルール無効化コメントだらけになってしまうと本末転倒です。節度を持って使うのが望ましいです。
- en: ここまでのふりかえり
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: ここまでのふりかえり
- en: shareable configの`eslint-config-airbnb-base`を導入しました。
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: shareable configの`eslint-config-airbnb-base`を導入しました。
- en: これのルールを一部上書きしてみました。
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: これのルールを一部上書きしてみました。
- en: '`import/prefer-default-export`を無効化'
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import/prefer-default-export`を無効化'
- en: '`quotes`の指定をシングルクォートからダブルクォートに変更'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quotes`の指定をシングルクォートからダブルクォートに変更'
- en: ルール無効化コメント`// eslint-disable-next-line`を試しました。
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ルール無効化コメント`// eslint-disable-next-line`を試しました。
- en: ESLintでTypeScriptをリントしよう[​](#eslintでtypescriptをリントしよう "ESLintでTypeScriptをリントしよう
    への直接リンク")
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ESLintでTypeScriptをリントしよう[​](#eslintでtypescriptをリントしよう "ESLintでTypeScriptをリントしよう
    への直接リンク")
- en: ここまでのチュートリアルでは、JavaScriptにESLintをかける方法を学んできました。ここからは、TypeScriptにESLintを使う方法を学んでいきます。
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: ここまでのチュートリアルでは、JavaScriptにESLintをかける方法を学んできました。ここからは、TypeScriptにESLintを使う方法を学んでいきます。
- en: そもそもESLintでは、TypeScriptはチェックできません。これを補うのが[TypeScript ESLint](https://typescript-eslint.io/)です。これを導入するとESLintでTypeScriptがチェックできるようになります。
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: そもそもESLintでは、TypeScriptはチェックできません。これを補うのが[TypeScript ESLint](https://typescript-eslint.io/)です。これを��入するとESLintでTypeScriptがチェックできるようになります。
- en: プロジェクトを作成する[​](#create-typescript-project "プロジェクトを作成する への直接リンク")
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: プロジェクトを作成する[​](#create-typescript-project "プロジェクトを作成する への直接リンク")
- en: ここからは別のプロジェクトを作り、その新プロジェクトでチュートリアルを進めていきます。空のディレクトリを作り、その中に最低限のpackage.jsonを配置してください。
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: TypeScriptを導入する[​](#typescriptを導入する "TypeScriptを導入する への直接リンク")
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScript ESLintを使うには、TypeScript環境を構築しておく必要があります。まず、`typescript`を導入しておいてください。合わせてNode.jsの型定義`@types/node`もインストールしておきます。この型情報は、`.eslintrc.js`などのNode.js環境で実行されるファイルをESLintでチェックするときに利用されます。
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: TypeScriptコンパイラの設定ファイルも作っておきます。
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: tsconfig.jsonの内容はこうします。
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 続いて、`src`ディレクトリにTypeScriptファイル`helloWorld.ts`を追加します。内容は空で構いません。
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: コンパイルもできるか試してみましょう。
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: コンパイルが成功すると、`dist/helloWorld.js`が生成されます。
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: この段階では、ディレクトリ構成が次のようになっているはずです。
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: TypeScript ESLintを導入する[​](#typescript-eslintを導入する "TypeScript ESLintを導入する への直接リンク")
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLint本体と[TypeScript ESLint](https://typescript-eslint.io/)の両方をインストールします。
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: TypeScript ESLintは2つのパッケージから成ります。`@typescript-eslint/parser`は、ESLintにTypeScriptの構文を理解させるためのパッケージです。`@typescript-eslint/eslint-plugin`は、TypeScript向けのルールを追加するパッケージです。
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: ESLintがインストールされ、実行可能になっているかバージョンを表示して確認しましょう。
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: TypeScript ESLintにはどんなルールがある？[​](#typescript-eslintにはどんなルールがある "TypeScript ESLintにはどんなルールがある？
    への直接リンク")
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLintの[200以上のルール](https://eslint.org/docs/rules/)に加えて、TypeScript ESLintを導入すると、100以上のルールが追加されます。追加されるルールの一覧は、[TypeScript
    ESLintのドキュメント](https://typescript-eslint.io/rules/)で確認できます。
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: ここまでのふりかえり
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: 新規プロジェクト`eslint-typescript-tutorial`を作成しました。
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScriptをインストールし、`tsconfig.json`を設定しました。
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 中身が空の`src/helloWorld.ts`を作成し、コンパイルしてみました。
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLintとTypeScript ESLintをインストールしました。
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript向けのshareable configを導入する[​](#typescript向けのshareable-configを導入する "TypeScript向けのshareable
    configを導入する への直接リンク")
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: コーディング規約[Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)に準拠したshareable
    configをインストールします。
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '`eslint-config-airbnb-base`はJavaScript向けのshareable configです。これを上書きして、TypeScript
    ESLintのルールを追加したり、TypeScriptコンパイラがチェックするためESLintでチェックする必要がないルールを除外する設定を加えるのが`eslint-config-airbnb-typescript`です。`eslint-plugin-import`は依存関係上、導入が必要なパッケージです。'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript ESLintの設定ファイルを作る[​](#typescript-eslintの設定ファイルを作る "TypeScript ESLintの設定ファイルを作る
    への直接リンク")
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScript ESLintを動かすためには、次の2つの設定ファイルを作る必要があります。
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: tsconfig.eslint.json
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .eslintrc.js
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: これらファイルをプロジェクトルートに作成してください。
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: tsconfig.eslint.json[​](#tsconfigeslintjson "tsconfig.eslint.json への直接リンク")
  id: totrans-355
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: TypeScript ESLintは、チェック時に型情報を利用するために、TypeScriptコンパイラを使います。その際のコンパイラ設定を`tsconfig.eslint.json`に書きます。コンパイラ設定は、`tsconfig.json`の内容を`extends`で継承しつつ、上書きが必要なところだけ記述していきます。
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 今回は、TypeScriptファイルに加えて、ESLintの設定ファイル`.eslintrc.js`自体もESLintのチェック対象に含めたいので、`allowJs`の追加と`include`の上書きをします。
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '`".*.js"`は、`.eslintrc.js`などドット始まりのJSファイルにマッチするパターンです。パターンマッチにしておくことで、将来的に導入される他の設定ファイルもチェック対象に含めるようにできます。'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: また、テストフレームワーク「Jest」の設定ファイルでは、`jest.config.js`のようにドットはじまりでないJSファイルもありえます。このようなファイルが追加されるのを見越して、`"*.js"`もあらかじめ追加しておくとよいです。
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: このように、TypeScript ESLintでチェックする対象は、`include`に追加していく必要があります。
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '`tsconfig.eslint.json`が正しく設定されているか、次のコマンドを実行して出力を確認してください。'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 設定が正しいと、次のような出力になるはずです。
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: .eslintrc.js[​](#eslintrcjs ".eslintrc.js への直接リンク")
  id: totrans-373
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 次にESLintの設定ファイル`.eslintrc.js`を作ります。内容は次のとおりにしてください。
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '`root`、`env`、`parserOptions`の`ecmaVersion`と`sourceType`については[前のチュートリアル](#eslint%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B)の解説をご覧ください。まだ説明していない、追加のオプションは次で説明します。'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`root`、`env`、`parserOptions`の`ecmaVersion`と`sourceType`については[前のチュートリアル](#eslint%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B)の解説をご覧ください。まだ説明していない、追加のオプションは次で説明します。'
- en: '`parser`[​](#parser "parser への直接リンク")'
  id: totrans-378
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`parser`[​](#parser "parser への直接リンク")'
- en: '[PRE100]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '`parser`で設定したパーサーを使って、ESLintはJavaScriptやTypeScriptの構文を解析します。上の例では、TypeScriptパーサーを指定しています。この指定がないと、ESLintはTypeScriptを解釈できず、エラーが発生します。'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`parser`で設定したパーサーを使って、ESLintはJavaScriptやTypeScriptの構文を解析します。上の例では、TypeScriptパーサーを指定しています。この指定がないと、ESLintはTypeScriptを解釈できず、エラーが発生します。'
- en: TypeScriptはJavaScriptの構文を拡張した言語です。なので、このパーサーさえ入れておけば、TypeScriptに限らずJavaScriptのこのパーサーひとつで対応できます。要するに、このパーサーひとつで、TypeScriptとJavaScriptのファイルどちらもリントできるようになります。
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScriptはJavaScriptの構文を拡張した言語です。なので、このパーサーさえ入れておけば、TypeScriptに限らずJavaScriptのこのパーサーひとつで対応できます。要するに、このパーサーひとつで、TypeScriptとJavaScriptのファイルどちらもリントできるようになります。
- en: '`plugins`[​](#plugins "plugins への直接リンク")'
  id: totrans-383
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`plugins`[​](#plugins "plugins への直接リンク")'
- en: '[PRE102]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: ESLintは公式が提供するルールに加えて、第三者が作成したルールを使うこともできます。第三者が作成したルールはプラグインという形で公開されています。この`plugins`フィールドにプラグインを追加すると、ルールが追加できます。上の例では、TypeScript
    ESLint独自のルールを追加するために、`@typescript-eslint`を設定しています。
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: ESLintは公式が提供するルールに加えて、第三者が作成したルールを使うこともできます。第三者が作成したルー���はプラグインという形で公開されています。この`plugins`フィールドにプラグインを追加すると、ルールが追加できます。上の例では、TypeScript
    ESLint独自のルールを追加するために、`@typescript-eslint`を設定しています。
- en: '`parserOptions`[​](#parser-options-2 "parser-options-2 への直接リンク")'
  id: totrans-387
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`parserOptions`[​](#parser-options-2 "parser-options-2 への直接リンク")'
- en: '[PRE104]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '`project`と`tsconfigRootDir`はTypeScript ESLint独自のオプションです。`tsconfigRootDir`はプロジェクトルートの絶対パスを指定します。`project`は、ESLint実行時に使うコンパイラ設定ファイルを`tsconfigRootDir`からの相対パスで指定します。これらの設定は、TypeScript
    ESLintが型情報を参照するために必要な設定です。'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`project`と`tsconfigRootDir`はTypeScript ESLint独自のオプションです。`tsconfigRootDir`はプロジェクトルートの絶対パスを指定します。`project`は、ESLint実行時に使うコンパイラ設定ファイルを`tsconfigRootDir`からの相対パスで指定します。これらの設定は、TypeScript
    ESLintが型情報を参照するために必要な設定です。'
- en: '`ignorePatterns`[​](#ignorepatterns "ignorepatterns への直接リンク")'
  id: totrans-391
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`ignorePatterns`[​](#ignorepatterns "ignorepatterns への直接リンク")'
- en: '[PRE106]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '`ignorePatterns`はESLintのチェック対象外にするファイルやディレクトリを指定するオプションです。TypeScriptプロジェクトでは、コンパイルで生成されるJavaScriptは、リントしないのが普通です。なので、`dist`ディレクトリをチェック対象外にしておきます。'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`ignorePatterns`はESLintのチェック対象外にするファイルやディレクトリを指定するオプションです。TypeScriptプロジェクトでは、コンパイルで生成されるJavaScriptは、リントしないのが普通です。なので、`dist`ディレクトリをチェック対象外にしておきます。'
- en: '`extends`[​](#extends "extends への直接リンク")'
  id: totrans-395
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`extends`[​](#extends "extends への直接リンク")'
- en: '[PRE108]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '`extends`はshareable configを使うための設定です。①は、JavaScript向けのルールです。これを拡張してTypeScript
    ESLintのルールにも範囲を広げたのが②です。①と②は上の順番でないと正しく設定されないので注意してください。'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`extends`はshareable configを使うための設定です。①は、JavaScript向けのルールです。これを拡張してTypeScript
    ESLintのルールにも範囲を広げたのが②です。①と②は上の順番でないと正しく設定されないので注意してください。'
- en: ③はTypeScript ESLintが提供する推奨ルールセットで、型情報を要するルールを含みます。このルールセットでどのルールが有効になるかは、[公式ドキュメント](https://typescript-eslint.io/rules/)をご覧ください。
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: ③はTypeScript ESLintが提供する推奨ルールセットで、型情報を要するルールを含みます。このルールセットでどのルールが有効になるかは、[公式ドキュメント](https://typescript-eslint.io/rules/)をご覧ください。
- en: '`rules`[​](#rules "rules への直接リンク")'
  id: totrans-400
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`rules`[​](#rules "rules への直接リンク")'
- en: '[PRE110]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: ここの`rules`は、shareable configで有効化されたルールを上書きするのに用いています。TypeScript ESLintで追加されたルールは、`@typescript-eslint/`が接頭辞になります。
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: ここの`rules`は、shareable configで有効化されたルールを上書きするのに用いています。TypeScript ESLintで追加されたルールは、`@typescript-eslint/`が接頭辞になります。
- en: ここまでのふりかえり
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: ここまでのふりかえり
- en: コーディング規約Airbnb JavaScript Style Guideに準拠したshareable configをインストールしました。
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: コーディング規約Airbnb JavaScript Style Guideに準拠したshareable configをインストールしました。
- en: TypeScript ESLintの設定ファイルを作りました。
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript ESLintの設定ファイルを作りました。
- en: tsconfig.eslint.json
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tsconfig.eslint.json
- en: .eslintrc.js
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: .eslintrc.js
- en: TypeScriptをチェックする[​](#typescriptをチェックする "TypeScriptをチェックする への直接リンク")
  id: totrans-409
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TypeScriptをチェックする[​](#typescriptをチェックする "TypeScriptをチェックする への直接リンク")
- en: TypeScript ESLintを使う準備ができたので、いよいよTypeScriptをチェックしてみたいと思います。
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript ESLintを使う準備ができたので、いよいよTypeScriptをチェックしてみたいと思います。
- en: まず、空だった`src/helloWorld.ts`に次のコードを書いて保存してください。
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: まず、空だった`src/helloWorld.ts`に次のコードを書いて保存してください。
- en: '[PRE112]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: そうしたら、ESLintを実行してみましょう。
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: そうしたら、ESLintを実行してみましょう。
- en: '[PRE114]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: すると、次の結果が出力されるはずです。
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: すると、次の結果が出力されるはずです。
- en: '![](../Images/c5d0e579aac90fb241224aedf2729a97.png)'
  id: totrans-418
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c5d0e579aac90fb241224aedf2729a97.png)'
- en: 2つの問題点が報告されています。1つ目は、変数名の命名規則が守られていない点についてのエラーです。2つ目は、`console.log`が使われている点についての警告です。
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 2つの問題点が報告されています。1つ目は、変数名の命名規則が守られていない点についてのエラーです。2つ目は、`console.log`が使われている点についての警告です。
- en: これらの問題点を修正してみましょう。`src/helloWorld.ts`を次の内容に変更し、保存してください。
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: これらの問題点を修正してみましょう。`src/helloWorld.ts`を次の内容に変更し、保存してください。
- en: '[PRE116]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 再びESLintを実行して、問題点が解消されているか確認してみましょう。
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 再びESLintを実行して、問題点が解消されているか確認してみましょう。
- en: '[PRE118]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 出力結果に何も表示されていなければ、問題点が解決されています。
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 出力結果に何も表示されていなければ、問題点が解決されています。
- en: 以上で、ESLintでTypeScriptをリントするチュートリアルは終わりです。
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 以上で、ESLintでTypeScriptをリントするチュートリアルは終わりです。
- en: VS CodeとESLintを統合しよう[​](#vs-codeとeslintを統合しよう "VS CodeとESLintを統合しよう への直接リンク")
  id: totrans-428
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VS CodeとESLintを統合しよう[​](#vs-codeとeslintを統合しよう "VS CodeとESLintを統合しよう への直接リンク")
- en: ここでは、Visual Studio Code(VS Code)に、ESLintを組み込む方法を説明します。
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: ここでは、Visual Studio Code(VS Code)に、ESLintを組み込む方法を説明します。
- en: ESLintはコマンドひとつでコーディング規約をチェックできるようになり、それだけでも便利です。しかし、VS CodeとESLintを統合するとさらに便利になります。コードを書いているときに、リアルタイムで問題点のフィードバックが得られるようになるからです。
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: ESLintはコマンドひとつでコーディング規約をチェックできるようになり、それだけでも便利です。しかし、VS CodeとESLintを統合するとさらに便利になります。コードを書いているときに、リアルタイムで問題点のフィードバックが得られるようになるからです。
- en: ESLintのエラーがVS Codeに表示される様子
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: ESLintのエラーがVS Codeに表示される様子
- en: '![](../Images/6964081dae814a27176154ec01850a46.png)'
  id: totrans-432
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6964081dae814a27176154ec01850a46.png)'
- en: VS CodeとESLintを統合するには、[ESLintの拡張](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)をVisual
    Studio Codeのマーケットプレイスからインストールするだけです。
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: VS CodeとESLintを統合するには、[ESLintの拡張](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)をVisual
    Studio Codeのマーケットプレイスからインストールするだけです。
- en: '![](../Images/c467a5d11f16d4f834efa91c2029e116.png)'
  id: totrans-434
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c467a5d11f16d4f834efa91c2029e116.png)'
- en: JetBrains IDEとESLintを統合しよう[​](#jetbrains-ideとeslintを統合しよう "JetBrains IDEとESLintを統合しよう
    への直接リンク")
  id: totrans-435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '让JetBrains IDE和ESLint集成起来[​](#jetbrains-ideとeslintを統合しよう "直接链接到JetBrains IDE和ESLint集成") '
- en: ここでは、WebStormなどのJetBrains IDEに、ESLintを組み込む方法を説明します。
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 这里将介绍如何将ESLint集成到JetBrains IDE（如WebStorm）中。
- en: ESLintはコマンドひとつでコーディング規約をチェックできるようになり、それだけでも便利です。しかし、JetBrains IDEとESLintを統合するとさらに便利になります。コードを書いているときに、リアルタイムで問題点のフィードバックが得られるようになるからです。
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint是一个命令，可以用来检查编码规范，这一点本身就很方便。然而，将JetBrains IDE与ESLint集成会更加方便。因为这样在编写代码时，可以实时获得问题的反馈。
- en: ESLintのエラーがWebStormに表示される様子
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint错误在WebStorm中显示的样子
- en: '![](../Images/41382a4ac735de9e7508cb59da6cc945.png)'
  id: totrans-439
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41382a4ac735de9e7508cb59da6cc945.png)'
- en: WebStormは、ESLint統合機能がデフォルトで入っているので、プラグインなどをインストールする必要はありません。ESLintを有効にするには、「Preferences」を開き、検索に「eslint」と入力します(①)。絞り込まれたメニューから「ESLint」を開きます(②)。「Automatic
    ESLint configuration」にチェックを入れます(③)。最後に「OK」を押すと設定完了です(④)。
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm默认集成了ESLint功能，因此无需安装插件等。要启用ESLint，请打开“Preferences”，在搜索框中输入“eslint”(①)。然后从筛选后的菜单中打开“ESLint”(②)。勾选“Automatic
    ESLint configuration”(③)，最后点击“OK”完成设置(④)。
- en: '![](../Images/69b0df351edf54b69047b50f4dfae0d6.png)'
  id: totrans-441
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/69b0df351edf54b69047b50f4dfae0d6.png)'
