- en: ESLintでTypeScriptのコーディング規約チェックを自動化しよう
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/tutorials/eslint](https://typescriptbook.jp/tutorials/eslint)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 本章では、<ruby>ESLint<rt>イーエスリント</rt></ruby>を使って、TypeScriptをチェックするためのノウハウをチュートリアル形式で学びます。
  prefs: []
  type: TYPE_NORMAL
- en: 本章で学べること[​](#本章で学べること "本章で学べること への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 本章では次のことを学んでいただきます。
  prefs: []
  type: TYPE_NORMAL
- en: コーディング規約の必要性とコーディング規約の問題点
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLintでJavaScriptやTypeScriptをチェックする方法
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLintのルールの設定のしかた
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Airbnbのコーディング規約をESLintで活用する術
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: エラーを解消する方法
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: チェックを部分的に無効化する方法
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VS CodeやJetBrains IDEとESLintを統合する方法
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: チュートリアルをやり終えると、ご自身のプロジェクトにESLintを導入できるようになったりと、実務で役立つ基本的なスキルが身につくはずです。
  prefs: []
  type: TYPE_NORMAL
- en: 本章の流れと読み進め方[​](#本章の流れと読み進め方 "本章の流れと読み進め方 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 本章は次の3部構成です。
  prefs: []
  type: TYPE_NORMAL
- en: '[背景知識](#%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AD%98)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ESLintでJavaScriptをリントしよう](#eslint%E3%81%A7javascript%E3%82%92%E3%83%AA%E3%83%B3%E3%83%88%E3%81%97%E3%82%88%E3%81%86)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ESLintでTypeScriptをリントしよう](#eslint%E3%81%A7typescript%E3%82%92%E3%83%AA%E3%83%B3%E3%83%88%E3%81%97%E3%82%88%E3%81%86)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 本章の前半は座学です。「コーディング規約」や「リンター」が何か知らない方向けに、その背景知識を解説します([背景知識](#%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AD%98))。すでにコーディング規約やリンターが分かっている方、すぐに手を動かしたい方は、ここは読み飛ばしても構いません。
  prefs: []
  type: TYPE_NORMAL
- en: 本章の後半はチュートリアルです。本章のゴールは、TypeScriptをESLintでチェックできるようになることです。しかしながら、ESLintでTypeScriptを扱うのは発展的な用法です。そこで、チュートリアルの流れとしては、まず基礎編として、JavaScriptをESLintで扱う方法を学びます([ESLintでJavaScriptをリントしよう](#eslint%E3%81%A7javascript%E3%82%92%E3%83%AA%E3%83%B3%E3%83%88%E3%81%97%E3%82%88%E3%81%86))。その後、TypeScriptをESLintを扱う方法を学んでいただきます([ESLintでTypeScriptをリントしよう](#eslint%E3%81%A7typescript%E3%82%92%E3%83%AA%E3%83%B3%E3%83%88%E3%81%97%E3%82%88%E3%81%86))。
  prefs: []
  type: TYPE_NORMAL
- en: 章末にはおまけとして次のチュートリアルも用意してあります。関心と余力がある方はこちらもご覧ください。
  prefs: []
  type: TYPE_NORMAL
- en: '[VS CodeとESLintを統合しよう](#vs-code%E3%81%A8eslint%E3%82%92%E7%B5%B1%E5%90%88%E3%81%97%E3%82%88%E3%81%86)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[JetBrains IDEとESLintを統合しよう](#jetbrains-ide%E3%81%A8eslint%E3%82%92%E7%B5%B1%E5%90%88%E3%81%97%E3%82%88%E3%81%86)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: このチュートリアルに必要なもの[​](#このチュートリアルに必要なもの "このチュートリアルに必要なもの への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: このチュートリアルで必要なものは次のとおりです。
  prefs: []
  type: TYPE_NORMAL
- en: Node.js v16以上
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPM v7系以上
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yarn v1系 (このチュートリアルはv1.22.18で動作確認しています)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.jsの導入については、[開発環境の準備](/tutorials/setup)をご覧ください。
  prefs: []
  type: TYPE_NORMAL
- en: パッケージ管理ツールとしてYarnを利用します。最初にインストールをしておきましょう。すでにインストール済みの方はここのステップはスキップして大丈夫です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 背景知識[​](#背景知識 "背景知識 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScriptの書き方はさまざま[​](#typescriptの書き方はさまざま "TypeScriptの書き方はさまざま への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScriptに限らず、プログラミング言語には文法があります。文法を守って書かれたコードは、エラーなく実行やコンパイルができます。
  prefs: []
  type: TYPE_NORMAL
- en: プログラムは文法さえ守れば、誰が書いても一字一句同じコードになるかというと、そうではありません。たとえば、TypeScriptでは文末のセミコロンが省略できます。次の2行のコードの違いは、セミコロンの有無です。どちらも文法的に正しく、どちらを使うかは好みの問題です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 文字列はシングルクォート、ダブルクォート、バッククォートの3通りで書けます。シングルクォートとダブルクォートは機能上の違いがありません。バッククォートは[テンプレートリテラル](/reference/values-types-variables/string#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB)と言い、文字列リテラルとは仕様が異なります。しかし、次の例のような単純な文字列では、この3つは同じ意味になります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: この例は、どれを使うか意見が割れるところです。本書独自の調査では、「原則的にどれをもっとも多く使うか？」という問いに対し、シングルクォートが55%ともっとも多く、次にダブルクォートが29%、バッククォートは16%という回答が得られました。(回答数232件)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/13a907c096b102715f387832f24c8a61.png)'
  prefs: []
  type: TYPE_IMG
- en: 上でとりあげた例はほんの一例です。意味が同じで書き方が異なる例は、数多くあります。
  prefs: []
  type: TYPE_NORMAL
- en: 書き方の違いが問題になることも[​](#書き方の違いが問題になることも "書き方の違いが問題になることも への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 書き方の違いが問題なることがあります。たとえば、プログラムを共同で開発する場合です。人によって書き方が異なると、その違いが気になったり驚いたりして、コードの本筋が頭に入ってこないことがあります。インデントの幅が統一されていないと、コードが読みにくくなることもあります。結果的に、**書き方に違いがあるとプログラムの保守性を損ねる**一因になります。
  prefs: []
  type: TYPE_NORMAL
- en: コーディング規約で書き方を統一[​](#コーディング規約で書き方を統一 "コーディング規約で書き方を統一 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 理想は、誰が書いても同じコードになることです。そのためにはどうしたらよいでしょうか。解決策のひとつは、書き方のルールを決めることです。コードの**書き方の取り決めは「コーディング規約(coding
    standards)」**と呼ばれます。
  prefs: []
  type: TYPE_NORMAL
- en: コーディング規約では、たとえば、次のようなことを決めます。
  prefs: []
  type: TYPE_NORMAL
- en: 変数名はキャメルケースにしましょう。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`function`の中カッコは関数名と同じ行に書きましょう。(次の行に置いてはなりません)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`console.log`は消しましょう。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if文の条件式で変数代入してはいけません。たとえば`if (data = getData())`はだめ。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: このようなルールを取りまとめて規約を作るのですが、実用的な規約に仕上げるにはかなりの労力を要します。実務では、公開されている規約を借りてくるほうが現実的です。
  prefs: []
  type: TYPE_NORMAL
- en: 公開されている規約には主に次のものがあります。これらは実際に多くのプロジェクトで利用されています。
  prefs: []
  type: TYPE_NORMAL
- en: '[Google JavaScript Style Guide](https://google.github.io/styleguide/jsguide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[JavaScript Standard Style](https://standardjs.com/rules.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: コーディング規約をチームのみんなで守れば、書き方を統一しやすくなります。
  prefs: []
  type: TYPE_NORMAL
- en: コーディング規約の問題点[​](#コーディング規約の問題点 "コーディング規約の問題点 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: コーディング規約にも問題点があります。
  prefs: []
  type: TYPE_NORMAL
- en: 運用の手間は少なくない[​](#運用の手間は少なくない "運用の手間は少なくない への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 開発者ひとりひとりが規約を守れば、コーディング規約は機能します。しかし、ヒューマンエラーは起きるものです。規約を知った上で破る場合もありますが、多いのは知らずに破ってしまうことや、間違えてしまうことです。もしも、規約が守られなければ、規約は形式上のものになってしまいます。そうなると、書き方を統一するという目標は達成できなくなってしまいます。
  prefs: []
  type: TYPE_NORMAL
- en: ヒューマンエラーを防ぐには、コードが**規約に準拠しているかを日々点検しなければなりません**。しかし、これには多くの労力がかかります。もっと重要な仕事がある中で、点検を行うのは無理な場合もあるかもしれません。規約を正しく運用するには、多くの手間がかかるのです。
  prefs: []
  type: TYPE_NORMAL
- en: コミュニケーション上の心理的な負担が増す[​](#コミュニケーション上の心理的な負担が増す "コミュニケーション上の心理的な負担が増す への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: コーディング規約は、何が正しく、何が間違いかを定めます。すると、明らかに誤りと判断できるコードが出てきます。他者が書いたコードの誤りを指摘する場面も出てきます。**人の仕事の誤りを指摘するのは難しいものです**。想像以上に心理的な負担になります。指摘する側は相手の心象を悪くしないよう、伝え方に苦慮します。指摘される側も、前向きに受け取れない場合もあります。相手との対人関係によっては、指摘することが遠慮される場合もあります。
  prefs: []
  type: TYPE_NORMAL
- en: コーディング規約の自動化[​](#コーディング規約の自動化 "コーディング規約の自動化 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 書き方を統一するには、コーディング規約は不可欠です。しかし、運用の手間や心理的な課題もあります。これを解決する手助けとなるのがESLintです。**ESLintは、JavaScriptやTypeScriptのコードがコーディング規約に準拠しているかをチェックするツール**です。
  prefs: []
  type: TYPE_NORMAL
- en: ESLintは、コマンドひとつでチェックが行なえます。チェックは数秒で完了し、すぐに結果がわかります。そのため、点検の手間がほぼなくなります。
  prefs: []
  type: TYPE_NORMAL
- en: 加えて、自動修正機能もあります。コードによっては、ESLintが規約に準じたコードに直せる場合もあります。この機能を利用できる場合は、規約違反箇所を修正する手間もなくせます。
  prefs: []
  type: TYPE_NORMAL
- en: 不思議なもので、同じ指摘でも人に言われるより、機械に指摘されたほうが気が楽なものです。ESLintでは機械的に問題を指摘してくれるため、コミュニケーション上の心理的負担も軽減できます。
  prefs: []
  type: TYPE_NORMAL
- en: ESLintを導入すると、開発者は規約の運用や心理的ストレスから開放され、**開発などのより重要な仕事に集中できるようになります**。
  prefs: []
  type: TYPE_NORMAL
- en: 学びをシェアする
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 📝TypeScriptは同じ意味処理でも異なる書き方が可能
  prefs: []
  type: TYPE_NORMAL
- en: 💥チーム開発では書き方の違いが問題になることも…
  prefs: []
  type: TYPE_NORMAL
- en: 🤝書き方統一のためにコーディング規約を導入しよう
  prefs: []
  type: TYPE_NORMAL
- en: 😵でも、規約には運用の手間や心理的な課題もある
  prefs: []
  type: TYPE_NORMAL
- en: ✅この課題はESLintで解決できる！
  prefs: []
  type: TYPE_NORMAL
- en: 『サバイバルTypeScript』より
  prefs: []
  type: TYPE_NORMAL
- en: '[この内容をツイートする](https://twitter.com/intent/tweet?text=%F0%9F%93%9DTypeScript%E3%81%AF%E5%90%8C%E3%81%98%E6%84%8F%E5%91%B3%E5%87%A6%E7%90%86%E3%81%A7%E3%82%82%E7%95%B0%E3%81%AA%E3%82%8B%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%8C%E5%8F%AF%E8%83%BD%0A%F0%9F%92%A5%E3%83%81%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA%E3%81%A7%E3%81%AF%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%AE%E9%81%95%E3%81%84%E3%81%8C%E5%95%8F%E9%A1%8C%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%93%E3%81%A8%E3%82%82%E2%80%A6%0A%F0%9F%A4%9D%E6%9B%B8%E3%81%8D%E6%96%B9%E7%B5%B1%E4%B8%80%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%97%E3%82%88%E3%81%86%0A%F0%9F%98%B5%E3%81%A7%E3%82%82%E3%80%81%E8%A6%8F%E7%B4%84%E3%81%AB%E3%81%AF%E9%81%8B%E7%94%A8%E3%81%AE%E6%89%8B%E9%96%93%E3%82%84%E5%BF%83%E7%90%86%E7%9A%84%E3%81%AA%E8%AA%B2%E9%A1%8C%E3%82%82%E3%81%82%E3%82%8B%0A%E2%9C%85%E3%81%93%E3%81%AE%E8%AA%B2%E9%A1%8C%E3%81%AFESLint%E3%81%A7%E8%A7%A3%E6%B1%BA%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%81%0A%0A%E3%80%8E%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABTypeScript%E3%80%8F%E3%82%88%E3%82%8A)'
  prefs: []
  type: TYPE_NORMAL
- en: リンターとは[​](#リンターとは "リンターとは への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLintは一般的に「リンター(linter)」というジャンルのツールです。リンターは、プログラムを**静的に解析し、バグや問題点を発見するツール**を言います。リンターを使って、問題点を解析することを「リントする(lint)」と言います。
  prefs: []
  type: TYPE_NORMAL
- en: リント(lint)の由来は紡績です。羊毛や綿花から、繊維をつむぐ際に不要になるホコリのような糸くずをリントと呼びます。紡績ではリントを取り除く工程があり、これにちなんでプログラミングでもリントという名前が使われだしたと言われています。
  prefs: []
  type: TYPE_NORMAL
- en: コンパイラとリンターの違い[​](#コンパイラとリンターの違い "コンパイラとリンターの違い への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: コンパイラの本質は、ある言語から別の言語に変換することです。TypeScriptコンパイラの場合は、TypeScriptからJavaScriptへの変換です。
  prefs: []
  type: TYPE_NORMAL
- en: リンターの本質は、プログラムの問題点を指摘することです。言語から言語への変換は行いません。
  prefs: []
  type: TYPE_NORMAL
- en: 実際は、TypeScriptコンパイラもプログラムの問題点を報告します。たとえば、コンパイラオプション[`noUnusedLocals`](/reference/tsconfig/nounusedlocals)を有効にすると、未使用の変数をチェックできます。ESLintにもこれと同等のチェックがあります。こうした点はリンターの機能と重複する部分です。
  prefs: []
  type: TYPE_NORMAL
- en: 類似のチェック機能があるものの、両者は得意分野が異なります。TypeScriptコンパイラは型のチェックが充実しています。型の側面から問題点を発見するのが得意です。一方、ESLintはインデントや命名規則などのコーディングスタイルや、どのようなコードを書くべきか避けるべきかの意思決定、セキュリティやパフォーマンスに関する分野でのチェックが充実しています。どちらも相互補完的な関係です。したがって、コンパイラとリンターの両方を導入すると、より幅広いチェックが行えるようになります。
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptコンパイラとESLintの得意分野の比較
  prefs: []
  type: TYPE_NORMAL
- en: '|  | TypeScriptコンパイラ | ESLint |'
  prefs: []
  type: TYPE_TB
- en: '| --- | :-: | :-: |'
  prefs: []
  type: TYPE_TB
- en: '| 言語から言語への変換 | ○ |  |'
  prefs: []
  type: TYPE_TB
- en: '| 型のチェック | ○ |  |'
  prefs: []
  type: TYPE_TB
- en: '| 構文チェック | ○ | ○ |'
  prefs: []
  type: TYPE_TB
- en: '| コーディングスタイル |  | ○ |'
  prefs: []
  type: TYPE_TB
- en: '| コードの意思決定 |  | ○ |'
  prefs: []
  type: TYPE_TB
- en: '| セキュリティ |  | ○ |'
  prefs: []
  type: TYPE_TB
- en: '| パフォーマンス |  | ○ |'
  prefs: []
  type: TYPE_TB
- en: 学びをシェアする
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 🧵リンター：コードを静的解析し問題点を指摘するツール。ESLintはリンター。
  prefs: []
  type: TYPE_NORMAL
- en: 🔀コンパイラ：静的解析もするが、別言語への変換が主目的。tscはコンパイラ。
  prefs: []
  type: TYPE_NORMAL
- en: ⚖️tscとESLintの相違点
  prefs: []
  type: TYPE_NORMAL
- en: ・tsc：型のチェックが得意
  prefs: []
  type: TYPE_NORMAL
- en: ・ESLint：コーディング規約のチェックが得意
  prefs: []
  type: TYPE_NORMAL
- en: 『サバイバルTypeScript』より
  prefs: []
  type: TYPE_NORMAL
- en: '[この内容をツイートする](https://twitter.com/intent/tweet?text=%F0%9F%A7%B5%E3%83%AA%E3%83%B3%E3%82%BF%E3%83%BC%EF%BC%9A%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90%E3%81%97%E5%95%8F%E9%A1%8C%E7%82%B9%E3%82%92%E6%8C%87%E6%91%98%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB%E3%80%82ESLint%E3%81%AF%E3%83%AA%E3%83%B3%E3%82%BF%E3%83%BC%E3%80%82%0A%F0%9F%94%80%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%EF%BC%9A%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90%E3%82%82%E3%81%99%E3%82%8B%E3%81%8C%E3%80%81%E5%88%A5%E8%A8%80%E8%AA%9E%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B%E3%81%8C%E4%B8%BB%E7%9B%AE%E7%9A%84%E3%80%82tsc%E3%81%AF%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E3%80%82%0A%0A%E2%9A%96%EF%B8%8Ftsc%E3%81%A8ESLint%E3%81%AE%E7%9B%B8%E9%81%95%E7%82%B9%0A%E3%83%BBtsc%EF%BC%9A%E5%9E%8B%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%8C%E5%BE%97%E6%84%8F%0A%E3%83%BBESLint%EF%BC%9A%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%8C%E5%BE%97%E6%84%8F%0A%0A%E3%80%8E%E3%82%B5%E3%83%90%E3%82%A4%E3%83%90%E3%83%ABTypeScript%E3%80%8F%E3%82%88%E3%82%8A)'
  prefs: []
  type: TYPE_NORMAL
- en: ESLintでJavaScriptをリントしよう[​](#eslintでjavascriptをリントしよう "ESLintでJavaScriptをリントしよう
    への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここからはESLintの導入方法や使い方をチュートリアル形式で説明していきます。ぜひお手元の環境で実際にトライしてみてください。
  prefs: []
  type: TYPE_NORMAL
- en: プロジェクトを作成する[​](#プロジェクトを作成する "プロジェクトを作成する への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: まず、このチュートリアルに使うプロジェクトを作成します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: プロジェクトルートにpackage.jsonを作ってください。その内容は次のようにします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: ESLintを導入する[​](#eslintを導入する "ESLintを導入する への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLintはYarnでインストールしましょう。ESLintは開発時だけ使うパッケージなので、`yarn add`コマンドには`-D`オプションをつけてインストールします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 備考
  prefs: []
  type: TYPE_NORMAL
- en: Next.jsは最初からESLintが導入されています。実務でNext.jsプロジェクトでESLintを使う場合は、導入ステップは省略できます。
  prefs: []
  type: TYPE_NORMAL
- en: ESLintが正しくインストールされたか、バージョンを表示して確認してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: ちなみにこの`npx`コマンドは、Nodeモジュール(ライブラリ)の実行ファイルを起動するツールです。`npx eslint`を実行すると、`./node_modules/.bin/eslint`が実行されます。
  prefs: []
  type: TYPE_NORMAL
- en: ESLintの設定ファイルを作る[​](#eslintの設定ファイルを作る "ESLintの設定ファイルを作る への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLintの設定ファイル`.eslintrc.js`をプロジェクトルートに作ってください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 設定ファイルの内容は次のようにします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: この設定内容は次で説明します。
  prefs: []
  type: TYPE_NORMAL
- en: '`root`[​](#root "root への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`eslint`コマンドを実行したディレクトリを起点に、ディレクトリをさかのぼって設定ファイルを探す仕様がESLintにはあります。たとえば、ディレクトリ`/a/b/`でコマンドを実行した場合、ESLintは次の順で設定ファイルを探します。'
  prefs: []
  type: TYPE_NORMAL
- en: '`/a/b/.eslintrc.js`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/a/.eslintrc.js`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/.eslintrc.js`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: この探索はルートディレクトリに達するまでさかのぼります。探索中に複数の設定ファイルが見つかった場合は、設定内容がマージされていきます。この仕様は便利な反面、プロジェクト外の設定ファイルまで見にいってしまう危険性もあります。設定ファイルの探索範囲をしぼるためにも、`root`に`true`を設定するのがお勧めです。これがある設定ファイルが見つかると、これ以上ディレクトリをさかのぼらなくなります。
  prefs: []
  type: TYPE_NORMAL
- en: '`env`[​](#env "env への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`env`はチェック対象のJavaScript/TypeScriptコードがどの実行環境で使われるかをESLintに伝えるためのオプションです。これを設定すると、ESLintがグローバル変数を認識するようになります。たとえば、`browser:
    true`を設定すると、`window`や`alert`などのグローバル変数が認識されます。`es2021`を設定すると、ES2021までに導入されたグローバル変数が認識されます。他にも`node`などの指定ができます。指定できる実行環境の一覧は[公式ドキュメント](https://eslint.org/docs/user-guide/configuring/language-options#specifying-environments)をご覧ください。'
  prefs: []
  type: TYPE_NORMAL
- en: この設定は、ESLintの[no-undefルール](https://eslint.org/docs/rules/no-undef)に関係します。このルールは未定義の変数をチェックするルールです。グローバル変数は定義せずに利用できる変数です。ESLintはどのグローバル変数が定義済みかを知らないと、このルールを正しく適用できません。そのため、`env`オプションは正しく設定する必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: '`parserOptions`[​](#parseroptions "parseroptions への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`ecmaVersion`[​](#ecmaversion "ecmaversion への直接リンク")'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '`parserOptions`はチェック対象のJavaScriptがどの構文を使っているかをESLintに伝えるためのオプションです。`ecmaVersion`は、どのバージョンのECMAScriptの構文を使うかを指定します。`"latest"`を設定すると、最新のECMAScriptの構文を使うという指定になります。デフォルトではECMAScript
    5になっています。これはかなり古いバージョンです。実務ではES5で開発することはまれなので、ここは必ず指定しましょう。なお、`env`オプションで`es2022`などECMAScriptのバージョンを指定している場合、`ecmaVersion`にも自動的に`es2022`が設定されます。どちらも同じバージョンを指定する場合は、`ecmaVersion`の指定は省略できます。'
  prefs: []
  type: TYPE_NORMAL
- en: '`sourceType`[​](#sourcetype "sourcetype への直接リンク")'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: JavaScriptにはスクリプトモードとモジュールモードがあります。`sourceType`はJavaScriptコードがどちらのモードで書かれるかを指定するオプションです。モジュールモードでは、`import`文や`export`文といった追加の構文がサポートされます。`sourceType`のデフォルト値は`"script"`(スクリプトモード)です。実務で開発する場合は、モジュールモードでJavaScript/TypeScriptを書くほうが普通なので、`sourceType`には`"module"`(モジュールモード)を指定しましょう。
  prefs: []
  type: TYPE_NORMAL
- en: ESLintのルールを設定する[​](#eslintのルールを設定する "ESLintのルールを設定する への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLintには「ルール(rule)」という概念があります。ルールはチェックの最小単位です。たとえば、ルールには次のようなものがあります。
  prefs: []
  type: TYPE_NORMAL
- en: '`no-console`: `console.log`を書いてはならない'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camelcase`: 変数名はキャメルケースにすること'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`semi`: 文末セミコロンは省略しない'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLintには200を超えるルールがあります。[全ルールのリストは公式ドキュメント](https://eslint.org/docs/rules/)にあります。
  prefs: []
  type: TYPE_NORMAL
- en: ESLintでは、複数のルールを組み合わせてコーディング規約を組み立てていきます。
  prefs: []
  type: TYPE_NORMAL
- en: ルールには、重大度(severity)という重み付けが設定できます。重大度は、`off`、`warn`と`error`の3種類です。`off`はルールを無効化し、チェックを行わなくする設定です。`warn`は発見した問題を警告として報告します。報告はするものの、`eslint`コマンドの終了コードには影響しません。`error`は発見した問題をエラーとして報告し、終了コードを1にする効果があります。それぞれの重大度は、`0`から`2`までの数値で設定することもできます。
  prefs: []
  type: TYPE_NORMAL
- en: ESLintの重大度
  prefs: []
  type: TYPE_NORMAL
- en: '| 重大度 | 数値 | 効果 |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| off | 0 | ルールをオフにする |'
  prefs: []
  type: TYPE_TB
- en: '| warn | 1 | 警告するが終了コードに影響しない |'
  prefs: []
  type: TYPE_TB
- en: '| error | 2 | 警告し、終了コードを1にする |'
  prefs: []
  type: TYPE_TB
- en: 'ルールは`.eslintrc.js`の`rules`フィールドに、`ルール名: 重大度`のキーバリュー形式で書きます。まずは、`no-console`をルールに追加してみましょう。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'ルールによっては、細かく設定できるものもあります。たとえば、`camelcase`です。これは変数名がキャメルケースかをチェックするルールです。変数の種類によっては、キャメルケース以外が使いたい場合があります。たとえば、プロパティ名はアンダースコアを使いたいことがあるかもしれません。ウェブAPIによっては、JSONオブジェクトがスネークケース(`foo_bar`のようなアンダースコア区切り)を採用している場合があるからです。この場合、`ルール名:
    [重大度, 設定値]`のような配列形式で設定することで、細かいルール設定ができます。次の設定例は、プロパティ名に限ってはキャメルケースを強制しない設定です。試しに、この設定を`.eslintrc.js`に加えてみましょう。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: ここまでのふりかえり
  prefs: []
  type: TYPE_NORMAL
- en: package.jsonを作りました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eslintをインストールしました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 設定ファイル`.eslintrc.js`を作りました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 設定ファイルには次のルールを追加しました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no-console`: `console.log`をコードに残しておいてはいけない。'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camelcase`: 変数名はキャメルケースにすること(プロパティ名を除く)。'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScriptをチェックする[​](#javascriptをチェックする "JavaScriptをチェックする への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 設定ファイルが準備できたので、JavaScriptファイルを作り、ESLintでチェックしてみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: まず、`src`ディレクトリを作ってください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`src`ディレクトリにJavaScriptファイル`helloWorld.js`を作ってください。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`helloWorld.js`が加わったディレクトリ構造が、次のようになっているか確認してください。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '`helloWorld.js`の内容は次のようにします。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: この`helloWorld.js`は、わざとコーディング規約に違反するコードになっています。1行目の変数`hello_world`はキャメルケースになっていません。2行目では、使ってはいけない`console.log`が使われています。
  prefs: []
  type: TYPE_NORMAL
- en: では、ESLintでチェックを実行してみましょう。チェックは、`eslint`コマンドを起動するだけです。`eslint`コマンドは第一引数に、チェック対象のファイル名やディレクトリ名を指定します。ここでは、`src`ディレクトリ全体をチェックするために、引数は`src`にします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: これを実行すると、次の出力が表示されます。
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f045c7e20134070f7b29b93e20e26f34.png)'
  prefs: []
  type: TYPE_IMG
- en: 結果の読み方[​](#結果の読み方 "結果の読み方 への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: チェックした結果、問題点が見つかると表形式で詳細が表示されます。各行は4つの列からなります。左から順に、コードの行番号列番号、重大度、問題点の説明、ルール名です。
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a34d7df2450dbd5a393bd86b652fc13d.png)'
  prefs: []
  type: TYPE_IMG
- en: 結果に表示されている内容だけでは、どうして問題点になっているのか、どう直したらいいのかが分からないことがあります。その場合は、ルール名からESLintのドキュメントでルールの詳細を調べます。たとえば、上の結果ではルール名に`no-console`が挙がっていますが、この文字列をもとにルールの詳細を探します。`no-console`の詳細ページは、[https://eslint.org/docs/rules/no-console](https://eslint.org/docs/rules/no-console)にあります。
  prefs: []
  type: TYPE_NORMAL
- en: コードを修正してエラーを解消する[​](#コードを修正してエラーを解消する "コードを修正してエラーを解消する への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 上のコードをESLintでチェックした結果、2つの問題点が指摘されました。
  prefs: []
  type: TYPE_NORMAL
- en: '1行目: 変数名`hello_world`がキャメルケースではない'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2行目: `console.log`は使ってはいけない'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: このエラーを解消したいので、`helloWorld.js`を編集してみましょう。変数名`hello_world`は`helloWorld`に変更します。2行目の`console.log`は削除しましょう。修正後のコードは次のようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 再びESLintでチェックして、もう問題がなくなっているか確認してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: この実行結果に何も出力されなければ、問題点が解消されています。
  prefs: []
  type: TYPE_NORMAL
- en: コードを自動修正する[​](#コードを自動修正する "コードを自動修正する への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLintのルールの中には、コードの自動修正ができるものがあります。たとえば、[`semi`](https://eslint.org/docs/rules/semi)は、文末セミコロンをつけるつけないを定めるルールですが、これは自動修正に対応しています。ここでは、`semi`を使ってESLintの自動修正をためしてみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: まず、設定ファイル`.eslintrc.js`の`rules`に`semi`を追加します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: このルール設定では、`"always"`を指定しています。これは、文末セミコロンを必須にする設定です。
  prefs: []
  type: TYPE_NORMAL
- en: つぎに、`src/helloWorld.js`のコードのセミコロンを消して保存してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 自動修正の前にチェックだけを実行し、`semi`についての問題が報告されるか確認します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 次のような結果が表示されれば、追加した`semi`ルールが効いていることになります。
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/08bac0e9c2ce97388251538a40f0a038.png)'
  prefs: []
  type: TYPE_IMG
- en: ESLintでコードを自動修正するには、`eslint`コマンドに`--fix`オプションをつけます。次のコマンドを実行し、自動修正してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 自動修正が成功していれば、出力は何も表示されずに処理が終了します。自動修正が効いているかを確認するために、`src/helloWorld.js`を開いてみてください。文末にセミコロンが追加されているでしょうか。追加されていれば自動修正成功です。
  prefs: []
  type: TYPE_NORMAL
- en: ここまでのふりかえり
  prefs: []
  type: TYPE_NORMAL
- en: '`src/helloWorld.js`を作りました。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npx eslint src`を実行し、`src`ディレクトリをチェックしてみました。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: コードを手直しして、ESLintのチェックを通過する流れを体験しました。(`camelcase`, `no-console`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npx eslint src --fix`を実行し、ESLintの自動修正機能を試しました。(`semi`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLintにはどんなルールがある？[​](#eslintにはどんなルールがある "ESLintにはどんなルールがある？ への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ここまでのチュートリアルでは3つのルールを扱いました(`camelcase`、`no-console`、`semi`)。ESLintにはもっと多くのルールがあります。ルール数は200を超えます。
  prefs: []
  type: TYPE_NORMAL
- en: ルールの一覧は、[公式ドキュメントのRules](https://eslint.org/docs/rules/)にあります。この一覧では、どのルールが自動修正に対応しているかも確認できます。
  prefs: []
  type: TYPE_NORMAL
- en: Shareable configを導入する[​](#shareable-configを導入する "Shareable configを導入する への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLintのルールは数があまりにも多いため、ルールをひとつひとつ調べて導入していくのは大変です。そこで、お勧めなのがshareable configの活用です。
  prefs: []
  type: TYPE_NORMAL
- en: shareable configは、誰かが設定したルールのプリセットです。これを導入すると、自分でルールを設定する手間が省けます。
  prefs: []
  type: TYPE_NORMAL
- en: 有名なshareable configのひとつに、ESLint公式が公開している`eslint:recommended`があります。これを導入すると、[Rulesの一覧](https://eslint.org/docs/rules/)でチェックマークがついているルールが一括して有効化されます。これは公式が提供してるため有名ですが、有効になっているルールが少ないため、実務では物足りなさがあるかもしれません。
  prefs: []
  type: TYPE_NORMAL
- en: 第三者が公開しているshareable configもあり、次にあげるものは実務でも広く使われています。
  prefs: []
  type: TYPE_NORMAL
- en: '| 名前 | 作成 | 準拠するコーディング規約 |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [eslint-config-airbnb](https://www.npmjs.com/package/eslint-config-airbnb)
    | Airbnb | [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)、[Airbnb
    React/JSX Style Guide](https://github.com/airbnb/javascript/tree/master/react)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [eslint-config-airbnb-base](https://www.npmjs.com/package/eslint-config-airbnb-base)
    | Airbnb | [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [eslint-config-standard](https://www.npmjs.com/package/eslint-config-standard)
    | Standard JS | [JavaScript Standard Style](https://standardjs.com/rules.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [eslint-config-google](https://www.npmjs.com/package/eslint-config-google)
    | Google | [Google JavaScript Style Guide](https://google.github.io/styleguide/jsguide.html)
    |'
  prefs: []
  type: TYPE_TB
- en: 上のshareable configはコーディング規約に基づいて作成されているため、文書としてのコーディング規約とESLintの設定をセットでプロジェクトに導入できる利点があります。
  prefs: []
  type: TYPE_NORMAL
- en: このチュートリアルでは、人気のAirbnbのものを使っていきます。Airbnbの設定には、[eslint-config-airbnb](https://www.npmjs.com/package/eslint-config-airbnb)と[eslint-config-airbnb-base](https://www.npmjs.com/package/eslint-config-airbnb-base)の2つがあります。前者は、React向けの設定が追加で盛り込まれています。今回はReactは扱わないので、よりシンプルな後者を導入します。
  prefs: []
  type: TYPE_NORMAL
- en: 各shareable configのインストール件数の推移
  prefs: []
  type: TYPE_NORMAL
- en: '[https://npmcharts.com/compare/eslint-config-airbnb-base,eslint-config-airbnb,eslint-config-standard,eslint-config-google?interval=30&log=false&minimal=true](https://npmcharts.com/compare/eslint-config-airbnb-base,eslint-config-airbnb,eslint-config-standard,eslint-config-google?interval=30&log=false&minimal=true)'
  prefs: []
  type: TYPE_NORMAL
- en: まず、Yarnで`eslint-config-airbnb-base`をインストールします。その際、合わせて`eslint-plugin-import`も導入します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '次に、設定ファイル`.eslintrc.js`の`rules`を消します。その上で、`extends: ["airbnb-base"]`を追加してください。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: これで、shareable configの導入は完了です。
  prefs: []
  type: TYPE_NORMAL
- en: チェックを試すために、`src/helloWorld.js`を次の内容に置き換えてください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: このコードはAirbnbの規約にわざと違反する内容になっています。
  prefs: []
  type: TYPE_NORMAL
- en: 最後に`eslint`を実行し、チェックを動かしてみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: すると、次のような結果が得られるはずです。
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a46cc32944ca2c3df66d68a640cbb769.png)'
  prefs: []
  type: TYPE_IMG
- en: ここで報告されている問題点は、次のような内容になります。
  prefs: []
  type: TYPE_NORMAL
- en: '`import/prefer-default-export`: デフォルトエクスポートを使わければなりません。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camelcase`: 変数`hello_world`はキャメルケースでなければなりません。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quotes`: 文字列リテラルはシングルクォートで囲む必要があります。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no-console`: `console.log`は残しておいてはいけません。'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 続いて、shareable configのルールを上書きする方法を学んでいきましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '上の結果では、`import/prefer-default-export`違反が報告されていました。これは、名前付きエクスポート(`export const
    helloWorld = "..."`)ではなく、デフォルトエクスポート(`export default "..."`)にすべきというエラーです。しかし、ここでは名前付きエクスポートを使いたいので、このルールをオフにすることで警告されないようにしてみましょう。ルールを上書きするには、`.eslintrc.js`の`rules`に`"import/prefer-default-export":
    "off"`を追加します。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'さらに、文字列リテラルはダブルクォートのほうを使いたいので、`rules`に`quotes: ["error", "double"]`を追加します。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 再び`eslint`を実行して、ルールの上書きが効いているか確認してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 次のように、出力結果からデフォルトエクスポートと文字列クォートについての警告が消えていれば、ルールが効いています。
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6763d9af9023e1062fdbb2d643edde52.png)'
  prefs: []
  type: TYPE_IMG
- en: ルールを部分的に無効化する[​](#ルールを部分的に無効化する "ルールを部分的に無効化する への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`.eslintrc.js`で設定した規約はプロジェクト全体に及びます。コードを書いていると、どうしても規約を破らざるをえない部分が出てくることがあります。その場合は、コードのいち部分について、ルールを無効化することもできます。'
  prefs: []
  type: TYPE_NORMAL
- en: 部分的にルールを無効にするには、その行の前にコメント`eslint-disable-next-line`を追加します。たとえば、次の例ように書いておくと、変数名`hello_world`がキャメルケースでなくても、ESLintは警告を出さなくできます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: この方法はいざというときに知っておくとよいというものです。ルール無効化コメントだらけになってしまうと本末転倒です。節度を持って使うのが望ましいです。
  prefs: []
  type: TYPE_NORMAL
- en: ここまでのふりかえり
  prefs: []
  type: TYPE_NORMAL
- en: shareable configの`eslint-config-airbnb-base`を導入しました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: これのルールを一部上書きしてみました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`import/prefer-default-export`を無効化'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quotes`の指定をシングルクォートからダブルクォートに変更'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ルール無効化コメント`// eslint-disable-next-line`を試しました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLintでTypeScriptをリントしよう[​](#eslintでtypescriptをリントしよう "ESLintでTypeScriptをリントしよう
    への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここまでのチュートリアルでは、JavaScriptにESLintをかける方法を学んできました。ここからは、TypeScriptにESLintを使う方法を学んでいきます。
  prefs: []
  type: TYPE_NORMAL
- en: そもそもESLintでは、TypeScriptはチェックできません。これを補うのが[TypeScript ESLint](https://typescript-eslint.io/)です。これを導入するとESLintでTypeScriptがチェックできるようになります。
  prefs: []
  type: TYPE_NORMAL
- en: プロジェクトを作成する[​](#create-typescript-project "プロジェクトを作成する への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ここからは別のプロジェクトを作り、その新プロジェクトでチュートリアルを進めていきます。空のディレクトリを作り、その中に最低限のpackage.jsonを配置してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: TypeScriptを導入する[​](#typescriptを導入する "TypeScriptを導入する への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScript ESLintを使うには、TypeScript環境を構築しておく必要があります。まず、`typescript`を導入しておいてください。合わせてNode.jsの型定義`@types/node`もインストールしておきます。この型情報は、`.eslintrc.js`などのNode.js環境で実行されるファイルをESLintでチェックするときに利用されます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: TypeScriptコンパイラの設定ファイルも作っておきます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: tsconfig.jsonの内容はこうします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 続いて、`src`ディレクトリにTypeScriptファイル`helloWorld.ts`を追加します。内容は空で構いません。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: コンパイルもできるか試してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: コンパイルが成功すると、`dist/helloWorld.js`が生成されます。
  prefs: []
  type: TYPE_NORMAL
- en: この段階では、ディレクトリ構成が次のようになっているはずです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: TypeScript ESLintを導入する[​](#typescript-eslintを導入する "TypeScript ESLintを導入する への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLint本体と[TypeScript ESLint](https://typescript-eslint.io/)の両方をインストールします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: TypeScript ESLintは2つのパッケージから成ります。`@typescript-eslint/parser`は、ESLintにTypeScriptの構文を理解させるためのパッケージです。`@typescript-eslint/eslint-plugin`は、TypeScript向けのルールを追加するパッケージです。
  prefs: []
  type: TYPE_NORMAL
- en: ESLintがインストールされ、実行可能になっているかバージョンを表示して確認しましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: TypeScript ESLintにはどんなルールがある？[​](#typescript-eslintにはどんなルールがある "TypeScript ESLintにはどんなルールがある？
    への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLintの[200以上のルール](https://eslint.org/docs/rules/)に加えて、TypeScript ESLintを導入すると、100以上のルールが追加されます。追加されるルールの一覧は、[TypeScript
    ESLintのドキュメント](https://typescript-eslint.io/rules/)で確認できます。
  prefs: []
  type: TYPE_NORMAL
- en: ここまでのふりかえり
  prefs: []
  type: TYPE_NORMAL
- en: 新規プロジェクト`eslint-typescript-tutorial`を作成しました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScriptをインストールし、`tsconfig.json`を設定しました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 中身が空の`src/helloWorld.ts`を作成し、コンパイルしてみました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLintとTypeScript ESLintをインストールしました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript向けのshareable configを導入する[​](#typescript向けのshareable-configを導入する "TypeScript向けのshareable
    configを導入する への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: コーディング規約[Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)に準拠したshareable
    configをインストールします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '`eslint-config-airbnb-base`はJavaScript向けのshareable configです。これを上書きして、TypeScript
    ESLintのルールを追加したり、TypeScriptコンパイラがチェックするためESLintでチェックする必要がないルールを除外する設定を加えるのが`eslint-config-airbnb-typescript`です。`eslint-plugin-import`は依存関係上、導入が必要なパッケージです。'
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript ESLintの設定ファイルを作る[​](#typescript-eslintの設定ファイルを作る "TypeScript ESLintの設定ファイルを作る
    への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScript ESLintを動かすためには、次の2つの設定ファイルを作る必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: tsconfig.eslint.json
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .eslintrc.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: これらファイルをプロジェクトルートに作成してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: tsconfig.eslint.json[​](#tsconfigeslintjson "tsconfig.eslint.json への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: TypeScript ESLintは、チェック時に型情報を利用するために、TypeScriptコンパイラを使います。その際のコンパイラ設定を`tsconfig.eslint.json`に書きます。コンパイラ設定は、`tsconfig.json`の内容を`extends`で継承しつつ、上書きが必要なところだけ記述していきます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 今回は、TypeScriptファイルに加えて、ESLintの設定ファイル`.eslintrc.js`自体もESLintのチェック対象に含めたいので、`allowJs`の追加と`include`の上書きをします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '`".*.js"`は、`.eslintrc.js`などドット始まりのJSファイルにマッチするパターンです。パターンマッチにしておくことで、将来的に導入される他の設定ファイルもチェック対象に含めるようにできます。'
  prefs: []
  type: TYPE_NORMAL
- en: また、テストフレームワーク「Jest」の設定ファイルでは、`jest.config.js`のようにドットはじまりでないJSファイルもありえます。このようなファイルが追加されるのを見越して、`"*.js"`もあらかじめ追加しておくとよいです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: このように、TypeScript ESLintでチェックする対象は、`include`に追加していく必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: '`tsconfig.eslint.json`が正しく設定されているか、次のコマンドを実行して出力を確認してください。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 設定が正しいと、次のような出力になるはずです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: .eslintrc.js[​](#eslintrcjs ".eslintrc.js への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 次にESLintの設定ファイル`.eslintrc.js`を作ります。内容は次のとおりにしてください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '`root`、`env`、`parserOptions`の`ecmaVersion`と`sourceType`については[前のチュートリアル](#eslint%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B)の解説をご覧ください。まだ説明していない、追加のオプションは次で説明します。'
  prefs: []
  type: TYPE_NORMAL
- en: '`parser`[​](#parser "parser への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '`parser`で設定したパーサーを使って、ESLintはJavaScriptやTypeScriptの構文を解析します。上の例では、TypeScriptパーサーを指定しています。この指定がないと、ESLintはTypeScriptを解釈できず、エラーが発生します。'
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptはJavaScriptの構文を拡張した言語です。なので、このパーサーさえ入れておけば、TypeScriptに限らずJavaScriptのこのパーサーひとつで対応できます。要するに、このパーサーひとつで、TypeScriptとJavaScriptのファイルどちらもリントできるようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '`plugins`[​](#plugins "plugins への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: ESLintは公式が提供するルールに加えて、第三者が作成したルールを使うこともできます。第三者が作成したルールはプラグインという形で公開されています。この`plugins`フィールドにプラグインを追加すると、ルールが追加できます。上の例では、TypeScript
    ESLint独自のルールを追加するために、`@typescript-eslint`を設定しています。
  prefs: []
  type: TYPE_NORMAL
- en: '`parserOptions`[​](#parser-options-2 "parser-options-2 への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '`project`と`tsconfigRootDir`はTypeScript ESLint独自のオプションです。`tsconfigRootDir`はプロジェクトルートの絶対パスを指定します。`project`は、ESLint実行時に使うコンパイラ設定ファイルを`tsconfigRootDir`からの相対パスで指定します。これらの設定は、TypeScript
    ESLintが型情報を参照するために必要な設定です。'
  prefs: []
  type: TYPE_NORMAL
- en: '`ignorePatterns`[​](#ignorepatterns "ignorepatterns への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '`ignorePatterns`はESLintのチェック対象外にするファイルやディレクトリを指定するオプションです。TypeScriptプロジェクトでは、コンパイルで生成されるJavaScriptは、リントしないのが普通です。なので、`dist`ディレクトリをチェック対象外にしておきます。'
  prefs: []
  type: TYPE_NORMAL
- en: '`extends`[​](#extends "extends への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '`extends`はshareable configを使うための設定です。①は、JavaScript向けのルールです。これを拡張してTypeScript
    ESLintのルールにも範囲を広げたのが②です。①と②は上の順番でないと正しく設定されないので注意してください。'
  prefs: []
  type: TYPE_NORMAL
- en: ③はTypeScript ESLintが提供する推奨ルールセットで、型情報を要するルールを含みます。このルールセットでどのルールが有効になるかは、[公式ドキュメント](https://typescript-eslint.io/rules/)をご覧ください。
  prefs: []
  type: TYPE_NORMAL
- en: '`rules`[​](#rules "rules への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: ここの`rules`は、shareable configで有効化されたルールを上書きするのに用いています。TypeScript ESLintで追加されたルールは、`@typescript-eslint/`が接頭辞になります。
  prefs: []
  type: TYPE_NORMAL
- en: ここまでのふりかえり
  prefs: []
  type: TYPE_NORMAL
- en: コーディング規約Airbnb JavaScript Style Guideに準拠したshareable configをインストールしました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript ESLintの設定ファイルを作りました。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tsconfig.eslint.json
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: .eslintrc.js
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScriptをチェックする[​](#typescriptをチェックする "TypeScriptをチェックする への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScript ESLintを使う準備ができたので、いよいよTypeScriptをチェックしてみたいと思います。
  prefs: []
  type: TYPE_NORMAL
- en: まず、空だった`src/helloWorld.ts`に次のコードを書いて保存してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: そうしたら、ESLintを実行してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: すると、次の結果が出力されるはずです。
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c5d0e579aac90fb241224aedf2729a97.png)'
  prefs: []
  type: TYPE_IMG
- en: 2つの問題点が報告されています。1つ目は、変数名の命名規則が守られていない点についてのエラーです。2つ目は、`console.log`が使われている点についての警告です。
  prefs: []
  type: TYPE_NORMAL
- en: これらの問題点を修正してみましょう。`src/helloWorld.ts`を次の内容に変更し、保存してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 再びESLintを実行して、問題点が解消されているか確認してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 出力結果に何も表示されていなければ、問題点が解決されています。
  prefs: []
  type: TYPE_NORMAL
- en: 以上で、ESLintでTypeScriptをリントするチュートリアルは終わりです。
  prefs: []
  type: TYPE_NORMAL
- en: VS CodeとESLintを統合しよう[​](#vs-codeとeslintを統合しよう "VS CodeとESLintを統合しよう への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここでは、Visual Studio Code(VS Code)に、ESLintを組み込む方法を説明します。
  prefs: []
  type: TYPE_NORMAL
- en: ESLintはコマンドひとつでコーディング規約をチェックできるようになり、それだけでも便利です。しかし、VS CodeとESLintを統合するとさらに便利になります。コードを書いているときに、リアルタイムで問題点のフィードバックが得られるようになるからです。
  prefs: []
  type: TYPE_NORMAL
- en: ESLintのエラーがVS Codeに表示される様子
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6964081dae814a27176154ec01850a46.png)'
  prefs: []
  type: TYPE_IMG
- en: VS CodeとESLintを統合するには、[ESLintの拡張](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)をVisual
    Studio Codeのマーケットプレイスからインストールするだけです。
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c467a5d11f16d4f834efa91c2029e116.png)'
  prefs: []
  type: TYPE_IMG
- en: JetBrains IDEとESLintを統合しよう[​](#jetbrains-ideとeslintを統合しよう "JetBrains IDEとESLintを統合しよう
    への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここでは、WebStormなどのJetBrains IDEに、ESLintを組み込む方法を説明します。
  prefs: []
  type: TYPE_NORMAL
- en: ESLintはコマンドひとつでコーディング規約をチェックできるようになり、それだけでも便利です。しかし、JetBrains IDEとESLintを統合するとさらに便利になります。コードを書いているときに、リアルタイムで問題点のフィードバックが得られるようになるからです。
  prefs: []
  type: TYPE_NORMAL
- en: ESLintのエラーがWebStormに表示される様子
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/41382a4ac735de9e7508cb59da6cc945.png)'
  prefs: []
  type: TYPE_IMG
- en: WebStormは、ESLint統合機能がデフォルトで入っているので、プラグインなどをインストールする必要はありません。ESLintを有効にするには、「Preferences」を開き、検索に「eslint」と入力します(①)。絞り込まれたメニューから「ESLint」を開きます(②)。「Automatic
    ESLint configuration」にチェックを入れます(③)。最後に「OK」を押すと設定完了です(④)。
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69b0df351edf54b69047b50f4dfae0d6.png)'
  prefs: []
  type: TYPE_IMG
