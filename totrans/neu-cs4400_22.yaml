- en: de Bruijn IndexesTuesday, January 24th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 德布鲁因索引星期二，1月24日
- en: This whole story revolves around names, specifically, name capture is a problem
    that should always be avoided (it is one major source of PL headaches).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 整个故事都围绕着名称展开，具体来说，名称捕获是应该始终避免的问题（它是编程语言头疼的主要源泉之一）。
- en: But are names the only way we can use bindings?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但名称是我们唯一可以使用绑定的方式吗？
- en: 'There is a least one alternative way: note that the only thing we used names
    for are for references. We don’t really care what the name is, which is pretty
    obvious when we consider the two WAE expressions:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 还有至少一种替代方式：注意我们使用名称的唯一目的是用于引用。我们并不真的在乎名称是什么，当我们考虑这两个 WAE 表达式时，这是非常明显的：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'or the two Racket function definitions:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 或者两个 Racket 函数定义：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Both of these show a pair of expressions that we should consider as equal in
    some sense (this is called “alpha-equality”). The only thing we care about is
    what variable points where: the binding structure is the only thing that matters.
    In other words, as long as DrRacket produces the same arrows when we use Check
    Syntax, we consider the program to be the same, regardless of name choices (for
    argument names and local names, not for global names like `foo` in the above).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者都展示了一对我们在某种意义上应该视为相等的表达式（这被称为“α等价”）。我们关心的唯一事情是变量指向的位置：绑定结构是唯一重要的事情。换句话说，只要
    DrRacket 在我们使用“检查语法”时产生相同的箭头，我们就认为程序是相同的，不管名称选择如何（对于参数名称和局部名称而言，全局名称如上面的 `foo`
    不在此列）。
- en: 'The alternative idea uses this principle: if all we care about is where the
    arrows go, then simply get rid of the names… Instead of referencing a binding
    through its name, just specify which of the surrounding scopes we want to refer
    to. For example, instead of:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种替代方法是利用这个原则：如果我们关心的只是箭头的去向，那么只需摆脱名称… 不是通过名称引用绑定，而是指定我们想要引用的周围作用域。例如，而不是：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'we can use a new “reference” syntax — `[N]` — and use this instead of the above:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个新的“引用”语法 — `[N]` — 并使用这个语法代替上述的：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So the rules for `[N]` are — `[0]` is the value bound in the current scope,
    `[1]` is the value from the next one up etc.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于 `[N]` 的规则是 — `[0]` 是在当前作用域中绑定的值，`[1]` 是下一个作用域中的值等等。
- en: 'Of course, to do this translation, we have to know the precise scope rules.
    Two more complicated examples:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，为了进行这种翻译，我们必须知道精确的作用域规则。两个更复杂的例子：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'is translated to:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 'is translated to:'
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '(note how `x` appears as a different reference based on where it appeared in
    the original code.) Even more subtle:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: （注意 `x` 如何根据它在原始代码中出现的位置而作为不同的引用。）更微妙的是：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'is translated to:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 'is translated to:'
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: because the inner `with` does not have its own named expression in its scope,
    so the named expression is immediately in the scope of the outer `with`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因为内部的 `with` 没有自己的命名表达式在其作用域中，所以命名表达式立即在外部 `with` 的作用域中。
- en: 'This is called “de Bruijn Indexes”: instead of referencing identifiers by their
    name, we use an index into the surrounding binding context. The major disadvantage,
    as can be seen in the above examples, is that it is not convenient for humans
    to work with. Specifically, the same identifier is referenced using different
    numbers, which makes it hard to understand what some code is doing.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为“德布鲁因索引”：我们不使用标识符的名称，而是使用周围绑定上下文的索引。正如上面的例子所示，其主要缺点在于对人类来说不方便。具体来说，同一标识符使用不同的数字进行引用，这使得理解某些代码在做什么变得困难。
- en: 'However, practically all compilers use this for compiled code (think about
    stack pointers). For example, GCC compiles this code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，几乎所有的编译器都使用这种方法来生成编译后的代码（考虑一下栈指针）。例如，GCC 编译此代码：
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'to:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为：
- en: '[PRE9]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
