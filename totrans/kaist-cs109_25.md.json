["```\n<html>\n<head>\n<meta charset=\"utf-8\">\n<script src=\"kotlin.js\"></script>\n<script src=\"jscanvas.js\"></script>\n<script src=\"canvas.js\"></script>\n</head>\n<body onload=\"javascript:Kotlin.modules['canvas'].canvas.start();\">\n<canvas width=\"600\" height=\"300\" id=\"canvas\"></canvas>\n<div id=\"text\">This is a fun paragraph. </div>\n</body>\n</html>\n\n```", "```\nTypeError: Kotlin.modules.canvas is undefined\n\n```", "```\npackage canvas\n\nimport org.otfried.cs109js.JsCanvas\nimport org.otfried.cs109.Color\n\nimport kotlin.browser.document\nimport org.w3c.dom.*\n\nfun start() {\n  println(\"Hello World from Javascript\")\n\n  val canvas = JsCanvas(\"canvas\")\n  canvas.clear(Color.GREEN)\n\n  val text = document.getElementById(\"text\")\n  text?.appendChild(document.createTextNode(\"Was du hier liest ist kein Gedicht.\")) \n}\n\n```", "```\n$ kotlinc-js -output canvas.js canvas1.kt \n\n```", "```\nKotlin.modules['canvas'].canvas.start();\n\n```", "```\npackage canvas\n\nimport org.otfried.cs109js.JsCanvas\nimport org.otfried.cs109.Color\n\nobject Controller {\n  val canvas = JsCanvas(\"canvas\")\n  var x = 30.0\n  var y = 50.0\n  var alpha = 45.0\n\n  fun draw() {\n    canvas.clear(Color.WHITE)\n    canvas.setAlpha(48)\n    canvas.setColor(Color.GREEN)\n    canvas.drawRectangle(10.0, 10.0, 100.0, 100.0)\n    canvas.setAlpha(255) // opaque\n    for (i in 0 .. 5) {\n      for (j in 0 .. 5) {\n        canvas.setColor(Color(Math.floor(255-42.5*i), Math.floor(255-42.5*j), 0))\n        canvas.drawRectangle(150.0 + j*25.0, i*25.0, 25.0, 25.0)\n      }\n    }\n    canvas.translate(x, y)\n    canvas.setAlpha(128)\n    canvas.rotate(alpha)\n    canvas.setColor(Color.RED)\n    canvas.setFont(32.0)\n    canvas.drawText(\"Lovely\", 0.0, 0.0)\n  }\n}\n\nfun start() {\n  println(\"Canvas2 starting...\")\n  Controller.draw()\n}\n\n```", "```\n$ kotlinc-js -output canvas.js canvas2.kt \n\n```", "```\npackage canvas\n\nimport org.otfried.cs109js.JsCanvas\nimport org.otfried.cs109.Color\n\nimport kotlin.browser.window\nimport org.w3c.dom.events.*\n\nobject Controller {\n  val canvas = JsCanvas(\"canvas\")\n  var x = 30.0\n  var y = 50.0\n  var alpha = 45.0\n\n  fun draw() {\n    canvas.save()\n    canvas.clear(Color.WHITE)\n    canvas.setAlpha(48)\n    canvas.setColor(Color.GREEN)\n    canvas.drawRectangle(10.0, 10.0, 100.0, 100.0)\n    canvas.setAlpha(255) // opaque\n    for (i in 0 .. 5) {\n      for (j in 0 .. 5) {\n        canvas.setColor(Color(Math.floor(255-42.5*i), Math.floor(255-42.5*j), 0))\n        canvas.drawRectangle(150.0 + j*25.0, i*25.0, 25.0, 25.0)\n      }\n    }\n    canvas.translate(x, y)\n    canvas.setAlpha(128)\n    canvas.rotate(alpha)\n    canvas.setColor(Color.RED)\n    canvas.setFont(32.0)\n    canvas.drawText(\"Lovely\", 0.0, 0.0)\n    canvas.restore()\n  }\n\n  fun keyDown(e: Event) {\n    val ek = e as KeyboardEvent\n    var k = ek.key\n    if (k === undefined)\n      k = \"${ek.keyCode.toChar().toLowerCase()}\"\n    when (k) {\n    \"a\" -> x -= 3\n    \"s\" -> x += 3\n    \"w\" -> y -= 3\n    \"z\" -> y += 3\n    \"j\" -> alpha += 10.0\n    \"k\" -> alpha -= 10.0\n    else -> return\n    }\n    draw()\n    e.preventDefault()\n  }\n\n  fun mouseDown(e: Event) {\n    val em = e as MouseEvent\n    x = em.offsetX\n    y = em.offsetY\n    draw()\n  }\n}\n\nfun start() {\n  println(\"Canvas3 starting...\")\n  println(\"Active keys are aswzjk\")\n  Controller.draw()\n  window.addEventListener(\"keydown\", { Controller.keyDown(it) }, true)\n  window.addEventListener(\"mousedown\", { Controller.mouseDown(it) }, true)\n}\n\n```", "```\n$ kotlinc-js -output canvas.js canvas3.kt \n\n```", "```\npackage canvas\n\nimport org.otfried.cs109js.JsCanvas\nimport org.otfried.cs109.Color\n\nimport kotlin.browser.window\nimport org.w3c.dom.events.*\n\nobject Controller {\n  val canvas = JsCanvas(\"canvas\")\n  // change canvas size to fill entire browser window\n  init {\n    canvas.canvas.width = window.innerWidth.toInt() - 20\n    canvas.canvas.height = window.innerHeight.toInt() - 50\n  }\n\n  var x = 30.0\n  var y = 50.0\n  var alpha = 45.0\n  var animate = false\n  var timeStamp = 0.0\n\n  fun draw() {\n    canvas.save()\n    canvas.clear(Color.WHITE)\n    canvas.setAlpha(48)\n    canvas.setColor(Color.GREEN)\n    canvas.drawRectangle(10.0, 10.0, 100.0, 100.0)\n    canvas.setAlpha(255) // opaque\n    for (i in 0 .. 5) {\n      for (j in 0 .. 5) {\n        canvas.setColor(Color(Math.floor(255-42.5*i), Math.floor(255-42.5*j), 0))\n        canvas.drawRectangle(150.0 + j*25.0, i*25.0, 25.0, 25.0)\n      }\n    }\n    canvas.translate(x, y)\n    canvas.setAlpha(128)\n    canvas.rotate(alpha)\n    canvas.setColor(Color.RED)\n    canvas.setFont(32.0)\n    canvas.drawText(\"Lovely\", 0.0, 0.0)\n    canvas.restore()\n    if (animate)\n      window.requestAnimationFrame { animate(it) }\n  }\n\n  fun animate(s: Double) {\n    val delta = s - timeStamp\n    timeStamp = s\n    x += delta / 2.0\n    if (x > canvas.width)\n      x = 0.0\n    alpha += 0.3 * delta\n    if (alpha >= 360.0)\n      alpha = 0.0\n    draw()\n  }\n\n  fun keyDown(e: Event) {\n    val ek = e as KeyboardEvent\n    var k = ek.key\n    if (k === undefined)\n      k = \"${ek.keyCode.toChar().toLowerCase()}\"\n    when (k) {\n    \"a\" -> x -= 3\n    \"s\" -> x += 3\n    \"w\" -> y -= 3\n    \"z\" -> y += 3\n    \"j\" -> alpha += 10.0\n    \"k\" -> alpha -= 10.0\n    \"g\" -> {\n        if (!animate)\n          timeStamp = window.performance.now()\n        animate = !animate\n    }\n    else -> return\n    }\n    draw()\n    e.preventDefault()\n  }\n\n  fun mouseDown(e: Event) {\n    val em = e as MouseEvent\n    x = em.offsetX\n    y = em.offsetY\n    draw()\n  }\n}\n\nfun start() {\n  println(\"Canvas3 starting...\")\n  println(\"Active keys are aswzjk and g for animation\")\n  Controller.draw()\n  window.addEventListener(\"keydown\", { Controller.keyDown(it) }, true)\n  window.addEventListener(\"mousedown\", { Controller.mouseDown(it) }, true)\n}\n\n```"]