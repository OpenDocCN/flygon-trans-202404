["```\nsrc/pages/index.tsxtsx`const  <data-lsp lsp=\"const IndexPage: NextPage<Props>\">IndexPage</data-lsp>:  <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp><<data-lsp lsp=\"type Props = {\n    initialImageUrl: string;\n}\">Props</data-lsp>> = ({ <data-lsp lsp=\"(parameter) initialImageUrl: string\">initialImageUrl</data-lsp> }) => {  const [<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>,  <data-lsp lsp=\"const setImageUrl: React.Dispatch<React.SetStateAction<string>>\">setImageUrl</data-lsp>] =  <data-lsp lsp=\"(alias) useState<string>(initialState: string | (() => string)): [string, React.Dispatch<React.SetStateAction<string>>] (+1 overload)\nimport useState\">useState</data-lsp>(<data-lsp lsp=\"(parameter) initialImageUrl: string\">initialImageUrl</data-lsp>);  const [<data-lsp lsp=\"const loading: boolean\">loading</data-lsp>,  <data-lsp lsp=\"const setLoading: React.Dispatch<React.SetStateAction<boolean>>\">setLoading</data-lsp>] =  <data-lsp lsp=\"(alias) useState<boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch<React.SetStateAction<boolean>>] (+1 overload)\nimport useState\">useState</data-lsp>(false);  const  <data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp>  =  async () => {  <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(true);  const  <data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>  =  await  <data-lsp lsp=\"function fetchImage(): Promise<Image>\">fetchImage</data-lsp>();  <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>);  <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false); };  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>  <data-lsp lsp=\"(property) HTMLAttributes<HTMLDivElement>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"const styles: any\">styles</data-lsp>.<data-lsp lsp=\"any\">page</data-lsp>}> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp>  <data-lsp lsp=\"(property) DOMAttributes<HTMLButtonElement>.onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined\">onClick</data-lsp>={<data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp>} <data-lsp lsp=\"(property) HTMLAttributes<T>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"const styles: any\">styles</data-lsp>.<data-lsp lsp=\"any\">button</data-lsp>}> One more cat! </<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp>> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>  <data-lsp lsp=\"(property) HTMLAttributes<HTMLDivElement>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"const styles: any\">styles</data-lsp>.<data-lsp lsp=\"any\">frame</data-lsp>}> {<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp>  <data-lsp lsp=\"(property) ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} <data-lsp lsp=\"(property) HTMLAttributes<T>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"const styles: any\">styles</data-lsp>.<data-lsp lsp=\"any\">img</data-lsp>} />} </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> );};`\n```", "```\nsrc/pages/index.tsxtsx`const <data-lsp lsp=\"const IndexPage: NextPage<Props>\">IndexPage</data-lsp>: <data-lsp lsp=\"(alias) type NextPage<P = {}, IP = P> = React.ComponentType<P> &amp; {\n    getInitialProps?(context: NextPageContext): IP | Promise<IP>;\n}\nimport NextPage\">NextPage</data-lsp><<data-lsp lsp=\"type Props = {\n    initialImageUrl: string;\n}\">Props</data-lsp>> = ({ <data-lsp lsp=\"(parameter) initialImageUrl: string\">initialImageUrl</data-lsp> }) => {  const [<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>,  <data-lsp lsp=\"const setImageUrl: React.Dispatch<React.SetStateAction<string>>\">setImageUrl</data-lsp>] = <data-lsp lsp=\"(alias) useState<string>(initialState: string | (() => string)): [string, React.Dispatch<React.SetStateAction<string>>] (+1 overload)\nimport useState\">useState</data-lsp>(<data-lsp lsp=\"(parameter) initialImageUrl: string\">initialImageUrl</data-lsp>);  const [<data-lsp lsp=\"const loading: boolean\">loading</data-lsp>,  <data-lsp lsp=\"const setLoading: React.Dispatch<React.SetStateAction<boolean>>\">setLoading</data-lsp>] = <data-lsp lsp=\"(alias) useState<boolean>(initialState: boolean | (() => boolean)): [boolean, React.Dispatch<React.SetStateAction<boolean>>] (+1 overload)\nimport useState\">useState</data-lsp>(false);  const <data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp> =  async () => { <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(true);  const  <data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>  =  await <data-lsp lsp=\"function fetchImage(): Promise<Image>\">fetchImage</data-lsp>(); <data-lsp lsp=\"const setImageUrl: (value: React.SetStateAction<string>) => void\">setImageUrl</data-lsp>(<data-lsp lsp=\"const newImage: Image\">newImage</data-lsp>.<data-lsp lsp=\"(property) url: string\">url</data-lsp>); <data-lsp lsp=\"const setLoading: (value: React.SetStateAction<boolean>) => void\">setLoading</data-lsp>(false); };  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp> <data-lsp lsp=\"(property) HTMLAttributes<HTMLDivElement>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"const styles: any\">styles</data-lsp>.<data-lsp lsp=\"any\">page</data-lsp>}> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp> <data-lsp lsp=\"(property) DOMAttributes<HTMLButtonElement>.onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined\">onClick</data-lsp>={<data-lsp lsp=\"const handleClick: () => Promise<void>\">handleClick</data-lsp>} <data-lsp lsp=\"(property) HTMLAttributes<T>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"const styles: any\">styles</data-lsp>.<data-lsp lsp=\"any\">button</data-lsp>}> One more cat! </<data-lsp lsp=\"(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\">button</data-lsp>> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp> <data-lsp lsp=\"(property) HTMLAttributes<HTMLDivElement>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"const styles: any\">styles</data-lsp>.<data-lsp lsp=\"any\">frame</data-lsp>}> {<data-lsp lsp=\"const loading: boolean\">loading</data-lsp> || <<data-lsp lsp=\"(property) JSX.IntrinsicElements.img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>\">img</data-lsp> <data-lsp lsp=\"(property) ImgHTMLAttributes<HTMLImageElement>.src?: string | undefined\">src</data-lsp>={<data-lsp lsp=\"const imageUrl: string\">imageUrl</data-lsp>} <data-lsp lsp=\"(property) HTMLAttributes<T>.className?: string | undefined\">className</data-lsp>={<data-lsp lsp=\"const styles: any\">styles</data-lsp>.<data-lsp lsp=\"any\">img</data-lsp>} />} </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> );};`\n```"]