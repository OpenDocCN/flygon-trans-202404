["```\n{\n    \"object\": {\n        \"number\": 1,\n        \"string\": \"js-primer\",\n        \"boolean\": true,\n        \"null\": null,\n        \"array\": [1, 2, 3]\n    }\n} \n```", "```\n// JSON\u306f\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u306e\u307f\u3092\u8a31\u5bb9\u3059\u308b\u305f\u3081\u3001\u30b7\u30f3\u30b0\u30eb\u30af\u30a9\u30fc\u30c8\u3067JSON\u6587\u5b57\u5217\u3092\u8a18\u8ff0\nconst json = '{ \"id\": 1, \"name\": \"js-primer\" }';\nconst obj = JSON.parse(json);\nconsole.log(obj.id); // => 1\nconsole.log(obj.name); // => \"js-primer\" \n```", "```\nconst json = \"[1, 2, 3]\";\nconsole.log(JSON.parse(json)); // => [1, 2, 3] \n```", "```\nconst userInput = \"not json value\";\ntry {\n    const json = JSON.parse(userInput);\n} catch (error) {\n    console.log(\"\u30d1\u30fc\u30b9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\");\n} \n```", "```\nconst obj = { id: 1, name: \"js-primer\", bio: null };\nconsole.log(JSON.stringify(obj)); // => '{\"id\":1,\"name\":\"js-primer\",\"bio\":null}' \n```", "```\nconst obj = { id: 1, name: \"js-primer\", bio: null };\nconst replacer = (key, value) => {\n    if (value === null) {\n        return undefined;\n    }\n    return value;\n};\nconsole.log(JSON.stringify(obj, replacer)); // => '{\"id\":1,\"name\":\"js-primer\"}' \n```", "```\nconst obj = { id: 1, name: \"js-primer\", bio: null };\nconst replacer = [\"id\", \"name\"];\nconsole.log(JSON.stringify(obj, replacer)); // => '{\"id\":1,\"name\":\"js-primer\"}' \n```", "```\nconst obj = { id: 1, name: \"js-primer\" };\n// replacer\u5f15\u6570\u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u306fnull\u3092\u6e21\u3057\u3066\u7701\u7565\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\nconsole.log(JSON.stringify(obj, null, 2));\n/*\n{\n   \"id\": 1,\n   \"name\": \"js-primer\"\n}\n*/ \n```", "```\nconst obj = { id: 1, name: \"js-primer\" };\nconsole.log(JSON.stringify(obj, null, \"\\t\"));\n/*\n{\n   \"id\": 1,\n   \"name\": \"js-primer\"\n}\n*/ \n```", "```\n// \u5024\u304c\u95a2\u6570\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\nconsole.log(JSON.stringify({ x: function() {} })); // => '{}'\n// \u5024\u304cSymbol\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\nconsole.log(JSON.stringify({ x: Symbol(\"\") })); // => '{}'\n// \u5024\u304cundefined\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\nconsole.log(JSON.stringify({ x: undefined })); // => '{}'\n// \u914d\u5217\u306e\u5834\u5408\nconsole.log(JSON.stringify({ x: [10, function() {}] })); // => '{\"x\":[10,null]}'\n// \u30ad\u30fc\u304cSymbol\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\nJSON.stringify({ [Symbol(\"foo\")]: \"foo\" }); // => '{}'\n// \u5024\u304cRegExp\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\nconsole.log(JSON.stringify({ x: /foo/ })); // => '{\"x\":{}}'\n// \u5024\u304cMap\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\nconst map = new Map();\nmap.set(\"foo\", \"foo\");\nconsole.log(JSON.stringify({ x: map })); // => '{\"x\":{}}' \n```", "```\nconst obj = { foo: \"foo\" };\nobj.self = obj;\ntry {\n    JSON.stringify(obj);\n} catch (error) {\n    console.error(error); // => \"TypeError: Converting circular structure to JSON\"\n} \n```", "```\nconst obj = {\n    foo: \"foo\",\n    toJSON() {\n        return \"bar\";\n    }\n};\nconsole.log(JSON.stringify(obj)); // => '\"bar\"'\nconsole.log(JSON.stringify({ x: obj })); // => '{\"x\":\"bar\"}' \n```"]