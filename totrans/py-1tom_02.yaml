- en: REPL 环境
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python 的 REPL 环境
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 安装完 Python 之后都会提供一个 REPL－Read-Eval-Print Loop，不过 Python 默认的 REPL 环境实在是简陋， 很多开发者就开发了更加强大的
    REPL 工具，包括控制台和基于 web 的，其中比较有名的有：
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: IPython（IPython Notebook）
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BPython
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ptPython
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BPython
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BPython
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 相比 IPython，BPython 并不算得上功能强大，它的开发初衷仅在于部分增强原始 REPL 的交互性， 并没有向 IDE 发展的意思，以保持轻量、简单为目的。
    根据[官网](http://www.bpython-interpreter.org/about.html)介绍，它有这些特性：
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 行内的语法高亮
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 自动提示
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 函数参数提示
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 时光倒流（Rewind）
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 这里需要注意一下，BPython 的 rewind 并不是撤销，而是将之前执行过的命令在全新的环境中重新执行到上一步。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 历史输出
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 退出 BPython 时会将屏幕中所有的信息输出到 stdout，也就是说你可以在 shell 中看到之前看过的一切。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 支持 Python 3
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 自定义配置
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: IPython
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IPython
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IPython 是一个增强了交互能力的 Python REPL 环境，IPython v1-3 版本安装同时会安装 IPython notebook，相当于一个网页版的
    REPL 环境。 相对于原生的 Python REPL，IPython 主要提供了 Tab 自动补全、shell 命令交互、 快速文档查询等功能。 除了在
    shell 中使用外，Django shell 以及 PyCharm IDE 都提供了 IPython 的支持—— 安装了 IPython 后会选择其作为默认
    python shell。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 启动 & 退出
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 启动 IPython：`ipython`
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 启动 IPython notebook：`ipython notebook`
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 启动 IPython Qt shell：`ipython qtshell`
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 退出：双击 Ctrl-D 或者 `exit` 或者 `quit` 或者 `exit()`。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 特性
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tab 补全
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 原生的 Python shell 可以通过 `rlcompleter` 和 `readline` 库获得 Tab 补全能力：
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: IPython 的支持更强大一些。不过 IPython 的自动补全依旧是循环式的，需要菜单式的可以试试 ptpython。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 魔法指令（Magic Command）
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 魔法指令是 IPython 定义的命令，以提供 IPython 环境下与环境交互的能力，通常对应于 shell 命令。 你可以在 IPython 控制台中输入
    `ls` 或者 `%ls` 来查看当前目录文件。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 魔法指令通常以 `%` 开始，对于非 `%` 开始的魔法指令，IPython 会首先判断它是不是 Python 对象，如是对象则优先作为 Python
    对象处理。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 更全面的 magic 命令列表和功能介绍见[这里](https://damontallen.github.io/IPython-quick-ref-sheets/)。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 魔法指令中还包括了很多 Shell 命令，但并不是全部，IPython 也支持直接执行 Shell 命令，只需要以感叹号 `!` 起始，例如：`!ls`。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Plot
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 常见用法是配合 mathplotlib 等 plot 库和 IPython 插件，在终端、Qt console 或者 Notebook 中展示图表。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 内省
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 函数内省
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: IPython 提供了 `?` 和 `??` 命令用于内省，`?` 会显示函数简介，`??` 会连源代码一起显示 （如果可用的话）。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 输入历史
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`hist` 魔法指令可以用来输出输入历史：'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 要去掉历史记录中的序号，使用命令 `hist -n`：
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 这样你就可以方便的将代码复制到一个文本编辑器中。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 要在历史记录中搜索可以先输入一个匹配模型，然后按 `Ctrl-p` ，找到一个匹配后，继续按 `Ctrl-p` 会向后搜索再上一个匹配，`Ctrl-n`
    则是向前搜索最近的匹配。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 编辑
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 当在 Python 提示符下试验一个想法时，经常需要通过编辑器修改源代码（甚至是反复修改）。 在 IPython 下输入魔法指令 `edit` 就会根据环境变量
    `$EDITOR` 调用相应的编辑器。 如果 `$EDITOR` 为空，则会调用 vi（Unix）或记事本（Windows）。 要回到 IPython 提示符，直接退出编辑器即可。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '如果是保存并退出编辑器，输入编辑器的代码会在当前名字空间下被自动执行。 如果你不想这样，使用 `edit -x`。如果要再次编辑上次最后编辑的代码，使用
    `edit -p`。 在上一个特性里，我提到使用 `hist -n` 可以很容易的将代码拷贝到编辑器。 一个更简单的方法是 `edit` 加 Python
    列表的切片（slice）语法。假定 `hist` 输出如下:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 现在要将第 4、5、6 句代码导出到编辑器，只要输入：
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 交互调试
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 调试方面常用的魔术命令有 `ru`、`prun`、`time`、`timeit` 等等。更直接的方式是借助系统调试工具 pdb。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 快捷键及配置
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 作为库使用
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NotFinished，虽然ipython -p pysh提供了一个强大的shell替代品，但它缺少正确的job控制。在运行某个很耗时的任务时按下Ctrl-z将会停止IPython
    session而不是那个子进程。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 问题和方法
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 虽然作为标准 Python Shell 的替代，IPython 总的来说很完美，但仍然存在一些问题。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 粘贴代码缩进问题
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '默认情况下，IPython 会对粘贴的已排好缩进的代码重新缩进。例如下面的代码:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '会变成:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 这是因为 `autoindent` 默认是启用状态，可以用 magic 命令 `autoindent` 来开关自动缩进， 就像在 Vim 中设置 `set
    paste` 一样。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 或者，你也可以使用魔法指令 `%paste` 粘贴并执行剪贴板中的代码。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Vim 模式
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mac 下的快捷启动
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IPython wiki 提供了一段 [AppleScript launcher](https://github.com/ipython/ipython/wiki/Cookbook:-Launching-IPython-on-OSX#using-iterm2-and-an-applescript-launcher)
    脚本，把它写入 `~/bin/ipy` 在 Mac Spotlight 中输入 `ipy` 并回车就可以在新 iTerm 窗口中打开 IPython Shell。
    下面是我稍微修改后的版本：
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: IPython notebook
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 启动
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 在终端输入： `ipython notebook`
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: IPython notebook 的使用和 Vim 有些类似，分“命令模式”和“编辑模式”，切换方法同样为 `ESC` 键。 在命令模式下按 `h` 可以呼出帮助菜单，貌似不区分大小写。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: IPython notebook 的使用和 Vim 有些类似，分“命令模式”和“编辑模式”，切换方法同样为 `ESC` 键。 在命令模式下按 `h` 可以呼出帮助菜单，貌似不区分大小写。
- en: 设置 Django Shell
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Django Shell
- en: Django Shell 增强
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django Shell 增强
- en: 由于 Django 系统的特殊性，很难在 Shell 中直接导入 Django 应用，而只能使用它自己提供的 shell 命令。不过，并不是说就没有办法使用增强的第三方
    Shell 了，[Django-Extensions](http://django-extensions.readthedocs.org/) 插件提供了切换默认
    Shell 的能力。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Django 系统的特殊性，很难在 Shell 中直接导入 Django 应用，而只能使用它自己提供的 shell 命令。不过，并不是说就没有办法使用增强的第三方
    Shell 了，[Django-Extensions](http://django-extensions.readthedocs.org/) 插件提供了切换默认
    Shell 的能力。
- en: Django Extensions
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django Extensions
- en: '[Django-Extensions](http://django-extensions.readthedocs.org/) 是一个 Django 第三方插件集，其中囊括了很多实用的
    Django 插件， 当然也包括本文的主角 `shell_plus`。'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[Django-Extensions](http://django-extensions.readthedocs.org/) 是一个 Django 第三方插件集，其中囊括了很多实用的
    Django 插件， 当然也包括本文的主角 `shell_plus`。'
- en: shell_plus
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: shell_plus
- en: 装上插件后只需要将 `django_extensions` 加入 `INSTALLED_APPS` 列表中即可使用 IPython 作为默认 Shell（如果已安装的话）。
    需要注意的是，如果在 virtualenv 环境中使用 Django 的话，同样需要在 virtualenv 中安装 IPython。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 装上插件后只需要将 `django_extensions` 加入 `INSTALLED_APPS` 列表中即可使用 IPython 作为默认 Shell（如果已安装的话）。
    需要注意的是，如果在 virtualenv 环境中使用 Django 的话，同样需要在 virtualenv 中安装 IPython。
- en: 如果你偏好的是 BPython 的话，[shell_plus](http://django-extensions.readthedocs.org/en/latest/shell_plus.html#interactive-python-shells)
    同样提供了相关命令：`shell_plus`。使用方法：
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你偏好的是 BPython 的话，[shell_plus](http://django-extensions.readthedocs.org/en/latest/shell_plus.html#interactive-python-shells)
    同样提供了相关命令：`shell_plus`。使用方法：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 该命令对 IPython 同样适用：
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令对 IPython 同样适用：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 或者，有需要的话，也可以切换回原生 Python：
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，有需要的话，也可以切换回原生 Python：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 默认 Shell 的选择顺序是 BPython、IPython、Python。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 默认 Shell 的选择顺序是 BPython、IPython、Python。
- en: 你同样可以在文件中配置默认 Shell：
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你同样可以在文件中配置默认 Shell：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 设置
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置
- en: 默认情况下 shell_plus 会自动加载你的全部 Model，其中可能会出现重名或者其它问题， 你可以通过配置文件来修改它的加载机制。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下 shell_plus 会自动加载你的全部 Model，其中可能会出现重名或者其它问题， 你可以通过配置文件来修改它的加载机制。
- en: 注意：这里的设置只会作用于 shell_pull 而不会影响你的整改系统。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：这里的设置只会作用于 shell_pull 而不会影响你的整改系统。
- en: 将名为 blog 的 app 中 的 Messages 模块以 blog_messages 名加载
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将名为 blog 的 app 中 的 Messages 模块以 blog_messages 名加载
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 不加载 app 'sites' 中的全部 model，以及 app 'blog' 中的 'pictures' Model。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 不加载 app 'sites' 中的全部 model，以及 app 'blog' 中的 'pictures' Model。
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`SHELL_PLUS_MODEL_ALIASES` 和 `SHELL_PLUS_DONT_LOAD` 可以同时使用。'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`SHELL_PLUS_MODEL_ALIASES` 和 `SHELL_PLUS_DONT_LOAD` 可以同时使用。'
- en: 也可以像这样在运行 manage.py 时再设定不自动加载的模块：
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以像这样在运行 manage.py 时再设定不自动加载的模块：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 命令行和配置文件中的设置会合并后再生效。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行和配置文件中的设置会合并后再生效。
- en: IPython Notebook
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPython Notebook
- en: shell_plus 同时还支持 [IPython Notebook]：
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: shell_plus 同时还支持 [IPython Notebook]：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notebook 相关的设置参数有两个：`NOTEBOOK_ARGUMENTS` 和 `IPYTHON_ARGUMENTS`：
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Notebook 相关的设置参数有两个：`NOTEBOOK_ARGUMENTS` 和 `IPYTHON_ARGUMENTS`：
- en: '`NOTEBOOK_ARGUMENTS` 用于配置 IPython Notebook：'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`NOTEBOOK_ARGUMENTS` 用于配置 IPython Notebook：'
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`IPYTHON_ARGUMENTS` 用于设置 IPython：'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`IPYTHON_ARGUMENTS` 用于设置 IPython：'
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 使用 IPython Notebook 时同样会自动加载 Django settings 模块和数据库 Model。 其实现依赖于定制的 IPython
    插件，Django Extensions 默认会向 IPython Notebook 发送命令 `--ext django_extensions.management.notebook_extension`
    开启该功能， 你可以在 Django 设置中修改 `IPYTHON_ARGUMENTS` 参数覆盖该设置：
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 IPython Notebook 时同样会自动加载 Django settings 模块和数据库 Model。 其实现依赖于定制的 IPython
    插件，Django Extensions 默认会向 IPython Notebook 发送命令 `--ext django_extensions.management.notebook_extension`
    开启该功能， 你可以在 Django 设置中修改 `IPYTHON_ARGUMENTS` 参数覆盖该设置：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 开启自动加载可以通过引用 Django Extensions 默认 Notebook，或者复制它的自动加载代码到你自己的扩展中。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 开启自动加载可以通过引用 Django Extensions 默认 Notebook，或者复制它的自动加载代码到你自己的扩展中。
- en: IPython Notebook 扩展目前并不支持 `--dont-load` 选项。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: IPython Notebook 扩展目前并不支持 `--dont-load` 选项。
