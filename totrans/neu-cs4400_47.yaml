- en: The Y CombinatorTuesday, February 14th
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our `make-recursive` function is usually called the *fixpoint operator* or the
    *Y combinator*.
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks really simple when using the lazy version (remember: our version is
    the eager one):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that if we *do* allow a recursive definition for Y itself, then the definition
    can follow the definition that we’ve seen:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'And this all comes from the loop generated by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This expression, which is also called *Omega* (the `(lambda (x) (x x))` part
    by itself is usually called *omega* and then `(omega omega)` is *Omega*), is also
    the idea behind many deep mathematical facts. As an example for what it does,
    follow the next rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: (Note the usage of colon for the first and quotes for the second — what is the
    equivalent of that in the lambda expression?)
  prefs: []
  type: TYPE_NORMAL
- en: 'By itself, this just gets you stuck in an infinite loop, as Omega does, and
    the Y combinator adds `F` to that to get an infinite chain of applications — which
    is similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The main property of YTuesday, February 14th
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`fact-core` is a function that given any limited factorial, will generate a
    factorial that is good for one more integer input. Start with `777`, which is
    a factorial that is good for nothing (because it’s not a function), and you can
    get `fact0` as'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: and that’s a good factorial function only for an input of `0`. Use that with
    `fact-core` again, and you get
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: which is the factorial function when you only look at input values of `0` or
    `1`. In a similar way
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'is good for `0`…`2` — and we can continue as much as we want, except that we
    need to have an infinite number of applications — in the general case, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'which is good for `0`…`n`. The *real* factorial would be the result of running
    `fact-core` on itself infinitely, it *is* `fact-infinity`. In other words (here
    `fact` is the *real* factorial):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: but note that since this is really infinity, then
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'so we get an equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: and a solution for this is going to be the real factorial. The solution is the
    *fixed-point* of the `fact-core` function, in the same sense that `0` is the fixed
    point of the `sin` function because
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And the Y combinator does just that — it has this property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'or, using the more common name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This property encapsulates the real magical power of Y. You can see how it
    works: since `(Y f) = (f (Y f))`, we can add an `f` application to both sides,
    giving us `(f (Y f)) = (f (f (Y f)))`, so we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: and we can conclude that
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
