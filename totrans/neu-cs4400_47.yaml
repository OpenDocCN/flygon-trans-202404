- en: The Y CombinatorTuesday, February 14th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Y组合子星期二，2月14日
- en: Our `make-recursive` function is usually called the *fixpoint operator* or the
    *Y combinator*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`make-recursive`函数通常被称为*不动点运算符*或*Y组合子*。
- en: 'It looks really simple when using the lazy version (remember: our version is
    the eager one):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用懒惰版本时看起来非常简单（记住：我们的版本是急切的）：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that if we *do* allow a recursive definition for Y itself, then the definition
    can follow the definition that we’ve seen:'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，如果我们*允许*对Y本身进行递归定义，那么定义可以遵循我们所见过的定义：
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And this all comes from the loop generated by:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都来自于由以下循环生成的：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This expression, which is also called *Omega* (the `(lambda (x) (x x))` part
    by itself is usually called *omega* and then `(omega omega)` is *Omega*), is also
    the idea behind many deep mathematical facts. As an example for what it does,
    follow the next rule:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表达式，也被称为*Omega*（`(lambda (x) (x x))`部分本身通常被称为*omega*，然后`(omega omega)`是*Omega*），也是许多深层数学事实背后的理念。作为它所做的示例，遵循下一个规则：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: (Note the usage of colon for the first and quotes for the second — what is the
    equivalent of that in the lambda expression?)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: （注意第一个冒号和第二个引号的用法 — 在λ表达式中的等价物是什么？）
- en: 'By itself, this just gets you stuck in an infinite loop, as Omega does, and
    the Y combinator adds `F` to that to get an infinite chain of applications — which
    is similar to:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 单独来看，这只会让你陷入无限循环，就像Omega一样，而Y组合子将`F`添加到其中以获得无限的应用链 — 这类似于：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The main property of YTuesday, February 14th
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Y的主要属性星期二，2月14日
- en: '`fact-core` is a function that given any limited factorial, will generate a
    factorial that is good for one more integer input. Start with `777`, which is
    a factorial that is good for nothing (because it’s not a function), and you can
    get `fact0` as'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`fact-core`是一个函数，给定任何有限阶乘，将生成一个适用于一个更多整数输入的阶乘。从`777`开始，这是一个对于任何东西都不好的阶乘（因为它不是一个函数），你可以得到`fact0`如下：'
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: and that’s a good factorial function only for an input of `0`. Use that with
    `fact-core` again, and you get
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这只对输入为`0`时是一个好的阶乘函数。再次使用它与`fact-core`，你会得到
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: which is the factorial function when you only look at input values of `0` or
    `1`. In a similar way
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你只查看输入值为`0`或`1`时，这就是阶乘函数。
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'is good for `0`…`2` — and we can continue as much as we want, except that we
    need to have an infinite number of applications — in the general case, we have:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`0`…`2`是有用的 — 我们可以继续尽可能多，除了我们需要有无限次应用 — 在一般情况下，我们有：
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'which is good for `0`…`n`. The *real* factorial would be the result of running
    `fact-core` on itself infinitely, it *is* `fact-infinity`. In other words (here
    `fact` is the *real* factorial):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于`0`…`n`是有用的。*真正的*阶乘将是在自身上无限运行`fact-core`的结果，它*是*`fact-infinity`。换句话说（这里`fact`是*真正的*阶乘）：
- en: '[PRE9]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: but note that since this is really infinity, then
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，由于这实际上是无穷大，那么
- en: '[PRE10]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'so we get an equation:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们得到一个方程：
- en: '[PRE11]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: and a solution for this is going to be the real factorial. The solution is the
    *fixed-point* of the `fact-core` function, in the same sense that `0` is the fixed
    point of the `sin` function because
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 并且这个解决方案将是真正的阶乘。解决方案是`fact-core`函数的*不动点*，就像`0`是`sin`函数的不动点一样，因为
- en: '[PRE12]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And the Y combinator does just that — it has this property:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 而Y组合子正是这样做的 — 它具有这个属性：
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'or, using the more common name:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用更常见的名称：
- en: '[PRE14]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This property encapsulates the real magical power of Y. You can see how it
    works: since `(Y f) = (f (Y f))`, we can add an `f` application to both sides,
    giving us `(f (Y f)) = (f (f (Y f)))`, so we get:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性封装了Y的真正魔力。你可以看到它是如何工作的：因为`(Y f) = (f (Y f))`，我们可以在两边都加上`f`应用，得到`(f (Y f))
    = (f (f (Y f)))`，所以我们得到：
- en: '[PRE15]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: and we can conclude that
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以得出结论
- en: '[PRE16]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
