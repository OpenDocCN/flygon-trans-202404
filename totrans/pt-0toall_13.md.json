["```\n import torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\n\n# One hot encoding for each char in 'hello'\nh = [1, 0, 0, 0]\ne = [0, 1, 0, 0]\nl = [0, 0, 1, 0]\no = [0, 0, 0, 1]\n\n# One cell RNN input_dim (4) -> output_dim (2). sequence: 5\ncell = nn.RNN(input_size=4, hidden_size=2, batch_first=True)\n\n# (num_layers * num_directions, batch, hidden_size) whether batch_first=True or False\nhidden = Variable(torch.randn(1, 1, 2))\n\n# Propagate input through RNN\n# Input: (batch, seq_len, input_size) when batch_first=True\ninputs = Variable(torch.Tensor([h, e, l, l, o]))\nfor one in inputs:\n    one = one.view(1, 1, -1)\n    # Input: (batch, seq_len, input_size) when batch_first=True\n    out, hidden = cell(one, hidden)\n    print(\"one input size\", one.size(), \"out size\", out.size())\n\n# We can do the whole at once\n# Propagate input through RNN\n# Input: (batch, seq_len, input_size) when batch_first=True\ninputs = inputs.view(1, 5, -1)\nout, hidden = cell(inputs, hidden)\nprint(\"sequence input size\", inputs.size(), \"out size\", out.size())\n\n# hidden : (num_layers * num_directions, batch, hidden_size) whether batch_first=True or False\nhidden = Variable(torch.randn(1, 3, 2))\n\n# One cell RNN input_dim (4) -> output_dim (2). sequence: 5, batch 3\n# 3 batches 'hello', 'eolll', 'lleel'\n# rank = (3, 5, 4)\ninputs = Variable(torch.Tensor([[h, e, l, l, o],\n                                [e, o, l, l, l],\n                                [l, l, e, e, l]]))\n\n# Propagate input through RNN\n# Input: (batch, seq_len, input_size) when batch_first=True\n# B x S x I\nout, hidden = cell(inputs, hidden)\nprint(\"batch input size\", inputs.size(), \"out size\", out.size())\n\n# One cell RNN input_dim (4) -> output_dim (2)\ncell = nn.RNN(input_size=4, hidden_size=2)\n\n# The given dimensions dim0 and dim1 are swapped.\ninputs = inputs.transpose(dim0=0, dim1=1)\n# Propagate input through RNN\n# Input: (seq_len, batch_size, input_size) when batch_first=False (default)\n# S x B x I\nout, hidden = cell(inputs, hidden)\nprint(\"batch input size\", inputs.size(), \"out size\", out.size()) \n```"]