["```\nts`function  <data-lsp lsp=\"function firstChar(text: string | undefined): string\">firstChar</data-lsp>(<data-lsp lsp=\"(parameter) text: string | undefined\">text</data-lsp>:  string  |  undefined) {  // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044  return <data-lsp lsp=\"(parameter) text: string | undefined\">text</data-lsp>!.<data-lsp lsp=\"(method) String.charAt(pos: number): string\">charAt</data-lsp>(0);}`\n```", "```\nts`function <data-lsp lsp=\"function firstChar(text: string | undefined): string\">firstChar</data-lsp>(<data-lsp lsp=\"(parameter) text: string | undefined\">text</data-lsp>:  string  |  undefined) {  // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044  return <data-lsp lsp=\"(parameter) text: string | undefined\">text</data-lsp>!.<data-lsp lsp=\"(method) String.charAt(pos: number): string\">charAt</data-lsp>(0);}`\n```", "```\nts`class  <data-lsp lsp=\"class Example\">Example</data-lsp> {  public <data-lsp lsp=\"(property) Example.foo: number\">foo</data-lsp>!:  number;}`\n```", "```\nts`class <data-lsp lsp=\"class Example\">Example</data-lsp> {  public <data-lsp lsp=\"(property) Example.foo: number\">foo</data-lsp>!:  number;}`\n```", "```\nts`let <data-lsp lsp=\"let numbers: number[]\">numbers</data-lsp>!:  number[];`\n```", "```\nts`let <data-lsp lsp=\"let numbers: number[]\">numbers</data-lsp>!:  number[];`\n```", "```\njs`\"1\"  !=  1;false`\n```", "```\njs`\"1\"  !=  1;false`\n```", "```\njs`1  !==  \"1\";true`\n```", "```\njs`1  !==  \"1\";true`\n```", "```\njs`class  <data-lsp lsp=\"class ExampleClass\">ExampleClass</data-lsp> { #privateField; #privateMethod() {}  static #PRIVATE_STATIC_FIELD;  static #privateStaticMethod() {}}`\n```", "```\njs`class <data-lsp lsp=\"class ExampleClass\">ExampleClass</data-lsp> { #privateField; #privateMethod() {}  static #PRIVATE_STATIC_FIELD;  static #privateStaticMethod() {}}`\n```", "```\njs`const  <data-lsp lsp=\"const name: &quot;John&quot;\">name</data-lsp>  =  \"John\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`Hi, ${<data-lsp lsp=\"const name: void\">name</data-lsp>}.`);\"Hi, John.\"`\n```", "```\njs`const  <data-lsp lsp=\"const name: &quot;John&quot;\">name</data-lsp>  =  \"John\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(`Hi, ${<data-lsp lsp=\"const name: void\">name</data-lsp>}.`);\"Hi, John.\"`\n```", "```\njs`12  %  5;2`\n```", "```\njs`12  %  5;2`\n```", "```\njs`const  <data-lsp lsp=\"const a: 1\">a</data-lsp>  =  1;00000001const  <data-lsp lsp=\"const b: 5\">b</data-lsp>  =  5;00000101<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: 1\">a</data-lsp> & <data-lsp lsp=\"const b: 5\">b</data-lsp>);00000001// \u51fa\u529b: 1`\n```", "```\njs`const  <data-lsp lsp=\"const a: 1\">a</data-lsp>  =  1;00000001const  <data-lsp lsp=\"const b: 5\">b</data-lsp>  =  5;00000101<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: 1\">a</data-lsp> & <data-lsp lsp=\"const b: 5\">b</data-lsp>);00000001// \u51fa\u529b: 1`\n```", "```\nts`interface  <data-lsp lsp=\"interface Swordsman\">Swordsman</data-lsp> { <data-lsp lsp=\"(property) Swordsman.sword: string\">sword</data-lsp>:  string;}interface  <data-lsp lsp=\"interface Wizard\">Wizard</data-lsp> { <data-lsp lsp=\"(property) Wizard.magic: string\">magic</data-lsp>:  string;}type  <data-lsp lsp=\"type MagicalSwordsman = Swordsman &amp; Wizard\">MagicalSwordsman</data-lsp>  =  <data-lsp lsp=\"interface Swordsman\">Swordsman</data-lsp>  &  <data-lsp lsp=\"interface Wizard\">Wizard</data-lsp>;`\n```", "```\nts`interface <data-lsp lsp=\"interface Swordsman\">Swordsman</data-lsp> { <data-lsp lsp=\"(property) Swordsman.sword: string\">sword</data-lsp>:  string;}interface <data-lsp lsp=\"interface Wizard\">Wizard</data-lsp> { <data-lsp lsp=\"(property) Wizard.magic: string\">magic</data-lsp>:  string;}type <data-lsp lsp=\"type MagicalSwordsman = Swordsman &amp; Wizard\">MagicalSwordsman</data-lsp> = <data-lsp lsp=\"interface Swordsman\">Swordsman</data-lsp> & <data-lsp lsp=\"interface Wizard\">Wizard</data-lsp>;`\n```", "```\njs`let <data-lsp lsp=\"let a: number\">a</data-lsp> =  1;00000001const  <data-lsp lsp=\"const b: 5\">b</data-lsp>  =  5;00000101<data-lsp lsp=\"let a: number\">a</data-lsp> &= <data-lsp lsp=\"const b: 5\">b</data-lsp>;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let a: number\">a</data-lsp>);00000001// \u51fa\u529b: 1`\n```", "```\njs`let <data-lsp lsp=\"let a: number\">a</data-lsp> =  1;00000001const  <data-lsp lsp=\"const b: 5\">b</data-lsp>  =  5;00000101<data-lsp lsp=\"let a: number\">a</data-lsp> &= <data-lsp lsp=\"const b: 5\">b</data-lsp>;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let a: number\">a</data-lsp>);00000001// \u51fa\u529b: 1`\n```", "```\njs`<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(true  &&  true);true<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(true  &&  false);false<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(1  &&  \"\");\"\"`\n```", "```\njs`<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(true  &&  true);true<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(true  &&  false);false<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(1  &&  \"\");\"\"`\n```", "```\njs`let <data-lsp lsp=\"let a: boolean\">a</data-lsp> =  true;let <data-lsp lsp=\"let b: number\">b</data-lsp> =  1;<data-lsp lsp=\"let a: boolean\">a</data-lsp> &&= <data-lsp lsp=\"let b: number\">b</data-lsp>;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let a: boolean\">a</data-lsp>);1`\n```", "```\njs`let <data-lsp lsp=\"let a: boolean\">a</data-lsp> =  true;let <data-lsp lsp=\"let b: number\">b</data-lsp> =  1;<data-lsp lsp=\"let a: boolean\">a</data-lsp> &&= <data-lsp lsp=\"let b: number\">b</data-lsp>;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let a: boolean\">a</data-lsp>);1`\n```", "```\njs`(function () {})();//              ^^(function () {})();//              ^^(() => {})();//        ^^`\n```", "```\njs`(function () {})();//              ^^(function () {})();//              ^^(() => {})();//        ^^`\n```", "```\njs`function*  <data-lsp lsp=\"function numberGenerator(): Generator<1 | 2, void, unknown>\">numberGenerator</data-lsp>() {  yield  1;  yield  2;  yield  2;}`\n```", "```\njs`function* <data-lsp lsp=\"function numberGenerator(): Generator<1 | 2, void, unknown>\">numberGenerator</data-lsp>() {  yield  1;  yield  2;  yield  2;}`\n```", "```\njs`function*  <data-lsp lsp=\"function func1(): Generator<number, void, unknown>\">func1</data-lsp>() {  yield  123;}function*  <data-lsp lsp=\"function func2(): Generator<number, void, unknown>\">func2</data-lsp>() {  yield*  <data-lsp lsp=\"function func1(): Generator<number, void, unknown>\">func1</data-lsp>();  //   ^\u3053\u3053}`\n```", "```\njs`function* <data-lsp lsp=\"function func1(): Generator<number, void, unknown>\">func1</data-lsp>() {  yield  123;}function* <data-lsp lsp=\"function func2(): Generator<number, void, unknown>\">func2</data-lsp>() {  yield* <data-lsp lsp=\"function func1(): Generator<number, void, unknown>\">func1</data-lsp>();  //   ^\u3053\u3053}`\n```", "```\njs`2  **  3;8`\n```", "```\njs`2  **  3;8`\n```", "```\njs`+\"1\";1`\n```", "```\njs`+\"1\";1`\n```", "```\nts`type  <data-lsp lsp=\"type MyPartial<T> = { [k in keyof T]+?: T[k] | undefined; }\">MyPartial</data-lsp><<data-lsp lsp=\"(type parameter) T in type MyPartial<T>\">T</data-lsp>> = { [<data-lsp lsp=\"(type parameter) k\">k</data-lsp>  in  keyof  <data-lsp lsp=\"(type parameter) T in type MyPartial<T>\">T</data-lsp>]+?:  <data-lsp lsp=\"(type parameter) T in type MyPartial<T>\">T</data-lsp>[<data-lsp lsp=\"(type parameter) k\">k</data-lsp>];};type  <data-lsp lsp=\"type MyReadonly<T> = { +readonly [k in keyof T]: T[k]; }\">MyReadonly</data-lsp><<data-lsp lsp=\"(type parameter) T in type MyReadonly<T>\">T</data-lsp>> = {  +readonly [<data-lsp lsp=\"(type parameter) k\">k</data-lsp>  in  keyof  <data-lsp lsp=\"(type parameter) T in type MyReadonly<T>\">T</data-lsp>]:  <data-lsp lsp=\"(type parameter) T in type MyReadonly<T>\">T</data-lsp>[<data-lsp lsp=\"(type parameter) k\">k</data-lsp>];};`\n```", "```\nts`type <data-lsp lsp=\"type MyPartial<T> = { [k in keyof T]+?: T[k] | undefined; }\">MyPartial</data-lsp><<data-lsp lsp=\"(type parameter) T in type MyPartial<T>\">T</data-lsp>> = { [<data-lsp lsp=\"(type parameter) k\">k</data-lsp> in  keyof <data-lsp lsp=\"(type parameter) T in type MyPartial<T>\">T</data-lsp>]+?: <data-lsp lsp=\"(type parameter) T in type MyPartial<T>\">T</data-lsp>[<data-lsp lsp=\"(type parameter) k\">k</data-lsp>];};type <data-lsp lsp=\"type MyReadonly<T> = { +readonly [k in keyof T]: T[k]; }\">MyReadonly</data-lsp><<data-lsp lsp=\"(type parameter) T in type MyReadonly<T>\">T</data-lsp>> = {  +readonly [<data-lsp lsp=\"(type parameter) k\">k</data-lsp> in  keyof <data-lsp lsp=\"(type parameter) T in type MyReadonly<T>\">T</data-lsp>]: <data-lsp lsp=\"(type parameter) T in type MyReadonly<T>\">T</data-lsp>[<data-lsp lsp=\"(type parameter) k\">k</data-lsp>];};`\n```", "```\njs`let <data-lsp lsp=\"let x: number\">x</data-lsp> =  3;<data-lsp lsp=\"let x: number\">x</data-lsp>++;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let x: number\">x</data-lsp>);4`\n```", "```\njs`let <data-lsp lsp=\"let x: number\">x</data-lsp> =  3;<data-lsp lsp=\"let x: number\">x</data-lsp>++;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let x: number\">x</data-lsp>);4`\n```", "```\njs`function  <data-lsp lsp=\"function plus(x: any, y: any, z: any): any\">plus</data-lsp>(<data-lsp lsp=\"(parameter) x: any\">x</data-lsp>, <data-lsp lsp=\"(parameter) y: any\">y</data-lsp>, <data-lsp lsp=\"(parameter) z: any\">z</data-lsp>) {  return <data-lsp lsp=\"(parameter) x: any\">x</data-lsp> + <data-lsp lsp=\"(parameter) y: any\">y</data-lsp> + <data-lsp lsp=\"(parameter) z: any\">z</data-lsp>;}<data-lsp lsp=\"function plus(x: any, y: any, z: any): any\">plus</data-lsp>(1,  2,  3);`\n```", "```\njs`function <data-lsp lsp=\"function plus(x: any, y: any, z: any): any\">plus</data-lsp>(<data-lsp lsp=\"(parameter) x: any\">x</data-lsp>, <data-lsp lsp=\"(parameter) y: any\">y</data-lsp>, <data-lsp lsp=\"(parameter) z: any\">z</data-lsp>) {  return <data-lsp lsp=\"(parameter) x: any\">x</data-lsp> + <data-lsp lsp=\"(parameter) y: any\">y</data-lsp> + <data-lsp lsp=\"(parameter) z: any\">z</data-lsp>;}<data-lsp lsp=\"function plus(x: any, y: any, z: any): any\">plus</data-lsp>(1,  2,  3);`\n```", "```\njs`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];`\n```", "```\njs`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];`\n```", "```\njs`const  <data-lsp lsp=\"const data: {\n    property1: number;\n    property2: boolean;\n    property3: string;\n}\">data</data-lsp>  = { <data-lsp lsp=\"(property) property1: number\">property1</data-lsp>:  1, <data-lsp lsp=\"(property) property2: boolean\">property2</data-lsp>:  true, <data-lsp lsp=\"(property) property3: string\">property3</data-lsp>:  \"hello\",};`\n```", "```\njs`const  <data-lsp lsp=\"const data: {\n    property1: number;\n    property2: boolean;\n    property3: string;\n}\">data</data-lsp>  = { <data-lsp lsp=\"(property) property1: number\">property1</data-lsp>:  1, <data-lsp lsp=\"(property) property2: boolean\">property2</data-lsp>:  true, <data-lsp lsp=\"(property) property3: string\">property3</data-lsp>:  \"hello\",};`\n```", "```\nts`type  <data-lsp lsp=\"type Tuple = [number, string, boolean]\">Tuple</data-lsp>  = [number,  string,  boolean];`\n```", "```\nts`type <data-lsp lsp=\"type Tuple = [number, string, boolean]\">Tuple</data-lsp> = [number,  string,  boolean];`\n```", "```\njs`let <data-lsp lsp=\"let x: number\">x</data-lsp> =  -1;const  <data-lsp lsp=\"const a: boolean\">a</data-lsp>  = (<data-lsp lsp=\"let x: number\">x</data-lsp>++, <data-lsp lsp=\"let x: number\">x</data-lsp>++, <data-lsp lsp=\"let x: number\">x</data-lsp> >  0);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: boolean\">a</data-lsp>);true`\n```", "```\njs`let <data-lsp lsp=\"let x: number\">x</data-lsp> =  -1;const  <data-lsp lsp=\"const a: boolean\">a</data-lsp>  = (<data-lsp lsp=\"let x: number\">x</data-lsp>++, <data-lsp lsp=\"let x: number\">x</data-lsp>++, <data-lsp lsp=\"let x: number\">x</data-lsp> >  0);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: boolean\">a</data-lsp>);true`\n```", "```\njs`-\"1\";-1`\n```", "```\njs`-\"1\";-1`\n```", "```\nts`type  <data-lsp lsp=\"type MyRequired<T> = { [k in keyof T]-?: T[k]; }\">MyRequired</data-lsp><<data-lsp lsp=\"(type parameter) T in type MyRequired<T>\">T</data-lsp>> = { [<data-lsp lsp=\"(type parameter) k\">k</data-lsp>  in  keyof  <data-lsp lsp=\"(type parameter) T in type MyRequired<T>\">T</data-lsp>]-?:  <data-lsp lsp=\"(type parameter) T in type MyRequired<T>\">T</data-lsp>[<data-lsp lsp=\"(type parameter) k\">k</data-lsp>];};type  <data-lsp lsp=\"type Writable<T> = { -readonly [k in keyof T]: T[k]; }\">Writable</data-lsp><<data-lsp lsp=\"(type parameter) T in type Writable<T>\">T</data-lsp>> = {  -readonly [<data-lsp lsp=\"(type parameter) k\">k</data-lsp>  in  keyof  <data-lsp lsp=\"(type parameter) T in type Writable<T>\">T</data-lsp>]:  <data-lsp lsp=\"(type parameter) T in type Writable<T>\">T</data-lsp>[<data-lsp lsp=\"(type parameter) k\">k</data-lsp>];};`\n```", "```\nts`type <data-lsp lsp=\"type MyRequired<T> = { [k in keyof T]-?: T[k]; }\">MyRequired</data-lsp><<data-lsp lsp=\"(type parameter) T in type MyRequired<T>\">T</data-lsp>> = { [<data-lsp lsp=\"(type parameter) k\">k</data-lsp> in  keyof <data-lsp lsp=\"(type parameter) T in type MyRequired<T>\">T</data-lsp>]-?: <data-lsp lsp=\"(type parameter) T in type MyRequired<T>\">T</data-lsp>[<data-lsp lsp=\"(type parameter) k\">k</data-lsp>];};type <data-lsp lsp=\"type Writable<T> = { -readonly [k in keyof T]: T[k]; }\">Writable</data-lsp><<data-lsp lsp=\"(type parameter) T in type Writable<T>\">T</data-lsp>> = {  -readonly [<data-lsp lsp=\"(type parameter) k\">k</data-lsp> in  keyof <data-lsp lsp=\"(type parameter) T in type Writable<T>\">T</data-lsp>]: <data-lsp lsp=\"(type parameter) T in type Writable<T>\">T</data-lsp>[<data-lsp lsp=\"(type parameter) k\">k</data-lsp>];};`\n```", "```\njs`let <data-lsp lsp=\"let x: number\">x</data-lsp> =  3;<data-lsp lsp=\"let x: number\">x</data-lsp>--;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let x: number\">x</data-lsp>);2`\n```", "```\njs`let <data-lsp lsp=\"let x: number\">x</data-lsp> =  3;<data-lsp lsp=\"let x: number\">x</data-lsp>--;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let x: number\">x</data-lsp>);2`\n```", "```\njs`const  <data-lsp lsp=\"const object: {\n    property: number;\n}\">object</data-lsp>  = { <data-lsp lsp=\"(property) property: number\">property</data-lsp>:  123 };<data-lsp lsp=\"const object: {\n    property: number;\n}\">object</data-lsp>.<data-lsp lsp=\"(property) property: number\">property</data-lsp>;123`\n```", "```\njs`const  <data-lsp lsp=\"const object: {\n    property: number;\n}\">object</data-lsp>  = { <data-lsp lsp=\"(property) property: number\">property</data-lsp>:  123 };<data-lsp lsp=\"const object: {\n    property: number;\n}\">object</data-lsp>.<data-lsp lsp=\"(property) property: number\">property</data-lsp>;123`\n```", "```\njs`function  <data-lsp lsp=\"function sum(x: any, y: any, z: any): any\">sum</data-lsp>(<data-lsp lsp=\"(parameter) x: any\">x</data-lsp>, <data-lsp lsp=\"(parameter) y: any\">y</data-lsp>, <data-lsp lsp=\"(parameter) z: any\">z</data-lsp>) {  return <data-lsp lsp=\"(parameter) x: any\">x</data-lsp> + <data-lsp lsp=\"(parameter) y: any\">y</data-lsp> + <data-lsp lsp=\"(parameter) z: any\">z</data-lsp>;}const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function sum(x: any, y: any, z: any): any\">sum</data-lsp>(...<data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>));6`\n```", "```\njs`function <data-lsp lsp=\"function sum(x: any, y: any, z: any): any\">sum</data-lsp>(<data-lsp lsp=\"(parameter) x: any\">x</data-lsp>, <data-lsp lsp=\"(parameter) y: any\">y</data-lsp>, <data-lsp lsp=\"(parameter) z: any\">z</data-lsp>) {  return <data-lsp lsp=\"(parameter) x: any\">x</data-lsp> + <data-lsp lsp=\"(parameter) y: any\">y</data-lsp> + <data-lsp lsp=\"(parameter) z: any\">z</data-lsp>;}const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function sum(x: any, y: any, z: any): any\">sum</data-lsp>(...<data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>));6`\n```", "```\njs`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];const  <data-lsp lsp=\"const newNumbers: number[]\">newNumbers</data-lsp>  = [0,  ...<data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>,  4];<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const newNumbers: number[]\">newNumbers</data-lsp>);[ 0, 1, 2, 3, 4 ]`\n```", "```\njs`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];const  <data-lsp lsp=\"const newNumbers: number[]\">newNumbers</data-lsp>  = [0,  ...<data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>,  4];<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const newNumbers: number[]\">newNumbers</data-lsp>);[ 0, 1, 2, 3, 4 ]`\n```", "```\njs`const  <data-lsp lsp=\"const object: {\n    x: number;\n    y: number;\n}\">object</data-lsp>  = { <data-lsp lsp=\"(property) x: number\">x</data-lsp>:  1, <data-lsp lsp=\"(property) y: number\">y</data-lsp>:  2 };const  <data-lsp lsp=\"const newObject: {\n    z: number;\n    x: number;\n    y: number;\n}\">newObject</data-lsp>  = { ...<data-lsp lsp=\"const object: {\n    x: number;\n    y: number;\n}\">object</data-lsp>, <data-lsp lsp=\"(property) z: number\">z</data-lsp>:  3 };<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const newObject: {\n    z: number;\n    x: number;\n    y: number;\n}\">newObject</data-lsp>);{ x: 1, y: 2, z: 3 }`\n```", "```\njs`const  <data-lsp lsp=\"const object: {\n    x: number;\n    y: number;\n}\">object</data-lsp>  = { <data-lsp lsp=\"(property) x: number\">x</data-lsp>:  1, <data-lsp lsp=\"(property) y: number\">y</data-lsp>:  2 };const  <data-lsp lsp=\"const newObject: {\n    z: number;\n    x: number;\n    y: number;\n}\">newObject</data-lsp>  = { ...<data-lsp lsp=\"const object: {\n    x: number;\n    y: number;\n}\">object</data-lsp>, <data-lsp lsp=\"(property) z: number\">z</data-lsp>:  3 };<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const newObject: {\n    z: number;\n    x: number;\n    y: number;\n}\">newObject</data-lsp>);{ x: 1, y: 2, z: 3 }`\n```", "```\njs`function  <data-lsp lsp=\"function func(a: any, b: any, ...rest: any[]): any[]\">func</data-lsp>(<data-lsp lsp=\"(parameter) a: any\">a</data-lsp>, <data-lsp lsp=\"(parameter) b: any\">b</data-lsp>,  ...<data-lsp lsp=\"(parameter) rest: any[]\">rest</data-lsp>) {  return <data-lsp lsp=\"(parameter) rest: any[]\">rest</data-lsp>;}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function func(a: any, b: any, ...rest: any[]): any[]\">func</data-lsp>(1,  2,  3,  4,  5));[ 3, 4, 5 ]`\n```", "```\njs`function <data-lsp lsp=\"function func(a: any, b: any, ...rest: any[]): any[]\">func</data-lsp>(<data-lsp lsp=\"(parameter) a: any\">a</data-lsp>, <data-lsp lsp=\"(parameter) b: any\">b</data-lsp>,  ...<data-lsp lsp=\"(parameter) rest: any[]\">rest</data-lsp>) {  return <data-lsp lsp=\"(parameter) rest: any[]\">rest</data-lsp>;}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"function func(a: any, b: any, ...rest: any[]): any[]\">func</data-lsp>(1,  2,  3,  4,  5));[ 3, 4, 5 ]`\n```", "```\njs`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3,  4,  5];const [<data-lsp lsp=\"const first: number\">first</data-lsp>,  <data-lsp lsp=\"const second: number\">second</data-lsp>,  ...<data-lsp lsp=\"const rest: number[]\">rest</data-lsp>] = <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const rest: number[]\">rest</data-lsp>);[ 3, 4, 5 ]`\n```", "```\njs`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3,  4,  5];const [<data-lsp lsp=\"const first: number\">first</data-lsp>,  <data-lsp lsp=\"const second: number\">second</data-lsp>,  ...<data-lsp lsp=\"const rest: number[]\">rest</data-lsp>] = <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const rest: number[]\">rest</data-lsp>);[ 3, 4, 5 ]`\n```", "```\njs`const  <data-lsp lsp=\"const object: {\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n}\">object</data-lsp>  = { <data-lsp lsp=\"(property) a: number\">a</data-lsp>:  1, <data-lsp lsp=\"(property) b: number\">b</data-lsp>:  2, <data-lsp lsp=\"(property) c: number\">c</data-lsp>:  3, <data-lsp lsp=\"(property) d: number\">d</data-lsp>:  4 };const { <data-lsp lsp=\"const a: number\">a</data-lsp>,  <data-lsp lsp=\"const b: number\">b</data-lsp>,  ...<data-lsp lsp=\"const rest: {\n    c: number;\n    d: number;\n}\">rest</data-lsp> } = <data-lsp lsp=\"const object: {\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n}\">object</data-lsp>;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const rest: {\n    c: number;\n    d: number;\n}\">rest</data-lsp>);{ c: 3, d: 4 }`\n```", "```\njs`const  <data-lsp lsp=\"const object: {\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n}\">object</data-lsp>  = { <data-lsp lsp=\"(property) a: number\">a</data-lsp>:  1, <data-lsp lsp=\"(property) b: number\">b</data-lsp>:  2, <data-lsp lsp=\"(property) c: number\">c</data-lsp>:  3, <data-lsp lsp=\"(property) d: number\">d</data-lsp>:  4 };const { <data-lsp lsp=\"const a: number\">a</data-lsp>,  <data-lsp lsp=\"const b: number\">b</data-lsp>,  ...<data-lsp lsp=\"const rest: {\n    c: number;\n    d: number;\n}\">rest</data-lsp> } = <data-lsp lsp=\"const object: {\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n}\">object</data-lsp>;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const rest: {\n    c: number;\n    d: number;\n}\">rest</data-lsp>);{ c: 3, d: 4 }`\n```", "```\njs`/* \u30b3\u30e1\u30f3\u30c8 */`\n```", "```\njs`/* \u30b3\u30e1\u30f3\u30c8 */`\n```", "```\njs`const  <data-lsp lsp=\"const object: {\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n}\">object</data-lsp>  = { <data-lsp lsp=\"(property) a: number\">a</data-lsp>:  1, <data-lsp lsp=\"(property) b: number\">b</data-lsp>:  2, <data-lsp lsp=\"(property) c: number\">c</data-lsp>:  3, <data-lsp lsp=\"(property) d: number\">d</data-lsp>:  4 };`\n```", "```\njs`const  <data-lsp lsp=\"const object: {\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n}\">object</data-lsp>  = { <data-lsp lsp=\"(property) a: number\">a</data-lsp>:  1, <data-lsp lsp=\"(property) b: number\">b</data-lsp>:  2, <data-lsp lsp=\"(property) c: number\">c</data-lsp>:  3, <data-lsp lsp=\"(property) d: number\">d</data-lsp>:  4 };`\n```", "```\nts`const  <data-lsp lsp=\"const variable: number\">variable</data-lsp>:  number  =  20;`\n```", "```\nts`const  <data-lsp lsp=\"const variable: number\">variable</data-lsp>:  number  =  20;`\n```", "```\nts`function  <data-lsp lsp=\"function numberToString(x: number): string\">numberToString</data-lsp>(<data-lsp lsp=\"(parameter) x: number\">x</data-lsp>:  number):  string {  return  <data-lsp lsp=\"(parameter) x: number\">x</data-lsp>.<data-lsp lsp=\"(method) Number.toString(radix?: number | undefined): string\">toString</data-lsp>();}`\n```", "```\nts`function <data-lsp lsp=\"function numberToString(x: number): string\">numberToString</data-lsp>(<data-lsp lsp=\"(parameter) x: number\">x</data-lsp>:  number):  string {  return  <data-lsp lsp=\"(parameter) x: number\">x</data-lsp>.<data-lsp lsp=\"(method) Number.toString(radix?: number | undefined): string\">toString</data-lsp>();}`\n```", "```\nts`function  <data-lsp lsp=\"function func<T>(x: T): void\">func</data-lsp><<data-lsp lsp=\"(type parameter) T in func<T>(x: T): void\">T</data-lsp>>(<data-lsp lsp=\"(parameter) x: T\">x</data-lsp>:  <data-lsp lsp=\"(type parameter) T in func<T>(x: T): void\">T</data-lsp>) {}const  <data-lsp lsp=\"const result: void\">result</data-lsp>  =  <data-lsp lsp=\"function func<string>(x: string): void\">func</data-lsp><string>(\"hello\");`\n```", "```\nts`function <data-lsp lsp=\"function func<T>(x: T): void\">func</data-lsp><<data-lsp lsp=\"(type parameter) T in func<T>(x: T): void\">T</data-lsp>>(<data-lsp lsp=\"(parameter) x: T\">x</data-lsp>: <data-lsp lsp=\"(type parameter) T in func<T>(x: T): void\">T</data-lsp>) {}const  <data-lsp lsp=\"const result: void\">result</data-lsp>  = <data-lsp lsp=\"function func<string>(x: string): void\">func</data-lsp><string>(\"hello\");`\n```", "```\nHello.tsxtsx`function  <data-lsp lsp=\"function Hello(): React.JSX.Element\">Hello</data-lsp>() {  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>HELLO</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;}`\n```", "```\nHello.tsxtsx`function <data-lsp lsp=\"function Hello(): React.JSX.Element\">Hello</data-lsp>() {  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>HELLO</<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>>;}`\n```", "```\nts`let <data-lsp lsp=\"let someValue: unknown\">someValue</data-lsp>:  unknown  =  \"this is a string\";let <data-lsp lsp=\"let strLength: number\">strLength</data-lsp>:  number  = (<string><data-lsp lsp=\"let someValue: unknown\">someValue</data-lsp>).<data-lsp lsp=\"(property) String.length: number\">length</data-lsp>;`\n```", "```\nts`let <data-lsp lsp=\"let someValue: unknown\">someValue</data-lsp>:  unknown  =  \"this is a string\";let <data-lsp lsp=\"let strLength: number\">strLength</data-lsp>:  number  = (<string><data-lsp lsp=\"let someValue: unknown\">someValue</data-lsp>).<data-lsp lsp=\"(property) String.length: number\">length</data-lsp>;`\n```", "```\njs`const  <data-lsp lsp=\"const a: 1\">a</data-lsp>  =  1;00000001const  <data-lsp lsp=\"const b: 3\">b</data-lsp>  =  3;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: 1\">a</data-lsp> << <data-lsp lsp=\"const b: 3\">b</data-lsp>);00001000// \u51fa\u529b: 8`\n```", "```\njs`const  <data-lsp lsp=\"const a: 1\">a</data-lsp>  =  1;00000001const  <data-lsp lsp=\"const b: 3\">b</data-lsp>  =  3;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: 1\">a</data-lsp> << <data-lsp lsp=\"const b: 3\">b</data-lsp>);00001000// \u51fa\u529b: 8`\n```", "```\njs`let <data-lsp lsp=\"let a: number\">a</data-lsp> =  1;00000001const  <data-lsp lsp=\"const b: 3\">b</data-lsp>  =  3;<data-lsp lsp=\"let a: number\">a</data-lsp> <<= <data-lsp lsp=\"const b: 3\">b</data-lsp>;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let a: number\">a</data-lsp>);00001000// \u51fa\u529b: 8`\n```", "```\njs`let <data-lsp lsp=\"let a: number\">a</data-lsp> =  1;00000001const  <data-lsp lsp=\"const b: 3\">b</data-lsp>  =  3;<data-lsp lsp=\"let a: number\">a</data-lsp> <<= <data-lsp lsp=\"const b: 3\">b</data-lsp>;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"let a: number\">a</data-lsp>);00001000// \u51fa\u529b: 8`\n```", "```\njs`\"1\"  ==  1;true`\n```", "```\njs`\"1\"  ==  1;true`\n```", "```\njs`\"1\"  ===  1;false`\n```", "```\njs`\"1\"  ===  1;false`\n```", "```\njs`const  <data-lsp lsp=\"const increment: (num: any) => any\">increment</data-lsp>  = (<data-lsp lsp=\"(parameter) num: any\">num</data-lsp>) => <data-lsp lsp=\"(parameter) num: any\">num</data-lsp> +  1;`\n```", "```\njs`const <data-lsp lsp=\"const increment: (num: any) => any\">increment</data-lsp> = (<data-lsp lsp=\"(parameter) num: any\">num</data-lsp>) => <data-lsp lsp=\"(parameter) num: any\">num</data-lsp> +  1;`\n```", "```\njs`const  <data-lsp lsp=\"const a: 8\">a</data-lsp>  =  8;00001000const  <data-lsp lsp=\"const b: 3\">b</data-lsp>  =  3;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: 8\">a</data-lsp> >> <data-lsp lsp=\"const b: 3\">b</data-lsp>);00000001// \u51fa\u529b: 1`\n```", "```\njs`const  <data-lsp lsp=\"const a: 8\">a</data-lsp>  =  8;00001000const  <data-lsp lsp=\"const b: 3\">b</data-lsp>  =  3;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: 8\">a</data-lsp> >> <data-lsp lsp=\"const b: 3\">b</data-lsp>);00000001// \u51fa\u529b: 1`\n```", "```\njs`const  <data-lsp lsp=\"const a: -2\">a</data-lsp>  =  -2;11111111111111111111111111111110const  <data-lsp lsp=\"const b: 3\">b</data-lsp>  =  3;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: -2\">a</data-lsp> >>> <data-lsp lsp=\"const b: 3\">b</data-lsp>);00011111111111111111111111111111// \u51fa\u529b: 536870911`\n```", "```\njs`const  <data-lsp lsp=\"const a: -2\">a</data-lsp>  =  -2;11111111111111111111111111111110const  <data-lsp lsp=\"const b: 3\">b</data-lsp>  =  3;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: -2\">a</data-lsp> >>> <data-lsp lsp=\"const b: 3\">b</data-lsp>);00011111111111111111111111111111// \u51fa\u529b: 536870911`\n```", "```\nts`interface  <data-lsp lsp=\"interface User\">User</data-lsp> { <data-lsp lsp=\"(property) User.name: string\">name</data-lsp>:  string;  // name \u306f\u5fc5\u9808 <data-lsp lsp=\"(property) User.age?: number | undefined\">age</data-lsp>?:  number;  // age \u306f\u4efb\u610f}const  <data-lsp lsp=\"const user: User\">user</data-lsp>:  <data-lsp lsp=\"interface User\">User</data-lsp>  = { <data-lsp lsp=\"(property) User.name: string\">name</data-lsp>:  \"taro\" };`\n```", "```\nts`interface <data-lsp lsp=\"interface User\">User</data-lsp> { <data-lsp lsp=\"(property) User.name: string\">name</data-lsp>:  string;  // name \u306f\u5fc5\u9808 <data-lsp lsp=\"(property) User.age?: number | undefined\">age</data-lsp>?:  number;  // age \u306f\u4efb\u610f}const  <data-lsp lsp=\"const user: User\">user</data-lsp>: <data-lsp lsp=\"interface User\">User</data-lsp> = { <data-lsp lsp=\"(property) User.name: string\">name</data-lsp>:  \"taro\" };`\n```", "```\nts`function  <data-lsp lsp=\"function func(x?: number): void\">func</data-lsp>(<data-lsp lsp=\"(parameter) x: number | undefined\">x</data-lsp>?:  number) {}<data-lsp lsp=\"function func(x?: number): void\">func</data-lsp>();// x\u304c\u306a\u304f\u3066\u3082OK`\n```", "```\nts`function <data-lsp lsp=\"function func(x?: number): void\">func</data-lsp>(<data-lsp lsp=\"(parameter) x: number | undefined\">x</data-lsp>?:  number) {}<data-lsp lsp=\"function func(x?: number): void\">func</data-lsp>();// x\u304c\u306a\u304f\u3066\u3082OK`\n```", "```\njs`const  <data-lsp lsp=\"const user: null\">user</data-lsp>  =  null;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const user: null\">user</data-lsp>.<data-lsp lsp=\"any\">name</data-lsp>);Cannot read property 'name' of null<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const user: null\">user</data-lsp>?.<data-lsp lsp=\"any\">name</data-lsp>);undefined`\n```", "```\njs`const  <data-lsp lsp=\"const user: null\">user</data-lsp>  =  null;<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const user: null\">user</data-lsp>.<data-lsp lsp=\"any\">name</data-lsp>);Cannot read property 'name' of null<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const user: null\">user</data-lsp>?.<data-lsp lsp=\"any\">name</data-lsp>);undefined`\n```", "```\njs`<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"var undefined\">undefined</data-lsp>  ??  1);1<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(2  ??  1);2`\n```", "```\njs`<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"var undefined\">undefined</data-lsp>  ??  1);1<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(2  ??  1);2`\n```", "```\njs`const  <data-lsp lsp=\"const user1: {\n    name: undefined;\n}\">user1</data-lsp>  = { <data-lsp lsp=\"(property) name: undefined\">name</data-lsp>:  <data-lsp lsp=\"var undefined\">undefined</data-lsp> };<data-lsp lsp=\"const user1: {\n    name: undefined;\n}\">user1</data-lsp>.<data-lsp lsp=\"(property) name: undefined\">name</data-lsp> ??=  \"taro\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const user1: {\n    name: undefined;\n}\">user1</data-lsp>.<data-lsp lsp=\"(property) name: undefined\">name</data-lsp>);taroconst  <data-lsp lsp=\"const user2: {\n    name: string;\n}\">user2</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"kaori\" };<data-lsp lsp=\"const user2: {\n    name: string;\n}\">user2</data-lsp>.<data-lsp lsp=\"(property) name: string\">name</data-lsp> ??=  \"taro\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const user2: {\n    name: string;\n}\">user2</data-lsp>.<data-lsp lsp=\"(property) name: string\">name</data-lsp>);kaori`\n```", "```\njs`const  <data-lsp lsp=\"const user1: {\n    name: undefined;\n}\">user1</data-lsp>  = { <data-lsp lsp=\"(property) name: undefined\">name</data-lsp>:  <data-lsp lsp=\"var undefined\">undefined</data-lsp> };<data-lsp lsp=\"const user1: {\n    name: undefined;\n}\">user1</data-lsp>.<data-lsp lsp=\"(property) name: undefined\">name</data-lsp> ??=  \"taro\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const user1: {\n    name: undefined;\n}\">user1</data-lsp>.<data-lsp lsp=\"(property) name: undefined\">name</data-lsp>);taroconst  <data-lsp lsp=\"const user2: {\n    name: string;\n}\">user2</data-lsp>  = { <data-lsp lsp=\"(property) name: string\">name</data-lsp>:  \"kaori\" };<data-lsp lsp=\"const user2: {\n    name: string;\n}\">user2</data-lsp>.<data-lsp lsp=\"(property) name: string\">name</data-lsp> ??=  \"taro\";<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const user2: {\n    name: string;\n}\">user2</data-lsp>.<data-lsp lsp=\"(property) name: string\">name</data-lsp>);kaori`\n```", "```\njs`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];<data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>[0];1const  <data-lsp lsp=\"const object: {\n    a: number;\n    b: number;\n}\">object</data-lsp>  = { <data-lsp lsp=\"(property) a: number\">a</data-lsp>:  1, <data-lsp lsp=\"(property) b: number\">b</data-lsp>:  2 };<data-lsp lsp=\"const object: {\n    a: number;\n    b: number;\n}\">object</data-lsp>[\"a\"];1`\n```", "```\njs`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];<data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>[0];1const  <data-lsp lsp=\"const object: {\n    a: number;\n    b: number;\n}\">object</data-lsp>  = { <data-lsp lsp=\"(property) a: number\">a</data-lsp>:  1, <data-lsp lsp=\"(property) b: number\">b</data-lsp>:  2 };<data-lsp lsp=\"const object: {\n    a: number;\n    b: number;\n}\">object</data-lsp>[\"a\"];1`\n```", "```\njs`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];const [<data-lsp lsp=\"const first: number\">first</data-lsp>,  ...<data-lsp lsp=\"const rest: number[]\">rest</data-lsp>] = <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>;// \u5206\u5272\u4ee3\u5165<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const first: number\">first</data-lsp>, <data-lsp lsp=\"const rest: number[]\">rest</data-lsp>);1 [ 2, 3 ]// \u5206\u5272\u4ee3\u5165function  <data-lsp lsp=\"function func([first, ...rest]: [any, ...any[]]): void\">func</data-lsp>([<data-lsp lsp=\"(parameter) first: any\">first</data-lsp>,  ...<data-lsp lsp=\"(parameter) rest: any[]\">rest</data-lsp>]) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(parameter) first: any\">first</data-lsp>, <data-lsp lsp=\"(parameter) rest: any[]\">rest</data-lsp>);}<data-lsp lsp=\"function func([first, ...rest]: [any, ...any[]]): void\">func</data-lsp>([1,  2,  3]);1 [ 2, 3 ]`\n```", "```\njs`const  <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>  = [1,  2,  3];const [<data-lsp lsp=\"const first: number\">first</data-lsp>,  ...<data-lsp lsp=\"const rest: number[]\">rest</data-lsp>] = <data-lsp lsp=\"const numbers: number[]\">numbers</data-lsp>;// \u5206\u5272\u4ee3\u5165<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const first: number\">first</data-lsp>, <data-lsp lsp=\"const rest: number[]\">rest</data-lsp>);1 [ 2, 3 ]// \u5206\u5272\u4ee3\u5165function <data-lsp lsp=\"function func([first, ...rest]: [any, ...any[]]): void\">func</data-lsp>([<data-lsp lsp=\"(parameter) first: any\">first</data-lsp>,  ...<data-lsp lsp=\"(parameter) rest: any[]\">rest</data-lsp>]) {  <data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"(parameter) first: any\">first</data-lsp>, <data-lsp lsp=\"(parameter) rest: any[]\">rest</data-lsp>);}<data-lsp lsp=\"function func([first, ...rest]: [any, ...any[]]): void\">func</data-lsp>([1,  2,  3]);1 [ 2, 3 ]`\n```", "```\nts`type  <data-lsp lsp=\"type StringKeysAndStringValues = {\n    [key: string]: string;\n}\">StringKeysAndStringValues</data-lsp>  = { [<data-lsp lsp=\"(parameter) key: string\">key</data-lsp>:  string]:  string;};`\n```", "```\nts`type <data-lsp lsp=\"type StringKeysAndStringValues = {\n    [key: string]: string;\n}\">StringKeysAndStringValues</data-lsp> = { [<data-lsp lsp=\"(parameter) key: string\">key</data-lsp>:  string]:  string;};`\n```", "```\nts`let <data-lsp lsp=\"let names: string[]\">names</data-lsp>:  string[];type  <data-lsp lsp=\"type FooList = Foo[]\">FooList</data-lsp>  =  <data-lsp lsp=\"class Foo\">Foo</data-lsp>[];`\n```", "```\nts`let <data-lsp lsp=\"let names: string[]\">names</data-lsp>:  string[];type <data-lsp lsp=\"type FooList = Foo[]\">FooList</data-lsp> = <data-lsp lsp=\"class Foo\">Foo</data-lsp>[];`\n```", "```\njs`const  <data-lsp lsp=\"const lineBreak: &quot;\\n&quot;\">lineBreak</data-lsp>  =  \"\\n\";`\n```", "```\njs`const  <data-lsp lsp=\"const lineBreak: &quot;\\n&quot;\">lineBreak</data-lsp>  =  \"\\n\";`\n```", "```\njs`const  <data-lsp lsp=\"const a: 1\">a</data-lsp>  =  1;00000001const  <data-lsp lsp=\"const b: 5\">b</data-lsp>  =  5;00000101<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: 1\">a</data-lsp> ^ <data-lsp lsp=\"const b: 5\">b</data-lsp>);00000100// \u51fa\u529b: 4`\n```", "```\njs`const  <data-lsp lsp=\"const a: 1\">a</data-lsp>  =  1;00000001const  <data-lsp lsp=\"const b: 5\">b</data-lsp>  =  5;00000101<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const a: 1\">a</data-lsp> ^ <data-lsp lsp=\"const b: 5\">b</data-lsp>);00000100// \u51fa\u529b: 4`\n```", "```\njs`const  <data-lsp lsp=\"const hyakuman: 1000000\">hyakuman</data-lsp>  =  1_000_000;`\n```", "```\njs`const  <data-lsp lsp=\"const hyakuman: 1000000\">hyakuman</data-lsp>  =  1_000_000;`\n```", "```\njs`[1,  2,  3].<data-lsp lsp=\"(method) Array<number>.map<void>(callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any): void[]\">map</data-lsp>((<data-lsp lsp=\"(parameter) _: number\">_</data-lsp>, <data-lsp lsp=\"(parameter) index: number\">index</data-lsp>) => {  //  _ \u306f 1, 2, 3\u306e\u3088\u3046\u306a\u8981\u7d20\u5024\u3002\u305d\u308c\u3092\u4f7f\u308f\u306a\u3044\u3068\u3044\u3046\u610f\u5473\u3067 _ \u306b\u3057\u3066\u3044\u308b});`\n```", "```\njs`[1,  2,  3].<data-lsp lsp=\"(method) Array<number>.map<void>(callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any): void[]\">map</data-lsp>((<data-lsp lsp=\"(parameter) _: number\">_</data-lsp>, <data-lsp lsp=\"(parameter) index: number\">index</data-lsp>) => {  //  _ \u306f 1, 2, 3\u306e\u3088\u3046\u306a\u8981\u7d20\u5024\u3002\u305d\u308c\u3092\u4f7f\u308f\u306a\u3044\u3068\u3044\u3046\u610f\u5473\u3067 _ \u306b\u3057\u3066\u3044\u308b});`\n```", "``` \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30ea\u30c6\u30e9\u30eb (template literal) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#-\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30ea\u30c6\u30e9\u30eb-template-literal-js \"-\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30ea\u30c6\u30e9\u30eb-template-literal-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30ea\u30c6\u30e9\u30eb(\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u6587\u5b57\u5217)\u306e\u524d\u5f8c\u306b\u7f6e\u304b\u308c\u308b\u8a18\u53f7\u3067\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `{` \u30d6\u30ed\u30c3\u30af\u6587 (block) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#-\u30d6\u30ed\u30c3\u30af\u6587-block-js \"-\u30d6\u30ed\u30c3\u30af\u6587-block-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\nif\u6587\u3084for\u6587\u306a\u3069\u306e\u69cb\u6587\u306b\u4ed8\u968f\u3057\u3066\u4f7f\u308f\u308c\u308b\u8a18\u53f7\u3067\u3059\u3002\n\n```", "```\n\n```", "```\n\nif\u6587\u3084for\u6587\u306a\u3069\u306e\u69cb\u6587\u3092\u4f34\u308f\u306a\u3044\u30d6\u30ed\u30c3\u30af\u6587\u306f\u3001\u5358\u306b\u5909\u6570\u306e\u30b9\u30b3\u30fc\u30d7\u3092\u5206\u3051\u308b\u3053\u3068\u3092\u76ee\u7684\u306b\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `{` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5206\u5272\u4ee3\u5165 (destructuring assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#-\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5206\u5272\u4ee3\u5165-destructuring-assignment-js \"-\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5206\u5272\u4ee3\u5165-destructuring-assignment-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5206\u5272\u4ee3\u5165\u306b\u7528\u3044\u3089\u308c\u308b\u8a18\u53f7\u3067\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `|` \u30d3\u30c3\u30c8\u8ad6\u7406\u548c (bitwise or) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#-\u30d3\u30c3\u30c8\u8ad6\u7406\u548c-bitwise-or-js \"-\u30d3\u30c3\u30c8\u8ad6\u7406\u548c-bitwise-or-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u5de6\u306e\u5024\u3068\u53f3\u306e\u5024\u3067\u3069\u3061\u3089\u306e\u30d3\u30c3\u30c8\u304c1\u3067\u3042\u308b\u4f4d\u7f6e\u306e\u30d3\u30c3\u30c8\u30921\u306b\u3057\u307e\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `|` \u30e6\u30cb\u30aa\u30f3\u578b (union type) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[\u200b](#-\u30e6\u30cb\u30aa\u30f3\u578b-union-type-ts \"-\u30e6\u30cb\u30aa\u30f3\u578b-union-type-ts \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u8907\u6570\u306e\u578b\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u30e6\u30cb\u30aa\u30f3\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `|=` \u30d3\u30c3\u30c8\u8ad6\u7406\u548c\u4ee3\u5165 (bitwise or assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#-\u30d3\u30c3\u30c8\u8ad6\u7406\u548c\u4ee3\u5165-bitwise-or-assignment-js \"-\u30d3\u30c3\u30c8\u8ad6\u7406\u548c\u4ee3\u5165-bitwise-or-assignment-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u5de6\u306e\u5909\u6570\u306e\u5024\u3068\u53f3\u306e\u5024\u3067\u3069\u3061\u3089\u304b\u304c\u306e\u30d3\u30c3\u30c8\u304c1\u3067\u3042\u308b\u4f4d\u7f6e\u306e\u30d3\u30c3\u30c8\u30921\u306b\u3057\u305f\u7d50\u679c\u3092\u5de6\u306e\u5909\u6570\u306b\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\n### `||` \u8ad6\u7406\u548c (logical or) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#-\u8ad6\u7406\u548c-logical-or-js \"-\u8ad6\u7406\u548c-logical-or-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u5de6\u306e\u5024\u304ctruthy\u306a\u5834\u5408\u306f\u305d\u308c\u3092\u8fd4\u3057\u307e\u3059\u3002\u305d\u3046\u3067\u306a\u3044\u3068\u304d\u306f\u53f3\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u7279\u306bboolean\u5024\u306e\u5834\u5408\u306f\u3001\u3072\u3068\u3064\u3067\u3082`true`\u306e\u3068\u304d\u306b`true`\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306b`false`\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `||=` \u8ad6\u7406\u548c\u4ee3\u5165 (logical or assignment) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#-\u8ad6\u7406\u548c\u4ee3\u5165-logical-or-assignment-js \"-\u8ad6\u7406\u548c\u4ee3\u5165-logical-or-assignment-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u5de6\u306e\u5909\u6570\u3068\u53f3\u306e\u5024\u306e`||`\u8ad6\u7406\u548c\u306e\u7d50\u679c\u3092\u5de6\u306e\u5909\u6570\u306b\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `~` \u30d3\u30c3\u30c8\u5426\u5b9a\u6f14\u7b97\u5b50 (bitwise not) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#-\u30d3\u30c3\u30c8\u5426\u5b9a\u6f14\u7b97\u5b50-bitwise-not-js \"-\u30d3\u30c3\u30c8\u5426\u5b9a\u6f14\u7b97\u5b50-bitwise-not-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u30d3\u30c3\u30c8\u3092\u53cd\u8ee2\u3057\u307e\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `~~` Double Tilde ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#-double-tilde-js \"-double-tilde-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u30d3\u30c3\u30c8\u5426\u5b9a\u6f14\u7b97\u5b50\u30922\u3064\u91cd\u306d\u305f\u3082\u306e\u3067\u3001\u5c0f\u6570\u70b9\u4ee5\u4e0b\u3092\u6d88\u3057\u53bb\u308b\u8a08\u7b97\u3092\u3059\u308b\u30a4\u30c7\u30a3\u30aa\u30e0\u3067\u3059\u3002JavaScript\u306b\u3053\u3046\u3044\u3046\u6f14\u7b97\u5b50\u304c\u3042\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u6163\u7fd2\u7684\u306a\u3082\u306e\u3067\u3059\u3002double tilde\u306e\u8a08\u7b97\u7d50\u679c\u306f\u3001\u6b63\u306e\u6570\u306b\u3064\u3044\u3066\u306f`Math.floor`\u3068\u540c\u3058\u306b\u3001\u8ca0\u306e\u6570\u306f`Math.ceil`\u3068\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```", "```\n\n```", "```\n\n## \u30ad\u30fc\u30ef\u30fc\u30c9[\u200b](#\u30ad\u30fc\u30ef\u30fc\u30c9 \"\u30ad\u30fc\u30ef\u30fc\u30c9 \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n### `as` \u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3 (type assertion) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[\u200b](#as-\u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3-type-assertion-ts \"as-\u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3-type-assertion-ts \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\nTypeScript\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u304c\u89e3\u91c8\u3057\u305f\u578b\u3092\u4e0a\u66f8\u304d\u3059\u308b\u300c\u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u300d\u306b\u7528\u3044\u3089\u308c\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u3059\u3002\n\n### `as const` const\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3 (const assertion) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[\u200b](#as-const-const\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3-const-assertion-ts \"as-const-const\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3-const-assertion-ts \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u5909\u6570\u306b\u542b\u307e\u308c\u308b\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u5024\u3092\u305d\u306e\u30ea\u30c6\u30e9\u30eb\u578b\u3067\u5ba3\u8a00\u3057\u3001\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306b\u3057\u307e\u3059\u3002\n\n```", "```\nts`let <data-lsp lsp=\"let hello: string\" style=\"border-bottom:solid 2px lightgrey\">hello</data-lsp> =  \"hello\";` `let hello: stringlet <data-lsp lsp=\"let bye: &quot;bye&quot;\" style=\"border-bottom:solid 2px lightgrey\">bye</data-lsp> =  \"bye\"  as  <data-lsp lsp=\"type const = &quot;bye&quot;\">const</data-lsp>;` `let bye: \"bye\"const  <data-lsp lsp=\"const wolf: {\n    caniformia: string;\n}\" style=\"border-bottom:solid 2px lightgrey\">wolf</data-lsp>  = { <data-lsp lsp=\"(property) caniformia: string\">caniformia</data-lsp>:  \"Wolf\" };` `const wolf: {\n    caniformia: string;\n}const  <data-lsp lsp=\"const fox: {\n    readonly caniformia: &quot;Fox&quot;;\n}\" style=\"border-bottom:solid 2px lightgrey\">fox</data-lsp>  = { <data-lsp lsp=\"(property) caniformia: &quot;Fox&quot;\">caniformia</data-lsp>:  \"Fox\" } as  <data-lsp lsp=\"type const = {\n    readonly caniformia: &quot;Fox&quot;;\n}\">const</data-lsp>;` `const fox: {\n    readonly caniformia: \"Fox\";\n}`\n\n### `const` const ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#const-const-js \"const-const-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u30d6\u30ed\u30c3\u30af\u30b9\u30b3\u30fc\u30d7\u3092\u6301\u3064\u5b9a\u6570\u5b9a\u7fa9\u3067\u3059\u3002\u30b9\u30b3\u30fc\u30d7\u5185\u3067\u306f\u518d\u4ee3\u5165\u3082\u518d\u5ba3\u8a00\u3082\u3067\u304d\u307e\u305b\u3093\u3002\n\n### `get` \u30b2\u30c3\u30bf\u30fc (get) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#get-\u30b2\u30c3\u30bf\u30fc-get-js \"get-\u30b2\u30c3\u30bf\u30fc-get-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u53c2\u7167\u3055\u308c\u305f\u3068\u304d\u306b\u5bfe\u5fdc\u3059\u308b\u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `in` in\u6f14\u7b97\u5b50 (in operator) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#in-in\u6f14\u7b97\u5b50-in-operator-js \"in-in\u6f14\u7b97\u5b50-in-operator-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3042\u308b\u5834\u5408\u306b`true`\u3092\u8fd4\u3059\u6f14\u7b97\u5b50\u3067\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `in` for-in\u69cb\u6587 ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#in-for-in\u69cb\u6587-js \"in-for-in\u69cb\u6587-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5217\u6319\u53ef\u80fd\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30eb\u30fc\u30d7\u3059\u308bfor-in\u69cb\u6587\u3067\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `in` Mapped Types ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[\u200b](#in-mapped-types-ts \"in-mapped-types-ts \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\nMapped Types\u306b\u73fe\u308c\u308b`in`\u3067\u3059\u3002\n\n```", "```\n\n```", "```\n\n [## \ud83d\udcc4\ufe0f Mapped Types\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u578b\u3067\u306f\u8a2d\u5b9a\u6642\u306f\u3069\u306e\u3088\u3046\u306a\u30ad\u30fc\u3082\u81ea\u7531\u306b\u8a2d\u5b9a\u3067\u304d\u3066\u3057\u307e\u3044\u3001\u30a2\u30af\u30bb\u30b9\u6642\u306f\u6bce\u56deundefined\u304b\u3069\u3046\u304b\u306e\u578b\u30c1\u30a7\u30c3\u30af\u304c\u5fc5\u8981\u3067\u3059\u3002\u5165\u529b\u306e\u5f62\u5f0f\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3042\u308c\u3070Mapped Types\u306e\u4f7f\u7528\u3092\u691c\u8a0e\u3067\u304d\u307e\u3059\u3002](/reference/type-reuse/mapped-types) \n\n### `is` \u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u95a2\u6570\u306e\u4e00\u90e8 (user-defined type guard) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[\u200b](#is-\u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u95a2\u6570\u306e\u4e00\u90e8-user-defined-type-guard-ts \"is-\u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u95a2\u6570\u306e\u4e00\u90e8-user-defined-type-guard-ts \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u578b\u30ac\u30fc\u30c9\u306b\u7528\u3044\u308b\u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u90e8\u5206\u306b\u7528\u3044\u3089\u308c\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `keyof` keyof\u578b\u6f14\u7b97\u5b50 (keyof) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[\u200b](#keyof-keyof\u578b\u6f14\u7b97\u5b50-keyof-ts \"keyof-keyof\u578b\u6f14\u7b97\u5b50-keyof-ts \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u578b\u304b\u3089\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u3092\u578b\u3068\u3057\u3066\u8fd4\u3059\u578b\u6f14\u7b97\u5b50\u3067\u3059\u3002\n\n### `n` bigint\u30ea\u30c6\u30e9\u30eb (bigint literal) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#n-bigint\u30ea\u30c6\u30e9\u30eb-bigint-literal-js \"n-bigint\u30ea\u30c6\u30e9\u30eb-bigint-literal-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u6570\u5b57\u304cbigint\u30ea\u30c6\u30e9\u30eb\u3067\u3042\u308b\u3053\u3068\u3092\u8868\u3059\u306e\u306b\u7528\u3044\u308b\u8a18\u53f7\u3067\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `typeof` typeof\u6f14\u7b97\u5b50 (typeof) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#typeof-typeof\u6f14\u7b97\u5b50-typeof-js \"typeof-typeof\u6f14\u7b97\u5b50-typeof-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u4e0e\u3048\u3089\u308c\u305f\u5024\u306e\u578b\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `typeof` typeof\u578b\u6f14\u7b97\u5b50 (typeof) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[\u200b](#typeof-typeof\u578b\u6f14\u7b97\u5b50-typeof-ts \"typeof-typeof\u578b\u6f14\u7b97\u5b50-typeof-ts \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u5909\u6570\u304b\u3089\u578b\u3092\u62bd\u51fa\u3059\u308b\u6f14\u7b97\u5b50\u3067\u3059\u3002\n\n### `set` \u30bb\u30c3\u30bf\u30fc (set) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#set-\u30bb\u30c3\u30bf\u30fc-set-js \"set-\u30bb\u30c3\u30bf\u30fc-set-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5909\u66f4\u3059\u308b\u3068\u304d\u306b\u5bfe\u5fdc\u3059\u308b\u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `void` void\u6f14\u7b97\u5b50 (void) ![js](../Images/f2bff360fa9c865072b1586c301e7b00.png)[\u200b](#void-void\u6f14\u7b97\u5b50-void-js \"void-void\u6f14\u7b97\u5b50-void-js \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u623b\u308a\u5024\u3092`undefined`\u306b\u3057\u307e\u3059\u3002\n\n```", "```\n\n```", "```\n\n### `void` void\u578b (void) ![ts](../Images/e72a734a64b7040e4ddce8739b9f891f.png)[\u200b](#void-void\u578b-void-ts \"void-void\u578b-void-ts \u3078\u306e\u76f4\u63a5\u30ea\u30f3\u30af\")\n\n\u623b\u308a\u5024\u304c`undefined`\u3042\u308b\u3044\u306f\u306a\u3044\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```", "```\n\n```", "```\n\n [## \ud83d\udcc4\ufe0f \u623b\u308a\u5024\u304c\u306a\u3044\u95a2\u6570\u3068void\u578b\n\nTypeScript\u3067\u623b\u308a\u5024\u304c\u306a\u3044\u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u578b\u6ce8\u91c8\u3059\u308b\u306b\u306fvoid\u578b\u3092\u7528\u3044\u307e\u3059\u3002void\u578b\u306f\u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u578b\u6ce8\u91c8\u3059\u308b\u305f\u3081\u306b\u3042\u308b\u7279\u5225\u306a\u578b\u3067\u3059\u3002](/reference/functions/void-type)    \n\n```"]