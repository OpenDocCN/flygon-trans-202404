- en: Make the Invisible More Visible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使不可见的东西更可见
- en: Make the Invisible More Visible
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使不可见的东西更可见
- en: 'Many aspects of invisibility are rightly lauded as software principles to uphold.
    Our terminology is rich in invisibility metaphors — mechanism transparency and
    information hiding, to name but two. Software and the process of developing it
    can be, to paraphrase Douglas Adams, *mostly invisible*:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多不可见性方面被正确地赞扬为要坚守的软件原则。我们的术语中充满了不可见性隐喻——机制透明度和信息隐藏，仅举两例。软件及其开发过程可以，借道道格拉斯·亚当斯的话来说，*大部分是不可见的*：
- en: Source code has no innate presence, no innate behavior, and doesn't obey the
    laws of physics. It's visible when you load it into an editor, but close the editor
    and it's gone. Think about it too long and, like the tree falling down with no
    one to hear it, you start to wonder if it exists at all.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码没有固有的存在感，没有固有的行为，也不遵守物理定律。将其加载到编辑器中时可见，但关闭编辑器后就消失了。如果思考时间过长，就像没有人听到树倒下时，你开始怀疑它是否存在。
- en: A running application has presence and behavior, but reveals nothing of the
    source code it was built from. Google's home page is pleasingly minimal; the goings
    on behind it are surely substantial.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行中的应用程序具有存在感和行为，但不会透露它构建的源代码。谷歌的主页非常简洁；其背后的运作肯定是实质性的。
- en: If you're 90% done and endlessly stuck trying to debug your way through the
    last 10% then you're not 90% done, are you? Fixing bugs is not making progress.
    You aren't paid to debug. Debugging is waste. It's good to make waste more visible
    so you can see it for what it is and start thinking about trying not to create
    it in the first place.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你完成了90%却陷入无休止地尝试调试最后的10%，那么你并没有完成90%，对吧？修复错误并不是进展。你不是为了调试而获得报酬。调试是浪费。将浪费变得更加可见，这样你就可以看到它的本质，并开始考虑如何尽量避免在一开始就创建它。
- en: If your project is apparently on track and one week later it's six months late
    you have problems, the biggest of which is probably not that it's six months late,
    but the invisibility force fields powerful enough to hide six months of lateness!
    Lack of visible progress is synonymous with lack of progress.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的项目看似进展顺利，一周后却晚了六个月，那么你有问题，其中最大的问题可能不是它晚了六个月，而是足以隐藏六个月延迟的不可见力场！缺乏可见进展等同于缺乏进展。
- en: 'Invisibility can be dangerous. You think more clearly when you have something
    concrete to tie your thinking to. You manage things better when you can see them
    and see them constantly changing:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不可见性可能是危险的。当你有具体的东西可以联系你的思维时，你会思考得更清晰。当你可以看到事物并看到它们不断变化时，你会更好地管理它们：
- en: Writing unit tests provides evidence about how easy the code unit is to unit
    test. It helps reveal the presence (or absence) of developmental qualities you'd
    like the code to exhibit; qualities such as low coupling and high cohesion.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写单元测试提供了关于代码单元易于单元测试的证据。它有助于揭示代码应该具备的开发特质的存在（或不存在）；例如低耦合和高内聚等特质。
- en: Running unit tests provides evidence about the code's behavior. It helps reveal
    the presence (or absence) of runtime of qualities you'd like the application to
    exhibit; qualities such as robustness and correctness.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行单元测试提供了关于代码行为的证据。它有助于揭示应用程序应该具备的运行时特质的存在（或不存在）；例如健壮性和正确性等特质。
- en: Using bulletin boards and cards makes progress visible and concrete. Tasks can
    be seen as *Not Started*, *In Progress*, or *Done* without reference to a hidden
    project management tool and without having to chase programmers for fictional
    status reports.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用公告板和卡片使进展可见和具体。任务可以被视为*未开始*、*进行中*或*已完成*，而无需参考隐藏的项目管理工具，也无需追逐程序员获取虚构的状态报告。
- en: Doing incremental development increases the visibility of development progress
    (or lack of it) by increasing the frequency of development evidence. Completion
    of releasable software reveals reality; estimates do not.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逐步开发增加了开发进展的可见性（或缺乏可见性），通过增加开发证据的频率。可发布软件的完成揭示了现实；估计值则不会。
- en: It's best to develop software with plenty of regular visible evidence. Visibility
    gives confidence that progress is genuine and not an illusion, deliberate and
    not unintentional, repeatable and not accidental.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最好开发软件时有充分的常规可见证据。可见性能够确保进展是真实的而非虚幻的，是有意的而非无意的，是可重复的而非偶然的。
- en: By [Jon Jagger](http://programmer.97things.oreilly.com/wiki/index.php/Jon_Jagger)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Jon Jagger](http://programmer.97things.oreilly.com/wiki/index.php/Jon_Jagger)
