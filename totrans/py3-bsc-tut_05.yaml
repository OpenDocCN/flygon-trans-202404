- en: Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To handle larger amounts of data, we cannot invent a new variable for every
    new data item. Somehow we need to store more data in one variable. This is where
    Python **lists** come in.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, Python counts a bit different than humans do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![indexing](indexing.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Find out what each of the expressions does to the list in the center.
  prefs: []
  type: TYPE_NORMAL
- en: '![list exercise](lists.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What does the following program do?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How many babies are there in total? Write a program that calculates that number.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You have a list of the 20 most popular girls names from the year 2000:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Write a program that prints all names starting with `'A'` or `'M'`.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the expressions to modify the list as indicated. Use each expression once.
  prefs: []
  type: TYPE_NORMAL
- en: '![list funcs exercise1](list_funcs1.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new list containing the sum of *California* and *New York* for each
    name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the expressions to modify the list as indicated. Use each expression once.
  prefs: []
  type: TYPE_NORMAL
- en: '![list funcs exercise2](list_funcs2.png)'
  prefs: []
  type: TYPE_IMG
- en: Shortcuts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shortcuts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Simplify the following code using the function `sum()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Simplify the following code using the function `range()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Simplify the following code using the function `zip()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Simplify the following code using the function `enumerate()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use `list(range())` to create the following lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[4, 7, 9, 12]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[10, 20, 30, 40, 50]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[33, 32, 31, 30]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On which data types does the `len()` function work?
  prefs: []
  type: TYPE_NORMAL
- en: lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data frequently occurs in the form of tables. To process tables in Python, it
    helps to know that we can put lists in other lists. These are also called **nested
    lists**.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple table in Python looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this chapter we will deal with creating and processing nested lists.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write all rows of the above table to the screen with a `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write all *cells* of the table to the screen with a double `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create an empty table of 10 x 10 cells and fill them with numbers from 1 to
    100.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sort the above table by the second column. Use the following code sniplet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
