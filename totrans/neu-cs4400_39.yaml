- en: Lexical Scope using Racket ClosuresTuesday, February 7th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Racket 闭包的词法作用域
- en: '[PLAI §11](plai.pdf#chapter.11 "Representation Choices") (without the last
    part about recursion)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §11](plai.pdf#chapter.11 "Representation Choices")（不包括关于递归的最后部分）'
- en: An alternative representation for an environment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个环境的另一种表示形式。
- en: 'We’ve already seen how first-class functions can be used to implement “objects”
    that contain some information. We can use the same idea to represent an environment.
    The basic intuition is — an environment is a *mapping* (a function) between an
    identifier and some value. For example, we can represent the environment that
    maps `''a` to `1` and `''b` to `2` (using just numbers for simplicity) using this
    function:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用头等函数来实现包含一些信息的“对象”。我们可以使用相同的想法来表示一个环境。基本直觉是 — 一个环境是一个*映射*（一个函数），在标识符和某个值之间。例如，我们可以使用这个函数来表示将`'a`映射到`1`，将`'b`映射到`2`（仅使用数字简单表示）的环境：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An empty mapping that is implemented in this way has the same type:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式实现的空映射具有相同的类型：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can use this idea to implement our environments: we only need to define
    three things — `EmptyEnv`, `Extend`, and `lookup`. If we manage to keep the contract
    to these functions intact, we will be able to simply plug it into the same evaluator
    code with no other changes. It will also be more convenient to define `ENV` as
    the appropriate function type for use in the `VAL` type definition instead of
    using the actual type:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这个想法来实现我们的环境：我们只需要定义三件事 — `EmptyEnv`、`Extend` 和 `lookup`。如果我们设法保持这些函数的契约完整，我们就能够简单地将其插入到相同的求值器代码中，而无需进行其他更改。将`ENV`定义为适用于`VAL`类型定义的适当函数类型也更方便，而不是使用实际类型：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we get to `EmptyEnv` — this is expected to be a function that expects no
    arguments and creates an empty environment, one that behaves like the `empty-mapping`
    function defined above. We could define it like this (changing the `empty-mapping`
    type to return a `VAL`):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到`EmptyEnv` — 这被期望是一个不需要参数并创建一个空环境的函数，一个行为类似于上面定义的`empty-mapping`函数。我们可以这样定义它（将`empty-mapping`类型更改为返回`VAL`）：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'but we can skip the need for an extra definition and simply return an empty
    mapping function:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们可以跳过额外定义的需要，简单地返回一个空映射函数：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (The un-Rackety name is to avoid replacing previous code that used the `EmptyEnv`
    name for the constructor that was created by the type definition.)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: （非 Rackety 名称是为了避免替换先前使用`EmptyEnv`名称为由类型定义创建的构造函数的代码。）
- en: 'The next thing we tackle is `lookup`. The previous definition that was used
    is:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要处理的下一件事是`lookup`。先前使用的定义是：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'How should it be modified now? Easy — an environment is a mapping: a Racket
    function that will do the searching job itself. We don’t need to modify the contract
    since we’re still using `ENV`, except a different implementation for it. The new
    definition is:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该如何修改它？很简单 — 一个环境是一个映射：一个 Racket 函数，将自己执行搜索任务。我们不需要修改契约，因为我们仍在使用`ENV`，只是为其提供了不同的实现。新的定义是：
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that `lookup` does almost nothing — it simply delegates the real work to
    the `env` argument. This is a good hint for the error message that empty mappings
    should throw —
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`lookup`几乎什么都不做 — 它只是将真正的工作委托给`env`参数。这是空映射应该抛出的错误消息的一个很好的提示 —
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, `Extend` — this was previously created by the variant case of the
    ENV type definition:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`Extend` — 这是先前由ENV类型定义的变体案例创建的：
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'keeping the same type that is implied by this variant means that the new `Extend`
    should look like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 保持由此变体暗示的相同类型意味着新的`Extend`应该如下所示：
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The question is — how do we extend a given environment? Well, first, we know
    that the result should be mapping — a `symbol -> VAL` function that expects an
    identifier to look for:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是 — 我们如何扩展给定的环境？首先，我们知道结果应该是映射 — 一个`symbol -> VAL`函数，期望一个标识符来查找：
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we know that in the generated mapping, if we look for `id` then the result
    should be `val`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们知道在生成的映射中，如果我们查找`id`，那么结果应该是`val`：
- en: '[PRE11]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If the `name` that we’re looking for is not the same as `id`, then we need
    to search through the previous environment, eg: (lookup name rest). But we know
    what `lookup` does — it simply delegates back to the mapping function (which is
    our `rest` argument), so we can take a direct route:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在寻找的`name`与`id`不同，那么我们需要通过先前的环境进行搜索，例如：（lookup name rest）。但我们知道`lookup`做什么
    — 它只是简单地委托给映射函数（即我们的`rest`参数），所以我们可以采取直接路线：
- en: '[PRE12]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: (Note that the last line is simply `(lookup name rest-env)`, but we know that
    we have a functional implementation.)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意，最后一行只是`(lookup name rest-env)`，但我们知道我们有一个功能实现。）
- en: 'To see how all this works, try out extending an empty environment a few times
    and examine the result. For example, the environment that we began with:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解所有这些是如何工作的，请尝试扩展一个空环境几次并检查结果。例如，我们开始的环境：
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: behaves in the same way (if the type of values is numbers) as
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 行为方式相同（如果值的类型是数字）如
- en: '[PRE14]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The new code is now the same, except for the environment code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码现在是相同的，除了环境代码：
- en: '[PRE15]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
