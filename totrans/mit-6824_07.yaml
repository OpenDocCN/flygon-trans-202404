- en: Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Russ Cox's lecture on Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why Go?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: an answer to the problems of scalability at Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`10^6+` machines design point'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: it's routine to be running on 1000 machines
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: constantly writing programs that coordinate with each other
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sometimes MapReduce works, other times it doesn't
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Who uses Go at Google
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SPDY proxy for Chrome on mobile devices uses a Go-written *Data Compression
    Proxy*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dl.google.com
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YouTube MySQL balancer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the target is network servers, but it's a great gen. purp. language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitbucket, bitly, GitHub, Dropbox, MongoDB, Mozilla services, NY Times, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concurrency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '"Communicating Sequential Processes", by Hoare, 1978'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: strongly encouraged to read
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in some sense, a generalization of UNIX pipelines
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bell Labs had some languages developed for concurrency in 80''s, 90''s:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pan, Promela, Newsqueak, Alef, Limbo, Libthread, Concurrent ML
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google developed Go in the 2000s
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's no goroutine IDs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '"There''s no goroutine IDs, so I can''t kill my threads"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is what channels are for: just tell your thread via a channel to shut
    itself off'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, it's kind of "antisocial" to kill them.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What we mean is that your program is prolly not gonna work very well if you
    keep killing your threads like that
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Channels vs. Mutexes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: if you need a mutex, use a mutex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if you need condition variable, think about using a channel instead
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: don't communicate by sharing memory, you share memory by communicating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network channels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: it'd be great to have the equivalent for a network channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if you take local abstractions (like channels) and use them in a new context
    like a network, ignoring failure modes (etc), then you're gonna run into trouble
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scale of engineering efforts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In 2011, Google had:'
  prefs: []
  type: TYPE_NORMAL
- en: 5000+ developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 20+ changes per minute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 50% code base changes every month (files? not lines probably)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 50 million test cases executed per day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: single code tree projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new language was needed to fix the problems that other languages had with
    software engineering at this scale
  prefs: []
  type: TYPE_NORMAL
- en: The scale of compilation matters.
  prefs: []
  type: TYPE_NORMAL
- en: When you compile a package A that depends on B, most (all?) languages need to
    compile B first
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go doesn't.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependencies like these at the scale of Google projects slow down compilation
    if you use a traditional language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gets worse with "deeper" dependencies `A->B->C->D->...`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* at some point they found a postscript interpreter compiled in a
    server binary for no reason due to weird deps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interfaces vs. inheritance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: inhertance hierarchies are hard to get right and if you don't they are hard
    to change later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: interfaces are much more informal and clearer about who owns and supplies what
    parts of the program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Readability and simplicity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Dick Gabriel quote:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"I''m always delighted by the light touch and stillness of early programming
    languages. Not much text; a lot gets done. Old programs read like quiet conversations
    between a well-spoken research worker and a well-studied mechanical colleague,
    not as a debate with a compiler. Who''d have guessed sophistication bought such
    noise?"'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Simplify syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Avoid cleverness: ternary operators, macros'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't let code writing be like "arguing with your compiler"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't want to puzzle through code 6 months later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design criteria
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: started by Rob Pike, Robert Griesemer and Ken Thompson in late 2007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Russ Cox, Ian Lance Taylor joined in mid-2008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: design by consensus (everyone could veto a feature, if they didn't want it)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Russ: "Don''t use `*list.List`, you almost never need them. Use slices."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generics are not bad, just hard to do right.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Early designers for Java generics also agreed and warned Go designers to be
    careful
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Seems like they regretted getting into that business
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enginering tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: when you have millions of lines of code, you need mechanical help
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: like changing an API
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Go designed to be easy to parse (not like C++)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: standard formatter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Means you can't tell a mechanical change from a manual change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enables automated rewrites of code
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: More automation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: fix code for API updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: early Go versions API changed a lot
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google had a rewriter that would fix your code which used the changed APIs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: renaming struct fields, variables w/ conflict resolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: moving packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: splitting of packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code cleanup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: change C code to Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global analysis that figure out what are all the implementors of an interface
    for instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State of Go
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go 1.4 released in Decembeer 2014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go 1.5 has toolchain implemented in Go, not in C
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: concurrent GC
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Go for mobile devices
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Go on PowerPC, ARM64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lots of people use it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go conferences outside of Google/Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Q&A
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go vs C/C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go is garbage collected, biggest difference, so slower
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Go can be faster than Java sometimes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: once you're aware of that, you can write code that runs faster than C/C++ code
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: no reason that code that doesn't allocate memory shouldn't run as fast as C/C++
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Goal to use Go outside Google?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yes! Otherwise the language would die?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You get a breadth of experts that give you advice and write tools, etc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: C++ memory model guy gave feedback on Go memory model
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Very usefl
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Not trying to replace anything like language X
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: but they were using C/C++ and didn't want to anymore
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: however Python and Ruby users are switching to Go more
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Go feels just as light but statically type checked
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Studies about benefits of Go?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: not a lot of data collected
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
