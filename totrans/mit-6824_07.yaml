- en: Go
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go
- en: Russ Cox's lecture on Go
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**Russ Cox** 的 Go 讲座'
- en: Why Go?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择 Go？
- en: an answer to the problems of scalability at Google
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决 Google 在可扩展性方面的问题的答案
- en: '`10^6+` machines design point'
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10^6+` 台机器设计点'
- en: it's routine to be running on 1000 machines
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 1000 台机器上运行是例行公事
- en: constantly writing programs that coordinate with each other
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不断地编写相互协调的程序
- en: sometimes MapReduce works, other times it doesn't
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时 MapReduce 起作用，有时不起作用
- en: Who uses Go at Google
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谁在谷歌使用 Go
- en: SPDY proxy for Chrome on mobile devices uses a Go-written *Data Compression
    Proxy*
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome 移动设备上的 SPDY 代理使用 Go 编写的 *数据压缩代理*
- en: dl.google.com
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dl.google.com
- en: YouTube MySQL balancer
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YouTube MySQL 负载均衡器
- en: the target is network servers, but it's a great gen. purp. language
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标是网络服务器，但它是一种很棒的通用语言
- en: Bitbucket, bitly, GitHub, Dropbox, MongoDB, Mozilla services, NY Times, etc.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bitbucket、bitly、GitHub、Dropbox、MongoDB、Mozilla 服务、纽约时报等
- en: Concurrency
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发
- en: '"Communicating Sequential Processes", by Hoare, 1978'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《通信顺序进程》，由霍尔，1978
- en: strongly encouraged to read
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强烈建议阅读
- en: in some sense, a generalization of UNIX pipelines
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某种意义上，是 UNIX 管道的泛化
- en: 'Bell Labs had some languages developed for concurrency in 80''s, 90''s:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贝尔实验室在 80 年代、90 年代开发了一些并发语言：
- en: Pan, Promela, Newsqueak, Alef, Limbo, Libthread, Concurrent ML
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pan、Promela、Newsqueak、Alef、Limbo、Libthread、Concurrent ML
- en: Google developed Go in the 2000s
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌在 2000 年代开发了 Go
- en: There's no goroutine IDs
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有 goroutine ID
- en: '"There''s no goroutine IDs, so I can''t kill my threads"'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “没有 goroutine ID，所以我不能杀死我的线程”
- en: 'This is what channels are for: just tell your thread via a channel to shut
    itself off'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这就是通道的作用：只需通过通道告诉你的线程关闭自己
- en: Also, it's kind of "antisocial" to kill them.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，杀死它们有点“不合群”。
- en: What we mean is that your program is prolly not gonna work very well if you
    keep killing your threads like that
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的意思是，如果你一直像那样杀死你的线程，你的程序可能不会运行得很好
- en: Channels vs. Mutexes
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通道 vs. 互斥锁
- en: if you need a mutex, use a mutex
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要互斥锁，请使用互斥锁
- en: if you need condition variable, think about using a channel instead
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要条件变量，请考虑使用通道代替
- en: don't communicate by sharing memory, you share memory by communicating
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要通过共享内存进行通信，而是通过通信共享内存
- en: Network channels
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络通道
- en: it'd be great to have the equivalent for a network channel
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有等效的网络通道会很棒
- en: if you take local abstractions (like channels) and use them in a new context
    like a network, ignoring failure modes (etc), then you're gonna run into trouble
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你将本地抽象（如通道）用于新的上下文，比如网络，忽略了故障模式（等等），那么你将会遇到麻烦
- en: Scale of engineering efforts
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工程工作的规模
- en: 'In 2011, Google had:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 2011 年，Google 有：
- en: 5000+ developers
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5000 多名开发人员
- en: 20+ changes per minute
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每分钟 20 多次更改
- en: 50% code base changes every month (files? not lines probably)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每月 50% 的代码库更改（文件？可能不是行）
- en: 50 million test cases executed per day
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每天执行 5000 万个测试用例
- en: single code tree projects
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单一代码树项目
- en: A new language was needed to fix the problems that other languages had with
    software engineering at this scale
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一种新的语言来解决其他语言在这种规模的软件工程中存在的问题
- en: The scale of compilation matters.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 编译规模很重要。
- en: When you compile a package A that depends on B, most (all?) languages need to
    compile B first
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你编译依赖于 B 的包 A 时，大多数（全部？）语言需要先编译 B
- en: Go doesn't.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 不会。
- en: Dependencies like these at the scale of Google projects slow down compilation
    if you use a traditional language
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在谷歌项目的规模上使用传统语言，这样的依赖关系会减慢编译速度
- en: gets worse with "deeper" dependencies `A->B->C->D->...`
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深层次依赖（`A->B->C->D->...`）会使情况变得更糟
- en: '*Example:* at some point they found a postscript interpreter compiled in a
    server binary for no reason due to weird deps'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*例子：*在某个时候，他们发现一个 PostScript 解释器无缘无故地编译到了服务器二进制文件中，这是由于奇怪的依赖关系'
- en: Interfaces vs. inheritance
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接口 vs. 继承
- en: inhertance hierarchies are hard to get right and if you don't they are hard
    to change later
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承层次结构很难搞定，如果你没有搞定，以后更改起来就会很困难
- en: interfaces are much more informal and clearer about who owns and supplies what
    parts of the program
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口更加非正式和更清晰地表明程序的哪些部分由谁拥有和提供
- en: Readability and simplicity
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可读性和简单性
- en: 'Dick Gabriel quote:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迪克·加布里埃尔的引言：
- en: '"I''m always delighted by the light touch and stillness of early programming
    languages. Not much text; a lot gets done. Old programs read like quiet conversations
    between a well-spoken research worker and a well-studied mechanical colleague,
    not as a debate with a compiler. Who''d have guessed sophistication bought such
    noise?"'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我总是对早期编程语言的轻盈和静止感到高兴。文本不多；完成了很多事情。旧程序读起来像是一个口才流利的研究人员和一个精通机械的同事之间的轻松对话，而不是与编译器的辩论。谁会想到复杂性会带来这么多噪音呢？”
- en: Simplify syntax
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化语法
- en: 'Avoid cleverness: ternary operators, macros'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免聪明的做法：三元运算符，宏
- en: Don't let code writing be like "arguing with your compiler"
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要让编写代码变成像“与编译器争论”一样
- en: Don't want to puzzle through code 6 months later
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 6 个月后不想要再费力地解析代码
- en: Design criteria
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计标准
- en: started by Rob Pike, Robert Griesemer and Ken Thompson in late 2007
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 Rob Pike、Robert Griesemer 和 Ken Thompson 在 2007 年末创立
- en: Russ Cox, Ian Lance Taylor joined in mid-2008
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Russ Cox、Ian Lance Taylor 在 2008 年中期加入
- en: design by consensus (everyone could veto a feature, if they didn't want it)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过共识来设计（每个人都可以否决一个特性，如果他们不想要它的话）
- en: Generics
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 泛型
- en: 'Russ: "Don''t use `*list.List`, you almost never need them. Use slices."'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Russ 说：“不要使用 `*list.List`，你几乎永远不需要它们。使用切片。”
- en: Generics are not bad, just hard to do right.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 泛型并不是坏事，只是很难做到正确。
- en: Early designers for Java generics also agreed and warned Go designers to be
    careful
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 早期的 Java 泛型设计者也同意并警告 Go 设计者要小心
- en: Seems like they regretted getting into that business
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 似乎他们后悔涉足了那个行业
- en: Enginering tools
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工程工具
- en: when you have millions of lines of code, you need mechanical help
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你有数百万行代码时，你需要机械帮助
- en: like changing an API
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就像改变一个 API
- en: Go designed to be easy to parse (not like C++)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 设计成易于解析（不像 C++）
- en: standard formatter
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准格式化程序
- en: Means you can't tell a mechanical change from a manual change
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这意味着你无法区分机械变化和手动变化
- en: enables automated rewrites of code
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现代码的自动重写
- en: More automation
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多自动化
- en: fix code for API updates
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复因 API 更新而产生的代码问题
- en: early Go versions API changed a lot
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 早期的 Go 版本 API 发生了很大变化
- en: Google had a rewriter that would fix your code which used the changed APIs
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌有一个重写器，会修复使用了已更改的 API 的代码
- en: renaming struct fields, variables w/ conflict resolution
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名结构字段，具有冲突解决的变量
- en: moving packages
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动包
- en: splitting of packages
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包的分离
- en: code cleanup
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码清理
- en: change C code to Go
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 C 代码改写为 Go
- en: global analysis that figure out what are all the implementors of an interface
    for instance
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局分析，找出例如一个接口的所有实现者是什么
- en: State of Go
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Go 的现状
- en: Go 1.4 released in Decembeer 2014
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 1.4 在 2014 年 12 月发布
- en: Go 1.5 has toolchain implemented in Go, not in C
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 1.5 中的工具链是用 Go 实现的，而不是用 C 实现的
- en: concurrent GC
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发 GC
- en: Go for mobile devices
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于移动设备的 Go
- en: Go on PowerPC, ARM64
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 在 PowerPC、ARM64 上
- en: Lots of people use it
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很多人在使用它
- en: Go conferences outside of Google/Go
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Google/Go 之外的 Go 大会
- en: Q&A
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问答环节
- en: Go vs C/C++
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 对比 C/C++
- en: Go is garbage collected, biggest difference, so slower
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 是垃圾收集的，这是最大的区别，所以更慢
- en: Go can be faster than Java sometimes
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时候 Go 可以比 Java 更快
- en: once you're aware of that, you can write code that runs faster than C/C++ code
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦你意识到这一点，你可以编写比 C/C++ 代码运行更快的代码。
- en: no reason that code that doesn't allocate memory shouldn't run as fast as C/C++
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有理由不让不分配内存的代码运行得像 C/C++ 一样快
- en: Goal to use Go outside Google?
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标是在 Google 之外使用 Go 吗？
- en: Yes! Otherwise the language would die?
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是的！否则语言会消亡？
- en: You get a breadth of experts that give you advice and write tools, etc.
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你得到了一批专家给你建议并编写工具等等。
- en: C++ memory model guy gave feedback on Go memory model
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++ 内存模型的专家给出了关于 Go 内存模型的反馈
- en: Very usefl
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常有用
- en: Not trying to replace anything like language X
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不试图取代像语言 X 这样的东西
- en: but they were using C/C++ and didn't want to anymore
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但是他们曾经使用 C/C++，不想再使用了
- en: however Python and Ruby users are switching to Go more
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而 Python 和 Ruby 用户更多地转向了 Go
- en: Go feels just as light but statically type checked
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 感觉起来与 C/C++ 一样轻巧，但是静态类型检查了
- en: Studies about benefits of Go?
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 Go 的好处的研究？
- en: not a lot of data collected
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集的数据不多
