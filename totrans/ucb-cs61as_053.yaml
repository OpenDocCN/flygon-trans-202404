- en: Representing Sequences
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表示序列
- en: 'Before we get into actual data abstraction, let''s first talk about the data
    structure we will use to store data: **pairs**. So far, the only way we know of
    storing information is to use sentences. In this section, we will introduce the
    idea of using **pairs** to combine and store data. Pairs are versatile and easy
    to build off of, for they can be nested within each other to create **lists**,
    data structures that are deceptively similar to the sentences from Lesson 1.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始实际的数据抽象之前，让我们先谈谈我们将用来存储数据的数据结构：**对**。到目前为止，我们知道存储信息的唯一方法是使用句子。在本节中，我们将介绍使用**对**来组合和存储数据的概念。对是多才多艺且易于构建的，因为它们可以相互嵌套以创建**列表**，这些数据结构与第1课中的句子非常相似。
- en: Pairs
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对
- en: In general, we as people tend to instinctively think of things as a collection
    or combination of multiple items. A book is a collection of words on paper. A
    salad is a combination of leaves and other yummy food. Now, let's shift this perspective.
    In Racket, and in much of computer science, things are represented by **pairs**.
    Now, how are we going to store multiple items if a pair is just two items? The
    second item of a pair, it turns out, is usually a **pointer** to another pair!
    And, if we have pairs point to other pairs which point to other pairs, we can
    store as much information as we want in this data structure. It adheres nicely
    to the rule in computer science that anything and everything can be represented
    in binary.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们作为人类往往本能地将事物视为多个项目的集合或组合。一本书是纸上的文字集合。沙拉是叶子和其他美味食物的组合。现在，让我们改变这种观点。在 Racket
    中，以及在计算机科学中的很多领域，事物被**对**表示。那么，如果一对只是两个项目，我们要如何存储多个项目呢？事实证明，一对的第二个项目通常是指向另一对的**指针**！而且，如果我们让一对指向其他一对，再指向其他一对，我们可以在这种数据结构中存储尽可能多的信息。这很好地遵循了计算机科学中的规则，即任何事物都可以用二进制表示。
- en: Creating Pairs
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建对
- en: 'In Racket, we create a pair using the function `cons`, which takes into two
    arguments of any type and returns a *pair*. To represent this visually, we can
    think of a pair as a box with two halves:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Racket 中，我们使用函数`cons`创建一对，该函数接受两个任意类型的参数并返回一个*对*。为了在视觉上表示这一点，我们可以将一对看作一个有两半的盒子：
- en: '![](/static/04_empty_pair.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/04_empty_pair.png)'
- en: The first half is called the `car` of the pair, while the second half is the
    `cdr`. They each have corresponding **selectors** of the same name. The procedures
    `car` and `cdr` both take in a pair as its only argument and returns the first
    and second item in that pair, respectively.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第一半被称为对的`car`，而第二半是`cdr`。它们各自有相应的同名**选择器**。过程`car`和`cdr`都以一对作为其唯一参数，并分别返回该对中的第一个和第二个项目。
- en: 'Let''s take a look at the following example, where we create a pair of the
    numbers `3` and `4`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看下面的例子，我们创建了数字`3`和`4`的一对：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Visually, this pair would look like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在视觉上，这对会看起来像这样：
- en: '![](/static/04_pair_3_4.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/04_pair_3_4.png)'
- en: This visual representation is called a **box and pointer diagram**, and is an
    extremely useful tool for understanding pairs when they get more complex in the
    future.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这种视觉表示被称为**盒子和指针图**，是在未来更复杂时理解对的极其有用的工具。
- en: 'Let''s see another example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, pairs can store **any** kind of data - numbers, words, procedures,
    and even *more pairs*!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，对可以存储**任何**类型的数据 - 数字、单词、过程，甚至*更多的对*！
- en: '**Test Your Understanding**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: Write a procedure called func-pair that takes in a pair whose car is a function
    of one argument and whose cdr is a number. func-pair returns the value returned
    when we call that function to that number.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为 func-pair 的过程，它接受一个 car 是一个参数的函数且 cdr 是一个数字的对。func-pair 返回当我们将该函数调用到该数字时返回的值。
- en: Try it out in the Racket interpreter first. Then, check your answers below.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在 Racket 解释器中尝试一下。然后，检查下面的答案。
- en: 'It''s common for pairs to store other pairs, since this allows us to store
    as much information in one pair as we''d like. Let''s see what the box and pointer
    diagram will look like for this **nested pairs** example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对存储其他对是很常见的，因为这样可以让我们在一个对中存储尽可能多的信息。让我们看看这个**嵌套对**示例的盒子和指针图会是什么样子：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Notice how the `car` of this pair is another pair, `(cons 1 2)`, while the
    `cdr` is `4`. In that case, this should be how we draw the box and pointer diagram:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这对的`car`是另一对，`(cons 1 2)`，而`cdr`是`4`。在这种情况下，这应该是我们绘制盒子和指针图的方式：
- en: '![](/static/04_pair_124.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/04_pair_124.png)'
- en: You can only imagine how many ways we can store large amounts of data!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以想象我们可以以多少种方式存储大量数据！
- en: '**Test Your Understanding**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: 'Given the following piece of code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 给定以下代码片段：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What will the following expressions return? See if you can figure it out without
    a Racket interpreter, then click on the corresponding bubble to see the correct
    answer.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表达式将返回什么？看看你是否可以在没有Racket解释器的情况下弄清楚，然后点击相应的气泡查看正确答案。
- en: 'We can also have the `cdr` of a pair point to *the empty list*, which is written
    as `''()`. For example, we can do the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以让一对的`cdr`指向*空列表*，写作`'()`。例如，我们可以这样做：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![box-pointer](/static/04_list_1.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![box-pointer](/static/04_list_1.png)'
- en: 'Why is this useful? When would we ever want to store "nothing" into our pairs?
    Let''s stay patient and look at the next example. Suppose we type this into the
    interpreter:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这有什么用呢？我们何时会想要将"nothing"存储到我们的对中？让我们耐心等待并看看下一个例子。假设我们在解释器中键入以下内容：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Try to draw the box and pointer diagram yourself, then try to guess what Racket
    would print out. Then, check your work with the interpreter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试自己绘制框和指针图，然后猜测Racket会打印出什么。然后，用解释器检查你的工作。
- en: 'Was the actual output what you expected? You probably assumed the expression
    would return something like `(1 . (2 . ()))`. Instead, you got `(1 2)`. This is
    because Racket has a nifty way of simplifying nested pairs! Since this format
    of `(cons a (cons b (cons c (cons ...))))` is used so often, every time Racket
    sees a period followed by an open parenthesis, it will simplify the expression
    like so:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实际输出是否符合你的预期？你可能认为表达式会返回类似`(1 . (2 . ()))`的内容。相反，你得到了`(1 2)`。这是因为Racket有一种巧妙的方法简化嵌套对！由于`(cons
    a (cons b (cons c (cons ...))))`这种格式经常使用，每次Racket看到一个句点后跟着一个开括号，它会简化表达式如下：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here are a few practice problems for you to try out. For each of the following
    expressions, try drawing the corresponding box and pointer diagram, then write
    out what the Racket interpreter will print:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些练习问题供你尝试。对于以下每个表达式，请尝试绘制相应的框和指针图，然后写出Racket解释器将打印出什么：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What will the following expressions return? If you get stuck, draw a box and
    pointer diagram.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表达式将返回什么？如果卡住了，请绘制一个框和指针图。
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Some Shorthand
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些简写
- en: Series of `car`s and `cdr`s can be downright ugly. In our Racket interpreter,
    there is a built-in shorthand notation to do multiple calls to `car` and/or `cdr`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列`car`和`cdr`可能非常丑陋。在我们的Racket解释器中，有一种内置的简写表示法可以执行多次调用`car`和/或`cdr`。
- en: '`(car (cdr a))` is equivalent to `(cadr a)`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`(car (cdr a))`等同于`(cadr a)`。'
- en: '`(car (cdr (car (car a))))` is equivalent to `(cadaar a)`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`(car (cdr (car (car a))))`等同于`(cadaar a)`。'
- en: Notice how in the first example, if we take the `cadr` of some sequence `a`,
    we first take the `cdr` of `a`, and then take the `car` of whatever is returned
    from that. In general, you can extract the `a`'s and `d`'s from a string of `car`s
    and `cdr`s, and append them together, in the same order, between one `c` and one
    `r`. You can do up to `cxxxxr` (4 `x`'s), where `x` is either `a` or `d`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在第一个例子中，如果我们取某个序列`a`的`cadr`，我们首先取`a`的`cdr`，然后取从中返回的内容的`car`。一般来说，你可以从一串`car`和`cdr`中提取`a`和`d`，并将它们以相同的顺序在一个`c`和一个`r`之间连接在一起。你可以做到`cxxxxr`（4个`x`），其中`x`是`a`或`d`。
- en: Lists
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表
- en: '**Test Your Understanding**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: Write an expression using cons so that Racket will print out (5 6 7 8). Click
    below to reveal the answer.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`cons`写出一个表达式，以便Racket打印出(5 6 7 8)。点击下面以显示答案。
- en: 'Using this pattern of `cons`s over and over again can get pretty tedious. Because
    this is so common, Racket has another built-in procedure that creates a nested
    `cons` for us: `list`. `list` takes in any number of arguments of any type, and
    returns it as a nested `cons`, or a `list`. For example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 反复使用这种`cons`模式可能会变得相当乏味。因为这种情况如此常见，Racket还有另一个内置过程可以为我们创建嵌套的`cons`：`list`。`list`接受任意数量的任何类型的参数，并将其作为嵌套的`cons`或`list`返回。例如：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can define `list` formally using the following recursive definition: **a
    list is either the empty list, written `''()`, or a pair whose `cdr` is another
    list.** Notice that this means that if we continuously take the `cdr` of any list,
    we will always end up with the empty list.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下递归定义正式定义`list`：**列表要么是空列表，写作`'()`，要么是其`cdr`是另一个列表的对。**请注意，这意味着如果我们不断地取任何列表的`cdr`，我们最终将始终得到空列表。
- en: 'We can draw box and pointer diagrams for lists by simply rewriting every list
    as a nested `cons`. For example, the box and pointer diagram for `(list 1 2 3)`
    is the same as the one for `(cons 1 (cons 2 (cons 3 ''())))`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单地将每个列表重写为嵌套的`cons`来为列表绘制框和指针图。例如，`(list 1 2 3)`的框和指针图与`(cons 1 (cons
    2 (cons 3 '())))`的相同：
- en: '![](/static/04_list_123.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/04_list_123.png)'
- en: 'Thus, we learn a very important key idea: **every list is a pair.** The reverse
    is not true though - not all pairs are lists. `(cons 1 2)` is a pair, but it is
    not a list.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们学到了一个非常重要的关键思想：**每个列表都是一对。**但反之并不成立 - 并非所有的对都是列表。`(cons 1 2)`是一对，但它不是一个列表。
- en: Append
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Append
- en: 'We now have almost all of the tools we need to represent collections and sequences
    in Racket! What we’re missing is a way to easily combine two lists. For example,
    say we have the lists `(list 1 2 3)` and `(list 4 5 6)`, and we want to combine
    these into one large list of the form `(list 1 2 3 4 5 6)`. Racket has a procedure
    that does this for us: `append`. Given any number of lists, `append` will return
    one list containing all the elements of its argument lists.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们几乎拥有在Racket中表示集合和序列所需的所有工具了！我们缺少的是一种轻松地将两个列表组合在一起的方法。例如，假设我们有列表`(list 1
    2 3)`和`(list 4 5 6)`，我们想将它们组合成一个形如`(list 1 2 3 4 5 6)`的大列表。Racket有一个过程可以为我们做到这一点：`append`。给定任意数量的列表，`append`将返回一个包含其参数列表所有元素的列表。
- en: Here’s what calling append in the example above will look like with box and
    pointer diagrams.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中调用`append`时，使用框和指针图看起来是这样的。
- en: 'We start with two lists, `(1 2 3)` and `(4 5 6)`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从两个列表`(1 2 3)`和`(4 5 6)`开始：
- en: '![box-pointer](/static/04_append1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![box-pointer](/static/04_append1.png)'
- en: 'Then, we remove the null pointer at the end of the first list and point it
    to the beginning of the second list:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们移除第一个列表末尾的空指针，并将其指向第二个列表的开头：
- en: '![box-pointer](/static/04_append2.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![box-pointer](/static/04_append2.png)'
- en: 'Append: Under the Hood'
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Append：幕后
- en: 'Here''s how `append` works under the hood. Remember how our recursive definition
    of lists tells us that the last `cdr` of a list always points to the empty list?
    First, `append` takes its first argument list and follows the `cdr` pointers until
    it finds the last pair of the list. Then, it replaces the value that the `cdr`
    of that last pair points to with the second argument list to `append`. That might
    seem like a lot of nonsense to you. Take a look at the following example for some
    clarity:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`append`在幕后是如何工作的。记得我们关于列表的递归定义告诉我们列表的最后一个`cdr`总是指向空列表吗？首先，`append`获取它的第一个参数列表，并沿着`cdr`指针直到找到列表的最后一对。然后，它用要`append`的第二个参数列表替换那个最后一对指向的`cdr`的值。这对你来说可能听起来像一堆废话。看看下面的例子，可能会更清楚一些：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Append will only work if all but the last argument are lists. Can you explain
    why the last argument does not have to be a list? What does Racket return when
    you call append where the last argument is not a list?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 只有除了最后一个参数外其他参数都是列表时`append`才会起作用。你能解释为什么最后一个参数不必是列表吗？当你调用`append`时，最后一个参数不是列表时Racket会返回什么？
- en: '**Test Your Understanding**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: Which of the following calls to append will error?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪个调用`append`会出错？
