- en: Mutex
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互斥体
- en: What are Mutexes?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是互斥体？
- en: A mutex is an object that supports two operations -- the mutex can be acquired,
    and the mutex can be released. Once a mutex has been acquired, no other acquire
    operations on that mutex may proceed until the mutex is released.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 互斥体是支持两个操作的对象--可以获取互斥体，也可以释放互斥体。一旦获取了互斥体，那么在释放互斥体之前，该互斥体上的任何其他获取操作都不能继续进行。
- en: The mutex is a mutable object (here we'll use a one-element list, which we'll
    refer to as a cell) that can hold the value true or false. When the value is false,
    the mutex is available to be acquired. When the value is true, the mutex is unavailable,
    and any process that attempts to acquire the mutex must wait.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 互斥体是一个可变对象（这里我们将使用一个一元列表，称为单元格），可以保存值true或false。当值为false时，互斥体可用于获取。当值为true时，互斥体不可用，任何试图获取互斥体的进程都必须等待。
- en: Our mutex constructor `make-mutex` begins by initializing the cell contents
    to false. To acquire the mutex, we test the cell. If the mutex is available, we
    set the cell contents to true and proceed. Otherwise, we wait in a loop, attempting
    to acquire over and over again, until we find that the mutex is available. To
    release the mutex, we set the cell contents to false.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的互斥体构造函数`make-mutex`首先将单元格内容初始化为false。要获取互斥体，我们测试单元格。如果互斥体可用，我们将单元格内容设置为true并继续。否则，我们在循环中等待，一遍又一遍地尝试获取，直到发现互斥体可用为止。要释放互斥体，我们将单元格内容设置为false。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`Test-and-set!` tests the cell and returns the result of the test. In addition,
    if the test was false, `test-and-set!` sets the cell contents to true before returning
    false. This procedure is a Scheme primitive. Its implementation requires hardware
    support.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`Test-and-set!`测试单元格并返回测试结果。此外，如果测试为false，`test-and-set!`在返回false之前将单元格内容设置为true。这个过程是Scheme的原语。它的实现需要硬件支持。'
- en: Using Mutexes
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用互斥体
- en: The book uses an intermediate level of abstraction between the serializer and
    the atomic hardware capability, called a mutex. What’s the diﬀerence between a
    mutex and a serializer? The serializer provides, as an abstraction, a protected
    operation, without requiring the programmer to think about the mechanism by which
    it’s protected. The mutex exposes the sequence of events. Just as the earlier
    incorrect implementation said
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 该书在串行化器和原子硬件功能之间使用了一个中间抽象级别，称为互斥体。互斥体和串行化器之间有什么区别？串行化器作为一个抽象，提供了一个受保护的操作，而无需程序员考虑保护的机制。互斥体暴露了事件的顺序。就像之前的不正确实现所说的那样
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: the correct version uses a similar sequence
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正确版本使用类似的顺序
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By the way, all of the versions in these sections have another bug; we’ve simpliﬁed
    the discussion by ignoring the problem of return values. We want the value returned
    by protected-proc to be the same as the value returned by the original proc, even
    though the call to proc isn’t the last step. Therefore the correct implementation
    is
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，在这些部分的所有版本中都有另一个错误；我们通过忽略返回值的问题简化了讨论。我们希望由protected-proc返回的值与原始proc返回的值相同，即使对proc的调用不是最后一步。因此，正确的实现是
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: as in the book’s implementation on page 311.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 就像书中第311页的实现一样。
- en: Implementing Serializers with Mutexes
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用互斥体实现串行化器
- en: Now that we know about mutexes and how to use them, it is relatively straightforward
    to implement serializers. Our implementation is below. Make sure you understand
    how and why it works!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了互斥体以及如何使用它们，相对来说实现串行化器就相对简单了。我们的实现如下。确保你理解它是如何工作的以及为什么！
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
