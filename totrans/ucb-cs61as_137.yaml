- en: An Interpreter with Lazy Evaluation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有惰性计算的解释器
- en: The Big Idea
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大思想
- en: In this section we will implement a normal-order language that is the same as
    Scheme, except that **compound procedures are non-strict in each argument. Primitive
    procedures will still be strict.** It is not difficult to modify the evaluator
    of Lesson 12 so that the language it interprets behaves this way. Almost all the
    required changes center around procedure application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现一个按正常顺序执行的语言，与Scheme相同，只是**复合过程在每个参数上都是非严格的。原始过程仍然是严格的。** 修改第12课的求值器，使其解释的语言以这种方式运行并不困难。几乎所有所需的更改都围绕过程应用。
- en: '(Remember, the choices above are just that: choices! The metacircular evaluator
    from Lesson 12 works perfectly fine, but sometimes we want Scheme to act differently.
    This section will be about modifying the MCE code so that our interpreted Scheme
    is normal-order.)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: （请记住，上面的选择只是选择！第12课中的元循环求值器运行得很好，但有时我们希望Scheme的行为有所不同。本节将讨论修改MCE代码，使我们解释的Scheme是按正常顺序执行的。）
- en: The basic idea is that, when applying a procedure, the interpreter must determine
    which arguments are to be evaluated and which are to be delayed. The delayed arguments
    are not evaluated; instead, they are transformed into objects called **thunks**.
    The thunk must contain the information required to produce the value of the argument
    when it is needed, as if it had been evaluated at the time of the application.
    Thus, the thunk must contain the argument expression and the environment in which
    the procedure application is being evaluated.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 基本思想是，在应用一个过程时，解释器必须确定哪些参数需要评估，哪些需要延迟。延迟的参数不会被评估；相反，它们被转换为称为**惰性计算**的对象。惰性计算必须包含在需要时产生参数值所需的信息，就好像在应用时已经评估了它一样。因此，惰性计算必须包含参数表达式和正在评估过程应用的环境。
- en: 'The process of evaluating the expression in a thunk is called **forcing**.
    In general, a thunk will be forced only when its value is needed: when it is passed
    to a primitive procedure that will use the value of the thunk; when it is the
    value of a predicate of a conditional; and when it is the value of an operator
    that is about to be applied as a procedure. One design choice we have available
    is whether or not to memoize thunks, as we did with delayed objects in Lesson
    11\. With memoization, the first time a thunk is forced, it stores the value that
    is computed. Subsequent forcings simply return the stored value without repeating
    the computation. We''ll make our interpreter memoize, because this is more efficient
    for many applications. There are tricky considerations here, however.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在惰性计算中，强制执行一个惰性计算中的表达式称为**强制**。一般来说，只有在需要其值时，惰性计算才会被强制执行：当它被传递给将使用惰性计算的原始过程时；当它是条件语句的谓词的值时；以及当它是即将被应用为过程的操作符的值时。我们可以选择是否对惰性计算进行记忆化，就像我们在第11课中对延迟对象进行的那样。通过记忆化，第一次强制执行惰性计算时，它会存储计算出的值。后续的强制执行只需返回存储的值，而不重复计算。我们将使我们的解释器进行记忆化，因为这对许多应用来说更有效率。然而，这里有一些棘手的考虑。
- en: Modifying the Evaluator
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改求值器
- en: The main difference between the lazy evaluator and the one in Lesson 12 is in
    the handling of procedure applications in `eval` and `apply`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 惰性求值与第12课中的求值器之间的主要区别在于`eval`和`apply`中处理过程应用的方式。
- en: The `application?` clause of `eval` becomes
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`eval`的`application?`子句变为'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is almost the same as the `application?` clause of `eval` in Lesson 12.
    For lazy evaluation, however, we call `apply` with the operand expressions, rather
    than the arguments produced by evaluating them. Since we will need the environment
    to construct thunks if the arguments are to be delayed, we must pass this as well.
    We still evaluate the operator, because `apply` needs the actual procedure to
    be applied in order to dispatch on its type (primitive versus compound) and `apply`
    it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎与第12课中`eval`的`application?`子句相同。然而，对于惰性计算，我们调用`apply`与操作数表达式一起，而不是由评估它们产生的参数。由于如果参数要延迟，我们需要环境来构造惰性计算，因此我们也必须传递这个。我们仍然评估操作符，因为`apply`需要实际要应用的过程，以便根据其类型（原始
    versus 复合）进行分派和应用。
- en: Whenever we need the actual value of an expression, we use
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们需要表达式的实际值时，我们使用
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: instead of just `eval`, so that if the expression's value is a thunk, it will
    be forced.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 而不仅仅是`eval`，因此如果表达式的值是一个惰性计算，它将被强制执行。
- en: Modifying `apply`
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改`apply`
- en: 'Our new version of `apply` is also almost the same as the version in MCE. The
    difference is that `eval` has passed in unevaluated operand expressions: For primitive
    procedures (which are strict), we evaluate all the arguments before applying the
    primitive; for compound procedures (which are non-strict) we delay all the arguments
    before applying the procedure.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新版本`apply`与MCE中的版本几乎相同。不同之处在于`eval`传入了未评估的操作数表达式：对于原始过程（严格的），我们在应用原始过程之前评估所有参数；对于复合过程（非严格的），我们在应用过程之前延迟所有参数。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The procedures that process the arguments are just like `list-of-values` from
    Lesson 12, except that `list-of-delayed-args` delays the arguments instead of
    evaluating them, and `list-of-arg-values` uses `actual-value` instead of `eval`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 处理参数的过程与第12课中的`list-of-values`非常相似，只是`list-of-delayed-args`延迟参数而不是评估它们，而`list-of-arg-values`使用`actual-value`而不是`eval`：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Handling `if`
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理`if`
- en: 'The other place we must change the evaluator is in the handling of`if`, where
    we must use `actual-value` instead of `eval` to get the value of the predicate
    expression before testing whether it is `true` or `false`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须更改求值器的另一个地方是在处理`if`时，我们必须使用`actual-value`而不是`eval`来获取谓词表达式的值，然后再测试它是`true`还是`false`：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Modifying the `driver-loop`
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改`driver-loop`
- en: 'Finally, we must change the `driver-loop` procedure (the `read-eval-print`
    loop) to use `actual-value` instead of `eval`, so that if a delayed value is propagated
    back to the `read-eval-print` loop, it will be forced before being printed. We
    also change the prompts to indicate that this is the lazy evaluator:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须更改`driver-loop`过程（`read-eval-print`循环）以使用`actual-value`而不是`eval`，以便如果延迟的值传播回`read-eval-print`循环，则在打印之前将其强制执行。我们还更改提示以指示这是惰性求值器：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Testing it Out
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试它
- en: 'With these changes made, we can start the evaluator and test it. The successful
    evaluation of the `try` expression discussed in the section on Normal vs. Applicative
    Order indicates that the interpreter is performing lazy evaluation:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 进行这些更改后，我们可以启动求值器并对其进行测试。在关于正常顺序与应用顺序的部分讨论的`try`表达式成功评估表明解释器正在执行惰性求值：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Representing Thunks
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示Thunks
- en: 'Our evaluator must arrange to create thunks when procedures are applied to
    arguments and to force these thunks later. A thunk must package an expression
    together with the environment, so that the argument can be produced later. To
    force the thunk, we simply extract the expression and environment from the thunk
    and evaluate the expression in the environment. We use `actual-value` rather than
    `eval` so that in case the value of the expression is itself a thunk, we will
    force that, and so on, until we reach something that is not a thunk:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的求值器必须安排在将过程应用于参数时创建thunk，并稍后强制这些thunk。Thunk必须将表达式与环境打包在一起，以便稍后可以生成参数。为了强制thunk，我们只需从thunk中提取表达式和环境，并在环境中评估表达式。我们使用`actual-value`而不是`eval`，以便在表达式的值本身是thunk的情况下，我们将强制执行该值，依此类推，直到达到不是thunk的内容：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'One easy way to package an expression with an environment is to make a list
    containing the expression and the environment. Thus, we create a thunk as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将表达式与环境打包的一种简单方法是创建一个包含表达式和环境的列表。因此，我们按照以下方式创建thunk：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Actually, what we want for our interpreter is not quite this, but rather thunks
    that have been memoized. When a thunk is forced, we will turn it into an evaluated
    thunk by replacing the stored expression with its value and changing the thunk
    tag so that it can be recognized as already evaluated.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们为我们的解释器想要的不完全是这样，而是已经被记忆的thunk。当强制执行thunk时，我们将通过用其值替换存储的表达式并更改thunk标记将其转换为已评估的thunk，以便可以识别为已经评估。
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that the same `delay-it` procedure works both with and without memoization.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，相同的`delay-it`过程既适用于有记忆化，也适用于无记忆化。
