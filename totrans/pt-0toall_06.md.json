["```\n import torch\nfrom torch.autograd import Variable\nimport numpy as np\n\nxy = np.loadtxt('./data/diabetes.csv.gz', delimiter=',', dtype=np.float32)\nx_data = Variable(torch.from_numpy(xy[:, 0:-1]))\ny_data = Variable(torch.from_numpy(xy[:, [-1]]))\n\nprint(x_data.data.shape)\nprint(y_data.data.shape)\n\nclass Model(torch.nn.Module):\n\n    def __init__(self):\n        \"\"\"\n        In the constructor we instantiate two nn.Linear module\n        \"\"\"\n        super(Model, self).__init__()\n        self.l1 = torch.nn.Linear(8, 6)\n        self.l2 = torch.nn.Linear(6, 4)\n        self.l3 = torch.nn.Linear(4, 1)\n\n        self.sigmoid = torch.nn.Sigmoid()\n\n    def forward(self, x):\n        \"\"\"\n        In the forward function we accept a Variable of input data and we must return\n        a Variable of output data. We can use Modules defined in the constructor as\n        well as arbitrary operators on Variables.\n        \"\"\"\n        out1 = self.sigmoid(self.l1(x))\n        out2 = self.sigmoid(self.l2(out1))\n        y_pred = self.sigmoid(self.l3(out2))\n        return y_pred\n\n# our model\nmodel = Model()\n\n# Construct our loss function and an Optimizer. The call to model.parameters()\n# in the SGD constructor will contain the learnable parameters of the two\n# nn.Linear modules which are members of the model.\ncriterion = torch.nn.BCELoss(size_average=True)\noptimizer = torch.optim.SGD(model.parameters(), lr=0.1)\n\n# Training loop\nfor epoch in range(100):\n        # Forward pass: Compute predicted y by passing x to the model\n    y_pred = model(x_data)\n\n    # Compute and print loss\n    loss = criterion(y_pred, y_data)\n    print(epoch, loss.data[0])\n\n    # Zero gradients, perform a backward pass, and update the weights.\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step() \n```"]