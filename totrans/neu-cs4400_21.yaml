- en: Lazy vs Eager EvaluationTuesday, January 24th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 懒惰与急切评估
- en: 'As we have previously seen, there are two basic approaches for evaluation:
    either eager or lazy. In lazy evaluation, bindings are used for sort of textual
    references — it is only for avoiding writing an expression twice, but the associated
    computation is done twice anyway. In eager evaluation, we eliminate not only the
    textual redundancy, but also the computation.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所见，评估有两种基本方法：急切或懒惰。在懒惰评估中，绑定用于某种文本引用——这仅用于避免两次编写表达式，但相关的计算无论如何都会执行两次。在急切评估中，我们不仅消除了文本冗余，还消除了计算。
- en: 'Which evaluation method did our evaluator use? The relevant piece of formalism
    is the treatment of `with`:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的评估器使用了哪种评估方法？相关的形式化部分是`with`的处理：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And the matching piece of code is:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的代码片段是：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How do we make this lazy?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何使其变为懒惰评估？
- en: 'In the formal equation:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在正式的方程中：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and in the code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以及代码中：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can verify the way this works by tracing `eval` (compare the trace you get
    for the two versions):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过跟踪`eval`来验证其工作方式（比较您在两个版本中获得的跟踪）：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Ignoring the traces for now, the modified WAE interpreter works as before, specifically,
    all tests pass. So the question is whether the language we get is actually different
    than the one we had before. One difference is in execution speed, but we can’t
    really notice a difference, and we care more about meaning. Is there any program
    that will run differently in the two languages?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时忽略追踪，修改后的WAE解释器与以前的工作方式相同，具体来说，所有测试都通过了。因此问题是我们得到的语言是否实际上与以前的不同。一个区别在于执行速度，但我们实际上无法注意到区别，而我们更关心的是含义。是否有任何程序在两种语言中运行时会产生不同的结果？
- en: 'The main feature of the lazy evaluator is that it is not evaluating the named
    expression until it is actually needed. As we have seen, this leads to duplicating
    computations if the bound identifier is used more than once — meaning that it
    does not eliminate the dynamic redundancy. But what if the bound identifier is
    not used at all? In that case the named expression simply evaporates. This is
    a good hint at an expression that behaves differently in the two languages — if
    we add division to both languages, we get a different result when we try running:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 懒惰评估器的主要特点是，直到实际需要时才评估命名表达式。正如我们所见，如果绑定标识符使用多次，则会导致重复计算——这意味着它并未消除动态冗余。但是如果绑定标识符根本没有被使用呢？在这种情况下，命名表达式就会消失。这是一个表现出两种语言中行为不同的表达式的很好提示——如果我们在两种语言中都添加除法，当我们尝试运行时，我们会得到不同的结果：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The eager evaluator stops with an error when it tries evaluating the division
    — and the lazy evaluator simply ignores it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 急切的评估器在尝试评估除法时会停止并显示错误，而懒惰的评估器则会简单地忽略它。
- en: Even without division, we get a similar behavior for
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有除法，我们也会得到类似的行为
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: but it is questionable whether the fact that this evaluates to 7 is correct
    behavior — we really want to forbid program that use free variable.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这是否正确行为，即其评估为7，是值得怀疑的——我们真的希望禁止使用自由变量的程序。
- en: 'Furthermore, there is an issue with name capturing — we don’t want to substitute
    an expression into a context that captures some of its free variables. But our
    substitution allows just that, which is usually not a problem because by the time
    we do the substitution, the named expression should not have free variables that
    need to be replaced. However, consider evaluating this program:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，名称捕获存在问题——我们不希望将一个表达式替换为捕获其某些自由变量的上下文。但是我们的替换允许这样做，通常不是问题，因为在进行替换时，命名表达式不应该有需要替换的自由变量。然而，考虑评估此程序：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'under the two evaluation regimens: the eager version stops with an error, and
    the lazy version succeed. This points at a bug in our substitution, or rather
    not dealing with an issue that we do not encounter.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在两种评估制度下：急切版本会停止并显示错误，而懒惰版本会成功。这指向我们的替换中存在错误，或者说我们没有处理一个我们没有遇到的问题。
- en: 'So the summary is: as long as the initial program is correct, both evaluation
    regimens produce the same results. If a program contains free variables, they
    might get captured in a naive lazy evaluator implementation (but this is a bug
    that should be fixed). Also, there are some cases where eager evaluation runs
    into a run-time problem which does not happen in a lazy evaluator because the
    expression is not used. It is possible to prove that when you evaluate an expression,
    if there is an error that can be avoided, lazy evaluation will always avoid it,
    whereas an eager evaluator will always run into it. On the other hand, lazy evaluators
    are usually slower than eager evaluator, so it’s a speed vs. robustness trade-off.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以总结一下：只要初始程序是正确的，两种评估制度都会产生相同的结果。如果一个程序包含自由变量，它们可能会在一个天真的惰性求值器实现中被捕获（但这是一个应该修复的错误）。此外，有些情况下，急切求值会遇到运行时问题，而在惰性求值器中不会发生，因为表达式没有被使用。可以证明，当你评估一个表达式时，如果有一个错误可以避免，惰性求值器总是会避免它，而急切求值器总是会遇到它。另一方面，惰性求值器通常比急切求值器慢，所以这是速度与稳健性的权衡。
- en: Note that with lazy evaluation we say that an identifier is bound to an expression
    rather than a value. (Again, this is why the eager version needed to wrap `eval`‘s
    result in a `Num` and this one doesn’t.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，惰性求值中，我们说标识符绑定到一个表达式而不是一个值。（再次说明，这就是为什么急切版本需要将`eval`的结果包装在`Num`中，而这个版本不需要。）
- en: (It is possible to change things and get a more well behaved substitution, we
    basically will need to find if a capture might happen, and rename things to avoid
    it. For example,
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: （可以改变一些东西并得到一个更好的替换，基本上我们需要找到是否可能发生捕获，然后重命名东西以避免它。例如，
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'But you can see that this is much more complicated (more code: requires a `free-in`
    predicate, being able to invent new *fresh* names, etc). And it’s not even the
    end of that story…)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但你可以看到这更加复杂（更多的代码：需要一个`free-in`谓词，能够发明新的*新鲜*名称等等）。而且这甚至还不是故事的结束...）
