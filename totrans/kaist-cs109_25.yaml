- en: Compiling to Javascript and running in the browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kotlin comes with a compiler that compiles Kotlin source code to Javascript,
    ready to be included in a webpage. You can thus create applications that run entirely
    inside a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: To get you started, here are some tips and an example project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by creating a new directory. We will need to create three files in
    this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'canvas.html: the webpage loaded by the browser;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'canvas.js: the Javascript coded loaded from the webpage;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'jscanvas.js: the Javascript code for the org.otfried.cs109js.JsCanvas class
    that we will use;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'kotlin.js: the Kotlin standard library for Javascript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s start with the last one: kotlin.js is contained in the file kotlin-jslib.jar
    that came with the Kotlin compiler. Extract kotlin.js with your favorite tool
    and place it in your new directory (jar files are simply zipped archives).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The file jscanvas.js is also easy to obtain: it is contained in the archive
    cs109-jslib.jar that you [installed earlier](project-install.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample HTML file ([canvas.html](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the header of the document, we load the two libraries and our own Javascript
    code canvas.js (which we still have to generate). In the body, we include two
    elements: an HTML canvas, which is a rectangular area on that we can draw freely
    from Javascript, and a text division (which we can update later from Javascript).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load this file from your browser now: you should see an empty white rectangle
    with the text below.'
  prefs: []
  type: TYPE_NORMAL
- en: At this point we should turn on the Javascript console in the web browser. This
    is where all output from Javascript, as well as any error messages, will appear.
    On Firefox, use Menu, Developer, Web Console. On Safari, go to the Settings and
    tick the "Show Develop menu" checkbox, then go to the newly appearing Develop
    menu and open the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, the Console should only show an error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is the response to the onload attribute in the body tag. Here we are instructing
    Javascript to execute the function start in the package canvas inside the canvas.js
    script, after the webpage has been loaded entirely (which is important, since
    we want all HTML elements to be present when the code is run).
  prefs: []
  type: TYPE_NORMAL
- en: 'It remains to write this start function and to generate canvas.js. Here is
    a first example ([canvas1.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas1.kt)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to compile this file to Javascript by saying:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: kotlinc-js is the Kotlin-to-Javascript compiler. I indicate the output file
    name (corresponding to the module Kotlin.modules['canvas'] when called from Javascript).
    The package declaration at the beginning places the start function in the package
    canvas, and so it needs to be called from Javascript as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: which is exactly what we wrote in the onload attribute.
  prefs: []
  type: TYPE_NORMAL
- en: When you reload the webpage now, the canvas rectangle changes its color to green,
    and the text underneath changes. In the Javascript console, you should see the
    output of the println statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make our drawing more interesting by adding some color, text, and transparency
    ([canvas2.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas2.kt)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We compile again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When you reload the webpage now, the canvas should contain a transparent green
    square, some half-transparent red text on top, and a nice color pattern to the
    right.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far so good, now let''s add some interactivity. When you click with the
    mouse in the canvas, the text should move to this position. The keys ''a'', ''s'',
    ''w'', and ''z'' can be used to move the text around, the keys ''j'', and ''k''
    rotate it ([canvas3.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas3.kt)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We compile again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Reload the webpage. You should now be able to click into the canvas and see
    the text move to this position. When you press one of the active keys, the text
    should move and rotate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s add some animation to our drawing. The key ''g'' starts the
    animation and pauses it again. The code now also resizes the canvas to fill the
    entire browser window, leaving just a little space for the scroll bars and the
    text underneath ([canvas4.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas4.kt)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now you can program your own web applications. Or try [my implementation](js/2048/2048.html)
    of the [2048 game](project-2048.html). The movement keys are 'u', 'd', 'l', and 'r'.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Javascript Canvas API directly
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'While my JsCanvas class is convenient because you can use the same drawing
    code as for drawing to a bitmap and for the CS109 Android framework, you can of
    course remove the jscanvas.js file from your HTML file and use the Javascript
    functions for drawing to the canvas directly. See [canvas-nojscanvas.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas-nojscanvas.kt)
    for what the last version above would look like without JsCanvas. You may find
    the [Mozilla documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D)
    helpful: while it is meant for Javascript, much of the code works unchanged in
    Kotlin'
  prefs: []
  type: TYPE_NORMAL
