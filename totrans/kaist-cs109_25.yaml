- en: Compiling to Javascript and running in the browser
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译成 JavaScript 并在浏览器中运行
- en: Kotlin comes with a compiler that compiles Kotlin source code to Javascript,
    ready to be included in a webpage. You can thus create applications that run entirely
    inside a web browser.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 自带一个编译器，将 Kotlin 源代码编译成 JavaScript，准备好包含在网页中。因此，你可以创建完全在 Web 浏览器中运行的应用程序。
- en: To get you started, here are some tips and an example project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你入门，这里有一些提示和一个示例项目。
- en: 'We start by creating a new directory. We will need to create three files in
    this directory:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个新目录。我们将在此目录中创建三个文件：
- en: 'canvas.html: the webpage loaded by the browser;'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: canvas.html：浏览器加载的网页；
- en: 'canvas.js: the Javascript coded loaded from the webpage;'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: canvas.js：从网页加载的 JavaScript 代码；
- en: 'jscanvas.js: the Javascript code for the org.otfried.cs109js.JsCanvas class
    that we will use;'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jscanvas.js：我们将使用的 org.otfried.cs109js.JsCanvas 类的 JavaScript 代码；
- en: 'kotlin.js: the Kotlin standard library for Javascript.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kotlin.js：JavaScript 的 Kotlin 标准库。
- en: 'Let''s start with the last one: kotlin.js is contained in the file kotlin-jslib.jar
    that came with the Kotlin compiler. Extract kotlin.js with your favorite tool
    and place it in your new directory (jar files are simply zipped archives).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最后一个开始：kotlin.js 包含在 Kotlin 编译器附带的 kotlin-jslib.jar 文件中。用你喜欢的工具提取 kotlin.js
    并将其放在你的新目录中（jar 文件只是被简单压缩的存档）。
- en: 'The file jscanvas.js is also easy to obtain: it is contained in the archive
    cs109-jslib.jar that you [installed earlier](project-install.html).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 jscanvas.js 也很容易获得：它包含在你[之前安装过](project-install.html)的档案 cs109-jslib.jar
    中。
- en: 'Here is a sample HTML file ([canvas.html](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas.html)):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例 HTML 文件（[canvas.html](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas.html)）：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the header of the document, we load the two libraries and our own Javascript
    code canvas.js (which we still have to generate). In the body, we include two
    elements: an HTML canvas, which is a rectangular area on that we can draw freely
    from Javascript, and a text division (which we can update later from Javascript).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档的头部，我们加载两个库和我们自己的 JavaScript 代码 canvas.js（我们仍然需要生成）。在 body 中，我们包含两个元素：一个
    HTML 画布，这是一个我们可以从 JavaScript 自由绘制的矩形区域，和一个文本分区（稍后我们可以从 JavaScript 中更新）。
- en: 'Load this file from your browser now: you should see an empty white rectangle
    with the text below.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在从你的浏览器加载此文件：你应该看到一个空白的白色矩形和下面的文本。
- en: At this point we should turn on the Javascript console in the web browser. This
    is where all output from Javascript, as well as any error messages, will appear.
    On Firefox, use Menu, Developer, Web Console. On Safari, go to the Settings and
    tick the "Show Develop menu" checkbox, then go to the newly appearing Develop
    menu and open the console.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们应该在 Web 浏览器中打开 JavaScript 控制台。这是 JavaScript 的所有输出，以及任何错误消息，将会显示的地方。在 Firefox
    中，使用菜单、开发者、Web 控制台。在 Safari 中，转到设置并勾选“显示开发菜单”复选框，然后转到新出现的开发菜单并打开控制台。
- en: 'So far, the Console should only show an error message:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，控制台应该只显示一个错误消息：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is the response to the onload attribute in the body tag. Here we are instructing
    Javascript to execute the function start in the package canvas inside the canvas.js
    script, after the webpage has been loaded entirely (which is important, since
    we want all HTML elements to be present when the code is run).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 body 标签中 onload 属性的响应。在这里，我们指示 JavaScript 在网页完全加载后（这一点很重要，因为我们希望所有 HTML 元素在代码运行时都存在）在
    canvas.js 脚本中执行包 canvas 中的函数 start。
- en: 'It remains to write this start function and to generate canvas.js. Here is
    a first example ([canvas1.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas1.kt)):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的是编写这个 start 函数并生成 canvas.js。这里是一个第一个示例（[canvas1.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas1.kt)）：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We need to compile this file to Javascript by saying:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过以下方式将该文件编译成 JavaScript：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: kotlinc-js is the Kotlin-to-Javascript compiler. I indicate the output file
    name (corresponding to the module Kotlin.modules['canvas'] when called from Javascript).
    The package declaration at the beginning places the start function in the package
    canvas, and so it needs to be called from Javascript as
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: kotlinc-js 是 Kotlin 到 JavaScript 的编译器。我指定输出文件名（在从 JavaScript 调用时对应于模块 Kotlin.modules['canvas']）。开始处的包声明将
    start 函数放在 canvas 包中，因此需要从 JavaScript 中调用它作为
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: which is exactly what we wrote in the onload attribute.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们在 onload 属性中编写的内容。
- en: When you reload the webpage now, the canvas rectangle changes its color to green,
    and the text underneath changes. In the Javascript console, you should see the
    output of the println statement.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在重新加载网页，画布矩形会变成绿色，底部的文本也会改变。在 JavaScript 控制台中，你应该会看到 println 语句的输出。
- en: 'Let''s make our drawing more interesting by adding some color, text, and transparency
    ([canvas2.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas2.kt)):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加一些颜色、文本和透明度来使我们的绘图更加有趣（[canvas2.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas2.kt)）：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We compile again:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次编译：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you reload the webpage now, the canvas should contain a transparent green
    square, some half-transparent red text on top, and a nice color pattern to the
    right.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在重新加载网页，画布应该包含一个透明的绿色正方形，在上面有一些半透明的红色文本，右侧还有一个漂亮的颜色图案。
- en: 'So far so good, now let''s add some interactivity. When you click with the
    mouse in the canvas, the text should move to this position. The keys ''a'', ''s'',
    ''w'', and ''z'' can be used to move the text around, the keys ''j'', and ''k''
    rotate it ([canvas3.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas3.kt)):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止都很顺利，现在让我们添加一些交互性。当你在画布上点击鼠标时，文本应该移动到这个位置。按下键盘上的 'a'、's'、'w' 和 'z' 键可以用来移动文本，按下
    'j' 和 'k' 键可以旋转它（[canvas3.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas3.kt)）：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We compile again:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次编译：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Reload the webpage. You should now be able to click into the canvas and see
    the text move to this position. When you press one of the active keys, the text
    should move and rotate.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载网页。现在你应该能够点击画布并看到文本移动到这个位置。当你按下其中一个活动键时，文本应该移动和旋转。
- en: 'Finally, let''s add some animation to our drawing. The key ''g'' starts the
    animation and pauses it again. The code now also resizes the canvas to fill the
    entire browser window, leaving just a little space for the scroll bars and the
    text underneath ([canvas4.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas4.kt)):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们给我们的绘图添加一些动画效果。按下 'g' 键开始动画，并再次暂停。现在的代码还会调整画布大小以填满整个浏览器窗口，只留下一点空间给滚动条和底部的文本（[canvas4.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas4.kt)）：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now you can program your own web applications. Or try [my implementation](js/2048/2048.html)
    of the [2048 game](project-2048.html). The movement keys are 'u', 'd', 'l', and 'r'.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以编写自己的 web 应用程序了。或者尝试一下 [我的实现](js/2048/2048.html) 的 [2048 游戏](project-2048.html)。移动键是
    'u'、'd'、'l' 和 'r'。
- en: Using the Javascript Canvas API directly
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 直接使用 Javascript Canvas API
- en: 'While my JsCanvas class is convenient because you can use the same drawing
    code as for drawing to a bitmap and for the CS109 Android framework, you can of
    course remove the jscanvas.js file from your HTML file and use the Javascript
    functions for drawing to the canvas directly. See [canvas-nojscanvas.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas-nojscanvas.kt)
    for what the last version above would look like without JsCanvas. You may find
    the [Mozilla documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D)
    helpful: while it is meant for Javascript, much of the code works unchanged in
    Kotlin'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我的 JsCanvas 类很方便，因为你可以使用相同的绘图代码来绘制位图和 CS109 Android 框架，当然，你也可以从 HTML 文件中移除 jscanvas.js
    文件，并直接使用 JavaScript 函数来绘制到画布上。查看 [canvas-nojscanvas.kt](https://github.com/otfried/cs109-kotlin/raw/master/js/canvas/canvas-nojscanvas.kt)
    可以看到没有 JsCanvas 的最新版本是什么样子的。你可能会发现 [Mozilla 文档](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D)
    有所帮助：虽然它是为 JavaScript 设计的，但其中很多代码在 Kotlin 中也可以不变地使用。
