["```\n// one-liners\n[1..100] |> List.sum |> printfn \"sum=%d\"\n\n// no curly braces, semicolons or parentheses\nlet square x = x * x\nlet sq = square 42 \n\n// simple types in one line\ntype Person = {First:string; Last:string}\n\n// complex types in a few lines\ntype Employee = \n  | Worker of Person\n  | Manager of Employee list\n\n// type inference\nlet jdoe = {First=\"John\";Last=\"Doe\"}\nlet worker = Worker jdoe \n```", "```\n// automatic equality and comparison\ntype Person = {First:string; Last:string}\nlet person1 = {First=\"john\"; Last=\"Doe\"}\nlet person2 = {First=\"john\"; Last=\"Doe\"}\nprintfn \"Equal? %A\"  (person1 = person2)\n\n// easy IDisposable logic with \"use\" keyword\nuse reader = new StreamReader(..)\n\n// easy composition of functions\nlet add2times3 = (+) 2 >> (*) 3\nlet result = add2times3 5 \n```", "```\n// strict type checking\nprintfn \"print string %s\" 123 //compile error\n\n// all values immutable by default\nperson1.First <- \"new name\"  //assignment error \n\n// never have to check for nulls\nlet makeNewString str = \n   //str can always be appended to safely\n   let newString = str + \" new!\"\n   newString\n\n// embed business logic into types\nemptyShoppingCart.remove   // compile error!\n\n// units of measure\nlet distance = 10<m> + 10<ft> // error! \n```", "```\n// easy async logic with \"async\" keyword\nlet! result = async {something}\n\n// easy parallelism\nAsync.Parallel [ for i in 0..40 -> \n      async { return fib(i) } ]\n\n// message queues\nMailboxProcessor.Start(fun inbox-> async{\n    let! msg = inbox.Receive()\n    printfn \"message is: %s\" msg\n    }) \n```", "```\n// impure code when needed\nlet mutable counter = 0\n\n// create C# compatible classes and interfaces\ntype IEnumerator<'a> = \n    abstract member Current : 'a\n    abstract MoveNext : unit -> bool \n\n// extension methods\ntype System.Int32 with\n    member this.IsEven = this % 2 = 0\n\nlet i=20\nif i.IsEven then printfn \"'%i' is even\" i\n\n// UI code\nopen System.Windows.Forms \nlet form = new Form(Width= 400, Height = 300, \n   Visible = true, Text = \"Hello World\") \nform.TopMost <- true\nform.Click.Add (fun args-> printfn \"clicked!\")\nform.Show() \n```"]