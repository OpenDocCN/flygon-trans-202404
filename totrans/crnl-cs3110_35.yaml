- en: 'Recitation 24: Solving Recurrences'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第24讲：解决递归关系
- en: In the previous recitation, we saw how to solve recurrences, with the example
    of a simple multiplication function using only additions, and running in time
    *O(log n)*. Today we will see more examples of those, by proving the complexity
    of mergesort, as well as the complexity of a function calculating Fibonacci numbers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一讲中，我们看到了如何解决递归关系的方法，以一个简单的乘法函数作为例子，该函数只使用加法，并在时间上运行为*O(log n)*。今天我们将通过证明归并排序的复杂性以及计算斐波那契数的函数的复杂性来看更多的例子。
- en: Merge sort
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 归并排序
- en: Implementation of merge sort
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 归并排序的实现
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Merge sort asymptotic timing analysis
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 归并排序渐近时间复杂度分析
- en: Now let's show that `merge_sort` is not only a *correct* but also an *efficient*
    algorithm for sorting lists of numbers. We start by observing without proof that
    the performance of the `split` function is linear in the size of the input list.
    This can be shown by the same approach we will take for `merge`, so let's just
    look at `merge` instead.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们展示`merge_sort`不仅是一个*正确*的算法，而且是一个*高效*的排序数字列表的算法。我们首先观察到，没有证明的情况下，`split`函数的性能与输入列表的大小成线性关系。这可以通过与我们将对`merge`采取的相同方法来证明，因此我们只看`merge`。
- en: The `merge` function too is linear-time—that is, *O*(*n*)—in the total length
    of the two input lists. We will first find a recurrence relation for the execution
    time. Suppose the total length of the input lists is zero or one. Then the function
    must execute one of the two *O*(1)  arms of the case expression. These take at
    most some time *c*[0] to execute. So we have
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`merge`函数的运行时间也是线性的—也就是*O*(*n*)—在两个输入列表的总长度上。我们首先找出执行时间的递归关系。假设输入列表的总长度为零或一。那么函数必须执行case表达式的两个*O*(1)分支之一。这些最多花费一些时间*c*[0]来执行。所以我们有'
- en: '*T*(0) = *c*[0]'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*T*(0) = *c*[0]'
- en: '*T*(1) = *c*[0]'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*T*(1) = *c*[0]'
- en: Now, consider lists of total length *n*. The recursive call is on lists of total
    length *n*−1, so we have
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑总长度为*n*的列表。递归调用的列表总长度为*n*−1，因此我们有
- en: '*T*(*n*) = *T*(*n*−1) + *c*[1]'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*T*(*n*) = *T*(*n*−1) + *c*[1]'
- en: where *c*[1] is an constant upper bound on the time required to execute the
    if statement and the operator `::` (which takes constant time for usual implementations
    of lists). This gives us a recurrence relation to solve for *T*.  We can apply
    the iterative method to solve the recurrence relation by expanding out the recurrence
    relation inequalities for the first few steps.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*c*[1]是对执行if语句和操作符`::`（对于列表的常规实现需要常数时间）所需时间的常数上界。这给了我们一个解决*T*的递归关系的递归关系。我们可以通过展开前几个步骤的递归关系不等式来应用迭代方法来解决递归关系。
- en: '*T*(0) = *c*[0]'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*T*(0) = *c*[0]'
- en: '*T*(1) = *c*[0] *T*(2) = *T*(1) + *c*[1] = *c*[0] + *c*[1] *T*(3) = *T*(2)
    + *c*[1] = *c*[0] + 2*c*[1] *T*(4) = *T*(3) + *c*[1] = *c*[0] + 3*c*[1'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*T*(1) = *c*[0] *T*(2) = *T*(1) + *c*[1] = *c*[0] + *c*[1] *T*(3) = *T*(2)
    + *c*[1] = *c*[0] + 2*c*[1] *T*(4) = *T*(3) + *c*[1] = *c*[0] + 3*c*[1'
- en: '...] *T*(*n*) = *T*(*n*−1) + *c*[1] = *c*[0] + (*n*−1)*c*[1] = (*c*[0] - c[1])+
    *c*[1]*n*'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '...] *T*(*n*) = *T*(*n*−1) + *c*[1] = *c*[0] + (*n*−1)*c*[1] = (*c*[0] - c[1])+
    *c*[1]*n*'
- en: 'We notice a pattern which the last line captures. This pattern can be proved
    more rigorously by induction: let us prove by induction that for *n >=0*, *T*(*n*)=(*c*[0]
    - c[1])+ *c*[1]*n*. For *n=0*, the result is true (proved above), and if it is
    true for *n-1*, it is true for n using the last line above.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到最后一行捕捉到的模式。这种模式可以通过归纳更严谨地证明：让我们归纳地证明，对于*n >=0*，*T*(*n*)=(*c*[0] - c[1])+
    *c*[1]*n*。对于*n=0*，结果是正确的（以上已证明），如果对于*n-1*成立，则使用上面的最后一行，对于n也是成立的。
- en: Recall that *T*(*n*) is *O*(*n*) if for all *n* greater than some *n*[0], we
    can find a constant *k* such that *T*(*n*) < *kn*. For n at least 1, this is easily
    satisfied by setting *k* = *c*[0] + 2*c*[1]. Or we can just remember that any
    first-degree polynomial is *O*(*n*) and also Θ(*n*). An even simpler way to find
    the right bound is to observe that the choice of constants *c[0]* and *c[1]* doesn't
    matter; if we plug in 1 for both of them we get *T*(1) = 1, *T*(2)=2, *T*(3)=3,
    etc., which is clearly *O*(*n*).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，如果对于所有大于某个*n*[0]的*n*，我们可以找到一个常数*k*，使得*T*(*n*) < *kn*，那么*T*(*n*)是*O*(*n*)。
    对于至少为1的*n*，通过设置*k* = *c*[0] + 2*c*[1]，这很容易满足。或者我们可以记住，任何一次多项式都是*O*(*n*)，也是Θ(*n*)。找到正确的界限的更简单的方法是观察常数*c[0]*和*c[1]*的选择并不重要；如果我们将它们都替换为1，我们得到*T*(1)
    = 1，*T*(2)=2，*T*(3)=3等，这显然是*O*(*n*)。
- en: 'Now let''s consider the `merge_sort` function itself. Again, for zero- and
    one-element lists we compute in constant time. For *n*-element lists we make two
    recursive calls, but to sublists that are about half the size, and calls to `split`
    and `merge` that each take Θ(*n*) time. For simplicity we''ll pretend that the
    sublists are exactly half the size. The recurrence relation we obtain has this
    form:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑`merge_sort`函数本身。同样地，对于零个和一个元素的列表，我们在常数时间内计算。对于 *n* 个元素的列表，我们进行两次递归调用，但是对大约一半大小的子列表进行调用，以及对于每个都需要Θ(*n*)时间的`split`和`merge`。为简单起见，我们假装子列表的大小正好是一半。我们获得的递归关系形式如下：
- en: '*T*(0) = *c*[0]'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*T*(0) = *c*[0]'
- en: '*T*(1) = *c*[0] *T*(*n*) = 2 *T*(*n*/2) + *c*[1]*n + * *c*[2]*n + c*[3]'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*T*(1) = *c*[0] *T*(*n*) = 2 *T*(*n*/2) + *c*[1]*n + * *c*[2]*n + c*[3]'
- en: 'Let''s use the iterative method to figure out the running time of `merge_sort`.
    We know that any solution must work for arbitrary constants *c*[0] and *c*[4],
    so again we replace them both with 1 to keep things simple. That leaves us with
    the following recurrence equations to work with:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用迭代法来计算`merge_sort`的运行时间。我们知道任何解决方案都必须适用于任意常数 *c*[0] 和 *c*[4]，所以我们再次将它们都替换为1以保持简单。这样，我们就得到以下递归方程：
- en: '*T*(1) = 1'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*T*(1) = 1'
- en: '*T*(*n*) = 2 *T*(*n*/2) + *n*'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*T*(*n*) = 2 *T*(*n*/2) + *n*'
- en: 'Starting with the iterative method, we can start expanding the time equation
    until we notice a pattern:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从迭代法开始，我们可以开始展开时间方程，直到注意到一种模式：
- en: '*T*(*n*) = 2*T*(*n*/2) + *n*'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*T*(*n*) = 2*T*(*n*/2) + *n*'
- en: = 2(2*T*(*n*/4) + *n*/2) + *n*
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = 2(2*T*(*n*/4) + *n*/2) + *n*
- en: = 4*T*(*n*/4) + *n* + *n*
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = 4*T*(*n*/4) + *n* + *n*
- en: = 4(2*T*(*n*/8) + *n*/4) + *n* + *n*
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = 4(2*T*(*n*/8) + *n*/4) + *n* + *n*
- en: = 8*T*(*n*/8) + *n* + *n* + *n*
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = 8*T*(*n*/8) + *n* + *n* + *n*
- en: = *nT*(*n*/*n*) + *n* + ... + *n* + *n* + *n*
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = *nT*(*n*/*n*) + *n* + ... + *n* + *n* + *n*
- en: = *n* + *n* + ... + *n* + *n* + *n*
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = *n* + *n* + ... + *n* + *n* + *n*
- en: Counting the number of repetitions of *n* in the sum at the end, we see that
    there are lg *n* + 1 of them.  Thus the running time is *n*(lg *n* + 1) = *n*
    lg *n* + *n*. We observe that *n* lg *n* + *n* < *n* lg *n* + *n* lg *n* = 2*n*
    lg *n* for *n*>0, so the running time is *O*(*n* lg *n*).  So now we've done the
    analysis by using the iterative method, let's use strong induction to verify that
    the bound is correct.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 计算最后的总和中 *n* 的重复次数，我们看到它们有lg *n* + 1个。 因此，运行时间为 *n*(lg *n* + 1) = *n* lg *n*
    + *n*。我们观察到 *n* lg *n* + *n* < *n* lg *n* + *n* lg *n* = 2*n* lg *n* 对于 *n*>0，所以运行时间是
    *O*(*n* lg *n*)。 现在我们已经通过迭代方法进行了分析，让我们使用强归纳来验证这个界限是否正确。
- en: Merge sort analysis using strong induction
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用强归纳的归并排序分析
- en: '**Property P(n) to prove:**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**要证明的性质P(n)：**'
- en: '*n* ≥ 1 ⇒ *T*(*n*) = *n* lg *n* + *n*'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*n* ≥ 1 ⇒ *T*(*n*) = *n* lg *n* + *n*'
- en: '**Proof by strong (course-of-values) induction on n**. For arbitrary *n*, show
    P(n) is true assuming the induction hypothesis *T*(*m*) = *m* lg *m* + *m* for
    all *m*<*n*.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于n进行强（函数值）归纳**。对于任意的 *n*，假设归纳假设 *T*(*m*) = *m* lg *m* + *m* 对于所有的 *m*<*n*
    是真实的。'
- en: '**Case n = 0**: vacuously true'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**情况 n = 0**：空证'
- en: '**Case n = 1**: T(1) = 1 = 1 lg 1 + 1'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**情况 n = 1**：T(1) = 1 = 1 lg 1 + 1'
- en: '**Case n > 1**:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**情况 n > 1**：'
- en: 'Induction Hypothesis:'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 归纳假设：
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Proof:'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 证明：
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*T*(*n*) = 2 T(*n*/2) + *n*'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*T*(*n*) = 2 T(*n*/2) + *n*'
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: = (*n*/2) lg (*n*/2) + 2(*n*/2) + *n*              *(by induction hypothesis)*
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = (*n*/2) lg (*n*/2) + 2(*n*/2) + *n*              *(根据归纳假设)*
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: = *n* lg (*n*/2) + 2*n*
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = *n* lg (*n*/2) + 2*n*
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: = *n* lg *n* − 1) 1) + 2*n*
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = *n* lg *n* − 1) 1) + 2*n*
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: = *n* lg *n* + *n*
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = *n* lg *n* + *n*
- en: Since *n* lg *n* + *n* is Θ(*n* lg *n*), we have shown that merge sort is Θ(*n*
    lg *n*).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 *n* lg *n* + *n* 是Θ(*n* lg *n*)，我们已经证明了归并排序是Θ(*n* lg *n*)。
- en: The Fibonacci numbers
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 斐波那契数
- en: The Fibonacci numbers, written *F(n)*, are defined by *F(0)=0*, *F(1)=1*, and
    for *n>1*, *F(n)=F(n-1)+F(n-2)*. The first few Fibonacci numbers are 0,1,1,2,3,5,8,13,21,34,55,89,...
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数，记作*F(n)*，由*F(0)=0*，*F(1)=1*定义，对于*n>1*，*F(n)=F(n-1)+F(n-2)*。 前几个斐波那契数是0,1,1,2,3,5,8,13,21,34,55,89,...
- en: A first implementation and its complexity
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一个实现版本及其复杂度
- en: 'We would like to write a function that would calculate the *n*-th Fibonacci
    number. A first implementation would be:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要编写一个计算第 *n* 个斐波那契数的函数。 第一个实现版本可能是：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function follows directly from the definition of Fibonacci numbers, thus
    its correctness. Now, if we try running it in OCaml on say 100, it takes forever
    to complete. Let us see why by analyzing its asymptotic time.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数直接遵循斐波那契数的定义，因此它的正确性是显而易见的。现在，如果我们尝试在OCaml中运行它，比如说100，它需要永远的时间才能完成。让我们通过分析其渐近时间来看看为什么。
- en: The asymptotic time taken for *n=0* and *n=1* is constant, let us call it *c[0]*,
    so that *T(0)=T(1)=c[0]*. To calculate *T(n)* we make two recursive call, so that
    *T(n)=T(n-1)+T(n-2)*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当*n=0*和*n=1*时的渐近时间是常数，我们称之为*c[0]*，因此*T(0)=T(1)=c[0]*。为了计算*T(n)*，我们进行两次递归调用，得到*T(n)=T(n-1)+T(n-2)*。
- en: In mathematics, it can be shown that a solution of this recurrence relation
    is of the form *T(n)=a[1]*r[1]^n+a[2]*r[2]^n*, where *r[1]* and *r[2]* are the
    solutions of the equation *r²=r+1*. We get *r[1]=(1+sqrt(5))/2* and *r[2]=(1-sqrt(5))/2*.
    Then with *T(0)=T(1)=c[0]*, we get *a[1]+a[2]=a[1]r[1]+a[2]r[2]=c[0]*, leading
    to *a[1]=c[0]r[1]/sqrt(5)* and *a[2]=-c[0]r[2]/sqrt(5)*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，可以证明这个递推关系的解的形式是 *T(n)=a[1]*r[1]^n+a[2]*r[2]^n*，其中 *r[1]* 和 *r[2]* 是方程
    *r²=r+1* 的解。我们得到 *r[1]=(1+sqrt(5))/2* 和 *r[2]=(1-sqrt(5))/2*。然后根据 *T(0)=T(1)=c[0]*，我们得到
    *a[1]+a[2]=a[1]r[1]+a[2]r[2]=c[0]*，从而得到 *a[1]=c[0]r[1]/sqrt(5)* 和 *a[2]=-c[0]r[2]/sqrt(5)*。
- en: We can see that *r[2]<1*, therefore *r[2]^n* is *o(1)*. Therefore *T(n)* is
    *Θ(r[1]^n)*, with *r[1]=(1+sqrt(5))/2*. The algorithm thus takes an exponential
    time to complete.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到 *r[2]<1*，因此 *r[2]^n* 是 *o(1)*。因此 *T(n)* 是 *Θ(r[1]^n)*，其中 *r[1]=(1+sqrt(5))/2*。因此算法完成所需的时间是指数级的。
- en: A more efficient implementation
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更高效的实现方式
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This implementation is clearly linear: each loop takes a constant time to complete,
    there are order of *n* loops. Like before, the correctness can be obtained by
    a recurrence on *n* (by stating that at each loop, *a=F(i-2)* and *b=F(i-1)*).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实现显然是线性的：每次循环需要固定的时间完成，循环次数是*n*的数量级。与之前一样，正确性可以通过对*n*进行递归来得到（声明在每次循环中，*a=F(i-2)*
    和 *b=F(i-1)*）。
