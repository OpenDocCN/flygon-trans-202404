["```\nlet stream = Rx.Observable.create((observer) => {\n   let request = new XMLHttpRequest();\n\n   request.open( \u2018GET\u2019, \u2018url\u2019 );\n   request.onload =() =>{\n      if(request.status === 200) {\n         observer.next( request.response );\n         observer.complete();\n     } else {\n          observer.error('error happened');\n     }\n   }\n\n   request.onerror = () => {  \n       observer.error('error happened')                                                                                } \n   request.send();\n})\n\nstream.subscribe(\n   (data) => console.log( data )  \n) \n```", "```\nif(request.status === 200) {\n  observer.next( request.response )  // emit data\n\n} \n```", "```\nelse {\n       observer.error('error happened');\n  } \n```", "```\nrequest.onerror = () => {\n   observer.error('error happened') \n} \n```", "```\nif(request.status === 200) {\n  observer.next( request.response )\n  observer.complete()  // close stream, as we don't expect more data\n} \n```", "```\nconsole.clear();\n\nconst { Observable } = Rx;\n\nconst speechRecognition$ = new Observable(observer => {\n   const speech = new webkitSpeechRecognition();\n\n   speech.onresult = (event) => {\n     observer.next(event);\n     observer.complete();\n   };\n\n   speech.start();\n\n   return () => {\n     speech.stop();\n   }\n});\n\nconst say = (text) => new Observable(observer => {\n  const utterance = new SpeechSynthesisUtterance(text);\n  utterance.onend = (e) => {\n    observer.next(e);\n    observer.complete();\n  };\n  speechSynthesis.speak(utterance);\n});\n\nconst button = document.querySelector(\"button\");\n\nconst heyClick$ = Observable.fromEvent(button, 'click');\n\nheyClick$\n  .switchMap(e => speechRecognition$)\n  .map(e => e.results[0][0].transcript)\n  .map(text => {\n    switch (text) {\n      case 'I want':\n        return 'candy';\n      case 'hi':\n      case 'ice ice':\n        return 'baby';\n      case 'hello':\n        return 'Is it me you are looking for';\n      case 'make me a sandwich':\n      case 'get me a sandwich':\n        return 'do it yo damn self';\n      case 'why are you being so sexist':\n        return 'you made me that way';\n      default:\n        return `I don't understand: \"${text}\"`;\n    }\n  })\n  .concatMap(say)\n  .subscribe(e => console.log(e)); \n```", "```\nconst speechRecognition$ = new Observable(observer => {\n   const speech = new webkitSpeechRecognition();\n\n   speech.onresult = (event) => {\n     observer.next(event);\n     observer.complete();\n   };\n\n   speech.start();\n\n   return () => {\n     speech.stop();\n   }\n}); \n```", "```\nreturn () => {\n   speech.stop();\n } \n```", "```\nconst say = (text) => new Observable(observer => {\n  const utterance = new SpeechSynthesisUtterance(text);\n  utterance.onend = (e) => {\n    observer.next(e);\n    observer.complete();\n  };\n  speechSynthesis.speak(utterance);\n}); \n```", "```\nheyClick$\n  .switchMap(e => speechRecognition$)\n  .map(e => e.results[0][0].transcript)\n  .map(text => {\n    switch (text) {\n      case 'I want':\n        return 'candy';\n      case 'hi':\n      case 'ice ice':\n        return 'baby';\n      case 'hello':\n        return 'Is it me you are looking for';\n      case 'make me a sandwich':\n      case 'get me a sandwich':\n        return 'do it yo damn self';\n      case 'why are you being so sexist':\n        return 'you made me that way';\n      default:\n        return `I don't understand: \"${text}\"`;\n    }\n  })\n  .concatMap(say)\n  .subscribe(e => console.log(e)); \n```"]