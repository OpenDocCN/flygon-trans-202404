- en: Conversion between array and slice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Conversion between array and slice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In `Go`, array is a fixed length of continuous memory with specified type,
    while slice is just a reference which points to an underlying array. Since they
    are different types, they can''t assign value each other directly. See the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Because `copy` only accepts slice argument, we can use the `[:]` to create
    a slice from array. Check next code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The running output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The above example is copying value from slice to array, and the opposite operation
    is similar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The execution result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'References:'
  prefs: []
  type: TYPE_NORMAL
- en: '[In golang how do you convert a slice into an array](http://stackoverflow.com/questions/19073769/in-golang-how-do-you-convert-a-slice-into-an-array);'
  prefs: []
  type: TYPE_NORMAL
- en: '[Arrays, slices (and strings): The mechanics of ''append''](https://blog.golang.org/slices).'
  prefs: []
  type: TYPE_NORMAL
