["```\n(define (make-card rank suit)\n  (cons rank (first suit))) \n```", "```\n(define (rank card)\n  (car card))\n\n(define (suit card)\n  (cdr card)) \n```", "```\n-> (define c (make-card 13 'heart))\ncard\n-> (rank c)\n13\n-> (suit c)\nh \n```", "```\n(define make-hand list) ;; constructor creates a list of cards\n\n(define first-card car) ;; returns the first card in hand\n\n(define rest-hand cdr) ;; returns the rest of the hand\n\n(define empty-hand? null?) ;; checks if you have no cards in your hand \n```", "```\n-> (define my-hand (make-hand (make-card 1 'heart)\n                           (make-card 5 'diamond)\n                           (make-card 10 'diamond)\n                           (make-card 13 'club)))\nmy-hand\n-> (first-card my-hand)\n(1 . h)\n-> (rest-hand my-hand)\n((5 . d) (10 . d) (13 . c)) \n```", "```\n(define (total hand)\n    (if (empty-hand? hand)\n        0\n        (+ (rank (first-card hand)) (total (rest-hand hand))))) \n```", "```\n-> (total my-hand)\n29 \n```", "```\n(define (make-card rank suit)\n  (cond ((equal? suit \u2019heart) rank)\n        ((equal? suit \u2019spade) (+ rank 13))\n        ((equal? suit \u2019diamond) (+ rank 26))\n        ((equal? suit \u2019club) (+ rank 39))\n        (else (error \"say what?\")) ))\n\n(define (rank card)\n  (remainder card 13))\n\n(define (suit card)\n  (nth (quotient card 13) \u2019(heart spade diamond club))) \n```"]