- en: プロトタイプオブジェクト
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://jsprimer.net/basic/prototype-object/](https://jsprimer.net/basic/prototype-object/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 「[オブジェクト](../object/)」の章では、オブジェクトの処理方法について見てきました。 その中で、空のオブジェクトであっても`toString`メソッドなどを呼び出せていました。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: オブジェクトリテラルで空のオブジェクトを定義しただけなのに、`toString`メソッドを呼び出せています。 このメソッドはどこに実装されているのでしょうか？
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: また、JavaScriptには`toString`以外にも、オブジェクトに自動的に実装されるメソッドがあります。 これらのオブジェクトに組み込まれたメソッドをビルトインメソッドと呼びます。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: この章では、これらのビルトインメソッドがどこに実装され、なぜ`Object`のインスタンスから呼び出せるのかを確認していきます。 詳しい仕組みについては「[クラス](../class/)」の章で改めて解説するため、この章では大まかな動作の流れを理解することが目的です。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](#object-is-origin)*`Object`はすべての元*'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*`Object`には、他の`Array`、`String`、`Function`などのオブジェクトとは異なる特徴があります。 それは、他のオブジェクトはすべて`Object`を継承しているという点です。'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 正確には、ほとんどすべてのオブジェクトは`Object.prototype`プロパティに定義された`prototype`オブジェクトを継承しています。
    `prototype`オブジェクトとは、すべてのオブジェクトの作成時に自動的に追加される特殊なオブジェクトです。 `Object`の`prototype`オブジェクトは、すべてのオブジェクトから利用できるメソッドなどを提供するベースオブジェクトとも言えます。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![すべてのオブジェクトは`Object`の`prototype`を継承している](../Images/a5724e6230250e26ed28c35e386f54c9.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: 具体的にどういうことかを見てみます。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 先ほども登場した`toString`メソッドは、`Object`の`prototype`オブジェクトに定義があります。 次のように、`Object.prototype.toString`メソッドの実装自体も参照できます。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: このような`prototype`オブジェクトに組み込まれているメソッドは**プロトタイプメソッド**と呼ばれます。 この書籍では`Object.prototype.toString`のようなプロトタイプメソッドを「Objectの`toString`メソッド」と短縮して呼ぶことがあります。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '`Object`のインスタンスは、この`Object.prototype`オブジェクトに定義されたメソッドやプロパティを継承します。 つまり、オブジェクトリテラルや`new
    Object`でインスタンス化したオブジェクトは、`Object.prototype`に定義されたものが利用できるということです。'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、オブジェクトリテラルで作成（インスタンス化）したオブジェクトから、`Object.prototype.toString`メソッドを参照しています。
    このときに、インスタンスの`toString`メソッドと`Object.prototype.toString`は同じものとなることがわかります。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: このように`Object.prototype`に定義されている`toString`メソッドなどは、インスタンス作成時に自動的に継承されるため、`Object`のインスタンスから呼び出せます。
    これによりオブジェクトリテラルで作成した空のオブジェクトでも、`Object.prototype.toString`メソッドなどを呼び出せるようになっています。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: このインスタンスから`prototype`オブジェクト上に定義されたメソッドを参照できる仕組みを**プロトタイプチェーン**と呼びます。 プロトタイプチェーンの仕組みについては「[クラス](../class/)」の章で扱うため、ここではインスタンスからプロトタイプメソッドを呼び出せるということがわかっていれば問題ありません。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[](#prototype-shorthand-syntax)*[コラム] `Object#toString`という短縮した表記について*'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*この書籍では、`Object.prototype.toString`のように`prototype`を含めて毎回書くと冗長なため、「Objectの`toString`メソッド」と短縮して書く場合があります。
    この書籍以外の文章では、`Object.prototype.toString`を`Object#toString`のように`prototype`の代わりに`#`を利用して表しているケースがあります。'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '`#`が`prototype`の短縮表現として使われていたのは、`#`がJavaScriptの構文として使われていない記号でもあったためです。 詳細は「[クラス](../class/)」の章で解説しますが、ES2022では`#`がJavaScriptの構文として追加され、`#`という記号が意味をもつようになりました。
    ES2022以降では、説明のために`#`を`prototype`の短縮表現に使うと、人によっては異なる意味に見えてしまう可能性があります。'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: そのため、この書籍は`Object.prototype.toString`を`Object#toString`のように`#`を使って表す短縮表記は利用していません。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[](#same-method-name-order)*プロトタイプメソッドとインスタンスメソッドの優先順位*'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*プロトタイプメソッドと同じ名前のメソッドがインスタンスオブジェクトに定義されている場合もあります。 その場合には、インスタンスに定義したメソッドが優先して呼び出されます。'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、`Object`のインスタンスである`customObject`に`toString`メソッドを定義しています。 実行してみると、プロトタイプメソッドよりも優先してインスタンスのメソッドが呼び出されていることがわかります。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: このように、インスタンスとプロトタイプオブジェクトで同じ名前のメソッドがある場合には、インスタンスのメソッドが優先されます。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[](#diff-in-operator-and-object-hasown)*`Object.hasOwn`静的メソッドと`in`演算子との違い*'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*「[オブジェクト](../object/)」の章で学んだ`Object.hasOwn`静的メソッドと`in`演算子の挙動の違いについて見ていきます。
    2つの挙動の違いはこの章で紹介したプロトタイプオブジェクトに関係しています。'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '`Object.hasOwn`静的メソッドは、指定したオブジェクト自体が指定したプロパティを持っているかを判定します。 一方、`in`演算子はオブジェクト自身が持っていなければ、そのオブジェクトの継承元である`prototype`オブジェクトまで探索して持っているかを判定します。
    つまり、`in`演算子はインスタンスに実装されたメソッドなのか、プロトタイプオブジェクトに実装されたメソッドなのかを区別しません。'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.hasOwn`静态方法用于判断指定对象本身是否具有指定属性。而`in`运算符则会搜索对象本身是否具有该属性，如果没有，则会继续搜索其原型对象（`prototype`对象）。换句话说，`in`运算符不区分实例中实现的方法和原型对象中实现的方法。'
- en: 次のコードでは、空のオブジェクトが`toString`メソッドを持っているかを`Object.hasOwn`静的メソッドと`in`演算子でそれぞれ判定しています。
    `Object.hasOwn`静的メソッドは`false`を返し、`in`演算子は`toString`メソッドがプロトタイプオブジェクトに存在するため`true`を返します。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码示例使用`Object.hasOwn`静态方法和`in`运算符分别判断空对象是否具有`toString`方法。`Object.hasOwn`静态方法返回`false`，而`in`运算符返回`true`，因为`toString`方法存在于原型对象中。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 次のように、インスタンスが`toString`メソッドを持っている場合は、`Object.hasOwn`静的メソッドも`true`を返します。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，如果实例具有`toString`方法，则`Object.hasOwn`静态方法也会返回`true`。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[](#create-method)*オブジェクトの継承元を明示する`Object.create`メソッド*'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#create-method)*明确对象的继承源的`Object.create`方法*'
- en: '*`Object.create`メソッドを使うと、第一引数に指定した`prototype`オブジェクトを継承した新しいオブジェクトを作成できます。'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*通过使用`Object.create`方法，可以创建一个新对象，该对象继承自指定的`prototype`对象。'
- en: これまでの説明で、オブジェクトリテラルは`Object.prototype`オブジェクトを自動的に継承したオブジェクトを作成していることがわかりました。
    オブジェクトリテラルで作成する新しいオブジェクトは、`Object.create`メソッドを使うことで次のように書けます。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前面的解释，我们知道对象字面量会自动继承`Object.prototype`对象。通过使用`Object.create`方法，可以创建新对象，如下所示。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[](#inherit-object)*ArrayもObjectを継承している*'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#inherit-object)*Array也继承自Object*'
- en: '*`Object`と`Object.prototype`の関係と同じように、ビルトインオブジェクト`Array`も`Array.prototype`を持っています。
    同じように、配列（`Array`）のインスタンスは`Array.prototype`を継承します。 さらに、`Array.prototype`は`Object.prototype`を継承しているため、`Array`のインスタンスは`Object.prototype`も継承しています。'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Object`和`Object.prototype`的关系与内置对象`Array`和`Array.prototype`的关系类似。同样地，数组（`Array`）的实例也会继承`Array.prototype`。此外，由于`Array.prototype`也继承了`Object.prototype`，因此数组（`Array`）的实例也会继承`Object.prototype`。'
- en: '`Array`のインスタンス → `Array.prototype` → `Object.prototype`'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Array`的实例 → `Array.prototype` → `Object.prototype`'
- en: '`Object.create`メソッドを使って`Array`と`Object`の関係をコードとして表現してみます。 この疑似コードは、`Array`コンストラクタの実装など、実際のものとは異なる部分があるため、あくまでイメージであることに注意してください。'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Object.create`方法来表示`Array`和`Object`之间的关系。这段伪代��中，`Array`构造函数的实现等与实际情况有所不同，请注意这只是一个概念。
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: このように、`Array`のインスタンスも`Object.prototype`を継承しているため、 `Object.prototype`に定義されているメソッドを利用できます。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，由于`Array`的实例也继承自`Object.prototype`，因此可以使用`Object.prototype`中定义的方法。
- en: 次のコードでは、`Array`のインスタンスから`Object.prototype.hasOwnProperty`メソッドが参照できていることがわかります。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码示例展示了从`Array`实例中访问`Object.prototype.hasOwnProperty`方法。
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: このような`hasOwnProperty`メソッドの参照が可能なのもプロトタイプチェーンという仕組みによるものです。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可以访问`hasOwnProperty`方法的原因也是由于原型链的机制。
- en: ここでは、`Object.prototype`はすべてのオブジェクトの親となるオブジェクトであることを覚えておくだけで問題ありません。 これにより、`Array`や`String`などのインスタンスも`Object.prototype`が持つメソッドを利用できる点を覚えておきましょう。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`Object.prototype`是所有对象的父对象。因此，要记住`Array`和`String`等实例也可以使用`Object.prototype`的方法。
- en: また、`Array.prototype`などもそれぞれ独自のメソッドを定義しています。 たとえば、`Array.prototype.toString`メソッドもそのひとつです。
    そのため、Arrayのインスタンスで`toString`メソッドを呼び出すと`Array.prototype.toString`が優先して呼び出されます。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`Array.prototype`等也定义了各自的方法。例如，`Array.prototype.toString`方法就是其中之一。因此，在数组的实例中调用`toString`方法时，会优先调用`Array.prototype.toString`。
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[](#not-inherit-object)*`Object.prototype`を継承しないオブジェクト*'
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#not-inherit-object)*不继承`Object.prototype`的对象*'
- en: '*`Object`はすべてのオブジェクトの親になるオブジェクトであると言いましたが、例外もあります。'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*虽然说`Object`是所有对象的父对象，但也存在例外情况。'
- en: イディオム（慣習的な書き方）ですが、`Object.create(null)`とすることで`Object.prototype`を継承しないオブジェクトを作成できます。
    これにより、プロパティやメソッドをまったく持たない本当に**空のオブジェクト**を作れます。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管是一种惯用法，但通过`Object.create(null)`可以创建不继承`Object.prototype`的对象，从而创建一个真正**空的对象**。
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`Object.create`メソッドはES5から導入されました。 `Object.create`メソッドは`Object.create(null)`というイディオムで、一部ライブラリなどで`Map`オブジェクトの代わりとして利用されていました。
    Mapとはキーと値の組み合わせを保持するためのオブジェクトです。'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.create`方法是从ES5引入的。通过`Object.create(null)`这种惯用法，一些库等曾将其用作`Map`对象的替代品。`Map`是用于保存键值对的对象。'
- en: ただのオブジェクトもMapとよく似た性質を持っていますが、最初からいくつかのプロパティが存在しアクセスできてしまいます。 なぜなら、`Object`のインスタンスはデフォルトで`Object.prototype`を継承するので、`toString`などのプロパティ名がオブジェクトを作成した時点で存在するためです。
    そのため、`Object.create(null)`で`Object.prototype`を継承しないオブジェクトを作成し、そのオブジェクトが`Map`の代わりとして使われていました。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 普通对象也具有类似`Map`的特性，因为一开始就存在一些属性可以访问。这是因为`Object`的实例默认会继承`Object.prototype`，因此在创建对象时就存在像`toString`这样的属性名。因此，通过`Object.create(null)`创建不继承`Object.prototype`的对象，这些对象曾被用作`Map`的替代品。
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: しかし、ES2015からは本物の`Map`が利用できるため、`Object.create(null)`を`Map`の代わりに利用する必要はありません。
    `Map`については「[Map/Set](../map-and-set/)」の章で詳しく紹介します。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，自ES2015起，可以使用真正的`Map`，因此不再需要使用`Object.create(null)`来代替`Map`。关于`Map`的详细信息将在“[Map/Set](../map-and-set/)”章节中介绍。
- en: また`Object.create(null)`によって作成される空のオブジェクトは、`Object.hasOwn`静的メソッドがES2022で導入された理由でもあります。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由`Object.create(null)`创建的空对象也是ES2022引入`Object.hasOwn`静态方法的原因之一。
- en: 次のように、`Object.prototype`を継承しないオブジェクトは、`Object.prototype.hasOwnProperty`メソッドを呼び出せません。
    そのため、オブジェクトがプロパティを持っているかということを確認する際に、単純には`hasOwnProperty`メソッドが使えないという状況が出てきました。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，不继承`Object.prototype`的对象无法调用`Object.prototype.hasOwnProperty`方法。因此，在检查对象是否具有属性时，无法简单地使用`hasOwnProperty`方法。
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: ES2022から導入された`Object.hasOwn`静的メソッドは、対象のオブジェクトが`Object.prototype`を継承していないかは関係なく利用できます。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 自ES2022起，`Object.hasOwn`静态方法可以使用，无论目标对象是否继承自`Object.prototype`。
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: このように、対象となるオブジェクトに依存しない`Object.hasOwn`静的メソッドは、`hasOwnProperty`メソッドの欠点を修正しています。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，不依赖于目标对象的`Object.hasOwn`静态方法修正了`hasOwnProperty`方法的缺点。
- en: '[](#conclusion)*まとめ*'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)*总结*'
- en: '*この章では、プロトタイプオブジェクトについて学びました。'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中，我们学习了有关原型对象的知识。'
- en: プロトタイプオブジェクトはオブジェクトの作成時に自動的に作成される
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型对象会在创建对象时自动创建
- en: '`Object`のプロトタイプオブジェクトには`toString`などのプロトタイプメソッドが定義されている'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object`的原型对象中定义了诸如`toString`等原型方法'
- en: ほとんどのオブジェクトは`Object.prototype`を継承することで`toString`メソッドなどを呼び出せる
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数对象通过继承`Object.prototype`来调用`toString`方法等
- en: プロトタイプメソッドとインスタンスメソッドではインスタンスメソッドが優先される
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型方法和实例方法中，实例方法优先级更高
- en: '`Object.create`メソッドを使うことでプロトタイプオブジェクトを継承しないオブジェクトを作成できる'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Object.create`方法可以创建一个不继承原型对象的对象
- en: プロトタイプオブジェクトに定義されているメソッドがどのように参照されているかを確認しました。 このプロトタイプの詳しい仕組みについては「[クラス](../class/)」の章で改めて解説します。********
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 确认了如何引用原型对象中定义的方法。关于这个原型的详细机制，我们将在“[类](../class/)”章节中再次解释。
