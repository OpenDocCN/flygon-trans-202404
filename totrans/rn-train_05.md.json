["```\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport createLogger from 'redux-logger';\nimport reducers from '../reducers';\n\nvar middlewares = compose(applyMiddleware(thunk), autoRehydrate());\n\nexport default function configureStore() {\n  const store = createStore(reducers, undefined, middlewares);\n  return store;\n} \n```", "```\n//todo action types\nexport const START_FETCH_ALL_TODOS = 'START_FETCH_ALL_TODOS';\nexport const FETCH_ALL_TODOS = 'FETCH_ALL_TODOS'; \n```", "```\nimport * as types from '../constants/ActionTypes';\nimport * as APIs from '../constants/ServerAPIs';\n\nfunction shouldFetchAllTodos(state) {\n  const data = state.todos;\n  if (data && data.isFetchingAllTodos) {\n    return false\n  }\n  return true;\n}\n\nexport function fetchAllTodos() {\n  return async (dispatch, getState) =>{\n    //verify\n    if(!shouldFetchAllTodos(getState())){\n      return Promise.resolve();\n    }\n\n    //dispatch fetch start action\n    dispatch({type: types.START_FETCH_ALL_TODOS});\n\n    //fetching\n    const response = await fetch(APIs.allTodos);\n    //response\n    const data = await response.json();\n\n    //dispatch fetch end action\n    return dispatch({\n      type: types.FETCH_ALL_TODOS,\n      data\n    });\n  }\n} \n```", "```\nexport default function todos(state = initialState, action) {\n  switch (action.type) {\n    case types.START_FETCH_ALL_TODOS:\n      return Object.assign({}, state, {isFetchingAllTodos: true});\n\n    case types.FETCH_ALL_TODOS:\n      return Object.assign({}, state, {\n        isFetchingAllTodos: false,\n        data: action.data.data.reduce(function (pre, cur) {\n          //remove duplicates\n          !pre.find( key=> key.id===cur.id) && pre.push(cur);\n          return pre;\n        }, [...state.data])\n      });\n    ...\n    ...\n    default:\n      return state\n  }\n} \n```", "```\n...\n  componentDidMount(){\n    //fetch data from server\n    this.props.actions.fetchAllTodos();\n  }\n...\n...\n  renderLoading = () => {\n    if (this.props.todos.isFetchingAllTodos) {\n      return (\n        <View style={styles.loading}>\n          <Text style={styles.loadingText}>Loading...</Text>\n        </View>\n      )\n    }\n    return null;\n  }\n... \n```", "```\nimport { AsyncStorage } from 'react-native';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport {persistStore, autoRehydrate} from 'redux-persist';\nimport reducers from '../reducers';\n\nvar middlewares = compose(applyMiddleware(thunk), autoRehydrate());\n\nexport default function configureStore() {\n  const store = createStore(reducers, undefined, middlewares);\n  persistStore(store, {storage: AsyncStorage});\n  return store;\n} \n```"]