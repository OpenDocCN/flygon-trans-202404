["```\ndata Queue<T>:\n  | queue(tail :: List<T>, head :: List<T>)\nend\n\nmt-q :: Queue = queue(empty, empty)\n```", "```\nfun<T> enqueue(q :: Queue<T>, e :: T) -> Queue<T>:\n  queue(link(e, q.tail), q.head)\nend\n```", "```\ndata Response<T>:\n  | elt-and-q(e :: T, r :: Queue<T>)\nend\n```", "```\nfun<T> dequeue(q :: Queue<T>) -> Response<T>:\n  cases (List) q.head:\n    | empty =>\n      new-head = q.tail.reverse()\n      elt-and-q(new-head.first,\n        queue(empty, new-head.rest))\n    | link(f, r) =>\n      elt-and-q(f,\n        queue(q.tail, r))\n  end\nend\n```"]