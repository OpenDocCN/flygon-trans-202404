- en: Intro to RacketTuesday, January 10th
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'General layout of the parts of Racket:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Racket language is (mostly) in the Scheme family, or more generally in the
    Lisp family;
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Racket: the core language implementation (language and runtime), written in
    C;'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The actual language(s) that are available in Racket have lots of additional
    parts that are implemented in Racket itself;
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GRacket: a portable Racket GUI extension, written in Racket too;'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DrRacket: a GRacket application (also written in Racket);'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Our language(s)…
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Documentation: the Racket documentation is your friend (But beware that some
    things are provided in different forms from different places).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Side-note: “Goto Statement Considered Harmful”Tuesday, January 10th'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A review of “Goto Statement Considered Harmful”, by E.W. DIJKSTRA
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This paper tries to convince us that the well-known goto statement should be
    eliminated from our programming languages or, at least (since I don’t think that
    it will ever be eliminated), that programmers should not use it. It is not clear
    what should replace it. The paper doesn’t explain to us what would be the use
    of the `if` statement without a `goto` to redirect the flow of execution: Should
    all our postconditions consist of a single statement, or should we only use the
    arithmetic `if`, which doesn’t contain the offensive `goto`?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And how will one deal with the case in which, having reached the end of an alternative,
    the program needs to continue the execution somewhere else?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The author is a proponent of the so-called “structured programming” style,
    in which, if I get it right, gotos are replaced by indentation. Structured programming
    is a nice academic exercise, which works well for small examples, but I doubt
    that any real-world program will ever be written in such a style. More than 10
    years of industrial experience with Fortran have proved conclusively to everybody
    concerned that, in the real world, the goto is useful and necessary: its presence
    might cause some inconveniences in debugging, but it is a de facto standard and
    we must live with it. It will take more than the academic elucubrations of a purist
    to remove it from our languages.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Publishing this would waste valuable paper: Should it be published, I am as
    sure it will go uncited and unnoticed as I am confident that, 30 years from now,
    the goto will still be alive and well and used as widely as it is today.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Confidential comments to the editor: The author should withdraw the paper and
    submit it someplace where it will not be peer reviewed. A letter to the editor
    would be a perfect choice: Nobody will notice it there!'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
