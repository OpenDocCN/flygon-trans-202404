["```\npublic static long factorial(int n) {\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n    fact = fact * i;\n  }\n  return fact;\n}\n```", "```\npublic static long factorial(int n) {\n  if (n == 0) {\n    return 1;\n  } else {\n    return n * factorial(n-1);\n  }\n}\n```", "```\npublic static void main(String[] args) {\n    long x = factorial(3);\n}\n```", "```\n/**\n * @param n >= 0\n * @return the nth Fibonacci number \n */\npublic static int fibonacci(int n) {\n    if (n == 0 || n == 1) {\n        return 1; // base cases\n    } else {\n        return fibonacci(n-1) + fibonacci(n-2); // recursive step\n    }\n}\n```", "```\npublic static int factorial(int n) {\n    if (n == 0) {\n        return 1; // this is called the base case\n    } else {\n        return n * factorial(n-1); // this is the recursive step\n    }\n}\n```", "```\npublic static int fibonacci(int n) {\n    if (n == 0 || n == 1) {\n        return 1; // base cases\n    } else {\n        return fibonacci(n-1) + fibonacci(n-2); // recursive step\n    }\n}\n```", "```\n/**\n * @param word consisting only of letters A-Z or a-z\n * @return all subsequences of word, separated by commas,\n * where a subsequence is a string of letters found in word \n * in the same order that they appear in word.\n */\npublic static String subsequences(String word)\n```", "```\n 1 public static String subsequences(String word) {\n 2     if (word.isEmpty()) {\n 3         return \"\"; // base case\n 4     } else {\n 5         char firstLetter = word.charAt(0);\n 6         String restOfWord = word.substring(1);\n 7         \n 8         String subsequencesOfRest = subsequences(restOfWord);\n 9         \n10         String result = \"\";\n11         for (String subsequence : subsequencesOfRest.split(\",\", -1)) {\n12             result += \",\" + subsequence;\n13             result += \",\" + firstLetter + subsequence;\n14         }\n15         result = result.substring(1); // remove extra leading comma\n16         return result;\n17     }\n18 }\n```", "```\n/**\n * Return all subsequences of word (as defined above) separated by commas,\n * with partialSubsequence prepended to each one.\n */\nprivate static String subsequencesAfter(String partialSubsequence, String word) {\n    if (word.isEmpty()) {\n        // base case\n        return partialSubsequence;\n    } else {\n        // recursive step\n        return subsequencesAfter(partialSubsequence, word.substring(1))\n             + \",\"\n             + subsequencesAfter(partialSubsequence + word.charAt(0), word.substring(1));\n    }\n}\n```", "```\npublic static String subsequences(String word) {\n    return subsequencesAfter(\"\", word);\n}\n```", "```\nprivate static String partialSubsequence = \"\";\npublic static String subsequencesLouis(String word) {\n    if (word.isEmpty()) {\n        // base case\n        return partialSubsequence;\n    } else {\n        // recursive step\n        String withoutFirstLetter = subsequencesLouis(word.substring(1));\n        partialSubsequence += word.charAt(0);\n        String withFirstLetter = subsequencesLouis(word.substring(1));\n        return withoutFirstLetter + \",\" + withFirstLetter;\n    }\n}\n```", "```\n/**\n * Requires: caller must set partialSubsequence to \"\" before calling subsequencesLouis().\n */\npublic static String partialSubsequence;\n```", "```\npublic static String subsequences(String word) {\n    partialSubsequence = \"\";\n    return subsequencesLouis(word);\n}\n\nprivate static String partialSubsequence = \"\";\n\npublic static String subsequencesLouis(String word) {\n    if (word.isEmpty()) {\n        // base case\n        return partialSubsequence;\n    } else {\n        // recursive step\n        String withoutFirstLetter = subsequencesLouis(word.substring(1));\n        partialSubsequence += word.charAt(0);\n        String withFirstLetter = subsequencesLouis(word.substring(1));\n        return withoutFirstLetter + \",\" + withFirstLetter;\n    }\n}\n```", "```\n1. subsequencesLouis(\"xy\")\n2.     subsequencesLouis(\"y\")\n3.         subsequencesLouis(\"\")\n4.         subsequencesLouis(\"\")\n5.     subsequencesLouis(\"y\")\n6.         subsequencesLouis(\"\")\n7.         subsequencesLouis(\"\")\n```", "```\n/**\n * @param n integer to convert to string\n * @param base base for the representation. Requires 2<=base<=10.\n * @return n represented as a string of digits in the specified base, with \n *           a minus sign if n<0.\n */\npublic static String stringValue(int n, int base)\n```", "```\nif (n < 0) return \"-\" + stringValue(-n, base);\n```", "```\nreturn stringValue(n/base, base) + \"0123456789\".charAt(n%base);\n```", "```\n/**\n * @param n integer to convert to string\n * @param base base for the representation. Requires 2<=base<=10.\n * @return n represented as a string of digits in the specified base, with \n *           a minus sign if n<0\\.  No unnecessary leading zeros are included. \n */\npublic static String stringValue(int n, int base) {\n    if (n < 0) {\n        return \"-\" + stringValue(-n, base);\n    } else if (BASE CONDITION) {\n        BASE CASE\n    } else {\n        return stringValue(n/base, base) + \"0123456789\".charAt(n%base);\n    }\n}\n```", "```\n/**\n * @param f a file in the filesystem\n * @return the full pathname of f from the root of the filesystem\n */\npublic static String fullPathname(File f) {\n    if (f.getParentFile() == null) {\n        // base case: f is at the root of the filesystem\n        return f.getName();  \n    } else {\n        // recursive step\n        return fullPathname(f.getParentFile()) + \"/\" + f.getName();\n    }\n}\n```", "```\npublic static String subsequences(String word) {\n    if (word.isEmpty()) {\n        return \"\"; // base case\n    } else {\n        char firstLetter = word.charAt(0);\n        String restOfWord = word.substring(1);\n\n        String subsequencesOfRest = subsequences(restOfWord);\n\n        String result = \"\";\n        for (String subsequence : subsequencesOfRest.split(\",\", -1)) {\n            result += \",\" + subsequence;\n            result += \",\" + firstLetter + subsequence;\n        }\n        if (result.startsWith(\",\")) result = result.substring(1);\n        return result;\n    }\n}\n```"]