- en: OOP Below the Line
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下线面向对象编程
- en: Below the Line
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下线
- en: '![](../Images/c3229d7fec712b3fbb256433b56ae890.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c3229d7fec712b3fbb256433b56ae890.jpg)'
- en: Using your new-found knowledge of environments, it'll be much easier to understand
    how OOP works! We call this "below-the-line" because we're achieving the functionality
    of OOP without any special procedures (such as `define-class`).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 利用你新学到的环境知识，理解面向对象编程将会更加容易！我们称之为“below-the-line”，因为我们实现了面向对象编程的功能，而没有使用任何特殊的过程（比如
    `define-class`）。
- en: Message Passing
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息传递
- en: 'Let''s take a look at the following code:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下代码：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, a complex number object is represented by a dispatch procedure.
    The procedure takes a message as its argument, and returns a number as its result.
    However, `dispatch` can return a procedure instead of a number, and it allows
    for extra arguments to what we are calling the method that responds to a message.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，复数对象由一个分派过程表示。该过程以消息作为其参数，并将数字作为其结果返回。然而，`dispatch` 可以返回一个过程而不是一个数字，并且允许额外的参数传递给我们称之为响应消息的方法。
- en: The user says
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 用户说
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Evaluating this expression requires a two-step process:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 评估这个表达式需要一个两步过程：
- en: The dispatch procedure `(named acc)` is invoked with the message withdraw as
    its argument.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用分派过程（命名为 acc）并将消息 withdraw 作为其参数。
- en: The `dispatch` procedure returns the `withdraw` method procedure, and that second
    procedure is invoked with 100 as its argument to do the actual work.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dispatch` 过程返回 `withdraw` 方法过程，然后第二个过程以 100 作为其参数被调用以执行实际工作。'
- en: All of an object's activity comes from invoking its method procedures; the only
    job of the object itself is to return the right procedure when it gets sent a
    message.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个对象的所有活动都来自于调用其方法过程；对象本身的唯一工作是在收到消息时返回正确的过程。
- en: 'Any OOP system that uses the message-passing model must have some below-the-
    line mechanism for associating methods with messages. In Scheme, with its first-class
    procedures, it is very natural to use a `dispatch` procedure as the association
    mechanism. In some other language the object might instead be represented as an
    array of message-method pairs. If we are treating objects as an abstract data
    type, programs that use objects shouldn''t have to know that we happen to be representing
    objects as procedures. The two-step notation for invoking a method violates this
    abstraction barrier. To fix this, we invent the ask procedure:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 任何使用消息传递模型的面向对象编程系统都必须有一种下线机制，用于将方法与消息关联起来。在 Scheme 中，由于其一级过程，使用 `dispatch`
    过程作为关联机制非常自然。在其他一些语言中，对象可能被表示为消息-方法对的数组。如果我们将对象视为抽象数据类型，使用对象的程序不应该知道我们恰好将对象表示为过程。调用方法的两步符号违反了这种抽象屏障。为了解决这个问题，我们发明了
    ask 过程：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`ask` carries out essentially the same steps as the explicit notation used
    in the text. First, it invokes the dispatch procedure (that is, the object itself)
    with the message as its argument. This should return a method (another procedure).
    The second step is to invoke that method procedure with whatever extra arguments
    have been provided to `ask`. The body of `ask` looks more complicated than the
    earlier version, but most of that has to do with error- checking: What if the
    object doesn''t recognize the message we send it? These details aren''t very important.
    `ask` does use two features of Scheme that we haven''t discussed before:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`ask` 执行的基本步骤与文本中使用的显式符号相同。首先，它使用消息作为参数调用分派过程（即对象本身）。这应该返回一个方法（另一个过程）。第二步是使用提供给
    `ask` 的任何额外参数调用该方法过程。`ask` 的主体看起来比之前的版本复杂，但其中大部分与错误检查有关：如果对象无法识别我们发送的消息怎么办？这些细节并不是很重要。`ask`
    使用了 Scheme 中我们之前未讨论过的两个特性：'
- en: The dot notation used in the formal parameter list of `ask` means that it accepts
    any number of arguments. The first two are associated with the formal parameters
    object and message; all the remaining arguments (zero or more of them) are put
    in a list and associated with the formal parameter args.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ask` 的形式参数列表中使用的点符号表示它接受任意数量的参数。前两个与形式参数对象和消息相关联；所有剩余的参数（零个或多个）都被放在一个列表中，并与形式参数
    args 相关联。
- en: The procedure `apply` takes a procedure and a list of arguments and applies
    the procedure to the arguments. The reason we need it here is that we don't know
    in advance how many arguments the method will be given; if we said (method args)
    we would be giving the method one argument, namely, a list.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 过程`apply`接受一个过程和一组参数，并将该过程应用于这些参数。我们之所以在这里需要它，是因为我们事先不知道方法将会接收多少个参数；如果我们写成（方法
    参数），我们将为方法提供一个参数，即一个列表。
- en: 'In our OOP system, you generally send messages to instances, but you can also
    send some messages to classes, namely the ones to examine class variables. When
    you send a message to a class, just as when you send one to an instance, you get
    back a method. That''s why we can use ask with both instances and classes. (The
    OOP system itself also sends the class an instantiate message when you ask it
    to create a new instance.) Therefore, both the class and each instance is represented
    by a dispatch procedure. The overall structure of a class definition looks something
    like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的面向对象编程系统中，通常将消息发送给实例，但也可以将一些消息发送给类，即检查类变量的消息。当您向类发送消息时，就像向实例发送消息一样，您会收到一个方法。这就是为什么我们可以同时向实例和类使用ask。
    （当您要求它创建一个新实例时，面向对象编程系统本身也会向类发送一个实例化消息。）因此，类和每个实例都由一个分派过程表示。类定义的整体结构看起来像这样：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: (Please note that this is not exactly what a class really looks like. In this
    simplified version we have left out many details. The only crucial point here
    is that there are two dispatch procedures, one inside the other.) In each procedure,
    there is a `cond` with a clause for each allowable message. The consequent expression
    of each clause is a `lambda` expression that defines the coreesponding method.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意，这并不是一个类真正的样子。在这个简化版本中，我们省略了许多细节。这里唯一关键的一点是有两个分派过程，一个在另一个内部。）在每个过程中，都有一个包含每个允许的消息的`cond`。每个子句的结果表达式是一个定义相应方法的`lambda`表达式。
- en: Local State (Again)
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地状态（再次）
- en: 'In the previous subsection, you learned how to give a procedure a local state
    variable: define that procedure inside another procedure that establishes a variable.
    So it can be written as the follwing example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一小节中，您学会了如何为过程提供一个本地状态变量：在另一个建立变量的过程内定义该过程。因此，它可以被写成以下示例：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the OOP system, there are three kinds of local state variables: class variables,
    instance variables, and instantiation variables. Although instantiation variables
    are just a special kind of instance variable above the line, they are implemented
    di erently. Here is another simpli ed view of a class definition, this time leaving
    out all the message passing stuff and focusing on the variables:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程系统中，有三种类型的本地状态变量：类变量、实例变量和实例化变量。虽然实例化变量只是上面实例变量的一种特殊类型，但它们的实现方式不同。这里是另一种简化的类定义视图，这次省略了所有消息传递的内容，专注于变量：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The scope of a class variable includes the class dispatch procedure, the instance
    dispatch procedure, and all of the methods within those. The scope of an instance
    variable does not include the class dispatch procedure in its methods. Each invocation
    of the class `instantiate` method gives rise to a new set of instance variables,
    just as each new bank account in the book has its own local state variables.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 类变量的作用域包括类分派过程、实例分派过程以及这些方法中的所有内容。实例变量的作用域不包括其方法中的类分派过程。每次调用类`instantiate`方法都会产生一组新的实例变量，就像书中每个新的银行账户都有自己的本地状态变量一样。
- en: 'Why are class variables and instance variables implemented using `let`, but
    not instantiation variables? The reason is that class and instance variables are
    given their (initial) values by the class definition itself. That''s what `let`
    does: It establishes the connection between a name and a value. Instatiation variables,
    however, don''t get values until each particular instance of the class is created,
    so we implement these variables as the formal parameters of a `lambda` that will
    be invoked to create an instance.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么类变量和实例变量使用`let`来实现，而实例化变量不是？原因在于类和实例变量由类定义本身给出它们的（初始）值。这就是`let`的作用：它建立了名称和值之间的关联。然而，实例化变量直到创建类的每个特定实例时才会获得值，因此我们将这些变量实现为将被调用以创建实例的`lambda`的形式参数。
- en: Inheritance and Delegation
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继承和委托
- en: 'Inheritance is the mechanism through which objects of a child class can use
    methods from a parent class. Ideally, all such methods would just be part of the
    repertoire of the child class; the parent''s procedure de nitions would be "copied
    into" the Scheme implementation of the child class. The actual implementation
    in our OOP system, although it has the same purpose, uses a somewhat di fferent
    technique called delegation. Each object''s dispatch procedure contains entries
    only for the methods of its own class, not its parent classes. But each object
    has, in an instance variable, an object of its parent class. To make it easier
    to talk about all these objects and classes, let''s take an example that we looked
    at before:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 继承是子类对象可以使用父类方法的机制。理想情况下，所有这些方法都应该成为子类的一部分；父类的过程定义将被“复制到”子类的Scheme实现中。我们的OOP系统的实际实现，尽管目的相同，但使用了一种稍微不同的技术，称为委托。每个对象的分发过程只包含其自身类的方法条目，而不包括其父类的方法。但每个对象在一个实例变量中有一个其父类的对象。为了更容易谈论所有这些对象和类，让我们看一个之前看过的例子：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s create an instance of that class:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建该类的一个实例：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then the object named `Gerry-account` will have an instance variable named `my-account`
    whose value is an instance of the account class. (The variables "my-whatever"
    are created automatically by `define-class`.)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那么名为`Gerry-account`的对象将具有一个名为`my-account`的实例变量，其值是账户类的一个实例。（变量“my-whatever”是由`define-class`自动创建的。）
- en: 'What good is this parent instance? If the dispatch procedure for `Gerry- account`
    doesn''t recognize some message, then it reaches the `else` clause of the `cond`.
    In an object without a parent, that clause will generate an error message. But
    if the object does have a parent, the `else` clause passes the message on to the
    parent''s dispatch procedure:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个父实例有什么好处呢？如果`Gerry-account`的分发过程无法识别某个消息，那么它将到达`cond`的`else`子句。在没有父类的对象中，该子句将生成一个错误消息。但如果对象有一个父类，`else`子句将把消息传递给父类的分发过程：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: (Naturally, this is a vastly simplified picture. We've left out the class dispatch
    procedure, among other details. There isn't really a procedure named `make-checking-account-instance`
    in the implementation; this procedure is really the instantiate method for the
    class, as we explained earlier.)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: （当然，这是一个极为简化的图景。我们省略了类分发过程等其他细节。在实现中并没有一个名为`make-checking-account-instance`的过程；这个过程实际上是类的实例化方法，正如我们之前解释的那样。）
- en: When we send `Gerry-account` a `write-check` message, it's handled in the straightforward
    way we've been talking about. But when we send `Gerry-account` a deposit message,
    we reach the `else` clause of the `cond` and the message is delegated to the parent
    account object. That object (that is, its dispatch procedure) returns a method,
    and `Gerry-account` returns the method too.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向`Gerry-account`发送一个`write-check`消息时，它会以我们谈论的直接方式处理。但当我们向`Gerry-account`发送一个存款消息时，我们到达`cond`的`else`子句，消息被委托给父账户对象。该对象（即其分发过程）返回一个方法，而`Gerry-account`也返回该方法。
- en: The crucial thing to understand is why the `else` clause does not say
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 关键的理解是为什么`else`子句没有说
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `Gerry-account` dispatch procedure takes a message as its argument, and
    returns a method as its result. `Ask`, you'll recall, carries out a two-step process
    in which it first gets the method and then invokes that method. Within the dispatch
    procedure we only want to get the method, not invoke it. (Somewhere there is an
    invocation of ask waiting for `Gerry-account`'s dispatch procedure to return a
    method, which `ask` will then invoke.)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`Gerry-account`分发过程以消息作为其参数，并以方法作为其结果。你会记得，`Ask`执行一个两步过程，首先获取方法，然后调用该方法。在分发过程中，我们只想获取方法，而不是调用它。（在某处，有一个等待`Gerry-account`分发过程返回方法的`ask`调用，然后`ask`将调用该方法。）'
- en: 'There is one drawback to the delegation technique. When we ask `Gerry-account`
    to deposit some money, the `deposit` method only has access to the local state
    variables of the `account` class, not those of the `checking-account` class. Similarly,
    the `write-check` method doesn''t have access to the account local state variables
    like `balance`. You can see why this limitation occurs: Each method is a procedure
    defi ned within the scope of one or the other class procedure, and Scheme''s lexical
    scoping rules restrict each method to the variables whose scope contains it. The
    technical distinction between inheritance and delegation is that an inheritance-based
    OOP system does not have this restriction. We can get around the limitation by
    using messages that ask the other class (the child asks the parent, or vice versa)
    to return (or modify) one of its variables. The `(ask self ''withdraw ...)` in
    the `write-check` method is an example.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 委托技术存在一个缺点。当我们要求`Gerry-account`存入一些钱时，`deposit`方法只能访问`account`类的本地状态变量，而不能访问`checking-account`类的状态变量。同样，`write-check`方法也无法访问账户本地状态变量如`balance`。你可以看到为什么会出现这种限制：每个方法都是在一个类过程的范围内定义的过程，Scheme的词法作用域规则限制了每个方法只能访问其范围包含的变量。继承和委托之间的技术区别在于基于继承的面向对象编程系统没有这种限制。我们可以通过使用请求另一个类（子类请求父类，反之亦然）返回（或修改）其变量的消息来绕过这种限制。`write-check`方法中的`(ask
    self 'withdraw ...)`就是一个例子。
- en: Bells and Whistles
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 花里胡哨
- en: The simplified Scheme implementation shown so far hides several complications
    in the actual OOP system. What we have explained so far is really the most important
    part of the implementation, and you shouldn't let the details that follow confuse
    you about the core ideas. We're giving pretty brief explanations of these things,
    leaving out the gory details.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止所展示的简化Scheme实现隐藏了实际面向对象编程系统中的几个复杂之处。到目前为止，我们解释的确实是实现中最重要的部分，你不应该让接下来的细节让你对核心思想感到困惑。我们对这些事情给出了相当简要的解释，省略了令人讨厌的细节。
- en: One complication is multiple inheritance. Instead of delegating an unknown message
    to just one parent, we have to try more than one. The real `else` clauses invoke
    a procedure called `get-method` that accepts any number of objects (i.e., dispatch
    procedures) as arguments, in addition to the message. `Get-method` tries to fi
    nd a method in each object in turn; only if all of the parents fail to provide
    a method does it give an error message. (There will be a "my-whatever" variable
    for each of the parent classes.)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个复杂之处在于多重继承。与将未知消息委托给一个父类不同，我们必须尝试多个父类。真正的`else`子句调用一个名为`get-method`的过程，该过程接受任意数量的对象（即分派过程）作为参数，除了消息之外。`Get-method`依次尝试在每个对象中找到一个方法；只有当所有父类都未提供方法时，它才会给出错误消息。（每个父类都将有一个"my-whatever"变量。）
- en: Another complication that aff ects the `else` clause is the possible use of
    a `default-method` in the class de nition. If this optional feature is used, the
    body of the `default-method` clause becomes part of the object's `else` clause.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 影响`else`子句的另一个复杂之处是类定义中可能使用`default-method`的情况。如果使用了这个可选特性，`default-method`子句的主体将成为对象的`else`子句的一部分。
- en: When an instance is created, the `instantiate` procedure sends it an `initialize`
    message. Every dispatch procedure automatically has a corresponding method. If
    the `initialize` clause is used in `define-class`, then the method includes that
    code. But even if there is no `initialize` clause, the OOP system has some initialization
    tasks of its own to perform. In particular, the initialization must provide a
    value for the self variable. Every `initialize` method takes the desired value
    for self as an argument. If there are no parents or children involved, `self`
    is just another name for the object's own dispatch procedure. But if an instance
    is the `my-whatever` of some child instance, then `self` should mean that child.
    The solution is that the child's `initialize` method invokes the parent's `initialize`
    method with the child's own self as the argument. (Where does the child get its
    self argument? It is provided by the `instantiate` procedure.)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个实例被创建时，`instantiate`过程会向其发送一个`initialize`消息。每个调度过程都自动有一个对应的方法。如果在`define-class`中使用`initialize`子句，则方法包括该代码。但即使没有`initialize`子句，OOP系统也有一些自己的初始化任务要执行。特别是，初始化必须为self变量提供一个值。每个`initialize`方法都以所需的self值作为参数。如果没有涉及父级或子级，则`self`只是对象自己的调度过程的另一个名称。但是，如果一个实例是某个子实例的`my-whatever`，那么`self`应该表示该子实例。解决方案是，子类的`initialize`方法使用子类自己的self作为参数调用父类的`initialize`方法。（子类如何获得自己的self参数？这是由`instantiate`过程提供的。）
- en: Finally, `usual` involves some complications. Each object has a `send-usual-to-parent`
    method that essentially duplicates the job of the `ask` procedure, except that
    it only looks for methods in the parents, as the `else` clause does. Invoking
    `usual` causes this method to be invoked.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`usual`涉及一些复杂情况。每个对象都有一个`send-usual-to-parent`方法，它基本上复制了`ask`过程的工作，但它只在父级中查找方法，就像`else`子句所做的那样。调用`usual`会导致调用此方法。
- en: Counter Example
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计数器示例
- en: 'Now let''s implement a simple counter. Every time the `counter` is called,
    it increments its own local variable and the global variable for all counters.
    Here is the code for our counter class:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现一个简单的计数器。每次调用`counter`时，它会增加自己的局部变量和所有计数器的全局变量。以下是我们计数器类的代码：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It works something like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作方式如下：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The class variable `glob` is created in an environment that surrounds the creation
    of the outer lambda, which represents the entire class. The instance variable
    `loc` is created in an environment that's inside the class lambda, but outside
    the second lambda that represents an instance of the class.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 类变量`glob`是在包围外部lambda创建的环境中创建的，该lambda表示整个类。实例变量`loc`是在类lambda内部的环境中创建的，但在表示类的实例的第二个lambda之外。
- en: '**Test Your Understanding**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: The example above shows how environments support state variables in OOP, but
    it’s simplified in that the instance is not a message-passing dispatch procedure.
    In short, it isn't very realistic.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例展示了环境如何支持OOP中的状态变量，但简化了实例不是消息传递调度过程的事实。简而言之，这不是非常现实。
- en: 'Currently, we call the counter with no arguments and are returned a list of
    the local and global variables for that counter. Change this class so that the
    counter has two methods, either ''local or ''global. Each of these methods takes
    in exactly one argument: the number by which to increment the counter. Your code
    should work like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们调用计数器而没有参数，并返回该计数器的局部和全局变量的列表。更改此类以使计数器具有两种方法，要么是'local'或'global'。这两种方法中的每一种都接受正好一个参数：增加计数器的数字。你的代码应该像这样工作：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
