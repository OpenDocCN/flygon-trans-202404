- en: Optimism, Causality, Vector Timestamps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 乐观主义、因果性、向量时间戳
- en: '6.824 2015 Lecture 15: Optimism, Causality, Vector Timestamps'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.824 2015 年第 15 讲：乐观主义、因果性、向量时间戳
- en: '**Note:** These lecture notes were slightly modified from the ones posted on
    the 6.824 [course website](http://nil.csail.mit.edu/6.824/2015/schedule.html)
    from Spring 2015.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**这些讲座笔记是从 2015 年春季的 6.824 [课程网站](http://nil.csail.mit.edu/6.824/2015/schedule.html)上稍作修改的。'
- en: 'Consistency so far:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的一致性：
- en: '*Concurrency* forces us to to think about meaning of reads/writes'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*并发*迫使我们思考读/写的含义'
- en: '*Sequential consistency:* everyone sees same read/write order (IVY)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*顺序一致性：*每个人都看到相同的读/写顺序（IVY）。'
- en: '*Release consistency:* everyone sees writes in unlock order (TreadMarks)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*释放一致性：*每个人都按解锁顺序看到写入（TreadMarks）。'
- en: 'Sequential and release consistency are slow:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序一致性和释放一致性很慢：
- en: in general, must ask before each operation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般情况下，必须在每个操作之前询问。
- en: 'IVY: read faults and write faults -> ask manager'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IVY：读故障和写故障->向管理器请求。
- en: 'TreadMarks: acquire and release -> ask lock manager'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TreadMarks：获取和释放->向锁管理器请求。
- en: Can we get better performance by weakening consistency?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否可以通过降低一致性来获得更好的性能？
- en: 'Paxos:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 'Paxos:'
- en: Also slow; several messages to reach agreement.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样缓慢；需要几条消息达成一致。
- en: More than IVY+TreadMarks
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不仅仅是 IVY+TreadMarks
- en: Also, "low" availability
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，“低”可用性
- en: If no majority, no progress.
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有多数，就没有进展。
- en: Not suitable for disconnected operation.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不适合断开连接的操作。
- en: Optimistic Concurrency Control
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 乐观并发控制
- en: Do the operation now (e.g., read/write cached copy)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在执行操作（例如，读/写缓存副本）
- en: Check if it was OK later
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以后再检查它是否正常。
- en: Recover if not OK
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不正常，恢复。
- en: A simple example -- optimistic peer-to-peer chat
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的例子——乐观的点对点聊天
- en: We each have a computer attached to internet
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们每个人都有一个连接到互联网的计算机。
- en: When I type something, send msg. to each participant
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我输入东西时，向每个参与者发送消息。
- en: Recv msg -> add to end of chat window
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收到消息->添加到聊天窗口的末尾。
- en: 'Diagram:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Do we care about message ordering for chat?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在聊天中关心消息顺序吗？
- en: Network may deliver in different order at different participants
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络可能会在不同参与者处以不同顺序传递。
- en: 'Joe: The answer is 40'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乔：答案是 40。
- en: 'Fred: No, it''s 41'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弗雷德：不，是 41。
- en: 'Alice: That''s correct'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 爱丽丝：那是正确的
- en: 'Maybe Sam sees different order:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或许山姆看到了不同的顺序：
- en: 'Joe: 40'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乔：40
- en: 'Alice: That''s correct'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 爱丽丝：那是正确的
- en: What went wrong in this example?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子出了什么问题？
- en: Alice "computed" her message based on certain inputs
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 爱丽丝根据某些输入“计算”了她的消息。
- en: Sam can only interpret if he has seen those inputs too
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 山姆只有在他也看到了这些输入时才能解释。
- en: 'Suppose this is an auction chat program:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这是一个拍卖聊天程序：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If there were a 4th person, Sam:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有第四个人，山姆：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So to Sam this might not make sense. His problem is that Sam didn't know what
    Alice knew when she sent her message.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此对山姆来说可能没有意义。他的问题是山姆在发送消息时不知道爱丽丝知道什么。
- en: '**Definition:** `x` causally precedes `y`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义：**`x`在因果上先于`y`'
- en: '`x` precedes `y` if:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果：
- en: M0 does `x`, then M0 does `y`
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: M0 执行`x`，然后 M0 执行`y`。
- en: M0 does `x`, M0 sends msg to M1, M1 does `y`
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: M0 执行`x`，M0 向 M1 发送消息，M1 执行`y`。
- en: '[transitive closure](https://en.wikipedia.org/wiki/Transitive_closure)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[传递闭包](https://zh.wikipedia.org/wiki/%E9%97%B4%E8%B0%8B%E9%9A%94%E5%85%B3)'
- en: '`x` and `y` are generally writes, or msgs, or file versions'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`和`y`通常是写入、消息或文件版本。'
- en: also "`y` causally depends on `x`"
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也"`y`在因果上依赖于`x`"。
- en: '**Definition:** causal consistency'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义：**因果一致性'
- en: if `x` causally precedes `y`, everyone sees `x` before `y`
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`x`在因果上先于`y`，则每个人在`y`之前看到`x`。
- en: 'Pros, cons:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 优缺点：
- en: 'Pro: no single master'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：没有单一的主节点
- en: 'Con: not a total order on events'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：事件上不是总序
- en: Slow implementation of causal consistency
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 因果一致性的实现缓慢。
- en: Unique ID for every msg
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每条消息都有一个唯一的 ID。
- en: Node keeps set of all msg IDs received -- "history"
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点保留所有收到的消息 ID 的集合——“历史记录”。
- en: When sending `m`, send current history set, too
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送`m`时，也发送当前历史集。
- en: Receiver delays incoming msg `m` until has received everything in `m`'s set
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收者延迟接收到的消息`m`，直到接收到`m`集合中的所有内容。
- en: History sets will grow huge -- can we abbreviate?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 历史集会变得非常庞大——我们能否缩写？
- en: Each node numbers its msgs 1, 2, 3, &c
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个节点对其消息进行编号，如 1、2、3 等。
- en: Deliver each node's msgs in order
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按顺序传递每个节点的消息
- en: 'Then history need only include latest # seen from each node'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 那么历史记录只需要包括每个节点看到的最新编号。
- en: H1/4 implies saw 1, 2, 3 also
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: H1/4 意味着也看到了 1、2、3。
- en: This notation doesn't grow over time, unlike history sets
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与历史集不同，此记法不会随着时间增长。
- en: Called a *Vector Timestamp* or *Version Vector*
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 称为*向量时间戳*或*版本向量*。
- en: Vector Timestamp
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向量时间戳
- en: Each node numbers its own actions (sent msgs, in this case)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个节点都对其自己的操作进行编号（例如发送的消息，在这种情况下）。
- en: VT is a vector of numbers, one slot per node
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VT 是一个数字向量，每个节点有一个槽位。
- en: Each message sent out with a VT
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每条消息都附带一个 VT。
- en: '`VT[i]=x =>` sender had seen all msgs from node `i` up through `#x`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VT[i]=x =>` 发送者已看到节点`i`的所有消息，直到`#x`'
- en: the assumption here is that a node broadcasts messages to all other nodes (since
    we're trying to replicate a system effectively)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里的假设是一个节点向所有其他节点广播消息（因为我们正在尝试有效地复制一个系统）
- en: have to know how many nodes there are in the whole system
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须知道整个系统中有多少个节点
- en: otherwise, complicated
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，复杂
- en: VTs get very large when you have thousands of machines
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你有数千台机器时，VTs会变得非常庞大
- en: VT comparisons
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: VT比较
- en: to answer "should msg A be displayed before msg B?"
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回答“消息A应该在消息B之前显示吗？”
- en: let `a` and `b` denote the VTs associated with msgs `A` and `B`
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让`a`和`b`表示与消息`A`和`B`相关联的VTs
- en: we can reason about causality (i.e. is `a < b` or are they concurrent `a ||
    b`)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以推断因果关系（即`a < b`还是它们是并发的`a || b`）
- en: 'four situations: `a < b, a || b`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四种情况：`a < b, a || b`
- en: '`a < b` if two conditions hold:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个条件成立，则`a < b`：
- en: 'For all hosts `i`:'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于所有主机`i`：
- en: '`a[i] <= b[i]`'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a[i] <= b[i]`'
- en: i.e. `a` summarizes a proper prefix of `b`
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即`a`总结了`b`的一个正确前缀
- en: i.e. either
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即要么
- en: '`b`''s sender and `a`''s sender have both seen the same # of messages from
    host `i`'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b`的发送者和`a`的发送者都看到了来自主机`i`的相同数量的消息'
- en: '`b`''s sender has seen more recent message from host `i` than `a`''s sender
    has seen'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b`的发送者比`a`的发送者看到了来自主机`i`的更近的消息'
- en: '*AND* there exists `j, s.t. a[j] < b[j]`'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*AND* 存在`j`，使得`a[j] < b[j]`'
- en: i.e. `a` causally precedes `b`
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即`a`在因果上先于`b`
- en: '`b`''s sender has *definitely* seen more recent message from host `i` than
    `a`''s sender has seen'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b`的发送者 *绝对* 看到了来自主机`i`的更近的消息，而`a`的发送者看到的则不是'
- en: '`a || b` if:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果：
- en: 'exists i,j: `a[i] < b[i]` and `a[j] > b[j]`'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属于i，j的存在：`a[i] < b[i]`且`a[j] > b[j]`
- en: i.e. neither summarizes a prefix of the other
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即没有一个总结了另一个的前缀
- en: i.e. neither causally precedes the other
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即没有因果关系的一个在先于另一个
- en: this is because, as we said before, there's no total order
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是因为，正如我们之前所说的，没有完全的顺序
- en: Many systems use VT variants, but for somewhat different purposes
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 许多系统使用VT变体，但用途略有不同
- en: TreadMarks, Ficus, Bayou, Dynamo, &c
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TreadMarks，Ficus，Bayou，Dynamo等
- en: compact way to say *"I've seen everyone's updates up to this point"*
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简洁地表示“我已经看到了每个人到目前为止的更新”
- en: compact way to agree whether event `x` preceded event `y`
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简洁地同意事件`x`是否在事件`y`之前发生
- en: I am pretending there's one fundamental principle here
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我假装这里有一个基本原则
- en: but it's only true if you stand fairly far back
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但只有当你站得足够远时才成立
- en: CBCAST -- "causal broadcast" protocol
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CBCAST -- "因果广播"协议
- en: General-purpose ordering protocol, useful for peer-to-peer chat
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用排序协议，适用于点对点聊天
- en: From Cornell Isis research project
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自康奈尔大学Isis研究项目
- en: 'Key property:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键属性：
- en: Delivers messages to individual nodes in causal order
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将消息以因果顺序交付给各个节点
- en: If `a` causally precedes `b`, CBCAST delivers `a` first
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`a`在因果上先于`b`，CBCAST会先交付`a`
- en: '[diagram: node, msg buf, VC, chat app]'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[图表：节点、消息缓冲、VC、聊天应用程序]'
- en: '[PRE3]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Each node keeps a local vector clock, `VC`
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个节点保留本地向量时钟，`VC`
- en: '`VCi[j] = k` means node `i` has seen all msgs from `j` up through message `k`'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VCi[j] = k`表示节点`i`已经看到了来自`j`的所有消息，直到消息`k`'
- en: Summarizes what the application has also seen
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总结了应用程序也看到的内容
- en: '`send(m)` at node `i`:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在节点`i`上`send(m)`：
- en: '`VCi[i] += 1`'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VCi[i] += 1`'
- en: '`broadcast(m, i, VCi)`'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`broadcast(m, i, VCi)`'
- en: 'on `receive(m, i, mv)` at node `j`:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在节点`j`上`receive(m, i, mv)`：
- en: '`j`''s CBCAST library buffers the message'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`j`的CBCAST库缓冲了消息'
- en: 'release to application only when:'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅在以下情况下向应用程序发布：
- en: '`mv <= VCj`, except `mv[i] = VCj[i] + 1`'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mv <= VCj`，除非`mv[i] = VCj[i] + 1`'
- en: i.e. node `j` has seen every msg that causally precedes `m` `VCj[i] = mv[i]`
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即节点`j`已经看到了在因果上先于`m`的每个消息`VCj[i] = mv[i]`
- en: so msgs will reflect receipt of `m`
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所以消息将反映`m`的接收
- en: 'Code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 代码：
- en: '[PRE4]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Example:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE5]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Why fast?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这么快？
- en: No central manager, no global order
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有中央管理者，没有全局顺序
- en: If no causal dependencies, CBCAST doesn't delay messages
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有因果依赖关系，CBCAST不会延迟消息
- en: 'Example:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：
- en: '`M0 sends <1,0>`'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M0 sends <1,0>`'
- en: '`M1 sends <0,1>`'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M1 sends <0,1>`'
- en: Receivers are allowed to deliver in either order
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收方可以按任意顺序交付
- en: Causal consistency still allows more surprises than sequential
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 因果一致性仍然允许比顺序更多的惊喜
- en: 'Sam can still see:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 萨姆仍然可以看到：
- en: 'Joe: 40'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乔：40
- en: 'Fred: 41'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弗雷德：41
- en: 'Bob: 42'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鲍勃：42
- en: 'Alice: That''s correct'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 爱丽丝：那是正确的
- en: Did she mean 42 or 41?
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 她是指42还是41？
- en: Causal consistency only says Alice's msg will be delivered after
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因果一致性只表示Alice的消息将在之后被交付
- en: all msgs she had seen when she sent it
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有她在发送时看到的消息
- en: '*Not* that it will be delivered before all msgs she hadn''t seen'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*不*表示它将在所有她之前没看到的消息之前被交付'
- en: '`=>` if CBCAST present `x` and then `y` that does *not* imply `x` happened
    before `y` necessarily'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果CBCAST先呈现`x`然后是`y`，这并*不*意味着`x`必然发生在`y`之前
- en: 'TreadMarks uses VTs to order writes to same variable by different machines:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: TreadMarks 使用 VTs 对不同机器对同一变量的写入进行排序：
- en: '[PRE6]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: VTs are often used for optimistic updating of replicated data
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: VTs 经常用于对复制数据进行乐观更新
- en: Everyone has a copy, anyone can write
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人都有副本，任何人都可以写入
- en: 'Don''t want IVY-style MGR or locking: network delays, failures'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不想要 IVY 风格的 MGR 或锁定：网络延迟，故障
- en: Need to sync replicas, accept only "newest" data, detect conflicts
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要同步副本，仅接受“最新”的数据，检测冲突
- en: File sync (Ficus, Coda, Rumor)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件同步（Ficus，Coda，Rumor）
- en: Distributed DBs (Amazon Dynamo, Voldemort, Riak)
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式数据库（Amazon Dynamo，Voldemort，Riak）
- en: File synchronization -- e.g. Ficus
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件同步--例如 Ficus
- en: Multiple computers have a copy of all files
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多台计算机都有所有文件的副本
- en: Each can modify its local copy
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个主机都可以修改其本地副本
- en: Merge changes later -- optimistic
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并更改后--乐观
- en: fie synchronization with disconnected operation support
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持断开操作的文件同步
- en: two people edit the same file on two different airplanes :)
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个人在两架不同的飞机上编辑同一个文件 :)
- en: when they get back online, server needs to detect this
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当它们重新联机时，服务器需要检测到这一点
- en: '...and solve it'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '...并解决它'
- en: '...and not lose updates (lazy server can just throw away one set of changes)'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '...并不会丢失更新（懒惰的服务器可以简单地丢弃一组更改）'
- en: 'Scenario:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 情景：
- en: user has files replicated at work, at home, on laptop
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户在工作、家中、笔记本电脑上都有文件的副本
- en: hosts may be off, on airplane, &c -- not always on Internet
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机可能关闭，飞机上，等等--不总是在互联网上
- en: work on `H1` for a while, sync changes to `H2`
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `H1` 上工作一段时间，将更改同步到 `H2`
- en: work on `H2`, sync changes to `H3`
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `H2` 上工作，将更改同步到 `H3`
- en: work on `H3`, sync to `H1`
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `H3` 上工作，同步到 `H1`
- en: '**Overall goal:** push changes around to keep machines identical'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总体目标：** 推动更改以保持机器的一致性'
- en: 'Constraint: No Lost Updates'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 约束：不丢失更新
- en: Only OK for sync to copy version `x2` over version `x1` if
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在同步将版本 `x2` 复制到版本 `x1` 时才可以
- en: '`x2` includes all updates that are in `x1`.'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x2` 包括所有在 `x1` 中的更新。'
- en: 'Example 1:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1：
- en: '[PRE7]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Example 2:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2：
- en: '[PRE8]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What if there were concurrent updates?
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在并发更新怎么办？
- en: So that neither version includes the other's updates?
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以便两个版本都不包含另一个的更新？
- en: Copying would then lose one of the updates
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制将会丢失其中一个更新
- en: So sync doesn't copy, declares a "conflict"
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此同步不会复制，宣布“冲突”
- en: Conflicts are a necessary consequence of optimistic writes
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冲突是乐观写入的必然结果
- en: How to decide if one version contains all of another's updates?
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如何确定一个版本是否包含另一个版本的所有更新？
- en: We could record each file's entire modification history.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以记录每个文件的整个修改历史。
- en: List of hostname/localtime pairs.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机名/本地时间对的列表。
- en: And carry history along when synchronizing between hosts.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主机之间同步时，同时携带历史记录。
- en: 'For example 1: `H2: H1/T1,H2/T2 H3: H1/T1`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '例如 1：`H2: H1/T1,H2/T2 H3: H1/T1`'
- en: 'For example 2: `H1: H1/T1,H1/T2 H2: H1/T1,H2/T3`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '例如 2：`H1: H1/T1,H1/T2 H2: H1/T1,H2/T3`'
- en: 'Then its easy to decide if version `x` supersedes version `y`:'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 那么很容易确定版本 `x` 是否包含版本 `y` 的所有更新：
- en: If `y`'s history is a prefix of `x`'s history.
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `y` 的历史是 `x` 的历史的前缀。
- en: We can use VTs to compress these histories!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 VTs 来压缩这些历史记录！
- en: Each host remembers a VT per file
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个主机记住每个文件的一个 VT
- en: Number each host's writes to a file (or assign wall-clock times)
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个主机的文件写入编号（或分配墙钟时间）
- en: 'Just remember # of last write from each host'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只需记住每个主机上最后一次写入的数量
- en: '`VT[i]=x` => file version includes all of host `i`''s updates through `#x`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VT[i]=x` => 文件版本包括主机 `i` 的所有更新直到 `#x`'
- en: 'VTs for Example 1:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1 的 VTs：
- en: 'After H1''s change: `v1=<1,0,0>`'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 H1 的更改后：`v1=<1,0,0>`
- en: 'After H2''s change: `v2=<1,1,0>`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 H2 的更改后：`v2=<1,1,0>`
- en: '`v1 < v2`, so H2 ignores H3''s copy (no conflict since `<`)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v1 < v2`，所以 H2 忽略 H3 的副本（因为 `<` 所以没有冲突）'
- en: '`v2 > v1`, so H1/H3 would accept H2''s copy (again no conflict)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v2 > v1`，所以 H1/H3 将接受 H2 的副本（再次没有冲突）'
- en: 'VTs for Example 2:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2 的 VTs：
- en: 'After H1''s first change: `v1=<1,0,0>`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 H1 的第一次更改后：`v1=<1,0,0>`
- en: 'After H1''s second change: `v2=<2,0,0>`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 H1 的第二次更改后：`v2=<2,0,0>`
- en: 'After H2''s change: `v3=<1,1,0>`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 H2 的更改后：`v3=<1,1,0>`
- en: v3 neither `<` nor `>` v1
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: v3 既不 `<` 也不 `>` v1
- en: thus neither has seen all the other's updates
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此两者都没有看到对方的所有更新
- en: thus there's a conflict
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此存在冲突
- en: What if there *are* conflicting updates?
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在冲突更新怎么办？
- en: VTs can detect them, but then what?
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VTs 可以检测到它们，但接下来呢？
- en: Depends on the application.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取决于应用程序。
- en: '*Easy:* mailbox file with distinct immutable messages, just union.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*简单难度：* 具有不同不可变消息的邮箱文件，只需合并。'
- en: '*Medium:* changes to different lines of a C source file (diff+patch).'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*中等难度：* 对 C 源文件的不同行进行更改（diff+patch）。'
- en: '*Hard:* changes to the same line of C source.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*困难难度：* 对 C 源代码的同一行进行更改。'
- en: Reconciliation must be done manually for the hard cases.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于困难情况，必须手动进行调和。
- en: Today's paper is all about reconciling conflicts
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 今天的论文都是关于解决冲突
- en: How to think about VTs for file synchronization?
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如何考虑文件同步的VTs？
- en: They detect whether there was a serial order of versions
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们会检测是否存在版本的序列顺序
- en: I.e. when I modified the file, had I already seen your modification?
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即。当我修改文件时，我是否已经看到了你的修改？
- en: If yes, no conflict
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是的话，没有冲突
- en: If no, conflict
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有，则冲突
- en: 'Or:'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或：
- en: A VT summarizes a file's complete version history
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: VT（向量时戳）总结了文件的完整版本历史
- en: There's no conflict if your version is a prefix of my version
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的版本是我的版本的前缀，则不会冲突
- en: What about file deletion?
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 针对文件删除的情况怎么办？
- en: Can H1 just forget a file's VT if it deletes the file?
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果删除文件，H1可以忘记文件的VT吗？
- en: 'No: when H1 syncs w/ H2, it will look like H2 has a new file.'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不：当H1与H2同步时，它会看起来像H2有一个新文件。
- en: H1 must remember deleted files' VTs.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: H1必须记住已删除文件的VT。
- en: Treat delete like a file modification.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将删除视为文件修改。
- en: '`H1: f=1 ->H2`'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`H1: f=1 ->H2`'
- en: '`H2: del ->H1`'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`H2: del ->H1`'
- en: second sync sees `H1:<1,0> H2<1,1>`, so delete wins at H1
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二次同步看到 `H1:<1,0> H2<1,1>`，因此在H1处删除胜出
- en: There can be delete/write conflicts
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会出现删除/写入冲突
- en: '`H1: f=1 ->H2 f=2`'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`H1: f=1 ->H2 f=2`'
- en: '`H2: del ->H1`'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`H2: del ->H1`'
- en: '`H1:<2,0> vs H2:<1,1> -- conflict`'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`H1:<2,0> vs H2:<1,1> -- 冲突`'
- en: Is it OK to delete at H1?
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在H1删除是否可以？
- en: How to delete the VTs of deleted files?
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如何删除已删除文件的VTs？
- en: Is it enough to wait until all hosts have seen the delete msg?
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 等待所有主机都看到删除消息足够吗？
- en: Sync would carry, for deleted files, set of hosts who have seen del
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同步将携带，对于已删除的文件，已看到删除的主机集合
- en: '"Wait until everyone has seen delete" doesn''t work:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: “等待所有人都看到删除”行不通：
- en: '`H1: ->H3 forget`'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`H1: ->H3 forget`'
- en: '`H2: f=1 ->H1,H3 del,seen ->H1 ->H1`'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`H2: f=1 ->H1,H3 del,seen ->H1 ->H1`'
- en: '`H3: seen ->H1`'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`H3: seen ->H1`'
- en: '`H2 needs to re-tell H1 about f, deletion, and f''s VT`'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`H2需要重新告诉H1有关f，删除和f的VT`'
- en: H2 doesn't know that H3 has seen the delete
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: H2不知道H3已看到删除
- en: So H3 might synchronize with H1 and it *would* then tell H1 of f
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此H3可能会与H1同步，然后告诉H1 f的情况
- en: It would be illegal for to to disappear on H1 and re-appear
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: H1消失并重新出现是违法的
- en: So -- this scheme doesn't allow hosts to forget reliably
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此 -- 此方案不能可靠地让主机忘记
- en: 'Diagram:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图表：
- en: '[PRE9]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Working VT GC scheme from Ficus replicated file system
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Ficus复制文件系统的工作VT GC方案
- en: '*Phase 1:* accumulate set of nodes that have seen delete'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第1阶段：*累积已看到删除的节点集'
- en: terminates when == complete set of nodes
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 == 所有节点的完整集合时终止
- en: '*Phase 2:* accumulate set of nodes that have completed Phase 1'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第2阶段：*累积已完成第1阶段的节点集'
- en: when == all nodes, can totally forget the file
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 == 所有节点时，可以完全忘记文件
- en: If H1 then syncs against H2,
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果H1然后与H2同步，
- en: H2 must be in Phase 2, or completed Phase 2
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: H2必须处于第2阶段，或已完成第2阶段
- en: if in Phase 2, H2 knows H1 once saw the delete, so need not tell H1 abt file
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果处于第2阶段，H2知道H1曾看到过删除，所以不需要告诉H1关于文件的情况
- en: if H2 has completed Phase 2, it doesn't know about the file either
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果H2已完成第2阶段，它也不知道文件
- en: 'A classic problem with VTs:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: VTs的一个经典问题：
- en: Many hosts -> big VTs
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多主机 -> 大VTs
- en: Easy for VT to be bigger than the data!
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VT很容易比数据大！
- en: No very satisfying solution
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有非常令人满意的解决方案
- en: Many file synchronizers don't use VTs -- e.g. Unison, rsync
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 许多文件同步器不使用VTs -- 如Unison，rsync
- en: File modification times enough if only two parties, or star
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果只有两个当事方，或者星形，文件修改时间足够
- en: Need to remember "modified since last sync"
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要记住“自上次同步以来已修改”
- en: VTs needed if you want any-to-any sync with > 2 hosts
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想要 > 2个主机之间的任何到任何同步，则需要VTs
- en: Summary
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: Replication + optimistic updates for speed, high availability
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制 + 乐观更新以提高速度，高可用性
- en: Causal consistency yields sane order of optimistic updates (CBCAST)
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因果一致性产生乐观更新的合理顺序（CBCAST）
- en: Causal ordering detects conflicting updates
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因果排序检测冲突更新
- en: Vector Timestamps compactly summarize update histories
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量时间戳简洁地总结了更新历史
