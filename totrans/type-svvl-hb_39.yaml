- en: オブジェクトから型を生成する
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/tips/generates-type-from-object](https://typescriptbook.jp/tips/generates-type-from-object)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 多くの言語では型による構造体、オブジェクトの定義をしてからコーディングが始まりますが、元がJavaScriptであるTypeScriptにはそのような決まりがないことも多々あります。
  prefs: []
  type: TYPE_NORMAL
- en: 一般的な型を先に決めるプログラミング[​](#一般的な型を先に決めるプログラミング "一般的な型を先に決めるプログラミング への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 多くの言語ではその型が何かを決めてから、その型に属するオブジェクトを決めます。次の例はTypeScriptの例ですが、他の言語に当てはめても問題なく受け入れられると思います。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: すでにJavaScriptの資産があるプロジェクトにおいては表立って型などなく、そのため`Account`といった型は存在せず代入式の`const account`のみが存在していることでしょう。そんなときはこの`const
    account`をTypeScriptに変換してできるだけ近い形で型を作ることができます。
  prefs: []
  type: TYPE_NORMAL
- en: '`typeof`[​](#typeof "typeof への直接リンク")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: この`typeof`はJavaScriptのものではなく、TypeScriptの`typeof`です。これを実際に動作している変数に使ってみるとその変数をTypeScriptはどのような型と認識しているのかがわかります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'ts`const  <data-lsp lsp="const account: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'accountName: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'password: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'plan: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">account</data-lsp>  = { <data-lsp lsp="(property) accountName: string">accountName</data-lsp>:  "yyts",
    <data-lsp lsp="(property) password: string">password</data-lsp>:  "ccbyncsa30",
    <data-lsp lsp="(property) age: number">age</data-lsp>:  80, <data-lsp lsp="(property)
    plan: string">plan</data-lsp>:  "Standard",};type <data-lsp lsp="type Account
    = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'accountName: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'password: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'plan: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">Account</data-lsp> =  typeof <data-lsp
    lsp="const account: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'accountName: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'password: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'plan: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">account</data-lsp>;` `type Account = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'accountName: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'password: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'plan: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`plan`が意図するユニオン型にはなりませんが、それなりに近い型を得ることができました。'
  prefs: []
  type: TYPE_NORMAL
- en: プロパティを定数値で取得したい場合[​](#プロパティを定数値で取得したい場合 "プロパティを定数値で取得したい場合 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: プロパティを定数値で取得したい場合はオブジェクトに`as const`をつけます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'ts`const  <data-lsp lsp="const account: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly accountName: &quot;yyts&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly password: &quot;ccbyncsa30&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly age: 80;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly plan: &quot;Standard&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">account</data-lsp>  = { <data-lsp lsp="(property) accountName: &quot;yyts&quot;">accountName</data-lsp>:  "yyts",
    <data-lsp lsp="(property) password: &quot;ccbyncsa30&quot;">password</data-lsp>:  "ccbyncsa30",
    <data-lsp lsp="(property) age: 80">age</data-lsp>:  80, <data-lsp lsp="(property)
    plan: &quot;Standard&quot;">plan</data-lsp>:  "Standard",} as  <data-lsp lsp="type
    const = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly accountName: &quot;yyts&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly password: &quot;ccbyncsa30&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly age: 80;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly plan: &quot;Standard&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">const</data-lsp>;type <data-lsp lsp="type Account = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly accountName: &quot;yyts&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly password: &quot;ccbyncsa30&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly age: 80;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly plan: &quot;Standard&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">Account</data-lsp> =  typeof <data-lsp
    lsp="const account: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly accountName: &quot;yyts&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly password: &quot;ccbyncsa30&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly age: 80;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly plan: &quot;Standard&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">account</data-lsp>;` `type Account = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly accountName: "yyts";'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly password: "ccbyncsa30";'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly age: 80;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'readonly plan: "Standard";'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}`'
  prefs: []
  type: TYPE_NORMAL
- en: 特定のプロパティだけを定数値で取得したい場合[​](#特定のプロパティだけを定数値で取得したい場合 "特定のプロパティだけを定数値で取得したい場合 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: これでは型の制約が強力すぎて他の値が代入できないので、もう少し柔軟にします。たとえば`plan`だけがユニオン型になるようにしたければ`plan`の右に希望の型を書いてあげればそれでその型になります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'ts`const  <data-lsp lsp="const account: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'accountName: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'password: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'plan: &quot;Standard&quot; | &quot;Free&quot; | &quot;Premium&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">account</data-lsp>  = { <data-lsp lsp="(property) accountName: string">accountName</data-lsp>:  "yyts",
    <data-lsp lsp="(property) password: string">password</data-lsp>:  "ccbyncsa30",
    <data-lsp lsp="(property) age: number">age</data-lsp>:  80, <data-lsp lsp="(property)
    plan: &quot;Standard&quot; | &quot;Free&quot; | &quot;Premium&quot;">plan</data-lsp>:  "Standard"  as  "Free"  |  "Standard"  |  "Premium",};type
    <data-lsp lsp="type Account = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'accountName: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'password: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'plan: &quot;Standard&quot; | &quot;Free&quot; | &quot;Premium&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">Account</data-lsp> =  typeof <data-lsp
    lsp="const account: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'accountName: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'password: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'plan: &quot;Standard&quot; | &quot;Free&quot; | &quot;Premium&quot;;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">account</data-lsp>;` `type Account = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'accountName: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'password: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'age: number;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'plan: "Standard" | "Free" | "Premium";'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
