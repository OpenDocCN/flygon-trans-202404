- en: オブジェクトから型を生成する
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: オブジェクトから型を生成する
- en: 原文：[https://typescriptbook.jp/tips/generates-type-from-object](https://typescriptbook.jp/tips/generates-type-from-object)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/tips/generates-type-from-object](https://typescriptbook.jp/tips/generates-type-from-object)
- en: 多くの言語では型による構造体、オブジェクトの定義をしてからコーディングが始まりますが、元がJavaScriptであるTypeScriptにはそのような決まりがないことも多々あります。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 多くの言語では型による構造体、オブジェクト��定義をしてからコーディングが始まりますが、元がJavaScriptであるTypeScriptにはそのような決まりがないことも多々あります。
- en: 一般的な型を先に決めるプログラミング[​](#一般的な型を先に決めるプログラミング "一般的な型を先に決めるプログラミング への直接リンク")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一般的な型を先に決めるプログラミング[​](#一般的な型を先に決めるプログラミング "一般的な型を先に決めるプログラミング への直接リンク")
- en: 多くの言語ではその型が何かを決めてから、その型に属するオブジェクトを決めます。次の例はTypeScriptの例ですが、他の言語に当てはめても問題なく受け入れられると思います。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 多くの言語ではその型が何かを決めてから、その型に属するオブジェクトを決めます。次の例はTypeScriptの例ですが、他の言語に当てはめても問題なく受け入れられると思います。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: すでにJavaScriptの資産があるプロジェクトにおいては表立って型などなく、そのため`Account`といった型は存在せず代入式の`const account`のみが存在していることでしょう。そんなときはこの`const
    account`をTypeScriptに変換してできるだけ近い形で型を作ることができます。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: すでにJavaScriptの資産があるプロジェクトにおいては表立って型などなく、そのため`Account`といった型は存在せず代入式の`const account`のみが存在していることでしょう。そんなときはこの`const
    account`をTypeScriptに変換してできるだけ近い形で型を作ることができます。
- en: '`typeof`[​](#typeof "typeof への直接リンク")'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`typeof`[​](#typeof "typeof への直接リンク")'
- en: この`typeof`はJavaScriptのものではなく、TypeScriptの`typeof`です。これを実際に動作している変数に使ってみるとその変数をTypeScriptはどのような型と認識しているのかがわかります。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: この`typeof`はJavaScriptのものではなく、TypeScriptの`typeof`です。これを実際に動作している変数に使ってみるとその変数をTypeScriptはどのような型と認識しているのかがわかります。
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'ts`const  <data-lsp lsp="const account: {'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`const  <data-lsp lsp="const account: {'
- en: 'accountName: string;'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'accountName: string;'
- en: 'password: string;'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'password: string;'
- en: 'age: number;'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: 'plan: string;'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'plan: string;'
- en: '}">account</data-lsp>  = { <data-lsp lsp="(property) accountName: string">accountName</data-lsp>:  "yyts",
    <data-lsp lsp="(property) password: string">password</data-lsp>:  "ccbyncsa30",
    <data-lsp lsp="(property) age: number">age</data-lsp>:  80, <data-lsp lsp="(property)
    plan: string">plan</data-lsp>:  "Standard",};type <data-lsp lsp="type Account
    = {'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '}">account</data-lsp>  = { <data-lsp lsp="(property) accountName: string">accountName</data-lsp>:  "yyts",
    <data-lsp lsp="(property) password: string">password</data-lsp>:  "ccbyncsa30",
    <data-lsp lsp="(property) age: number">age</data-lsp>:  80, <data-lsp lsp="(property)
    plan: string">plan</data-lsp>:  "Standard",};type <data-lsp lsp="type Account
    = {'
- en: 'accountName: string;'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'accountName: string;'
- en: 'password: string;'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'password: string;'
- en: 'age: number;'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: 'plan: string;'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'plan: string;'
- en: '}" style="border-bottom:solid 2px lightgrey">Account</data-lsp> =  typeof <data-lsp
    lsp="const account: {'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '}" style="border-bottom:solid 2px lightgrey">Account</data-lsp> =  typeof <data-lsp
    lsp="const account: {'
- en: 'accountName: string;'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'accountName: string;'
- en: 'password: string;'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'password: string;'
- en: 'age: number;'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: 'plan: string;'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'plan: string;'
- en: '}">account</data-lsp>;` `type Account = {'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '}">account</data-lsp>;` `type Account = {'
- en: 'accountName: string;'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'accountName: string;'
- en: 'password: string;'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'password: string;'
- en: 'age: number;'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: 'plan: string;'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'plan: string;'
- en: '}`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: '`plan`が意図するユニオン型にはなりませんが、それなりに近い型を得ることができました。'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`plan`が意図するユニオン型にはなりませんが、それなりに近い型を得ることができました。'
- en: プロパティを定数値で取得したい場合[​](#プロパティを定数値で取得したい場合 "プロパティを定数値で取得したい場合 への直接リンク")
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: プロパティを定数値で取得したい場合[​](#プロパティを定数値で取得したい場合 "プロパティを定数値で取得したい場合 への直接リンク")
- en: プロパティを定数値で取得したい場合はオブジェクトに`as const`をつけます。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: プロパティを定数値で取得したい場合はオブジェクトに`as const`をつけます。
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'ts`const  <data-lsp lsp="const account: {'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`const  <data-lsp lsp="const account: {'
- en: 'readonly accountName: &quot;yyts&quot;;'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly accountName: &quot;yyts&quot;;'
- en: 'readonly password: &quot;ccbyncsa30&quot;;'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly password: &quot;ccbyncsa30&quot;;'
- en: 'readonly age: 80;'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly age: 80;'
- en: 'readonly plan: &quot;Standard&quot;;'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly plan: &quot;Standard&quot;;'
- en: '}">account</data-lsp>  = { <data-lsp lsp="(property) accountName: &quot;yyts&quot;">accountName</data-lsp>:  "yyts",
    <data-lsp lsp="(property) password: &quot;ccbyncsa30&quot;">password</data-lsp>:  "ccbyncsa30",
    <data-lsp lsp="(property) age: 80">age</data-lsp>:  80, <data-lsp lsp="(property)
    plan: &quot;Standard&quot;">plan</data-lsp>:  "Standard",} as  <data-lsp lsp="type
    const = {'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '}">account</data-lsp>  = { <data-lsp lsp="(property) accountName: &quot;yyts&quot;">accountName</data-lsp>:  "yyts",
    <data-lsp lsp="(property) password: &quot;ccbyncsa30&quot;">password</data-lsp>:  "ccbyncsa30",
    <data-lsp lsp="(property) age: 80">age</data-lsp>:  80, <data-lsp lsp="(property)
    plan: &quot;Standard&quot;">plan</data-lsp>:  "Standard",} as  <data-lsp lsp="type
    const = {'
- en: 'readonly accountName: &quot;yyts&quot;;'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly accountName: &quot;yyts&quot;;'
- en: 'readonly password: &quot;ccbyncsa30&quot;;'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly password: &quot;ccbyncsa30&quot;;'
- en: 'readonly age: 80;'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly age: 80;'
- en: 'readonly plan: &quot;Standard&quot;;'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly plan: &quot;Standard&quot;;'
- en: '}">const</data-lsp>;type <data-lsp lsp="type Account = {'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '}">const</data-lsp>;type <data-lsp lsp="type Account = {'
- en: 'readonly accountName: &quot;yyts&quot;;'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly accountName: &quot;yyts&quot;;'
- en: 'readonly password: &quot;ccbyncsa30&quot;;'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly password: &quot;ccbyncsa30&quot;;'
- en: 'readonly age: 80;'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly age: 80;'
- en: 'readonly plan: &quot;Standard&quot;;'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly plan: &quot;Standard&quot;;'
- en: '}" style="border-bottom:solid 2px lightgrey">Account</data-lsp> =  typeof <data-lsp
    lsp="const account: {'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '}" style="border-bottom:solid 2px lightgrey">Account</data-lsp> =  typeof <data-lsp
    lsp="const account: {'
- en: 'readonly accountName: &quot;yyts&quot;;'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly accountName: &quot;yyts&quot;;'
- en: 'readonly password: &quot;ccbyncsa30&quot;;'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly password: &quot;ccbyncsa30&quot;;'
- en: 'readonly age: 80;'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly age: 80;'
- en: 'readonly plan: &quot;Standard&quot;;'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly plan: &quot;Standard&quot;;'
- en: '}">account</data-lsp>;` `type Account = {'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '}">account</data-lsp>;` `type Account = {'
- en: 'readonly accountName: "yyts";'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly accountName: "yyts";'
- en: 'readonly password: "ccbyncsa30";'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly password: "ccbyncsa30";'
- en: 'readonly age: 80;'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly age: 80;'
- en: 'readonly plan: "Standard";'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'readonly plan: "Standard";'
- en: '}`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: 特定のプロパティだけを定数値で取得したい場合[​](#特定のプロパティだけを定数値で取得したい場合 "特定のプロパティだけを定数値で取得したい場合 への直接リンク")
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特定のプロパティだけを定数値で取得したい場合[​](#特定のプロパティだけを定数値で取得したい場合 "特定のプロパティだけを定数値で取得したい場合 への直接リンク")
- en: これでは型の制約が強力すぎて他の値が代入できないので、もう少し柔軟にします。たとえば`plan`だけがユニオン型になるようにしたければ`plan`の右に希望の型を書いてあげればそれでその型になります。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: これでは型の制約が強力すぎて他の値が代入できないので、もう少し柔軟にします。たとえば`plan`だけがユニオン型になるようにしたければ`plan`の右に希望の型を書いてあげればそれでその型になります。
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'ts`const  <data-lsp lsp="const account: {'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`const  <data-lsp lsp="const account: {'
- en: 'accountName: string;'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'accountName: string;'
- en: 'password: string;'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'password: string;'
- en: 'age: number;'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: 'plan: &quot;Standard&quot; | &quot;Free&quot; | &quot;Premium&quot;;'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'plan: &quot;Standard&quot; | &quot;Free&quot; | &quot;Premium&quot;;'
- en: '}">account</data-lsp>  = { <data-lsp lsp="(property) accountName: string">accountName</data-lsp>:  "yyts",
    <data-lsp lsp="(property) password: string">password</data-lsp>:  "ccbyncsa30",
    <data-lsp lsp="(property) age: number">age</data-lsp>:  80, <data-lsp lsp="(property)
    plan: &quot;Standard&quot; | &quot;Free&quot; | &quot;Premium&quot;">plan</data-lsp>:  "Standard"  as  "Free"  |  "Standard"  |  "Premium",};type
    <data-lsp lsp="type Account = {'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '}">account</data-lsp>  = { <data-lsp lsp="(property) accountName: string">accountName</data-lsp>:  "yyts",
    <data-lsp lsp="(property) password: string">password</data-lsp>:  "ccbyncsa30",
    <data-lsp lsp="(property) age: number">age</data-lsp>:  80, <data-lsp lsp="(property)
    plan: &quot;Standard&quot; | &quot;Free&quot; | &quot;Premium&quot;">plan</data-lsp>:  "Standard"  as  "Free"  |  "Standard"  |  "Premium",};type
    <data-lsp lsp="type Account = {'
- en: 'accountName: string;'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'accountName: string;'
- en: 'password: string;'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'password: string;'
- en: 'age: number;'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: 'plan: &quot;Standard&quot; | &quot;Free&quot; | &quot;Premium&quot;;'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'plan: &quot;Standard&quot; | &quot;Free&quot; | &quot;Premium&quot;;'
- en: '}" style="border-bottom:solid 2px lightgrey">Account</data-lsp> =  typeof <data-lsp
    lsp="const account: {'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '}" style="border-bottom:solid 2px lightgrey">Account</data-lsp> =  typeof <data-lsp
    lsp="const account: {'
- en: 'accountName: string;'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'accountName: string;'
- en: 'password: string;'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'password: string;'
- en: 'age: number;'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: 'plan: &quot;Standard&quot; | &quot;Free&quot; | &quot;Premium&quot;;'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'plan: &quot;Standard&quot; | &quot;Free&quot; | &quot;Premium&quot;;'
- en: '}">account</data-lsp>;` `type Account = {'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '}">account</data-lsp>;` `type Account = {'
- en: 'accountName: string;'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'accountName: string;'
- en: 'password: string;'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'password: string;'
- en: 'age: number;'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'age: number;'
- en: 'plan: "Standard" | "Free" | "Premium";'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'plan: "Standard" | "Free" | "Premium";'
- en: '}`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
