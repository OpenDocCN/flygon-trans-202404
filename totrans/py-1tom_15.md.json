["```\ndef singleton(cls):\n    instance = cls()\n    instance.__call__ = lambda: instance\n    return instance\n\n# Sample use\n\n@singleton\nclass Highlander:\n    x = 100\n    # Of course you can have any attributes or methods you like.\n\nhighlander = Highlander()\nanother_highlander = Highlander()\nassert id(highlander) == id(another_highlander) \n```", "```\ndef singleton(cls, *args, **kw):\n    instances = {}\n    def _singleton():\n        if cls not in instances:\n            instances[cls] = cls(*args, **kw)\n        return instances[cls]\n    return _singleton\n\n@singleton\nclass MyClass(object):\n    a = 1\n    def __init__(self, x=0):\n        self.x = x\n\none = MyClass()\ntwo = MyClass()\n\nassert id(one) == id(two) \n```", "```\nclass Singleton(type):\n    def __init__(cls, name, bases, dict):\n        super(Singleton, cls).__init__(name, bases, dict)\n        cls._instance = None\n    def __call__(cls, *args, **kw):\n        if cls._instance is None:\n            cls._instance = super(Singleton, cls).__call__(*args, **kw)\n        return cls._instance\n\nclass MyClass(object):\n    __metaclass__ = Singleton\n\none = MyClass()\ntwo = MyClass()\n\nassert id(one) == id(two) \n```"]