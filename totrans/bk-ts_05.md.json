["```\ninterface myInterface {\n} \n```", "```\nconst myVariable: myInterface; \n```", "```\nvar bookModel = {\n    Author,\n    Title,\n    Genre,\n    ShortDescription,\n    TotalPages,\n    Condition\n} \n```", "```\nvar aBookInstance = (JSON.parse(JSON.stringify(bookModel))); \n```", "```\ninterface BookModel {\n    Author: string;\n    Title: string;\n    Genre: string;\n    ShortDescription: string;\n    TotalPages: number;\n    Condition: string;\n} \n```", "```\nlet aBookInstance: BookModel; \n```", "```\nvar bookModel = {\n    Author, // NOTE! On [such and such a date], this was converted to an array\n    Title,\n    Genre,\n    ShortDescription,\n    TotalPages,\n    Condition\n}\n\nvar aBookInstance = JSON.parse(JSON.stringify(bookModel));\n//aBookInstance.Author = \"Paul Galvin\";\naBookInstance.Author = [\"Paul Galvin\"]; \n```", "```\ninterface AuthorModel {\n    FirstName: string;\n    LastName: string;\n    PreferredEmail: string;\n}\n\ninterface BookModel {\n    Authors: AuthorModel[];\n    Title: string;\n    Genre: string;\n    ShortDescription: string;\n    TotalPages: number;\n    Condition: string;\n}\n\n// Example 1: Create an author object first, then add it to the book instance\nconst FoodBookAuthor1: AuthorModel = {\n    FirstName: \"Paul\",\n    LastName: \"Galvin\",\n    PreferredEmail: \"galvin.paul@gmail.com\"\n}\n\nconst FoodBookAuthor2: AuthorModel = {\n    FirstName: \"Kelly\",\n    LastName: \"Smith\",\n    PreferredEmail: \"ksmith123@awesomefoods.com\"\n}\n\nconst foodBook: BookModel = {\n    Authors: [FoodBookAuthor1, FoodBookAuthor2],\n    Title: \"Foods - The Right Food for the Right Meal\",\n    Genre: \"Life Hacks\",\n    ShortDescription: \"Eggs are not for dinner\",\n    TotalPages: 158,\n    Condition: \"Used - Good\"\n}\n\n// Example 2: Create a book instance in one line.\nconst GotM: BookModel = {\n    Authors: [{\n        FirstName: \"Steven\",\n        LastName: \"Erikson\",\n        PreferredEmail: \"ganoes.paran@malazanempire.gov\"\n    }],\n    Title: \"Gardens of the Moon\",\n    Genre: \"High Fantasy\",\n    ShortDescription: \"Empress tries to conquer city, fails, but wins something better\",\n    TotalPages: 772,\n    Condition: \"New\"\n} \n```", "```\n interface httpResponse {\n    config: any,\n    headers: any,\n    status: number,\n    statusText: string;\n} \n```", "```\ninterface userProfileRestModel {\n    Attachments: boolean;\n    AuthorId: number;\n    BPBrands: string[];\n    BPDescription: string;\n    \"odata.editLink\": string;\n    // and other user profile fields\n} \n```", "```\ninterface userProfileResponse extends httpResponse {\n    data: {\n        value: userProfileRestModel[]\n    }\n} \n```", "```\nenum HttpStatusCodes {\n    OK = 200,\n    GENERAL_SERVER_ERROR = 500,\n    RESOURCE_NOT_FOUND = 304,\n    FORBIDDEN = 403\n} \n```", "```\nfunction parseResult(resultDetails: SomeInterface, resultCode: HttpStatusCodes) {\n    if (resultCode === HttpStatusCodes.OK) {\n        processSuccessfulResponse(resultDetails);\n    }\n    else if (resultCode === HttpStatusCodes.FORBIDDEN) {\n        login();\n    }\n    else {\n        processOtherError(resultCode, resultDetails);\n    }\n} \n```", "```\nenum Direction {\n    Up = 1,\n    Down,\n    Left,\n    Right\n} \n```", "```\nenum HttpStatus {\n    OK = 200,\n    GENERAL_SERVER_ERROR = 500,\n    RESOURCE_NOT_FOUND = 304,\n    FORBIDDEN = 403\n}\n\nfunction parseResult(resultCode: HttpStatus) {\n    if (resultCode === HttpStatus.OK) {\n        console.log(\"Success response\");\n    }\n    else if (resultCode === HttpStatus.FORBIDDEN) {\n        console.log(\"Forbidden response.\");\n    }\n    else {\n        console.log(\"Some other response\");\n    }\n} \n```", "```\nvar HttpStatus;\n(function (HttpStatus) {\n    HttpStatus[HttpStatus[\"OK\"] = 200] = \"OK\";\n    HttpStatus[HttpStatus[\"GENERAL_SERVER_ERROR\"] = 500] = \"GENERAL_SERVER_ERROR\";\n    HttpStatus[HttpStatus[\"RESOURCE_NOT_FOUND\"] = 304] = \"RESOURCE_NOT_FOUND\";\n    HttpStatus[HttpStatus[\"FORBIDDEN\"] = 403] = \"FORBIDDEN\";\n})(HttpStatus || (HttpStatus = {}));\n\nfunction parseResult(resultCode) {\n    if (resultCode === HttpStatus.OK) {\n        console.log(\"Success response\");\n    }\n    else if (resultCode === HttpStatus.FORBIDDEN) {\n        console.log(\"Forbidden response.\");\n    }\n    else {\n        console.log(\"Some other response\");\n    }\n} \n```", "```\nconst enum constHttpStatus {\n    OK = 200,\n    GENERAL_SERVER_ERROR = 500,\n    RESOURCE_NOT_FOUND = 304,\n    FORBIDDEN = 403\n}\n\nfunction parseResult(resultCode: constHttpStatus) {\n    if (resultCode === constHttpStatus.OK) {\n        console.log(\"Success response\");\n    }\n    else if (resultCode === constHttpStatus.FORBIDDEN) {\n        console.log(\"Forbidden response.\");\n    }\n    else {\n        console.log(\"Some other response\");\n    }\n} \n```", "```\nfunction parseResult(resultCode) {\n    if (resultCode === 200 /* OK */) {\n        console.log(\"Success response\");\n    }\n    else if (resultCode === 403 /* FORBIDDEN */) {\n        console.log(\"Forbidden response.\");\n    }\n    else {\n        console.log(\"Some other response\");\n    }\n} \n```", "```\nfunction move(inDirection: \"left\" | \"up\" | \"down\" | \"right\") {\n    console.log(`Moving ${inDirection}.`);\n} \n```", "```\nfunction calculateCollectionTotal(itemCollection) {\n    return itemCollection.reduce(function(prev, current) {\n      return prev + current.Total;\n    }, 0);\n}\n\nconsole.log(\"Invoice lines total:\", calculateCollectionTotal(invoices));\nconsole.log(\"Order lines total:\", calculateCollectionTotal(orders));\nconsole.log(\"Pick lines total:\", calculateCollectionTotal(PickingSlips)); \n```", "```\nfunction calculateCollectionTotal(itemCollection: Invoice[] | Order[] | PickingSlip[]): number {\n    return itemCollection.reduce(function(prev: number, current: Invoice | Order | PickingSlip) {\n      return prev + current.Total;\n    }, 0);\n}\n\nconsole.log(\"Invoice lines total:\", calculateCollectionTotal(invoices));\nconsole.log(\"Order lines total:\", calculateCollectionTotal(orders));\nconsole.log(\"Pick lines total:\", calculateCollectionTotal(PickingSlips)); \n```"]