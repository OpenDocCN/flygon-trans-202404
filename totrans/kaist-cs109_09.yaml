- en: Nullable variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Java and Scala, a variable of type \(T\) either contains a reference to an
    object of the correct type, or the special value null. If the value is null, this
    means the variable currently does not reference any object.
  prefs: []
  type: TYPE_NORMAL
- en: Programmers use null as a special marker, for instance to indicate that an error
    occurred, or that some requested information could not be found. This leads to
    problems when subsequently the code does not check for this special case, because
    calling any operation on a variable with value null will fail. Since the variable
    references no object, it is impossible to call any method! The result is a NullPointerException,
    a bug that is often hard to find.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kotlin helps us avoid this problem by not allowing null in variables of type
    Int, String, etc. If you try to set a variable to null, the compiler complains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, however, you really want to allow null, either because you want
    to use null to indicate a special case or an error, or because you are calling
    some Java functions that use null. In this case, you need to indicate that the
    variable is nullable by placing a question mark after the type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Since the type of s is String?, it is allowed to have the value null.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, whenever we want to call a String method of the object s, we have
    to be careful: Calling a method would fail if s == null. Therefore, Kotlin forbids
    calling methods on nullable variables without checking for null first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test for null manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that the compiler recognizes that in the else part the value of s cannot
    be null, and so calling s.length is okay.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kotlin provides some nice shortcuts to make dealing with nullable variables
    easier. First, we can use the ?. operator. It calls the method if an object exists,
    otherwise the method is not called and the result is null:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we don''t like null as the value being returned, we can change that using
    the "Elvis operator" ?:. It returns its left side if it is not null, otherwise
    the right side. We can now rewrite the function printlen from above as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, sometimes you have a variable of type String?, but you know (because
    of the documentation or because it''s your own code that you analysed carefully)
    that the variable will never be null. In that case you can promise the compiler
    that it''s okay:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The first assignment fails, because s is of type String? and therefore could
    be null, so the assignment to t (of type String) is not allowed. In the second
    assignment I use the !! operator to promise the compiler that all is well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The !! operator can also be used to call a method when you are confident the
    variable is not null:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If your promise is false and s is actually null, then an exception will occur
    at this point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'One example of a standard Kotlin function that returns a nullable type is readLine():
    It returns String?, namely either the input string, or null when the input has
    ended (for instance because you are redirecting the input from a file).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following short script shows this ([reverse.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/11-null/reverse.kts)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run the script while redirect the input from the script file itself,
    it stops correctly after the last line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
