- en: Nullable variables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可空变量
- en: In Java and Scala, a variable of type \(T\) either contains a reference to an
    object of the correct type, or the special value null. If the value is null, this
    means the variable currently does not reference any object.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java和Scala中，类型为\(T\)的变量要么包含对正确类型对象的引用，要么包含特殊值 null。如果值为null，则意味着该变量当前不引用任何对象。
- en: Programmers use null as a special marker, for instance to indicate that an error
    occurred, or that some requested information could not be found. This leads to
    problems when subsequently the code does not check for this special case, because
    calling any operation on a variable with value null will fail. Since the variable
    references no object, it is impossible to call any method! The result is a NullPointerException,
    a bug that is often hard to find.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员使用 null 作为特殊标记，例如表示发生错误，或者无法找到某些请求的信息。当随后的代码不检查这种特殊情况时，会出现问题，因为对具有值 null
    的变量调用任何操作都将失败。由于变量不引用任何对象，因此无法调用任何方法！结果是NullPointerException，这是一个常常难以找到的错误。
- en: 'Kotlin helps us avoid this problem by not allowing null in variables of type
    Int, String, etc. If you try to set a variable to null, the compiler complains:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin通过不允许Int、String等类型的变量为null来帮助我们避免这个问题。如果尝试将变量设置为null，编译器会报错：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Sometimes, however, you really want to allow null, either because you want
    to use null to indicate a special case or an error, or because you are calling
    some Java functions that use null. In this case, you need to indicate that the
    variable is nullable by placing a question mark after the type:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，确实希望允许null，要么因为想使用null来指示特殊情况或错误，要么因为调用一些使用 null 的Java函数。在这种情况下，需要通过在类型后面放置问号来指示变量是可空的：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Since the type of s is String?, it is allowed to have the value null.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于s的类型是String?，它允许具有值 null。
- en: 'However, whenever we want to call a String method of the object s, we have
    to be careful: Calling a method would fail if s == null. Therefore, Kotlin forbids
    calling methods on nullable variables without checking for null first:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，每当我们想调用对象 s 的String方法时，我们必须小心：如果 s == null，则调用方法会失败。因此，Kotlin禁止在不先检查null的情况下调用可空变量的方法：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can test for null manually:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以手动测试是否为null：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that the compiler recognizes that in the else part the value of s cannot
    be null, and so calling s.length is okay.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意编译器认识到在else部分 s 的值不可能为null，因此调用 s.length 是可以的。
- en: 'Kotlin provides some nice shortcuts to make dealing with nullable variables
    easier. First, we can use the ?. operator. It calls the method if an object exists,
    otherwise the method is not called and the result is null:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin提供了一些很好的快捷方式来更轻松地处理可空变量。首先，我们可以使用 ?. 运算符。如果对象存在，则调用方法，否则不调用方法，结果为null：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we don''t like null as the value being returned, we can change that using
    the "Elvis operator" ?:. It returns its left side if it is not null, otherwise
    the right side. We can now rewrite the function printlen from above as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不喜欢返回null作为值，可以使用"Elvis operator" ?:. 如果左侧不为null，则返回左侧，否则返回右侧。现在我们可以将上面的函数printlen重写如下：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, sometimes you have a variable of type String?, but you know (because
    of the documentation or because it''s your own code that you analysed carefully)
    that the variable will never be null. In that case you can promise the compiler
    that it''s okay:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有时你有一个类型为String?的变量，但你知道（因为文档或者因为是你仔细分析过的自己的代码）该变量永远不会为null。在这种情况下，你可以向编译器保证一切正常：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first assignment fails, because s is of type String? and therefore could
    be null, so the assignment to t (of type String) is not allowed. In the second
    assignment I use the !! operator to promise the compiler that all is well.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个赋值失败，因为s的类型为String?，因此可能为null，因此不允许将其赋值给t（类型为String）。在第二个赋值中，我使用 !! 运算符向编译器保证一切正��。
- en: 'The !! operator can also be used to call a method when you are confident the
    variable is not null:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '!! 运算符也可以用于在你确信变量不为null时调用方法：'
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If your promise is false and s is actually null, then an exception will occur
    at this point:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的承诺是错误的，而实际上s为null，那么在这一点上将会发生异常：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'One example of a standard Kotlin function that returns a nullable type is readLine():
    It returns String?, namely either the input string, or null when the input has
    ended (for instance because you are redirecting the input from a file).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个返回可空类型的标准Kotlin函数的例子是 readLine()：它返回String?，即输入字符串，或者当输入结束时为null（例如因为你正在从文件重定向输入）。
- en: 'The following short script shows this ([reverse.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/11-null/reverse.kts)):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的简短脚本展示了这一点（[reverse.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/11-null/reverse.kts)）：
- en: '[PRE9]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we run the script while redirect the input from the script file itself,
    it stops correctly after the last line:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在从脚本文件本身重定向输入的情况下运行脚本，它会在最后一行正确地停止：
- en: '[PRE10]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
