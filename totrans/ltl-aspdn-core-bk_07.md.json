["```\nmkdir AspNetCoreTodo.UnitTests\ncd AspNetCoreTodo.UnitTests\ndotnet new xunit \n```", "```\nAspNetCoreTodo/\n    AspNetCoreTodo/\n        AspNetCoreTodo.csproj\n        Controllers/\n        (etc...)\n\n    AspNetCoreTodo.UnitTests/\n        AspNetCoreTodo.UnitTests.csproj \n```", "```\ndotnet add reference ../AspNetCoreTodo/AspNetCoreTodo.csproj \n```", "```\npublic async Task<bool> AddItemAsync(NewTodoItem newItem, ApplicationUser user) {\n    var entity = new TodoItem\n    {\n        Id = Guid.NewGuid(),\n        OwnerId = user.Id,\n        IsDone = false,\n        Title = newItem.Title,\n        DueAt = DateTimeOffset.Now.AddDays(3)\n    };\n\n    _context.Items.Add(entity);\n\n    var saveResult = await _context.SaveChangesAsync();\n    return saveResult == 1;\n} \n```", "```\nusing System;\nusing System.Threading.Tasks;\nusing AspNetCoreTodo.Data;\nusing AspNetCoreTodo.Models;\nusing AspNetCoreTodo.Services;\nusing Microsoft.EntityFrameworkCore;\nusing Xunit;\n\nnamespace AspNetCoreTodo.UnitTests\n{\n    public class TodoItemServiceShould\n    {\n        [Fact]\n        public async Task AddNewItem() {\n            // ...\n        }\n    }\n} \n```", "```\nvar options = new DbContextOptionsBuilder<ApplicationDbContext>()\n    .UseInMemoryDatabase(databaseName: \"Test_AddNewItem\").Options;\n\n// Set up a context (connection to the DB) for writing\nusing (var inMemoryContext = new ApplicationDbContext(options))\n{\n    var service = new TodoItemService(inMemoryContext);\n\n    var fakeUser = new ApplicationUser\n    {\n        Id = \"fake-000\",\n        UserName = \"fake@fake\"\n    };\n\n    await service.AddItemAsync(new NewTodoItem { Title = \"Testing?\" }, fakeUser);\n} \n```", "```\n// Use a separate context to read the data back from the DB\nusing (var inMemoryContext = new ApplicationDbContext(options))\n{\n    Assert.Equal(1, await inMemoryContext.Items.CountAsync());\n\n    var item = await inMemoryContext.Items.FirstAsync();\n    Assert.Equal(\"Testing?\", item.Title);\n    Assert.Equal(false, item.IsDone);\n    Assert.True(DateTimeOffset.Now.AddDays(3) - item.DueAt < TimeSpan.FromSeconds(1));\n} \n```", "```\npublic class TodoItemServiceShould\n{\n    [Fact]\n    public async Task AddNewItem() {\n        var options = new DbContextOptionsBuilder<ApplicationDbContext>()\n            .UseInMemoryDatabase(databaseName: \"Test_AddNewItem\")\n            .Options;\n\n        // Set up a context (connection to the DB) for writing\n        using (var inMemoryContext = new ApplicationDbContext(options))\n        {\n            var service = new TodoItemService(inMemoryContext);\n            await service.AddItemAsync(new NewTodoItem { Title = \"Testing?\" }, null);\n        }\n\n        // Use a separate context to read the data back from the DB\n        using (var inMemoryContext = new ApplicationDbContext(options))\n        {\n            Assert.Equal(1, await inMemoryContext.Items.CountAsync());\n\n            var item = await inMemoryContext.Items.FirstAsync();\n            Assert.Equal(\"Testing?\", item.Title);\n            Assert.Equal(false, item.IsDone);\n            Assert.True(DateTimeOffset.Now.AddDays(3) - item.DueAt < TimeSpan.FromSeconds(1));\n        }\n    }\n} \n```", "```\ndotnet test \n```", "```\nStarting test execution, please wait...\n[xUnit.net 00:00:00.7595476]   Discovering: AspNetCoreTodo.UnitTests\n[xUnit.net 00:00:00.8511683]   Discovered:  AspNetCoreTodo.UnitTests\n[xUnit.net 00:00:00.9222450]   Starting:    AspNetCoreTodo.UnitTests\n[xUnit.net 00:00:01.3862430]   Finished:    AspNetCoreTodo.UnitTests\n\nTotal tests: 1\\. Passed: 1\\. Failed: 0\\. Skipped: 0.\nTest Run Successful.\nTest execution time: 1.9074 Seconds \n```", "```\nmkdir AspNetCoreTodo.IntegrationTests\ncd AspNetCoreTodo.IntegrationTests\ndotnet new xunit \n```", "```\nAspNetCoreTodo/\n    AspNetCoreTodo/\n        AspNetCoreTodo.csproj\n        Controllers/\n        (etc...)\n\n    AspNetCoreTodo.UnitTests/\n        AspNetCoreTodo.UnitTests.csproj\n\n    AspNetCoreTodo.IntegrationTests/\n        AspNetCoreTodo.IntegrationTests.csproj \n```", "```\ndotnet add reference ../AspNetCoreTodo/AspNetCoreTodo.csproj \n```", "```\ndotnet add package Microsoft.AspNetCore.TestHost \n```", "```\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net.Http;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.TestHost;\nusing Microsoft.Extensions.Configuration;\n\nnamespace AspNetCoreTodo.IntegrationTests\n{\n    public class TestFixture : IDisposable  \n    {\n        private readonly TestServer _server;\n\n        public TestFixture() {\n            var builder = new WebHostBuilder()\n                .UseStartup<AspNetCoreTodo.Startup>()\n                .ConfigureAppConfiguration((context, configBuilder) =>\n                {\n                    configBuilder.SetBasePath(Path.Combine(\n                        Directory.GetCurrentDirectory(), \"..\\\\..\\\\..\\\\..\\\\AspNetCoreTodo\"));\n\n                    configBuilder.AddJsonFile(\"appsettings.json\");\n\n                    // Add fake configuration for Facebook middleware (to avoid startup errors)\n                    configBuilder.AddInMemoryCollection(new Dictionary<string, string>()\n                    {\n                        [\"Facebook:AppId\"] = \"fake-app-id\",\n                        [\"Facebook:AppSecret\"] = \"fake-app-secret\"\n                    });\n                });\n            _server = new TestServer(builder);\n\n            Client = _server.CreateClient();\n            Client.BaseAddress = new Uri(\"http://localhost:5000\");\n        }\n\n        public HttpClient Client { get; }\n\n        public void Dispose() {\n            Client.Dispose();\n            _server.Dispose();\n        }\n    }\n} \n```", "```\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Xunit;\n\nnamespace AspNetCoreTodo.IntegrationTests\n{\n    public class TodoRouteShould : IClassFixture<TestFixture>\n    {\n        private readonly HttpClient _client;\n\n        public TodoRouteShould(TestFixture fixture)\n        {\n            _client = fixture.Client;\n        }\n\n        [Fact]\n        public async Task ChallengeAnonymousUser()\n        {\n            // Arrange\n            var request = new HttpRequestMessage(HttpMethod.Get, \"/todo\");\n\n            // Act: request the /todo route\n            var response = await _client.SendAsync(request);\n\n            // Assert: anonymous user is redirected to the login page\n            Assert.Equal(HttpStatusCode.Redirect, response.StatusCode);\n            Assert.Equal(\"http://localhost:5000/Account/Login?ReturnUrl=%2Ftodo\",\n                        response.Headers.Location.ToString());\n        }\n    }\n} \n```", "```\nStarting test execution, please wait...\n[xUnit.net 00:00:00.7237031]   Discovering: AspNetCoreTodo.IntegrationTests\n[xUnit.net 00:00:00.8118035]   Discovered:  AspNetCoreTodo.IntegrationTests\n[xUnit.net 00:00:00.8779059]   Starting:    AspNetCoreTodo.IntegrationTests\n[xUnit.net 00:00:01.5828576]   Finished:    AspNetCoreTodo.IntegrationTests\n\nTotal tests: 1\\. Passed: 1\\. Failed: 0\\. Skipped: 0.\nTest Run Successful.\nTest execution time: 2.0588 Seconds \n```"]