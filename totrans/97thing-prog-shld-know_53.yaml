- en: The Linker Is not a Magical Program
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接器不是一个神奇的程序
- en: The Linker Is not a Magical Program
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接器不是一个神奇的程序
- en: 'Depressingly often (happened to me again just before I wrote this), the view
    many programmers have of the process of going from source code to a statically
    linked executable in a compiled language is:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 令人沮丧的是（就在我写这篇文章之前又发生了），许多程序员对从源代码到编译语言的静态链接可执行文件的过程的看法是：
- en: Edit source code
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑源代码
- en: Compile source code into object files
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将源代码编译成目标文件
- en: Something magical happens
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些神奇的事情发生了
- en: Run executable
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行可执行文件
- en: 'Step 3 is, of course, the linking step. Why would I say such an outrageous
    thing? I''ve been doing tech support for decades, and I get the following questions
    again and again:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步当然是链接步骤。为什么我会说出这样一个荒谬的事情？我做技术支持已经几十年了，我一遍又一遍地收到以下问题：
- en: The linker says def is defined more than once.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 链接器说def被定义了多次。
- en: The linker says abc is an unresolved symbol.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 链接器说abc是一个未解析的符号。
- en: Why is my executable so large?
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我的可执行文件这么大？
- en: Followed by "What do I do now?" usually with the phrases "seems to" and "somehow"
    mixed in, and an aura of utter bafflement. It's the "seems to" and "somehow" that
    indicate that the linking process is viewed as a magical process, presumably understandable
    only by wizards and warlocks. The process of compiling does not elicit these kinds
    of phrases, implying that programmers generally understand how compilers work,
    or at least what they do.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 紧随其后的是“我现在该怎么办？”通常会出现“似乎”和“某种方式”这样的短语，并带有一种彻底的困惑氛围。正是“似乎”和“某种方式”表明了链接过程被视为一个神奇的过程，可能只有巫师和术士才能理解。编译的过程不会引起这种短语，这意味着程序员通常了解编译器的工作原理，或者至少知道它们做什么。
- en: A linker is a very stupid, pedestrian, straightforward program. All it does
    is concatenate together the code and data sections of the object files, connect
    the references to symbols with their definitions, pull unresolved symbols out
    of the library, and write out an executable. That's it. No spells! No magic! The
    tedium in writing a linker is usually all about decoding and generating the usually
    ridiculously overcomplicated file formats, but that doesn't change the essential
    nature of a linker.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 链接器是一个非常愚蠢、平凡、直截了当的程序。它所做的就是将目标文件的代码和数据部分连接在一起，将符号的引用与其定义连接起来，从库中提取未解析的符号，并写出一个可执行文件。就是这样。没有咒语！没有魔法！写链接器的烦恼通常都在于解码和生成通常过于复杂的文件格式，但这并不改变链接器的本质。
- en: 'So let''s say the linker is saying def is defined more than once. Many programming
    languages, such as C, C++, and D, have both declarations and definitions. Declarations
    normally go into header files, like:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以假设链接器说def被定义了多次。许多编程语言，如C、C++和D，都有声明和定义。声明通常放在头文件中，像：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'which generates an external reference to the symbol `iii`. A definition, on
    the other hand, actually sets aside storage for the symbol, usually appears in
    the implementation file, and looks like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成对符号`iii`的外部引用。另一方面，定义实际上为符号保留存储空间，通常出现在实现文件中，看起来像这样：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How many definitions can there be for each symbol? As in the film *Highlander*,
    there can be only one. So, what if a definition of iii appears in more than one
    implementation file?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每个符号可以有多少个定义？就像电影*Highlander*中一样，只能有一个。那么，如果iii的定义出现在多个实现文件中怎么办？
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The linker will complain about `iii` being multiply defined.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 链接器会抱怨`iii`被多次定义。
- en: Not only can there be only one, there must be one. If iii only appears as a
    declaration, but never a definition, the linker will complain about iii being
    an unresolved symbol.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅可以只有一个，必须有一个。如果iii只出现在声明中，而从未出现在定义中，链接器会抱怨iii是一个未解析的符号。
- en: To determine why an executable is the size it is, take a look at the map file
    that linkers optionally generate. A map file is nothing more than a list of all
    the symbols in the executable along with their addresses. This tells you what
    modules were linked in from the library, and the sizes of each module. Now you
    can see where the bloat is coming from. Often there will be library modules that
    you have no idea why were linked in. To figure it out, temporarily remove the
    suspicious module from the library, and relink. The undefined symbol error then
    generated will indicate who is referencing that module.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定可执行文件的大小原因，可以查看链接器可选择生成的映射文件。映射文件只是可执行文件中所有符号及其地址的列表。这告诉您从库中链接了哪些模块，以及每个模块的大小。现在你可以看到浮肿来自哪里。通常会有一些库模块，你不知道为什么会被链接进来。为了弄清楚，暂时从库中移除可疑模块，并重新链接。然后生成的未定义符号错误将指示谁在引用该模块。
- en: Although it is not always immediately obvious why you get a particular linker
    message, there is nothing magical about linkers. The mechanics are straightforward;
    it's the details you have to figure out in each case.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然为什么会得到特定的链接器消息并不总是显而易见，但链接器并不神奇。其机制很简单；需要在每种情况下弄清楚的是细节。
- en: By [Walter Bright](http://creativecommons.org/licenses/by/3.0/us/)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Walter Bright](http://creativecommons.org/licenses/by/3.0/us/)
