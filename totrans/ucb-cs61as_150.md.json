["```\n> (load \"~cs61as/lib/query.scm\")\n> (initialize-data-base microshaft-data-base)\n> (query-driver-loop) \n```", "```\n(address (Bitdiddle Ben) (Slumerville (Ridge Road) 10))\n(job (Bitdiddle Ben) (computer wizard))\n(salary (Bitdiddle Ben) 60000) \n```", "```\n(address (Hacker Alyssa P) (Cambridge (Mass Ave) 78))\n(job (Hacker Alyssa P) (computer programmer))\n(salary (Hacker Alyssa P) 40000)\n(supervisor (Hacker Alyssa P) (Bitdiddle Ben))\n(address (Fect Cy D) (Cambridge (Ames Street) 3))\n(job (Fect Cy D) (computer programmer))\n(salary (Fect Cy D) 35000)\n(supervisor (Fect Cy D) (Bitdiddle Ben))\n(address (Tweakit Lem E) (Boston (Bay State Road) 22))\n(job (Tweakit Lem E) (computer technician))\n(salary (Tweakit Lem E) 25000)\n(supervisor (Tweakit Lem E) (Bitdiddle Ben)) \n```", "```\n(address (Reasoner Louis) (Slumerville (Pine Tree Road) 80))\n(job (Reasoner Louis) (computer programmer trainee))\n(salary (Reasoner Louis) 30000)\n(supervisor (Reasoner Louis) (Hacker Alyssa P)) \n```", "```\n(supervisor (Bitdiddle Ben) (Warbucks Oliver))\n(address (Warbucks Oliver) (Swellesley (Top Heap Road)))\n(job (Warbucks Oliver) (administration big wheel))\n(salary (Warbucks Oliver) 150000) \n```", "```\n(address (Scrooge Eben) (Weston (Shady Lane) 10))\n(job (Scrooge Eben) (accounting chief accountant))\n(salary (Scrooge Eben) 75000)\n(supervisor (Scrooge Eben) (Warbucks Oliver))\n(address (Cratchet Robert) (Allston (N Harvard Street) 16))\n(job (Cratchet Robert) (accounting scrivener))\n(salary (Cratchet Robert) 18000)\n(supervisor (Cratchet Robert) (Scrooge Eben)) \n```", "```\n(address (Aull DeWitt) (Slumerville (Onion Square) 5))\n(job (Aull DeWitt) (administration secretary))\n(salary (Aull DeWitt) 25000)\n(supervisor (Aull DeWitt) (Warbucks Oliver)) \n```", "```\n(can-do-job (computer wizard) (computer programmer))\n(can-do-job (computer wizard) (computer technician)) \n```", "```\n(can-do-job (computer programmer)\n            (computer programmer trainee)) \n```", "```\n(can-do-job (administration secretary)\n            (administration big wheel)) \n```", "```\n;;; Query input:\n(job ?x (computer programmer)) \n```", "```\n;;; Query results:\n(job (Hacker Alyssa P) (computer programmer))\n(job (Fect Cy D) (computer programmer)) \n```", "```\n(address ?x ?y) \n```", "```\n(supervisor ?x ?x) \n```", "```\n(job ?x (computer ?type)) \n```", "```\n(job (Bitdiddle Ben) (computer wizard))\n(job (Hacker Alyssa P) (computer programmer))\n(job (Fect Cy D) (computer programmer))\n(job (Tweakit Lem E) (computer technician)) \n```", "```\n(job (Reasoner Louis) (computer programmer trainee)) \n```", "```\n(job ?x (computer . ?type)) \n```", "```\n(computer . ?type) \n```", "```\n(computer programmer trainee) \n```", "```\n(computer programmer) \n```", "```\n(computer) \n```", "```\n(assert! (likes brian potstickers))\n```", "```\n (load \"~cs61as/lib/query.scm\")\n(initialize-data-base microshaft-data-base)\n(query-driver-loop)\n```", "```\n(and (job ?person (computer programmer))\n     (address ?person ?where)) \n```", "```\n(and (job (Hacker Alyssa P) (computer programmer))\n     (address (Hacker Alyssa P) (Cambridge (Mass Ave) 78)))\n(and (job (Fect Cy D) (computer programmer))\n     (address (Fect Cy D) (Cambridge (Ames Street) 3))) \n```", "```\n(and <query1> <query2> ... <queryn>) \n```", "```\n(or (supervisor ?x (Bitdiddle Ben))\n    (supervisor ?x (Hacker Alyssa P))) \n```", "```\n(or (supervisor (Hacker Alyssa P) (Bitdiddle Ben))\n    (supervisor (Hacker Alyssa P) (Hacker Alyssa P)))\n\n(or (supervisor (Fect Cy D) (Bitdiddle Ben)) \n    (supervisor (Fect Cy D) (Hacker Alyssa P)))\n\n(or (supervisor (Tweakit Lem E) (Bitdiddle Ben))     \n    (supervisor (Tweakit Lem E) (Hacker Alyssa P))) \n\n(or (supervisor (Reasoner Louis) (Bitdiddle Ben)) \n    (supervisor (Reasoner Louis) (Hacker Alyssa P))) \n```", "```\n(or <query1> <query2> ... <queryn> ) \n```", "```\n(and (supervisor ?x (Bitdiddle Ben))\n     (not (job ?x (computer programmer)))) \n```", "```\n(not <query1>) \n```", "```\n(lisp-value <predicate> <arg1> ... <argn>) \n```", "```\n(and (salary ?person ?amount)\n     (lisp-value > ?amount 30000)) \n```", "```\n(mother Eve Cain) \n```", "```\n(assert! (rule (grandmother ?elder ?younger)\n               (and (mother ?elder ?mom)\n                    (mother ?mom ?younger) )))) \n```", "```\n(assert! (rule (grandmother ?elder ?younger) ;; WRONG!!!!\n               (mother ?elder (mother ?younger)) )) \n```", "```\n(son Adam Cain)\n(son Cain Enoch)\n(son Enoch Irad)\n(son Irad Mehujael)\n(son Mehujael Methushael)\n(son Methushael Lamech)\n(wife Lamech Ada)\n(son Ada Jabal)\n(son Ada Jubal)\n```", "```\n(rule (lives-near ?person-1 ?person-2)\n      (and (address ?person-1 (?town . ?rest-1))\n           (address ?person-2 (?town . ?rest-2))\n           (not (same ?person-1 ?person-2)))) \n```", "```\n(rule (same ?x ?x)) \n```", "```\n(lives-near ?person (Hacker Alyssa P))\n```", "```\n(lives-near ?person-1 ?person-2)\n```", "```\n(lives-near (Hacker Alyssa P) (Fect Cy D))\n(lives-near (Fect Cy D) (Hacker Alyssa P))\n```", "```\n(append x y z) \n```", "```\n(assert! (rule (append () ?y ?y)))\n(assert! (rule (append (?u . ?v) ?y (?u . ?z))\n         (append ?v ?y ?z))) \n```", "```\n;;; Query input:\n(append (a b) (c d) ?what)\n;;; Query results:\n(append (a b) (c d) (a b c d)) \n```", "```\n;;; Query input:\n(append (a b) ?what (a b c d))\n;;; Query results:\n(append (a b) (c d) (a b c d)) \n```", "```\n;;; Query input:\n(append ?this ?that (a b c d))\n;;; Query results:\n(append () (a b c d) (a b c d))\n(append (a) (b c d) (a b c d))\n(append (a b) (c d) (a b c d))\n(append (a b c) (d) (a b c d))\n(append (a b c d) () (a b c d)) \n```", "```\n(define (append a b)\n    (if (null? a)\n        b\n        (cons (car a) (append (cdr a) b)) )) \n```", "```\n(assert! (rule (reverse (?a . ?x) ?y)\n               (and (reverse ?x ?z)\n                    (append ?z (?a) ?y) )))\n\n(assert! (reverse () ())) \n```", "```\n(assert! (rule (backward (?a . ?x) ?y)\n               (and (append ?z (?a) ?y)\n                    (backward ?x ?z) )))\n\n(assert! (backward () ())) \n```"]