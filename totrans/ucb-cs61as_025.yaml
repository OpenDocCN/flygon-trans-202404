- en: Lesson 1 Intro
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 课介绍
- en: Functional Programming
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数式编程
- en: In this lesson, we will dive into functional programming and recursion. A recursive
    procedure solves a large problem by making it a little bit smaller somehow and
    then calling itself. When it calls itself, it makes the problem smaller yet again.
    This continues until the problem is small enough to be trivially solved.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这节课中，我们将深入探讨函数式编程和递归。一个递归过程通过使问题变得稍微小一些然后调用自身来解决一个大问题。当它调用自身时，它再次使问题变得更小。这种过程一直持续，直到问题变得足够小以至于可以轻松解决。
- en: 'Recursion can be hard to get used to if you have never used it before. Some
    things to remember when programming recursively are:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前从未使用过递归，递归可能会很难适应。在编写递归程序时要记住的一些事项包括：
- en: Remember to have a base case. Your recursion should reach a point where it no
    longer needs to call itself to get an answer. At some point, the problem should
    be trivial enough to just output an answer.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记得要有一个基本情况。你的递归应该达到一个不再需要调用自身来获得答案的点。在某个时候，问题应该变得足够简单，只需输出一个答案。
- en: Always make your problem smaller. Whenever you make a recursive call, make sure
    your arguments are smaller than what they were to begin with. If they aren't,
    then you can get yourself into some nasty infinite loops.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 总是让问题变小。每当你进行递归调用时，确保你的参数比开始时要小。如果不是，那么你可能会陷入一些恶性无限循环中。
- en: Lastly, trust the recursion! Don't overthink the problem. If your recursion
    makes sense and you've followed hints 1 and 2, you probably have working code.
    You don't always need to trace through the recursion to make sure your procedure
    works as you expect it to.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，相信递归！不要过度思考问题。如果你的递归有意义并且遵循了提示 1 和 2，那么你可能有一个有效的代码。你并不总是需要追踪递归以确保你的过程按照你的期望工作。
- en: Prerequisites and What to Expect
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件和预期内容
- en: For this lesson, you should understand the very basics of Racket and know proper
    syntax.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这节课，你应该了解 Racket 的基础知识并掌握正确的语法。
- en: In this lesson, you will learn recursion.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这节课中，你将学习递归。
- en: Readings
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读材料
- en: 'Here are the relevant readings for this lesson:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这节课的相关阅读材料如下：
- en: '[SICP 1.1 - The Elements of Programming](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%25_sec_1.1)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SICP 1.1 - 编程的要素](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%25_sec_1.1)'
- en: '[Lecture Notes](https://docs.google.com/document/d/1_E7HFl1F0L-CCkL3UJfBtdhMwIRuMHuMzy05ByYn7Fk/edit)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[讲座笔记](https://docs.google.com/document/d/1_E7HFl1F0L-CCkL3UJfBtdhMwIRuMHuMzy05ByYn7Fk/edit)'
- en: If you'd like more resources, check out all of the readings for Unit 0.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更多资源，请查看单元 0 的所有阅读材料。
- en: Functions
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: Before we talk about functions in computer science, let's talk about functions
    in math. In math, a function [mathjaxinline]f(x)[/mathjaxinline] takes a single
    input [mathjaxinline]x[/mathjaxinline], does "something" to that [mathjaxinline]x[/mathjaxinline],
    and returns a new value. For each [mathjaxinline]x[/mathjaxinline] that the function
    takes in, it returns only one value, and it returns *the same value every time*.
    For example, if [mathjaxinline]f(x) = x + 2[/mathjaxinline], every single time
    we plug in 4 to [mathjaxinline]f(x)[/mathjaxinline], we will get 6\. In no circumstance
    will we input 4 and get 5, 7, or anything other than 6.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论计算机科学中的函数之前，让我们先谈谈数学中的函数。在数学中，一个函数 [mathjaxinline]f(x)[/mathjaxinline]
    接受一个输入 [mathjaxinline]x[/mathjaxinline]，对这个 [mathjaxinline]x[/mathjaxinline] 做一些"操作"，然后返回一个新值。对于函数接受的每个
    [mathjaxinline]x[/mathjaxinline]，它只返回一个值，并且每次都返回*相同的值*。例如，如果 [mathjaxinline]f(x)
    = x + 2[/mathjaxinline]，每次我们将 4 代入 [mathjaxinline]f(x)[/mathjaxinline]，我们都会得到
    6。在任何情况下，我们都不会输入 4 而得到 5、7 或任何不是 6 的值。
- en: It's the same thing in computer science! A function is defined as a [procedure](https://preview.edge.edx.org/courses/uc-berkeley/cs61as-
    1x/SICP/wiki/cs61as-1x/procedure/) that has the property that the output is dependent
    on the inputs--that is, when given a certain input(s) to a function, it returns
    the same output every time.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中也是一样的！一个函数被定义为一个[过程](https://preview.edge.edx.org/courses/uc-berkeley/cs61as-
    1x/SICP/wiki/cs61as-1x/procedure/)，其输出取决于输入--也就是说，当给定某个输入（们）给一个函数时，它每次都返回相同的输出。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: is a function because whenever we put in an input, we always get that input
    times itself.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个函数，因为无论我们输入什么，我们总是得到输入乘以它自己。
- en: In addition to functions, Racket also has a more general type of data type called
    a *procedure*. A procedure is like a function, but it does not have to necessarily
    return the same output for every input. For example, `square` is a function, but
    `random` is not, because for the same input, we can get a different output for
    each call of random.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了函数外，Racket 还有一种更一般的数据类型称为*过程*。过程类似于函数，但并不一定要对于每个输入返回相同的输出。例如，`square`是一个函数，但`random`不是，因为对于相同的输入，我们每次调用`random`都可能得到不同的输出。
- en: 'To clarify: in Racket, **all functions are procedures, but not all procedures
    are functions**.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 澄清一下：在 Racket 中，**所有函数都是过程，但并非所有过程都是函数**。
- en: 'Here are some things covered in this subsection:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本小节涵盖的一些内容：
- en: Functions--what they are, how to define them.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数--它们是什么，如何定义它们。
- en: Primitive procedures
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原始过程
- en: Special Forms
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 特殊形式
- en: What next?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: Start the next subsection 1!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 开始下一小节 1！
