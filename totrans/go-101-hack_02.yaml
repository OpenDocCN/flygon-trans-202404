- en: Create Go workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create Go workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the `Go` build environment is ready, the next step is to create workspace
    for development:'
  prefs: []
  type: TYPE_NORMAL
- en: '(1) Set up a new empty directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '(2) Use a new environment variable `$GOPATH` to point it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The workspace should contain `3` subdirectories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'src: contains the Go source code.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'pkg: contains the package objects. You could think them as libraries which
    are used in linkage stage to generate the final executable files.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'bin: contains the executable files.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '(1) Create a `src` directory in `$GOPATH`, which is `/root/gowork` in my system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '(2) Since `Go` organizes source code using "`package`" concept , and every
    "`package`" should occupy a distinct directory, I create a `greet` directory in
    `src`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a new `Go` source code file (`greet.go`) in `src/greet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can consider this `greet` directory provides a `greet` package which can
    be used by other programs.
  prefs: []
  type: TYPE_NORMAL
- en: '(3) Create another package `hello` which utilizes the `greet` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can see in `hello.go`, the `main` function calls `Greet` function offered
    by `greet` package.
  prefs: []
  type: TYPE_NORMAL
- en: '(4) Now our `$GOPATH` layout is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s compile and install `hello` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the `$GOPATH` layout again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the executable command `hello` is generated in `bin` folder. Because
    `hello` needs `greet` package''s help, a `greet.a` object is also produced in
    `pkg` directory, but in system related subdirectory: `linux_amd64`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `hello` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Working as expected!
  prefs: []
  type: TYPE_NORMAL
- en: '(5) You should add `$GOPATH/bin` to `$PATH` environment variable for facility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can run `hello` directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[How to Write Go Code](https://golang.org/doc/code.html).'
  prefs: []
  type: TYPE_NORMAL
