- en: error vs errors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误 vs 错误
- en: error vs errors
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误 vs 错误
- en: 'Handling errors is a crucial part of writing robust programs. When scanning
    the `Go` packages, it is not rare to see APIs which have multiple return values
    with an error among them. For example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 处理错误是编写健壮程序的关键部分。在扫描`Go`包时，经常会看到其中有多个返回值，其中包含一个错误。例如：
- en: func Open(name string) (*File, error)
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: func Open(name string) (*File, error)
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Open opens the named file for reading. If successful, methods on the returned
    file can be used for reading; the associated file descriptor has mode O_RDONLY.
    If there is an error, it will be of type *PathError.
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Open打开指定的文件以供读取。如果成功，返回的文件上的方法可用于读取；相关文件描述符的模式为O_RDONLY。如果出现错误，它将是*PathError类型。
- en: 'And the idiomatic method of using `os.Open` function is like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`os.Open`函数的惯用方法如下：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: So to implement resilient `Go` programs, how to generate and deal with errors
    is a required course.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了实现弹性的`Go`程序，如何生成和处理错误是一门必修课程。
- en: '`Go` provides both `error` and `errors`, and you shouldn''t mix up them. `error`
    is a built-in interface type:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`Go`提供了`error`和`errors`两种，你不应该混淆它们。`error`是一个内置的接口类型：'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So for any type, as long as it implements `Error() string` method, it will
    satisfy `error` interface automatically. `errors` is one of my favorite packages
    since it is very simple (The life will definitely be easier if every package is
    similar to `errors`!). Removing the comments, the amount of core code lines is
    very small:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于任何类型，只要实现了`Error() string`方法，它就会自动满足`error`接口。`errors`是我最喜欢的包之一，因为它非常简单（如果每个包都类似于`errors`，生活肯定会更轻松！）。去掉注释后，核心代码行数非常少：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `New` function in `errors` package returns an `errorString` struct which
    complies with `error` interface. Check the following example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`errors`包中的`New`函数返回一个符合`error`接口的`errorString`结构体。查看以下示例：'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The execution result is here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 执行结果在这里：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In real life, you may prefer to use `Errorf` function defined in `fmt` package
    to create `error` interface, rather than use `errors.New()` directly:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际生活中，你可能更喜欢使用`fmt`包中定义的`Errorf`函数来创建`error`接口，而不是直接使用`errors.New()`：
- en: func Errorf(format string, a ...interface{}) error
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: func Errorf(format string, a ...interface{}) error
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Errorf formats according to a format specifier and returns the string as a value
    that satisfies error.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Errorf根据格式说明符进行格式化，并返回作为满足错误的值的字符串。
- en: 'So the above code can be refactored as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，上述代码可以重构如下：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'References:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料：
- en: '[The Go Programming Language](http://www.gopl.io/).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[《Go编程语言》](http://www.gopl.io/)。'
