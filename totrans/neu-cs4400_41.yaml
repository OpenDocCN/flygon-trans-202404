- en: Types of EvaluatorsTuesday, February 14th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估器的类型星期二，2月14日
- en: What we did just now is implement lexical environments and closures in the language
    we implement using lexical environments and closures in our own language (Racket)!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 刚才我们所做的是在我们使用词法环境和闭包实现的语言中实现词法环境和闭包（Racket）！
- en: This is another example of embedding a feature of the host language in the implemented
    language, an issue that we have already discussed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将主机语言的特性嵌入到实现语言中的另一个例子，这是我们已经讨论过的问题。
- en: 'There are many examples of this, even when the two languages involved are different.
    For example, if we have this bit in the C implementation of Racket:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况有很多例子，即使涉及的两种语言是不同的。例如，如果我们在Racket的C实现中有这样一点：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'then the special semantics of evaluating a Racket `and` form is being inherited
    from C’s special treatment of `&&`. You can see this by the fact that if there
    is a bug in the C compiler, then it will propagate to the resulting Racket implementation
    too. A different solution is to not use `&&` at all:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，评估Racket `and`形式的特殊语义是从C对`&&`的特殊处理中继承的。你可以通过C编译器中存在bug时，它也会传播到结果Racket实现中来看到这一点。另一种解决方案是根本不使用`&&`：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: and we can say that this is even better since it evaluates the second expression
    in tail position. But in this case we don’t really get that benefit, since C itself
    is not doing tail-call optimization as a standard feature (though some compilers
    do so under some circumstances).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说这甚至更好，因为它在尾位置评估第二个表达式。但在这种情况下，我们并没有真正获得这个好处，因为C本身并没有将尾调用优化作为标准特性（尽管一些编译器在某些情况下会这样做）。
- en: We have seen a few different implementations of evaluators that are quite different
    in flavor. They suggest the following taxonomy.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了几种不同风格的评估器实现。它们提出了以下分类法。
- en: A ***syntactic evaluator*** is one that uses its own language to represent only
    expressions of the evaluated language, implementing all the corresponding behavior
    explicitly.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个***语法评估器***是使用自己的语言仅表示被评估语言的表达式，并明确实现所有相应行为的评估器。
- en: A ***meta evaluator*** is an evaluator that uses language features of its own
    language to directly implement behavior of the evaluated language.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个***元评估器***是使用自己语言的语言特性直接实现被评估语言行为的评估器。
- en: 'While our substitution-based FLANG evaluator was close to being a syntactic
    evaluator, we haven’t written any purely syntactic evaluators so far: we still
    relied on things like Racket arithmetics etc. The most recent evaluator that we
    have studied, is distinctly a meta evaluator.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们基于替换的FLANG评估器接近于语法评估器，但到目前为止我们还没有编写任何纯粹的语法评估器：我们仍然依赖于像Racket算术等东西。我们所学习的最新评估器，明显是一个元评估器。
- en: 'With a good match between the evaluated language and the implementation language,
    writing a meta evaluator can be very easy. With a bad match, though, it can be
    very hard. With a syntactic evaluator, implementing each semantic feature will
    be somewhat hard, but in return you don’t have to worry as much about how well
    the implementation and the evaluated languages match up. In particular, if there
    is a particularly strong mismatch between the implementation and the evaluated
    language, it may take less effort to write a syntactic evaluator than a meta evaluator.
    As an exercise, we can build upon our latest evaluator to remove the encapsulation
    of the evaluator’s response in the VAL type. The resulting evaluator is shown
    below. This is a true meta evaluator: it uses Racket closures to implement FLANG
    closures, Racket function application for FLANG function application, Racket numbers
    for FLANG numbers, and Racket arithmetic for FLANG arithmetic. In fact, ignoring
    some small syntactic differences between Racket and FLANG, this latest evaluator
    can be classified as something more specific than a meta evaluator:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过被评估语言和实现语言之间的良好匹配，编写元评估器可能会非常容易。然而，如果匹配不好，那么可能会非常困难。对于一个语法评估器，实现每个语义特性都会有一定难度，但作为回报，你不必太担心实现和被评估语言之间的匹配程度。特别是，如果实现和被评估语言之间存在特别强烈的不匹配，编写一个语法评估器可能比编写一个元评估器需要更少的工作。作为练习，我们可以在我们最新的评估器基础上去除评估器响应在VAL类型中的封装。下面显示了结果评估器。这是一个真正的元评估器：它使用Racket闭包来实现FLANG闭包，Racket函数应用于FLANG函数应用，Racket数字用于FLANG数字，Racket算术用于FLANG算术。实际上，忽略Racket和FLANG之间的一些小的语法差异，这个最新的评估器可以被分类为比元评估器更具体的东西：
- en: A ***meta-circular evaluator*** is a meta evaluator in which the implementation
    and the evaluated languages are the same.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***元循环评估器***是一种元评估器，其中实现和被评估的语言是相同的。'
- en: (Put differently, the trivial nature of the evaluator clues us in to the deep
    connection between the two languages, whatever their syntactic differences may
    be.)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: (换句话说，评估器的平凡性提示我们两种语言之间存在深层联系，无论它们的语法差异如何。)
