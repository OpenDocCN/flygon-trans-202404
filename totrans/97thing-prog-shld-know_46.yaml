- en: Know Your Limits
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解自己的极限
- en: Know Your Limits
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解自己的极限
- en: '*"Man''s got to know his limitations." — Dirty Harry*'
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"人必须了解自己的限制。" —《独行侠》*'
- en: Your resources are limited. You only have so much time and money to do your
    work, including the time and money needed to keep your knowledge, skills, and
    tools up-to-date. You can only work so hard, so fast, so smart, and so long. Your
    tools are only so powerful. Your target machines are only so powerful. So you
    have to respect the limits of your resources.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你的资源是有限的。你只有那么多时间和金钱来完成工作，包括保持你的知识、技能和工具的最新状态所需的时间和金钱。你只能努力工作，努力快速、聪明和长时间工作。你的工具只有那么强大。你的目标机器也只有那么强大。因此，你必须尊重你的资源限制。
- en: How to respect those limits? Know yourself, know your people, know your budgets,
    and know your stuff. Especially, as a software engineer, know the space and time
    complexity of your data structures and algorithms, and the architecture and performance
    characteristics of your systems. Your job is to create an optimal marriage of
    software and systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如何尊重这些限制？了解自己，了解你的团队，了解你的预算，了解你的东西。特别是，作为一名软件工程师，了解你的数据结构和算法的空间和时间复杂度，了解你系统的架构和性能特征。你的工作是创建软件和系统的最佳结合。
- en: Space and time complexity are given as the function *O(f(n))* which for n equal
    the size of the input is the asymptotic space or time required as n grows to infinity.
    Important complexity classes for *f(n)* include *ln(n)*, *n*, *n ln(n)*, *n^e*,
    and *e^n*. As graphing these functions clearly shows, as *n* gets bigger *O(ln(n))*
    is ever so much smaller than *O(n)* and *O(n ln(n))*, which are ever so much smaller
    than *O(n^e)* and *O(e^n)*. As Sean Parent puts it, for achievable n all complexity
    classes amount to near-constant, near-linear, or near-infinite.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 空间和时间复杂度被表示为函数*O(f(n))*，对于n等于输入大小，随着n趋向无穷大，所需的渐近空间或时间。对于*f(n)*的重要复杂度类包括*ln(n)*，*n*，*n
    ln(n)*，*n^e*和*e^n*。正如绘制这些函数清楚显示的那样，随着*n*变大，*O(ln(n))*比*O(n)*和*O(n ln(n))*要小得多，后者比*O(n^e)*和*O(e^n)*要小得多。正如Sean
    Parent所说，对于可实现的n，所有复杂度类都接近恒定、近线性或近无限。
- en: '![](cec77cd7.jpeg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](cec77cd7.jpeg)'
- en: '|  | access time | capacity |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|  | 访问时间 | 容量 |'
- en: '| --- | --- | --- |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| register | < 1 ns | 64b |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 寄存器 | < 1 ns | 64b |'
- en: '| cache line |  | 64B |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 缓存行 |  | 64B |'
- en: '| L1 cache | 1 ns | 64 KB |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| L1缓存 | 1 ns | 64 KB |'
- en: '| L2 cache | 4 ns | 8 MB |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| L2缓存 | 4 ns | 8 MB |'
- en: '| RAM | 20 ns | 32 GB |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| RAM | 20 ns | 32 GB |'
- en: '| disk | 10 ms | 10 TB |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 磁盘 | 10 ms | 10 TB |'
- en: '| LAN | 20 ms | > 1 PB |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 局域网 | 20 ms | > 1 PB |'
- en: '| internet | 100 ms | > 1 ZB |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 互联网 | 100 ms | > 1 ZB |'
- en: Complexity analysis is in terms of an abstract machine, but software runs on
    real machines. Modern computer systems are organized as hierarchies of physical
    and virtual machines, including language runtimes, operating systems, CPUs, cache
    memory, random-access memory, disk drives, and networks. The first table shows
    the limits on random access time and storage capacity for a typical networked
    server.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂度分析是基于一个抽象机器，但软件运行在真实机器上。现代计算机系统组织为物理和虚拟机器的层次结构，包括语言运行时、操作系统、CPU、缓存内存、随机访问内存、磁盘驱动器和网络。第一个表显示了典型网络服务器的随机访问时间和存储容量的限制。
- en: Note that capacity and speed vary by several orders of magnitude. Caching and
    lookahead are used heavily at every level of our systems to hide this variation,
    but they only work when access is predictable. When cache misses are frequent
    the system will be thrashing. For example, to randomly inspect every byte on a
    hard drive could take 32 years. Even to randomly inspect every byte in RAM could
    take 11 minutes. Random access is not predictable. What is? That depends on the
    system, but re-accessing recently used items and accessing items sequentially
    are usually a win.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，容量和速度相差几个数量级。在我们系统的每个级别都大量使用缓存和预读来隐藏这种变化，但只有在访问可预测时才有效。当缓存未命中频繁发生时，系统将出现抖动。例如，随机检查硬盘上的每个字节可能需要32年。即使随机检查RAM中的每个字节也可能需要11分钟。随机访问是不可预测的。什么是可预测的？这取决于系统，但重新访问最近使用的项目和顺序访问项目通常是成功的。
- en: 'Algorithms and data structures vary in how effectively they use caches. For
    instance:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 算法和数据结构在如何有效利用缓存方面有所不同。例如：
- en: Linear search makes good use of lookahead, but requires *O(n)* comparisons.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线性搜索充分利用预读，但需要*O(n)*次比较。
- en: Binary search of a sorted array requires only *O(log(n))* comparisons.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对排序数组进行二分查找仅需要*O(log(n))*次比较。
- en: Search of a van Emde Boas tree is *O(log(n))* and cache-oblivious.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: van Emde Boas树的搜索是*O(log(n))*且具有缓存无关性。
- en: '| Elements | Search time (ns) |  |  |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 元素 | 搜索时间 (ns) |  |  |'
- en: '| --- | --- | --- | --- |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '|  | **linear** | **binary** | **vEB** |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|  | **线性** | **二分** | **vEB** |'
- en: '| 8 | 50 | 90 | 40 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 50 | 90 | 40 |'
- en: '| 64 | 180 | 150 | 70 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 64 | 180 | 150 | 70 |'
- en: '| 512 | 1200 | 230 | 100 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 512 | 1200 | 230 | 100 |'
- en: '| 4096 | 17000 | 320 | 160 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 4096 | 17000 | 320 | 160 |'
- en: 'How to choose? In the last analysis, by measuring. The second table shows the
    time required to search arrays of 64-bit integers via these three methods. On
    my computer:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如何选择？最终通过测量来决定。第二个表格显示了通过这三种方法搜索64位整数数组所需的时间。在我的电脑上：
- en: Linear search is competitive for small arrays, but loses exponentially for larger
    arrays.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线性搜索对于小数组是有竞争力的，但对于更大的数组来说，失去的速度是指数级的。
- en: van Emde Boas wins hands down, thanks to its predictable access pattern.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: van Emde Boas因其可预测的访问模式而轻松获胜。
- en: '*"You pays your money and you takes your choice." — [Punch](http://www.nytimes.com/1988/02/28/magazine/on-language-you-pays-yer-money.html?pagewanted=all)*'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"你出钱，你做选择。" — [Punch](http://www.nytimes.com/1988/02/28/magazine/on-language-you-pays-yer-money.html?pagewanted=all)*'
- en: By [Greg Colvin](http://programmer.97things.oreilly.com/wiki/index.php/Greg_Colvin)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[Greg Colvin](http://programmer.97things.oreilly.com/wiki/index.php/Greg_Colvin)
