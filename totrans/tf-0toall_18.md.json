["```\nimport tensorflow as tf\nimport numpy as np\ntf.set_random_seed(777)  # for reproducibility\n\nxy = np.array([[828.659973, 833.450012, 908100, 828.349976, 831.659973],\n               [823.02002, 828.070007, 1828100, 821.655029, 828.070007],\n               [819.929993, 824.400024, 1438100, 818.97998, 824.159973],\n               [816, 820.958984, 1008100, 815.48999, 819.23999],\n               [819.359985, 823, 1188100, 818.469971, 818.97998],\n               [819, 823, 1198100, 816, 820.450012],\n               [811.700012, 815.25, 1098100, 809.780029, 813.669983],\n               [809.51001, 816.659973, 1398100, 804.539978, 809.559998]])\n\nx_data = xy[:, 0:-1]\ny_data = xy[:, [-1]]\n\n# placeholders for a tensor that will be always fed.\nX = tf.placeholder(tf.float32, shape=[None, 4])\nY = tf.placeholder(tf.float32, shape=[None, 1])\n\nW = tf.Variable(tf.random_normal([4, 1]), name='weight')\nb = tf.Variable(tf.random_normal([1]), name='bias')\n\n# Hypothesis\nhypothesis = tf.matmul(X, W) + b\n\n# Simplified cost/loss function\ncost = tf.reduce_mean(tf.square(hypothesis - Y))\n\n# Minimize\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=1e-5)\ntrain = optimizer.minimize(cost)\n\n# Launch the graph in a session.\nsess = tf.Session()\n# Initializes global variables in the graph.\nsess.run(tf.global_variables_initializer())\n\nfor step in range(101):\n    cost_val, hy_val, _ = sess.run(\n        [cost, hypothesis, train], feed_dict={X: x_data, Y: y_data})\n    print(step, \"Cost: \", cost_val, \"\\nPrediction:\\n\", hy_val)\n\n'''\n0 Cost:  2.45533e+12\nPrediction:\n [[-1104436.375]\n [-2224342.75 ]\n [-1749606.75 ]\n [-1226179.375]\n [-1445287.125]\n [-1457459.5  ]\n [-1335740.5  ]\n [-1700924.625]]\n1 Cost:  2.69762e+27\nPrediction:\n [[  3.66371490e+13]\n [  7.37543360e+13]\n [  5.80198785e+13]\n [  4.06716290e+13]\n [  4.79336847e+13]\n [  4.83371348e+13]\n [  4.43026590e+13]\n [  5.64060907e+13]]\n2 Cost:  inf\nPrediction:\n [[ -1.21438790e+21]\n [ -2.44468702e+21]\n [ -1.92314724e+21]\n [ -1.34811610e+21]\n [ -1.58882674e+21]\n [ -1.60219962e+21]\n [ -1.46847142e+21]\n [ -1.86965602e+21]]\n3 Cost:  inf\nPrediction:\n [[  4.02525216e+28]\n [  8.10324465e+28]\n [  6.37453079e+28]\n [  4.46851237e+28]\n [  5.26638074e+28]\n [  5.31070676e+28]\n [  4.86744608e+28]\n [  6.19722623e+28]]\n4 Cost:  inf\nPrediction:\n [[ -1.33422428e+36]\n [ -2.68593010e+36]\n [ -2.11292430e+36]\n [ -1.48114879e+36]\n [ -1.74561303e+36]\n [ -1.76030542e+36]\n [ -1.61338091e+36]\n [ -2.05415459e+36]]\n5 Cost:  inf\nPrediction:\n [[ inf]\n [ inf]\n [ inf]\n [ inf]\n [ inf]\n [ inf]\n [ inf]\n [ inf]]\n6 Cost:  nan\nPrediction:\n [[ nan]\n [ nan]\n [ nan]\n [ nan]\n [ nan]\n [ nan]\n [ nan]\n [ nan]]\n''' \n```"]