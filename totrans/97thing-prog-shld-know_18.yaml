- en: Continuous Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We live in interesting times. As development gets distributed across the globe,
    you learn there are lots of people capable of doing your job. You need to keep
    learning to stay marketable. Otherwise, you'll become a dinosaur, stuck in the
    same job until, one day, you'll no longer be needed or your job gets outsourced
    to some cheaper resource.
  prefs: []
  type: TYPE_NORMAL
- en: So what do you do about it? Some employers are generous enough to provide training
    to broaden your skill set. Others may not be able to spare the time or money for
    any training at all. To play it safe, you need to take responsibility for your
    own education.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a list of ways to keep you learning. Many of these can be found on
    the Internet for free:'
  prefs: []
  type: TYPE_NORMAL
- en: Read books, magazines, blogs, twitter feeds, and web sites. If you want to go
    deeper into a subject, consider joining a mailing list or newsgroup.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you really want to get immersed in a technology, get hands on — write some
    code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always try to work with a mentor, as being the top guy can hinder your education.
    Although you can learn something from anybody, you can learn a whole lot more
    from someone smarter or more experienced than you. If you can't find a mentor,
    consider moving on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use virtual mentors. Find authors and developers on the web who you really like
    and read everything they write. Subscribe to their blogs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get to know the frameworks and libraries you use. Knowing how something works
    makes you know how to use it better. If they're open source, you're really in
    luck. Use the debugger to step through the code to see what's going on under the
    hood. You'll get to see code written and reviewed by some really smart people.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whenever you make a mistake, fix a bug, or run into a problem, try to really
    understand what happened. It's likely that somebody else ran into the same problem
    and posted it somewhere on the web. Google is really useful here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A really good way to learn something is to teach or speak about it. When people
    are going to listen to you and ask you questions, you'll be highly motivated to
    learn. Try a lunch-n-learn at work, a user group, or a local conference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join or start a study group (à la patterns community) or a local user group
    for a language, technology, or discipline you are interested in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to conferences. And if you can't go, many conferences put their talks online
    for free.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Long commute? Listen to podcasts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ever run a static analysis tool over the code base or look at the warnings in
    your IDE? Understand what they're reporting and why.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow the advice of [The Pragmatic Programmers](http://www.pragprog.com/titles/tpp/the-pragmatic-programmer)
    and learn a new language every year. At least learn a new technology or tool.
    Branching out gives you new ideas you can use in your current technology stack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not everything you learn has to be about technology. Learn the domain you're
    working in so you can better understand the requirements and help solve the business
    problem. Learning how to be more productive — how to work better — is another
    good option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go back to school.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It would be nice to have the capability that Neo had in The Matrix, and simply
    download the information we needed into our brains. But we don't, so it will take
    a time commitment. You don't have to spend every waking hour learning. A little
    time, say each week, is better than nothing. There is (or should be) a life outside
    of work.
  prefs: []
  type: TYPE_NORMAL
- en: Technology changes fast. Don't get left behind.
  prefs: []
  type: TYPE_NORMAL
- en: by [Clint Shank](http://programmer.97things.oreilly.com/wiki/index.php/Clint_Shank)
  prefs: []
  type: TYPE_NORMAL
