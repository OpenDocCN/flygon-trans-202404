- en: 型定義ファイル (.d.ts)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/reference/declaration-file](https://typescriptbook.jp/reference/declaration-file)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 自身のプロジェクトでTypeScriptでコーディングする場合は型を宣言することにより、IDEやエディターの補完機能やコードチェックを行えます。しかし外部のパッケージ(npm)を利用する場合は型定義ファイルが含まれているとは限りません。
  prefs: []
  type: TYPE_NORMAL
- en: 型定義ファイルとは[​](#型定義ファイルとは "型定義ファイルとは への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 型定義ファイルとはアクセス可能な宣言を記述したファイルです。拡張子は`.d.ts`です。
  prefs: []
  type: TYPE_NORMAL
- en: 型定義ファイルは主にパッケージを配布するために作成されます。TypeScriptはJavaScriptにコンパイルされるときに型情報は無くなってしまいます。そのままJavaScriptパッケージを利用すると型定義の恩恵を得ることができません。しかし型定義ファイルを同梱することにより補完やコードチェックとして利用することができます。
  prefs: []
  type: TYPE_NORMAL
- en: 残念なことにnpmに公開されているすべてのパッケージに必ずしも定義ファイルが存在するとは限りません。こちらに関しては**型定義ファイルの有無**にて説明します。
  prefs: []
  type: TYPE_NORMAL
- en: 型定義ファイル出力例[​](#型定義ファイル出力例 "型定義ファイル出力例 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: tscコマンドに`-d`オプションをつけてコンパイルを行うとJavaScriptと型定義ファイルを出力することができます。
  prefs: []
  type: TYPE_NORMAL
- en: TypeScriptファイル[​](#typescriptファイル "TypeScriptファイル への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 次のTypeScriptファイル(sample.ts)を`-d`オプションを付けてコンパイルしてみます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: tscコマンドに`-d`オプションを付けコンパイルを実行する。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: JavaScriptファイル[​](#javascriptファイル "JavaScriptファイル への直接リンク")
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: sample.tsではInterfaceを使っていますが、JavaScriptにはInterfaceの概念がないため関数のみになりました。また引数の型情報もなくなります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`d.ts`ファイル[​](#dtsファイル "dtsファイル への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 定義情報のみ記載されたファイルが出力されます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 型定義ファイルの有無[​](#型定義ファイルの有無 "型定義ファイルの有無 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 型定義ファイルはパッケージ開発者またはボランティアにより作成されています。
  prefs: []
  type: TYPE_NORMAL
- en: 型定義ファイル有り
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScriptで書かれたパッケージ
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScriptで書かれたパッケージだが`.d.ts`ファイルを同梱している
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 型定義ファイル有りだが別途インストールが必要
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScriptで書かれたパッケージだが、 DefinitelyTypedに登録されている
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 型定義ファイル無し
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScriptで書かれたパッケージで型定義ファイルが存在しない
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 型定義ファイル有り[​](#型定義ファイル有り "型定義ファイル有り への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NPMのパッケージの紹介ページを見るとパッケージ名称の右にTSのアイコンが表示されている場合があります。これは型定義ファイルが存在することを示しています。
  prefs: []
  type: TYPE_NORMAL
- en: これは、パッケージ開発者がTypeScriptで開発しているか、JavaScriptで開発しているが型定義ファイルを同梱していることを示しています。型定義ファイルが含まれているパッケージの場合は特別な作業は必要ありません。
  prefs: []
  type: TYPE_NORMAL
- en: 例としてdate libraryの[date-fns](https://date-fns.org/)はJavaScriptで構築されていますが、`typings.d.ts`を同封しています。そのままinstallを行うだけで定義ファイルの恩恵を受けられます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 型定義ファイル有りの場合は、設定なく型情報を参照することができます。
  prefs: []
  type: TYPE_NORMAL
- en: 型定義ファイル有りだが別途インストールが必要[​](#型定義ファイル有りだが別途インストールが必要 "型定義ファイル有りだが別途インストールが必要 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NPMのパッケージの紹介ページを見るとパッケージ名称の右にDTのアイコンが表示されている場合があります。これは型定義ファイルがこのパッケージ自身には含まれていないが、[DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped)に登録されていることを示しています。
  prefs: []
  type: TYPE_NORMAL
- en: この場合は、パッケージをインストールした後に別途型定義ファイルをインストールする必要があります。定義ファイルのインストールも`npm`コマンドを利用します。
  prefs: []
  type: TYPE_NORMAL
- en: 例として[Express](https://expressjs.com/)はJavaScriptで構築されていますが、型定義ファイルは`@types/express`というパッケージとして別途インストールする必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: '[Express](https://expressjs.com/)本体と定義ファイルのインストール例は次のようになります。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 型定義ファイル無し[​](#型定義ファイル無し "型定義ファイル無し への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 型定義ファイルがないライブラリも存在します。その場合は
  prefs: []
  type: TYPE_NORMAL
- en: '`any`で妥協する'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 型定義ファイルを作る
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 型定義ファイルの存在しないライブラリも利用することが可能ですが暗黙的に`any`型になります。また自身で作成しDefinitelyTypedに公開することもできます。
  prefs: []
  type: TYPE_NORMAL
- en: '[コントリビュート（貢献）する方法 | Definitely Typed](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.ja.md#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AA%E3%83%93%E3%83%A5%E3%83%BC%E3%83%88%E8%B2%A2%E7%8C%AE%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95)'
  prefs: []
  type: TYPE_NORMAL
- en: 型定義ファイルで登場するキーワード[​](#型定義ファイルで登場するキーワード "型定義ファイルで登場するキーワード への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ここでは型定義ファイルを読めるようになるために、型定義ファイルでよく利用されるキーワードを紹介します。
  prefs: []
  type: TYPE_NORMAL
- en: declare[​](#declare "declare への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`declare`キーワードを使うことでTypeScriptに変数、関数、クラスなどがJavaScript内に「存在する」ことを伝えることができます。これを「アンビエント宣言」と呼びます。'
  prefs: []
  type: TYPE_NORMAL
- en: 次のファイルがJavaScriptライブラリとして読み込まれており、グローバル関数として`hello`が使える状態だとします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: この状態でTypeScriptで`hello`関数を呼び出すと型エラーが発生します。これは、TypeScriptが`hello`関数が存在することを知らないためです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`declare`を利用してアンビエント宣言をすることで、TypeScriptにJavaScript内のどこかに`hello`関数が「存在する」ことを宣言することができます。これによりTypeScriptが`hello`関数を認識できるようになります。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 実際のモジュールの型定義ファイルの例として`jest`の型定義ファイルを見てみましょう。`beforeAll`などの関数が型定義ファイル内でアンビエント宣言されているのが確認できます。これによりモジュールの読み込みをしなくても、TypeScriptが`beforeAll`を関数として認識することができます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: namespace[​](#namespace "namespace への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`namespace`キーワードを使うことで名前空間を定義することができます。'
  prefs: []
  type: TYPE_NORMAL
- en: 名前空間を定義することで、型名の衝突を避けることができます。
  prefs: []
  type: TYPE_NORMAL
- en: '`Element`という型をライブラリの型として定義してライブラリ利用者が参照できるようにしたいと考えみます。この型はTypeScriptの`lib.dom.d.ts`にすでに定義されているため、そのまま同じグローバルな空間に定義をすると名前が衝突してしまいます。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 次のコードは`namespace`を使わずにライブラリ独自の型として`Element`を定義している例です。TypeScriptでは同じインターフェースが定義された場合は宣言のマージが発生するため、`lib.dom.d.ts`で定義されている型とマージされるため、`attributes`プロパティなど複数プロパティの指定を求められてしまいます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 名前空間を定義することで衝突を避けてライブラリ独自の型を定義をすることができます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Reactの型定義ファイルでは、次のように`namespace JSX`で名前空間が定義されて`Element`の型が定義がされています。
  prefs: []
  type: TYPE_NORMAL
- en: '`declare global` と `declare namespace`の違いについて'
  prefs: []
  type: TYPE_NORMAL
- en: 型定義ファイルでは同じ振る舞いをするため違いはない。`declare global`と記述をすることで、グローバルスコープに名前空間を定義するということを開発者の意図として明示できる？
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: module[​](#module "module への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScript1.5以前では、`module`キーワードが「内部モジュール（名前空間）」を定義するために使用されていました。これは現在の`namespace`の機能と同等です。しかし、この名前がESModuleの「外部モジュール」の定義とキーワード名が重複し、混乱を招いてしまう可能性があったため、TypeScript1.5から「内部モジュール」は「名前空間」と呼ばれるように変更され、`namespace`キーワードが新たに導入されました。
  prefs: []
  type: TYPE_NORMAL
- en: 現在では、`module`キーワードは非推奨となっているため、`namespace`キーワードの使用をするようにしてください。
  prefs: []
  type: TYPE_NORMAL
- en: トリプルスラッシュ・ディレクティブ[​](#トリプルスラッシュディレクティブ "トリプルスラッシュ・ディレクティブ への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 型定義ファイルの先頭で見かける3つのスラッシュ(`///`)ではじめるコメント行をトリプルスラッシュ・ディレクティブと呼びます。これは、TypeScript独自の形式でコンパイラに対して指示を出す機能を持っています。
  prefs: []
  type: TYPE_NORMAL
- en: トリプルスラッシュ・ディレクティブにはいくつかの種類が存在しており、ここでは多くの型定義ファイルで目にする代表的なディレクティブを2つ紹介します。
  prefs: []
  type: TYPE_NORMAL
- en: '`/// <reference path="..." />` (参照ディレクティブ)[​](#-reference-path--参照ディレクティブ "-reference-path--参照ディレクティブ
    への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 参照ディレクティブはコンパイラに型定義ファイル間の依存関係を宣言でき、`path`で指定された型定義ファイルを追加でコンパイル時に読み込むように指示を与えることができます。たとえば、次の例では`index.d.ts`をコンパイラが読み込む際に追加で`global.d.ts`を読み込みます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '`/// <reference types="..." />` (型ディレクティブ)[​](#-reference-types--型ディレクティブ "-reference-types--型ディレクティブ
    への直接リンク")'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 型ディレクティブはnpmパッケージへの依存関係を宣言できます。宣言されたパッケージの依存を解決する処理はimport文でのパッケージの解決と似た処理のため、型ディレクティブは型のimportのようなものとも考えられます。
  prefs: []
  type: TYPE_NORMAL
- en: 次の例はexpressの型定義ファイルの一部です。型ディレクティブで`serve-static`パッケージの型定義ファイルに依存していることが示されています。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
