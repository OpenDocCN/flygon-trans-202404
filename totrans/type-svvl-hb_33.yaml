- en: 型定義ファイル (.d.ts)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型定义文件 (.d.ts)
- en: 原文：[https://typescriptbook.jp/reference/declaration-file](https://typescriptbook.jp/reference/declaration-file)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/reference/declaration-file](https://typescriptbook.jp/reference/declaration-file)
- en: 自身のプロジェクトでTypeScriptでコーディングする場合は型を宣言することにより、IDEやエディターの補完機能やコードチェックを行えます。しかし外部のパッケージ(npm)を利用する場合は型定義ファイルが含まれているとは限りません。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在自己的项目中使用TypeScript编码时，通过声明类型可以使用IDE或编辑器的自动补全功能和代码检查。但是在使用外部包（npm）时，并不一定包含类型定义文件。
- en: 型定義ファイルとは[​](#型定義ファイルとは "型定義ファイルとは への直接リンク")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是类型定义文件[​](#型定義ファイルとは "型定義ファイルとは への直接リンク")
- en: 型定義ファイルとはアクセス可能な宣言を記述したファイルです。拡張子は`.d.ts`です。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 类型定义文件是包含可访问声明的文件。其扩展名为`.d.ts`。
- en: 型定義ファイルは主にパッケージを配布するために作成されます。TypeScriptはJavaScriptにコンパイルされるときに型情報は無くなってしまいます。そのままJavaScriptパッケージを利用すると型定義の恩恵を得ることができません。しかし型定義ファイルを同梱することにより補完やコードチェックとして利用することができます。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 类型定义文件主要用于分发包。当TypeScript编译为JavaScript时，类型信息会丢失。直接使用JavaScript包时无法享受类型定义的好处。但通过包含类型定义文件，可以作为补充和代码检查使用。
- en: 残念なことにnpmに公開されているすべてのパッケージに必ずしも定義ファイルが存在するとは限りません。こちらに関しては**型定義ファイルの有無**にて説明します。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，并非所有发布在npm上的包都一定有类型定义文件。关于此问题，将在**类型定义文件的有无**中进行说明。
- en: 型定義ファイル出力例[​](#型定義ファイル出力例 "型定義ファイル出力例 への直接リンク")
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型定义文件示例[​](#型定義ファイル出力例 "型定義ファイル出力例 への直接リンク")
- en: tscコマンドに`-d`オプションをつけてコンパイルを行うとJavaScriptと型定義ファイルを出力することができます。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tsc`命令并带上`-d`选项进行编译，即可输出JavaScript和类型定义文件。
- en: TypeScriptファイル[​](#typescriptファイル "TypeScriptファイル への直接リンク")
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: TypeScript文件[​](#typescriptファイル "TypeScriptファイル への直接リンク")
- en: 次のTypeScriptファイル(sample.ts)を`-d`オプションを付けてコンパイルしてみます。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用带有`-d`选项的`tsc`命令编译下面的TypeScript文件（sample.ts）。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: tscコマンドに`-d`オプションを付けコンパイルを実行する。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tsc`命令并带上`-d`选项进行编译。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: JavaScriptファイル[​](#javascriptファイル "JavaScriptファイル への直接リンク")
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: JavaScript文件[​](#javascriptファイル "JavaScriptファイル への直接リンク")
- en: sample.tsではInterfaceを使っていますが、JavaScriptにはInterfaceの概念がないため関数のみになりました。また引数の型情報もなくなります。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在`sample.ts`中使用了接口，但由于JavaScript中没有接口的概念，因此仅限于函数。同时，参数的类型信息也会丢失。
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`d.ts`ファイル[​](#dtsファイル "dtsファイル への直接リンク")'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`d.ts`文件[​](#dtsファイル "dtsファイル への直接リンク")'
- en: 定義情報のみ記載されたファイルが出力されます。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 仅包含定义信息的文件将被输出。
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 型定義ファイルの有無[​](#型定義ファイルの有無 "型定義ファイルの有無 への直接リンク")
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型定义文件的有无[​](#型定義ファイルの有無 "型定義ファイルの有無 への直接リンク")
- en: 型定義ファイルはパッケージ開発者またはボランティアにより作成されています。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 类型定义文件由包开发者或志愿者创建。
- en: 型定義ファイル有り
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有类型定义文件
- en: TypeScriptで書かれたパッケージ
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TypeScript编写的包
- en: JavaScriptで書かれたパッケージだが`.d.ts`ファイルを同梱している
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript编写的包，但包含`.d.ts`文件
- en: 型定義ファイル有りだが別途インストールが必要
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有类型定义文件但需要单独安装
- en: JavaScriptで書かれたパッケージだが、 DefinitelyTypedに登録されている
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript编写的包，但已在DefinitelyTyped中注册
- en: 型定義ファイル無し
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无类型定义文件
- en: JavaScriptで書かれたパッケージで型定義ファイルが存在しない
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript编写的包中不存在类型定义文件
- en: 型定義ファイル有り[​](#型定義ファイル有り "型定義ファイル有り への直接リンク")
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有类型定义文件[​](#型定義ファイル有り "型定義ファイル有り への直接リンク")
- en: NPMのパッケージの紹介ページを見るとパッケージ名称の右にTSのアイコンが表示されている場合があります。これは型定義ファイルが存在することを示しています。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当查看NPM包的介绍页面时，如果包名称右侧显示有TS图标，则表示存在类型定义文件。
- en: これは、パッケージ開発者がTypeScriptで開発しているか、JavaScriptで開発しているが型定義ファイルを同梱していることを示しています。型定義ファイルが含まれているパッケージの場合は特別な作業は必要ありません。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示包开发者正在使用TypeScript开发，或者使用JavaScript开发但包含了类型定义文件。对于包含类型定义文件的包，无需特殊操作。
- en: 例としてdate libraryの[date-fns](https://date-fns.org/)はJavaScriptで構築されていますが、`typings.d.ts`を同封しています。そのままinstallを行うだけで定義ファイルの恩恵を受けられます。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，日期库[date-fns](https://date-fns.org/)是用JavaScript构建的，但附带了`typings.d.ts`。只需安装即可享受定义文件的好处。
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 型定義ファイル有りの場合は、設定なく型情報を参照することができます。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在类型定义文件，则无需额外配置即可引用类型信息。
- en: 型定義ファイル有りだが別途インストールが必要[​](#型定義ファイル有りだが別途インストールが必要 "型定義ファイル有りだが別途インストールが必要 への直接リンク")
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有类型定义文件但需要单独安装[​](#型定義ファイル有りだが別途インストールが必要 "型定義ファイル有りだが別途インストールが必要 への直接リンク")
- en: NPMのパッケージの紹介ページを見るとパッケージ名称の右にDTのアイコンが表示されている場合があります。これは型定義ファイルがこのパッケージ自身には含まれていないが、[DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped)に登録されていることを示しています。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当查看NPM包��介绍页面时，如果包名称右侧显示有DT图标，则表示该包本身不包含类型定义文件，但已在[DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped)中注册。
- en: この場合は、パッケージをインストールした後に別途型定義ファイルをインストールする必要があります。定義ファイルのインストールも`npm`コマンドを利用します。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您需要在安装包后单独安装类型定义文件。安装定义文件也使用`npm`命令。
- en: 例として[Express](https://expressjs.com/)はJavaScriptで構築されていますが、型定義ファイルは`@types/express`というパッケージとして別途インストールする必要があります。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[Express](https://expressjs.com/)是用JavaScript构建的，但类型定义文件需要单独安装`@types/express`包。
- en: '[Express](https://expressjs.com/)本体と定義ファイルのインストール例は次のようになります。'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[Express](https://expressjs.com/)的安装示例如下。'
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 型定義ファイル無し[​](#型定義ファイル無し "型定義ファイル無し への直接リンク")
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无类型定义文件[​](#型定義ファイル無し "型定義ファイル無し への直接リンク")
- en: 型定義ファイルがないライブラリも存在します。その場合は
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 也存在没有类型定义文件的库。在这种情况下
- en: '`any`で妥協する'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`any`进行妥协
- en: 型定義ファイルを作る
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建类型定义文件
- en: 型定義ファイルの存在しないライブラリも利用することが可能ですが暗黙的に`any`型になります。また自身で作成しDefinitelyTypedに公開することもできます。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有类型定义文件，也可以使用不明确的`any`类型。同时，您也可以自行创建并发布到DefinitelyTyped。
- en: '[コントリビュート（貢献）する方法 | Definitely Typed](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.ja.md#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AA%E3%83%93%E3%83%A5%E3%83%BC%E3%83%88%E8%B2%A2%E7%8C%AE%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[贡献方法 | Definitely Typed](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.ja.md#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AA%E3%83%93%E3%83%A5%E3%83%BC%E3%83%88%E8%B2%A2%E7%8C%AE%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95)'
- en: 型定義ファイルで登場するキーワード[​](#型定義ファイルで登場するキーワード "型定義ファイルで登場するキーワード への直接リンク")
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 型定义文件中出现的关键字[​](#型定義ファイルで登場するキーワード "型定義ファイルで登場するキーワード への直接リンク")
- en: ここでは型定義ファイルを読めるようになるために、型定義ファイルでよく利用されるキーワードを紹介します。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够阅读类型定义文件，我们将介绍在类型定义文件中常用的关键字。
- en: declare[​](#declare "declare への直接リンク")
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声明[​](#declare "declare への直接リンク")
- en: '`declare`キーワードを使うことでTypeScriptに変数、関数、クラスなどがJavaScript内に「存在する」ことを伝えることができます。これを「アンビエント宣言」と呼びます。'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`declare`关键字可以告诉TypeScript变量、函数、类等在JavaScript中“存在”。这被称为“环境声明”。
- en: 次のファイルがJavaScriptライブラリとして読み込まれており、グローバル関数として`hello`が使える状態だとします。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设下面的文件作为JavaScript库被加载，并且全局函数`hello`可用。
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: この状態でTypeScriptで`hello`関数を呼び出すと型エラーが発生します。これは、TypeScriptが`hello`関数が存在することを知らないためです。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: この状態でTypeScriptで`hello`関数を呼び出すと型エラーが発生します。これは、TypeScriptが`hello`関数が存在することを知らないためです。
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`declare`を利用してアンビエント宣言をすることで、TypeScriptにJavaScript内のどこかに`hello`関数が「存在する」ことを宣言することができます。これによりTypeScriptが`hello`関数を認識できるようになります。'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`declare`を利用してアンビエント宣言をすることで、TypeScriptにJavaScript内のどこかに`hello`関数が「存在する」ことを宣言することができます。これによりTypeScriptが`hello`関数を認識できるようになります。'
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 実際のモジュールの型定義ファイルの例として`jest`の型定義ファイルを見てみましょう。`beforeAll`などの関数が型定義ファイル内でアンビエント宣言されているのが確認できます。これによりモジュールの読み込みをしなくても、TypeScriptが`beforeAll`を関数として認識することができます。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 実際のモジュールの型定義ファイルの例として`jest`の型定義ファイルを見てみましょう。`beforeAll`などの関数が型定義ファイル内でアンビエント宣言されているのが確認できます。これによりモジュールの読み込みをしなくても、TypeScriptが`beforeAll`を関数として認識することができます。
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: namespace[​](#namespace "namespace への直接リンク")
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: namespace[​](#namespace "namespace への直接リンク")
- en: '`namespace`キーワードを使うことで名前空間を定義することができます。'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`namespace`キーワードを使うことで名前空間を定義することができます。'
- en: 名前空間を定義することで、型名の衝突を避けることができます。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 名前空間を定義することで、型名の衝突を避けることができます。
- en: '`Element`という型をライブラリの型として定義してライブラリ利用者が参照できるようにしたいと考えみます。この型はTypeScriptの`lib.dom.d.ts`にすでに定義されているため、そのまま同じグローバルな空間に定義をすると名前が衝突してしまいます。'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`Element`という型をライブラリの型として定義してライブラリ利用者が参照できるようにしたいと考えみます。この型はTypeScriptの`lib.dom.d.ts`にすでに定義されているため、そのまま同じグローバルな空間に定義をすると名前が衝突してしまいます。'
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 次のコードは`namespace`を使わずにライブラリ独自の型として`Element`を定義している例です。TypeScriptでは同じインターフェースが定義された場合は宣言のマージが発生するため、`lib.dom.d.ts`で定義されている型とマージされるため、`attributes`プロパティなど複数プロパティの指定を求められてしまいます。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードは`namespace`を使わずにライブラリ独自の型として`Element`を定義している例です。TypeScriptでは同じインターフェースが定義された場合は宣言のマージが発生するため、`lib.dom.d.ts`で定義されている型とマージされるため、`attributes`プロパティなど複数プロパティの指定を求められてしまいます。
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 名前空間を定義することで衝突を避けてライブラリ独自の型を定義をすることができます。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 名前空間を定義することで衝突を避けてライブラリ独自の型を定義をすることができます。
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Reactの型定義ファイルでは、次のように`namespace JSX`で名前空間が定義されて`Element`の型が定義がされています。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Reactの型定義ファイルでは、次のように`namespace JSX`で名前空間が定義されて`Element`の型が定義がされています。
- en: '`declare global` と `declare namespace`の違いについて'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`declare global` と `declare namespace`の違いについて'
- en: 型定義ファイルでは同じ振る舞いをするため違いはない。`declare global`と記述をすることで、グローバルスコープに名前空間を定義するということを開発者の意図として明示できる？
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 型定義ファイルでは同じ振る舞いをするため違いはない。`declare global`と記述をすることで、グローバルスコープに名前空間を定義するということを開発者の意図として明示できる？
- en: '[PRE26]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: module[​](#module "module への直接リンク")
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: module[​](#module "module への直接リンク")
- en: TypeScript1.5以前では、`module`キーワードが「内部モジュール（名前空間）」を定義するために使用されていました。これは現在の`namespace`の機能と同等です。しかし、この名前がESModuleの「外部モジュール」の定義とキーワード名が重複し、混乱を招いてしまう可能性があったため、TypeScript1.5から「内部モジュール」は「名前空間」と呼ばれるように変更され、`namespace`キーワードが新たに導入されました。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript1.5以前では、`module`キーワードが「内部モジュール（名前空間）」を定義するために使用されていました。これは現在の`namespace`の機能と同等です。しかし、この名前がESModuleの「外部モジュール」の定義とキーワード名が重複し、混乱を招いてしまう可能性があったため、TypeScript1.5から「内部モジュール」は「名前空間」と呼ばれるように変更され、`namespace`キーワードが新たに導入されました。
- en: 現在では、`module`キーワードは非推奨となっているため、`namespace`キーワードの使用をするようにしてください。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 現在では、`module`キーワードは非推奨となっているため、`namespace`キーワードの使用をするようにしてください。
- en: トリプルスラッシュ・ディレクティブ[​](#トリプルスラッシュディレクティブ "トリプルスラッシュ・ディレクティブ への直接リンク")
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: トリプルスラッシュ・ディレクティブ[​](#トリプルスラッシュディレクティブ "トリプルスラッシュ・ディレクティブ への直接リンク")
- en: 型定義ファイルの先頭で見かける3つのスラッシュ(`///`)ではじめるコメント行をトリプルスラッシュ・ディレクティブと呼びます。これは、TypeScript独自の形式でコンパイラに対して指示を出す機能を持っています。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 型定義ファイルの先頭で見かける3つのスラッシュ(`///`)ではじめるコメント行をトリプルスラッシュ・ディレクティブと呼びます。これは、TypeScript独自の形式でコンパイラに対して指示を出す機能を持っています。
- en: トリプルスラッシュ・ディレクティブにはいくつかの種類が存在しており、ここでは多くの型定義ファイルで目にする代表的なディレクティブを2つ紹介します。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: トリプルスラッシュ・ディレクティブにはいくつかの種類が存在しており、ここでは多くの型定義ファイルで目にする代表的なディレクティブを2つ紹介します。
- en: '`/// <reference path="..." />` (参照ディレクティブ)[​](#-reference-path--参照ディレクティブ "-reference-path--参照ディレクティブ
    への直接リンク")'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`/// <reference path="..." />` (参照ディレクティブ)[​](#-reference-path--参照ディレクティブ "-reference-path--参照ディレクティブ
    への直接リンク")'
- en: 参照ディレクティブはコンパイラに型定義ファイル間の依存関係を宣言でき、`path`で指定された型定義ファイルを追加でコンパイル時に読み込むように指示を与えることができます。たとえば、次の例では`index.d.ts`をコンパイラが読み込む際に追加で`global.d.ts`を読み込みます。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 参照ディレクティブはコンパイラに型定義ファイル間の依存関係を宣言でき、`path`で指定された型定義ファイルを追加でコンパイル時に読み込むように指示を与えることができます。たとえば、次の例では`index.d.ts`をコンパイラが読み込む際に追加で`global.d.ts`を読み込みます。
- en: '[PRE28]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`/// <reference types="..." />` (型ディレクティブ)[​](#-reference-types--型ディレクティブ "-reference-types--型ディレクティブ
    への直接リンク")'
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`/// <reference types="..." />` (型ディレクティブ)[​](#-reference-types--型ディレクティブ "-reference-types--型ディレクティブ
    への直接リンク")'
- en: 型ディレクティブはnpmパッケージへの依存関係を宣言できます。宣言されたパッケージの依存を解決する処理はimport文でのパッケージの解決と似た処理のため、型ディレクティブは型のimportのようなものとも考えられます。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 型ディレクティブはnpmパッケージへの依存関係を宣言できます。宣言されたパッケージの依存を解決する処理はimport文でのパッケージの解決と似た処理のため、型ディレクティブは型のimportのようなものとも考えられます。
- en: 次の例はexpressの型定義ファイルの一部です。型ディレクティブで`serve-static`パッケージの型定義ファイルに依存していることが示されています。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 次の例はexpressの型定義ファイルの一部です。型ディレクティブで`serve-static`パッケージの型定義ファイルに依存していることが示されています。
- en: '[PRE30]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
