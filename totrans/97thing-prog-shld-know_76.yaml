- en: The Single Responsibility Principle
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单一责任原则
- en: The Single Responsibility Principle
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单一责任原则
- en: 'One of the most foundational principles of good design is:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 良好设计的最基本原则之一是：
- en: Gather together those things that change for the same reason, and separate those
    things that change for different reasons.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将因相同原因而改变的事物聚集在一起，并将因不同原因而改变的事物分开。
- en: 'This principle is often known as the *Single Responsibility Principle* or SRP.
    In short, it says that a subsystem, module, class, or even a function, should
    not have more than one reason to change. The classic example is a class that has
    methods that deal with business rules, reports, and database:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则通常被称为*单一责任原则*或 SRP。简而言之，它指出一个子系统、模块、类，甚至一个函数，不应该有多个改变的理由。一个经典的例子是一个具有处理业务规则、报告和数据库的方法的类：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Some programmers might think that putting these three functions together in
    the same class is perfectly appropriate. After all, classes are supposed to be
    collections of functions that operate on common variables. However, the problem
    is that the three functions change for entirely different reasons. The `calculatePay`
    function will change whenever the business rules for calculating pay change. The
    `reportHours` function will change whenever someone wants a different format for
    the report. The save function will change whenever the DBAs change the database
    schema. These three reasons to change combine to make `Employee` very volatile.
    It will change for any of those reasons. More importantly, any classes that depend
    upon `Employee` will be affected by those changes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一些程序员可能认为将这三个函数放在同一个类中是完全合适的。毕竟，类应该是对共同变量进行操作的函数集合。然而，问题在于这三个函数因完全不同的原因而改变。`calculatePay`
    函数会在计算支付的业务规则更改时更改。`reportHours` 函数会在有人想要报告的不同格式时更改。保存函数会在数据库管理员更改数据库架构时更改。这三个改变的原因结合在一起使
    `Employee` 非常不稳定。它会因为任何这些原因而改变。更重要的是，任何依赖于 `Employee` 的类都会受到这些更改的影响。
- en: Good system design means that we separate the system into components that can
    be independently deployed. Independent deployment means that if we change one
    component we do not have to redeploy any of the others. However, if `Employee`
    is heavily used by many other classes in other components, then every change to
    Employee is likely to cause the other components to be redeployed; thus negating
    a major benefit of component design (or SOA if you prefer the more trendy name).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的系统设计意味着我们将系统分成可以独立部署的组件。独立部署意味着如果我们改变一个组件，我们不必重新部署其他组件。然而，如果 `Employee` 被其他组件中的许多其他类频繁使用，那么对
    Employee 的每一次更改很可能导致其他组件被重新部署；从而抵消了组件设计（或者如果您更喜欢更时尚的名称，可以说是 SOA）的一个主要优点。
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The simple partitioning shown above resolves the issues. Each of these classes
    can be placed in a component of its own. Or rather, all the reporting classes
    can go into the reporting component. All the database related classes can go into
    the repository component. And all the business rules can go into the business
    rule component.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上面显示的简单分区解决了这些问题。这些类中的每一个都可以放在自己的组件中。或者，所有报告类都可以放在报告组件中。所有与数据库相关的类都可以放在存储库组件中。所有业务规则可以放在业务规则组件中。
- en: The astute reader will see that there are still dependencies in the above solution.
    That `Employee` is still depended upon by the other classes. So if `Employee`
    is modified, the other classes will likely have to be recompiled and redeployed.
    Thus, `Employee` cannot be modified and then independently deployed. However,
    the other classes can be modified and independently deployed. No modification
    of one of them can force any of the others to be recompiled or redeployed. Even
    `Employee` could be independently deployed through a careful use of the *Dependency
    Inversion Principle* (DIP), but that's a topic for a [different book](http://www.amazon.com/dp/0135974445/).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 敏锐的读者会发现上面的解决方案仍然存在依赖关系。`Employee` 仍然被其他类依赖。因此，如果修改 `Employee`，其他类很可能需要重新编译和部署。因此，`Employee`
    无法进行修改然后独立部署。然而，其他类可以进行修改并独立部署。对其中任何一个进行修改都不会强制其他类重新编译或重新部署。甚至通过谨慎使用*依赖反转原则*（DIP），甚至可以独立部署
    `Employee`，但这是另一本[不同的书](http://www.amazon.com/dp/0135974445/)的话题。
- en: Careful application of the SRP, separating things that change for different
    reasons, is one if the keys to creating designs that have an independently deployable
    component structure.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细应用 SRP，将因不同原因而改变的事物分开，是创建具有独立可部署组件结构的设计的关键之一。
- en: by [Uncle Bob](http://programmer.97things.oreilly.com/wiki/index.php/Uncle_Bob)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Bob大叔](http://programmer.97things.oreilly.com/wiki/index.php/Uncle_Bob)
