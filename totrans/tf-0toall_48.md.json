["```\n# Lab 12 Character Sequence Softmax only\nimport tensorflow as tf\nimport numpy as np\ntf.set_random_seed(777)  # reproducibility\n\nsample = \" if you want you\"\nidx2char = list(set(sample))  # index -> char\nchar2idx = {c: i for i, c in enumerate(idx2char)}  # char -> idex\n\n# hyper parameters\ndic_size = len(char2idx)  # RNN input size (one hot size)\nrnn_hidden_size = len(char2idx)  # RNN output size\nnum_classes = len(char2idx)  # final output size (RNN or softmax, etc.)\nbatch_size = 1  # one sample data, one batch\nsequence_length = len(sample) - 1  # number of lstm rollings (unit #)\nlearning_rate = 0.1\n\nsample_idx = [char2idx[c] for c in sample]  # char to index\nx_data = [sample_idx[:-1]]  # X data sample (0 ~ n-1) hello: hell\ny_data = [sample_idx[1:]]   # Y label sample (1 ~ n) hello: ello\n\nX = tf.placeholder(tf.int32, [None, sequence_length])  # X data\nY = tf.placeholder(tf.int32, [None, sequence_length])  # Y label\n\n# flatten the data (ignore batches for now). No effect if the batch size is 1\nX_one_hot = tf.one_hot(X, num_classes)  # one hot: 1 -> 0 1 0 0 0 0 0 0 0 0\nX_for_softmax = tf.reshape(X_one_hot, [-1, rnn_hidden_size])\n\n# softmax layer (rnn_hidden_size -> num_classes)\nsoftmax_w = tf.get_variable(\"softmax_w\", [rnn_hidden_size, num_classes])\nsoftmax_b = tf.get_variable(\"softmax_b\", [num_classes])\noutputs = tf.matmul(X_for_softmax, softmax_w) + softmax_b\n\n# expend the data (revive the batches)\noutputs = tf.reshape(outputs, [batch_size, sequence_length, num_classes])\nweights = tf.ones([batch_size, sequence_length])\n\n# Compute sequence cost/loss\nsequence_loss = tf.contrib.seq2seq.sequence_loss(\n    logits=outputs, targets=Y, weights=weights)\nloss = tf.reduce_mean(sequence_loss)  # mean all sequence loss\ntrain = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(loss)\n\nprediction = tf.argmax(outputs, axis=2)\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    for i in range(3000):\n        l, _ = sess.run([loss, train], feed_dict={X: x_data, Y: y_data})\n        result = sess.run(prediction, feed_dict={X: x_data})\n\n        # print char using dic\n        result_str = [idx2char[c] for c in np.squeeze(result)]\n        print(i, \"loss:\", l, \"Prediction:\", ''.join(result_str))\n\n'''\n0 loss: 2.29513 Prediction: yu yny y y oyny\n1 loss: 2.10156 Prediction: yu ynu y y oynu\n2 loss: 1.92344 Prediction: yu you y u  you\n\n..\n\n2997 loss: 0.277323 Prediction: yf you yant you\n2998 loss: 0.277323 Prediction: yf you yant you\n2999 loss: 0.277323 Prediction: yf you yant you\n''' \n```"]