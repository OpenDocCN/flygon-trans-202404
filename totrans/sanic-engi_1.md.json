["```\n# \u65b0\u5efa\u4e00\u4e2apython3.6\u73af\u5883\nconda create --name python36 python=3.6\n# \u5b89\u88c5\u597d\u4e4b\u540e \u8f93\u5165\u4e0b\u9762\u547d\u4ee4\u8fdb\u5165\u540d\u4e3apython36\u7684\u73af\u5883\nsource activate python36 \n```", "```\n# \u5b89\u88c5Sanic\uff0c\u8bf7\u5148\u4f7f\u7528 source activate python36 \u8fdb\u5165\u865a\u62df\u73af\u5883\npip install sanic\n# \u5982\u679c\u4e0d\u60f3\u4f7f\u7528uvloop\u548cujson \u53ef\u4ee5\u8fd9\u6837\u5b89\u88c5\nSANIC_NO_UVLOOP=true SANIC_NO_UJSON=true pip install sanic \n```", "```\n# \u542f\u52a8Python\u89e3\u91ca\u5668\npython\n>>> import sanic\n>>> \n```", "```\n#!/usr/bin/env python\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic()\n\n@app.route(\"/\")\nasync def test(request):\n    return text('Hello World!')\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000) \n```", "```\nasync def get_news(size=10):\n    \"\"\"\n Sanic\u662f\u4e00\u4e2a\u5f02\u6b65\u6846\u67b6\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u53d1\u6325\u5b83\u7684\u6027\u80fd\uff0c\u6709\u4e9b\u64cd\u4f5c\u6700\u597d\u4e5f\u8981\u7528\u5f02\u6b65\u7684\n \u6bd4\u5982\u8fd9\u91cc\u53d1\u8d77\u8bf7\u6c42\u5c31\u5fc5\u987b\u8981\u7528\u5f02\u6b65\u8bf7\u6c42\u6846\u67b6aiohttp\n \u6240\u4ee5\u4f7f\u7528\u672c\u670d\u52a1\u7684\u65f6\u5019\u8bf7\u5148\u6267\u884c: pip install aiohttp\n \u6570\u636e\u4f7f\u7528\u7684\u662freadhub\u7f51\u7ad9\u7684api\u63a5\u53e3\n \u4e3a\u4e86\u4f7f\u8fd9\u4e2a\u6570\u636e\u83b7\u53d6\u51fd\u6570\u6b63\u5e38\u8fd0\u884c\uff0c\u6211\u4f1a\u4fdd\u6301\u66f4\u65b0\uff0c\u6240\u4ee5\u5177\u4f53\u4ee3\u7801\uff1aexamples/demo01/news.py\n \"\"\"\n    async with aiohttp.ClientSession() as client:\n        async with client.get(readhub_api, params=params, headers=headers) as response:\n            assert response.status == 200\n            text = await response.json()\n        return text \n```", "```\n@app.route(\"/\")\nasync def index(request):\n    \"\"\"\u5f53\u670d\u52a1\u7aef\u63a5\u6536\u5230\u5ba2\u6237\u7aef\u7684/\u8bf7\u6c42\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528\u6b64\u51fd\u6570\"\"\"\n    return text('Hello World!') \n```", "```\n@app.route(\"/\")\nasync def index(request):\n    # html\u9875\u9762\u6a21\u677f\n    html_tem = \"\"\"\n <div style=\"width: 80%; margin-left: 10%\">\n <p><a href=\"{href}\" target=\"_blank\">{title}</a></p>\n <p>{summary}</p>\n <p>{updated_at}</p>\n </div>\n \"\"\"\n    html_list = []\n    # \u83b7\u53d6\u6570\u636e\n    all_news = await get_news()\n    # \u751f\u6210\u5728\u6d4f\u89c8\u5668\u5c55\u793a\u7684html\u9875\u9762\n    for each_news in all_news:\n        html_list.append(html_tem.format(\n            href=each_news.get('news_info', [{}])[0].get('url', '#'),\n            title=each_news.get('title'),\n            summary=each_news.get('summary'),\n            updated_at=each_news.get('updated_at'),\n        ))\n\n    return html('<hr>'.join(html_list)) \n```", "```\npython run news.py \n```", "```\n@app.route(\"/2\")\nasync def page_2(request): \n```", "```\n@app.route(\"/<page:int>\")\n@app.route(\"/\")\nasync def index(request, page=1):\n    \"\"\"\n \u652f\u6301/\u8bf7\u6c42\u4e0e/page\u8bf7\u6c42\u65b9\u5f0f\n \u5177\u4f53\u7684\u4ee3\u7801\u903b\u8f91\u4e5f\u4f1a\u6709\u4e00\u70b9\u6539\u53d8\uff0c\u53ef\u53c2\u8003\uff1aexamples/demo01/news.py\n \"\"\" \n```", "```\npython run news.py \n```", "```\nasync def index(request, page=1): \n```", "```\n<Request: GET /> \n```", "```\n@app.route('/json')\nasync def index_json(request):\n    \"\"\"\n    \u9ed8\u8ba4\u8fd4\u56de\u4e00\u6761\u8d44\u8baf\uff0c\u6700\u591a\u5341\u6761\n    \"\"\"\n    nums = request.args.get('nums', 1)\n    # \u83b7\u53d6\u6570\u636e\n    all_news = await get_news()\n    try:\n        return json(random.sample(all_news, int(nums)))\n    except ValueError:\n        return json(all_news) \n```", "```\npython run news.py \n```", "```\nfrom sanic.response import html, json \n```", "```\nError: Requested URL /html not found \n```", "```\n@app.exception(NotFound)\ndef ignore_404s(request, exception):\n    return redirect('/') \n```", "```\ndemo02\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config.py\n\u2514\u2500\u2500 run.py \n```", "```\n#!/usr/bin/env python\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic()\n\n@app.route(\"/\")\nasync def test(request):\n    return text('Hello World!')\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000, debug=True) \n```", "```\n#!/usr/bin/env python\nfrom sanic import Sanic\nfrom sanic.response import text\nfrom config import DEBUG\n\napp = Sanic()\n\n@app.route(\"/\")\nasync def test(request):\n    return text('Hello World!')\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000, debug=DEBUG) \n```", "```\ndemo02\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dev_config.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pro_config.py\n\u2514\u2500\u2500 run.py \n```", "```\n#!/usr/bin/env python\nimport os\n\nclass Config():\n    \"\"\"\n Basic config for demo02\n \"\"\"\n    # Application config\n    TIMEZONE = 'Asia/Shanghai'\n    BASE_DIR = os.path.dirname(os.path.dirname(__file__)) \n```", "```\n# dev_config\n#!/usr/bin/env python\nfrom .config import Config\n\nclass DevConfig(Config):\n    \"\"\"\n Dev config for demo02\n \"\"\"\n\n    # Application config\n    DEBUG = True\n\n# pro_config\n#!/usr/bin/env python\nfrom .config import Config\n\nclass ProConfig(Config):\n    \"\"\"\n Pro config for demo02\n \"\"\"\n\n    # Application config\n    DEBUG = False \n```", "```\n#!/usr/bin/env python\nimport os\n\ndef load_config():\n    \"\"\"\n Load a config class\n \"\"\"\n\n    mode = os.environ.get('MODE', 'DEV')\n    try:\n        if mode == 'PRO':\n            from .pro_config import ProConfig\n            return ProConfig\n        elif mode == 'DEV':\n            from .dev_config import DevConfig\n            return DevConfig\n        else:\n            from .dev_config import DevConfig\n            return DevConfig\n    except ImportError:\n        from .config import Config\n        return Config\n\nCONFIG = load_config() \n```", "```\n#!/usr/bin/env python\nfrom sanic import Sanic\nfrom sanic.response import text\nfrom config import CONFIG\n\napp = Sanic()\napp.config.from_object(CONFIG)\n\n@app.route(\"/\")\nasync def test(request):\n    return text('Hello World!')\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000, debug=app.config['DEBUG']) \n```", "```\n# \u901a\u8fc7\u8bbe\u7f6eMODE\u7684\u503c\u8fdb\u884c\u914d\u7f6e\u6587\u4ef6\u7684\u9009\u62e9\nexport MODE=PRO \n```", "```\npro_name\n\u251c\u2500\u2500 docs            # \u9879\u76ee\u6587\u6863\u8bf4\u660e\n\u251c\u2500\u2500 src or pro_name/# \u9879\u76ee\u540d\u79f0\n\u251c\u2500\u2500 tests           # \u6d4b\u8bd5\u7528\u4f8b\n\u251c\u2500\u2500 README.md       # \u9879\u76ee\u4ecb\u7ecd\n\u2514\u2500\u2500requirements.txt # \u8be5\u9879\u76ee\u4f9d\u8d56\u7684\u7b2c\u4e09\u65b9\u5e93 \n```", "```\nsample01\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 demo.md\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 run.py\n\u251c\u2500\u2500 tests\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500requirements.txt \n```", "```\n#!/usr/bin/env python\nfrom sanic import Sanic\nfrom sanic.response import json\nfrom feedparser import parse\n\napp = Sanic()\n\n@app.route(\"/\")\nasync def index(request):\n    url = \"http://blog.howie6879.cn/atom.xml\"\n    feed = parse(url)\n    articles = feed['entries']\n    data = []\n    for article in articles:\n        data.append({\"title\": article[\"title_detail\"][\"value\"], \"link\": article[\"link\"]})\n    return json(data)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000) \n```", "```\n#!/usr/bin/env python\nfrom sanic import Sanic\nfrom sanic.response import json, text, html\nfrom feedparser import parse\nfrom jinja2 import Template\n\napp = Sanic()\n\n# \u540e\u9762\u4f1a\u4f7f\u7528\u66f4\u65b9\u4fbf\u7684\u6a21\u677f\u5f15\u7528\u65b9\u5f0f\ntemplate = Template(\n    \"\"\"\n <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>rss\u9605\u8bfb</title>\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n<article class=\"markdown-body\">\n {% for article in articles %}\n <b><a href=\"{{article.link}}\">{{article.title}}</a></b><br/>\n <i>{{article.published}}</i><br/>\n <hr/>\n {% endfor %}\n</article>\n</body>\n</html>\n \"\"\"\n)\n\n@app.route(\"/\")\nasync def index(request):\n    url = \"http://blog.howie6879.cn/atom.xml\"\n    feed = parse(url)\n    articles = feed['entries']\n    data = []\n    for article in articles:\n        data.append({\"title\": article[\"title_detail\"][\"value\"], \"link\": article[\"link\"]})\n    return json(data)\n\n@app.route(\"/html\")\nasync def rss_html(request):\n    url = \"http://blog.howie6879.cn/atom.xml\"\n    feed = parse(url)\n    articles = feed['entries']\n    data = []\n    for article in articles:\n        data.append(\n            {\"title\": article[\"title_detail\"][\"value\"], \"link\": article[\"link\"], \"published\": article[\"published\"]})\n    html_content = template.render(articles=data)\n    return html(html_content)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000) \n```", "```\nfrom src.views import app \n```", "```\nsample02\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 demo.md\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config # \u914d\u7f6e \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 statics # css\u3001js\u3001img\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 templates # Jinja2\u6a21\u677f\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 views # \u8def\u7531\u3001\u903b\u8f91\u5904\u7406\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 run.py # \u542f\u52a8\u6587\u4ef6\n\u251c\u2500\u2500 tests\n\u2514\u2500\u2500 requirements.txt \n```", "```\nenable_async = sys.version_info >= (3, 6)\n\napp = Sanic()\n\n# jinjia2 config\nenv = Environment(\n    loader=PackageLoader('views.rss', '../templates'),\n    autoescape=select_autoescape(['html', 'xml', 'tpl']),\n    enable_async=enable_async)\n\nasync def template(tpl, **kwargs):\n    template = env.get_template(tpl)\n    rendered_template = await template.render_async(**kwargs)\n    return html(rendered_template)\n\n@app.route(\"/html\")\nasync def rss_html(request):\n    url = \"http://blog.howie6879.cn/atom.xml\"\n    feed = parse(url)\n    articles = feed['entries']\n    data = []\n    for article in articles:\n        data.append(\n            {\"title\": article[\"title_detail\"][\"value\"], \"link\": article[\"link\"], \"published\": article[\"published\"]})\n    return await template('rss.html', articles=articles) \n```", "```\n# !/usr/bin/env python\nimport sys\nimport os\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nfrom src.views import app\nfrom src.config import CONFIG\n\napp.statics('/statics', CONFIG.BASE_DIR + '/statics')\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000) \n```", "```\n#!/usr/bin/env python\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic()\n\n# \u6b64\u5904\u5c06\u8def\u7531 / \u4e0e\u89c6\u56fe\u51fd\u6570 test \u5173\u8054\u8d77\u6765\n@app.route(\"/\")\nasync def test(request):\n    return text('Hello World!')\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000) \n```", "```\n @app.route(\"/\")\nasync def test(request):\n    return text('Hello World!') \n```", "```\n # Decorator\ndef route(self, uri, methods=None):\n\n    def response(handler):\n        # \u8def\u7531\u7c7b\u7684add \u65b9\u6cd5\u5c06\u89c6\u56fe\u51fd\u6570handler \u4e0euri \u5173\u8054\u8d77\u6765\n        # \u7136\u540e\u6574\u4e2a\u8def\u7531\u5217\u8868\u4f1a\u65b0\u589e\u4e00\u4e2a namedtuple \u5982\u4e0b\uff1a\n        # Route(handler=handler, methods=methods_dict, pattern=pattern, parameters=parameters)\n        self.router.add(uri=uri, methods=methods, handler=handler)\n        return handler\n\n    return response \n```", "```\n async def handle_request(self, request, response_callback):\n    \"\"\"\n Takes a request from the HTTP Server and returns a response object to be sent back\n The HTTP Server only expects a response object, so exception handling must be done here\n :param request: HTTP Request object\n :param response_callback: Response function to be called with the response as the only argument\n :return: Nothing\n \"\"\" \n```", "```\n.\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dev_config.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pro_config.py\n\u251c\u2500\u2500 run.py\n\u251c\u2500\u2500 statics\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rss_html # rss_html\u84dd\u56fe\u7684 css js \u6587\u4ef6\u5b58\u653e\u76ee\u5f55\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 main.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 main.js\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rss_json # rss_json\u84dd\u56fe\u7684 css js \u6587\u4ef6\u5b58\u653e\u76ee\u5f55\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 main.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 main.js\n\u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rss_html # rss_html\u84dd\u56fe\u7684 html \u6587\u4ef6\u5b58\u653e\u76ee\u5f55\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 rss.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rss_json # rss_json\u84dd\u56fe\u7684 html \u6587\u4ef6\u5b58\u653e\u76ee\u5f55\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 views\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 rss_html.py # rss_html \u84dd\u56fe\n    \u2514\u2500\u2500 rss_json.py # rss_json \u84dd\u56fe \n```", "```\n #!/usr/bin/env python\n# \u90e8\u5206\u4ee3\u7801\n# rss_html.py\nimport sys\n\nfrom sanic import Blueprint\nfrom sanic.response import html\n\nfrom src.config import CONFIG\n\nhtml_bp = Blueprint('rss_html', url_prefix='html')\nhtml_bp.static('/statics/rss_html', CONFIG.BASE_DIR + '/statics/rss_html')\n\n# jinjia2 config\nenv = Environment(\n    loader=PackageLoader('views.rss_html', '../templates/rss_html'),\n    autoescape=select_autoescape(['html', 'xml', 'tpl']),\n    enable_async=enable_async)\n\n@html_bp.route(\"/\")\nasync def index(request):\n    return await template('index.html')\n\n#!/usr/bin/env python\n# \u90e8\u5206\u4ee3\u7801\n# rss_json.py\nimport sys\n\nfrom sanic import Blueprint\nfrom sanic.response import html\n\nfrom src.config import CONFIG\n\njson_bp = Blueprint('rss_json', url_prefix='json')\njson_bp.static('/statics/rss_json', CONFIG.BASE_DIR + '/statics/rss_json')\n\n# jinjia2 config\nenv = Environment(\n    loader=PackageLoader('views.rss_json', '../templates/rss_json'),\n    autoescape=select_autoescape(['html', 'xml', 'tpl']),\n    enable_async=enable_async)\n\n@json_bp.route(\"/\")\nasync def index(request):\n    return await template('index.html') \n```", "```\ncd /Sanic-For-Pythoneer/examples/demo04/sample01/src\npython run.py \n```", "```\nfrom aiomysql.sa import create_engine\n# \u8fd9\u4e2a\u624d\u662f\u5173\u952e \n```", "```\naio_mysql\n\u251c\u2500\u2500 demo.py\n\u251c\u2500\u2500 model.py\n\u2514\u2500\u2500 requirements.txt \n```", "```\ncreate database test_mysql;\n\nCREATE TABLE user\n(\n  id        INT AUTO_INCREMENT\n    PRIMARY KEY,\n  user_name VARCHAR(16) NOT NULL,\n  pwd       VARCHAR(32) NOT NULL,\n  real_name VARCHAR(6)  NOT NULL\n); \n```", "```\n# script: model.py\nimport sqlalchemy as sa\n\nmetadata = sa.MetaData()\n\nuser = sa.Table(\n    'user',\n    metadata,\n    sa.Column('id', sa.Integer, autoincrement=True, primary_key=True),\n    sa.Column('user_name', sa.String(16), nullable=False),\n    sa.Column('pwd', sa.String(32), nullable=False),\n    sa.Column('real_name', sa.String(6), nullable=False),\n)\n\n# script: demo.py\nimport asyncio\n\nfrom aiomysql.sa import create_engine\n\nfrom model import user,metadata\n\nasync def go(loop):\n    \"\"\"\n aiomysql\u9879\u76ee\u5730\u5740\uff1ahttps://github.com/aio-libs/aiomysql\n :param loop:\n :return:\n \"\"\"\n    engine = await create_engine(user='root', db='test_mysql',\n                                 host='127.0.0.1', password='123456', loop=loop)\n    async with engine.acquire() as conn:\n        await conn.execute(user.insert().values(user_name='user_name01', pwd='123456', real_name='real_name01'))\n        await conn.execute('commit')\n\n        async for row in conn.execute(user.select()):\n            print(row.user_name, row.pwd)\n\n    engine.close()\n    await engine.wait_closed()\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(go(loop)) \n```", "```\nuser_name01 123456 \n```", "```\naio_mongo\n\u251c\u2500\u2500 demo.py\n\u2514\u2500\u2500 requirements.txt \n```", "```\n#!/usr/bin/env python\nimport os\n\nfrom functools import wraps\n\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\nMONGODB = dict(\n    MONGO_HOST=os.getenv('MONGO_HOST', \"\"),\n    MONGO_PORT=os.getenv('MONGO_PORT', 27017),\n    MONGO_USERNAME=os.getenv('MONGO_USERNAME', \"\"),\n    MONGO_PASSWORD=os.getenv('MONGO_PASSWORD', \"\"),\n    DATABASE='test_mongodb',\n)\n\nclass MotorBaseOld:\n    \"\"\"\n \u9ed8\u8ba4\u5b9e\u73b0\u4e86\u4e00\u4e2adb\u53ea\u521b\u5efa\u4e00\u6b21\uff0c\u7f3a\u70b9\u662f\u66f4\u6362\u96c6\u5408\u9ebb\u70e6\n \"\"\"\n    _db = None\n    MONGODB = MONGODB\n\n    def client(self, db):\n        # motor\n        self.motor_uri = 'mongodb://{account}{host}:{port}/{database}'.format(\n            account='{username}:{password}@'.format(\n                username=self.MONGODB['MONGO_USERNAME'],\n                password=self.MONGODB['MONGO_PASSWORD']) if self.MONGODB['MONGO_USERNAME'] else '',\n            host=self.MONGODB['MONGO_HOST'] if self.MONGODB['MONGO_HOST'] else 'localhost',\n            port=self.MONGODB['MONGO_PORT'] if self.MONGODB['MONGO_PORT'] else 27017,\n            database=db)\n        return AsyncIOMotorClient(self.motor_uri)\n\n    @property\n    def db(self):\n        if self._db is None:\n            self._db = self.client(self.MONGODB['DATABASE'])[self.MONGODB['DATABASE']]\n\n        return self._db \n```", "```\n def singleton(cls):\n    \"\"\"\n \u7528\u88c5\u9970\u5668\u5b9e\u73b0\u7684\u5b9e\u4f8b \u4e0d\u660e\u767d\u88c5\u9970\u5668\u53ef\u89c1\u9644\u5f55 \u88c5\u9970\u5668\uff1ahttps://github.com/howie6879/Sanic-For-Pythoneer/blob/master/docs/part2/%E9%99%84%E5%BD%95%EF%BC%9A%E5%85%B3%E4%BA%8E%E8%A3%85%E9%A5%B0%E5%99%A8.md\n :param cls: cls\n :return: instance\n \"\"\"\n    _instances = {}\n\n    @wraps(cls)\n    def instance(*args, **kw):\n        if cls not in _instances:\n            _instances[cls] = cls(*args, **kw)\n        return _instances[cls]\n\n    return instance\n\n@singleton\nclass MotorBase:\n    \"\"\"\n \u66f4\u6539mongodb\u8fde\u63a5\u65b9\u5f0f \u5355\u4f8b\u6a21\u5f0f\u4e0b\u652f\u6301\u591a\u5e93\u64cd\u4f5c\n About motor's doc: https://github.com/mongodb/motor\n \"\"\"\n    _db = {}\n    _collection = {}\n    MONGODB = MONGODB\n\n    def __init__(self):\n        self.motor_uri = ''\n\n    def client(self, db):\n        # motor\n        self.motor_uri = 'mongodb://{account}{host}:{port}/{database}'.format(\n            account='{username}:{password}@'.format(\n                username=self.MONGODB['MONGO_USERNAME'],\n                password=self.MONGODB['MONGO_PASSWORD']) if self.MONGODB['MONGO_USERNAME'] else '',\n            host=self.MONGODB['MONGO_HOST'] if self.MONGODB['MONGO_HOST'] else 'localhost',\n            port=self.MONGODB['MONGO_PORT'] if self.MONGODB['MONGO_PORT'] else 27017,\n            database=db)\n        return AsyncIOMotorClient(self.motor_uri)\n\n    def get_db(self, db=MONGODB['DATABASE']):\n        \"\"\"\n \u83b7\u53d6\u4e00\u4e2adb\u5b9e\u4f8b\n :param db: database name\n :return: the motor db instance\n \"\"\"\n        if db not in self._db:\n            self._db[db] = self.client(db)[db]\n\n        return self._db[db]\n\n    def get_collection(self, db_name, collection):\n        \"\"\"\n \u83b7\u53d6\u4e00\u4e2a\u96c6\u5408\u5b9e\u4f8b\n :param db_name: database name\n :param collection: collection name\n :return: the motor collection instance\n \"\"\"\n        collection_key = db_name + collection\n        if collection_key not in self._collection:\n            self._collection[collection_key] = self.get_db(db_name)[collection]\n\n        return self._collection[collection_key] \n```", "```\naio_redis\n\u251c\u2500\u2500 demo.py\n\u2514\u2500\u2500 requirements.txt \n```", "```\n#!/usr/bin/env python\nimport os\nimport asyncio_redis\n\nREDIS_DICT = dict(\n    IS_CACHE=True,\n    REDIS_ENDPOINT=os.getenv('REDIS_ENDPOINT', \"localhost\"),\n    REDIS_PORT=os.getenv('REDIS_PORT', 6379),\n    REDIS_PASSWORD=os.getenv('REDIS_PASSWORD', None),\n    DB=0,\n    POOLSIZE=10,\n)\n\nclass RedisSession:\n    \"\"\"\n \u5efa\u7acbredis\u8fde\u63a5\u6c60\n \"\"\"\n    _pool = None\n\n    async def get_redis_pool(self):\n        if not self._pool:\n            self._pool = await asyncio_redis.Pool.create(\n                host=str(REDIS_DICT.get('REDIS_ENDPOINT', \"localhost\")), port=int(REDIS_DICT.get('REDIS_PORT', 6379)),\n                poolsize=int(REDIS_DICT.get('POOLSIZE', 10)), password=REDIS_DICT.get('REDIS_PASSWORD', None),\n                db=REDIS_DICT.get('DB', None)\n            )\n\n        return self._pool \n```", "```\nsrc\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dev_config.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pro_config.py\n\u251c\u2500\u2500 database\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 redis_base\n\u251c\u2500\u2500 grpc_service\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 grpc_asyncio_client.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 grpc_client.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 grpc_server.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hello_grpc.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hello_pb2.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hello_pb2_grpc.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 proto\n\u251c\u2500\u2500 statics\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rss_html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 js\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rss_json\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 css\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 js\n\u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rss_html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rss_json\n\u251c\u2500\u2500 tools\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 mid_decorator.py\n\u251c\u2500\u2500 views\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 rss_api.py\n\u2502   \u251c\u2500\u2500 rss_html.py\n\u2502   \u2514\u2500\u2500 rss_json.py\n\u2514\u2500\u2500 run.py \n```", "```\n#!/usr/bin/env python\nfrom feedparser import parse\nfrom sanic import Blueprint\nfrom sanic.response import json\n\napi_bp = Blueprint('rss_api', url_prefix='v1')\n\n@api_bp.route(\"/get/rss/<param>\")\nasync def get_rss_json(request, param):\n    if param == 'howie6879':\n        url = \"http://blog.howie6879.cn/atom.xml\"\n        feed = parse(url)\n        articles = feed['entries']\n        data = []\n        for article in articles:\n            data.append({\"title\": article[\"title_detail\"][\"value\"], \"link\": article[\"link\"]})\n        return json(data)\n    else:\n        return json({'info': '\u8bf7\u8bbf\u95ee http://0.0.0.0:8000/v1/get/rss/howie6879'}) \n```", "```\n{\n    \"name\": \"howie6879\"\n} \n```", "```\n@api_bp.route(\"/post/rss/\", methods=['POST'])\nasync def post_rss_json(request, **kwargs):\n    post_data = json_loads(str(request.body, encoding='utf-8'))\n    name = post_data.get('name')\n    if name == 'howie6879':\n        url = \"http://blog.howie6879.cn/atom.xml\"\n        feed = parse(url)\n        articles = feed['entries']\n        data = []\n        for article in articles:\n            data.append({\"title\": article[\"title_detail\"][\"value\"], \"link\": article[\"link\"]})\n        return json(data)\n    else:\n        return json({'info': '\u53c2\u6570\u9519\u8bef'}) \n```", "```\ndef auth_params(*keys):\n    \"\"\"\n api\u8bf7\u6c42\u53c2\u6570\u9a8c\u8bc1\n :param keys: params\n :return:\n \"\"\"\n\n    def wrapper(func):\n        @wraps(func)\n        async def auth_param(request=None, rpc_data=None, *args, **kwargs):\n            request_params, params = {}, []\n            if isinstance(request, Request):\n                # sanic request\n                if request.method == 'POST':\n                    try:\n                        post_data = json_loads(str(request.body, encoding='utf-8'))\n                    except Exception as e:\n                        return response_handle(request, {'info': 'error'})\n                    else:\n                        request_params.update(post_data)\n                        params = [key for key, value in post_data.items() if value]\n                elif request.method == 'GET':\n                    request_params.update(request.args)\n                    params = [key for key, value in request.args.items() if value]\n                else:\n                    return response_handle(request, {'info': 'error'})\n            else:\n                pass\n\n            if set(keys).issubset(set(params)):\n                kwargs['request_params'] = request_params\n                return await dec_func(func, request, *args, **kwargs)\n            else:\n                return response_handle(request, {'info': 'error'})\n\n        return auth_param\n\n    return wrapper\n\nasync def dec_func(func, request, *args, **kwargs):\n    try:\n        response = await func(request, *args, **kwargs)\n        return response\n    except Exception as e:\n        return response_handle(request, {'info': 'error'}) \n```", "```\n@api_bp.route(\"/post/rss/\", methods=['POST'])\n@auth_params('name')\nasync def post_rss_json(request, **kwargs): \n```", "```\n# main.py\nfrom sanic import Sanic\nfrom sanic.response import json\n\napp = Sanic()\n\n@app.route(\"/\")\nasync def test(request):\n    return json({\"hello\": \"world\"})\n\n#\u8bbf\u95eehttp://0.0.0.0:8000/\u5373\u53ef\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000) \n```", "```\n\u251c\u2500\u2500 server.py\n\u251c\u2500\u2500 static\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 novels\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 css\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 result.css\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 img\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 read_content.png\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 js\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 main.js\n\u251c\u2500\u2500 template\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 novels\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 views\n    \u2514\u2500\u2500 novels_blueprint.py \n```", "```\n# \u9002\u7528python3.5+\n# \u4ee3\u7801\u7247\u6bb5\uff0c\u660e\u767d\u610f\u601d\u5c31\u597d\nfrom sanic import Blueprint\nfrom jinja2 import Environment, PackageLoader, select_autoescape\n\n# \u521d\u59cb\u5316blueprint\u5e76\u5b9a\u4e49\u9759\u6001\u6587\u4ef6\u5939\u8def\u5f84\nbp = Blueprint('novels_blueprint')\nbp.static('/static', './static/novels')\n\n# jinjia2 config\nenv = Environment(\n    loader=PackageLoader('views.novels_blueprint', '../templates/novels'),\n    autoescape=select_autoescape(['html', 'xml', 'tpl']))\n\ndef template(tpl, **kwargs):\n    template = env.get_template(tpl)\n    return html(template.render(kwargs))\n\n@bp.route(\"/\")\nasync def index(request):\n    return template('index.html', title='index') \n```", "```\n# \u9002\u7528python3.5+\n# \u4ee3\u7801\u7247\u6bb5\uff0c\u660e\u767d\u610f\u601d\u5c31\u597d\n#!/usr/bin/env python\nimport sys\n\nfrom feedparser import parse\nfrom jinja2 import Environment, PackageLoader, select_autoescape\nfrom sanic import Blueprint\nfrom sanic.response import html\n\nfrom src.config import CONFIG\n\n# https://github.com/channelcat/sanic/blob/5bb640ca1706a42a012109dc3d811925d7453217/examples/jinja_example/jinja_example.py\n# \u5f00\u542f\u5f02\u6b65\u7279\u6027  \u8981\u6c423.6+\nenable_async = sys.version_info >= (3, 6)\n\nhtml_bp = Blueprint('rss_html', url_prefix='html')\nhtml_bp.static('/statics/rss_html', CONFIG.BASE_DIR + '/statics/rss_html')\n\n# jinjia2 config\nenv = Environment(\n    loader=PackageLoader('views.rss_html', '../templates/rss_html'),\n    autoescape=select_autoescape(['html', 'xml', 'tpl']),\n    enable_async=enable_async)\n\nasync def template(tpl, **kwargs):\n    template = env.get_template(tpl)\n    rendered_template = await template.render_async(**kwargs)\n    return html(rendered_template) \n```", "```\n@cached(ttl=1000, cache=RedisCache, key=\"rss\", serializer=PickleSerializer(), port=6379, namespace=\"main\")\nasync def get_rss():\n    print(\"\u7b2c\u4e00\u6b21\u8bf7\u6c42\u4f11\u77203\u79d2...\")\n    await asyncio.sleep(3)\n    url = \"http://blog.howie6879.cn/atom.xml\"\n    feed = parse(url)\n    articles = feed['entries']\n    data = []\n    for article in articles:\n        data.append({\"title\": article[\"title_detail\"][\"value\"], \"link\": article[\"link\"]})\n    return data\n\n@api_bp.route(\"/get/rss/<name>\")\nasync def get_rss_json(request, name):\n    if name == 'howie6879':\n        data = await get_rss()\n        return json(data)\n    else:\n        return json({'info': '\u8bf7\u8bbf\u95ee http://0.0.0.0:8000/v1/get/rss/howie6879'}) \n```", "```\npro_name\n\u251c\u2500\u2500 docs            # \u9879\u76ee\u6587\u6863\u8bf4\u660e\n\u251c\u2500\u2500 src or pro_name/# \u9879\u76ee\u540d\u79f0\n\u251c\u2500\u2500 tests           # \u6d4b\u8bd5\u7528\u4f8b\n\u251c\u2500\u2500 README.md       # \u9879\u76ee\u4ecb\u7ecd\n\u2514\u2500\u2500requirements.txt # \u8be5\u9879\u76ee\u4f9d\u8d56\u7684\u7b2c\u4e09\u65b9\u5e93 \n```", "```\ntests\n\u251c\u2500\u2500 setting.py\n\u2514\u2500\u2500 test_rss.py \n```", "```\n# setting.py\ndef rss_data():\n    return {\n        \"name\": \"howie6879\"\n    } \n```", "```\n# test_rss.py\nasync def test_http_rss(test_cli):\n    data = setting.rss_data()\n    response = await test_cli.post('/v1/post/rss/', data=ujson.dumps(data))\n    resp_json = await response.json()\n    assert resp_json['status'] == 1\n\n# \u8fd0\u884c\u6d4b\u8bd5 pytest tests/test_rss.py\n\"\"\"\n================================================= test session starts ==================================================\nplatform darwin -- Python 3.6.0, pytest-3.2.3, py-1.4.34, pluggy-0.4.0\nrootdir: /Users/howie/Documents/programming/python/git/Sanic-For-Pythoneer/examples/demo06/sample, inifile:\nplugins: celery-4.0.2, sanic-0.1.5\ncollected 2 items\n\ntests/test_rss.py .s\n\n========================================= 1 passed, 1 skipped in 2.13 seconds ==========================================\n\"\"\" \n```", "```\n\u251c\u2500\u2500 locust_rss\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 action.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 locust_rss_http.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 locustfile.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils.py\n\u251c\u2500\u2500 setting.py\n\u2514\u2500\u2500 test_rss.py \n```", "```\nHTTP_URL = \"http://0.0.0.0:8000/v1/post/rss/\"\nGRPC_URL = \"0.0.0.0:8990\"\n\ndef json_requests(client, data, url):\n    func_name = inspect.stack()[1][3]\n    headers = {'content-type': 'application/json'}\n    return post_request(client, data=json.dumps(data), url=url, func_name=func_name, headers=headers)\n\ndef action_rss(client):\n    data = {\n        \"name\": \"howie6879\"\n    }\n    json_requests(client, data, HTTP_URL) \n```", "```\nclass RssBehavior(TaskSet):\n    @task(1)\n    def interface_rss(self):\n        action.action_rss(self.client) \n```", "```\ndef post_request(client, data, url, func_name=None, **kw):\n    \"\"\"\n \u53d1\u8d77post\u8bf7\u6c42\n \"\"\"\n    func_name = func_name if func_name else inspect.stack()[1][3]\n    with client.post(url, data=data, name=func_name, catch_response=True, timeout=2, **kw) as response:\n        result = response.content\n        res = to_json(result)\n        if res['status'] == 1:\n            response.success()\n        else:\n            response.failure(\"%s-> %s\" % ('error', result))\n        return result \n```", "```\ncd Sanic-For-Pythoneer/examples/demo06/sample/tests/locust_rss\n\n# \u53ea\u60f3\u8dd1\u4e00\u6b21\u770b\u770b\u6709\u6ca1\u6709\u95ee\u9898 \u8bb0\u5f97\u5148\u5c06\u4f60\u7f16\u5199\u7684\u670d\u52a1\u542f\u52a8\u8d77\u6765\u54e6\nlocust -f locustfile.py --no-web -c 1 -n 1\n\n# Output: \u8868\u793a\u6ca1\u6bdb\u75c5\n[2018-01-14 14:54:30,119] 192.168.2.100/INFO/locust.main: Shutting down (exit code 0), bye.\n Name                                                          # reqs      # fails     Avg     Min     Max  |  Median   req/s\n--------------------------------------------------------------------------------------------------------------------------------------------\n POST action_rss                                                    1     0(0.00%)    1756    1756    1756  |    1800    0.00\n--------------------------------------------------------------------------------------------------------------------------------------------\n Total                                                              1     0(0.00%)                                       0.00\n\nPercentage of the requests completed within given times\n Name                                                           # reqs    50%    66%    75%    80%    90%    95%    98%    99%   100%\n--------------------------------------------------------------------------------------------------------------------------------------------\n POST action_rss                                                     1   1800   1800   1800   1800   1800   1800   1800   1800   1756\n-------------------------------------------------------------------------------------------------------------------------------------------- \n```", "```\n# gunicorn.py\nbind = '127.0.0.1:8001'\nbacklog = 2048\n\nworkers = 2\nworker_connections = 1000\ntimeout = 30\nkeepalive = 2\n\nspew = False\ndaemon = False\numask = 0 \n```", "```\n[program:demo]\ncommand      = gunicorn -c config/gunicorn.py --worker-class sanic.worker.GunicornWorker server:app\ndirectory    = /your/path/\nuser         = root\nprocess_name = %(program_name)s\nautostart    = true\nautorestart  = true\nstartsecs    = 3\nredirect_stderr         = true\nstdout_logfile_maxbytes = 500MB\nstdout_logfile_backups  = 10\nstdout_logfile          = ~/supervisor/demo.log\nenvironment             = MODE=\"PRO\" \n```", "```\nwww.your.domain.com {\n    proxy / 127.0.0.1:8001\n    timeouts none\n    gzip\n}\n\nyour.domain.com {\n    redir http://www.your.domain.com\n} \n```", "```\ndocker build -t demo:0.1 .\ndocker run -d -p 8001:8001 demo:0.1 \n```"]