- en: Using a Parent's Method Explicitly
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 明确使用父类的方法
- en: Calling the Parent
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用父类
- en: Our penguin class is getting cramped! To clean things up, lets make a child
    for it called `emperor-penguin`. It can do everything that a `penguin` does, except
    that when it eats, an `emperor-penguin` says `'(bon apetit)` before eating food.
    Does the following definition work?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的企鹅类有点拥挤！为了整理一下，让我们为它创建一个名为`emperor-penguin`的子类。它可以做所有`penguin`能做的事情，只是当它吃东西时，一个`emperor-penguin`在吃东西之前会说`'(bon
    apetit)`。以下定义是否有效？
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/d3fe4a1bf85482f335cb863a18bbe15c.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d3fe4a1bf85482f335cb863a18bbe15c.jpg)'
- en: '**Test Your Understanding**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: 'Let''s say we define `napoleon` as follow:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`napoleon`定义如下：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What happens when we call `(ask napoleon 'eat)`?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用`(ask napoleon 'eat)`时会发生什么？
- en: Usual
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通常
- en: The correct way to call a parent's method is to use the **usual** keyword.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 调用父类方法的正确方式是使用**usual**关键字。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**usual** takes one or more argument, the first being the message, and the
    others being any arguments the message needs. This message and necessary arguments
    are then passed to the parent. In this way, an `emperor-penguin` object will refer
    to `penguin`''s `eat` method.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**usual**接受一个或多个参数，第一个是消息，其他的是消息需要的任何参数。然后将这个消息和必要的参数传递给父类。这样，一个`emperor-penguin`对象将引用`penguin`的`eat`方法。'
- en: Calling usual is just like saying `(ask self ...)` with the same arguments,
    except that only methods defi ned within an ancestor class (parent, grandparent,
    etc.) are eligible to be used. It is an error to invoke usual from a class that
    doesn't have a parent class.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 调用通常就像是使用`(ask self ...)`一样，只是参数相同，只有在祖先类（父类、祖父类等）中定义的方法才能被使用。在没有父类的类中调用通常是错误的。
- en: Naming Intuition
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名直觉
- en: 'You may be thinking that `usual` is a funny name for this function. Here''s
    the idea behind the name: We are thinking of subclasses as specializations. That
    is, the parent class represents some broad category of things, and the child is
    a specialized version. (Think of the relationship of checking-accounts to `accounts`
    in general.) The child object does almost everything the same way its parent does.
    The child has some special way to handle a few messages, different from the usual
    way (as the parent does it). But the child can explicitly decide to do something
    in the usual (parent-like) way, rather than in its own specialized way.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会觉得`usual`是这个函数的一个有趣的名字。这是名字背后的想法：我们将子类视为特殊化。也就是说，父类代表一些广泛的事物类别，而子类是一个特殊化的版本。（想想支票账户与`accounts`的关系。）子对象几乎以与其父类相同的方式执行所有操作。子类有一些特殊的方式来处理一些消息，与通常方式（父类的方式）不同。但子类可以明确决定以通常（类似父类）的方式执行某些操作，而不是以自己的特殊方式。
