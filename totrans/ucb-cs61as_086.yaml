- en: Using a Parent's Method Explicitly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Calling the Parent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our penguin class is getting cramped! To clean things up, lets make a child
    for it called `emperor-penguin`. It can do everything that a `penguin` does, except
    that when it eats, an `emperor-penguin` says `'(bon apetit)` before eating food.
    Does the following definition work?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d3fe4a1bf85482f335cb863a18bbe15c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Test Your Understanding**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we define `napoleon` as follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What happens when we call `(ask napoleon 'eat)`?
  prefs: []
  type: TYPE_NORMAL
- en: Usual
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The correct way to call a parent's method is to use the **usual** keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**usual** takes one or more argument, the first being the message, and the
    others being any arguments the message needs. This message and necessary arguments
    are then passed to the parent. In this way, an `emperor-penguin` object will refer
    to `penguin`''s `eat` method.'
  prefs: []
  type: TYPE_NORMAL
- en: Calling usual is just like saying `(ask self ...)` with the same arguments,
    except that only methods defi ned within an ancestor class (parent, grandparent,
    etc.) are eligible to be used. It is an error to invoke usual from a class that
    doesn't have a parent class.
  prefs: []
  type: TYPE_NORMAL
- en: Naming Intuition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may be thinking that `usual` is a funny name for this function. Here''s
    the idea behind the name: We are thinking of subclasses as specializations. That
    is, the parent class represents some broad category of things, and the child is
    a specialized version. (Think of the relationship of checking-accounts to `accounts`
    in general.) The child object does almost everything the same way its parent does.
    The child has some special way to handle a few messages, different from the usual
    way (as the parent does it). But the child can explicitly decide to do something
    in the usual (parent-like) way, rather than in its own specialized way.'
  prefs: []
  type: TYPE_NORMAL
