["```\nimport tensorflow as tf\nimport numpy as np\ntf.set_random_seed(777)  # for reproducibility\n\ndef MinMaxScaler(data):\n    numerator = data - np.min(data, 0)\n    denominator = np.max(data, 0) - np.min(data, 0)\n    # noise term prevents the zero division\n    return numerator / (denominator + 1e-7)\n\nxy = np.array([[828.659973, 833.450012, 908100, 828.349976, 831.659973],\n               [823.02002, 828.070007, 1828100, 821.655029, 828.070007],\n               [819.929993, 824.400024, 1438100, 818.97998, 824.159973],\n               [816, 820.958984, 1008100, 815.48999, 819.23999],\n               [819.359985, 823, 1188100, 818.469971, 818.97998],\n               [819, 823, 1198100, 816, 820.450012],\n               [811.700012, 815.25, 1098100, 809.780029, 813.669983],\n               [809.51001, 816.659973, 1398100, 804.539978, 809.559998]])\n\n# very important. It does not work without it.\nxy = MinMaxScaler(xy)\nprint(xy)\n\nx_data = xy[:, 0:-1]\ny_data = xy[:, [-1]]\n\n# placeholders for a tensor that will be always fed.\nX = tf.placeholder(tf.float32, shape=[None, 4])\nY = tf.placeholder(tf.float32, shape=[None, 1])\n\nW = tf.Variable(tf.random_normal([4, 1]), name='weight')\nb = tf.Variable(tf.random_normal([1]), name='bias')\n\n# Hypothesis\nhypothesis = tf.matmul(X, W) + b\n\n# Simplified cost/loss function\ncost = tf.reduce_mean(tf.square(hypothesis - Y))\n\n# Minimize\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=1e-5)\ntrain = optimizer.minimize(cost)\n\n# Launch the graph in a session.\nsess = tf.Session()\n# Initializes global variables in the graph.\nsess.run(tf.global_variables_initializer())\n\nfor step in range(101):\n    cost_val, hy_val, _ = sess.run(\n        [cost, hypothesis, train], feed_dict={X: x_data, Y: y_data})\n    print(step, \"Cost: \", cost_val, \"\\nPrediction:\\n\", hy_val)\n\n'''\n100 Cost:  0.152254\nPrediction:\n [[ 1.63450289]\n [ 0.06628087]\n [ 0.35014752]\n [ 0.67070574]\n [ 0.61131608]\n [ 0.61466062]\n [ 0.23175186]\n [-0.13716528]]\n\n''' \n```"]