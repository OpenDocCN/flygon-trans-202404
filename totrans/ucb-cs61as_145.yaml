- en: Dictionaries and Memoization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典和记忆化
- en: Dictionaries
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典
- en: Dictionaries are very similar to lists, but instead do not use indexes to reference
    values but keys.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 字典与列表非常相似，但不使用索引来引用值，而是使用键。
- en: '![](../Images/0c0d53cc040c2f16d234cd2589f427cd.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c0d53cc040c2f16d234cd2589f427cd.jpg)'
- en: 'As a refresher, here''s how you declare and access list values:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，这是如何声明和访问列表值的方式：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, contrast that to the structure of dictionaries.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将其与字典的结构进行对比。
- en: 'Creating a dictionary: (The keys must be immutable, a.k.a strings, numbers,
    [tuples](https://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences),
    but not lists!)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 创建字典：（键必须是不可变的，即字符串、数字、[元组](https://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences)，但不能是列表！）
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Accessing a dictionary:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 访问字典：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Adding to and Changing a dictionary key value pair:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 添加和更改字典键值对：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Useful Dictionary Operations:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有用的字典操作：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Iterating over a dictionary's keys
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历字典的键
- en: '[PRE8]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Iterating over a dictionary's values
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历字典的值
- en: '[PRE9]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Deletion
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 删除
- en: '[PRE10]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Homework Problem 7: Character Frequencies**'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**作业问题 7：字符频率**'
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a function `char_freq()` that takes a string and builds a frequency listing
    of the characters contained in it. Represent the frequency listing as a Python
    dictionary with each letter as a key that stores the number of times that letter
    appears.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编写一个函数`char_freq()`，它接受一个字符串并构建其中包含的字符的频率列表。将频率列表表示为一个Python字典，其中每个字母作为一个键，存储该字母出现的次数。
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Try it with something like `char_freq("abbabcbdbabdbdbabababcbcbab")`.
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尝试使用类似`char_freq("abbabcbdbabdbdbabababcbcbab")`的东西。
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Homework Problem 8.1: Caesar''s Ciphers**'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**作业问题 8.1：凯撒密码**'
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a function `rotate_letters()` that takes in a number and creates a new
    mapping of lower case letters offset by that number. Return the new mapping as
    a dictionary such that the original letter is mapped to the shifted letter. For
    example, `rotate_letters(2)` would map `'a'`->`'c'`, `'b'`->`'d'`, `'c'`->`'e'`
    and so on.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编写一个函数`rotate_letters()`，它接受一个数字并创建一个由该数字偏移的小写字母的新映射。将新映射作为字典返回，原始字母映射到移位后的字母。例如，`rotate_letters(2)`将映射`'a'`->`'c'`，`'b'`->`'d'`，`'c'`->`'e'`等。
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Homework Problem 8.2: Caesar''s Ciphers**'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**作业问题 8.2：凯撒密码**'
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a function `decode_cipher()` that takes in a dictionary of letter mappings
    and a cipher string (of only lower case letters). Return the decoded string that
    is created when every character is replaced by its mapping from the dictionary
    For example, `decode_cipher(rotate_letters(2), "abc")` should return `"cde"`.
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编写一个函数`decode_cipher()`，它接受一个字母映射的字典和一个密码字符串（仅包含小写字母）。返回当每个字符被字典中的映射替换时创建的解码字符串。例如，`decode_cipher(rotate_letters(2),
    "abc")`应返回`"cde"`。
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use this function to decode "jbj fpurzr vf terng" given that the letters had
    been shifted by 13.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用此函数解码“jbj fpurzr vf terng”，假设字母已经移位了13个位置。
- en: Memoization
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记忆化
- en: You have now all the tools to learn a new topic which is called memoization!
    Memoization is the act of storing answers to computations (particularly computationally
    expensive ones) as you compute things so that if you are required to repeat that
    computation, you already have a memoized answer. Memoization is often seen in
    the context of improving the efficiency of a slow recursive process that makes
    repetitive computations.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了学习一个名为记忆化的新主题的所有工具！记忆化是在计算事物时存储答案（特别是计算昂贵的答案）的行为，以便如果需要重复该计算，你已经有了一个记忆化的答案。记忆化通常用于改进慢递归过程的效率，该过程进行重复计算。
- en: 'Consider the fibbonacci function which generates the nth fibbonacci number
    in the sequence. Recursively, the brute force definition of that process looks
    like:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑生成第n个斐波那契数的斐波那契函数。递归地，该过程的蛮力定义如下：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If n is sufficiently large, you'll be waiting a long time for fib to return.
    Consider that case the n is 5. We'll have to compute fib(5-2) and separately fib(5-1).
    But in computing fib(5-1) we'll have to recompute fib(5-2). Following this logic,
    you can see we'll end up with many unneccessary recomputations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果n足够大，你将等待很长时间才能得到fib的返回值。考虑n为5的情况。我们将不得不计算fib(5-2)和单独计算fib(5-1)。但在计算fib(5-1)时，我们将不得不重新计算fib(5-2)。按照这种逻辑，你可以看到我们将得到许多不必要的重复计算。
- en: Take a look at the recursion tree generated by calling fib(6). Can you spot
    all the overlapping computations?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 查看调用fib(6)生成的递归树。你能发现所有重叠的计算吗？
- en: '![](../Images/9d7ca612333db0e774e186ffc09e1859.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9d7ca612333db0e774e186ffc09e1859.jpg)'
- en: To reduce our inefficiency, we should cache, or store, computations as they
    complete. Then, before doing any computation, we simple check our cache for whether
    we had already done that computation. Our cache can be created with a dictionary!
    The keys will correspond to the argument value and the values will correspond
    to the calculated computation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少我们的低效性，我们应该在完成计算后缓存或存储计算。然后，在进行任何计算之前，我们只需检查我们的缓存是否已经完成了该计算。我们的缓存可以用字典创建！键将对应于参数值，值将对应于计算的结果。
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is kind of messy because the cache exists outside of your function. Alternatively,
    you can wrap the cache and function so that it is memoized within each call to
    the wrapper function. The cache will reset for each call to `memo_fib()` but at
    least within one call memoization occurs. In project 4, you'll write a better
    memoization routine that is less messy yet still memoized between calls.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点混乱，因为缓存存在于函数之外。或者，您可以封装缓存和函数，使其在每次调用包装函数时都进行记忆化。缓存将在每次调用`memo_fib()`时重置，但至少在一个调用内会发生记忆化。在项目
    4 中，您将编写一个更好的记忆化例程，它不那么混乱，但在调用之间仍然进行了记忆化。
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Homework Problem 9: Memoized Product of Factorials**'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**作业问题 9: 记忆化的阶乘乘积**'
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a memoized accumulated product of factorials procedure in a similar fashion
    to `memo_fib`. You MUST use recursion.
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 以类似于`memo_fib`的方式编写一个记忆化的累积阶乘乘积过程。您必须使用递归。
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Accumulated Factorial of 5 = 5! * 4! * 3! * 2! * 1!
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 累积阶乘 5 的结果 = 5! * 4! * 3! * 2! * 1!
