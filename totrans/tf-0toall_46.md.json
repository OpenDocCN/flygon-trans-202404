["```\n# Lab 12 RNN\nimport tensorflow as tf\nimport numpy as np\ntf.set_random_seed(777)  # reproducibility\n\nidx2char = ['h', 'i', 'e', 'l', 'o']\n# Teach hello: hihell -> ihello\nx_data = [[0, 1, 0, 2, 3, 3]]   # hihell\nx_one_hot = [[[1, 0, 0, 0, 0],   # h 0\n              [0, 1, 0, 0, 0],   # i 1\n              [1, 0, 0, 0, 0],   # h 0\n              [0, 0, 1, 0, 0],   # e 2\n              [0, 0, 0, 1, 0],   # l 3\n              [0, 0, 0, 1, 0]]]  # l 3\n\ny_data = [[1, 0, 2, 3, 3, 4]]    # ihello\n\nnum_classes = 5\ninput_dim = 5  # one-hot size\nhidden_size = 5  # output from the LSTM. 5 to directly predict one-hot\nbatch_size = 1   # one sentence\nsequence_length = 6  # |ihello| == 6\nlearning_rate = 0.1\n\nX = tf.placeholder(\n    tf.float32, [None, sequence_length, input_dim])  # X one-hot\nY = tf.placeholder(tf.int32, [None, sequence_length])  # Y label\n\ncell = tf.contrib.rnn.BasicLSTMCell(num_units=hidden_size, state_is_tuple=True)\ninitial_state = cell.zero_state(batch_size, tf.float32)\noutputs, _states = tf.nn.dynamic_rnn(\n    cell, X, initial_state=initial_state, dtype=tf.float32)\n\n# FC layer\nX_for_fc = tf.reshape(outputs, [-1, hidden_size])\n# fc_w = tf.get_variable(\"fc_w\", [hidden_size, num_classes])\n# fc_b = tf.get_variable(\"fc_b\", [num_classes])\n# outputs = tf.matmul(X_for_fc, fc_w) + fc_b\noutputs = tf.contrib.layers.fully_connected(\n    inputs=X_for_fc, num_outputs=num_classes, activation_fn=None)\n\n# reshape out for sequence_loss\noutputs = tf.reshape(outputs, [batch_size, sequence_length, num_classes])\n\nweights = tf.ones([batch_size, sequence_length])\nsequence_loss = tf.contrib.seq2seq.sequence_loss(\n    logits=outputs, targets=Y, weights=weights)\nloss = tf.reduce_mean(sequence_loss)\ntrain = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(loss)\n\nprediction = tf.argmax(outputs, axis=2)\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    for i in range(50):\n        l, _ = sess.run([loss, train], feed_dict={X: x_one_hot, Y: y_data})\n        result = sess.run(prediction, feed_dict={X: x_one_hot})\n        print(i, \"loss:\", l, \"prediction: \", result, \"true Y: \", y_data)\n\n        # print char using dic\n        result_str = [idx2char[c] for c in np.squeeze(result)]\n        print(\"\\tPrediction str: \", ''.join(result_str))\n\n'''\n0 loss: 1.71584 prediction:  [[2 2 2 3 3 2]] true Y:  [[1, 0, 2, 3, 3, 4]]\n    Prediction str:  eeelle\n1 loss: 1.56447 prediction:  [[3 3 3 3 3 3]] true Y:  [[1, 0, 2, 3, 3, 4]]\n    Prediction str:  llllll\n2 loss: 1.46284 prediction:  [[3 3 3 3 3 3]] true Y:  [[1, 0, 2, 3, 3, 4]]\n    Prediction str:  llllll\n3 loss: 1.38073 prediction:  [[3 3 3 3 3 3]] true Y:  [[1, 0, 2, 3, 3, 4]]\n    Prediction str:  llllll\n4 loss: 1.30603 prediction:  [[3 3 3 3 3 3]] true Y:  [[1, 0, 2, 3, 3, 4]]\n    Prediction str:  llllll\n5 loss: 1.21498 prediction:  [[3 3 3 3 3 3]] true Y:  [[1, 0, 2, 3, 3, 4]]\n    Prediction str:  llllll\n6 loss: 1.1029 prediction:  [[3 0 3 3 3 4]] true Y:  [[1, 0, 2, 3, 3, 4]]\n    Prediction str:  lhlllo\n7 loss: 0.982386 prediction:  [[1 0 3 3 3 4]] true Y:  [[1, 0, 2, 3, 3, 4]]\n    Prediction str:  ihlllo\n8 loss: 0.871259 prediction:  [[1 0 3 3 3 4]] true Y:  [[1, 0, 2, 3, 3, 4]]\n    Prediction str:  ihlllo\n9 loss: 0.774338 prediction:  [[1 0 2 3 3 4]] true Y:  [[1, 0, 2, 3, 3, 4]]\n    Prediction str:  ihello\n10 loss: 0.676005 prediction:  [[1 0 2 3 3 4]] true Y:  [[1, 0, 2, 3, 3, 4]]\n    Prediction str:  ihello\n\n...\n\n''' \n```"]