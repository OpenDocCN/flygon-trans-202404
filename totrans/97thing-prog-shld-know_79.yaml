- en: Take Advantage of Code Analysis Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用代码分析工具
- en: Take Advantage of Code Analysis Tools
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用代码分析工具
- en: The value of testing is something that is drummed into software developers from
    the early stages of their programming journey. In recent years the rise of unit
    testing, test-driven development, and agile methods has seen a surge of interest
    in making the most of testing throughout all phases of the development cycle.
    However, testing is just one of many tools that you can use to improve the quality
    of code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的价值是从软件开发者的早期编程阶段就被灌输的。近年来，单元测试、测试驱动开发和敏捷方法的兴起引起了人们对在开发周期的所有阶段充分利用测试的兴趣激增。然而，测试只是你可以用来提高代码质量的众多工具之一。
- en: Back in the mists of time, when C was still a new phenomenon, CPU time and storage
    of any kind were at a premium. The first C compilers were mindful of this and
    so cut down on the number of passes through the code they made by removing some
    semantic analyses. This meant that the compiler checked for only a small subset
    of the bugs that could be detected at compile time. To compensate, Stephen Johnson
    wrote a tool called *lint* — which removes the fluff from your code — that implemented
    some of the static analyses that had been removed from its sister C compiler.
    Static analysis tools, however, gained a reputation for giving large numbers of
    false-positive warnings and warnings about stylistic conventions that aren't always
    necessary to follow.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在很久以前，当C语言仍然是一种新现象时，CPU时间和任何形式的存储都是宝贵的资源。最初的C编译器考虑到了这一点，因此通过减少对代码的遍历次数来减少一些语义分析。这意味着编译器仅检查了可以在编译时检测到的一小部分错误。为了弥补这一点，Stephen
    Johnson编写了一个名为*lint*的工具——它可以从你的代码中去除多余的内容——实现了从其姐妹C编译器中删除的一些静态分析。然而，静态分析工具因给出大量错误警告和关于风格约定的警告而声名狼藉，这些风格约定并不总是必须遵循。
- en: The current landscape of languages, compilers, and static analysis tools is
    very different. Memory and CPU time are now relatively cheap, so compilers can
    afford to check for more errors. Almost every language boasts at least one tool
    that checks for violations of style guides, common gotchas, and sometimes cunning
    errors that can be difficult to catch, such as potential null pointer dereferences.
    The more sophisticated tools, such as Splint for C or Pylint for Python, are configurable,
    meaning that you can choose which errors and warnings the tool emits with a configuration
    file, via command line switches, or in your IDE. Splint will even let you annotate
    your code in comments to give it better hints about how your program works.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的语言、编译器和静态分析工具的格局已经大不相同。内存和CPU时间现在相对便宜，因此编译器可以负担得起检查更多的错误。几乎每种语言都至少拥有一种检查违反样式指南、常见陷阱以及有时难以捕捉的巧妙错误的工具，例如潜在的空指针解引用。更复杂的工具，如C语言的Splint或Python的Pylint，是可配置的，这意味着你可以选择工具发出的错误和警告，通过配置文件、命令行开关或在你的IDE中进行设置。Splint甚至可以让你在注释中注释你的代码，以便为其提供更好的关于程序如何工作的提示。
- en: If all else fails, and you find yourself looking for simple bugs or standards
    violations which are not caught by your compiler, IDE, or lint tools, then you
    can always roll your own static checker. This is not as difficult as it might
    sound. Most languages, particularly ones branded *dynamic*, expose their abstract
    syntax tree and compiler tools as part of their standard library. It is well worth
    getting to know the dusty corners of standard libraries that are used by the development
    team of the language you are using, as these often contain hidden gems that are
    useful for static analysis and dynamic testing. For example, the Python standard
    library contains a disassembler which tells you the bytecode used to generate
    some compiled code or code object. This sounds like an obscure tool for compiler
    writers on the python-dev team, but it is actually surprisingly useful in everyday
    situations. One thing this library can disassemble is your last stack trace, giving
    you feedback on exactly which bytecode instruction threw the last uncaught exception.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切都失败了，你发现自己在寻找编译器、IDE或lint工具未捕捉到的简单错误或标准违规，那么你总是可以自己编写静态检查器。这并不像听起来那么困难。大多数语言，特别是那些被标记为*动态*的语言，将其抽象语法树和编译器工具作为标准库的一部分暴露出来。值得深入了解你正在使用的语言开发团队常用的标准库中的角落，因为这些常常包含对静态分析和动态测试有用的隐藏宝藏。例如，Python标准库包含一个反汇编器，可以告诉你生成某些编译代码或代码对象所使用的字节码。这听起来像是python-dev团队编译器编写者的一种冷僻工具，但实际上在日常情况下非常有用。这个库可以反汇编的其中一件事就是你的最后一个堆栈跟踪，为你提供关于最后一个未捕获异常抛出的确切字节码指令的反馈。
- en: So, don't let testing be the end of your quality assurance — take advantage
    of analysis tools and don't be afraid to roll your own.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不要让测试成为你质量保证的终点 —— 利用分析工具，并且不要害怕自己动手。
- en: By [Sarah Mount](http://programmer.97things.oreilly.com/wiki/index.php/Sarah_Mount)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Sarah Mount](http://programmer.97things.oreilly.com/wiki/index.php/Sarah_Mount)
