- en: Async code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步代码
- en: Async code
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步代码
- en: Async code is code that isn't done immediately when being called.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 异步代码是在调用时不立即完成的代码。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '3s seconds in the future the timeout is done and `do stuff` is echoed to the
    screen. We can see that the anonymous function we provide is being triggered when
    time has passed. Now for another more revealing example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 3 秒后，超时结束，`做一些事情`被回显到屏幕上。我们可以看到，我们提供的匿名函数在时间过去后被触发。现在来看另一个更具启发性的例子：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Other example of callback code are events here demonstrated by a `jQuery` example
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 回调代码的另一个示例是事件，这里通过一个`jQuery`示例演示
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The gist of callbacks and async in general is that one or more methods are invoked
    sometime in the future, unknown when.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 回调和异步的要点是，将来的某个时候会调用一个或多个方法，但不知道何时。
- en: The Problem
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: So we established a callback can be a timer, ajax code or even an event but
    what is the problem with all that?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们确定了回调可以是一个定时器，ajax 代码，甚至是一个事件，但所有这些都有什么问题？
- en: One word **Readability**
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个词 **可读性**
- en: Imagine doing the following code
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下执行以下代码
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The output could very well be
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 输出很可能是
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Because the async method may take a long time to finish. There is really no
    way of knowing by looking at it when something finish. The problem is if we care
    about order so that we get 1,2,3,4
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因为异步方法可能需要很长时间才能完成。没有办法通过查看它来知道什么时候完成。问题是如果我们关心顺序，这样我们就得到了1,2,3,4
- en: We might resort to a callback making it look like
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会使用回调，使其看起来像
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'At this point it is readable, somewhat but imagine we have only async code
    then it might look like:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，它是可读的，但是想象一下如果我们只有异步代码，那么它可能看起来像：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Also known as `callback hell`, pause for effect :)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 也被称为`回调地狱`，请暂停一下作用 :)
- en: For that reason promises started to exist so we got code looking like
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个原因，承诺开始存在，所以我们得到了看起来像这样的代码
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is great for `Request/Response` patterns but for more advanced async scenarios
    I dare say only Rxjs fits the bill.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于`请求/响应`模式非常有用，但对于更高级的异步场景，我敢说只有 Rxjs 符合要求。
