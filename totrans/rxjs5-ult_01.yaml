- en: Async code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Async code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Async code is code that isn't done immediately when being called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '3s seconds in the future the timeout is done and `do stuff` is echoed to the
    screen. We can see that the anonymous function we provide is being triggered when
    time has passed. Now for another more revealing example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Other example of callback code are events here demonstrated by a `jQuery` example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The gist of callbacks and async in general is that one or more methods are invoked
    sometime in the future, unknown when.
  prefs: []
  type: TYPE_NORMAL
- en: The Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So we established a callback can be a timer, ajax code or even an event but
    what is the problem with all that?
  prefs: []
  type: TYPE_NORMAL
- en: One word **Readability**
  prefs: []
  type: TYPE_NORMAL
- en: Imagine doing the following code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The output could very well be
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Because the async method may take a long time to finish. There is really no
    way of knowing by looking at it when something finish. The problem is if we care
    about order so that we get 1,2,3,4
  prefs: []
  type: TYPE_NORMAL
- en: We might resort to a callback making it look like
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point it is readable, somewhat but imagine we have only async code
    then it might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Also known as `callback hell`, pause for effect :)
  prefs: []
  type: TYPE_NORMAL
- en: For that reason promises started to exist so we got code looking like
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This is great for `Request/Response` patterns but for more advanced async scenarios
    I dare say only Rxjs fits the bill.
  prefs: []
  type: TYPE_NORMAL
