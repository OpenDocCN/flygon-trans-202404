- en: Notes for October 28 class -- Introduction to splines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Splines**'
  prefs: []
  type: TYPE_NORMAL
- en: There are many reasons we might want to create smooth controllable curves in
    computer graphics. Perhaps we might want to create an organic shape, or animate
    something along a continuous path.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As you can see on the right, we can do this by breaking down our smooth curve
    into simpler pieces.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If we think of the spline curve as a path of motion, each of these pieces must
    match its neighbors in both position and rate, which means that for each coordinate
    x and y, we need four values: a position at both the start and the end, and a
    rate (or derivative) at both the start and the end.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The smallest order polynomial that can satisfy four constraints is a cubic.
    So we describe both the x and y coordinates of each piece using *parametric cubic*
    polynomials in parameter t:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: x = a[x]t³ + b[x]t² + c[x]t + d[x]
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: y = a[y]t³ + b[y]t² + c[y]t + d[y]
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: where (a[x], b[x], c[x], d[x]) and (a[y], b[y], c[y], d[y]) are constant valued
    polynomial coefficients, and t varies from t = 0 to t = 1 along the curve.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/58dfff5a34d20d5eb61496590e9cf6d5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Cubic splines**'
  prefs: []
  type: TYPE_NORMAL
- en: Although it is technically true that cubic splines can be designed by tweaking
    their polynial coefficients, in practice that doesn't usually work out very well.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As you can see in the example on the right, there is no intuitive connection
    between the shape of a cubic polynomial and the values of its four coefficients
    -- in this case 7.7, -11.7, 5.0 and -0.6, respectively, for the t³, t², t and
    constant term.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For that reason, we need a better way to specify cubic spline curves. Rather
    than use t³, t², t and 1 as our four *basis functions*, we can use four different
    basis functions that have a more intuitive geometric meaning.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the following sections we will look at two different examples of such alternate
    basis functions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/3c1764f8daaad2843052d6b385876523.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Hermite splines, part 1**'
  prefs: []
  type: TYPE_NORMAL
- en: We can choose four basis functions that give us independent control over the
    position at t = 0 and t = 1, as well as the rate of change at t = 0 and t = 1.
    This is called the *Hermite* basis, after the french mathematician who devised
    it.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If we want a curve with position A at t = 0, position B at t = 1, rate C at
    t = 0, and rate D at t = 1, we can use the four functions to the right to compute
    the cubic polynomial we are looking for.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Position**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cf758b246a46d380d60053793df7d17e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 2t³ - 3t² + 1
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/93d2ea2fa000677dac5db2b4fa6893f6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: -2t³ + 3t²
  prefs: []
  type: TYPE_NORMAL
- en: '**Rate**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/571327def8e93af6359631933d043637.jpg)'
  prefs: []
  type: TYPE_IMG
- en: t³ - 2t² + t
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c7e9594ebb65c8968e7c53d5ff40db70.jpg)'
  prefs: []
  type: TYPE_IMG
- en: t³ - t²
  prefs: []
  type: TYPE_NORMAL
- en: '**Hermite splines, part 2**'
  prefs: []
  type: TYPE_NORMAL
- en: Because these four hermite basis polynomials never change, and the cubic polynomial
    we want is just a weighted sum of those four polynomials, we can express this
    weighted sum as a multiplication of the weights by a matrix, which we call the
    *Hermite matrix*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In other words, the expression:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A (2t³ - 3t² + 1) + B (-2t³ + 3t²) + C (t³ - 3t² + t) + D (t³ - t²)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'can be expressed as a matrix vector product:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: = ![](../Images/93fc814da6f9c0086609cc9b9ef12c03.jpg)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'to convert positions and rates at the two ends into the desired cubic polynomial:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: at³ + bt² + ct + d.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Bezier splines, part 1**'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Artists and designers often find it more convenient to create splines by moving
    points around, rather than needing to deal with derivatives. The *Bezier* spline
    enables designers of spline curves to work this way.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bezier splines work by repeated linear interpolation. For example, the image
    to the right shows a simplified version of a Bezier spline, using three key points
    to specify a parametric quadratic spline.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note that points along the curve are found as a linear interpolation of linear
    interpolations. We first find points along the edges AB and BC by linear interpolations
    (to get the points represented as blue dots):'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: (1-t) A + t B
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: (1-t) B + t C
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'and then we interpolate again (to get the point represented as a red dot):'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: P = (1-t) ( (1-t) A + t B ) + t ( (1-t) B + t C )
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If we multiply out all the terms, we get:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: A (1-t)² + 2 B (1-t) t + C t²
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that the weights of the coefficients (1 2 1) follow Pascal's triangle.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/dc3514f77746830f48aaf1558dd7b12a.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Bezier splines, part 2**'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now it becomes easier to see what is going on with the full parametric cubic
    Bezier spline, which uses four key points: The basic set-up is a linear interpololation
    of linear interpolations of linear interpolations.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'So we start with the points in blue:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: P = (1-t) A + t B
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Q = (1-t) B + t C
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: R = (1-t) C + t D
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When the first and second terms are linearly interpolated, we get the two dots
    in violet:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: S = (1-t) P + t Q
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: T = (1-t) Q + t R
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Finally we linearly interpolate these two points: (1-t) S + t T'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When we multiply everything out, writing the equation in terms of our original
    four key points A,B,C and D, the weights form the next level (1 3 3 1) of Pascal''s
    triangle:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: A (1-t)³ + 3 B (1-t)² t + 3 C (1-t) t² + D t³
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/4fb000bf4b1803a69a0bad3ad3efe938.jpg)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Bezier splines, part 3**'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We can multiply out the terms of the above polynomial, and regroup by powers
    of t, to get:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: (-A + 3B - 3C + D) t³ + (3A - 6B + 3C) t² + (-3A + 3B) t + D
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This makes it easy to see that, as was the case for Hermite splines, the Bezier
    spline has a characteristic matrix, which can be used to translate the above polynomial
    until the standard cubic polynomial, with coefficients, (a,b,c,d):'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: = ![](../Images/b829c69876f77a7317398754625949bc.jpg) A
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: One powerful property of Bezier splines is that the direction between A and
    B determines the direction of the spline curve at t=0, and the direction between
    C and D determines the direction of the spline curve at t=1.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: This makes it easy to match up splines end-to-end, so that the resulting composite
    curve has a continuous derivative.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Perspective**'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As we mentioned in class, you can implement perspective by doing the following
    just before you do the viewport transform:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Translate all vertices by (0,0,-f), so that your scene is centered at z=-f,
    where f is the "focal length" of the virtual camera.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Apply the following transformation to each vertex:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: x → fx/z
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: y → fy/z
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: z → f/z
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As I mentioned in class, we know that step 2 above is a linear transformation,
    because it is equivalent to the following matrix transformation:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1 0 0 0 0 1 0 0 0 0 0 1 0 0 1/f 0
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Object hierarchy**'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'I am not going to ask you to do anything yet with object hierarchy for your
    homework this week, but I do want you to understand what it is. Essentially, we
    can describe an entire renderable scene as a tree of objects, each of which has
    the following structure:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Homework, due by start of class on Wednesday November 4**'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Animate the shapes you have already made by using time-varying spline curves,
    using both Hermite and the Bezier techniques. You can use the values of the splines
    to feed into the parameters of the translate, rotate and scale primitives that
    you have already implemented.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Use your spline-based animation software to make interesting and compelling
    animations. Do perspective.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Create your own curve editor, to create either Hermite or Bezier based curves.
    Your editor should allow users to add, move, and delete key points, and should
    allow users to specify whether two adjoining spline curves have matching derivatives.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Use your editor to create interesting shapes, such as outlines of animals, letters
    from fonts, or something that you think would be cool and fun.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
