- en: CSE 331 Software Design and Implementation
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: CSE 331 软件设计与实现
- en: Java Style Guide
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java风格指南
- en: 'Contents:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 目录：
- en: '[Overview](#overview)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[概述](#overview)'
- en: '[Descriptive names](#names)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[描述性名称](#names)'
- en: '[Consistent indentation and spacing](#indentation)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一致的缩进和间距](#indentation)'
- en: '[Local variables](#local-variables)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[局部变量](#local-variables)'
- en: '[Types](#types)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[类型](#types)'
- en: '[Generics](#generics)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[泛型](#generics)'
- en: '[Type casting](#casting)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[类型转换](#casting)'
- en: '[Informative comments](#comments)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[信息性注释](#comments)'
- en: '[Javadoc comments](#Javadocs)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Javadoc注释](#Javadocs)'
- en: '[TODO comments](#TODO)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TODO注释](#TODO)'
- en: '[Commenting out code](#Commenting)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[注释掉的代码](#Commenting)'
- en: '[Documenting Code](#Documenting-Code)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[文档化代码](#Documenting-Code)'
- en: '[Specification-level comments](#Specification-comments)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[规范级别注释](#Specification-comments)'
- en: '[Implementation-level comments](#Implementation-comments)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[实现级别注释](#Implementation-comments)'
- en: Overview
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: Coding style is an important part of good software engineering practice. The
    goal is to write code that is clear and easy to understand, reducing the effort
    required to make future extensions or modifications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 编码风格是良好软件工程实践的重要组成部分。目标是编写清晰易懂的代码，减少未来扩展或修改所需的工作量。
- en: In CSE 331 we do not specify a detailed coding style that you must follow. However,
    we expect your code to be clear and easy to understand. This handout provides
    overall guidelines within which you should develop your own effective coding style.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSE 331中，我们不指定必须遵循的详细编码风格。但是，我们期望你的代码清晰易懂。本手册提供了总体指导，你应该在其中发展自己的有效编码风格。
- en: Many other style guides are available. For example, you can see Oracle's [Code
    Conventions for the Java Programming Language](http://www.oracle.com/technetwork/java/codeconv-138413.html)
    or Michael Ernst's document about [coding conventions](http://homes.cs.washington.edu/~mernst/advice/coding-style.html),
    which complements this document. We do not require you to follow those guidelines
    slavishly — they are just one way to write your code in a comprehensible fashion
    — but you might consider them while developing your own style. Even more valuable
    than coding style guides are descriptions of good ways to design and write code.
    For Java programmers, Josh Bloch's book *Effective Java* is an excellent choice.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他风格指南可供参考。例如，你可以查看Oracle的[Java编程语言的代码约定](http://www.oracle.com/technetwork/java/codeconv-138413.html)或Michael
    Ernst关于[编码约定](http://homes.cs.washington.edu/~mernst/advice/coding-style.html)的文档，这些文档与本文档相辅相成。我们不要求你盲目遵循这些指南——它们只是编写代码的一种可理解的方式——但在开发自己的风格时，你可能会考虑它们。比编码风格指南更有价值的是关于设计和编写代码的良好方法的描述。对于Java程序员，Josh
    Bloch的书*Effective Java*是一个很好的选择。
- en: Descriptive names
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述性名称
- en: Names for packages, types, variables, and branch labels should document their
    meaning and/or use. This does not mean that names need to be very long. For example,
    names like *i* and *j* are fine for indexes in short loops, since programmers
    understand the meanings and uses of these variables by convention.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 包、类型、变量和分支标签的名称应记录它们的含义和/或用途。这并不意味着名称需要很长。例如，在短循环中，像*i*和*j*这样的名称对于索引是可以的，因为程序员通过约定了解这些变量的含义和用途。
- en: 'You should follow the standard Java convention of capitalizing names of classes,
    but starting method, field, variable, and package names with a lower case letter.
    Constants are named using all uppercase letters. The Java Language Specification
    provides some common [Naming Conventions](http://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.1-120)
    that you may want to use when naming your classes, methods, etc. Also see *Effective
    Java* item #56.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该遵循标准的Java约定，即将类名大写，但将方法、字段、变量和包名以小写字母开头。常量使用全大写字母命名。Java语言规范提供了一些常见的[Naming
    Conventions](http://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.1-120)，在为类、方法等命名时可能会用到。还请参阅*Effective
    Java*第56条。
- en: Consistent indentation and spacing
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一致的缩进和间距
- en: Indenting code consistently makes it easy to see where `if` statements and `while`
    loops end, etc. You should choose consistent strategies; for example, be consistent
    about whether you put the open curly brace on the same line as the *if* or on
    the next line, or what your try-catch-finally blocks look like. Examine the staff-supplied
    code, and the code printed in books, for sample styles; feel free to develop your
    own if it makes you more comfortable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一致缩进代码使得很容易看出`if`语句和`while`循环的结束等。你应该选择一致的策略；例如，一致地将开放的大括号放在与*if*相同行或下一行，或者你的try-catch-finally块是什么样子的。查看由工作人员提供的代码，以及书中打印的代码，了解示例样式；如果让你更舒适，可以自由发展自己的风格。
- en: In Eclipse, `Ctrl-F` will indent your code, according to its built-in indentation
    rules (which you may or may not like).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Eclipse 中，`Ctrl-F`将根据其内置缩进规则缩进您的代码（您可能会或不会喜欢）。
- en: Consistent (and adequate) horizontal spacing also helps the reader. There is
    no reason to try to save a column or two by eliminating spaces. You should leave
    a space after the comma that separates method arguments. You should leave a space
    between `for`, `if`, or `while` and the following open parenthesis; otherwise,
    the statement looks too much like a method call, which is confusing. In general,
    you should place only one statement on each line. Remember that people reading
    your code may have a monitor of a different width, or may choose to print your
    code for a code review (the TAs may do this!). 80 columns is a commonly-accepted
    width in industry, and we require this for the convenience of the TAs when marking
    up your printouts. A longer line once in a while is acceptable, but not as a general
    rule. When you break lines, do so at logical, not arbitrary, locations.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一致（且充分）的水平间距也有助于读者。没有理由试图通过消除空格来节省一两列。在分隔方法参数的逗号后应留有一个空格。在`for`、`if`或`while`与后面的开括号之间应留有一个空格；否则，该语句看起来太像一个方法调用，这会令人困惑。一般来说，每行只应放置一个语句。请记住，阅读您的代码的人可能有不同宽度的显示器，或者可能选择打印您的代码进行代码审查（助教可能会这样做！）。80列是行业中普遍接受的宽度，我们要求这样做是为了方便助教在标记您的打印输出时。偶尔出现较长的行是可以接受的，但不应作为一般规则。当您换行时，请在逻辑位置而非任意位置进行。
- en: 'Code files should never contain tab characters. They format differently in
    different IDEs, when printed, etc. A decent IDE should not insert tab characters
    in code files, or at least should have a setting that uses spaces instead. In
    Eclipse, do the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 代码文件中不应包含制表符。它们在不同的 IDE 中格式化方式不同，在打印时也不同。一个体面的 IDE 不应在代码文件中插入制表符，或者至少应该有一个设置来使用空格代替。在
    Eclipse 中，执行以下操作：
- en: Go to Window > Preferences > Java > Code Style > Formatter
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到窗口 > 首选项 > Java > 代码风格 > 格式化程序
- en: Create a new profile (if you haven't before -- you can't change the default
    Eclipse profiles, and they use tabs)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新配置文件（如果您以前没有 —— 您无法更改默认的 Eclipse 配置文件，并且它们使用制表符）
- en: Set "Tab Policy" to Spaces only
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“制表符策略”设置为仅使用空格
- en: Ctrl+Shift+F will reformat the current file to these settings
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ctrl+Shift+F 将按照这些设置重新格式化当前文件
- en: You can temporarily enable `General > Editors > Text Editors > show whitespace`
    to verify that it converts the tabs to spaces.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以临时启用`常规 > 编辑器 > 文本编辑器 > 显示空格`来验证它是否将制表符转换为空格。
- en: Local variables
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 局部变量
- en: Local variables should have the smallest possible scope. Don't declare it at
    the beginning of the method and then have a lot of unrelated code intervening
    between its declaration and its first use. As another example, if you have a variable
    that is used within each loop iteration, declare it inside the loop to make clear
    to readers that there are no loop-carried dependencies.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 局部变量应具有尽可能小的作用域。不要在方法开头声明它，然后在其声明和第一次使用之间有很多不相关的代码。另一个例子是，如果您有一个在每次循环迭代中使用的变量，请在循环内部声明它，以便向读者明确表明没有循环依赖。
- en: 'Also see *Effective Java* item #45.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅*Effective Java*第45条。
- en: Types
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型
- en: Generics
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 泛型
- en: A type parameter must be supplied whenever a generic type is used. Never use
    a so-called "raw" type such as `List`, but instead use `List<Integer>` or the
    like.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每当使用泛型类型时必须提供类型参数。永远不要使用所谓的“原始”类型，如`List`，而应使用`List<Integer>`或类似的类型。
- en: All code must compile without warnings using `javac -g -Xlint`, without use
    of `@SuppressWarnings` except as permitted below.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码必须使用`javac -g -Xlint`编译而无警告，不得使用`@SuppressWarnings`，除非下面允许。
- en: Type casting
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型转换
- en: As a general rule, you should never have type casts in code you write (especially
    that for CSE 331). Casts are a work-around that hides information from the type
    system and prevents the compiler from flagging real bugs in your code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一般规则是，您不应该在您编写的代码中使用类型转换（尤其是 CSE 331 的代码）。类型转换是一种隐藏信息并阻止编译器标记代码中真正错误的解决方法。
- en: '*However*, there are some over-broad legacy interfaces in the Java library
    that require the use of casts. These were, in general, written in Java''s dim
    past before it had the powerful type system it has today — some of these interfaces
    are quite widely used, however. Implementing these “over-broad” interfaces is
    an acceptable reason to use type casts.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*然而*，在 Java 库中存在一些过于宽泛的遗留接口，需要使用类型转换。这些接口通常是在 Java 拥有今天强大类型系统之前编写的 —— 其中一些接口被广泛使用。实现这些“过于宽泛”的接口是使用类型转换的一个可以接受的理由。'
- en: 'The following is a fairly complete list of interfaces in the Java API that
    require casts. Unless you are implementing one of these, there should probably
    be no type casts in your code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Java API 中需要进行类型转换的接口的相当完整列表。除非你正在实现其中之一，否则你的代码中可能不需要类型转换：
- en: 'All implementations of:'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所有的实现：
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Object.equals()](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object))'
  id: totrans-47
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Object.equals()](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object))'
- en: ''
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Some (not all) implementations of:'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一些（不是全部）实现：
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Object.clone()](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#clone())'
  id: totrans-51
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Object.clone()](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#clone())'
- en: '[Collection.contains()](http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html#contains(java.lang.Object))
    (and subclasses of Collection, like [List](http://docs.oracle.com/javase/7/docs/api/java/util/List.html)
    and [Set](http://docs.oracle.com/javase/7/docs/api/java/util/Set.html))'
  id: totrans-52
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Collection.contains()](http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html#contains(java.lang.Object))（以及
    Collection 的子类，如[List](http://docs.oracle.com/javase/7/docs/api/java/util/List.html)和[Set](http://docs.oracle.com/javase/7/docs/api/java/util/Set.html)）'
- en: '[Collection.remove()](http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html#remove(java.lang.Object))
    (and subclasses)'
  id: totrans-53
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Collection.remove()](http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html#remove(java.lang.Object))（以及子类）'
- en: '[Map.containsKey()](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#containsKey(java.lang.Object))'
  id: totrans-54
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Map.containsKey()](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#containsKey(java.lang.Object))'
- en: '[Map.containsValue()](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#containsValue(java.lang.Object))'
  id: totrans-55
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Map.containsValue()](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#containsValue(java.lang.Object))'
- en: '[Map.get()](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#get(java.lang.Object))'
  id: totrans-56
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Map.get()](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#get(java.lang.Object))'
- en: '[Map.remove()](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#remove(java.lang.Object))'
  id: totrans-57
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Map.remove()](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#remove(java.lang.Object))'
- en: '[JComponent.paintComponent](http://download.oracle.com/javase/7/docs/api/javax/swing/JComponent.html#paintComponent(java.awt.Graphics))
    (casting the `Graphics` object is encouraged in the official Oracle tutorial)'
  id: totrans-58
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JComponent.paintComponent](http://download.oracle.com/javase/7/docs/api/javax/swing/JComponent.html#paintComponent(java.awt.Graphics))（在官方
    Oracle 教程中鼓励对`Graphics`对象进行类型转换）'
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'These may require *unchecked* casts (even worse!):'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这些可能需要*未经检查的*类型转换（更糟糕！）：
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[SortedMap.containsKey()](http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html)'
  id: totrans-62
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SortedMap.containsKey()](http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html)'
- en: '[SortedMap.containsValue()](http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html)'
  id: totrans-63
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SortedMap.containsValue()](http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html)'
- en: '[SortedMap.get()](http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html)'
  id: totrans-64
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SortedMap.get()](http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html)'
- en: '[SortedMap.remove()](http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html)'
  id: totrans-65
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SortedMap.remove()](http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html)'
- en: '[SortedSet.contains()](http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html)'
  id: totrans-66
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SortedSet.contains()](http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html)'
- en: '[SortedSet.remove()](http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html)'
  id: totrans-67
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SortedSet.remove()](http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html)'
- en: CSE 331 requires that your code compile cleanly when `javac` is run with the
    `-Xlint` flag. You may use the `@SuppressWarnings("unchecked")` annotation to
    suppress warnings about unchecked casts in the last list of methods above. Additionally,
    if the official Oracle Java tutorials tell you to use a cast, it's okay. Other
    than that, you may not use `@SuppressWarnings` in your code. And, whenever you
    use one, do document your justification.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: CSE 331 要求你的代码在使用`-Xlint`标志运行`javac`时能够干净编译。你可以使用`@SuppressWarnings("unchecked")`注解来抑制关于上述方法列表中未经检查的类型转换的警告。此外，如果官方的
    Oracle Java 教程告诉你要使用类型转换，那是可以的。除此之外，你不得在代码中使用`@SuppressWarnings`。而且，每当你使用一个时，都要记录你的理由。
- en: Informative comments
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信息性注释
- en: 'Don''t make the mistake of writing comments everywhere — a bad or useless comment
    is worse than no comment. If information is obvious from the code, adding a comment
    merely creates extra work for the reader. For example, this is a useless comment
    that would only help someone who does not know the programming language:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不要犯在任何地方都写注释的错误 —— 一个糟糕或无用的注释比没有注释更糟糕。如果信息从代码中显而易见，添加注释只会给读者增加额外的工作。例如，这是一个无用的注释，只会帮助那些不懂编程语言的人：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Good comments add information to the code in a concise and clear way. For example,
    comments are informative if they:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的注释以简洁明了的方式为代码添加信息。例如，如果注释具有信息性，那么它们应该：
- en: '*Enable the reader to avoid reading some code.* The following comment saves
    the reader the effort of figuring out the effect of some complicated formulas,
    and states the programmer''s intention so the formulas can be checked later on.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使读者避免阅读一些代码。* 以下注释节省了读者研究一些复杂公式的工作量，并说明了程序员的意图，以便稍后检查这些公式。'
- en: '[PRE1]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: An important application of this type of comment is to document the arguments
    and return values of methods so clients need not read the implementation to understand
    how to use the method.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种类型的注释的一个重要应用是记录方法的参数和返回值，这样客户端就不需要阅读实现来理解如何使用该方法。
- en: '*Explain an obscure step or algorithm.* This is especially important when the
    effects of some step are not immediately obvious in the code itself. You should
    explain tricky algorithms, operations with side effects, magic numbers in the
    code, etc.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*解释一个晦涩的步骤或算法。* 当某个步骤的效果在代码本身中不明显时，这一点尤为重要。你应该解释棘手的算法、具有副作用的操作、代码中的魔数等。'
- en: '[PRE2]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Record assumptions.* Under what assumptions does a piece of code work properly?'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*记录假设。* 代码在什么假设下才能正常工作？'
- en: '[PRE3]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Record limitations and incomplete code.* Frequently, the first version of
    code is incomplete; it is important to record which code is known to be incorrect.
    If you run out of time on an assignment and turn in a program that does not function
    correctly on all inputs, we will expect your code to show that you understand
    its limitations.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*记录限制和不完整的代码。* 经常情况下，代码的第一个版本是不完整的；记录哪些代码已知是不正确的是很重要的。如果你在作业时间内完成一个程序，但它不能正确处理所有输入，我们会期望你的代码表明你理解它的局限性。'
- en: '[PRE4]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Hints:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：
- en: Don't write code first and then comment it — comment it as you go along. It
    is easier to comment it while you are thinking about it and still remember its
    details, and you are unlikely to go back and do it later. In fact, it's best to
    comment the code *before* you write it — doing so may expose weaknesses in your
    ideas and save you time on the implementation.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要先编写代码，然后再加注释 — 边写代码边加注释。在思考代码时加注释会更容易记住细节，而且你不太可能回头再加注释。事实上，最好在编写代码*之前*加注释
    — 这样做可能会暴露你的想法中的弱点，并节省你在实现上的时间。
- en: We do not require you to write comments on every program piece. However, your
    grade depends substantially on the clarity of your code, and some piece of the
    program that seems clear to you may not be clear to the reader. Therefore, we
    *strongly* recommend that you add explanatory comments to all classes, fields,
    and methods, especially public ones — it will likely be to your advantage to do
    so.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不要求你在每个程序片段上写注释。然而，你的分数在很大程度上取决于你的代码清晰度，对你来说似乎清晰的程序片段可能对读者来说并不清晰。因此，我们*强烈*建议你为所有类、字段和方法添加解释性注释，特别是公共的
    — 这对你可能有利。
- en: Javadoc comments
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Javadoc注释
- en: Every class, every interface, every public method and field, and every nontrivial
    non-public method and field, should have an explanatory Javadoc comment. (Javadocs
    are useful even on non-public members, for two reasons. First, Javadoc has a special
    option that causes it to output documentation for all members, including private
    ones. You would never supply this to your clients, but it sure is helpful for
    the development team to have this handy. Second, an IDE such as Eclipse displays
    the Javadoc for a member when you hover over a use, and this is as useful for
    private and public members.)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类、每个接口、每个公共方法和字段，以及每个非平凡的非公共方法和字段，都应该有一个解释性的Javadoc注释。（即使在非公共成员上也很有用，有两个原因。首先，Javadoc有一个特殊选项，使其输出所有成员的文档，包括私有成员。你永远不会向客户提供这个，但对于开发团队来说，这确实很有帮助。其次，像Eclipse这样的IDE在你悬停在使用处时显示成员的Javadoc，这对私有和公共成员都很有用。）
- en: Comments should be grammatical English. If more than a few words, a comment
    should consist of complete sentences that start with a capital letter and end
    with a period.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注释应该是符合语法的英语。如果超过几个词，注释应该由以大写字母开头并以句点结尾的完整句子组成。
- en: '`HelloWorld` from HW3 has several Javadoc comments: at the top of the file,
    before the class declaration, before the `greeting` field, and before each method.
    You can tell that these are Javadoc comments because of where they appear in the
    code and because they start with **`/**`** instead of **`/*`**.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: HW3中的`HelloWorld`有几个Javadoc注释：在文件顶部，在类声明之前，在`greeting`字段之前，以及在每个方法之前。你可以通过这些Javadoc注释的位置和以**`/**`**开头而不是**`/*`**来判断它们是Javadoc注释。
- en: It is important to use this syntax to document your code so that your comments
    will appear in the HTML documentation generated by the Javadoc tool (this is how
    the documentation for [Oracle's API](http://docs.oracle.com/javase/7/docs/api/)
    is generated, as well). There are a number of [Javadoc Tags](http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#javadoctags)
    that get formatted in a special way when the HTML documentation is generated.
    You can identify these tags because they start with the **@** sign, such as **@param**
    and **@return**.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: For CSE 331, we use a few additional Javadoc tags that are not recognized by
    Oracle's Javadoc tool, such as **@requires**, **@modifies**, and **@effects**.
    So we need to use a special 331-specific version of Javadoc, which is described
    elsewhere.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: When someone else (such as your TA) is trying to understand your Java code,
    he or she will often first look at the generated Javadoc to figure out what it
    does. Thus, it is important that you check the generated HTML yourself to ensure
    that it clearly and accurately communicates the contracts of your code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: TODO comments
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to leave yourself a note about a piece of code that you need to
    fix, preface the comment with TODO. You will notice that TODO will appear in bold
    and that if you do Window > Show View > Tasks, then a “Tasks” pane will come up
    with all of the things you have left yourself TODO. You can jump to these points
    in your code quickly by double-clicking on them in the “Tasks” pane.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Commenting out code
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, you want to temporarily or permanently comment out some code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Java has two ways to write comments: `/*`...`*/` comments out everything between
    the comment delimiters, and `//` starts a comment that ends at the end of the
    line. You should use `//` to comment out code. Reserve `/*`...`*/` comments for
    [Javadoc comments](#Javadocs), in which case the opening tag should have an additional
    asterisk: `/**`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: In Eclipse, you can comment out a block of code by highlighting the region and
    pressing **Ctrl+/**. Use **Ctrl+\** to uncomment code in Eclipse.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of this section explains why you should use line comments such as
    `//` instead of block comments such as `/*`...`*/`: because block comments do
    not nest. For example, if you already did:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But then you wanted to comment out the creation of variables `b` and `c` using
    a block comment, you would have:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '(The two block comment characters that have been added are in red and the code
    that is commented out by the new block comment is underlined.) Notice that this
    failed to comment out the statement where `c` is created. Also, this code will
    no longer compile because there is a **`*/`** dangling by itself after the definition
    of `c`. This may seem easy to fix now, but if you have commented a large block
    of code, it may be a pain to find the nested block comment that is causing the
    compilation error. You can avoid this mess entirely by using the `//` comment:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This also makes it easier to uncomment smaller blocks of commented regions.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这也使得取消较小的已注释区域更容易。
- en: Documenting Code
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档化代码
- en: Specification-level comments
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规范级别的注释
- en: '**Abstract data types.** Every abstract data type (class or interface) should
    have:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**抽象数据类型。** 每个抽象数据类型（类或接口）都应具有：'
- en: An **overview** section that gives a one or two line explanation of what objects
    of the type represent and whether they are mutable.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个**概述**部分，简要解释该类型对象代表什么以及它们是否可变。
- en: A list of **specification fields**. There might be only one; for example, a
    set may have the field *elems* representing the set of elements. Each field should
    have a name, a type, and a short explanation. You may find it useful to define
    extra **derived fields** that make it easier to write the specifications of methods;
    for each of these, you should indicate that it is derived and say how it is obtained
    from the other fields. There may be **specification invariants** that constrain
    the possible values of the specification fields; if so, you should specify them.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个**规范字段列表**。可能只有一个；例如，一个集合可能有表示元素集的字段*elems*。每个字段应具有名称、类型和简短解释。您可能会发现定义额外的**派生字段**会更容易编写方法的规范；对于这些字段中的每一个，您应指出它是派生的，并说明它是如何从其他字段中获得的。可能会有**规范不变量**来约束规范字段的可能值；如果有的话，您应该指定它们。
- en: '**Method Specifications.** All public methods of classes should have specifications;
    tricky private methods should also be specified. Method specifications should
    follow the *requires, modifies, throws, effects, returns* structure described
    in the course material on specifications. Note that for CSE 331, you may assume
    arguments are non-null unless otherwise specified.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法规范。** 所有类的公共方法都应有规范；复杂的私有方法也应该被指定。 方法规范应遵循课程资料中描述的*requires, modifies,
    throws, effects, returns*结构。请注意，在CSE 331中，除非另有规定，否则可以假定参数为非空。'
- en: Implementation-level comments
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现级别的注释
- en: '**Implementation notes.** Class comments should include the following elements:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**实现注意事项。** 类注释应包括以下元素：'
- en: An **abstraction function** that defines each specification field in terms of
    the representation fields. Abstraction functions are only required for classes
    which are abstract data types, and not for classes like exceptions or some GUI
    widgets.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个将每个规范字段定义为表示字段的**抽象函数**。抽象函数仅对抽象数据类型的类是必需的，对于异常或某些GUI小部件等类则不是必需的。
- en: A **representation invariant**. RIs are required for any class that has a representation
    (e.g., not most exceptions). We strongly recommend that you test invariants in
    a `checkRep()` method where feasible. Take care to include in your invariants
    assumptions about what can and cannot be null.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个**表示不变量**。对于任何具有表示的类（例如，不是大多数异常），都需要RI。我们强烈建议您在可能的情况下在`checkRep()`方法中测试不变量。请注意，在您的不变量中包含关于什么可以和不能为null的假设。
- en: 'For classes with complex representations, a note explaining the **choice of
    representation** (also called the **representation rationale**): what tradeoffs
    were made and what alternatives were considered and rejected (and why).'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于具有复杂表示的类，解释**表示选择**（也称为**表示原理**）的说明：做出了什么权衡，考虑了什么替代方案并拒绝了（以及为什么）。
- en: '**Runtime assertions.** These should be used judiciously, as explained in lecture.
    For a longer discussion of the how runtime assertions can improve the quality
    of your code, see *Writing Solid Code* by Steve Maguire, Microsoft Press, 1995.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行时断言。** 应该谨慎使用，如讲座中所解释的。有关运行时断言如何提高代码质量的更长讨论，请参阅Steve Maguire的《编写可靠代码》，Microsoft
    Press，1995年。'
