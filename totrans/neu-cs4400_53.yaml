- en: Alternative Church EncodingTuesday, February 21st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替代 Church 编码星期二，2月21日
- en: Finally, note that this is just one way to encode things — other encodings are
    possible. One alternative encoding is in the following code — it uses a list of
    `N` falses as the encoding for `N`. This encoding makes it easier to `add1` (just
    `cons` another `#f`), and to `sub1` (simply `cdr`). The tradeoff is that some
    arithmetics operations becomes more complicated, for example, the definition of
    `+` requires the fixpoint combinator. (As expected, some people want to see what
    can we do with a language without recursion, so they don’t like jumping to Y too
    fast.)
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意这只是编码的一种方式 — 还有其他可能的编码方式。另一种替代编码在以下代码中 — 它使用一个`N`个`#f`的列表作为`N`的编码。这种编码使得`add1`更容易（只需`cons`另一个`#f`），而`sub1`更容易（简单地`cdr`）。权衡是一些算术运算变得更加复杂，例如，`+`的定义需要不动点组合子。（正如预期的那样，有些人想看看在没有递归的语言下我们能做些什么，所以他们不喜欢太快地跳到
    Y。）
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Another interesting way to implement lists follows the pattern matching approach,
    where both pairs and the null value are represented by a function that serves
    as a kind of a `match` dispatcher. This function takes in two inputs — if it is
    the representation of null then it will return the first input, and if it is a
    pair, then it will apply the second input on the two parts of the pair. This is
    implemented as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 实现列表的另一种有趣方法是遵循模式匹配方法，其中对对和空值都由充当一种`match`分发器的函数表示。此函数接受两个输入 — 如果它是空值的表示，则将返回第一个输入，如果是对，则将在对的两个部分上应用第二个输入。这是如何实现的：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This might seem awkward, but it follows the intended use of pairs and null
    as a match-like construct. Here is an example, with the equivalent Racket code
    on the side:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来有些奇怪，但它遵循了对对和空值作为匹配类似构造的预期用法。这是一个例子，并附上了等效的 Racket 代码：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In fact, it’s easy to implement our selectors and predicate using this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，使用这种方法实现我们的选择器和谓词很容易：
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The same approach can be used to define any kind of new data type in a way
    that looks like our own `define-type` definitions. For example, consider a much-simplified
    definition of the AE type we’ve seen early in the semester, and a matching `eval`
    definition as an example for using `cases`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的方法可以用于以类似我们自己的`define-type`定义的方式定义任何类型的新数据类型。例如，考虑我们在学期初看到的 AE 类型的更简化的定义，以及用于使用`cases`的匹配`eval`定义作为示例：
- en: '[PRE4]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can follow the above approach now to write Schlac code that more than being
    equivalent, it’s also very similar in nature. Note that the type definition is
    replaced by two definitions for the two constructors:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以按照上述方法编写 Schlac 代码，不仅等效，而且在性质上也非常相似。请注意，类型定义被两个构造函数的定义所替代：
- en: '[PRE5]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
