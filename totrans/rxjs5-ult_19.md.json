["```\nRx.Observable.interval([ms]) \n```", "```\nRx.Observable.interval(100)\n\n// generates forever \n```", "```\nRx.Observable.interval(1000).take(3)\n\n// generates 1,2,3 \n```", "```\nRx.Observable.timer([initial delay],[thereafter]) \n```", "```\nlet stream$ = Rx.Observable.timer(1000);\n\nstream$.subscribe(data => console.log(data));\n\n// generates 0 after 1 sec \n```", "```\nlet moreThanOne$ = Rx.Observable.timer(2000, 500).take(3);\n\nmoreThanOne$.subscribe(data => console.log('timer with args', data));\n\n// generate 0 after 2 sec and thereafter 1 after 500ms and 2 after additional 500ms \n```", "```\nvar start = new Date();\nlet stream$ = Rx.Observable.interval(500).take(3);\n\nstream$\n.delay(300)\n.subscribe((x) => {\n    console.log('val',x);\n    console.log( new Date() - start );\n})\n\n//0 800ms, 1 1300ms,2 1800ms \n```", "```\nconst btn = document.getElementById('btnIgnore');\nvar start = new Date();\n\nconst input$ = Rx.Observable\n  .fromEvent(btn, 'click')\n\n  .sampleTime(2000);\n\ninput$.subscribe(val => {\n  console.log(val, new Date() - start);\n}); \n```", "```\nconst input = document.getElementById('input');\n\nconst example = Rx.Observable\n  .fromEvent(input, 'keyup')\n  .map(i => i.currentTarget.value);\n\n//wait 0.5s, between keyups, throw away all other values\nconst debouncedInput = example.debounceTime(500);\n\nconst subscribe = debouncedInput.subscribe(val => {\n  console.log(`Debounced Input: ${val}`);\n}); \n```", "```\n.buffer( whenToReleaseValuesStartObservable )\n\nor\n\n.buffer( whenToReleaseValuesStartObservable, whenToReleaseValuesEndObservable ) \n```", "```\nlet scissor$ = Rx.Observable.interval(500)\n\nlet emitter$ = Rx.Observable.interval(100).take(10) // output 10 values in total\n.buffer( scissor$ )\n\n// [0,1,2,3,4] 500ms [5,6,7,8,9] \n```", "```\n--- c --- c - c --- >\n-------| ------- |- >\nResulting stream is :\n------ r ------- r r  -- > \n```", "```\n $('#btn').bind('click', function(){\n  if(!start) { start = timer.start(); }\n  timePassedSinceLastClickInMs = now - start;\n  if(timePassedSinceLastClickInMs < 250) {\n     console.log('double click');\n\n  } else {\n     console.log('single click')\n  }\n\n  start = timer.start();  \n}) \n```", "```\n---- c ---- c ----- c ----- > \n```", "```\n --- c - c ------ c -- c -- c ----- c \n```", "```\nlet clicks$ = Rx.Observable.fromEvent(document.getElementById('btn'), 'click');\n\nlet scissor$ = Rx.Observable.interval(300);\n\nclicks$.buffer( scissor$ )\n      //.filter( (clicks) => clicks.length >=2 )\n      .subscribe((value) => {\n          if(value.length === 1) {\n            console.log('single click')\n          }\n          else if(value.length === 2) {\n            console.log('double click')\n          }\n          else if(value.length === 3) {\n            console.log('triple click')\n          }\n\n      }); \n```"]