- en: '"Why use F#?" in one page'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although F# is great for specialist areas such as scientific or data analysis,
    it is also an excellent choice for enterprise development. Here are five good
    reasons why you should consider using F# for your next project.
  prefs: []
  type: TYPE_NORMAL
- en: '![](glyphicons_030_pencil.png) Conciseness'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: F# is not cluttered up with [coding "noise"](fvsc-sum-of-squares.html) such
    as curly brackets, semicolons and so on.
  prefs: []
  type: TYPE_NORMAL
- en: You almost never have to specify the type of an object, thanks to a powerful
    [type inference system](conciseness-type-inference.html).
  prefs: []
  type: TYPE_NORMAL
- en: And, compared with C#, it generally takes [fewer lines of code](fvsc-download.html)
    to solve the same problem.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](glyphicons_343_thumbs_up.png) Convenience'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many common programming tasks are much simpler in F#. This includes things like
    creating and using [complex type definitions](conciseness-type-definitions.html),
    doing [list processing](conciseness-extracting-boilerplate.html), [comparison
    and equality](convenience-types.html), [state machines](designing-with-types-representing-states.html),
    and much more.
  prefs: []
  type: TYPE_NORMAL
- en: And because functions are first class objects, it is very easy to create powerful
    and reusable code by creating functions that have [other functions as parameters](conciseness-extracting-boilerplate.html),
    or that [combine existing functions](conciseness-functions-as-building-blocks.html)
    to create new functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](glyphicons_150_check.png) Correctness'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: F# has a [powerful type system](correctness-type-checking.html) which prevents
    many common errors such as [null reference exceptions](the-option-type.html#option-is-not-null).
  prefs: []
  type: TYPE_NORMAL
- en: Values are [immutable by default](correctness-immutability.html), which prevents
    a large class of errors.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you can often encode business logic using the [type system](correctness-exhaustive-pattern-matching.html)
    itself in such a way that it is actually [impossible to write incorrect code](designing-for-correctness.html)
    or mix up [units of measure](units-of-measure.html), greatly reducing the need
    for unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](glyphicons_054_clock.png) Concurrency'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: F# has a number of built-in libraries to help when more than one thing at a
    time is happening. Asynchronous programming is [very easy](concurrency-async-and-parallel.html),
    as is parallelism.
  prefs: []
  type: TYPE_NORMAL
- en: F# also has a built-in [actor model](concurrency-actor-model.html), and excellent
    support for event handling and [functional reactive programming](concurrency-reactive.html).
  prefs: []
  type: TYPE_NORMAL
- en: And of course, because data structures are immutable by default, sharing state
    and avoiding locks is much easier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](glyphicons_280_settings.png) Completeness'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although it is a functional language at heart, F# does support other styles
    which are not 100% pure, which makes it much easier to interact with the non-pure
    world of web sites, databases, other applications, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, F# is designed as a hybrid functional/OO language, so it can
    do [virtually everything that C# can do](completeness-anything-csharp-can-do.html).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, F# is [part of the .NET ecosystem](completeness-seamless-dotnet-interop.html),
    which gives you seamless access to all the third party .NET libraries and tools.
    It runs on most platforms, including Linux and smart phones (via Mono and the
    new .NET Core).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it is well integrated with Visual Studio (Windows) and Xamarin (Mac),
    which means you get a great IDE with IntelliSense support, a debugger, and many
    plug-ins for unit tests, source control, and other development tasks. Or on Linux,
    you can use the MonoDevelop IDE instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The "Why Use F#?" series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following series of posts demonstrates each of these F# benefits, using
    standalone snippets of F# code (and often with C# code for comparison).
  prefs: []
  type: TYPE_NORMAL
- en: '[Introduction to the ''Why use F#'' series](why-use-fsharp-intro.html). An
    overview of the benefits of F#'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[F# syntax in 60 seconds](fsharp-in-60-seconds.html). A very quick overview
    on how to read F# code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Comparing F# with C#: A simple sum](fvsc-sum-of-squares.html). In which we
    attempt to sum the squares from 1 to N without using a loop'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Comparing F# with C#: Sorting](fvsc-quicksort.html). In which we see that
    F# is more declarative than C#, and we are introduced to pattern matching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Comparing F# with C#: Downloading a web page](fvsc-download.html). In which
    we see that F# excels at callbacks, and we are introduced to the ''use'' keyword'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Four Key Concepts](key-concepts.html). The concepts that differentiate F#
    from a standard imperative language'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conciseness](conciseness-intro.html). Why is conciseness important?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Type inference](conciseness-type-inference.html). How to avoid getting distracted
    by complex type syntax'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Low overhead type definitions](conciseness-type-definitions.html). No penalty
    for making new types'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using functions to extract boilerplate code](conciseness-extracting-boilerplate.html).
    The functional approach to the DRY principle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using functions as building blocks](conciseness-functions-as-building-blocks.html).
    Function composition and mini-languages make code more readable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pattern matching for conciseness](conciseness-pattern-matching.html). Pattern
    matching can match and bind in a single step'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Convenience](convenience-intro.html). Features that reduce programming drudgery
    and boilerplate code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Out-of-the-box behavior for types](convenience-types.html). Immutability and
    built-in equality with no coding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Functions as interfaces](convenience-functions-as-interfaces.html). OO design
    patterns can be trivial when functions are used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Partial Application](convenience-partial-application.html). How to fix some
    of a function''s parameters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Active patterns](convenience-active-patterns.html). Dynamic patterns for powerful
    matching'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Correctness](correctness-intro.html). How to write ''compile time unit tests'''
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Immutability](correctness-immutability.html). Making your code predictable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exhaustive pattern matching](correctness-exhaustive-pattern-matching.html).
    A powerful technique to ensure correctness'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using the type system to ensure correct code](correctness-type-checking.html).
    In F# the type system is your friend, not your enemy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Worked example: Designing for correctness](designing-for-correctness.html).
    How to make illegal states unrepresentable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Concurrency](concurrency-intro.html). The next major revolution in how we
    write software?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Asynchronous programming](concurrency-async-and-parallel.html). Encapsulating
    a background task with the Async class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Messages and Agents](concurrency-actor-model.html). Making it easier to think
    about concurrency'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Functional Reactive Programming](concurrency-reactive.html). Turning events
    into streams'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Completeness](completeness-intro.html). F# is part of the whole .NET ecosystem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Seamless interoperation with .NET libraries](completeness-seamless-dotnet-interop.html).
    Some convenient features for working with .NET libraries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Anything C# can do...](completeness-anything-csharp-can-do.html). A whirlwind
    tour of object-oriented code in F#'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why use F#: Conclusion](why-use-fsharp-conclusion.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
