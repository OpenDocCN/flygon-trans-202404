- en: Example - Infinite Streams of Pairs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose we want to produce an infinite stream containing pairs of integers
    [mathjaxinline] (i, j) [/mathjaxinline] where [mathjaxinline]i \leq j[/mathjaxinline]
    and [mathjaxinline]i + j[/mathjaxinline] is prime. If `int-pairs` is the stream
    of pairs of all integers, our stream is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now all we have to do is define `int-pairs`. How do we do that? Let''s start
    by supposing that we have two streams, [mathjaxinline]S[/mathjaxinline] and [mathjaxinline]T[/mathjaxinline],
    which are both equivalent to `integers`. Now let''s imagine the array (or matrix,
    if you want to think of it that way) of pairs of [mathjaxinline]S[/mathjaxinline]
    and [mathjaxinline]T[/mathjaxinline]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69a4180dd536dcfa0479b74fc01cd99f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The stream of pairs of integers is everything above the diagonal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bbfd42bec6190b3c92380777ded52152.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s call the general stream of pairs `(pairs s t)`, and consider it to be
    composed of three parts: the pair [mathjaxinline] (S_0, T_0) [/mathjaxinline],
    the rest of the pairs in the first row, and the remaining pairs.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/57c83d75e5f1c2494e71bd4ade2fdb90.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The third piece in this decomposition (pairs that are not in the first row)
    is (recursively) the pairs formed from `(stream-cdr s)` and `(stream-cdr t)`.
    Also note that the second piece (the rest of the first row) is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then our stream of pairs is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we just need to put the streams together using some sort of `combine` function.
    We know that appending doesn''t workâ€”let''s use `interleave` instead! Our stream
    of pairs becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
