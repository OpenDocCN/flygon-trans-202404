- en: 🚧モジュール
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 🚧モジュール
- en: 原文：[https://typescriptbook.jp/reference/modules](https://typescriptbook.jp/reference/modules)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/reference/modules](https://typescriptbook.jp/reference/modules)
- en: 注意
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '**Experimental!** このページは執筆途中の草稿です。構成が大きく変わることがありえますので、リンクなどをする場合はリンク切れが起こる可能性がある点をご留意ください。このページの内容は、[import、export、require](/reference/import-export-require)をもとに再構成・加筆しています。'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**Experimental!** このページは執筆途中の草稿です。構成が大きく変わることがありえますので、リンクなどをする場合はリンク切れが起こる可能性がある点をご留意ください。このページの内容は、[import���export、require](/reference/import-export-require)をもとに再構成・加筆しています。'
- en: モジュールの基礎[​](#モジュールの基礎 "モジュールの基礎 への直接リンク")
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: モジュールの基礎[​](#モジュールの基礎 "モジュールの基礎 への直接リンク")
- en: モジュールの目的[​](#モジュールの目的 "モジュールの目的 への直接リンク")
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: モジュールの目的[​](#モジュールの目的 "モジュールの目的 への直接リンク")
- en: プログラムは大きさがさまざまです。行数で見ると、数行のものから数万行のものまであります。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: プログラムは大きさがさまざまです。行数で見ると、数行のものから数万行のものまであります。
- en: 小さいプログラムなら、1つのファイルでも十分ですが、大きなプログラムは1つのファイルだけで作るのは大変です。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 小さいプログラムなら、1つのファイルでも十分ですが、大きなプログラムは1つのファイルだけで作るのは大変です。
- en: 想像してみてください。何千行もあるプログラムが1つのファイルに詰め込まれている状態は、読みにくく、修正もしにくくなります。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 想像してみてください。何千行もあるプログラムが1つのファイルに詰め込まれている状態は、読みにくく、修正もしにくくなります。
- en: '**保守性の問題** ─ 保守性が低いことです。大量のコードが1つのファイルに詰め込まれているため、変更がしにくいです。コードの見通しが悪いため、1行の変更が他の数千行にどのような影響を与えるのか、予想もつかないことがあります。これは、変更に対して臆病になってしまう原因にもなります。'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**保守性の問題** ─ 保守性が低いことです。大量のコードが1つのファイルに詰め込まれているため、変更がしにくいです。コードの見通しが悪いため、1行の変更が他の数千行にどのような影響を与えるのか、予想もつかないことがあります。これは、変更に対して臆病になってしまう原因にもなります。'
- en: '**変数名の衝突** ─ コードが長いと、変数名が衝突する危険性が高まります。これにより、関係のない変数を上書きしてしまう恐れがあります。これを避けるために変数名を長くすることもありますが、それは可読性を損ねる原因になります。'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**変数名の衝突** ─ コードが長いと、変数名が衝突する危険性が高まります。これにより、関係のない変数を上書きしてしまう恐れがあります。これを避けるために変数名を長くすることもありますが、それは可読性を損ねる原因になります。'
- en: '**再利用の問題** ─ たとえば、数千行のコードの中から特定の部分だけを別のプロジェクトで使用したい場合、それらが1つの大きな塊にまとめられているため、必要な部分だけを抜き出せません。無理に読み込むと、不要なコードも一緒に読み込んでしまい、それがどう悪さをするかは予想がつきません。'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**再利用の問題** ─ たとえば、数千行のコードの中から特定の部分だけを別のプロジェクトで使用したい場合、それらが1つの大きな塊にまとめられているため、必要な部分だけを抜き出せません。無理に読み込むと、不要なコードも一緒に読み込んでしまい、それがどう悪さをするかは予想がつきません。'
- en: このような問題を解決するのが、**モジュール**(module)と呼ばれる仕組みです。モジュールは1つのファイルを複数のファイルに分割し、関連付けて、ひとつのプログラムとして動かすことができます。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: このような問題を解決するのが、**モジュール**(module)と呼ばれる仕組みです。モジュールは1つのファイルを複数のファイルに分割し、関連付けて、ひとつのプログラムとして動かすことができます。
- en: 大規模なプログラムを作る場合、それぞれの機能ごとにモジュールを分けることで、各モジュールを読みやすく、保守性も高く、再利用もしやすくなります。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大規模なプログラムを作る場合、それぞれの機能ごとにモジュールを分けることで、各モジュールを読みやすく、保守性も高く、再利用もしやすくなります。
- en: JavaScriptのモジュール[​](#javascriptのモジュール "JavaScriptのモジュール への直接リンク")
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScriptのモジュール[​](#javascriptのモジュール "JavaScriptのモジュール への直接リンク")
- en: JavaScriptのモジュールは、`export`または`import`を1つ以上含むJavaScriptファイルを言います。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptのモジュールは、`export`または`import`を1つ以上含むJavaScriptファイルを言います。
- en: '`export`は他のモジュールに変数を公開するためのキーワードです。'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export`は他のモジュールに変数を公開するためのキーワードです。'
- en: '`import`は他のモジュールから変数をインポートするキーワードです。'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import`は他のモジュールから変数をインポートするキーワードです。'
- en: '`export`と`import`を使うと、モジュール間で変数を受け渡しできるようになります。'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`export`と`import`を使うと、モジュール間で変数を受け渡しできるようになります。'
- en: たとえば、次は変数`world`をエクスポートしているモジュールです。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: たとえば、次は変数`world`をエクスポートしているモジュールです。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 別のファイルでこれをインポートして使います。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 別のファイルでこれをインポートして使います。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 値の公開と非公開[​](#値の公開と非公開 "値の公開と非公開 への直接リンク")
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 値の公開と非公開[​](#値の公開と非公開 "値の公開と非公開 への直接リンク")
- en: JavaScriptのモジュールは、明示的に`export`をつけた値だけが公開され、他のモジュールから参照できます。たとえば、次の例の`publicValue`は他のモジュールから利用できます。一方、`privateValue`は外部からは利用できません。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptのモジュールは、明示的に`export`をつけた値だけが公開され、他のモジュールから参照できます。たとえば、次の例の`publicValue`は他のモジュールから利用できます。一方、`privateValue`は外部からは利用できません。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: JavaScriptのモジュールでは、デフォルトで変数や関数などは非公開になるわけです。Javaなどの他の言語では、モジュール(パッケージ)のメンバーがデフォルトで公開になり、非公開にしたいものには`private`修飾子をつける言語があります。そういった言語と比べると、JavaScriptは基本方針が真逆なので注意が必要です。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptのモジュールでは、デフォルトで変数や関数などは非公開になるわけです。Javaなどの他の言語では、モジュール(パッケージ)のメンバーがデフォルトで公開になり、非公開にしたいものには`private`修飾子をつける言語があります。そういった言語と比べると、JavaScriptは基本方針が真逆なので注意が必要です。
- en: パッケージとモジュールの違い[​](#パッケージとモジュールの違い "パッケージとモジュールの違い への直接リンク")
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: パッケージとモジュールの違い[​](#パッケージとモジュールの違い "パッケージとモジュールの違い への直接リンク")
- en: モジュールと似た用語に、パッケージ(package)という言葉があります。プログラミング言語によって、モジュールとパッケージの定義は異なります。JavaScriptでは、これらはどのように捉えられているでしょうか。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: モジュールと似た用語に、パッケージ(package)という言葉があります。プログラミング言語によって、モジュールとパッケージの定義は異なります。JavaScriptでは、これらはどのように捉えられているでしょうか。
- en: モジュールは、基本的にひとつひとつのJavaScript/TypeScriptファイルを指します。詳細は「[スクリプトとモジュール](https://typescriptbook.jp/reference/import-export-require#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%A8%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB)」のセクションで説明しますが、JavaScript/TypeScriptファイルのうち、`export`または`import`を1つ以上含んだものがモジュールに当たります。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: モジュールは、基本的にひとつひとつのJavaScript/TypeScriptファイルを指します。詳細は「[スクリプトとモジュール](https://typescriptbook.jp/reference/import-export-require#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%A8%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB)」のセクションで説明しますが、JavaScript/TypeScriptファイルのうち、`export`または`import`を1つ以上含んだものがモジュールに当たります。
- en: パッケージは、package.jsonとJavaScriptファイル群を持つディレクトリを指します。package.jsonは、パッケージの名前、バージョン、ライセンスなどのメタデータを記載したファイルです。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: パッケージは、package.jsonとJavaScriptファイル群を持つディレクトリを指します。package.jsonは、パッケージの名前、バージョン、ライセンスなどのメタデータを記載したファイルです。
- en: モジュールとパッケージには、利用用途の違いがあります。一般的なアプリケーション開発では、複数のJavaScript/TypeScriptファイルに分けて開発します。この際に作られるファイルひとつひとつがモジュールになります。アプリケーションの保守性の担保、コードの再利用性の確保、変数名衝突の回避のために用いられるのがモジュールです。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: モジュールとパッケージには、利用用途の違いがあります。一般的なアプリケーション開発では、複数のJavaScript/TypeScriptファイルに分けて開発します。この際に作られるファイルひとつひとつがモジュールになります。アプリケーションの保守性の担保、コードの再利用性の確保、変数名衝突の回避のために用いられるのがモジュールです。
- en: 一方、パッケージの典型的な目的は配布です。ライブラリ製作者が、プログラムを他者に配布する際に用いられるのがパッケージです。そして、アプリケーション開発者は、自己のアプリケーションにパッケージを組み込む形で、パッケージは利用されていきます。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一方、パッケージの典型的な目的は配布です。ライブラリ製作者が、プログラムを他者に配布する際に用いられるのがパッケージです。そして、アプリケーション開発者は、自己のアプリケーションにパッケージを組み込む形で、パッケージは利用されていきます。
- en: モジュールとエコシステム[​](#モジュールとエコシステム "モジュールとエコシステム への直接リンク")
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: モジュールとエコシステム[​](#モジュールとエコシステム "モジュールとエコシステム への直接リンク")
- en: バンドラー[​](#バンドラー "バンドラー への直接リンク")
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: バンドラー[​](#バンドラー "バンドラー への直接リンク")
- en: JavaScriptでは、複数のJavaScriptファイルを1つのファイルに繋ぎ合わせることをバンドル(bundle)と言います。バンドルを、自動的に行なう開発ツールを、バンドラー(bundler)と呼びます。バンドラーは「モジュールバンドラー」と呼ばれることもあります。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptでは、複数のJavaScriptファイルを1つのファイルに繋ぎ合わせることをバンドル(bundle)と言います。バンドルを、自動的に行なう開発ツールを、バンドラー(bundler)と呼びます。バンドラーは「モジュールバンドラー」と呼ばれることもあります。
- en: JavaScriptには、さまざまなバンドラーがあります。たとえば、有名なものとしては次のようなバンドラーがあります。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptには、さまざまなバンドラーがあります。たとえば、有名なものとしては次のようなバンドラーがあります。
- en: webpack
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: webpack
- en: rollup
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: rollup
- en: parcel
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: parcel
- en: esbuild
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: esbuild
- en: vite
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: vite
- en: これらのバンドラーは、JavaScriptだけではなく、TypeScriptやCSS、画像などさまざまな種類のファイルをバンドルできます。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些打包工具不仅可以打包JavaScript，还可以打包TypeScript、CSS、图像等各种类型的文件。
- en: バンドラーが必要な理由[​](#バンドラーが必要な理由 "バンドラーが必要な理由 への直接リンク")
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 打包工具的必要性[​](#打包工具的必要性 "打包工具的必要性 直接链接")
- en: JavaScriptのバンドラーを使わないと、Webアプリケーションを実行するために、複数のJavaScriptファイルを個別に読み込む必要があります。これは、いくつかの問題を生みます。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不使用JavaScript打包工具，为了运行Web应用程序，需要单独加载多个JavaScript文件。这会带来一些问题。
- en: 第一に、ウェブブラウザーがJavaScriptのコードを読み込む際に、多くの時間がかかるようになります。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，当Web浏览器加载JavaScript代码时，会花费很多时间。
- en: 第二に、JavaScriptファイル同士の依存関係が整理されないことに起因して、コードが壊れ、バグが起こることがあります。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，由于JavaScript文件之间的依赖关系没有整理好，可能会导致代码错误和bug的发生。
- en: 第三に、JavaScriptコードが最適化された書き方になっていない場合、アプリケーションの実行パフォーマンスが悪くなることがあります。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，如果JavaScript代码没有经过优化，应用程序的��行性能可能会变差��
- en: このような問題を解決するがバンドラーの役割です。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这些问题的就是打包工具的作用。
- en: サーバーサイドJSではバンドラーの利点は少ない[​](#サーバーサイドjsではバンドラーの利点は少ない "サーバーサイドJSではバンドラーの利点は少ない
    への直接リンク")
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在服务器端JS中，打包工具的优点并不多[​](#服务器端js中打包工具的优点并不多 "服务器端JS中打包工具的优点并不多 直接链接")
- en: JavaScriptはウェブブラウザーで実行するために作られた言語ですが、サーバーサイドでも使えます。サーバーサイドのJavaScript実行環境のひとつにNode.jsがあります。Node.jsは、古くからモジュールシステムを内部で実装しているため、JavaScriptにESモジュールのようなモジュールシステムがまだ無い時代から、モジュールが使えていました。そのため、サーバーサイドJavaScriptの環境では、バンドラーの必要性が生まれませんでした。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是为在Web浏览器中运行而设计的语言，但也可以在服务器端使用。Node.js是服务器端JavaScript执行环境之一。由于Node.js从很早就在内部实现了模块系统，因此即使在JavaScript没有ES模块这样的模块系统的时代，也可以使用模块。因此，在服务器端JavaScript环境中，并不需要打包工具。
- en: 昨今のJavaScriptはモジュールシステムを持っているため、バンドラーを使わなくともモジュールを実現できます。これはフロントエンドでも同様です。しかしながら、フロントエンドでは数百、数千のモジュールをバラバラにダウンロードして実行するのは時間がかかるため、ひとつのJavaScriptファイルにまとめるバンドラーの役割というのは、依然として重要です。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的JavaScript具有模块系统，因此即使不使用打包工具也可以实现模块化。这在前端也是一样的。然而，在前端，下载和执行数百甚至数千个模块会耗费大量时间，因此将它们合并到一个JavaScript文件中的打包工具仍然很重要。
- en: 一方で、サーバーサイドでは、モジュールが数百、数千とあったとしても、モジュールをロードするのはサーバー起動時だけです。そのため、バンドラーの利点はほぼありません。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在服务器端，即使有数百甚至数千个模块，加载模块只发生在服务器启动时。因此，打包工具的优点几乎不存在。
- en: モジュールシステム[​](#モジュールシステム "モジュールシステム への直接リンク")
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块系统[​](#模块系统 "模块系统 直接链接")
- en: CommonJSとESモジュール[​](#commonjsとesモジュール "CommonJSとESモジュール への直接リンク")
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CommonJS和ES模块[​](#commonjs和es模块 "CommonJS和ES模块 直接链接")
- en: CommonJSとESモジュールが混在している理由[​](#commonjsとesモジュールが混在している理由 "CommonJSとESモジュールが混在している理由
    への直接リンク")
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CommonJS和ES模块混合存在的原因[​](#commonjs和es模块混合存在的原因 "CommonJS和ES模块混合存在的原因 直接链接")
- en: これをお読みの皆さんの中には、JavaScriptやTypeScript以外のプログラミング言語を経験したことがある人もいるかと思います。他の言語で、複数のモジュールシステムが共存している言語を使ったことはありますでしょうか。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在座的各位中，可能有一些人除了JavaScript和TypeScript之外还有其他编程语言的经验。在其他语言中，您是否使用过同时存在多个模块系统的语言？
- en: JavaScriptには、系統が異なるモジュールシステムが、少なくとも2つ存在しています。ESモジュールとCommonJSです。こうした状況は、プログラミング言語としては、珍しいことです。JavaScriptのモジュールまわりを理解するのを難しくしている要因でもあります。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript至少有两种不同的模块系统，即ES模块和CommonJS。这种情况在编程语言中是罕见的，也是使JavaScript模块化变得复杂的因素之一。
- en: では、どうしてJavaScriptは2系統もモジュールシステムを持つようになったのでしょうか？ ここでは、JavaScriptの現状に至る流れを歴史からひも解いていきます。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么JavaScript会有两种模块系统呢？在这里，我们将从历史上的发展来解释JavaScript目前的状况。
- en: ひとつめのモジュールシステム[​](#ひとつめのモジュールシステム "ひとつめのモジュールシステム への直接リンク")
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第一个模块系统[​](#第一个模块系统 "第一个模块系统 直接链接")
- en: JavaScriptのモジュールシステムは、ブラウザよりも先んじて、サーバーサイドJavaScript、とりわけNode.jsの文脈で発展してきた経緯があります。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的模块系统在服务器端JavaScript，尤其是Node.js的背景下，比在浏览器端更早得到发展。
- en: JavaScriptで広く普及しているモジュールシステムのひとつがCommonJSです。CommonJSの歴史をさかのぼると、2009年のServerJS発足に至ります。ServerJSはJavaScriptをサーバーサイドで使えるようにすることを目指し、サーバーサイドJavaScriptの共通APIを策定する標準化プロジェクトでした。のちに、CommonJSに改名されます。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: CommonJS是JavaScript中广泛使用的模块系统之一。追溯CommonJS的历史，可以追溯到2009年的ServerJS成立。ServerJS旨在使JavaScript在服务器端可用，并制定了服务器端JavaScript的通用API的标准化项目。后来，更名为CommonJS。
- en: サーバーサイドにJavaScriptを持ってくると一言で言っても、ブラウザのJavaScriptをそのまま持ち込んでもうまくいきません。たとえば、ブラウザには`<script>`タグがあるので、ひとつのページに複数の`<script>`タグを書くことで、複数のJavaScriptが実行できます。一方、サーバーサイドにはページという概念がありません。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将JavaScript引入服务器端并不是一帆风顺，直接将浏览器的JavaScript引入服务器端并不奏效。例如，浏览器有`<script>`标签，因此可以通过在页面上写入多个`<script>`标签来执行多个JavaScript。但是，在服务器端没有页面的概念。
- en: また、当時のJavaScriptにはESモジュールのようなモジュールシステムもありませんでした。そのため、JavaScriptファイルを複数ロードできる仕組みを考えるところから始めなければなりませんでした。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当时的JavaScript也没有像ES模块这样的模块系统。因此，必须从考虑如何加载多个JavaScript文件开始。
- en: そこで考え出された仕様がCommonJSのモジュールです。おなじみの`require()`や`module.exports`です。CommonJSは、モジュールシステムが存在しない当時のJavaScriptの文法や機能の枠を超えずに、関数や変数で工夫することで、モジュール的なものを成立させるものでした。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 于是，CommonJS模块规范应运而生。大家熟悉的`require()`和`module.exports`。CommonJS通过在JavaScript当时不存在模块系统的语法和功能框架内进行函数和变量的巧妙处理，实现了类似模块的功能。
- en: Node.jsはCommonJSと同時期にリリースされましたが、Node.jsに採用されたモジュールシステムがこのCommonJSでした。このおかげで、Node.jsにおいてはサーバーサイドJavaScriptでもファイルの分割と、複数ファイルのロードができるようになっていました。このモジュールシステムは、Node.jsユーザーに受け入れられはじめ、ライブラリを公開できるnpmなど、モジュールまわりのエコシステムも発展していきました。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js与CommonJS同时发布，但Node.js采用的模块系统是CommonJS。这使得在Node.js中，即使在服务器端JavaScript中也可以分割文件并加载多个文件。这种模块系统开始受到Node.js用户的欢迎，npm等库的发布，模块生态系统也得到了发展。
- en: ちなみに、CommonJSやNode.jsがスタートした2009年の前年には、ECMAScript 4草案破棄というショッキングな出来ごとがありました。ES4には、モジュールシステムをJavaScriptに追加する仕様も盛り込まれていました。もし、ES4が実現していたら、CommonJSは必要無かったかも知れません。現実はESの仕様を決めるブラウザベンダー間での意見と対立があり、JavaScriptを改善する動きは仲たがいで終わってしまいました。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，就在CommonJS和Node.js开始的2009年前一年，发生了ECMAScript 4草案的废弃事件。ES4中包含了向JavaScript添加模块系统的规范。如果ES4实现了，CommonJS可能就不再需要了。然而，实际情况是，由于制定ES规范的浏览器供应商之间存在分歧和冲突，改进JavaScript的努力以争吵告终。
- en: Node.jsの登場時期がそんなバッドタイミングだったこともあり、JavaScript自体がモジュールシステムを改善するのはなかなか期待できない状況でした。そのため、Node.jsは既存のJavaScriptでできる範囲内の解決策として、モジュールシステムにCommonJSを採用したという見方もできます。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Node.js的推出时间不太合适，JavaScript本身很难改进模块系统。因此，可以将Node.js视为现有JavaScript范围内的解决方案，采用CommonJS作为模块系统。
- en: CommonJSはサーバーサイドで生まれ、発展してきました。CommonJSの土台に乗ったライブラリも数多く作られました。こうしたライブラリは、クライアントサイドでも需要がありました。そのため、webpackを筆頭にモジュールバンドラーはCommonJSをサポートしてきました。CommonJSの生い立ちはサーバーサイドではあったものの、モジュールバンドラーの対応によって、フロントエンドもCommonJSに頼る状況が醸成されました。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: CommonJS 起源于服务器端，并得到发展。也产生了许多基于 CommonJS 的库。这些库在客户端也有需求。因此，从 webpack 开始，模块打包工具开始支持
    CommonJS。虽然 CommonJS 起源于服务器端，但随着模块打包工具的支持，前端也开始依赖 CommonJS。
- en: ふたつめのモジュールシステム[​](#ふたつめのモジュールシステム "ふたつめのモジュールシステム への直接リンク")
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 另一种模块系统[​](#ふたつめのモジュールシステム "另一种模块系统 直接链接")
- en: CommonJSの誕生から歴史は流れ、2015年になると、ES6という新しいJavaScriptの標準仕様が確定します。これはJavaScriptの10年数ぶりの大型アップデートです。そこには、ES6
    Modulesというモジュールシステムを実現するための仕様も盛り込まれていました。皆さんご存知の`import`文と`export`文です。これは、JavaScript初のJavaScriptネイティブのモジュールシステムです。CommonJSが草の根活動で規格化されたモジュールシステムだとすると、ESモジュールは本家が発表した公式的・標準的なモジュールシステムだとも言えます。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从 CommonJS 的诞生到现在，历史在流逝，到了 2015 年，确定了新的 JavaScript 标准规范 ES6。这是 JavaScript 10
    年来的一次重大更新。其中包括实现名为 ES6 Modules 的模块系统的规范。大家熟知的 `import` 和 `export` 就是其中的一部分。这是
    JavaScript 的第一个原生模块系统。如果说 CommonJS 是通过基层活动规范化的模块系统，那么 ES 模块可以说是官方发布的标准模块系统。
- en: JavaScript界は、サーバーサイドもクライアントサイドも関係なく、ES6に対応する中で、ES6 Modulesも導入する方向になり、2016年頃からESモジュール導入に向けて議論が始まりました。議論の中心は、やはり、在来のモジュールシステムであるCommonJSと新システムのESモジュールの共存についてです。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 领域，在支持 ES6 的同时，无论是服务器端还是客户端，在 2016 年左右开始讨论引入 ES 模块。讨论的重点仍然是传统模块系统
    CommonJS 和新系统 ES 模块的共存。
- en: ESモジュールの仕様が確定する頃には、JavaScriptはCommonJS前提とした環境ができあがっていて、CommonJSに準拠したNPMパッケージも沢山あったため、CommonJSを切り捨てる選択肢はありませんでした。もしも、CommonJSを切り捨ててしまうと、過去の資産をほぼすべて失うことになるわけで、CommonJSとESモジュールの共存はNode.jsにとって重要なテーマだったのです。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当 ES 模块规范确定下来时，JavaScript 已经建立了一个基于 CommonJS 的环境，并且由于有很多符合 CommonJS 标准的 NPM
    包，所以没有放弃 CommonJS 的选择。如果放弃了 CommonJS，那么几乎所有过去的资产都将丢失，因此 CommonJS 和 ES 模块的共存对于
    Node.js 来说是一个重要的主题。
- en: たとえば、サーバーサイドJavaScriptのNode.jsひとつとっても、長い議論のすえ、2017年にNode.js v8.5.0にて、ESモジュールが実験的な機能としてリリースされます。その後、2019年にv13.2.0にて、ESモジュールから「実験的な機能」というラベルが外れ、プロダクションで使われることを想定した機能に昇格しました。そして2020年には、CommonJSの名前付きエクスポートがESモジュールの名前付きインポートでロードできるようになり、次第にNode.jsでESモジュールを動かす環境が整ってきています。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，即使在服务器端 JavaScript 的 Node.js 中，经过长时间的讨论，ES 模块在 2017 年的 Node.js v8.5.0 中作为实验性功能发布。随后，在
    2019 年的 v13.2.0 中，ES 模块从“实验性功能”中移除标签，升级为预期用于生产的功能。然后在 2020 年，CommonJS 的命名导出可以通过
    ES 模块的命名导入进行加载，逐渐使 Node.js 中的 ES 模块环境完善。
- en: ESモジュール環境が整備されてきたとは言っても、CommonJSは10年以上、JavaScriptを支えてきており、もはや切っても切れない関係になっています。そのため、今日現在においては、2つのモジュールシステムがJavaScriptに生きているわけです。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 ES 模块环境已经完善，但 CommonJS 已经支持 JavaScript 超过 10 年，已经成为不可分割的关系。因此，目前，JavaScript
    中存在着两种模块系统。
- en: まとめ[​](#まとめ "まとめ への直接リンク")
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 总结[​](#まとめ "总结 直接链接")
- en: JavaScriptにはCommonJSとESモジュールの2つのモジュールシステムがある。
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 有 CommonJS 和 ES 模块两种模块系统。
- en: CommonJSはJSと10年以上に及ぶ長く深いつながりがある。
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CommonJS 与 JavaScript 有着超过 10 年的深厚联系。
- en: JS界はCommonJSとESモジュールが共存する道を選んだ。
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 领域选择了 CommonJS 和 ES 模块共存的道路。
- en: CommonJSとESモジュールの違い[​](#commonjsとesモジュールの違い "CommonJSとESモジュールの違い への直接リンク")
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CommonJS 和 ES 模块的区别[​](#commonjsとesモジュールの違い "CommonJS 和 ES 模块的区别 直接链接")
- en: '`import`と`require`の違い[​](#importとrequireの違い "importとrequireの違い への直接リンク")'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`import` 和 `require` 的区别[​](#importとrequireの違い "import 和 require 的区别 直接链接")'
- en: JavaScriptでは、モジュールから変数などの値をインポートする際に、`import`と`require`を用います。この2つはよく似ていますが、それぞれ異なるモジュールシステムの書き方です。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，当从模块中导入变量等值时，使用 `import` 和 `require`。这两者非常相似，但它们分别是不同的模块系统的写法。
- en: JavaScriptのモジュールシステムはいくつかありますが、代表的なものが次の2つです。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 的模块系统有几种，但其中两种代表性的是：
- en: ESモジュール
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ES 模块
- en: CommonJS
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CommonJS
- en: この2つのモジュールシステムの違いの詳細は、**(TODO参照先記事記載)** で解説していますので、そちらをご覧ください。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这两种模块系统的详细区别，请参考**(TODO参考文章)**。
- en: import[​](#import "import への直接リンク")
  id: totrans-89
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: import[​](#import "import 直接链接")
- en: '`import`は、JavaScriptのモジュールシステムのひとつであるESモジュールで用いる構文です。`import`は他のモジュールでエクスポートされた変数や関数をインポートするのに用いられます。たとえば、次のような使い方ができます。'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`import` 是用于 ES 模块的 JavaScript 模块系统的语法。`import` 用于导入其他模块中导出的变量或函数。例如，可以这样使用。'
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: require[​](#require "require への直接リンク")
  id: totrans-93
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: require[​](#require "require 直接链接")
- en: 一方で、`require`は、CommonJSというモジュールシステムで用いる関数です。`require`関数は、他のモジュールから変数や関数をインポートするのに使われます。たとえば、次のような使い方になります。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`require` 是用于 CommonJS 这种模块系统的函数。`require` 函数用于从其他模块导入变量或函数。例如，可以这样使用。
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`export`と`module.exports`の違い[​](#exportとmoduleexportsの違い "exportとmoduleexportsの違い
    への直接リンク")'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`export` 和 `module.exports` 的区别[​](#exportとmoduleexportsの違い "export 和 module.exports
    的区别 直接链接")'
- en: '`import`と`require`は、他のモジュールから値をインポートするためのものでした。これと対をなすものとして、`export`と`module.export`があります。これらは、他のモジュールに値をエクスポートするためのものです。`export`と`module.export`も、それぞれ異なるモジュールシステムで使われます。'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`import` 和 `require` 用于从其他模块导入值。作为对应，还有 `export` 和 `module.export` 用于将值导出到其他模块。`export`
    和 `module.export` 也分别用于不同的模块系统。'
- en: export[​](#export "export への直接リンク")
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: export[​](#export "export 直接链接")
- en: JavaScriptの`export`は、ESモジュールというモジュールシステムで用いる構文です。`export`を使うと、モジュール内で定義した変数や関数などを、エクスポートすることができます。たとえば、次のような使い方ができます。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 的 `export` 是用于 ES 模块这种模块系统的语法。使用 `export` 可以将模块内定义的变量或函数等导出。例如，可以这样使用。
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: module.exports[​](#moduleexports "module.exports への直接リンク")
  id: totrans-103
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: module.exports[​](#moduleexports "module.exports 直接链接")
- en: 一方で、`module.exports`は、CommonJSというモジュールシステムで用いる変数です。CommonJSでは、モジュール内で定義された変数や関数を、`module.exports`に代入することで、エクスポートできます。たとえば、次のような書き方になります。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`module.exports` 是用于 CommonJS 这种模块系统的变量。在 CommonJS 中，通过将模块内定义的变量或函数赋值给
    `module.exports`，可以导出它们。例如，可以这样写。
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: ESモジュールの構文[​](#esモジュールの構文 "ESモジュールの構文 への直接リンク")
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ES 模块的语法[​](#esモジュールの構文 "ES 模块的语法 直接链接")
- en: モジュール解決[​](#モジュール解決 "モジュール解決 への直接リンク")
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块解析[​](#モジュール解決 "模块解析 直接链接")
- en: ESモジュールの仕様[​](#esモジュールの仕様 "ESモジュールの仕様 への直接リンク")
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ES 模块规范[​](#esモジュールの仕様 "ES 模块规范 直接链接")
- en: CommonJSのAPI[​](#commonjsのapi "CommonJSのAPI への直接リンク")
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CommonJS 的 API[​](#commonjsのapi "CommonJS 的 API 直接链接")
- en: TypeScriptとモジュール[​](#typescriptとモジュール "TypeScriptとモジュール への直接リンク")
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TypeScript和模块[​](#typescript和模块 "TypeScript和模块 直接链接")
- en: ESモジュールのベストプラクティス[​](#esモジュールのベストプラクティス "ESモジュールのベストプラクティス への直接リンク")
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ES模块的最佳实践[​](#es模块的最佳实践 "ES模块的最佳实践 直接链接")
