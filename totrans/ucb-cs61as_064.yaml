- en: Hierarchical Structures - Capital-T Trees
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 层次结构 - 大写T树
- en: Intro to Capital-T Trees (The Abstract Data Type)
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大写T树简介（抽象数据类型）
- en: Before you continue reading, note that the capital-T Trees we talk about in
    this section are different than the trees from SICP. In SICP (and in the previous
    sections), trees are simply a fancy word for deep lists. In this section, we introduce
    a new concept, Trees, which are an abstract data type (ADT). These Trees must
    respect certain abstraction barriers. When you hear most computer scientists talk
    about Trees in the real-world, they are typically talking about this ADT.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续阅读之前，请注意，我们在本节讨论的大写T树与SICP中的树不同。在SICP（以及之前的章节）中，树只是深列表的花哨说法。在本节中，我们介绍了一个新概念，树，它是一种抽象数据类型（ADT）。这些树必须遵守某些抽象屏障。当你听到大多数计算机科学家在现实世界中谈论树时，他们通常是在谈论这个ADT。
- en: As with lists and sentences, we can also store data in the Trees data structure.
    They are generally useful for providing hierarchy, ordering, and composition.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与列表和句子一样，我们也可以在树数据结构中存储数据。它们通常用于提供层次结构、排序和组合。
- en: '![Tree diagram of the US. US is at the top, with California and Massechusetts
    underneath it. Underneath CA are San JOse and Berkeley. Underneath MA is Boston.](/static/trees_hierarchy.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![美国的树形图。美国在顶部，下面是加利福尼亚和马萨诸塞州。加州下面是圣何塞和伯克利。马萨诸塞州下面是波士顿。](/static/trees_hierarchy.png)'
- en: The name comes from the downwards branching structure, similar to real trees
    but upside down. A **node** is a point at the Tree. Each node contains a **datum**
    ("U.S.A", "California" are some datums). Notice that a node can contain another
    Tree. The node with "California" can be regarded as a Tree with "California" at
    the top. Because of this, nodes and Trees are the same thing! We generally use
    'Tree' to refer to the whole structure. Another synonym for a node is subtree.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 名称来源于向下分支结构，类似于真实树木但是倒置的。**节点**是树上的一个点。每个节点包含一个**数据**（"美国"，"加利福尼亚"是一些数据）。请注意，一个节点可以包含另一个树。具有"加利福尼亚"的节点可以被视为顶部为"加利福尼亚"的树。因此，节点和树是相同的东西！我们通常使用'Tree'来指代整个结构���节点的另一个同义词是子树。
- en: The **root** of a Tree is the topmost node. All Trees have only one root. In
    this case, it is "U.S.A"
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树的**根节点**是最顶部的节点。所有树只有一个根。在这种情况下，它是"美国"
- en: The **parent** of a node is the node directly above it. All nodes have exactly
    one parent, except for the root which has no parent.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个节点的**父节点**是直接在其上方的节点。所有节点都只有一个父节点，除了根节点没有父节点。
- en: The **children** of a node are the nodes that are directly beneath it. The children
    of "California" are "Berkeley" and "San Jose".
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个节点的**子节点**是直接在其下方的节点。"加利福尼亚"的子节点是"伯克利"和"圣何塞"。
- en: A **branch** node is a node that has at least one child (like "U.S.A","California"
    and "Massachusetts").
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分支**节点是至少有一个子节点的节点（如"美国"，"加利福尼亚"和"马萨诸塞州"）。'
- en: A **leaf** node is a node that no children. (like "Berkeley", "San Jose", and
    "Boston")
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 叶子节点是没有子节点的节点（如"伯克利"，"圣何塞"和"波士顿"）
- en: The Tree ADT
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 树ADT
- en: 'We have our own ADT to represent Trees that we will use for the rest of this
    lesson, but there is no official way to represent Trees. Why? This is because
    there are several different design choices to make when creating a Tree ADT:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有自己的ADT来表示树，我们将在本课程的其余部分中使用它，但没有官方的表示树的方式。为什么？这是因为在创建树ADT时有几种不同的设计选择：
- en: Branch nodes may or may not have data
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支节点可能有数据，也可能没有
- en: Binary Trees (2 branches) vs N-way Trees (N branches)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二叉树（2个分支）与N路树（N个分支）
- en: Order of children
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子节点的顺序
- en: Can Trees be empty?
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树可以为空吗？
- en: '... and many more'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '... 还有许多'
- en: Different representations of Trees will give you different limitations, features,
    and functionalities.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的树表示将给您不同的限制、特性和功能。
- en: 'Here are the built-in constructors and selectors for Trees:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是树的内置构造函数和选择器：
- en: '**Constructor:** `make-tree` takes in two arguments, a datum and a list of
    its children, and creates a Tree ADT.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构造函数:** `make-tree`接受两个参数，一个数据和其子节点的列表，并创建一个树ADT。'
- en: '**Selector:** `datum` takes in a node and returns the datum that the node stores.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择器:** `datum`接受一个节点并返回节点存储的数据。'
- en: '**Selector:** `children` takes in a node and returns the list of its children.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择器:** `children`接受一个节点并返回其子节点的列表。'
- en: Under the Hood
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 底层结构
- en: 'One way to implement the Trees described above is with the following definitions:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实现上述树的一种方法是使用以下定义：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The selector `children` accepts a node as its single argument and returns its
    children, **a list of Trees**. A list of Trees is called a **forest**. Remember
    that Trees and forests are two different data structures! In addition, you **should**
    think of a forest as a list of Trees, but you **should NOT** think of a Tree as
    a bunch of `cons`, `cars`, and `cdrs`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器`children`接受一个节点作为其唯一参数，并返回其子节点，**一组树的列表**。一组树的列表称为**森林**。记住，树和森林是两种不同的数据结构！此外，你**应该**将森林视为树的列表，但你**不应该**将树视为一堆`cons`、`car`和`cdr`。
- en: To reiterate, the constructor and selectors for forests are `list`, `car`, and
    `cdr`, while the constructor and selectors for (this ADT of) Trees are `make-tree`,
    `datum`, and `children`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 重申一下，森林的构造函数和选择器是`list`、`car`和`cdr`，而树的（此 ADT 的）构造函数和选择器是`make-tree`、`datum`和`children`。
- en: 'Additionally, since a leaf is a node with no children, we could use a predicate
    like this to check whether a node is a leaf:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，由于叶子是没有子节点的节点，我们可以使用类似这样的谓词来检查一个节点是否是叶子：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Remember that using lists is *just one way* to represent Trees. We can't assume
    that someone who designed the ADT would use a list. For example, if `maple` is
    a Tree, we can't assume that `(cdr maple)` will give us the children. Instead,
    we must respect the data abstraction and use the constructors and selectors they
    provide for us.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，使用列表只是表示树的*一种方式*。我们不能假设设计 ADT 的人会使用列表。例如，如果`maple`是一棵树，我们不能假设`(cdr maple)`会给我们子节点。相反，我们必须尊重数据抽象，并使用他们为我们提供的构造函数和选择器。
- en: Abstraction Barrier
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象屏障
- en: '![A real-life tree with a caution tape around it.](http://www.alienspouse.com/.a/
    6a00d8345216fc69e201310f6497b3970c-300wi)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![一棵被警戒带围绕的现实生活中的树。](http://www.alienspouse.com/.a/ 6a00d8345216fc69e201310f6497b3970c-300wi)'
- en: We cannot stress enough that you cannot make **any** assumptions on how a Tree
    ADT is implemented. When working on Trees, you can only use the constructors/selectors
    that are provided. Since forests are implemented as a list of Trees, you can use
    `car` of a forest to find the first Tree, or `cdr` to find a list of the rest
    of the Trees.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次强调，你不能对树的 ADT 实现做出**任何**假设。在处理树时，你只能使用提供的构造函数/选择器。由于森林被实现为树的列表，你可以使用森林的`car`找到第一个树，或者使用`cdr`找到其余树的列表。
- en: '**Test Your Understanding**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: Assuming pine refers to a Tree, which of the following is a data abstraction
    violation (DAV)?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`pine`指的是一棵树，以下哪一项是数据抽象违规（DAV）？
- en: Mapping over Trees
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对树进行映射
- en: 'Something useful that we do to Trees often is to map a certain operation to
    it, akin to mapping over a list. We can achieve this by the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常对树执行的有用操作之一是将某种操作映射到它，类似于在列表上进行映射。我们可以通过以下方式实现这一点：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We apply the function to our datum, and map the function recursively on the
    children.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将该函数应用于我们的数据，并递归地将该函数映射到子节点上。
- en: Make sure you stare at the above code until it makes sense.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你盯着上面的代码直到它有意义。
- en: Mutual Recursion
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互递归
- en: Here is an alternative way to define `treemap` that applies a function `fn`
    throughout the tree. Observe how the overall process is recursive, but `treemap`
    does not directly call itself. `treemap` will be (mostly) responsible for applying
    `fn` to the datum of a single Tree. Who handles the forest? Well, `treemap` will
    call a helper procedure, `forest-map`, which applies `fn` to all elements in the
    forest.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是定义`treemap`的另一种方法，它在整个树上应用函数`fn`。请注意整个过程是递归的，但`treemap`并不直接调用自身。`treemap`将负责将`fn`应用于单个树的数据。谁处理森林？嗯，`treemap`将调用一个辅助过程`forest-map`，它将`fn`应用于森林中的所有元素。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How does `forest-map` apply `fn` to the forest? Well, a forest is just a list
    of Trees, and we know that we have `treemap` that handles a single Tree. So, all
    we need to do is recursively call `treemap` on all Trees in the forest!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`forest-map`如何将`fn`应用于森林？嗯，森林只是树的列表，我们知道有`treemap`处理单个树。所以，我们只需要在森林中的所有树上递归调用`treemap`即可！'
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that `treemap` calls `forest-map`, and `forest-map` calls `treemap`.
    The pattern of **A** calling **B** and **B** calling **A** is called **mutual
    recursion**.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`treemap`调用`forest-map`，而`forest-map`调用`treemap`。**A**调用**B**，**B**调用**A**的模式称为**互递归**。
- en: '![Penguins making the LEAP OF FAITH into icy waters](http://images.nationalgeographic.com/wpf/media-
    live/photos/000/247/cache/gentoo-penguins-jumping-in-water_24700_600x450.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![企鹅跃入冰冷的水中](http://images.nationalgeographic.com/wpf/media- live/photos/000/247/cache/gentoo-penguins-jumping-in-water_24700_600x450.jpg)'
- en: '`count-leaves`'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`count-leaves`'
- en: Let's use mutual recursion to write the procedure `count-leaves`, which returns
    the number of leaves in a tree. Let's take this step by step. Since we're using
    mutual recursion, that means we'll need a procedure to manage Trees, `count-leaves`,
    and a procedure to manage forests, `count-leaves-in-forest`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用相互递归来编写过程 `count-leaves`，它返回树中叶子节点的数量。让我们一步一步来。由于我们使用相互递归，这意味着我们需要一个管理树的过程
    `count-leaves`，以及一个管理森林的过程 `count-leaves-in-forest`。
- en: '`count-leaves`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`count-leaves`：'
- en: '**Base case:** If the node is a leaf node, then just return 1\.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本情况：** 如果节点是叶子节点，则只需返回 1。'
- en: '**Recursive call:** Otherwise, it calls `count-leaves-in-forest`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**递归调用：** 否则，它调用 `count-leaves-in-forest`。'
- en: 'Here is the code for `count-leaves`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `count-leaves` 的代码：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`count-leaves-in-forest`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`count-leaves-in-forest`：'
- en: '**Base case:** If the forest is `null?`, return 0.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本情况：** 如果森林是 `null?`，则返回 0。'
- en: '**Recursive call:** Otherwise, we need to find the total number of leaves in
    all of the trees in the forest.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**递归调用：** 否则，我们需要找到森林中所有树的叶子总数。'
- en: We call `count-leaves` on the `car` of the forest to find how many leaves are
    in the first Tree of the forest.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在森林的 `car` 上调用 `count-leaves`，以找出森林中第一个树中有多少叶子。
- en: We recursively call `count-leaves-in-forest` on the `cdr` of the forest to find
    the number of leaves in the rest of the forest.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在森林的 `cdr` 上递归调用 `count-leaves-in-forest`，以找到森林中其余部分的叶子数量。
- en: Finally, we add these two values together to find the total number of leaves.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将这两个值相加以找到叶子节点的总数。
- en: 'Here is the code for `count-leaves-in-forest`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `count-leaves-in-forest` 的代码：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tree Traversals
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 树遍历
- en: We have seen how we can store and find elements in Trees. Now, many situations
    that use the Tree data structure involves visiting all of our nodes and do something
    with all of the elements. The obvious way is to go up-down and left-right, but
    there are many other ways we can traverse a Tree.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何在树中存储和查找元素。现在，许多使用树数据结构的情况涉及访问所有节点并对所有元素执行某些操作。显而易见的方法是从上到下、从左到右，但我们还有许多其他遍历树的方法。
- en: Depth First Search
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深度优先搜索
- en: Depth First Search (DFS) is when you explore a node's children before its siblings.
    The name comes from the fact that you are going as deep as you can in one branch
    before looking at other branches. The gif below demonstrates this. The numbers
    indicate the order in which the nodes are visited.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 深度优先搜索（DFS）是指在查看兄弟节点之前探索节点的子节点。该名称源于您在查看其他分支之前尽可能深入一个分支的事实。下面的 gif 演示了这一点。数字表示访问节点的顺序。
- en: '![](../Images/ef6204646633c23ca1cc54d642f2c7c1.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ef6204646633c23ca1cc54d642f2c7c1.jpg)'
- en: Note that it finishes exploring one branch before exploring other branches.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在探索其他分支之前，它会完成对一个分支的探索。
- en: 'We can demonstrate this in Racket. Lets say we want to print every single node.
    Our Tree ADT actually follows the same structure, so our implementation of dfs
    is rather simple:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 Racket 中演示这一点。假设我们想打印每个节点。我们的树 ADT 实际上遵循相同的结构，因此我们的 dfs 实现相当简单：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Breadth First Search
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广度优先搜索
- en: 'Breadth First Search (BFS) explores the siblings before its children. It''s
    easier to imagine this as looking at the graph in ''layers''. First we look at
    the Tree''s root, then its children, followed by its grandchildren, and so on.
    The gif below demonstrates this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 广度优先搜索（BFS）在探索子节点之前探索兄弟节点。更容易想象这是在'层次'中查看图。首先我们看树的根，然后是它的子节点，接着是它的孙子节点，依此类推。下面的
    gif 演示了这一点：
- en: '![](http://upload.wikimedia.org/wikipedia/commons/5/5d/Breadth-First-Search-
    Algorithm.gif)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](http://upload.wikimedia.org/wikipedia/commons/5/5d/Breadth-First-Search-
    Algorithm.gif)'
- en: Implementing BFS in Racket is slightly harder because our ADT stores information
    in a different order than the order in which BFS traverses. One way around this
    is to use another data structure called a [queue](https://mitpress.mit.edu/sicp/full-text/sicp/book/node62.html),
    which stores (in order) the nodes that are going to be checked next.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Racket 中实现 BFS 稍微困难，因为我们的 ADT 以与 BFS 遍历顺序不同的顺序存储信息。解决这个问题的一种方法是使用另一种称为[队列](https://mitpress.mit.edu/sicp/full-text/sicp/book/node62.html)的数据结构，它按顺序存储将要检查的节点。
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: BFS Example
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BFS 示例
- en: Lets walk through how the code above works using the example Tree below. The
    arrows in the diagram indicate the parent --> child relationships.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下示例树来逐步了解上面的代码如何工作。图中的箭头表示父节点 --> 子节点的关系。
- en: '![](../Images/fe248a6227e06996d75ce25926bf94ba.svg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fe248a6227e06996d75ce25926bf94ba.svg)'
- en: When `bfs-iter` is first called, the whole Tree is put into the `queue`. To
    simplify things, let's say a tree is denoted by its root.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次调用`bfs-iter`时，整个树被放入`queue`中。为了简化问题，让我们用树的根来表示一棵树。
- en: '`queue`: F'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`queue`: F'
- en: It dequeues node F, prints the value of node F, and recursively calls `bfs-iter`
    with the rest of the queue and the children of F. The rest of the queue is empty,
    but the children of F is B G.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 它出队节点 F，打印节点 F 的值，并递归调用`bfs-iter`与队列的其余部分和节点 F 的子节点。队列的其余部分为空，但节点 F 的子节点是 B
    G。
- en: '`queue`: B G'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`queue`: B G'
- en: '`bfs-iter` will print the node of the first tree in the queue, B and recursively
    calls `bfs-iter` with the rest of the queue, G, and the children of B, A D.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`bfs-iter`将打印队列中第一棵树的节点 B，并递归调用`bfs-iter`与队列的其余部分 G 和节点 B 的子节点 A D。'
- en: '`queue`: G A D'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`queue`: G A D'
- en: And so on until the queue is empty. Once the queue is empty, we will have printed
    out each node's datum exactly once.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 依此类推，直到队列为空。一旦队列为空，我们将精确打印出每个节点的数据一次。
- en: Note that the siblings are always first in the queue and the children are entered
    from the back. This ensures that siblings are checked first before children.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意兄弟节点总是先进入队列，而子节点是从后面进入的。这确保了在检查子节点之前首先检查兄弟节点。
- en: DFS vs BFS
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深度优先搜索 vs 广度优先搜索
- en: '![xkcd.com](../Images/5ab4fb493705420056e50f6bae12b442.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![xkcd.com](../Images/5ab4fb493705420056e50f6bae12b442.jpg)'
- en: Is one better than the other? It depends on what you are trying to do with your
    Trees and how you are storing elements in the Tree.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一个比另一个更好吗？这取决于你尝试对树做什么以及你如何在树中存储元素。
- en: The Tree below represents things in a house. In a "House" you can find a "Kitchen"
    and "Cat Food". In a "Kitchen" you can find a "Drawer", "Trash Can", etc. The
    leaves contain food and the deeper you go, the more filling the foods are.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的树代表房子里的东西。在一个“房子”里你可以找到“厨房”和“猫粮”。在一个“厨房”里你可以找到“抽屉”、“垃圾桶”等。叶子包含食物，越深入，食物越丰富。
- en: '![](/static/cat_tree_search.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/cat_tree_search.png)'
- en: '**Test Your Understanding**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: Consider a Tree with a structure similar to the one above. Imagine you are a
    starving cat searching for **any** food to fill your stomach as soon as possible.
    What kind of Tree traversal is more appropriate for the following situation?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个结构类似上面的树。想象一下你是一只饥饿的猫，正在寻找**任何**食物以尽快填饱肚子。哪种树遍历对于以下情况更合适？
- en: You are still a cat, but now you're on a quest to find the most delicious food
    in the house. Which Tree traversal will help you find it the fastest?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你仍然是一只猫，但现在你正在寻找房子里最美味的食物。哪种树遍历将帮助你最快地找到它？
- en: Takeaways
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: 'Here are the takeaways from this subsection:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本小节的要点：
- en: Remember your constructor and selectors (`make-tree`, `datum`, and `children`).
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记住你的构造函数和选择器（`make-tree`、`datum`和`children`）。
- en: To map over Trees, we use mutual recursion, where the two procedures are written
    in terms of each other. Typically, one of those procedures takes in a Tree, and
    the other takes in a forest.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要对树进行映射，我们使用相互递归，其中两个过程相互调用。通常，其中一个过程接受一棵树，另一个接受一片森林。
- en: Breadth First Search looks at the nodes in the same level first, whereas Depth
    First Search goes through each branch until it hits the leaf node.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广度优先搜索首先查看同一层级的节点，而深度优先搜索会一直遍历每个分支直到达到叶子节点。
