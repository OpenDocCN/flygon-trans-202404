- en: Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![So it begins](5724c886.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this section I will try to walk you through the initialization and configuration
    of a basic Webpack work-flow.
  prefs: []
  type: TYPE_NORMAL
- en: '[Get started](get_started.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Get started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the source code for this example on [Github](https://github.com/alexandrebodin/webpack-book-get-started)
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First install Webpack globally
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next create a folder and initialize your npm project
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Answer to the questions (if you are not planning on publishing your code you
    can press enter until it's finished)
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's create some files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`webpack.config.js` Is the default name for Webpack configuration file. You
    can setup a full project work-flow just with this file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In your `index.html` we load the file that Webpack will create for you.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In your `index.js` let's say "Hi".
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In your `webpack.config.js` we will initialize the application configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The configuration tels Webpack the file it needs to process is `index.js` and
    it has to output a file `bundle.js`in the `build` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try and run Webpack then !
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here Webpack automatically looks for a `webpack.config.js` file. You can specify
    another file using `'--config=PATH_TO_CONFIG`
  prefs: []
  type: TYPE_NORMAL
- en: Now your project should look like this (ignoring npm stuff)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In some browsers you cannot load local Javascript files, that's where `webpack-dev-server`
    comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Among other awesome features `webpack-dev-server` can process your files and
    create a HTTP server to serve them.
  prefs: []
  type: TYPE_NORMAL
- en: Let's install it in your project
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now run
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Go to the url `http://localhost:8080`. You should see `Hello World!` in your
    `console`.
  prefs: []
  type: TYPE_NORMAL
- en: You will notice in your `terminal` that Webpack is still running. If you change
    your `index.js`file it will reprocess it on the fly. You can just reload your
    browser then.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack offers features for automatic page reload and much more thanks to [plugins](GLOSSARY.html#plugins)
    and [loaders](GLOSSARY.html#loaders).
  prefs: []
  type: TYPE_NORMAL
- en: Some code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's all well but for now you have an empty Javascript file. Let's add some
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder `app` and a `my_module.js` file in it.
  prefs: []
  type: TYPE_NORMAL
- en: '`my_module.js`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`index.js`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you left `webpack-dev-server` running refresh your browser or restart `webpack-dev-server`.
  prefs: []
  type: TYPE_NORMAL
- en: '![magic](e5257492)'
  prefs: []
  type: TYPE_IMG
- en: You can see 'Hi Webpack' in the `console`.
  prefs: []
  type: TYPE_NORMAL
- en: To recap, Webpack can load modules just like [NodeJs](https://nodejs.org/docs/latest/api/modules.html)
    and compile them all into one file. You can now use open-source libraries and
    organize your code much better.
  prefs: []
  type: TYPE_NORMAL
- en: Npm sugar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Previously you add to use `./node_modules/.bin/webpack-dev-server` instead of
    `webpack-dev-server` because it isn't installed globally.
  prefs: []
  type: TYPE_NORMAL
- en: Let's setup a `npm` script to simplify this. Add this to the `"scripts"` in
    your `package.json`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now you can just run
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Npm will first look in the `./node_modules` folder of your project when you
    use modules in your `package.json` scripts so you don't to specify the folder
    by hand.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Loaders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using [Loaders](GLOSSARY.html#loaders "@TODO")
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using [Plugins](GLOSSARY.html#plugins "@TODO")
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up a ReactJS app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up a ReactJS App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
