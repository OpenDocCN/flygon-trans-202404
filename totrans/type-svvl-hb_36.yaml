- en: オブジェクトのサブセットを得る
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: オブジェクトのサブセットを得る
- en: 原文：[https://typescriptbook.jp/tips/get-a-subset-of-an-object](https://typescriptbook.jp/tips/get-a-subset-of-an-object)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/tips/get-a-subset-of-an-object](https://typescriptbook.jp/tips/get-a-subset-of-an-object)
- en: オブジェクトのサブセットを得る方法です。サブセットとは、あるオブジェクトのいち部分を切り取ったもので、ここで紹介する方法は、プロパティ名を指定してオブジェクトの一部分を切り出すものです。たとえば、次のような数多くのプロパティを持つオブジェクトがあるとき、ここから数個のプロパティだけを持つオブジェクトを作る方法です。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトのサブセットを得る方法です。サブセットとは、あるオブジェクトのいち部分を切り取ったもので、ここで紹介する方法は、プロパティ名を指定してオブジェクトの一部分を切り出すものです。たとえば、次のような数多くのプロパティを持つオブジェクトがあるとき、ここから数個のプロパティだけを持つオブジェクトを作る方法です。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '方法1: 即時関数・分割代入・shorthand property nameの合わせ技[​](#方法1-即時関数分割代入shorthand-property-nameの合わせ技
    "方法1: 即時関数・分割代入・shorthand property nameの合わせ技 への直接リンク")'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '方法1: 即時関数・分割代入・shorthand property nameの合わせ技[​](#方法1-即時関数分割代入shorthand-property-nameの合わせ技
    "方法1: 即時関数・分割代入・shorthand property nameの合わせ技 への直接リンク")'
- en: オブジェクトのサブセットを得る1つ目の方法は、即時関数と分割代入、そして、shorthand property nameを組み合わせる方法です。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: オブジェクトのサブセットを得る1つ目の方法は、即時関数と分割代入、そして、shorthand property nameを組み合わせる方法です。
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: この方法のメリットとデメリットは次のとおりです。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: この方法のメリットとデメリットは次のとおりです。
- en: メリット
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: メリット
- en: 外部ライブラリを必要としない。
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部ライブラリを必要としない。
- en: デメリット
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: デメリット
- en: 初見の読み手には意外性のあるコードに見える場合がある。
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初見の読み手には意外性のあるコードに見える場合がある。
- en: 即時関数の引数部分とshorthand property nameの2箇所に同じプロパティ名を書く必要があり冗長。
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即時関数の引数部分とshorthand property nameの2箇所に同じプロパティ名を書く必要があり冗長。
- en: この書き方は、数個の少ないプロパティを抽出したいときは便利ですが、たくさんのプロパティを抽出しようとすると記述量が増え、徐々に大変さが出てきます。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: この書き方は、数個の少ないプロパティを抽出したいときは便利ですが、たくさんのプロパティを抽出しようとすると記述量が増え、徐々に大変さが出てきます。
- en: 抽出したいプロパティよりも、除きたいプロパティのほうが少ない場合は、次のような書き方で除きたいプロパティを指定するほうが簡単です。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 抽出したいプロパティよりも、除きたいプロパティのほうが少ない場合は、次のような書き方で除きたいプロパティを指定するほうが簡単です。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'ts`const  <data-lsp lsp="const address: {'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`const  <data-lsp lsp="const address: {'
- en: 'country: string;'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'country: string;'
- en: 'prefecture: string;'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'prefecture: string;'
- en: 'city: string;'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'city: string;'
- en: 'address: string;'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'address: string;'
- en: 'building: string;'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'building: string;'
- en: 'zipcode: string;'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zipcode: string;'
- en: '}" style="border-bottom:solid 2px lightgrey">address</data-lsp>  = (({ <data-lsp
    lsp="(parameter) name: string">name</data-lsp>, <data-lsp lsp="(parameter) twitter:
    string">twitter</data-lsp>, <data-lsp lsp="(parameter) github: string">github</data-lsp>,  ...<data-lsp
    lsp="(parameter) rest: {'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '}" style="border-bottom:solid 2px lightgrey">address</data-lsp>  = (({ <data-lsp
    lsp="(parameter) name: string">name</data-lsp>, <data-lsp lsp="(parameter) twitter:
    string">twitter</data-lsp>, <data-lsp lsp="(parameter) github: string">github</data-lsp>,  ...<data-lsp
    lsp="(parameter) rest: {'
- en: 'country: string;'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'country: string;'
- en: 'prefecture: string;'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'prefecture: string;'
- en: 'city: string;'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'city: string;'
- en: 'address: string;'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'address: string;'
- en: 'building: string;'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'building: string;'
- en: 'zipcode: string;'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zipcode: string;'
- en: '}">rest</data-lsp> }) => <data-lsp lsp="(parameter) rest: {'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '}">rest</data-lsp> }) => <data-lsp lsp="(parameter) rest: {'
- en: 'country: string;'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'country: string;'
- en: 'prefecture: string;'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'prefecture: string;'
- en: 'city: string;'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'city: string;'
- en: 'address: string;'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'address: string;'
- en: 'building: string;'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'building: string;'
- en: 'zipcode: string;'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zipcode: string;'
- en: '}">rest</data-lsp>)(<data-lsp lsp="const profile: {'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '}">rest</data-lsp>)(<data-lsp lsp="const profile: {'
- en: 'name: string;'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: string;'
- en: 'twitter: string;'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'twitter: string;'
- en: 'github: string;'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'github: string;'
- en: 'country: string;'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'country: string;'
- en: 'prefecture: string;'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'prefecture: string;'
- en: 'city: string;'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'city: string;'
- en: 'address: string;'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'address: string;'
- en: 'building: string;'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'building: string;'
- en: 'zipcode: string;'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zipcode: string;'
- en: '}">profile</data-lsp>);` `const address: {'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '}">profile</data-lsp>);` `const address: {'
- en: 'country: string;'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'country: string;'
- en: 'prefecture: string;'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'prefecture: string;'
- en: 'city: string;'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'city: string;'
- en: 'address: string;'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'address: string;'
- en: 'building: string;'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'building: string;'
- en: 'zipcode: string;'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zipcode: string;'
- en: '}//=> {//   "country": "JP",//   "prefecture": "東京都",//   "city": "千代田区",//   "address":
    "丸の内2-4-1",//   "building": "丸ビル",//   "zipcode": "100-6390"// }`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '}//=> {//   "country": "JP",//   "prefecture": "東京都",//   "city": "千代田区",//   "address":
    "丸の内2-4-1",//   "building": "丸ビル",//   "zipcode": "100-6390"// }`'
- en: JavaScriptでは、`delete`を使うとオブジェクトからプロパティを取り除けるので、上の書き方はまどろっこしいと思われるかもしれません。この書き方をするには理由があって、TypeScriptでは`delete`の使い勝手が良くないからです。あるオブジェクトから`delete`を使ってプロパティを取り除きたい場合、TypeScriptではそのプロパティがオプショナルでなければなりません。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptでは、`delete`を使うとオブジェクトからプロパティを取り除けるので、上の書き方はまどろっこしいと思われるかもしれません。この書き方をするには理由があって、TypeScriptでは`delete`の使い勝手が良くないからです。あるオブジェクトから`delete`を使ってプロパティを取り除きたい場合、TypeScriptではそのプロパティがオプショナルでなければなりません。
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '方法2: lodash.pick / lodash.omit[​](#方法2-lodashpick--lodashomit "方法2: lodash.pick
    / lodash.omit への直接リンク")'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '方法2: lodash.pick / lodash.omit[​](#方法2-lodashpick--lodashomit "方法2: lodash.pick
    / lodash.omit への直接リンク")'
- en: 2つ目の方法は[lodash](https://lodash.com/)を用いるものです。lodashはさまざまな便利関数を提供するライブラリで、その中のひとつに`pick`というオブジェクトのサブセットを得るための関数があります。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 2つ目の方法は[lodash](https://lodash.com/)を用いるものです。lodashはさまざまな便利関数を提供するライブラリで、その中のひとつに`pick`というオブジェクトのサブセットを得るための関数があります。
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: lodash全体ではなく、`pick`関数だけが必要な場合は、パッケージ[lodash.pick](https://www.npmjs.com/package/lodash.pick)を使うこともできます。この場合、次のようにして`pick`関数を使います。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: lodash全体ではなく、`pick`関数だけが必要な場合は、パッケージ[lodash.pick](https://www.npmjs.com/package/lodash.pick)を使うこともできます。この場合、次のようにして`pick`関数を使います。
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: lodash.pickのメリットとデメリットは次のとおりです。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: lodash.pickのメリットとデメリットは次のとおりです。
- en: メリット
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: メリット
- en: 宣言的で読みやすい。
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宣言的で読みやすい。
- en: 記述量が少ない。
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 記述量が少ない。
- en: デメリット
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: デメリット
- en: ライブラリを導入する必要がある。
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ライブラリを導入する必要がある。
- en: lodash.pickは抽出したいプロパティ名を指定する関数ですが、抽出したいプロパティより除外したいプロパティが少ない場合は、[lodash.omit](https://www.npmjs.com/package/lodash.omit)を使ったほうが便利です。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: lodash.pickは抽出したいプロパティ名を指定する関数ですが、抽出したいプロパティより除外したいプロパティが少ない場合は、[lodash.omit](https://www.npmjs.com/package/lodash.omit)を使ったほうが便利です。
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: lodash、lodash.pickとlodash.omitのインストールは次のコマンドで行なえます。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: lodash、lodash.pickとlodash.omitのインストールは次のコマンドで行なえます。
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: bash`# lodashのインストールnpm install lodashnpm install -D @types/lodash``# lodash.pickとlodash.omitのインストールnpm
    install lodash.pick lodash.omitnpm install -D @types/lodash.pick @types/lodash.omit`
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: bash`# 安装 lodashnpm install lodashnpm install -D @types/lodash``# 安装 lodash.pick
    和 lodash.omitnpm install lodash.pick lodash.omitnpm install -D @types/lodash.pick
    @types/lodash.omit`
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
