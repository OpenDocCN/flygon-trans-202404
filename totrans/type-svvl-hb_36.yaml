- en: オブジェクトのサブセットを得る
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/tips/get-a-subset-of-an-object](https://typescriptbook.jp/tips/get-a-subset-of-an-object)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: オブジェクトのサブセットを得る方法です。サブセットとは、あるオブジェクトのいち部分を切り取ったもので、ここで紹介する方法は、プロパティ名を指定してオブジェクトの一部分を切り出すものです。たとえば、次のような数多くのプロパティを持つオブジェクトがあるとき、ここから数個のプロパティだけを持つオブジェクトを作る方法です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '方法1: 即時関数・分割代入・shorthand property nameの合わせ技[​](#方法1-即時関数分割代入shorthand-property-nameの合わせ技
    "方法1: 即時関数・分割代入・shorthand property nameの合わせ技 への直接リンク")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: オブジェクトのサブセットを得る1つ目の方法は、即時関数と分割代入、そして、shorthand property nameを組み合わせる方法です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: この方法のメリットとデメリットは次のとおりです。
  prefs: []
  type: TYPE_NORMAL
- en: メリット
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 外部ライブラリを必要としない。
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: デメリット
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 初見の読み手には意外性のあるコードに見える場合がある。
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 即時関数の引数部分とshorthand property nameの2箇所に同じプロパティ名を書く必要があり冗長。
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: この書き方は、数個の少ないプロパティを抽出したいときは便利ですが、たくさんのプロパティを抽出しようとすると記述量が増え、徐々に大変さが出てきます。
  prefs: []
  type: TYPE_NORMAL
- en: 抽出したいプロパティよりも、除きたいプロパティのほうが少ない場合は、次のような書き方で除きたいプロパティを指定するほうが簡単です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'ts`const  <data-lsp lsp="const address: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'country: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'prefecture: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'city: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'address: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'building: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'zipcode: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}" style="border-bottom:solid 2px lightgrey">address</data-lsp>  = (({ <data-lsp
    lsp="(parameter) name: string">name</data-lsp>, <data-lsp lsp="(parameter) twitter:
    string">twitter</data-lsp>, <data-lsp lsp="(parameter) github: string">github</data-lsp>,  ...<data-lsp
    lsp="(parameter) rest: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'country: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'prefecture: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'city: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'address: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'building: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'zipcode: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">rest</data-lsp> }) => <data-lsp lsp="(parameter) rest: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'country: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'prefecture: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'city: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'address: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'building: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'zipcode: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">rest</data-lsp>)(<data-lsp lsp="const profile: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'twitter: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'github: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'country: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'prefecture: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'city: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'address: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'building: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'zipcode: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}">profile</data-lsp>);` `const address: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'country: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'prefecture: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'city: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'address: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'building: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'zipcode: string;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}//=> {//   "country": "JP",//   "prefecture": "東京都",//   "city": "千代田区",//   "address":
    "丸の内2-4-1",//   "building": "丸ビル",//   "zipcode": "100-6390"// }`'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptでは、`delete`を使うとオブジェクトからプロパティを取り除けるので、上の書き方はまどろっこしいと思われるかもしれません。この書き方をするには理由があって、TypeScriptでは`delete`の使い勝手が良くないからです。あるオブジェクトから`delete`を使ってプロパティを取り除きたい場合、TypeScriptではそのプロパティがオプショナルでなければなりません。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '方法2: lodash.pick / lodash.omit[​](#方法2-lodashpick--lodashomit "方法2: lodash.pick
    / lodash.omit への直接リンク")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2つ目の方法は[lodash](https://lodash.com/)を用いるものです。lodashはさまざまな便利関数を提供するライブラリで、その中のひとつに`pick`というオブジェクトのサブセットを得るための関数があります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: lodash全体ではなく、`pick`関数だけが必要な場合は、パッケージ[lodash.pick](https://www.npmjs.com/package/lodash.pick)を使うこともできます。この場合、次のようにして`pick`関数を使います。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: lodash.pickのメリットとデメリットは次のとおりです。
  prefs: []
  type: TYPE_NORMAL
- en: メリット
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 宣言的で読みやすい。
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 記述量が少ない。
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: デメリット
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ライブラリを導入する必要がある。
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: lodash.pickは抽出したいプロパティ名を指定する関数ですが、抽出したいプロパティより除外したいプロパティが少ない場合は、[lodash.omit](https://www.npmjs.com/package/lodash.omit)を使ったほうが便利です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: lodash、lodash.pickとlodash.omitのインストールは次のコマンドで行なえます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: bash`# lodashのインストールnpm install lodashnpm install -D @types/lodash``# lodash.pickとlodash.omitのインストールnpm
    install lodash.pick lodash.omitnpm install -D @types/lodash.pick @types/lodash.omit`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
