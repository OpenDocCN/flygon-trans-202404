- en: String
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: String
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'In `Go`, string is an immutable array of bytes. So if created, we can''t change
    its value. E.g.:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Go`中，字符串是一个不可变的字节数组。所以如果创建了，我们无法更改它的值。例如：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The compiler will complain:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器会抱怨：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To modify the content of a string, you could convert it to a `byte` array.
    But in fact, you **do not** operate on the original string, just a copy:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改字符串的内容，你可以将其转换为`byte`数组。但实际上，你**并不会**操作原始字符串，只是一个副本：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result is like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是这样的：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Since `Go` uses `UTF-8` encoding, you must remember the `len` function will
    return the string''s byte number, not character number:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`Go`使用`UTF-8`编码，你必须记住`len`函数将返回字符串的字节数，而不是字符数：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result is:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Because each Chinese character occupied `3` bytes, `s` in the above example
    contains `5` characters and `9` bytes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因为每个中文字符占用`3`个字节，上述例子中的`s`包含`5`个字符和`9`个字节。
- en: 'If you want to access every character, `for ... range` loop can give a help:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想访问每个字符，`for ... range`循环可以提供帮助：
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result is:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Reference:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：
- en: '[Strings, bytes, runes and characters in Go](https://blog.golang.org/strings);'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go 中的字符串、字节、符文和字符](https://blog.golang.org/strings)；'
- en: '[The Go Programming Language](http://www.gopl.io/).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go 语言程序设计](http://www.gopl.io/)。'
