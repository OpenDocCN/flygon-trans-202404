["```\n    > SQL> set autotrace on\n    > Unable to verify PLAN_TABLE format or existence\n    > Error enabling EXPLAIN report\n    > \n    > ```", "```\n    > create table PLAN_TABLE (\n    > \tstatement_id \tvarchar2(30),\n    > \ttimestamp    \tdate,\n    > \tremarks      \tvarchar2(80),\n    > \toperation    \tvarchar2(30),\n    > \toptions       \tvarchar2(30),\n    > \tobject_node  \tvarchar2(128),\n    > \tobject_owner \tvarchar2(30),\n    > \tobject_name  \tvarchar2(30),\n    > \tobject_instance numeric,\n    > \tobject_type     varchar2(30),\n    > \toptimizer       varchar2(255),\n    > \tsearch_columns  number,\n    > \tid\t\tnumeric,\n    > \tparent_id\tnumeric,\n    > \tposition\tnumeric,\n    > \tcost\t\tnumeric,\n    > \tcardinality\tnumeric,\n    > \tbytes\t\tnumeric,\n    > \tother_tag       varchar2(255),\n    > \tpartition_start varchar2(255),\n    >         partition_stop  varchar2(255),\n    >         partition_id    numeric,\n    > \tother\t\tlong);\n    > \n    > ```", "```\n>  select user_id, first_names, last_name, email from users where last_visit > sysdate - 600/86400 order by upper(last_name), upper(first_names), upper(email) \n> ```", "```\n>  create table users ( user_id integer **primary key**, first_names varchar(100) not null, last_name varchar(100) not null, ... email varchar(100) not null unique, ... -- set when user reappears at site **last_visit date**, -- this is what most pages query against (since the above column -- will only be a few minutes old for most pages in a session) second_to_last_visit date, ... ); \n> ```", "```\n>  create index users_by_last_visit on users (last_visit); \n> ```", "```\n> SQL> select count(*) from bboard \n> where topic = 'photo.net'\n> and one_line = 'foo'\n> and dbms_lob.instr(message,'bar') > 0 ;\n> \n>   COUNT(*)\n> ----------\n> \t 0\n> \n> Execution Plan\n> ----------------------------------------------------------\n>    0\t  SELECT STATEMENT Optimizer=CHOOSE\n>    1\t0   SORT (AGGREGATE)\n>    2\t1     TABLE ACCESS (BY INDEX ROWID) OF 'BBOARD'\n>    3\t2\tINDEX (RANGE SCAN) OF 'BBOARD_BY_TOPIC' (NON-UNIQUE)\n> \n> Statistics\n> ----------------------------------------------------------\n> \t  0  recursive calls\n> \t  0  db block gets\n>       59967  consistent gets\n>       10299  physical reads\n> \t  0  redo size\n> \t570  bytes sent via SQL*Net to client\n> \t741  bytes received via SQL*Net from client\n> \t  4  SQL*Net roundtrips to/from client\n> \t  1  sorts (memory)\n> \t  0  sorts (disk)\n> \t  1  rows processed\n> \n> ```", "```\n>    2\t1     TABLE ACCESS (BY INDEX ROWID) OF 'BBOARD'\n>    3\t2\tINDEX (RANGE SCAN) OF 'BBOARD_BY_TOPIC' (NON-UNIQUE)\n> \n> ```", "```\n> SQL> analyze table bboard compute statistics;\n> \n> Table analyzed.\n> \n> SQL> select count(*) from bboard \n> where topic = 'photo.net'\n> and one_line = 'foo'\n> and dbms_lob.instr(message,'bar') > 0 ;\n> \n>   COUNT(*)\n> ----------\n> \t 0\n> \n> Execution Plan\n> ----------------------------------------------------------\n>    0\t  SELECT STATEMENT Optimizer=CHOOSE (Cost=1808 Card=1 Bytes=828)\n>    1\t0   SORT (AGGREGATE)\n>    2\t1     TABLE ACCESS (FULL) OF 'BBOARD' (Cost=1808 Card=1 Bytes=828)\n> \n> Statistics\n> ----------------------------------------------------------\n> \t  0  recursive calls\n> \t  4  db block gets\n>       74280  consistent gets\n>       12266  physical reads\n> \t  0  redo size\n> \t572  bytes sent via SQL*Net to client\n> \t741  bytes received via SQL*Net from client\n> \t  4  SQL*Net roundtrips to/from client\n> \t  1  sorts (memory)\n> \t  0  sorts (disk)\n> \t  1  rows processed\n> \n> ```", "```\n> SQL> create index bboard_index_by_one_line on bboard ( one_line );\n> \n> Index created.\n> \n> ```", "```\n> SQL> drop index bboard_index_by_one_line;\n> \n> SQL> create index bboard_index_by_one_line \n>      on bboard ( one_line )\n>      tablespace philgidx;\n> \n> Index created.\n> \n> ```", "```\n> SQL> select count(*) from bboard \n> where topic = 'photo.net'\n> and one_line = 'foo'\n> and dbms_lob.instr(message,'bar') > 0 ;\n> \n>   COUNT(*)\n> ----------\n> \t 0\n> \n> Execution Plan\n> ----------------------------------------------------------\n>    0\t  SELECT STATEMENT Optimizer=CHOOSE (Cost=2 Card=1 Bytes=828)\n>    1\t0   SORT (AGGREGATE)\n>    2\t1     TABLE ACCESS (BY INDEX ROWID) OF 'BBOARD' (Cost=2 Card=1 Bytes=828)\n>    3\t2\tINDEX (RANGE SCAN) OF 'BBOARD_INDEX_BY_ONE_LINE' (NON-UNIQUE) (Cost=1 Card=1)\n> \n> Statistics\n> ----------------------------------------------------------\n> \t  0  recursive calls\n> \t  0  db block gets\n> \t  3  consistent gets\n> \t  3  physical reads\n> \t  0  redo size\n> \t573  bytes sent via SQL*Net to client\n> \t741  bytes received via SQL*Net from client\n> \t  4  SQL*Net roundtrips to/from client\n> \t  1  sorts (memory)\n> \t  0  sorts (disk)\n> \t  1  rows processed\n> \n> ```", "```\n> SQL> select msg_id, one_line, sort_key, email, name \n> from bboard \n> where topic = 'photo.net' \n> and refers_to is null\n> and posting_time > (sysdate - 7)\n> order by sort_key desc;\n> \n> ...\n> \n> 61 rows selected.\n> \n> Execution Plan\n> ----------------------------------------------------------\n>    0\t  SELECT STATEMENT Optimizer=CHOOSE (Cost=1828 Card=33 Bytes=27324)\n> \n>    1\t0   SORT (ORDER BY) (Cost=1828 Card=33 Bytes=27324)\n>    2\t1     TABLE ACCESS (FULL) OF 'BBOARD' (Cost=1808 Card=33 Bytes=27324)\n> \n> Statistics\n> ----------------------------------------------------------\n> \t  0  recursive calls\n> \t  4  db block gets\n>       13188  consistent gets\n>       12071  physical reads\n> \t  0  redo size\n>        7369  bytes sent via SQL*Net to client\n>        1234  bytes received via SQL*Net from client\n> \t  8  SQL*Net roundtrips to/from client\n> \t  2  sorts (memory)\n> \t  0  sorts (disk)\n> \t 61  rows processed\n> \n> ```", "```\n> SQL> create index bboard_for_new_questions \n>      on bboard ( topic, refers_to, posting_time ) \n>      tablespace philgidx;\n> \n> Index created.\n> \n> SQL> select msg_id, one_line, sort_key, email, name \n> from bboard \n> where topic = 'photo.net' \n> and refers_to is null\n> and posting_time > (sysdate - 7)\n> order by sort_key desc;\n> \n> ...\n> \n> 61 rows selected.\n> \n> Execution Plan\n> ----------------------------------------------------------\n>    0\t  SELECT STATEMENT Optimizer=CHOOSE (Cost=23 Card=33 Bytes=27324)\n> \n>    1\t0   SORT (ORDER BY) (Cost=23 Card=33 Bytes=27324)\n>    2\t1     TABLE ACCESS (BY INDEX ROWID) OF 'BBOARD' (Cost=3 Card=33 Bytes=27324)\n>    3\t2\tINDEX (RANGE SCAN) OF 'BBOARD_FOR_NEW_QUESTIONS' (NON-UNIQUE) (Cost=2 Card=33)\n> \n> Statistics\n> ----------------------------------------------------------\n> \t  0  recursive calls\n> \t  0  db block gets\n> \t 66  consistent gets\n> \t 60  physical reads\n> \t  0  redo size\n>        7369  bytes sent via SQL*Net to client\n>        1234  bytes received via SQL*Net from client\n> \t  8  SQL*Net roundtrips to/from client\n> \t  2  sorts (memory)\n> \t  0  sorts (disk)\n> \t 61  rows processed\n> \n> ```", "```\n> SQL> drop index bboard_by_topic;\n> \n> Index dropped.\n> \n> ```", "```\n> SQL> select msg_id, one_line, sort_key, email, name\n> from bboard bbd1\n> where topic = 'photo.net'\n> and 0 = (select count(*) from bboard bbd2 where bbd2.refers_to = bbd1.msg_id)\n> and refers_to is null\n> order by sort_key desc;\n> \n> ...\n> \n> 57 rows selected.\n> \n> Execution Plan\n> ----------------------------------------------------------\n>    0\t  SELECT STATEMENT Optimizer=CHOOSE (Cost=49 Card=33 Bytes=27324)\n> \n>    1\t0   SORT (ORDER BY) (Cost=49 Card=33 Bytes=27324)\n>    2\t1     FILTER\n>    3\t2\tTABLE ACCESS (BY INDEX ROWID) OF 'BBOARD' (Cost=29 Card=33 Bytes=27324)\n>    4\t3\t  INDEX (RANGE SCAN) OF 'BBOARD_FOR_NEW_QUESTIONS' (NON-UNIQUE) (Cost=2 Card=33)\n>    5\t2\tINDEX (FULL SCAN) OF 'BBOARD_FOR_NEW_QUESTIONS' (NON-UNIQUE) (Cost=26 Card=7 Bytes=56)\n> \n> Statistics\n> ----------------------------------------------------------\n> \t  0  recursive calls\n> \t  0  db block gets\n>      589843  consistent gets\n>      497938  physical reads\n> \t  0  redo size\n>        6923  bytes sent via SQL*Net to client\n>        1173  bytes received via SQL*Net from client\n> \t  7  SQL*Net roundtrips to/from client\n> \t  2  sorts (memory)\n> \t  0  sorts (disk)\n> \t 57  rows processed\n> \n> ```", "```\n> SQL> create index bboard_index_by_refers_to \n>      on bboard ( refers_to )\n>      tablespace philgidx;\n> \n> Index created.\n> \n> SQL> select msg_id, one_line, sort_key, email, name\n> from bboard bbd1\n> where topic = 'photo.net'\n> and 0 = (select count(*) from bboard bbd2 where bbd2.refers_to = bbd1.msg_id)\n> and refers_to is null\n> order by sort_key desc;\n> \n> ...\n> \n> 57 rows selected.\n> \n> Execution Plan\n> ----------------------------------------------------------\n>    0\t  SELECT STATEMENT Optimizer=CHOOSE (Cost=49 Card=33 Bytes=27324)\n>    1\t0   SORT (ORDER BY) (Cost=49 Card=33 Bytes=27324)\n>    2\t1     FILTER\n>    3\t2\tTABLE ACCESS (BY INDEX ROWID) OF 'BBOARD' (Cost=29 Card=33 Bytes=27324)\n>    4\t3\t  INDEX (RANGE SCAN) OF 'BBOARD_FOR_NEW_QUESTIONS' (NON-UNIQUE) (Cost=2 Card=33)\n>    5\t2\tINDEX (RANGE SCAN) OF 'BBOARD_INDEX_BY_REFERS_TO' (NON-UNIQUE) (Cost=1 Card=7 Bytes=56)\n> \n> Statistics\n> ----------------------------------------------------------\n> \t  0  recursive calls\n> \t  0  db block gets\n>        8752  consistent gets\n>        2233  physical reads\n> \t  0  redo size\n>        6926  bytes sent via SQL*Net to client\n>        1173  bytes received via SQL*Net from client\n> \t  7  SQL*Net roundtrips to/from client\n> \t  2  sorts (memory)\n> \t  0  sorts (disk)\n> \t 57  rows processed\n> \n> ```", "```\n> select /*+ FULL (students) CACHE(students) */ count(*) from students;\n> \n> ```", "```\n> analyze table students compute statistics;\n> \n> ```"]