["```\nimport sys\nfrom PyQt4 import QtCore, QtGui\n\nclass Counter(QtGui.QPushButton):\n    def __init__(self, *args, **kwargs):\n        super(Counter, self).__init__(*args, **kwargs)\n        self._value = 0\n        self._update()\n\n    def mouseReleaseEvent(self, event):\n        super(Counter, self).mouseReleaseEvent(event)\n        self._value += 1\n        self._update()\n\n    def _update(self):\n        self.setText(unicode(self._value))\n\napp = QtGui.QApplication(sys.argv)\ncounter = Counter()\ncounter.show()\napp.exec_() \n```", "```\nclass CounterDocument(object): \n   def __init__(self): \n       self._value = 0 \n       self._listeners = set() \n```", "```\nclass CounterDocument(object): \n  # ...\n  def register(self, listener): \n      self._listeners.add(listener) \n      listener.notify() \n\n  def unregister(self, listener): \n      self._listeners.remove(listener) \n```", "```\nclass CounterDocument(object): \n   # ...\n   def value(self): \n       return self._value \n```", "```\n class CounterDocument(object): \n   # ...\n   def setValue(self, value): \n       if value != self._value: \n           self._value = value \n           self._notifyListeners() \n\n   def _notifyListeners(self): \n       for l in self._listeners: \n           l.notify() \n```", "```\nclass CounterDocument(object): \n   # ...\n   def incrementValue(self): \n       self._value += 1\n       self._notifyListeners() \n```", "```\nclass CounterView(QtGui.QPushButton):\n   def __init__(self, document):\n       super(CounterView, self).__init__()\n       self._document = document\n       self._document.register(self) \n```", "```\nclass CounterView(QtGui.QPushButton):\n   # ...\n   def notify(self):\n       self.setText(unicode(self._document.value())) \n```", "```\n class CounterView(QtGui.QPushButton):\n       # ...\n       def mouseReleaseEvent(self, event):\n           super(CounterView, self).mouseReleaseEvent(event)\n           self._document.incrementValue() \n```", "```\nclass ProgressBarView(QtGui.QProgressBar):\n   def __init__(self, document):\n       super(ProgressBarView, self).__init__()\n       self._document = document\n       self._document.register(self)\n       self.setRange(0,100)\n\n   def notify(self):\n       self.setValue(self._document.value()) \n```", "```\napp = QtGui.QApplication(sys.argv)\n\ndocument = CounterDocument()\ncounter = CounterView(document)\nprogress = ProgressBarView(document)\n\ncounter.show()\nprogress.show()\n\napp.exec_() \n```", "```\nclass ListenerIface \n{\npublic:\n    virtual void notify() = 0;\n}; \n```", "```\n class View : public ListenerIface\n{\npublic:\n    void notify();\n}; \n```", "```\n class Model \n{\npublic:\n    void register(ListenerIface *listener) {\n        listeners.push_back(listener);\n    }\n\nprivate:\n    void notifyListeners() {\n        std::vector<ListenerIface *>::iterator it;\n        for (it = listeners.begin(); it != listeners.end(); ++it) {\n                (*it)->notify();\n    }\n\n    std::vector<ListenerIface *> listeners;\n}; \n```", "```\nclass Controller(object):\n   def __init__(self, model, view):\n       self._model = model\n       self._view = view \n```", "```\nclass Controller(object):\n    # ...\n    def addOne(self):\n        self._model.setValue(self._model.value()+1) \n```", "```\nclass View(QtGui.QPushButton):\n    def __init__(self, model):\n        super(View, self).__init__()\n        self._model = model\n        self._controller = Controller(self._model, self)\n        self._model.register(self) \n```", "```\nclass View(QtGui.QPushButton):\n    # ...\n    def mouseReleaseEvent(self, event):\n        super(View, self).mouseReleaseEvent(event)  \n        self._controller.addOne()  \n\n    def notify(self):\n        self.setText(unicode(self._model.value())) \n```", "```\napp = QtGui.QApplication(sys.argv)\n\nmodel = Model()\nview = View(model)\nview.show()\n\napp.exec_() \n```", "```\n- Service Model (Domain Model): the actual part of the Model that describes the\n  business rules and objects.\n- Data access: responsible for serialization and deserialization of the\n  Service Model objects and persistence.\n- Value Objects: data objects with particular characteristics so that\n  their equivalence depends on their value, rather than their identity. \n```"]