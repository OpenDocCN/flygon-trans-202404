- en: range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: range
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`for ... range` clause can be used to iterate `5` types of variables: array,
    slice, string, map and channel, and the following sheet gives a summary of the
    items of `for ... range` loops:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | 1st item | 2nd item |'
  prefs: []
  type: TYPE_TB
- en: '| Array | index | value |'
  prefs: []
  type: TYPE_TB
- en: '| Slice | index | value |'
  prefs: []
  type: TYPE_TB
- en: '| String | index (rune) | value (rune) |'
  prefs: []
  type: TYPE_TB
- en: '| Map | key | value |'
  prefs: []
  type: TYPE_TB
- en: '| Channel | value |  |'
  prefs: []
  type: TYPE_TB
- en: 'For array, slice, string and map, if you don''t care about the second item,
    you can omit it. E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The running result is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, if the program doesn''t need the first item, a blank identifier should
    occupy the position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For channel type, the `close` operation can cause `for ... range` loop exit.
    See the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We can see `close(ch)` statement in another goroutine make the loop in main
    goroutine end.
  prefs: []
  type: TYPE_NORMAL
