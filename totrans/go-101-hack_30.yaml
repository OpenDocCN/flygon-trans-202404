- en: range
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 范围
- en: range
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围
- en: '`for ... range` clause can be used to iterate `5` types of variables: array,
    slice, string, map and channel, and the following sheet gives a summary of the
    items of `for ... range` loops:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`for ... range` 子句可用于迭代 `5` 种类型的变量：数组、切片、字符串、映射和通道，以下表格总结了 `for ... range`
    循环的项目：'
- en: '| Type | 1st item | 2nd item |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 第一项 | 第二项 |'
- en: '| Array | index | value |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 数组 | 索引 | 值 |'
- en: '| Slice | index | value |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 切片 | 索引 | 值 |'
- en: '| String | index (rune) | value (rune) |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | 索引（rune） | 值（rune） |'
- en: '| Map | key | value |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 映射 | 键 | 值 |'
- en: '| Channel | value |  |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 通道 | 值 |  |'
- en: 'For array, slice, string and map, if you don''t care about the second item,
    you can omit it. E.g.:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数组、切片、字符串和映射，如果不关心第二项，可以省略它。例如：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The running result is like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 运行结果如下所示：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Likewise, if the program doesn''t need the first item, a blank identifier should
    occupy the position:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果程序不需要第一项，应该使用空白标识符占据该位置：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output is:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For channel type, the `close` operation can cause `for ... range` loop exit.
    See the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于通道类型，`close` 操作可能导致 `for ... range` 循环退出。参见以下代码：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Check the outcome:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 检查结果：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can see `close(ch)` statement in another goroutine make the loop in main
    goroutine end.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到另一个 goroutine 中的 `close(ch)` 语句使主 goroutine 中的循环结束。
