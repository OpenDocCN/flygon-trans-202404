- en: Homework 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Type the following command at the terminal to copy the template file to the
    current directory (note the period at the end):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Or you can download the template [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw1.rkt).
  prefs: []
  type: TYPE_NORMAL
- en: '**If you get stuck on this homework, review [Lesson 0.3](https://berkeley-cs61as.github.io/textbook/how-recursion-works.html)
    for a detailed explanation of recursion.**'
  prefs: []
  type: TYPE_NORMAL
- en: Autograder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are working on the lab computers, the `grader` command will run the autograder.
    If you are working on your own personal machine, you should download [grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)
    and the [HW 1 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw1-tests.rkt).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a procedure `dupls-removed` that, given a sentence as input, returns the
    result of removing duplicate words from the sentence. This problem uses [recursion](https://berkeley-cs61as.github.io/textbook/how-recursion-works.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As a reminder, you can run the autograder on the lab computers by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And on your own machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a procedure `count-word` that takes a sentence and a word as arguments
    and outputs the number of occurences of the input word in the sentence.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Explain what would happen if you used `new-if` (from Lab 0) instead of `if`
    in the `pigl` procedure.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the definition of pigl from previous lab
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a procedure `squares` that takes a sentence of numbers as its argument
    and returns a sentence of the squares of the numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a procedure `switch` that takes a sentence as its argument and returns
    a sentence in which every instance of the words `I` or `me` is replaced by `you`,
    while every instance of `you` is replaced by `me` except at the beginning of the
    sentence, where it's replaced by `I`. (The word `I` is the only word that should
    be capitalized.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Hint: Consider writing a helper function that just handles the general case
    of the problemâ€”that is, your helper shouldn''t worry about the "except at the
    beginning of the sentence" part. Then write `switch` using that helper function
    and handle the special case in the body of `switch`.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a predicate `ordered?` that takes a sentence of numbers as its argument
    and returns `#t` if the numbers are in ascending order, or `#f` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a procedure `ends-e` that takes a sentence as its argument and returns
    a sentence containing only those words that end in the letter E.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Exercise 8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most versions of Lisp provide `and` and `or` procedures like the ones we've
    seen. In principle, there is no reason why these can't be ordinary procedures,
    but some versions of Lisp make them special forms.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose, for example, we evaluate `(or (= x 0) (= y 0) (= z 0))`. If `or` is
    an ordinary procedure, all three argument expressions will be evaluated before
    or is invoked. But if the variable `x` has the value 0, we know that the entire
    expression has to be true regardless of the values of `y` and `z`. A Lisp interpreter
    in which `or` is a special form can evaluate the arguments one by one until either
    a true one is found or it runs out of arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Devise a test that will tell you whether Racket's `and` and `or` are special
    forms or ordinary functions. This is a somewhat tricky problem, but it'll get
    you thinking about the evaluation process more deeply. Why might it be advantageous
    for an interpreter to treat `or` as a special form and evaluate its arguments
    one at a time? Can you think of reasons why it might be advantageous to treat
    `or` as an ordinary function?
  prefs: []
  type: TYPE_NORMAL
- en: Submitting Your Homework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**If you are having trouble submitting, ask a question on Piazza or contact
    a TA.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Before submitting:** Make sure your file loads in Racket. You can verify
    this by typing into Racket: `(enter! "hw1.rkt")`, where "hw1.rkt" is the name
    of your homework file. You will not receive credit for homework that does not
    load in Racket.'
  prefs: []
  type: TYPE_NORMAL
- en: To submit your assignment, you need to be logged in on any of the lab computers.
    If you want to submit from home, you must connect remotely to the lab computers.
    More on that later.
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the "Terminal" icon on the left. Terminal is a terminal emulator,
    a method of interacting directly to the computer via text commands. It's sort
    of an "interpreter" for your entire computer. You can do useful things with xterm
    like navigate and manipulate the filesystem (think Windows Explorer), submit homework
    (what we're doing now), and start the Racket interpreter (via `racket`)!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s submit an assignment. This requires the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Making a folder for an assignment (optional, but strongly recommended, as we'll
    see)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Doing the assignment in that folder (or moving the files to that folder if you've
    already completed the assignment)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running the `submit` command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking if the assignment was correctly submitted
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We're going to submit an assignment called "units", which will tell the staff
    how many units you're doing.
  prefs: []
  type: TYPE_NORMAL
- en: Making a Folder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the terminal, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This tells the computer to make a directory (folder) named `units`. You can
    double check that it exists (and also see what else is in this current directory)
    by running `ls`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to navigate to that folder, so we''ll do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Finishing the Assignment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to complete this assignment, you must create a file named `units` (inside
    the directory named `units`). In that file, write which units you're planning
    on doing. For example, if you were to do units 0, 1, 2, and 3, you'd put
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Please **do not** include any additional spaces or blank lines!
  prefs: []
  type: TYPE_NORMAL
- en: Submitting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After you've created the file, you can submit the assignment by doing
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This tells the computer that you want to submit the assignment "units". Follow
    any instructions that appear.
  prefs: []
  type: TYPE_NORMAL
- en: Checking Your Submission
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following command allows you to look at the times in which you''ve submitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: That's all for now. You might be interested in connecting from home in order
    to work on all of this. Details about that are under the Resources link on the
    top!
  prefs: []
  type: TYPE_NORMAL
