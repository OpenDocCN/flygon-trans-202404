- en: What is Recursion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是递归
- en: '**Recursion** is a method for writing procedures that solve certain types of
    problems. These problems have solutions that depend on solutions to smaller instances
    of the same problem. Oftentimes, recursion has us repeat the same procedure over
    and over again. It looks a little like this:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**递归**是一种编写解决某些类型问题的过程的方法。这些问题的解决方案取决于相同问题的较小实例的解决方案。通常情况下，递归让我们一遍又一遍地重复相同的过程。看起来有点像这样：'
- en: '![](http://caseelse.net/wp-content/uploads/2008/05/recursionagain.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](http://caseelse.net/wp-content/uploads/2008/05/recursionagain.jpg)'
- en: What's peculiar about recursive procedures is that in order to call the procedure,
    we'll need to have the procedure call itself, which will have to call itself,
    which will-- let's go stare at an example.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 递归过程的特殊之处在于，为了调用该过程，我们需要让该过程调用自身，这将不得不调用自身，这将--让我们去看一个例子。
- en: 'Example: Factorial'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子：阶乘
- en: In math, the factorial of a non-negative integer [mathjaxinline]n[/mathjaxinline],
    denoted by [mathjaxinline]n![/mathjaxinline], is the product of all positive integers
    less than or equal to n. For example, [mathjaxinline]3! = 3 * 2 * 1[/mathjaxinline].
    Also, by definition, [mathjaxinline]0! = 1[/mathjaxinline].
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，非负整数[mathjaxinline]n[/mathjaxinline]的阶乘，用[mathjaxinline]n![/mathjaxinline]表示，是小于或等于n的所有正整数的乘积。例如，[mathjaxinline]3!
    = 3 * 2 * 1[/mathjaxinline]。此外，根据定义，[mathjaxinline]0! = 1[/mathjaxinline]。
- en: How can we write the `factorial` procedure in Racket? This presents a challenge,
    since the numbers that we would like to multiply together depends on the number
    we want to find the factorial of, the *argument*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何在Racket中编写`factorial`过程？这是一个挑战，因为我们想要相乘的数字取决于我们想要找到阶乘的数字，*参数*。
- en: 'Thus, we''ll use recursion. Let''s split it into two possible cases:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用递归。让我们将其分为两种可能情况：
- en: if [mathjaxinline]n ≥ 1[/mathjaxinline], then [mathjaxinline]n! = n * (n-1)![/mathjaxinline]
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果[mathjaxinline]n ≥ 1[/mathjaxinline]，那么[mathjaxinline]n! = n * (n-1)![/mathjaxinline]
- en: if [mathjaxinline]n = 0[/mathjaxinline], then [mathjaxinline]n! = 1[/mathjaxinline]
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果[mathjaxinline]n = 0[/mathjaxinline]，那么[mathjaxinline]n! = 1[/mathjaxinline]
- en: Recursion depends heavily on *conditionals*. If we've finished, return some
    value. Otherwise, continue recursing. For the factorial example, we recurse until
    we reach [mathjaxinline]n = 0[/mathjaxinline], where we then return 1\. We can
    use this to write `factorial`. Take a look at the Racket solution for `factorial`
    below and see if you can make sense of it. Try it out in the interpreter too!
    It's all right if you don't understand the code at the moment. We will go over
    recursion more explicitly in the next subsection.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 递归在很大程度上依赖于*条件语句*。如果我们已经完成，返回某个值。否则，继续递归。对于阶乘的例子，我们递归直到达到[mathjaxinline]n =
    0[/mathjaxinline]，然后返回1。我们可以利用这一点来编写`factorial`。看看下面的Racket解决方案中的`factorial`，看看你能否理解。也在解释器中尝试一下！如果你目前不理解代码，没关系。我们将在下一小节中更明确地讨论递归。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Takeaways
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: 'Here is what we covered in this subsection:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在本小节中涵盖的内容：
- en: What is recursion?
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是递归？
- en: How is factorial defined using recursion?
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用递归定义阶乘？
- en: Move on to the next subsection to learn how recursion works.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 继续下一小节了解递归的工作原理。
