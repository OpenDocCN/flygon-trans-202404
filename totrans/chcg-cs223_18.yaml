- en: Lazy Queues
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 惰性队列
- en: Recall the [`FastQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/FastQueue.elm)
    implementation (referred to in the textbook as the "batched queue" implementation)
    that has *O(1)* amortized cost for each of the operations, including `dequeue`,
    which has an *O(n)* worst-case cost. The amortized analysis, however, assumes
    that no `Queue` object is used as the input for more than one `Queue` operation.
    We will now see queue implementations that employ laziness in order to achieve
    *O(1)* amortized bounds despite the possibility that each queue is used persistently.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，[`FastQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/FastQueue.elm)的实现（在教科书中称为“批处理队列”实现），每个操作的摊销成本为*O(1)*，包括`dequeue`，其最坏情况成本为*O(n)*。
    然而，摊销分析假设没有`Queue`对象被用作超过一个`Queue`操作的输入。 我们现在将看到使用惰性的队列实现，以实现*O(1)*的摊销边界，尽管每个队列可能被持久使用。
- en: Consider the following example from the textbook, where `q_0` is a queue whose
    `front` and `back` lists have equal length `m`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑来自教科书的以下示例，在这个示例中，`q_0`是一个队列，其`front`和`back`列表的长度相等，都为`m`。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using the `FastQueue` implementation, the operation `dequeue q_m_minus_1` triggers
    a call to `List.reverse`, which runs in *O(`m`)* time; all other calls to `dequeue`
    run in *O(1)* time. In the absence of persistence, the amortized analysis is able
    to reason that this *expensive* operation happens infrequently compared to the
    *cheap* ones and that any sequence of *n* `FastQueue` operations takes *O(n)*
    time overall.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`FastQueue`的实现，操作`dequeue q_m_minus_1`触发对`List.reverse`的调用，其运行时间为*O(`m`)*；所有其他对`dequeue`的调用都在*O(1)*时间内运行。
    在没有持久性的情况下，摊销分析能够推断出这个*昂贵*操作与*廉价*操作相比发生的频率较低，并且任何序列的*n*个`FastQueue`操作总共需要*O(n)*的时间。
- en: A Naive Approach — [`LazyBatchedQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/LazyBatchedQueue.elm)
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个天真的方法 — [`LazyBatchedQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/LazyBatchedQueue.elm)
- en: As a first attempt, we might port the `FastQueue` implementation so that it
    uses [`LazyList`s](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/LazyList.elm)
    (a.k.a streams) and memoizes the computation that involves the expensive call
    to `List.reverse`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一次尝试，我们可以将`FastQueue`的实现移植，使其使用[`LazyList`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/LazyList.elm)（也称为流）并记忆涉及昂贵调用`List.reverse`的计算。
- en: We start by defining `front` and `back` to be `LazyList`s rather than `List`s.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将`front`和`back`定义为`LazyList`而不是`List`。
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `empty` queue contains two empty `LazyList`s.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`empty`队列包含两个空的`LazyList`。'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Just like in `FastQueue`, we will maintain the invariant that `front` is empty
    only if `back` is. As a result, we check whether a `Queue` is empty by forcing
    `front` to evaluate to a `LazyListCell` and then checking whether it is `Nil`
    or not.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在`FastQueue`中一样，我们将保持`front`仅在`back`为空时为空的不变性。 结果，我们通过强制`front`评估为`LazyListCell`，然后检查它是否为`Nil`来检查`Queue`是否为空。
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note: Why is it not a good idea to define `isEmpty = (==) empty`?'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：为什么定义`isEmpty = (==) empty`不是一个好主意？
- en: The implementations of `enqueue`, `dequeue`, and `peek` are similar to before,
    except that `LazyListCell`s are created and pattern matched rather than typical
    `List` cells.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`enqueue`、`dequeue`和`peek`的实现与之前类似，只是创建和模式匹配`LazyListCell`而不是典型的`List`单元。'
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Recall that the `checkFront` function enforces and reestablishes, if necessary,
    the invariant that `front` is empty only if `back` is. A first option is the following.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，`checkFront`函数强制执行并重新建立，如果需要的话，`front`仅为空，如果`back`为空的话。 一个首选项是以下内容。
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: However, this version forces the (monolithic) `reverse` function to process
    the entire `LazyList` right away, even if there are no more `dequeue` or `peek`
    operations that require this result. Even worse, the expensive `reverse` operation
    will be performed every time the expensive operation `dequeue q_m_minus_1` is
    evaluated.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个版本强制（单体）`reverse`函数立即处理整个`LazyList`，即使没有更多的`dequeue`或`peek`操作需要这个结果。 更糟糕的是，昂贵的`reverse`操作将在每次评估昂贵的操作`dequeue
    q_m_minus_1`时执行。
- en: It would be better to suspend the `reverse` computation as follows.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将`reverse`计算暂停如下会更好。
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This delays the `reverse` until the resulting `LazyList` is actually needed
    and memoizes the result in case the expensive operation is evaluated again.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这会延迟`reverse`直到实际需要结果的`LazyList`，并且在再次评估昂贵操作时记忆结果。
- en: Nonetheless, if the operation `dequeue q_m_minus_2` is evaluated again, a completely
    different `reverse` suspension is created, so laziness and memoization cannot
    help amortize the cost. So this naive translation of `FastQueue` does not address
    the challenge of using arbitrary versions of a `Queue` persistently.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，如果再次评估操作`dequeue q_m_minus_2`，将创建一个完全不同的`reverse`悬挂，因此惰性和记忆化无法帮助分摊成本。因此，这种对`FastQueue`的简单转换并未解决持久地使用`Queue`的任意版本所面临的挑战。
- en: 'Note: You may want to `diff` or `vimdiff` [`FastQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/FastQueue.elm)
    and [`LazyBatchedQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/LazyBatchedQueue.elm)
    to see the changes required for adding laziness.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：您可能想要使用`diff`或`vimdiff`查看[`FastQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/FastQueue.elm)和[`LazyBatchedQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/LazyBatchedQueue.elm)的更改，以了解添加惰性所需的更改。
- en: A Clever Approach — [`BankersQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/BankersQueue.elm)
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个巧妙的方法 — [`BankersQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/BankersQueue.elm)
- en: A more clever approach is based on the idea of having `dequeue q_0` create a
    suspension involving the `reverse` that is not forced until the `dequeue q_m`
    operation. Separating the creation and evaluation of the suspension allows *O(m)*
    time to pay for the expensive *O(m)* cost of the `reverse`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 更巧妙的方法基于这样一个想法，即让`dequeue q_0`创建一个悬挂，涉及到`reverse`，直到`dequeue q_m`操作才强制执行。将悬挂的创建和评估分开允许用
    *O(m)* 时间来支付 *O(m)* 成本昂贵的 `reverse` 操作的费用。
- en: To realize this strategy, we do not wait until the `front` list is about to
    become empty before reversing the `back` list. Instead, the `back` list is `reverse`d
    as soon as it becomes longer than the `front` and is then `append`ed to the `front`
    in order to maintain the correct order of elements in the `Queue`. The key is
    that the `LazyList` defined by
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一策略，我们不会等到`front`列表即将变空之前再颠倒`back`列表。相反，一旦`back`列表变得比`front`列表长，就会立即对`back`列表进行`reverse`操作，然后将其追加到`front`列表中，以保持`Queue`中元素的正确顺序。关键在于由以下定义的`LazyList`：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: does not immediately perform the monolithic call to `reverse` because `append`
    is an incremental function. Only after sufficient calls to `dequeue` exhaust the
    `front` list is `back` reversed. Let's go through the implementation of this strategy,
    and then discuss how it fares with respect to the problematic sequence of operations
    above.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 不会立即执行对`reverse`的单片调用，因为`append`是一个增量函数。只有在对`front`列表进行足够多次`dequeue`调用后，才会对`back`进行颠倒。让我们来看一下这种策略的实现，然后讨论它在面对上述问题序列时的表现。
- en: The representation maintains the explict `Int`eger sizes of the `front` and
    `back` streams.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种表示方式保持了`front`和`back`流的显式`Int`eger大小。
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Describing the `empty` queue is straightforward.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 描述`empty`队列很简单。
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When the size of the `front` stream is greater than `0`, `peek` calls the [`LazyList`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/LazyList.elm)
    `head` operation, which `force`s the evaluation of the `LazyListCell` and returns
    the first element of the resulting `Cons` value.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当`front`流的大小大于`0`时，`peek`调用[`LazyList`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/LazyList.elm)`head`操作，该操作`force`评估`LazyListCell`并返回生成的`Cons`值的第一个元素。
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If the `back` stream is strictly smaller than the `front`, then `enqueue` (lazily)
    adds the new element `x` to the `back`. Otherwise, the `back` is `reverse`d and
    (lazily) `append`ed to the `front`, updating the size counts appropriately.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`back`流严格小于`front`流，则（惰性地）将新元素`x`添加到`back`中。否则，将`back`进行`reverse`操作并（惰性地）追加到`front`中，适当更新大小计数。
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Similarly, `dequeue` checks whether the operation results in the `back` stream
    being longer than the new `front`, in which case the `back` is `reverse`d and
    appended to the new `front`. Recall that the [`LazyList`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/LazyList.elm)
    `tail` operation `force`s its argument and returns the second element of the resulting
    `Cons` value.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`dequeue`检查操作是否导致`back`流比新的`front`流更长，在这种情况下，将`back`进行`reverse`操作并追加到新的`front`中。请回忆[`LazyList`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/LazyList.elm)`tail`操作会`force`其参数并返回生成的`Cons`值的第二个元素。
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These two operations can be refactored to use a common `check` function that
    enforces the invariant that the `rear` is never longer than the `front`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个操作可以重构为使用一个通用的`check`函数，该函数强制实施`rear`永远不会比`front`长的不变量。
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To see how this approach fares well even with persistent data structures, consider
    the sequence of *m* `dequeue` operations from before. The first one, `dequeue
    q_0`, creates a suspension involving `reverse` that is forced by the `dequeue
    q_m` operation. No other operation in the sequence creates a suspension. Therefore,
    to force another expensive call to `reverse` requires another call to `dequeue
    q_0` followed by *m-1* calls to `dequeue`. So, the *O(m)* cost of the `reverse`
    can be amortized over the sequence of *O(m)* operations that must precede it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用持久数据结构，这种方法也能很好地处理，考虑之前的*m*次`dequeue`操作序列。第一个`dequeue q_0`创建了一个涉及`reverse`的悬挂，被`dequeue
    q_m`操作强制执行。序列中没有其他操作创建悬挂。因此，要再次强制调用`reverse`需要另一个对`dequeue q_0`的调用，后跟*m-1*次对`dequeue`的调用。因此，`reverse`的*O(m)*成本可以摊销到必须在其之前进行的*O(m)*操作序列中。
- en: Sections 6.1, 6.2, and 6.3 of the textbook show how to make this formalize this
    argument by adapting the banker's method to account for lazy evaluation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 教科书的第6.1、6.2和6.3节展示了如何通过调整银行家方法来适应惰性评估，从而形式化这一论点。
- en: Another Clever Approach — [`PhysicistsQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/PhysicistsQueue.elm)
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另一个聪明的方法 — [`PhysicistsQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Laziness/PhysicistsQueue.elm)
- en: The textbook describes another way to implement a strategy similar to the one
    employed by `BankersQueue`. In that version, the (incremental) `append` function
    waits until `front` becomes empty before applying the (monolithic) `reverse` function
    to `back`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 教科书描述了另一种实现类似于`BankersQueue`所采用的策略的方法。在该版本中，（增量的）`append`函数等到`front`变为空时才将（整体的）`reverse`函数应用于`back`。
- en: Because the `back` list is only ever processed by monolithic functions, there
    is no need for it to be represented using a `LazyList`. Thus, one change to the
    representation is to use an ordinary `List` for `back`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`back`列表只被整体函数处理，所以不需要使用`LazyList`来表示它。因此，对表示的一个更改是使用普通的`List`代替`back`。
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using this representation, the key operation from before becomes
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种表示，之前的关键操作变为
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: assuming that
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: is an incremental function. (**Exercise** — Implement `append'`.)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个增量函数。（**练习** — 实现`append'`。）
- en: Because this `append'` function, like `append`, is incremental, the resulting
    list is not entirely evaluated right away. As it turns out, the amortized analysis
    can be made to work even if this concatenation is performed eagerly. Thus, a second
    change to the representation is to store `front` as a `Lazy List` (an ordinary
    `List` that is suspended) rather than a `LazyList` (a stream).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个`append'`函数像`append`一样是增量的，所以生成的列表不会立即完全评估。事实证明，即使这个连接是急切地执行的，摊销分析也可以得到工作。因此，对表示的第二个更改是将`front`存储为`Lazy
    List`（一个被挂起的普通`List`）而不是`LazyList`（一个流）。
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Using this representation, the key operation from before becomes:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种表示，之前的关键操作变为：
- en: '[PRE18]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: A consequence of this representation is that `peek` and `dequeue` must `force`
    the entire suspended `front` list. To reduce the costs of these operations, the
    final change to the representation is to keep an additional (evaluated) `List`
    called `pre` that is a prefix of (the suspended `List`) `front` to facilitate
    fast access to the front of `front`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这种表示的一个结果是，`peek`和`dequeue`必须`force`整个悬挂的`front`列表。为了降低这些操作的成本，对表示的最终更改是保留一个额外的（已评估的）`List`，称为`pre`，它是（悬挂的`List`）`front`的前缀，以便快速访问`front`的前端。
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Like in the `BankersQueue`, the size of the `back` is never allowed to become
    larger than the `front`. In addition, `pre` is allowed to be empty only if `front`
    is empty. The `check` and `checkPre` functions enforce these invariants.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 像在`BankersQueue`中一样，`back`的大小永远不允许大于`front`。此外，只有当`front`为空时，才允许`pre`为空。`check`和`checkPre`函数强制执行这些不变量。
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Emptiness:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 空：
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `enqueue` operation adds to the `back` and `peek` pulls from `pre`, the
    partially evaluated front of the `front`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`enqueue`操作将添加到`back`，而`peek`则从`pre`中提取，这是`front`的部分评估前端。'
- en: '[PRE22]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Notice that `dequeue` uses `List.tail` to update both `pre` and `front`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`dequeue`使用`List.tail`来更新`pre`和`front`。
- en: '[PRE23]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Section 6.4 of the textbook shows how to adapt the physicist's method to account
    for lazy evaluation and use to argue that this implementation, like the `BankersQueue`,
    has *O(1)* amortized costs even in the face of persistent access.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 课本的第6.4节展示了如何将物理学家的方法改编为考虑惰性求值并用来论证这种实现，就像`BankersQueue`一样，即使在持久访问的情况下也具有*O(1)*摊销成本。
- en: Reading
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: Recommended
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 推荐
- en: Okasaki, Chapter 6.1—6.4\. Although we will not cover the accounting techniques
    in this class, you are encouraged to read through this material a few times to
    help understand the basic mechanisms.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Okasaki，第6.1—6.4章。虽然我们在这门课上不会涵盖会计技术，但鼓励你多次阅读这些材料，以帮助理解基本机制。
