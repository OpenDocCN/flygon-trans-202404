["```\n root@galileo:~# opkg install --force-overwrite uclibc\n    root@galileo:~# opkg install --force-overwrite uclibc\n    Installing uclibc (0.9.33+git0+946799cd0ce0c6c803c9cb173a84f4d607bde350-r8.4) on root.\n    Downloading http://repo.opkg.net/galileo/repo/i586/uclibc_0.9.33+git0+946799cd0ce0c6c803c9cb173a84f4d607bde350-r8.4_i586.ipk.\n    Configuring uclibc.\n    root@galileo:~# opkg upgrade wget\n    Installing wget (1.14-r16.0) on root.\n    Downloading http://repo.opkg.net/galileo/repo/i586/wget_1.14-r16.0_i586.ipk.\n    Multiple replacers for update-alternatives-cworth, using first one (update-alternatives-opkg).\n    Multiple replacers for update-alternatives-cworth, using first one (update-alternatives-opkg).\n    Configuring wget.\n    update-alternatives: Linking //usr/bin/wget to /usr/bin/wget.wget\n\n` \n```", "```\nroot@platform:~# python --version \n```", "```\nroot@platform:~# vi iot.py \n```", "```\n#!/usr/bin/python\n\n# Hello Internet of Things\nprint 'Hello Internet of Things @ Python'\n\n# End of Python Script \n```", "```\nroot@platform:~# python iot.py \n```", "```\nroot@platform:~# vi iot.py \n```", "```\n#!/usr/bin/python\n\n# Libraries\nimport mraa\n\n# Mraa Version\nprint (mraa.getVersion())\nprint (mraa.getPlatformName())\nprint (mraa.getPlatformType())\n\n# End of Python Script \n```", "```\nroot@platform:~# python iot.py \n```", "```\nroot@platform:~# vi iot.py \n```", "```\n#!/usr/bin/python\n\n# Libraries\nimport mraa\nimport time\n\n# Mraa GPIO Direction Output\nif mraa.getPlatformType() == 1:\n    gpioline = mraa.Gpio(13)\nif mraa.getPlatformType() == 2:\n    gpioline = mraa.Gpio(44)\ngpioline.dir(mraa.DIR_OUT)\ngpionextvalue = not gpioline.read()\ngpioline.write(gpionextvalue)\ntime.sleep(1)\ngpioline.write(not gpionextvalue)\n\n# End of Python Script \n```", "```\nroot@platform:~# python iot.py \n```", "```\nroot@platform:~# vi iot.py \n```", "```\n#!/usr/bin/python\n\n# Libraries\nimport mraa\n\n# Mraa I2C\nif mraa.getPlatformType() == 1:\n    i2cline = mraa.I2c(0)\nif mraa.getPlatformType() == 2:\n    i2cline = mraa.I2c(1)\ni2cline.address(0x6b)\nprint i2cline.readReg(0x6b, 0x80)\n\n# End of Python Script \n```", "```\nroot@platform:~# python iot.py \n```", "```\nroot@platform:~# vi iot.py \n```", "```\n#!/usr/bin/python\n\n# Libraries\nimport mraa\n\n# Mraa Aio\naioline = mraa.Aio(0)\naioline.setBit(10)\naioline.read()\nprint (\"%.5f\" % aioline.readFloat())\n# End of Python Script \n```", "```\nroot@platform:~# python iot.py \n```", "```\nroot@platform:~# vi iot.py \n```", "```\n#!/usr/bin/python\n\n# Libraries\nimport mraa\n\n# Mraa UART\nuartdevice = mraa.Uart(0)\nprint uartdevice.getDevicePath()\n\n# End of Python Script \n```", "```\nroot@platform:~# python iot.py \n```", "```\n root@board:~# pip install plotly\n    root@board:~# python -c \"import plotly; plotly.tools.set_credentials_file(username='yourusername', api_key='yourapikey', stream_ids=['yourstreamid'])\" \n```", "```\n root@galileo:~# nano ~/.plotly/.credentials\n    {\n    \"username\": \"yourusername\",\n    \"stream_ids\": [\n        \"yourstreamid\",\n        \"yourotherstreamid\"\n    ],\n    \"api_key\": \"yourapikey\",\n    \"proxy_username\": \"\",\n    \"proxy_password\": \"\"\n    } \n```", "```\n root@board:~# vi mainplotly.py \n```", "```\n#!/usr/bin/python\n\nimport time\n\nimport plotly.plotly as py\nfrom plotly.graph_objs import Scatter, Layout, Figure\n\nusername = 'TheIoTLearningInitiative'\napi_key = 'twr0hlw78c'\nstream_token = '2v04m1lk1x'\n\ndef functionServicesPlotly():\n\n    py.sign_in(username, api_key)\n\n    trace1 = Scatter(\n        x=[],\n        y=[],\n        stream=dict(\n            token=stream_token,\n            maxpoints=200\n        )\n    )\n\n    layout = Layout(\n        title='Internet of Things 101 Services Plot.Ly'\n    )\n\n    fig = Figure(data=[trace1], layout=layout)\n\n    py.plot(fig, filename='Internet of Things 101 Services Plot.Ly', auto_open=$\n\n    i = 0\n    stream = py.Stream(stream_token)\n    stream.open()\n\n    while True:\n        stream_data = i + 1\n        stream.write({'x': i, 'y': stream_data})\n        i += 1\n        time.sleep(0.25)\n\nif __name__ == '__main__':\n\n    functionServicesPlotly()\n\n# End of File \n```", "```\n root@board:~# python mainplotly.py\n    ...\n    ... \n```", "```\nroot@platform:~# git clone https://github.com/TheIoTLearningInitiative/InternetOfThings101.git \n```", "```\nroot@platform:~# cd InternetOfThings101/code/iotpy\nroot@platform:~/InternetOfThings101/code/iotpy# mkdir configuration\nroot@platform:~/InternetOfThings101/code/iotpy# nano configuration/credentials\n\n# IoTPy File Configuration\n\n# Go to https://plot.ly and sign up\n# Get your Username and API Key under Settings -> API Settings -> API\n# Get 3 Stream Tokens under Settings -> API Settings -> Streaming API -> Generate Token\n[plotly]\nusername = \napikey = \nstreamtoken = \nstreamtokentx = \nstreamtokenrx = \n\n# Go to dev.twitter.com and sign up\n# Go to Tools -> Manage Your Apps (Application Management)\n# Create a New Application and go to \"Keys and Access Tokens\" tab\n# Generate and get under Application Settings section\n# Consumer Key (API Key), Consumer Secret (API Secret)\n# Generate and get under Your Access Token section\n# Access Token and Access Token Secret\n# Give Access Level \"Read and Write\"\n[twitter]\nconsumer_key = \nconsumer_secret = \naccess_token = \naccess_token_secret = \n\n# Go to www.voicerss.org and sign up\n# Go to API -> Get API Key\n# \n[voicerss]\napikey = \n\n# Go to market.mashape.com and sign up\n# Search for VoiceRss API and click on it\n# Copy your VoiceRss API Key and paste under \"URL PARAMETERS key QUERY AUTH\" field\n# Fill out Form Encoded Parameters and Test EndPoint using Curl method\n# Copy the generated Mashape Key\n[mashape]\nmashapekey = \n\n# End of File\n\nroot@platform:~/InternetOfThings101/code/iotpy# echo voicerssmashapekey > configuration/voicerss.ak\nroot@platform:~/InternetOfThings101/code/iotpy# echo voicerssapikey > configuration/voicerss.mk \n```", "```\nroot@platform:~/InternetOfThings101/code/iotpy# python main.py -m aio\nroot@platform:~/InternetOfThings101/code/iotpy# python main.py -m bpta\nroot@platform:~/InternetOfThings101/code/iotpy# python main.py -m gpio    \nroot@platform:~/InternetOfThings101/code/iotpy# python main.py -m mqttpub # IoTPy/Temperature\nroot@platform:~/InternetOfThings101/code/iotpy# python main.py -m mqttsub\nroot@platform:~/InternetOfThings101/code/iotpy# python main.py -m mraa\nroot@platform:~/InternetOfThings101/code/iotpy# time python main.py -m opencv \n```", "```\nroot@platform:~/InternetOfThings101/code/iotpy# python main.py -p alive # Audio, Twitter\nroot@platform:~/InternetOfThings101/code/iotpy# python main.py -p climate # BMP180, PlotLy, https://plot.ly/~TheIoTLearningInitiative\nroot@platform:~/InternetOfThings101/code/iotpy# python main.py -p selfie # Camera, Twitter\nroot@platform:~/InternetOfThings101/code/iotpy# python main.py -p system # Network, Plotly, https://plot.ly/~TheIoTLearningInitiative\nroot@platform:~/InternetOfThings101/code/iotpy# python main.py -p weather # Audio, Pywapi \n```", "```\n# Create an account\n  https://dashboard.us.enableiot.com/\n# In Edison / Galileo\nroot@galileo:~# iotkit-admin initialize  \nroot@galileo:~# iotkit-admin reset-components  \nroot@galileo:~# iotkit-admin test\nroot@galileo:~# iotkit-admin device-id\n# From https://dashboard.us.enableiot.com/ui/dashboard#/devices, add a New Device\n# From https://dashboard.us.enableiot.com/ui/dashboard#/account, get Activation Code\nroot@galileo:~# iotkit-admin activate <Activation Code from Webpage>\nroot@galileo:~# iotkit-admin catalog\nroot@galileo:~# iotkit-admin register temp temperature.v1.0\nroot@galileo:~# iotkit-admin observation temp 35\nroot@galileo:~# iotkit-admin observation temp 30 \n```"]