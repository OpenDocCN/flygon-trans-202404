- en: 'Lecture 21: Predicate Logic'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讲座 21：谓词逻辑
- en: '## Syntax'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '## 语法'
- en: 'In propositional logic, the statements we are proving are completely abstract.
    To be able to prove programs correct, we need a logic that can talk about the
    things that programs compute on: integers, strings, tuples, datatype constructors,
    and functions. We''ll enrich propositional logic with the ability to talk about
    these things, obtaining a version of **predicate logic**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在命题逻辑中，我们要证明的陈述是完全抽象的。要能够证明程序的正确性，我们需要一种能够讨论程序计算的内容的逻辑：整数、字符串、元组、数据类型构造函数和函数。我们将用能够讨论这些内容的方式丰富命题逻辑，从而得到一个版本的**谓词逻辑**。
- en: 'The syntax extends propositional logic with a few new expressions, shown in
    blue:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 语法使用了一些新表达式扩展了命题逻辑，如下所示：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Terms t stand for individual elements of some domain of objects we are reasoning
    about, such as the natural numbers.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 项 t 代表我们正在推理的一些对象域中的个别元素，例如自然数。
- en: The formula ∀x.f means that the formula f is true for any choice of x. This
    is called **universal quantification**, and ∀ is the **universal quantifier**.
    The formula ∃x.f denotes **existential quantification**. It means that the formula
    f is true for some choice of x, though there may be more than one such x.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 公式 ∀x.f 表示对于任意选择的 x，公式 f 都成立。这被称为**全称量化**，∀ 是**全称量词**。公式 ∃x.f 表示**存在量化**。它意味着存在某个选择的
    x 使得公式 f 成立，尽管可能存在多个这样的 x。
- en: It is possible to restrict the range of quantifiers to quantify over some subset
    of the domain of possible values. For universal quantifiers, we use an implication
    ⇒, and for existential quantifiers, we use conjunction ∧. For example, if we wanted
    to say that all *positive* numbers x satisfy some property Q(x), we could write
    ∀x.x > 0 ⇒ Q(x). This works because the quantified formula is vacuously true for
    numbers not greater than 0\. To say that there exists a positive number that satisfies
    Q, we can write ∃x.x > 0 ∧ Q(x).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将量词的范围限制为量化到可能值域的某个子集。对于全称量词，我们使用蕴含符号 ⇒，而对于存在量词，我们使用合取符号 ∧。例如，如果我们想要说所有*正*数
    x 都满足某个性质 Q(x)，我们可以写成 ∀x.x > 0 ⇒ Q(x)。这有效是因为对于不大于 0 的数来说，量化的公式是空真的。要说存在一个满足 Q
    的正数，我们可以写成 ∃x.x > 0 ∧ Q(x)。
- en: 'Using quantifiers, we can express some interesting statements. For example,
    we can express the idea that a number n is prime in various logically equivalent
    ways:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用量词，我们可以表达一些有趣的陈述。例如，我们可以用各种逻辑等价的方式表达一个数 n 是质数的想法：
- en: '| Prime(n) | ⇔ | ∀m. 1 < m ∧ m < n ⇒ ¬∃k. k*m = n |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| Prime(n) | ⇔ | ∀m. 1 < m ∧ m < n ⇒ ¬∃k. k*m = n |'
- en: '|   | ⇔ | ¬∃m. 1 < m ∧ m < n ∧ ∃k. k*m = n |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   | ⇔ | ¬∃m. 1 < m ∧ m < n ∧ ∃k. k*m = n |'
- en: '|  | ⇔ | ¬∃m. ∃k. 1 < m ∧ m < n ∧ k*m = n |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|  | ⇔ | ¬∃m. ∃k. 1 < m ∧ m < n ∧ k*m = n |'
- en: Rules for Quantifiers
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 量词规则
- en: Introduction and elimination rules can be defined for universal and existential
    quantifiers. In the following rules, f(t) refers to f(x) with all free occurrences
    of the variable x replaced by the term t.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于全称量词和存在量词，可以定义引入和消除规则。在以下规则中，f(t) 指的是将变量 x 的所有自由出现替换为项 t 后的 f(x)。
- en: '| rule name | rule | intuition |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| rule name | rule | intuition |'
- en: '| --- | --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ∀ | intro |  | (*) This rule can only be applied if x does not occur free
    in Γ.We can conclude that f holds for all x if we choose an **arbitrary** x and
    prove f(x). |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| ∀ | intro |  | (*) 只有当 x 不在 Γ 中自由出现时才能应用此规则。如果我们选择一个**任意的** x 并证明 f(x)，我们就可以得出
    f 对所有 x 都成立的结论。 |'
- en: '| elim |  | If we''ve proven f holds for all x, we can conclude that f holds
    for any given t. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| elim |  | 如果我们已经证明了对所有 x 成立的 f，那么我们可以得出对于任意给定的 t，f 也成立。 |'
- en: '| ∃ | intro |  | We can prove that there exists some x with property f by simply
    producing a t with property f. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| ∃ | intro |  | 我们可以通过简单地产生一个具有性质 f 的 t 来证明存在某个 x 拥有性质 f。 |'
- en: '| elim |  | (*) this rule can be applied only if a does not occur free in Γ
    or g.This is like ∨ elimination — we can only conclude something from the existence
    of an x if the conclusion g doesn''t depend on which x satisfies f. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| elim |  | (*) 只有当 a 不在 Γ 或 g 中自由出现时才能应用此规则。这类似于 ∨ 消除 —— 我们只有在结论 g 不依赖于满足
    f 的 x 是哪个时才能从存在一个 x 推断出一些东西。 |'
- en: The rule (∀-elim) specializes the formula f(x) to a particular value t of x.
    (We require implicitly that t be of the right type to be substituted for x.) Since
    f holds for all x, it should hold for any particular choice of x, including t.
    The (∀-intro) rule formalizes the type of argument that starts, "Let a be an arbitrary
    element..." If one can prove a fact f(a) for arbitrarily chosen a, then f(x) holds
    for all x.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 规则 (∀-elim) 将公式 f(x) 特化为 x 的特定值 t。（我们隐含要求 t 是适合替代 x 的正确类型。）由于 f 对所有 x 都成立，它应该对任意选择的
    x 都成立，包括 t。 (∀-intro) 规则正式化了一种类型的论证，即以“假设 a 是一个任意元素...”开头。如果可以证明对于任意选择的 a 都成立一个事实
    f(a)，那么 f(x) 对所有 x 都成立。
- en: The rule (∃-intro) derives ∃x.f(x) because a **witness** t to the existential
    has been produced. Intuitively, if f(t) holds for some t, then certainly there
    exists an x such that P(x) holds. The idea behind rule (∃-elim) is that if g can
    be shown without using any information about the witness x other than f(x), then
    the mere existence of an element satisfying f is enough to imply g.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 规则 (∃-intro) 推导出 ∃x.f(x)，因为存在量化的证据 t 已经被产生。直观地说，如果对某个 t 成立 f(t)，那么肯定存在一个 x 使得
    P(x) 成立。 规则 (∃-elim) 的背后思想是，如果能够证明 g 而不使用有关证据 x 的任何信息，除了 f(x)，那么仅仅存在一个满足 f 的元素就足以暗示
    g。
- en: 'The proviso (*) in the (∀-intro) and (∃-elim) rules is a restriction on the
    use of the rule. This restriction prevents us from doing unsound reasoning like
    the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: (∀-intro) 和 (∃-elim) 规则中的附注 (*) 是对规则使用的限制。这种限制防止我们进行不合理的推理，如下所示：
- en: 'This proof says that if a particular x is greater than 10, then every x is
    greater than 10, something that is clearly false! The problem is the use of ∀-intro:
    we are able to prove that x > 10, but not for an arbitrary x, only for the particular
    x we had already made assumptions about.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个证明表明如果一个特定的 x 大于 10，那么每个 x 都大于 10，这显然是错误的！问题在于使用了 ∀-intro：我们能够证明 x > 10，但不是对于任意的
    x，而是对于我们已经做出假设的特定的 x。
- en: However, it is fine for the variable a to appear in an assumption that is made
    *after* the point where (∀-intro) is applied. For example,
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在应用 (∀-intro) 的地方之后，变量 a 出现在假设中是可以的。例如，
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In automated proof assistants that allow a user to develop natural deduction
    proofs by subgoaling, proofs are generated from bottom to top. In such systems,
    the proviso (*) can be enforced by generating a fresh variable a when either (∀-intro)
    or (∃-elim) is applied.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在允许用户通过子目标开发自然演绎证明的自动证明助手中，证明是从底部生成的。在这样的系统中，(*) 可以通过在应用 (∀-intro) 或 (∃-elim)
    时生成一个新的变量 a 来强制执行。
- en: Reasoning with Equality
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用等号推理
- en: 'Predicate logic allows the use of arbitary predicates P. Equality (=) is such
    a predicate. It applies to two arguments; we can read t[1]=t[2] as a predicate
    =(t[1],t[2]). But in addition to the rules above for arbitrary predicates, equality
    has some special properties. The following three rules capture that equality is
    an **equivalence relation**: it is reflexive, symmetric, and transitive.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词逻辑允许使用任意谓词 P。等号 (=) 就是这样的谓词。它适用于两个参数；我们可以将 t[1]=t[2] 视为谓词 =(t[1],t[2])。但是，除了上述任意谓词的规则之外，相等性还具有一些特殊性质。以下三条规则体现了相等性是一个等价关系的性质：它是自反的、对称的和传递的。
- en: '|'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '&#124;   &#124;'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124;   &#124;'
- en: '&#124; t = t &#124;'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; t = t &#124;'
- en: '| (reflexivity) |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| (reflexivity) |'
- en: '&#124; t[1] = t[2] &#124;'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; t[1] = t[2] &#124;'
- en: '&#124; t[2] = t[1] &#124;'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; t[2] = t[1] &#124;'
- en: '| (symmetry) |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| (symmetry) |'
- en: '&#124; t[1] = t[2] &#124; t[2] = t[3] &#124;'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; t[1] = t[2] &#124; t[2] = t[3] &#124;'
- en: '&#124; t[1] = t[3] &#124;'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; t[1] = t[3] &#124;'
- en: '| (transitivity) |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| (transitivity) |'
- en: 'Beyond being an equivalence relation, equality preserves meaning under substitution.
    If two things are equal, substituting one for the other in equal terms results
    in equal terms. This is known as Leibniz''s rule (substitution of equals for equals):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了是等价关系外，相等性在替换下保持意义。如果两个事物相等，则在相等的术语中替换一个事物为另一个事物会得到相等的术语。这就是莱布尼茨法则（等同物的替换）的含义：
- en: '|'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '&#124; t[1] = t[2] &#124;'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; t[1] = t[2] &#124;'
- en: '&#124; t{t[1]/x} = t{t[2]/x} &#124;'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; t{t[1]/x} = t{t[2]/x} &#124;'
- en: '|'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Leibniz''s rule can also be applied to show propositions are logically equivalent
    :'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 莱布尼茨法则也可用于展示命题在逻辑上等价：
- en: '|'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '&#124; t = t'' &#124;'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; t = t'' &#124;'
- en: '&#124; P{t/x} ⇔ P{t''/x} &#124;'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; P{t/x} ⇔ P{t''/x} &#124;'
- en: '|'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: For example, suppose we know y = x+1 and x(x+1)+(x+1) = (x+1)². Then we can
    use this rule to prove xy+(x+1) = y² by applying this rule with t = x+1, t' =
    y, and P = (xz+(x+1) = z²).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们知道 y = x+1 和 x(x+1)+(x+1) = (x+1)²。然后我们可以使用该规则证明 xy+(x+1) = y²，通过使用 t
    = x+1，t' = y，以及 P = (xz+(x+1) = z²) 应用该规则。
- en: The same idea can be applied completely at the propositional level as well.
    If we can prove that two formulas are equivalent, they can be substituted for
    one another within any other formula.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的思想也可以完全应用在命题层面上。如果我们可以证明两个公式是等价的，那么它们可以在任何其他公式中相互替换。
- en: '|'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '&#124; Q ⇔ R &#124;'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; Q ⇔ R &#124;'
- en: '&#124; P{Q/A} ⇔ P{R/A} &#124;'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; P{Q/A} ⇔ P{R/A} &#124;'
- en: '|'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: This admissible rule can be very convenient for writing proofs, though anything
    we can prove with it can be proved using just the basic rules. It can be very
    handy when there is a large library of logical equivalences to draw upon, because
    it allows rewriting of deeply nested subformulas.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可接受的规则在编写证明时非常方便，尽管我们可以用基本规则证明任何内容。当有大量逻辑等价关系库可供利用时，它可能非常方便，因为它允许重新编写深度嵌套的子公式。
- en: Reasoning on Integers and Other Sets
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对整数和其他集合的推理
- en: For reasoning about specific kinds of values, we need axioms that describe how
    those values behave. For example, the following axioms partly describe the integers
    and can be used to prove many facts about integers. In fact, they define a more
    general structure, a **commutative ring**, so anything proved with them holds
    for any commutative ring. These axioms are all considered to be implicitly universally
    quantified.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特定类型的值进行推理，我们需要描述这些值行为的公理。例如，以下公理部分描述了整数，并且可以用来证明关于整数的许多事实。事实上，它们定义了一个更一般的结构，即**交换环**，因此使用它们证明的任何内容都适用于任何交换环。这些公理都被认为是隐含的普遍量化。
- en: '| (x+y)+z = x+(y+z) | (associativity of +) |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| (x+y)+z = x+(y+z) |（+的结合性）|'
- en: '| x+y = y+x | (commutativity of +) |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| x+y = y+x |（+的交换性）|'
- en: '| (x*y)*z = x*(y*z) | (associativity of *) |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| (x*y)*z = x*(y*z) |（*的结合性）|'
- en: '| x*y = y*x | (commutativity of *) |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| x*y = y*x |（*的交换性）|'
- en: '| x*(y+z) = x*y+x*z | (distributivity of * over +) |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| x*(y+z) = x*y+x*z |（*对+的分配性）|'
- en: '| x + 0 = x | (additive identity) |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| x + 0 = x |（加法单位元）|'
- en: '| x + (-x) = 0 | (additive inverse) |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| x + (-x) = 0 |（加法逆元）|'
- en: '| x*1 = x | (multiplicative identity) |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| x*1 = x |（乘法单位元）|'
- en: '| x*0 = 0 | (annihilation) |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| x*0 = 0 |（湮灭）|'
- en: 'These rules use a number of functions: +, *, -, 0, and 1 (we can think of 0
    and 1 as functions that take zero arguments). These symbols are represented by
    the metavariable f in the grammar earlier.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则使用了许多函数：+，*，-，0和1（我们可以将0和1视为不带参数的函数）。这些符号在前面的语法中由元变量f表示。
- en: 'Proving facts about arithmetic can be tedious. For our purposes, we will write
    proofs that do reasonable algebraic manipulations as a single step, e.g.:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 证明关于算术的事实可能会很繁琐。对于我们的目的，我们将进行合理的代数操作，将证明作为一个单一步骤，例如：
- en: '|'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '&#124; (x+2)² = 2*x &#124;'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; (x+2)² = 2*x &#124;'
- en: '&#124; x² = −2*x−4 &#124;'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; x² = −2*x−4 &#124;'
- en: '| (algebra) |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '|（代数）|'
- en: This proof step can be done explicitly using the rules and axioms above, but
    it takes several steps.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个证明步骤可以通过上述规则和公理来明确完成，但需要多个步骤。
