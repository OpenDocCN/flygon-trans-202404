- en: ProofObjectsThe Curry-Howard Correspondence
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 证明对象库里的柯里-霍华德对应
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Require Export IndProp.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导出 IndProp。
- en: '[PRE1]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Print ev.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 ev。
- en: (* ==>   Inductive ev : nat -> Prop :=     | ev_0 : ev 0     | ev_SS : forall n, ev n -> ev (S (S n)).
    *)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: (* ==>   归纳定义 ev : nat -> Prop :=     | ev_0 : ev 0     | ev_SS : forall n, ev n -> ev (S (S n)).
    *)
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: propositions  ~  types
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命题  ~  类型
- en: proofs        ~  data values
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明        ~  数据值
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Check ev_SS.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 ev_SS。
- en: (* ===> ev_SS : forall n,                   ev n ->                   ev (S (S n)) *)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: (* ===> ev_SS : forall n,                   ev n ->                   ev (S (S n)) *)
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Theorem ev_4 : ev 4.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '定理 ev_4 : ev 4。'
- en: Proof.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: apply ev_SS. apply ev_SS. apply ev_0. Qed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 ev_SS。应用 ev_SS。应用 ev_0。Qed。
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Print ev_4.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 ev_4。
- en: (* ===> ev_4 = ev_SS 2 (ev_SS 0 ev_0)      : ev 4  *)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: (* ===> ev_4 = ev_SS 2 (ev_SS 0 ev_0)      : ev 4  *)
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Check (ev_SS 2 (ev_SS 0 ev_0)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 (ev_SS 2 (ev_SS 0 ev_0))。
- en: (* ===> ev 4 *)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: (* ===> ev 4 *)
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ∀n, ev n → ev (S (S n)),
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ∀n, ev n → ev (S (S n)),
- en: expresses this functionality, in the same way that the polymorphic
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表达了这种功能，就像多态的方式一样
- en: type ∀ X, list X expresses the fact that the constructor
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型 ∀ X, list X 表达了构造函数
- en: nil can be thought of as a function from types to empty lists
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: nil 可以被视为从类型到空列表的函数
- en: with elements of that type.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与该类型的元素。
- en: We saw in the [Logic](Logic.html) chapter that we can use function
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在 [Logic](Logic.html) 章节中看到，我们可以使用函数
- en: application syntax to instantiate universally quantified variables
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用语法来实例化全称量化的变量
- en: in lemmas, as well as to supply evidence for assumptions that
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在引理中，以及为假设提供证据
- en: 'these lemmas impose.  For instance:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些引理施加的限制。例如：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can now see that this feature is a trivial consequence of the
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们可以看到这个特性是归纳定义的一个微不足道的结果
- en: 'status the Coq grants to proofs and propositions: Lemmas and'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Coq 授予证明和命题的状态：引理和
- en: hypotheses can be combined in expressions (i.e., proof objects)
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设可以在表达式中组合（即，证明对象中）
- en: according to the same basic rules used for programs in the
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据用于程序的相同基本规则
- en: language.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语言。
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Theorem ev_4'''' : ev 4.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '定理 ev_4'''' : ev 4。'
- en: Proof.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: Show Proof.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 显示证明。
- en: apply ev_SS.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 ev_SS。
- en: Show Proof.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 显示证明。
- en: apply ev_SS.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 ev_SS。
- en: Show Proof.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 显示证明。
- en: apply ev_0.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 ev_0。
- en: Show Proof.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 显示证明。
- en: Qed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Qed。
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Definition ev_4'''''' : ev 4 :='
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 ev_4'''''' : ev 4 :='
- en: ev_SS 2 (ev_SS 0 ev_0).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: ev_SS 2 (ev_SS 0 ev_0)。
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Print ev_4.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 ev_4。
- en: (* ===> ev_4    =   ev_SS 2 (ev_SS 0 ev_0) : ev 4 *)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: (* ===> ev_4    =   ev_SS 2 (ev_SS 0 ev_0) : ev 4 *)
- en: Print ev_4'.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 ev_4'。
- en: (* ===> ev_4'   =   ev_SS 2 (ev_SS 0 ev_0) : ev 4 *)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: (* ===> ev_4'   =   ev_SS 2 (ev_SS 0 ev_0) : ev 4 *)
- en: Print ev_4''.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 ev_4''。
- en: (* ===> ev_4''  =   ev_SS 2 (ev_SS 0 ev_0) : ev 4 *)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: (* ===> ev_4''  =   ev_SS 2 (ev_SS 0 ev_0) : ev 4 *)
- en: Print ev_4'''.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 ev_4'''。
- en: (* ===> ev_4''' =   ev_SS 2 (ev_SS 0 ev_0) : ev 4 *)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: (* ===> ev_4''' =   ev_SS 2 (ev_SS 0 ev_0) : ev 4 *)
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Theorem ev_8 : ev 8.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '定理 ev_8 : ev 8。'
- en: Proof.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写*）Admitted。
- en: 'Definition ev_8'' : ev 8'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '定义 ev_8'' : ev 8'
- en: (* REPLACE THIS LINE WITH ":= _your_definition_ ." *). Admitted.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: (* 用":= _your_definition_ ." 替换此行*). Admitted。
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Quantifiers, Implications, Functions
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 量词、蕴涵、函数
- en: In Coq's computational universe (where data structures and
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Coq 的计算宇宙中（数据结构和
- en: programs live), there are two sorts of values with arrows in their
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 程序存在的地方），有两种带有箭头的值
- en: 'types: *constructors* introduced by Inductive-ly defined data'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型：由归纳定义的数据引入的*构造函数*
- en: types, and *functions*.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型和*函数*。
- en: Similarly, in Coq's logical universe (where we carry out proofs),
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样，在 Coq 的逻辑宇宙中（我们进行证明的地方），
- en: 'there are two ways of giving evidence for an implication:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ��两种提供蕴涵证据的方法：
- en: constructors introduced by Inductive-ly defined propositions,
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由归纳定义的命题引入的构造函数，
- en: and... functions!
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并且... 函数！
- en: 'For example, consider this statement:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，考虑这个陈述：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What is the proof object corresponding to ev_plus4?
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 ev_plus4 对应的证明对象是什么？
- en: We're looking for an expression whose *type* is ∀ n, ev n → ev (4 + n) — that
    is, a *function* that takes two arguments (one
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们正在寻找一个表达式，其类型为 ∀ n, ev n → ev (4 + n) — 也就是说，一个接受两个参数（一个
- en: number and a piece of evidence) and returns a piece of evidence!
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数字和一段证据）并返回一段证据！
- en: 'Here it is:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Recall that fun n ⇒ blah means "the function that, given n,
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回想一下 fun n ⇒ blah 的意思是“给定 n，返回 blah 的函数”
- en: yields blah," and that Coq treats 4 + n and S (S (S (S n)))
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 产生 blah，”而 Coq 将 4 + n 和 S (S (S (S n)))
- en: 'as synonyms. Another equivalent way to write this definition is:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为同义词。另一种等效的写法是：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When we view the proposition being proved by ev_plus4 as a
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们将 ev_plus4 证明的命题视为
- en: function type, one aspect of it may seem a little unusual. The
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数类型，其中的一个方面可能看起来有点不寻常。这
- en: second argument's type, ev n, mentions the *value* of the first
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二个参数的类型，ev n，提到了第一个
- en: argument, n.  While such *dependent types* are not found in
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: conventional programming languages, they can be useful in
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: programming too, as the recent flurry of activity in the
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: functional programming community demonstrates.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notice that both implication (→) and quantification (∀)
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: correspond to functions on evidence.  In fact, they are really the
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'same thing: → is just a shorthand for a degenerate use of'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ∀ where there is no dependency, i.e., no need to give a
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: name to the type on the left-hand side of the arrow.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For example, consider this proposition:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: A proof term inhabiting this proposition would be a function
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'with two arguments: a number n and some evidence E that n is'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: even.  But the name E for this evidence is not used in the rest
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: of the statement of ev_plus2, so it's a bit silly to bother
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: making up a name for it.  We could write it like this instead,
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'using the dummy identifier _ in place of a real name:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Or, equivalently, we can write it in more familiar notation:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In general, "P → Q" is just syntactic sugar for
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"∀ (_:P), Q".'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Definition add1 : nat → nat.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: intro n.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Show Proof.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: apply S.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Show Proof.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: apply n. Defined.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Print add1.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: (* ==>     add1 = fun n : nat => S n          : nat -> nat *)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Compute add1 2.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: (* ==> 3 : nat *)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Logical Connectives as Inductive Types
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inductive definitions are powerful enough to express most of the
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: connectives and quantifiers we have seen so far.  Indeed, only
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: universal quantification (and thus implication) is built into Coq;
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: all the others are defined inductively.  We'll see these
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: definitions in this section.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Conjunction
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prove that P ∧ Q holds, we must present evidence for both
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'P and Q.  Thus, it makes sense to define a proof object for P ∧ Q as consisting
    of a pair of two proofs: one for P and'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: another one for Q. This leads to the following definition.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Notice the similarity with the definition of the prod type,
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: given in chapter [Poly](Poly.html); the only difference is that prod takes
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type arguments, whereas and takes Prop arguments.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This should clarify why destruct and intros patterns can be
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: used on a conjunctive hypothesis.  Case analysis allows us to
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: consider all possible ways in which P ∧ Q was proved — here
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: just one (the conj constructor).  Similarly, the split tactic
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: actually works for any inductively defined proposition with only
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'one constructor.  In particular, it works for and:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This shows why the inductive definition of and can be
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: manipulated by tactics as we've been doing.  We can also use it to
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'build proofs directly, using pattern-matching.  For instance:'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Exercise: 2 stars, optional (conj_fact)'
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Construct a proof object demonstrating the following proposition.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: ☐
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Disjunction
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The inductive definition of disjunction uses two constructors, one
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for each side of the disjunct:'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This declaration explains the behavior of the destruct tactic on
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a disjunctive hypothesis, since the generated subgoals match the
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: shape of the or_introl and or_intror constructors.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once again, we can also directly write proof objects for theorems
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: involving or, without resorting to tactics.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 涉及或，而不借助策略。
- en: 'Exercise: 2 stars, optional (or_commut'''')'
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2 星，可选（or_commut''）
- en: Try to write down an explicit proof object for or_commut (without
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试为 or_commut 写下一个显式的证明对象（不使用
- en: using Print to peek at the ones we already defined!).
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 Print 来查看我们已经定义的内容！).
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: ☐
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: Existential Quantification
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存在量化
- en: To give evidence for an existential quantifier, we package a
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为存在量化器提供证据，我们打包一个
- en: witness x together with a proof that x satisfies the property
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证人 x 和一个证明 x 满足属性
- en: 'P:'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: P：
- en: '[PRE30]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This may benefit from a little unpacking.  The core definition is
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这可能需要一点解释。核心定义是
- en: for a type former ex that can be used to build propositions of
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于可以用来构建命题的类型形成 ex
- en: the form ex P, where P itself is a *function* from witness
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表达式 ex P 的形式，其中 P 本身是一个*函数*，从证明者
- en: values in the type A to propositions.  The ex_intro
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型 A 中的值到命题。ex_intro
- en: constructor then offers a way of constructing evidence for ex P,
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构造函数然后提供了构建 ex P 的证据的方法，
- en: given a witness x and a proof of P x.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定一个证人 x 和一个证明 P x 的证明。
- en: The more familiar form ∃ x, P x desugars to an expression
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更熟悉的形式 ∃ x, P x 展开为一个表达式
- en: 'involving ex:'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 涉及 ex：
- en: '[PRE31]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here''s how to define an explicit proof object involving ex:'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是���何定义涉及 ex 的显式证明对象的方法：
- en: '[PRE32]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Exercise: 2 stars, optional (ex_ev_Sn)'
  id: totrans-186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2 星，可选（ex_ev_Sn）
- en: 'Complete the definition of the following proof object:'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成以下证明对象的定义：
- en: '[PRE33]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: ☐
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: True and False
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 真和假
- en: 'The inductive definition of the True proposition is simple:'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: True 命题的归纳定义很简单：
- en: '[PRE34]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: It has one constructor (so every proof of True is the same, so
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它有一个构造函数（因此每个 True 的证明都是相同的，所以
- en: being given a proof of True is not informative.)
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定 True 的证明并不具有信息量。）
- en: False is equally simple — indeed, so simple it may look
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: False 同样简单 — 实际上，如此简单以至于可能看起来
- en: syntactically wrong at first glance!
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 乍一看在语法上是错误的！
- en: '[PRE35]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: That is, False is an inductive type with *no* constructors —
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也就是说，False 是一个没有构造函数的归纳类型 —
- en: i.e., no way to build evidence for it.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即，没有办法为它建立证据。
- en: '[PRE36]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Equality
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相等
- en: Even Coq's equality relation is not built in.  It has the
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使 Coq 的相等关系也不是内建的。它有
- en: following inductive definition.  (Actually, the definition in the
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下归纳定义。（实际上，在
- en: standard library is a small variant of this, which gives an
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标准库是这个的一个小变体，它提供了一个
- en: induction principle that is slightly easier to use.)
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更容易使用的归纳原理。)
- en: '[PRE37]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The way to think about this definition is that, given a set X,
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 想到这个定义的方式是，给定一个集合 X，
- en: it defines a *family* of propositions "x is equal to y,"
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它定义了一个*命题*族“x 等于 y”，
- en: indexed by pairs of values (x and y) from X.  There is just
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由值对（x 和 y）从 X 索引。只有
- en: 'one way of constructing evidence for each member of this family:'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为这个家族的每个成员构造证据的一种方法：
- en: 'applying the constructor eq_refl to a type X and a value x : X yields evidence
    that x is equal to x.'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将构造函数 eq_refl 应用于类型 X 和值 x：X 产生证据，证明 x 等于 x。
- en: 'Exercise: 2 stars (leibniz_equality)'
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2 星（leibniz_equality）
- en: 'The inductive definition of equality corresponds to *Leibniz equality*: what
    we mean when we say "x and y are equal" is'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相等的归纳定义对应于*莱布尼兹相等*：当我们说“x 和 y 相等”时，我们指的是
- en: that every property on P that is true of x is also true of
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 P 的每个属性，如果 x 是真的，那么也是真的
- en: y.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: y。
- en: '[PRE38]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: ☐
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: We can use eq_refl to construct evidence that, for example, 2 = 2.  Can we also
    use it to construct evidence that 1 + 1 = 2?
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以使用 eq_refl 构造证据，例如，2 = 2。我们也可以使用它来构造证据，证明 1 + 1 = 2 吗？
- en: Yes, we can.  Indeed, it is the very same piece of evidence!  The
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是的，我们可以。实际上，这正是同一证据！这
- en: reason is that Coq treats as "the same" any two terms that are
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 原因是 Coq 将任何在语法上看起来是“相同”的两个术语视为
- en: '*convertible* according to a simple set of computation rules.'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据一组简单的计算规则*可转换*。
- en: These rules, which are similar to those used by Compute, include
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些规则与 Compute 使用的规则类似，包括
- en: evaluation of function application, inlining of definitions, and
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数应用的求值，定义的内联，和
- en: simplification of matches.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配的简化。
- en: '[PRE39]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The reflexivity tactic that we have used to prove equalities up
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们用来证明相等性的反射策略
- en: to now is essentially just short-hand for apply refl_equal.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止基本上只是 apply refl_equal 的简写。
- en: In tactic-based proofs of equality, the conversion rules are
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在基于策略的相等证明中，转换规则是
- en: normally hidden in uses of simpl (either explicit or implicit in
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常隐藏在 simpl 的使用中（无论是显式的还是隐式的
- en: other tactics such as reflexivity).  But you can see them
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他策略，如反射）。但你可以看到它们
- en: 'directly at work in the following explicit proof objects:'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 直接在以下显式证明对象中工作：
- en: '[PRE40]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Inversion, Again
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 再次反转
- en: We've seen inversion used with both equality hypotheses and
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已经看到反演被用于等式假设和
- en: hypotheses about inductively defined propositions.  Now that we've
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于归纳定义命题的假设。现在我们已经
- en: seen that these are actually the same thing, we're in a position
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看到这实际上是同一件事，我们处于一个位置
- en: to take a closer look at how inversion behaves.
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更仔细地看一下反演的行为。
- en: In general, the inversion tactic...
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一般来说，反演策略...
- en: takes a hypothesis H whose type P is inductively defined, and
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取一个类型为P的归纳定义的假设H，并
- en: for each constructor C in P's definition,
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于P的定义中的每个构造函数C，
- en: generates a new subgoal in which we assume H was built with C,
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个新的子目标，在其中我们假设H是用C构建的，
- en: adds the arguments (premises) of C to the context of the subgoal as extra hypotheses,
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将构造函数C的参数（前提）添加到子目标的上下文中作为额外的假设，
- en: matches the conclusion (result type) of C against the current goal and calculates
    a set of equalities that must hold in order for C to be applicable,
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将构造函数C的结论（结果类型）与当前目标进行匹配，并计算必须满足的一组相等性，
- en: adds these equalities to the context (and, for convenience, rewrites them in
    the goal), and
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将这些相等性添加到上下文中（为了方便起见，在目标中重写它们），并
- en: if the equalities are not satisfiable (e.g., they involve things like S n =
    O), immediately solves the subgoal.
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果相等性不可满足（例如，它们涉及像S n = O这样的东西），立即解决子目标。
- en: '*Example*: If we invert a hypothesis built with or, there are two'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*例子*：如果我们反演一个由or构建的假设，那么有两个'
- en: constructors, so two subgoals get generated.  The
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数，所以生成两个子目标。这
- en: conclusion (result type) of the constructor (P ∨ Q) doesn't
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数（P ∨ Q）的结论（结果类型）不
- en: place any restrictions on the form of P or Q, so we don't get
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 不对P或Q的形式施加任何限制，所以我们不会得到
- en: any extra equalities in the context of the subgoal.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在子目标的上下文中有任何额外的相等性。
- en: '*Example*: If we invert a hypothesis built with and, there is'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*例子*：如果我们反演一个由and构建的假设，那么有'
- en: only one constructor, so only one subgoal gets generated.  Again,
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一个构造函数，所以只生成一个子目标。再次，
- en: the conclusion (result type) of the constructor (P ∧ Q) doesn't
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数（P ∧ Q）的结论（结果类型）不
- en: place any restrictions on the form of P or Q, so we don't get
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 不对P或Q的形式施加任何限制，所以我们不会得到
- en: any extra equalities in the context of the subgoal.  The
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在子目标的上下文中有任何额外的相等性。这
- en: constructor does have two arguments, though, and these can be seen
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数确实有两个参数，这两个参数可以看到
- en: in the context in the subgoal.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在子目标的上下文中。
- en: '*Example*: If we invert a hypothesis built with eq, there is'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*例子*：如果我们反演一个由eq构建的假设，那么有'
- en: again only one constructor, so only one subgoal gets generated.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 再次只有一个构造函数，所以只生成一个子目标。
- en: Now, though, the form of the refl_equal constructor does give us
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，然而，refl_equal构造函数的形式确实给了我们
- en: 'some extra information: it tells us that the two arguments to eq'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 一些额外的信息：它告诉我们eq的两个参数
- en: must be the same!  The inversion tactic adds this fact to the
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 必须相同！反演策略将这个事实添加到
- en: context.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文。
- en: '[PRE41]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
