- en: Test for Required Behavior, not Incidental Behavior
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试所需行为，而不是次要行为
- en: Test for Required Behavior, not Incidental Behavior
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试所需行为，而不是次要行为
- en: 'A common pitfall in testing is to assume that exactly what an implementation
    does is precisely what you want to test for. At first glance this sounds more
    like a virtue than a pitfall. Phrased another way, however, the issue becomes
    more obvious: A common pitfall in testing is to hardwire tests to the specifics
    of an implementation, where those specifics are incidental and have no bearing
    on the desired functionality.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 测试中的一个常见陷阱是假设实现的确切行为就是您要测试的内容。乍一看，这听起来更像是一种优点而不是陷阱。然而，用另一种方式表达，问题就更加明显了：测试中的一个常见陷阱是将测试硬编码到实现的具体细节中，而这些具体细节是次要的，与所需功能无关。
- en: When tests are hardwired to implementation incidentals, changes to the implementation
    that are actually compatible with the required behavior may cause tests to fail,
    leading to false positives. Programmers typically respond either by rewriting
    the test or by rewriting the code. Assuming that a false positive is actually
    a true positive is often a consequence of fear, uncertainty, or doubt. It has
    the effect of raising the status of incidental behavior to required behavior.
    In rewriting a test, programmers either refocus the test on the required behavior
    (good) or simply hardwire it to the new implementation (not good). Tests need
    to be sufficiently precise, but they also need to be accurate.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试被硬编码到实现的具体细节中时，与所需行为实际兼容的实现更改可能会导致测试失败，从而产生错误的阳性。程序员通常通过重新编写测试或重新编写代码来回应这种情况。假设错误的阳性实际上是正确的阳性通常是由于恐惧、不确定性或怀疑造成的。这将次要行为的状态提升到所需行为的级别。在重写测试时，程序员要么将测试重新聚焦于所需行为（好的），要么简单地将其硬编码到新实现中（不好）。测试需要足够精确，但也需要准确。
- en: For example, in a three-way comparison, such as C's `strcmp` or Java's `String.compareTo`,
    the requirements on the result are that it is negative if the left-hand side is
    less than the right, positive if the left-hand side is greater than the right,
    and zero if they are considered equal. This style of comparison is used in many
    APIs, including the comparator for C's `qsort` function and `compareTo` in Java's
    `Comparable` interface. Although the specific values `-1` and `+1` are commonly
    used in implementations to signify *less than* and *greater than*, respectively,
    programmers often mistakenly assume that these values represent the actual requirement
    and consequently write tests that nail this assumption up in public.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在三向比较中，比如 C 的 `strcmp` 或 Java 的 `String.compareTo`，结果的要求是：如果左侧小于右侧，则结果为负；如果左侧大于右侧，则结果为正；如果它们被认为相等，则结果为零。这种比较风格在许多
    API 中都有使用，包括 C 的 `qsort` 函数的比较器和 Java 的 `Comparable` 接口的 `compareTo` 方法。尽管具体的值
    `-1` 和 `+1` 在实现中通常用于表示*小于*和*大于*，但程序员经常错误地假设这些值代表了实际的要求，因此编写了验证此假设的测试。
- en: A similar issue arises with tests that assert spacing, precise wording, and
    other aspects of textual formatting and presentation that are incidental. Unless
    you are writing, for example, an XML generator that offers configurable formatting,
    spacing should not be significant to the outcome. Likewise, hardwiring placement
    of buttons and labels on UI controls reduces the option to change and refine these
    incidentals in future. Minor changes in implementation and inconsequential changes
    in formatting suddenly become build breakers.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的问题也会出现在测试空格、精确措辞以及其他与文本格式和呈现相关的方面的测试中，这些都是次要的。除非你正在编写例如提供可配置格式的 XML 生成器，否则空格对结果不应该有重大影响。同样，将按钮和标签的位置硬编码到
    UI 控件上会减少更改和完善这些次要方面的选项。实现中的微小更改和格式上的无关变化突然成为构建中断的原因。
- en: Overspecified tests are often a problem with whitebox approaches to unit testing.
    Whitebox tests use the structure of the code to determine the test cases needed.
    The typical failure mode of whitebox testing is that the tests end up asserting
    that the code does what the code does. Simply restating what is already obvious
    from the code adds no value and leads to a false sense of progress and security.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 过度规定的测试通常是白盒测试方法的问题。白盒测试使用代码结构确定所需的测试用例。白盒测试的典型失败模式是测试最终肯定代码已经实现了代码所做的事情。简单地重申代码已经明显的功能并没有增加任何价值，反而导致了对进展和安全性的虚假认识。
- en: To be effective, tests need to state contractual obligations rather than parrot
    implementations. They need to take a blackbox view of the units under test, sketching
    out the interface contracts in executable form. Therefore, align tested behavior
    with required behavior.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要有效果，测试需要陈述合同义务，而不是机械地复述实现。它们需要以黑盒的视角来看待被测试单元，以可执行的形式勾勒出接口合同。因此，要将测试行为与所需行为保持一致。
- en: By [Kevlin Henney](http://programmer.97things.oreilly.com/wiki/index.php/Kevlin_Henney)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Kevlin Henney](http://programmer.97things.oreilly.com/wiki/index.php/Kevlin_Henney)撰写。
