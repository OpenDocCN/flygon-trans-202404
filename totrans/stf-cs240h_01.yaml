- en: Hello, world
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，世界
- en: I'm Bryan O'Sullivan.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我是 Bryan O'Sullivan。
- en: I work at Facebook.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 Facebook 工作。
- en: Previously, I founded a company that built half its product in Haskell.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我创办了一家公司，其中一半产品是用 Haskell 构建的。
- en: I wrote a book about Haskell.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了一本关于 Haskell 的书。
- en: I've written some Haskell libraries.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了一些 Haskell 库。
- en: Let's talk about testing
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们谈谈测试
- en: Have any profs ever talked to you about testing?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有任何教授曾经和你谈过测试吗？
- en: Testing in industry
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工业中的测试
- en: 'There are a few "states of the art" for testing software:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试软件，有几种“最先进”的方法：
- en: Excel spreadsheet full of stuff to do by hand (I am not making this up)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Excel 电子表格上满满的手工操作（我没有编造这个）
- en: Unit tests
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Integration tests
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试
- en: Fuzz tests
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模糊测试
- en: What am I interested in?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我对什么感兴趣？
- en: For today, I want to talk about unit tests and their more interesting descendants.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我想谈谈单元测试及其更有趣的后代。
- en: 'Shamelessly borrowing from Wikipedia:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 无耻地从维基百科借鉴：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What's the problem?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题出在哪里？
- en: Count the number of test cases below.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 计算下面的测试用例数量。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Okay, don't. It's 7.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，不要。是 7。
- en: The limits of unit tests
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试的限制
- en: Unit tests are only useful up to a point.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试只在一定程度上有用。
- en: Your patience and ability to think up nasty corner cases are VERY finite.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你的耐心和想出恶劣边界情况的能力是非常有限的。
- en: Best to use them wisely.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最好明智地使用它们。
- en: But how?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但是怎么做呢？
- en: Outsourcing
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外包
- en: For patience, we have computers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于耐心，我们有计算机。
- en: For nasty corner cases, we have random number generators.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于恶劣的边界情况，我们有随机数生成器。
- en: Let's put them to use.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把它们用起来。
- en: 'A simple example: UTF-16 encoding'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的例子：UTF-16 编码
- en: 'UTF-16 is a Unicode encoding that:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: UTF-16 是一种 Unicode 编码，它：
- en: takes a *code point* (a Unicode character)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取一个*代码点*（一个 Unicode 字符）
- en: turns it into 1 or 2 16-bit *code units*
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其转换为 1 或 2 个 16 位*代码单元*
- en: 'Variable length encoding:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 变长编码：
- en: code points below 0x10000 are encoded as a single code unit
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0x10000 以下的代码点被编码为单个代码单元
- en: at and above 0x10000, two code units
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 0x10000 及以上，两个代码单元
- en: Encoding a single code point
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码单个代码点
- en: We know that `Char` represents a Unicode code point.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道 `Char` 表示一个 Unicode 代码点。
- en: The `Word16` type represents a 16-bit value.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`Word16` 类型表示一个 16 位值。'
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What should the type signature of `encodeChar` be?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`encodeChar` 的类型签名应该是什么？'
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The base case is easy
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本情况很容易
- en: We can easily turn the single-code-unit case into some Haskell using a few handy
    functions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很容易地将单代码单元的情况转换为一些 Haskell，使用一些方便的函数。
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We use `fromIntegral` to convert from `Int` to `Word16` because Haskell will
    not explicitly coerce for us.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `fromIntegral` 将 `Int` 转换为 `Word16`，因为 Haskell 不会为我们明确强制转换。
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The two-code-unit case
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 两个代码单元的情况
- en: To encode code points above 0x10000, we need some new bit-banging functions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要编码大于 0x10000 的代码点，我们需要一些新的位操作函数。
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `.&.` operator gives us bitwise *and*, while `shiftR` is a right shift.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`.&.` 运算符给我们位运算*与*，而 `shiftR` 是右移。'
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Basic testing
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本测试
- en: If you want unit tests, `HUnit` is the package you need.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要单元测试，`HUnit` 是你需要的包。
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A bad test
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个糟糕的测试
- en: Let's intentionally write a bogus test.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们故意写一个虚假的测试。
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we run this in `ghci`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 `ghci` 中运行这个：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Not pretty, but it works.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 不太美观，但有效。
- en: 'But wait: unit tests?'
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但等等：单元测试？
- en: So I just slammed unit tests and now I'm showing you how to write them?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我只是写了单元测试，现在我要向你展示如何编写它们？
- en: Well, we can generalize past the limits of unit tests.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们可以推广超出单元测试的限制。
- en: A proxy for a bigger picture
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个更大图景的代理
- en: What do we really want with this test?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正想要这个测试做什么？
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We are really asserting that *every* ASCII code point encodes as a single code
    unit.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真的在断言*每个* ASCII 代码点都编码为单个代码单元。
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Hmm: better?'
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嗯：更好了吗？
- en: 'What if we parameterize our test:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们参数化我们的测试会怎样：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And drive it from a harness:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 并从一个测试框架中驱动它：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Taking stock
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 盘点
- en: This is better, in that our original test is generalized.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这更好，因为我们的原始测试被泛化了。
- en: It's also worse, because we're exhaustively enumerating every single test input.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这也更糟，因为我们正在详尽列举每一个测试输入。
- en: We get away with it here because Unicode is small, and computers are fast.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里得以成功是因为 Unicode 很小，计算机很快。
- en: 'But it''s the *principle* of the thing: automate better!'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是事情的*原则*：自动化更好！
- en: Enter QuickCheck
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进入 QuickCheck
- en: Forget about `HUnit`, here's the package we'll focus on.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 忘掉 `HUnit`，这是我们将专注的包。
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In `ghci`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ghci` 中：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What just happened?
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'Why did `quickCheck` say this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么 `quickCheck` 会这样说：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'It did the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 它做了以下事情：
- en: '*generated* 100 random values for us'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*生成*了 100 个随机值给我们'
- en: fed each one to `prop_encodeOne`
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将每个传递给 `prop_encodeOne`
- en: ensured that each test passed
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保每个测试都通过了
- en: Now I have a headache
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现在我头疼了
- en: 'Let''s look back at our "test function":'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们的“测试函数”：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is *very suspicious*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*非常可疑的*。
- en: We know that `encodeChar` sometimes produces lists of length 2.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道 `encodeChar` 有时会产生长度为 2 的列表。
- en: So why did our 100 tests pass?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们的 100 次测试为什么通过了？
- en: Starting small
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从小开始
- en: For most types, QuickCheck operates from the handy assumption that "small" test
    cases are more useful than big ones.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数类型，QuickCheck 操作的一个方便的假设是“小”测试用例比大的更有用。
- en: As tests pass for small random inputs, it generates "bigger" ones.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当小的随机输入测试通过时，它会生成“更大”的输入。
- en: With just 100 tests, we are simply not likely to generate a code point that
    encodes as two code units.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 只进行 100 次测试，我们几乎不可能生成一个编码为两个代码单元的代码点。
- en: 'Behind the scenes: generating values'
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 幕后：生成值
- en: How does QuickCheck do its thing, anyway?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: QuickCheck 到底是如何做到的？
- en: It needs to be able to generate random values.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 它需要能够生成随机值。
- en: This it achieves via typeclasses.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过类型类实现这一点。
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Behind the scenes: some machinery'
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 幕后：一些机制
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Behind the scenes: testable things'
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 幕后：可测试的事物
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The two instances above are crucial.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的两个实例至关重要。
- en: How does this work?
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这是如何工作的？
- en: Let's write our test function with a type signature.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个类型签名来编写我们的测试函数。
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And `quickCheck`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 而 `quickCheck`：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Look again
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 再看一遍
- en: If `quickCheck` accepts `prop_encodeOne`, then the latter must be an instance
    of `Testable`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `quickCheck` 接受 `prop_encodeOne`，那么后者必须是 `Testable` 的一个实例。
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: But how? Via these two instances.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如何？通过这两个实例。
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Long story short
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 长话短说
- en: 'If we pass `quickCheck` a function, then:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们向 `quickCheck` 传递一个函数，那么：
- en: provided its arguments are all instances of `Arbitrary` and `Show`
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只要它的参数都是 `Arbitrary` 和 `Show` 的实例
- en: '*and* provided its result is an instance of `Testable`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*并且*只要其结果是 `Testable` 的一个实例'
- en: '*then* `quickCheck` can:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*然后* `quickCheck` 可以：'
- en: '*generate* arbitrary values of *all* necessary types automatically,'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*生成*所有必要类型的*任意*值，'
- en: run our test on those values,
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对这些值运行我们的测试，
- en: and ensure that our test always passes
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并确保我们的测试始终通过
- en: So what?
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那又怎样？
- en: We still have a broken test!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然有一个失败的测试！
- en: '`quickCheck` tells us that it always passes---when it shouldn''t!'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`quickCheck` 告诉我们它总是通过---但实际上不应该！'
- en: Why? We have to read the source.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？我们必须阅读源代码。
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Oh great, QuickCheck will only generate 8-bit characters.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，太好了，QuickCheck 只会生成 8 位字符。
- en: Our assumption that it would eventually generate big-enough inputs was wrong
    for `Char`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设它最终会生成足够大的输入对于 `Char` 是错误的。
- en: Therefore our test can never fail.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 因此我们的测试永远不会失败。
- en: How...unfortunate!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 多么...不幸啊！
- en: Writing a new Arbitrary instance
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写一个新的 Arbitrary 实例
- en: So now we face a challenge.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们面临一个挑战。
- en: We want a type that is almost exactly like `Char`, but that has a different
    `Arbitrary` instance.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要一个几乎与 `Char` 相同但具有不同 `Arbitrary` 实例的类型。
- en: To create such a type, we use the `newtype` keyword.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这样一种类型，我们使用 `newtype` 关键字。
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The type is named `BigChar`; its constructor is named `Big`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类型被命名为 `BigChar`；它的构造函数被命名为 `Big`。
- en: We use `deriving` to reuse the `Eq` instance of the underlying `Char` type,
    and to generate a new `Show` instance.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `deriving` 来重用底层 `Char` 类型的 `Eq` 实例，并生成一个新的 `Show` 实例。
- en: What next?
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: 'We want to be able to flesh this out:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要能够详细说明这一点：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The highest Unicode code point is 0x10FFFF.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最高的 Unicode 代码点是 0x10FFFF。
- en: We want to generate values in this range.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要在这个范围内生成值。
- en: 'We saw this earlier:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到过这个：
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Random values: the hard way'
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机值：困难的方式
- en: In order to use `choose`, we must make `BigChar` an instance of `Random`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 `choose`，我们必须使 `BigChar` 成为 `Random` 的一个实例。
- en: 'Here''s a verbose way to do it:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个冗长的做法：
- en: '[PRE30]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Random values: easier'
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机值：更容易
- en: 'If we want to avoid the boilerplate code from the previous slide, we can use
    a trick:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想避免上一张幻灯片中的样板代码，我们可以使用一个技巧：
- en: The `GeneralizedNewtypeDeriving` language extension
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GeneralizedNewtypeDeriving` 语言扩展'
- en: This lets GHC automatically derive some non-standard typeclass instances for
    us, e.g. `Random`
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这使得 GHC 可以自动为我们派生一些非标准的类型类实例，例如 `Random`。
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: All we did was add `Random` to the `deriving` clause above.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们所做的一切只是在上面的 `deriving` 子句中添加了 `Random`。
- en: As the name suggests, this only works with the `newtype` keyword.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如其名称所示，这仅适用于 `newtype` 关键字。
- en: Our instance, and a rerun
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的实例，以及重新运行
- en: 'An instance with a body:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有主体的实例：
- en: '[PRE32]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'A new test that unwraps a `BigChar` value:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一个解包 `BigChar` 值的新测试：
- en: '[PRE33]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And let''s try it:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一试：
- en: '[PRE34]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Great! Not only did our broken test fail immediately...
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒��！我们的失败的测试立即失败了...
- en: '...but it gave us a *counterexample*, an input on which our test function reproducibly
    fails!'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '...但它给了我们一个*反例*，一个我们的测试函数可靠失败的输入！'
- en: The magic of QuickCheck
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QuickCheck 的魔力
- en: 'The beauty here is several-fold:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的美妙之处有几个方面：
- en: We write a simple Haskell function that accepts some inputs and returns a `Bool`
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们编写一个简单的Haskell函数，接受一些输入并返回一个`Bool`
- en: QuickCheck generates random test cases for us, and tests our function
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QuickCheck为我们生成随机测试用例，并测试我们的函数
- en: If a test case fails, it tells us what the inputs were
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个测试用例失败，它会告诉我们输入是什么
- en: So what?
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那又怎样？
- en: 'Unit test way:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试方式：
- en: A pile of unit tests that are small variations on a theme
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一堆单元测试，是对一个主题的小变化
- en: 'QuickCheck way:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: QuickCheck方式：
- en: One property that you expect to hold universally true
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你期望普遍成立的一个属性
- en: Automatically, randomly generated test inputs
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动、随机生成的测试输入
- en: Counterexamples that help you pinpoint your bugs
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助您找出错误的反例
- en: What else?
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有什么？
- en: 'There''s a problem with random inputs when a test fails:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试失败时，随机输入存在问题：
- en: They're often *big*.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们通常是*大的*。
- en: Big things are difficult for humans to deal with.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大的东西对人类来说很难处理。
- en: Big values usually take longer to look through.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大值通常需要更长时间来查看。
- en: 'Starting from a random failing input:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个随机失败的输入开始：
- en: We'd like to find the *smallest* input that will cause a test to fail.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们想找到导致测试失败的*最小*输入。
- en: QuickCheck calls this *shrinking*.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: QuickCheck称之为*缩小*。
- en: 'Micro-lab: shrink a BigChar'
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微型实验室：缩小一个BigChar
- en: 'Grab the following source file:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 获取以下源文件：
- en: '[PRE35]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Using `ghci` to do some spelunking, work out a body for `shrinkChar`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ghci`进行一些探究，为`shrinkChar`编写一个主体。
- en: '[PRE36]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You have 5 minutes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你有5分钟。
- en: Generating vs filtering values
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成与过滤值
- en: Here are two different approaches to generating test values.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两种不同的生成测试值的方法。
- en: 'First, generate them directly (look at line 2):'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，直接生成它们（看看第2行）：
- en: '[PRE37]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Second, generate any old value, but *filter* such that we get only the ones
    that make sense:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，生成任意值，但*过滤*以便只得到有意义的值：
- en: '[PRE38]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Generating vs filtering
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成与过滤
- en: It is *usually* more efficient to generate only the values you'll need, and
    do no filtering.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 通常更有效的方法是仅生成您需要的值，不进行任何过滤。
- en: Sometimes, it's easier to identify good values when you see them (by filtering)
    than to figure out how to generate them.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，通过过滤来识别好的值（通过过滤）比想出如何生成它们更容易。
- en: If QuickCheck has to generate too many values that fail a `suchThat` or other
    filter, it will give up and may not run as many tests as you want.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果QuickCheck必须生成太多失败`suchThat`或其他过滤器的值，它将放弃，并且可能不会运行您想要的测试数量。
- en: For both efficiency *and* to ensure that QuickCheck can generate enough values
    to test, it's worth trying to generate only good values.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了效率*和*确保QuickCheck能够生成足够的值进行测试，值得尝试只生成好的值。
- en: 'Mini-lab: more code!'
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迷你实验室：更多代码！
- en: 'Grab the following source code:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 获取以下源代码：
- en: '[PRE39]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Write a definition for `decodeUtf16`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 写一个`decodeUtf16`的定义：
- en: '[PRE40]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Decide on some QuickCheck tests, write them, and run them.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 决定一些QuickCheck测试，编写它们，并运行它们。
- en: You have 15 minutes.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 你有15分钟。
- en: Sizing a test
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整测试的大小
- en: Test data generators have an implicit size parameter, hidden inside the `Gen`
    type.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 测试数据生成器有一个隐含的大小参数，隐藏在`Gen`类型中。
- en: QuickCheck starts by generating small test cases; it increases the size as testing
    progresses.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: QuickCheck从生成小的测试用例开始；随着测试的进行，它会增加大小。
- en: The meaning of "size" is specific to the needs of an `Arbitrary` instance.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: “大小”的含义是特定于`Arbitrary`实例的���求。
- en: The `Arbitrary` instance for lists interprets it as "the maximum length of a
    list of arbitrary values".
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表的`Arbitrary`实例将其解释为“任意值列表的最大长度”。
- en: 'We can find the current size using the `sized` function, and modify it locally
    using `resize`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`sized`函数找到当前大小，并使用`resize`在本地修改它：
- en: '[PRE41]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Lifting
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升
- en: 'We''re hopefully by now familiar with the `Functor` class:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该对`Functor`类很熟悉了：
- en: '[PRE42]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This takes a pure function and "lifts" it into the functor `f`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这将一个纯函数“提升”到函子`f`中。
- en: In general, "lifting" takes a concept and transforms it to work in a different
    (sometimes more general) setting.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，“提升”将一个概念转化为在不同（有时更一般）环境中工作的方式。
- en: 'For instance, we can define lifting of functions with the `Monad` class too:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们也可以使用`Monad`类定义函数的提升：
- en: '[PRE43]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: fmap and liftM
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: fmap和liftM
- en: 'Notice the similarities between the type signatures:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 注意类型签名之间的相似之处：
- en: '[PRE44]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'All instances of `Monad` can possibly be instances of `Functor`. Ideally, they''d
    be defined in terms of each other:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的`Monad`实例都可能是`Functor`的实例。理想情况下，它们应该相互定义：
- en: '[PRE45]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'For historical reasons, the two classes are separate, so we write separate
    instances for them and just reuse the code:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 由于历史原因，这两个类是分开的，因此我们为它们编写单独的实例，然后重用代码：
- en: '[PRE46]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Why the apparent digression?
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么会出现这样的离题？
- en: It turns out that lifting pure functions into monads is really common.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 原来将纯函数提升到单子中是非常常见的。
- en: So common, in fact, that `Control.Monad` defines a bunch of extra combinators
    for us.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，`Control.Monad`为我们定义了一堆额外的组合子。
- en: '[PRE47]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: These combinators go all the way up to `liftM5`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组合子一直延伸到`liftM5`。
- en: Look familiar? Useful?
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来熟悉吗？有用吗？
- en: A tighter Arbitrary instance
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个更紧凑的任意实例
- en: 'Before:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 之前：
- en: '[PRE48]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'After:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 之后：
- en: '[PRE49]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Micro-lab: shrinking a Point'
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微型实验室：收缩一个点
- en: QuickCheck provides us with machinery to shrink tuples.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: QuickCheck为我们提供了收缩元组的机制。
- en: Make use of this machinery to shrink a `Point`.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这个机制来收缩一个`Point`。
- en: '[PRE50]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Take 3 minutes.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 花3分钟。
- en: '[PRE51]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Testing a recursive data type
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试递归数据类型
- en: 'Suppose we have a tree type:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个树类型：
- en: '[PRE52]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Here''s an obvious `Arbitrary` instance:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个明显的`Arbitrary`实例：
- en: '[PRE53]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The `oneof` combinator chooses a generator at random.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`oneof`组合子随机选择一个生成器。'
- en: '[PRE54]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: What's up, Doc?
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么了，医生？
- en: 'Potential trouble:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 潜在的麻烦：
- en: This generator may not terminate at all!
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个生成器可能根本不会终止！
- en: It's likely to produce *huge* trees.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能会产生*巨大*的树。
- en: We can use the `sample` function to generate and print some arbitrary data.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`sample`函数生成并打印一些任意数据。
- en: '[PRE55]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This helps us to explore what's going on.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于我们探究发生了什么。
- en: A safer instance
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个更安全的实例
- en: Here's where the sizing mechanism comes to the rescue.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是尺寸机制拯救的地方。
- en: '[PRE56]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Where all this is going
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这一切的目的是什么
- en: QuickCheck is pretty great. Take the time to learn to use it.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: QuickCheck相当不错。花时间学会如何使用它。
- en: It's a little harder to learn to use it well than unit tests, but it pays off
    big time.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 学会很好地使用它比单元测试更难，但回报丰厚。
- en: 'Furthermore:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 此外：
- en: We really want to see you provide QuickCheck tests with future labs and your
    final projects.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们真的希望看到您在未来的实验和最终项目中提供QuickCheck测试。
- en: Enjoy!
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 愉快！
