- en: 10 Performance (draft)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10 性能（草稿）
- en: 10 Performance (draft)
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10 性能（草稿）
- en: 10.1 shouldComponentUpdate
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.1 shouldComponentUpdate
- en: 10.1 shouldComponentUpdate
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.1 shouldComponentUpdate
- en: This chapter can be applied to all react apps.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节适用于所有的 React 应用程序。
- en: shouldComponentUpdate
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: shouldComponentUpdate
- en: React is usually fast, but you still can improve performance by optimizing function
    [shouldComponentUpdate](https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate).
    By default it returns true, if returns false, the render function will be skipped.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: React 通常很快，但您仍然可以通过优化函数[shouldComponentUpdate](https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate)来提高性能。默认情况下，它返回
    true，如果返回 false，则会跳过渲染函数。
- en: This function is frequently invoked when states or props are changed. So it's
    important to **keep it simple and fast**. When you called `setState`, the `render`
    function will always be excuted even if previous states are equal to current.
    This is where we can make some optimization.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当状态或属性更改时，此函数频繁调用。因此，**保持简单和快速**非常重要。当您调用`setState`时，即使之前的状态等于当前状态，`render`函数也将始终执行。这就是我们可以进行一些优化的地方。
- en: '[demo1](https://jsbin.com/figuse/edit?html,js,output)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[演示1](https://jsbin.com/figuse/edit?html,js,output)'
- en: In demo1, when click button, it will set same state, but render times will still
    increase.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在演示1中，点击按钮时，它将设置相同的状态，但渲染次数仍然会增加。
- en: '[demo2](http://jsbin.com/culipes/5/edit?html,js,output)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[演示2](http://jsbin.com/culipes/5/edit?html,js,output)'
- en: In demo2, we check the value of name is equal to before or not, if equal return
    false, then we reduce the times of render function.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在演示2中，我们检查名字的值是否与之前相等，如果相等，则返回 false，然后我们减少渲染函数的次数。
- en: 'But if our states structure is complicated, such as `{ a: { b: { c: [1, 2,
    3] }}}`, we have to compare them deeply. This is obviously against the rules we
    mentioned above, **keep shouldComponentUpdate simple**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '但是，如果我们的状态结构很复杂，例如 `{ a: { b: { c: [1, 2, 3] }}}`，我们必须进行深层比较。这显然违反了我们上面提到的规则，**保持
    shouldComponentUpdate 简单**。'
- en: Immutable-js
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Immutable-js
- en: '[Immutable](https://en.wikipedia.org/wiki/Immutable_object) is a concept from
    [functional programming](https://en.wikipedia.org/wiki/Functional_programming),
    one of immutable data features is that it can not be modified after being created.
    So there are some algorithm to create hash for every data structure(for more [detail](https://en.wikipedia.org/wiki/Persistent_data_structure)).
    We can use this feature to prevent deeply compare, shallow compare is enough.
    Here we will use [immutable-js](https://facebook.github.io/immutable-js/) from
    facebook'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[Immutable](https://en.wikipedia.org/wiki/Immutable_object) 是来自[函数式编程](https://en.wikipedia.org/wiki/Functional_programming)的概念，不可变数据的一个特征是创建后无法修改。因此，有一些算法用于为每个数据结构创建哈希（更多[详细信息](https://en.wikipedia.org/wiki/Persistent_data_structure)）。我们可以使用这个特性来防止深度比较，浅比较就足够了。在这里，我们将使用来自
    Facebook 的[immutable-js](https://facebook.github.io/immutable-js/)。'
- en: '[demo3](http://jsbin.com/vofubiy/8/edit?html,js,output)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[演示3](http://jsbin.com/vofubiy/8/edit?html,js,output)'
- en: In demo3, we click first button several times, times will only plus one time,
    click second button , times will increase.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在演示3中，我们点击第一个按钮几次，次数只会增加一次，点击第二个按钮，次数会增加。
