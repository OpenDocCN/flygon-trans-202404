["```\nts`type  <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp>  = { <data-lsp lsp=\"(property) breakfast: string\">breakfast</data-lsp>:  string; <data-lsp lsp=\"(property) lunch: string\">lunch</data-lsp>:  string; <data-lsp lsp=\"(property) dinner: string\">dinner</data-lsp>:  string;};function  <data-lsp lsp=\"function willBeMetabo(meals: MealsPerDay): boolean\">willBeMetabo</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>:  <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp>):  boolean {  // ...}`\n```", "```\nts`type <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp> = { <data-lsp lsp=\"(property) breakfast: string\">breakfast</data-lsp>:  string; <data-lsp lsp=\"(property) lunch: string\">lunch</data-lsp>:  string; <data-lsp lsp=\"(property) dinner: string\">dinner</data-lsp>:  string;};function <data-lsp lsp=\"function willBeMetabo(meals: MealsPerDay): boolean\">willBeMetabo</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>: <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp>):  boolean {  // ...}`\n```", "```\nts`// 439.2 kcalconst  <data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>:  <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp>  = { <data-lsp lsp=\"(property) breakfast: string\">breakfast</data-lsp>:  \"a vegetable salad\", <data-lsp lsp=\"(property) lunch: string\">lunch</data-lsp>:  \"a cod's meuniere\", <data-lsp lsp=\"(property) dinner: string\">dinner</data-lsp>:  \"a half bottle of wine (white)\",};<data-lsp lsp=\"function willBeMetabo(meals: MealsPerDay): boolean\">willBeMetabo</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);false`\n```", "```\nts`// 439.2 kcalconst  <data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>: <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp> = { <data-lsp lsp=\"(property) breakfast: string\">breakfast</data-lsp>:  \"a vegetable salad\", <data-lsp lsp=\"(property) lunch: string\">lunch</data-lsp>:  \"a cod's meuniere\", <data-lsp lsp=\"(property) dinner: string\">dinner</data-lsp>:  \"a half bottle of wine (white)\",};<data-lsp lsp=\"function willBeMetabo(meals: MealsPerDay): boolean\">willBeMetabo</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);false`\n```", "```\nts`function  <data-lsp lsp=\"function isMeals(meals: MealsPerDay): void\">isMeals</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>:  <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp>):  void {  if (!<data-lsp lsp=\"function isMeal(something: string): boolean\">isMeal</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) breakfast: string\">breakfast</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"BREAKFAST IS NOT A MEAL!\"); }  if (!<data-lsp lsp=\"function isMeal(something: string): boolean\">isMeal</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) lunch: string\">lunch</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"LUNCH IS NOT A MEAL!!!\"); }  if (!<data-lsp lsp=\"function isMeal(something: string): boolean\">isMeal</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) dinner: string\">dinner</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"DINNER IS NOT A MEAL!!!\"); }}`\n```", "```\nts`function <data-lsp lsp=\"function isMeals(meals: MealsPerDay): void\">isMeals</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>: <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp>):  void {  if (!<data-lsp lsp=\"function isMeal(something: string): boolean\">isMeal</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) breakfast: string\">breakfast</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"BREAKFAST IS NOT A MEAL!\"); }  if (!<data-lsp lsp=\"function isMeal(something: string): boolean\">isMeal</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) lunch: string\">lunch</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"LUNCH IS NOT A MEAL!!!\"); }  if (!<data-lsp lsp=\"function isMeal(something: string): boolean\">isMeal</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) dinner: string\">dinner</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"DINNER IS NOT A MEAL!!!\"); }}`\n```", "```\nts`function  <data-lsp lsp=\"function shouldBeCareful(meals: MealsPerDay): boolean\">shouldBeCareful</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>:  <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp>):  boolean {  try {  // ...  <data-lsp lsp=\"function isMeals(meals: MealsPerDay): void\">isMeals</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>);  return  <data-lsp lsp=\"function willBeMetabo(meals: MealsPerDay): boolean\">willBeMetabo</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>); } catch (<data-lsp lsp=\"(local var) err: unknown\">err</data-lsp>:  unknown) {  // ... }}`\n```", "```\nts`function <data-lsp lsp=\"function shouldBeCareful(meals: MealsPerDay): boolean\">shouldBeCareful</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>: <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp>):  boolean {  try {  // ... <data-lsp lsp=\"function isMeals(meals: MealsPerDay): void\">isMeals</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>);  return <data-lsp lsp=\"function willBeMetabo(meals: MealsPerDay): boolean\">willBeMetabo</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>); } catch (<data-lsp lsp=\"(local var) err: unknown\">err</data-lsp>:  unknown) {  // ... }}`\n```", "```\nts`function  <data-lsp lsp=\"function isMeals(meals: MealsPerDay): void\">isMeals</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>:  <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp>):  void {  <data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) breakfast: string\">breakfast</data-lsp> =  \"a beef steak\";  // beef steak will be 1200 kcal  <data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) lunch: string\">lunch</data-lsp> =  \"a bucket of ice cream\";  // a bucket of ice cream will be 7200 kcal  <data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) dinner: string\">dinner</data-lsp> =  \"3 pizzas\";  // 3 pizzas will be 11400 kcal  if (!<data-lsp lsp=\"function isMeal(meal: string): boolean\">isMeal</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) breakfast: string\">breakfast</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"BREAKFAST IS NOT MEAL!\"); }  if (!<data-lsp lsp=\"function isMeal(meal: string): boolean\">isMeal</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) lunch: string\">lunch</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"LUNCH IS NOT MEAL!!!\"); }  if (!<data-lsp lsp=\"function isMeal(meal: string): boolean\">isMeal</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) dinner: string\">dinner</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"DINNER IS NOT MEAL!!!\"); }}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);439.2 kcal<data-lsp lsp=\"function isMeals(meals: MealsPerDay): void\">isMeals</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);19,800 kcal!!!<data-lsp lsp=\"function willBeMetabo(meals: MealsPerDay): boolean\">willBeMetabo</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);true`\n```", "```\nts`function <data-lsp lsp=\"function isMeals(meals: MealsPerDay): void\">isMeals</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>: <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp>):  void {  <data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) breakfast: string\">breakfast</data-lsp> =  \"a beef steak\";  // beef steak will be 1200 kcal  <data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) lunch: string\">lunch</data-lsp> =  \"a bucket of ice cream\";  // a bucket of ice cream will be 7200 kcal  <data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) dinner: string\">dinner</data-lsp> =  \"3 pizzas\";  // 3 pizzas will be 11400 kcal  if (!<data-lsp lsp=\"function isMeal(meal: string): boolean\">isMeal</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) breakfast: string\">breakfast</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"BREAKFAST IS NOT MEAL!\"); }  if (!<data-lsp lsp=\"function isMeal(meal: string): boolean\">isMeal</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) lunch: string\">lunch</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"LUNCH IS NOT MEAL!!!\"); }  if (!<data-lsp lsp=\"function isMeal(meal: string): boolean\">isMeal</data-lsp>(<data-lsp lsp=\"(parameter) meals: MealsPerDay\">meals</data-lsp>.<data-lsp lsp=\"(property) dinner: string\">dinner</data-lsp>)) {  throw  new  <data-lsp lsp=\"var Error: ErrorConstructor\nnew (message?: string | undefined) => Error\">Error</data-lsp>(\"DINNER IS NOT MEAL!!!\"); }}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);439.2 kcal<data-lsp lsp=\"function isMeals(meals: MealsPerDay): void\">isMeals</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);19,800 kcal!!!<data-lsp lsp=\"function willBeMetabo(meals: MealsPerDay): boolean\">willBeMetabo</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);true`\n```", "```\nts`const  <data-lsp lsp=\"const object1: object\">object1</data-lsp>:  object  = {};const  <data-lsp lsp=\"const object2: object\">object2</data-lsp>:  object  =  <data-lsp lsp=\"function shallowCopy(obj: object): object\">shallowCopy</data-lsp>(<data-lsp lsp=\"const object1: object\">object1</data-lsp>);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const object1: object\">object1</data-lsp> === <data-lsp lsp=\"const object2: object\">object2</data-lsp>);false`\n```", "```\nts`const  <data-lsp lsp=\"const object1: object\">object1</data-lsp>:  object  = {};const  <data-lsp lsp=\"const object2: object\">object2</data-lsp>:  object  = <data-lsp lsp=\"function shallowCopy(obj: object): object\">shallowCopy</data-lsp>(<data-lsp lsp=\"const object1: object\">object1</data-lsp>);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const object1: object\">object1</data-lsp> === <data-lsp lsp=\"const object2: object\">object2</data-lsp>);false`\n```", "```\nts`const  <data-lsp lsp=\"const scapegoat: MealsPerDay\">scapegoat</data-lsp>:  <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp>  =  <data-lsp lsp=\"function shallowCopy(meals: MealsPerDay): MealsPerDay\">shallowCopy</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);{ breakfast: \"a vegetable salad\", lunch: \"a cod's meuniere\", dinner: \"a half bottle of wine (white)\" }<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const scapegoat: MealsPerDay\">scapegoat</data-lsp>);{ breakfast: \"a vegetable salad\", lunch: \"a cod's meuniere\", dinner: \"a half bottle of wine (white)\" }<data-lsp lsp=\"function isMeals(meals: MealsPerDay): void\">isMeals</data-lsp>(<data-lsp lsp=\"const scapegoat: MealsPerDay\">scapegoat</data-lsp>);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);{ breakfast: \"a vegetable salad\", lunch: \"a cod's meuniere\", dinner: \"a half bottle of wine (white)\" }<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const scapegoat: MealsPerDay\">scapegoat</data-lsp>);{ breakfast: \"a beef steak\", lunch: \"a bucket of ice cream\", dinner: \"3 pizzas\" }`\n```", "```\nts`const  <data-lsp lsp=\"const scapegoat: MealsPerDay\">scapegoat</data-lsp>: <data-lsp lsp=\"type MealsPerDay = {\n    breakfast: string;\n    lunch: string;\n    dinner: string;\n}\">MealsPerDay</data-lsp> = <data-lsp lsp=\"function shallowCopy(meals: MealsPerDay): MealsPerDay\">shallowCopy</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);{ breakfast: \"a vegetable salad\", lunch: \"a cod's meuniere\", dinner: \"a half bottle of wine (white)\" }<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const scapegoat: MealsPerDay\">scapegoat</data-lsp>);{ breakfast: \"a vegetable salad\", lunch: \"a cod's meuniere\", dinner: \"a half bottle of wine (white)\" }<data-lsp lsp=\"function isMeals(meals: MealsPerDay): void\">isMeals</data-lsp>(<data-lsp lsp=\"const scapegoat: MealsPerDay\">scapegoat</data-lsp>);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const meals: MealsPerDay\">meals</data-lsp>);{ breakfast: \"a vegetable salad\", lunch: \"a cod's meuniere\", dinner: \"a half bottle of wine (white)\" }<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const scapegoat: MealsPerDay\">scapegoat</data-lsp>);{ breakfast: \"a beef steak\", lunch: \"a bucket of ice cream\", dinner: \"3 pizzas\" }`\n```", "```\nts`type  <data-lsp lsp=\"type NestObject = {\n    nest: object;\n}\">NestObject</data-lsp>  = { <data-lsp lsp=\"(property) nest: object\">nest</data-lsp>:  object;};const  <data-lsp lsp=\"const object1: NestObject\">object1</data-lsp>:  <data-lsp lsp=\"type NestObject = {\n    nest: object;\n}\">NestObject</data-lsp>  = { <data-lsp lsp=\"(property) nest: object\">nest</data-lsp>: {},};const  <data-lsp lsp=\"const object2: NestObject\">object2</data-lsp>:  <data-lsp lsp=\"type NestObject = {\n    nest: object;\n}\">NestObject</data-lsp>  =  <data-lsp lsp=\"function shallowCopy(meals: NestObject): NestObject\">shallowCopy</data-lsp>(<data-lsp lsp=\"const object1: NestObject\">object1</data-lsp>);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const object1: NestObject\">object1</data-lsp> === <data-lsp lsp=\"const object2: NestObject\">object2</data-lsp>);false<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const object1: NestObject\">object1</data-lsp>.<data-lsp lsp=\"(property) nest: object\">nest</data-lsp> ===  <data-lsp lsp=\"const object2: NestObject\">object2</data-lsp>.<data-lsp lsp=\"(property) nest: object\">nest</data-lsp>);true`\n```", "```\nts`type <data-lsp lsp=\"type NestObject = {\n    nest: object;\n}\">NestObject</data-lsp> = { <data-lsp lsp=\"(property) nest: object\">nest</data-lsp>:  object;};const  <data-lsp lsp=\"const object1: NestObject\">object1</data-lsp>: <data-lsp lsp=\"type NestObject = {\n    nest: object;\n}\">NestObject</data-lsp> = { <data-lsp lsp=\"(property) nest: object\">nest</data-lsp>: {},};const  <data-lsp lsp=\"const object2: NestObject\">object2</data-lsp>: <data-lsp lsp=\"type NestObject = {\n    nest: object;\n}\">NestObject</data-lsp> = <data-lsp lsp=\"function shallowCopy(meals: NestObject): NestObject\">shallowCopy</data-lsp>(<data-lsp lsp=\"const object1: NestObject\">object1</data-lsp>);<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const object1: NestObject\">object1</data-lsp> === <data-lsp lsp=\"const object2: NestObject\">object2</data-lsp>);false<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const object1: NestObject\">object1</data-lsp>.<data-lsp lsp=\"(property) nest: object\">nest</data-lsp> ===  <data-lsp lsp=\"const object2: NestObject\">object2</data-lsp>.<data-lsp lsp=\"(property) nest: object\">nest</data-lsp>);true`\n```", "```\nts`const  <data-lsp lsp=\"const shallowCopied: object\">shallowCopied</data-lsp>:  object  = { ...<data-lsp lsp=\"const sample: object\">sample</data-lsp> };`\n```", "```\nts`const  <data-lsp lsp=\"const shallowCopied: object\">shallowCopied</data-lsp>:  object  = { ...<data-lsp lsp=\"const sample: object\">sample</data-lsp> };`\n```", "```\nts`const  <data-lsp lsp=\"const sample: object\">sample</data-lsp>:  object  = { <data-lsp lsp=\"(property) year: number\">year</data-lsp>:  1999, <data-lsp lsp=\"(property) month: number\">month</data-lsp>:  7,};const  <data-lsp lsp=\"const shallowCopied: object\">shallowCopied</data-lsp>:  object  = { ...<data-lsp lsp=\"const sample: object\">sample</data-lsp> };`\n```", "```\nts`const  <data-lsp lsp=\"const sample: object\">sample</data-lsp>:  object  = { <data-lsp lsp=\"(property) year: number\">year</data-lsp>:  1999, <data-lsp lsp=\"(property) month: number\">month</data-lsp>:  7,};const  <data-lsp lsp=\"const shallowCopied: object\">shallowCopied</data-lsp>:  object  = { ...<data-lsp lsp=\"const sample: object\">sample</data-lsp> };`\n```", "```\nts`const  <data-lsp lsp=\"const sample: {\n    year: number;\n    month: number;\n}\">sample</data-lsp>  = { <data-lsp lsp=\"(property) year: number\">year</data-lsp>:  1999, <data-lsp lsp=\"(property) month: number\">month</data-lsp>:  7,};const  <data-lsp lsp=\"const shallowCopied: {\n    year: number;\n    month: number;\n}\">shallowCopied</data-lsp>  = { ...<data-lsp lsp=\"const sample: {\n    year: number;\n    month: number;\n}\">sample</data-lsp> };`\n```", "```\nts`const  <data-lsp lsp=\"const sample: {\n    year: number;\n    month: number;\n}\">sample</data-lsp>  = { <data-lsp lsp=\"(property) year: number\">year</data-lsp>:  1999, <data-lsp lsp=\"(property) month: number\">month</data-lsp>:  7,};const  <data-lsp lsp=\"const shallowCopied: {\n    year: number;\n    month: number;\n}\">shallowCopied</data-lsp>  = { ...<data-lsp lsp=\"const sample: {\n    year: number;\n    month: number;\n}\">sample</data-lsp> };`\n```", "```\nts`const  <data-lsp lsp=\"const sample: {\n    year: number;\n    month: number;\n}\">sample</data-lsp>  = { <data-lsp lsp=\"(property) year: number\">year</data-lsp>:  1999, <data-lsp lsp=\"(property) month: number\">month</data-lsp>:  7,};const  <data-lsp lsp=\"const shallowCopied: {\n    year: number;\n    month: number;\n}\">shallowCopied</data-lsp>  =  <data-lsp lsp=\"var Object: ObjectConstructor\">Object</data-lsp>.<data-lsp lsp=\"(method) ObjectConstructor.assign<{}, {\n    year: number;\n    month: number;\n}>(target: {}, source: {\n    year: number;\n    month: number;\n}): {\n    year: number;\n    month: number;\n} (+3 overloads)\">assign</data-lsp>({}, <data-lsp lsp=\"const sample: {\n    year: number;\n    month: number;\n}\">sample</data-lsp>);`\n```", "```\nts`const  <data-lsp lsp=\"const sample: {\n    year: number;\n    month: number;\n}\">sample</data-lsp>  = { <data-lsp lsp=\"(property) year: number\">year</data-lsp>:  1999, <data-lsp lsp=\"(property) month: number\">month</data-lsp>:  7,};const  <data-lsp lsp=\"const shallowCopied: {\n    year: number;\n    month: number;\n}\">shallowCopied</data-lsp>  =  <data-lsp lsp=\"var Object: ObjectConstructor\">Object</data-lsp>.<data-lsp lsp=\"(method) ObjectConstructor.assign<{}, {\n    year: number;\n    month: number;\n}>(target: {}, source: {\n    year: number;\n    month: number;\n}): {\n    year: number;\n    month: number;\n} (+3 overloads)\">assign</data-lsp>({}, <data-lsp lsp=\"const sample: {\n    year: number;\n    month: number;\n}\">sample</data-lsp>);`\n```", "```\nts`const  <data-lsp lsp=\"const map1: Map<string, string>\">map1</data-lsp>  =  new  <data-lsp lsp=\"var Map: MapConstructor\nnew <string, string>(iterable?: Iterable<readonly [string, string]> | null | undefined) => Map<string, string> (+3 overloads)\">Map</data-lsp>([ [\".js\",  \"JS\"], [\".ts\",  \"TS\"],]);const  <data-lsp lsp=\"const map2: Map<string, string>\">map2</data-lsp>  =  new  <data-lsp lsp=\"var Map: MapConstructor\nnew <string, string>(iterable?: Iterable<readonly [string, string]> | null | undefined) => Map<string, string> (+3 overloads)\">Map</data-lsp>(<data-lsp lsp=\"const map1: Map<string, string>\">map1</data-lsp>);// \u8981\u7d20\u306f\u540c\u4e00\u3060\u304c\u3001Map\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u7570\u306a\u308b<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const map2: Map<string, string>\">map2</data-lsp>);Map (2) {\".js\" => \"JS\", \".ts\" => \"TS\"}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const map1: Map<string, string>\">map1</data-lsp> !== <data-lsp lsp=\"const map2: Map<string, string>\">map2</data-lsp>);true`\n```", "```\nts`const  <data-lsp lsp=\"const map1: Map<string, string>\">map1</data-lsp>  =  new  <data-lsp lsp=\"var Map: MapConstructor\nnew <string, string>(iterable?: Iterable<readonly [string, string]> | null | undefined) => Map<string, string> (+3 overloads)\">Map</data-lsp>([ [\".js\",  \"JS\"], [\".ts\",  \"TS\"],]);const  <data-lsp lsp=\"const map2: Map<string, string>\">map2</data-lsp>  =  new  <data-lsp lsp=\"var Map: MapConstructor\nnew <string, string>(iterable?: Iterable<readonly [string, string]> | null | undefined) => Map<string, string> (+3 overloads)\">Map</data-lsp>(<data-lsp lsp=\"const map1: Map<string, string>\">map1</data-lsp>);// \u8981\u7d20\u306f\u540c\u4e00\u3060\u304c\u3001Map\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u7570\u306a\u308b<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const map2: Map<string, string>\">map2</data-lsp>);Map (2) {\".js\" => \"JS\", \".ts\" => \"TS\"}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const map1: Map<string, string>\">map1</data-lsp> !== <data-lsp lsp=\"const map2: Map<string, string>\">map2</data-lsp>);true`\n```", "```\nts`const  <data-lsp lsp=\"const set1: Set<number>\">set1</data-lsp>  =  new  <data-lsp lsp=\"var Set: SetConstructor\nnew <number>(iterable?: Iterable<number> | null | undefined) => Set<number> (+1 overload)\">Set</data-lsp>([1,  2,  3]);const  <data-lsp lsp=\"const set2: Set<number>\">set2</data-lsp>  =  new  <data-lsp lsp=\"var Set: SetConstructor\nnew <number>(iterable?: Iterable<number> | null | undefined) => Set<number> (+1 overload)\">Set</data-lsp>(<data-lsp lsp=\"const set1: Set<number>\">set1</data-lsp>);// \u8981\u7d20\u306f\u540c\u4e00\u3060\u304c\u3001Set\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u7570\u306a\u308b<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const set2: Set<number>\">set2</data-lsp>);Set (3) {1, 2, 3}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const set1: Set<number>\">set1</data-lsp> !== <data-lsp lsp=\"const set2: Set<number>\">set2</data-lsp>);true`\n```", "```\nts`const  <data-lsp lsp=\"const set1: Set<number>\">set1</data-lsp>  =  new  <data-lsp lsp=\"var Set: SetConstructor\nnew <number>(iterable?: Iterable<number> | null | undefined) => Set<number> (+1 overload)\">Set</data-lsp>([1,  2,  3]);const  <data-lsp lsp=\"const set2: Set<number>\">set2</data-lsp>  =  new  <data-lsp lsp=\"var Set: SetConstructor\nnew <number>(iterable?: Iterable<number> | null | undefined) => Set<number> (+1 overload)\">Set</data-lsp>(<data-lsp lsp=\"const set1: Set<number>\">set1</data-lsp>);// \u8981\u7d20\u306f\u540c\u4e00\u3060\u304c\u3001Set\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u7570\u306a\u308b<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const set2: Set<number>\">set2</data-lsp>);Set (3) {1, 2, 3}<data-lsp lsp=\"namespace console\nvar console: Console\">console</data-lsp>.<data-lsp lsp=\"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)\">log</data-lsp>(<data-lsp lsp=\"const set1: Set<number>\">set1</data-lsp> !== <data-lsp lsp=\"const set2: Set<number>\">set2</data-lsp>);true`\n```", "```\nts`const  <data-lsp lsp=\"const array1: number[]\">array1</data-lsp>  = [1,  2,  3];const  <data-lsp lsp=\"const array2: number[]\">array2</data-lsp>  = [...<data-lsp lsp=\"const array1: number[]\">array1</data-lsp>];`\n```", "```\nts`const  <data-lsp lsp=\"const array1: number[]\">array1</data-lsp>  = [1,  2,  3];const  <data-lsp lsp=\"const array2: number[]\">array2</data-lsp>  = [...<data-lsp lsp=\"const array1: number[]\">array1</data-lsp>];`\n```"]