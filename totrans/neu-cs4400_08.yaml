- en: Tail callsTuesday, January 17th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尾调用
- en: You should generally know what tail calls are, but here’s a quick review of
    the subject. A function call is said to be in tail position if there is no context
    to “remember” when you’re calling it. Very roughly, this means that function calls
    that are not nested in argument expressions of another call are tail calls. This
    definition is something that depends on a context, for example, in an expression
    like
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通常你应该知道什么是尾调用，但这里是对这个主题的快速回顾。如果在调用时没有“记住”的上下文，那么函数调用被称为处于尾位置。非常粗略地说，这意味着不嵌套在另一个调用的参数表达式中的函数调用是尾调用。这个定义取决于上下文，例如，在一个表达式中
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: both calls to `foo` are tail calls, but they’re tail calls of *this* expression
    and therefore apply to *this* context. It might be that this code is inside another
    call, as in
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 两个对`foo`的调用都是尾调用，但它们是*这个*表达式的尾调用，因此适用于*这个*上下文。可能这段代码是在另一个调用内部，如
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: and the `foo` calls are now not in tail position. The main feature of all Scheme
    implementations including Racket wrt tail calls is that calls that are in tail
    position of a function are said to be “eliminated”. That means that if we’re in
    an `f` function, and we’re about to call `g` in tail position and therefore whatever
    `g` returns would be the result of `f` too, then when Racket does the call to
    `g` it doesn’t bother keeping the `f` context — it won’t remember that it needs
    to “return” to `f` and will instead return straight to its caller. In other words,
    when you think about a conventional implementation of function calls as frames
    on a stack, Racket will get rid of a stack frame when it can.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 而`foo`调用现在不在尾位置。所有Scheme实现包括Racket在尾调用方面的主要特点是处于函数尾位置的调用被称为“消除”。这意味着如果我们在一个`f`函数中，并且我们即将在尾位置调用`g`，因此`g`返回的任何东西也将是`f`的结果，那么当Racket调用`g`时，它不会保留`f`的上下文
    — 它不会记住它需要“返回”到`f`，而是直接返回给它的调用者。换句话说，当你考虑函数调用的传统实现为堆栈上的帧时，Racket会在可以的时候摆脱一个堆栈帧。
- en: Another way to see this is to use DrRacket’s stepper to step through a function
    call. The stepper is generally an alternative debugger, where instead of visualizing
    stack frames it assembles an expression that represents these frames. Now, in
    the case of tail calls, there is no room in such a representation to keep the
    call — and the thing is that in Racket that’s perfectly fine since these calls
    are not kept on the call stack.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用DrRacket的stepper来逐步执行函数调用，可以另一种方式来看待这个问题。Stepper通常是一种替代性调试器，它不是可视化堆栈帧，而是组装一个表示这些帧的表达式。现在，在尾调用的情况下，在这样的表示中没有空间来保留调用
    — 而事实是，在Racket中这是完全可以的，因为这些调用不会保存在调用堆栈中。
- en: 'Note that there are several names for this feature:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个特性有几个名称：
- en: “Tail recursion”. This is a common way to refer to the more limited optimization
    of *only* tail-recursive functions into loops. In languages that have tail calls
    as a feature, this is too limited, since they also optimize cases of mutual recursion,
    or any case of a tail call.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “尾递归”。这是一个常见的方式来指代*仅*将尾递归函数优化为循环的更有限的优化。在具有尾调用作为特性的语言中，这太有限了，因为它们还优化了互相递归的情况，或者任何尾调用的情况。
- en: '“Tail call optimization”. In some languages, or more specifically in some compilers,
    you’ll hear this term. This is fine when tail calls are considered only an “optimization”
    — but in Racket’s case (as well as Scheme), it’s more than just an optimization:
    it’s a *language feature* that you can rely on. For example, a tail-recursive
    function like `(define (loop) (loop))` *must* run as an infinite loop, not just
    optimized to one when the compiler feels like it.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “尾调用优化”。在一些语言或更具体地说在一些编译器中，你会听到这个术语。当尾调用被认为只是一种“优化”时，这是可以接受的 — 但在Racket（以及Scheme）的情况下，它不仅仅是一种优化：它是一个*语言特性*，你可以依赖它。例如，像`(define
    (loop) (loop))`这样的尾递归函数 *必须* 作为一个无限循环运行，而不仅仅是在编译器认为需要优化为一个循环时。
- en: '“Tail call elimination”. This is the so far the most common proper name for
    the feature: it’s not just recursion, and it’s not an optimization.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “尾调用消除”。这是迄今为止这个特性最常见的正确名称：它不仅仅是递归，也不是一种优化。
- en: When should you use tail calls?
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 何时应该使用尾调用？
- en: Often, people who are aware of tail calls will try to use them *always*. That’s
    not always a good idea. You should generally be aware of the tradeoffs when you
    consider what style to use. The main thing to remember is that tail-call elimination
    is a property that helps reducing *space* use (stack space) — often reducing it
    from linear space to constant space. This can obviously make things faster, but
    usually the speedup is just a constant factor since you need to do the same number
    of iterations anyway, so you just reduce the time spent on space allocation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，了解尾调用的人们会尝试*始终*使用它们。这并不总是一个好主意。在考虑使用哪种风格时，你通常应该意识到其中的权衡。要记住的主要事情是，尾调用消除是一种有助于减少*空间*使用（栈空间）的属性——通常将其从线性空间减少到常数空间。这显然可以加快速度，但通常加速只是一个常数因子，因为无论如何你都需要做相同数量的迭代，所以你只是减少了在空间分配上花费的时间。
- en: 'Here is one such example that we’ve seen:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个我们见过的例子：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case the first (recursive) version version consumes space linear to
    the length of the list, whereas the second version needs only constant space.
    But if you consider only the asymptotic runtime, they are both O(length(l)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，第一个（递归）版本消耗的空间与列表的长度成线性关系，而第二个版本只需要常数空间。但是，如果仅考虑渐近运行时间，它们都是O（length（l））。
- en: 'A second example is a simple implementation of `map`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个例子是`map`的简单实现：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this case, both the asymptotic space and the runtime consumption are the
    same. In the recursive case we have a constant factor for the stack space, and
    in the iterative one (the tail-call version) we also have a similar factor for
    accumulating the reversed list. In this case, it is probably better to keep the
    first version since the code is simpler. In fact, Racket’s stack space management
    can make the first version run faster than the second — so optimizing it into
    the second version is useless.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，渐近空间和运行时消耗都是相同的。在递归情况下，我们对栈空间有一个常数因子，而在迭代情况下（尾调用版本），我们也有一个类似的因子用于累积反转列表。在这种情况下，最好保留第一个版本，因为代码更简单。事实上，Racket的栈空间管理可以使第一个版本运行速度比第二个版本更快，因此将其优化为第二个版本是没有用的。
