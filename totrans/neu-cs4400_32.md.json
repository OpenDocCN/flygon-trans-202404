["```\n;; a type for substitution caches:(define-type SubstCache = (Listof (List Symbol FLANG)))\n```", "```\n(: empty-subst : SubstCache)(define empty-subst null)(: extend : Symbol FLANG SubstCache -> SubstCache);; extend a given substitution cache with a new mapping(define (extend id expr sc)\u00a0 (cons (list id expr) sc))(: lookup : Symbol SubstCache -> FLANG);; lookup a symbol in a substitution cache, return the value it is;; bound to (or throw an error if it isn't bound)(define (lookup name sc)\u00a0 (cond [(null? sc) (error 'lookup \"no binding for ~s\" name)]\u00a0 \u00a0 \u00a0 \u00a0 [(eq? name (first (first sc))) (second (first sc))]\u00a0 \u00a0 \u00a0 \u00a0 [else (lookup name (rest sc))]))\n```", "```\n(define (lookup name sc)\u00a0 (let ([cell (assq name sc)])\u00a0 \u00a0 (if cell\u00a0 \u00a0 \u00a0 (second cell)\u00a0 \u00a0 \u00a0 (error 'lookup \"no binding for ~s\" name))))\n```"]