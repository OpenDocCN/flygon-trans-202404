- en: Chapter 1\. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。介绍
- en: Scheme is a general-purpose computer programming language. It is a high-level
    language, supporting operations on structured data such as strings, lists, and
    vectors, as well as operations on more traditional data such as numbers and characters.
    While Scheme is often identified with symbolic applications, its rich set of data
    types and flexible control structures make it a truly versatile language. Scheme
    has been employed to write text editors, optimizing compilers, operating systems,
    graphics packages, expert systems, numerical applications, financial analysis
    packages, virtual reality systems, and practically every other type of application
    imaginable. Scheme is a fairly simple language to learn, since it is based on
    a handful of syntactic forms and semantic concepts and since the interactive nature
    of most implementations encourages experimentation. Scheme is a challenging language
    to understand fully, however; developing the ability to use its full potential
    requires careful study and practice.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme是一种通用的计算机编程语言。它是一种高级语言，支持对结构化数据（如字符串、列表和向量）进行操作，以及对更传统的数据（如数字和字符）进行操作。虽然Scheme通常与符号应用程序相关联，但其丰富的数据类型集和灵活的控制结构使其成为一种真正多才多艺的语言。Scheme已被用于编写文本编辑器、优化编译器、操作系统、图形包、专家系统、数值应用程序、金融分析包、虚拟现实系统以及几乎所有其他类型的应用程序。Scheme是一种相当简单的语言，因为它基于少量的语法形式和语义概念，并且由于大多数实现的交互性鼓励实验。然而，要完全理解其全部潜力，需要仔细学习和实践。
- en: Scheme programs are highly portable across versions of the same Scheme implementation
    on different machines, because machine dependencies are almost completely hidden
    from the programmer. They are also portable across different implementations because
    of the efforts of a group of Scheme language designers who have published a series
    of reports, the "Revised Reports" on Scheme. The most recent, the "Revised⁶ Report" [[24](bibliography.html#g242)],
    emphasizes portability through a set of standard libraries and a standard mechanism
    for defining new portable libraries and top-level programs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme程序在不同机器上的相同Scheme实现版本之间具有高度的可移植性，因为机器依赖性几乎完全对程序员隐藏。它们也在不同实现之间具有可移植性，因为一组Scheme语言设计者通过一系列报告，即“修订报告”，的努力使其具有可移植性。最新的一份报告，“修订⁶报告”[[24](bibliography.html#g242)]，通过一套标准库和一种定义新的可移植库和顶层程序的标准机制强调了可移植性。
- en: Although some early Scheme systems were inefficient and slow, many newer compiler-based
    implementations are fast, with programs running on par with equivalent programs
    written in lower-level languages. The relative inefficiency that sometimes remains
    results from run-time checks that support generic arithmetic and help programmers
    detect and correct various common programming errors. These checks may be disabled
    in many implementations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管一些早期的Scheme系统效率低下且缓慢，但许多较新的基于编译器的实现速度很快，程序运行速度与用低级语言编写的等效程序相当。有时仍然存在的相对低效率是由于运行时检查，这些检查支持通用算术并帮助程序员检测和纠正各种常见的编程错误。在许多实现中，这些检查可以被禁用。
- en: Scheme supports many types of data values, or *objects*, including characters,
    strings, symbols, lists or vectors of objects, and a full set of numeric data
    types, including complex, real, and arbitrary-precision rational numbers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme支持许多类型的数据值，或*对象*，包括字符、字符串、符号、对象的列表或向量，以及一整套数字数据类型，包括复数、实数和任意精度的有理数。
- en: The storage required to hold the contents of an object is dynamically allocated
    as necessary and retained until no longer needed, then automatically deallocated,
    typically by a *garbage collector* that periodically recovers the storage used
    by inaccessible objects. Simple atomic values, such as small integers, characters,
    booleans, and the empty list, are typically represented as immediate values and
    thus incur no allocation or deallocation overhead.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 用于保存对象内容所需的存储空间根据需要动态分配，并保留直到不再需要，然后通过定期回收由无法访问的对象使用的存储空间的*垃圾收集器*自动释放。简单的原子值，如小整数、字符、布尔值和空列表，通常表示为即时值，因此不会产生分配或释放开销。
- en: Regardless of representation, all objects are *first-class* data values; because
    they are retained indefinitely, they may be passed freely as arguments to procedures,
    returned as values from procedures, and combined to form new objects. This is
    in contrast with many other languages where composite data values such as arrays
    are either statically allocated and never deallocated, allocated on entry to a
    block of code and unconditionally deallocated on exit from the block, or explicitly
    allocated *and* deallocated by the programmer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不管表示方式如何，所有对象都是*一等*数据值；因为它们被无限期保留，可以自由地作为参数传递给过程，作为过程的返回值返回，并组合成新的对象。这与许多其他语言不同，其中复合数据值（如数组）要么是静态分配且永不释放，要么在代码块进入时分配并在退出时无条件释放，要么由程序员显式分配*和*释放。
- en: Scheme is a call-by-value language, but for at least mutable objects (objects
    that can be modified), the values are pointers to the actual storage. These pointers
    remain behind the scenes, however, and programmers need not be conscious of them
    except to understand that the storage for an object is not copied when an object
    is passed to or returned from a procedure.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme是一种按值调用的语言，但对于至少可变对象（可以修改的对象），值是指向实际存储的指针。然而，这些指针在幕后，程序员无需意识到它们，除非理解当对象传递给过程或从过程返回时，对象的存储不会被复制。
- en: At the heart of the Scheme language is a small core of syntactic forms from
    which all other forms are built. These core forms, a set of extended syntactic
    forms derived from them, and a set of primitive procedures make up the full Scheme
    language. An interpreter or compiler for Scheme can be quite small and potentially
    fast and highly reliable. The extended syntactic forms and many primitive procedures
    can be defined in Scheme itself, simplifying the implementation and increasing
    reliability.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme语言的核心是一小组语法形式，所有其他形式都是从这些核心形式构建的。这些核心形式、从它们派生的一组扩展的语法形式以及一组原始过程组成了完整的Scheme语言。Scheme的解释器或编译器可以非常小且潜在地快速和高度可靠。扩展的语法形式和许多原始过程可以在Scheme本身中定义，简化了实现并增加了可靠性。
- en: Scheme programs share a common printed representation with Scheme data structures.
    As a result, any Scheme program has a natural and obvious internal representation
    as a Scheme object. For example, variables and syntactic keywords correspond to
    symbols, while structured syntactic forms correspond to lists. This representation
    is the basis for the syntactic extension facilities provided by Scheme for the
    definition of new syntactic forms in terms of existing syntactic forms and procedures.
    It also facilitates the implementation of interpreters, compilers, and other program
    transformation tools for Scheme directly in Scheme, as well as program transformation
    tools for other languages in Scheme.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme程序与Scheme数据结构共享一个通用的打印表示。因此，任何Scheme程序都有一个自然和明显的内部表示作为一个Scheme对象。例如，变量和语法关键字对应于符号，而结构化的语法形式对应于列表。这种表示是Scheme提供的用于在现有语法形式和过程的基础上定义新的语法形式的语法扩展设施的基础。它还便于在Scheme中直接实现解释器、编译器和其他程序转换工具，以及在Scheme中为其他语言实现程序转换工具。
- en: Scheme variables and keywords are *lexically scoped*, and Scheme programs are
    *block-structured*. Identifiers may be imported into a program or library or bound
    locally within a given block of code such as a library, program, or procedure
    body. A local binding is visible only lexically, i.e., within the program text
    that makes up the particular block of code. An occurrence of an identifier of
    the same name outside this block refers to a different binding; if no binding
    for the identifier exists outside the block, then the reference is invalid. Blocks
    may be nested, and a binding in one block may *shadow* a binding for an identifier
    of the same name in a surrounding block. The *scope* of a binding is the block
    in which the bound identifier is visible minus any portions of the block in which
    the identifier is shadowed. Block structure and lexical scoping help create programs
    that are modular, easy to read, easy to maintain, and reliable. Efficient code
    for lexical scoping is possible because a compiler can determine before program
    evaluation the scope of all bindings and the binding to which each identifier
    reference resolves. This does not mean, of course, that a compiler can determine
    the values of all variables, since the actual values are not computed in most
    cases until the program executes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme变量和关键字是*词法作用域*的，Scheme程序是*块结构*的。标识符可以被导入到程序或库中，也可以在给定代码块（如库、程序或过程体）中局部绑定。局部绑定仅在词法上可见，即在组成特定代码块的程序文本内可见。同名标识符在此代码块之外的出现指向不同的绑定；如果在代码块之外不存在标识符的绑定，则该引用无效。代码块可以嵌套，并且一个代码块中的绑定可能*遮蔽*周围代码块中同名标识符的绑定。绑定的*作用域*是绑定的标识符可见的代码块，减去标识符被遮蔽的代码块部分。块结构和词法作用域有助于创建模块化、易读、易维护和可靠的程序。词法作用域的高效代码是可能的，因为编译器可以在程序评估之前确定所有绑定的作用域以及每个标识符引用解析到的绑定。当然，这并不意味着编译器可以确定所有变量的值，因为在大多数情况下，实际值直到程序执行时才计算。
- en: In most languages, a procedure definition is simply the association of a name
    with a block of code. Certain variables local to the block are the parameters
    of the procedure. In some languages, a procedure definition may appear within
    another block or procedure so long as the procedure is invoked only during execution
    of the enclosing block. In others, procedures can be defined only at top level.
    In Scheme, a procedure definition may appear within another block or procedure,
    and the procedure may be invoked at any time thereafter, even if the enclosing
    block has completed its execution. To support lexical scoping, a procedure carries
    the lexical context (environment) along with its code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数语言中，过程定义只是将名称与一段代码块关联起来。代码块中的某些局部变量是过程的参数。在某些语言中，过程定义可以出现在另一个代码块或过程中，只要在执行封闭块时才调用该过程。在其他语言中，过程只能在顶层定义。在Scheme中，过程定义可以出现在另一个代码块或过程中，并且该过程可以在此后的任何时间被调用，即使封闭块已经执行完毕。为了支持词法作用域，过程携带其代码以及词法上下文（环境）。
- en: Furthermore, Scheme procedures are not always named. Instead, procedures are
    first-class data objects like strings or numbers, and variables are bound to procedures
    in the same way they are bound to other objects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Scheme过程并不总是被命名。相反，过程就像字符串或数字一样是第一类数据对象，变量与过程的绑定方式与其与其他对象的绑定方式相同。
- en: As with procedures in most other languages, Scheme procedures may be recursive.
    That is, any procedure may invoke itself directly or indirectly. Many algorithms
    are most elegantly or efficiently specified recursively. A special case of recursion,
    called tail recursion, is used to express iteration, or looping. A *tail call*
    occurs when one procedure directly returns the result of invoking another procedure;
    *tail recursion* occurs when a procedure recursively tail-calls itself, directly
    or indirectly. Scheme implementations are required to implement tail calls as
    jumps (gotos), so the storage overhead normally associated with recursion is avoided.
    As a result, Scheme programmers need master only simple procedure calls and recursion
    and need not be burdened with the usual assortment of looping constructs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数其他语言中的过程一样，Scheme过程可以是递归的。也就是说，任何过程都可以直接或间接地调用自身。许多算法最优雅或高效地通过递归来指定。递归的一个特例称为尾递归，用于表达迭代或循环。*尾调用*发生在一个过程直接返回调用另一个过程的结果时；*尾递归*发生在一个过程递归地尾调用自身，直接或间接地。Scheme实现要求将尾调用实现为跳转（goto），因此避免了通常与递归相关的存储开销。因此，Scheme程序员只需掌握简单的过程调用和递归，无需负担通常的循环结构。
- en: Scheme supports the definition of arbitrary control structures with *continuations*.
    A continuation is a procedure that embodies the remainder of a program at a given
    point in the program. A continuation may be obtained at any time during the execution
    of a program. As with other procedures, a continuation is a first-class object
    and may be invoked at any time after its creation. Whenever it is invoked, the
    program immediately continues from the point where the continuation was obtained.
    Continuations allow the implementation of complex control mechanisms including
    explicit backtracking, multithreading, and coroutines.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme支持使用*延续*定义任意控制结构。延续是一个过程，它体现了程序在程序中的某一点的剩余部分。在程序执行过程中可以随时获取延续。与其他过程一样，延续是一个一等对象，可以在创建后的任何时候调用。每当它被调用时，程序立即从获取延续的点继续执行。延续允许实现复杂的控制机制，包括显式回溯、多线程和协程。
- en: Scheme also allows programmers to define new syntactic forms, or *syntactic
    extensions*, by writing transformation procedures that determine how each new
    syntactic form maps to existing syntactic forms. These transformation procedures
    are themselves expressed in Scheme with the help of a convenient high-level pattern
    language that automates syntax checking, input deconstruction, and output reconstruction.
    By default, lexical scoping is maintained through the transformation process,
    but the programmer can exercise control over the scope of all identifiers appearing
    in the output of a transformer. Syntactic extensions are useful for defining new
    language constructs, for emulating language constructs found in other languages,
    for achieving the effects of in-line code expansion, and even for emulating entire
    languages in Scheme. Most large Scheme programs are built from a mix of syntactic
    extensions and procedure definitions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme还允许程序员通过编写转换过程来定义新的语法形式，或*语法扩展*，确定每个新的语法形式如何映射到现有的语法形式。这些转换过程本身是用Scheme表达的，借助一个方便的高级模式语言，自动化语法检查、输入解构和输出重构。默认情况下，通过转换过程维护词法作用域，但程序员可以控制转换器输出中出现的所有标识符的作用域。语法扩展对于定义新的语言构造、模拟其他语言中的语言构造、实现内联代码扩展的效果，甚至在Scheme中模拟整个语言都是有用的。大多数大型Scheme程序由一组语法扩展和过程定义构建而成。
- en: Scheme evolved from the Lisp language and is considered to be a dialect of Lisp.
    Scheme inherited from Lisp the treatment of values as first-class objects, several
    important data types, including symbols and lists, and the representation of programs
    as objects, among other things. Lexical scoping and block structure are features
    taken from Algol 60 [[21](bibliography.html#g239)]. Scheme was the first Lisp
    dialect to adopt lexical scoping and block structure, first-class procedures,
    the treatment of tail calls as jumps, continuations, and lexically scoped syntactic
    extensions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme起源于Lisp语言，被认为是Lisp的一个方言。Scheme从Lisp继承了将值视为一等对象、几种重要的数据类型（包括符号和列表）以及将程序表示为对象等特性。词法作用域和块结构是从Algol
    60中借鉴的特性。Scheme是第一个采用词法作用域和块结构、一等过程、将尾调用视为跳转、延续和词法作用域语法扩展的Lisp方言。
- en: Common Lisp [[27](bibliography.html#g245)] and Scheme are both contemporary
    Lisp languages, and the development of each has been influenced by the other.
    Like Scheme but unlike earlier Lisp languages, Common Lisp adopted lexical scoping
    and first-class procedures, although Common Lisp's syntactic extension facility
    does not respect lexical scoping. Common Lisp's evaluation rules for procedures
    are different from the evaluation rules for other objects, however, and it maintains
    a separate namespace for procedure variables, thereby inhibiting the use of procedures
    as first-class objects. Also, Common Lisp does not support continuations or require
    proper treatment of tail calls, but it does support several less general control
    structures not found in Scheme. While the two languages are similar, Common Lisp
    includes more specialized constructs, while Scheme includes more general-purpose
    building blocks out of which such constructs (and others) may be built.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Common Lisp [[27](bibliography.html#g245)] 和 Scheme 都是当代 Lisp 语言，它们的发展互相影响。与
    Scheme 类似但不同于早期的 Lisp 语言，Common Lisp 采用了词法作用域和一级过程，尽管 Common Lisp 的语法扩展功能不遵守词法作用域。然而，Common
    Lisp 对过程的评估规则与其他对象的评估规则不同，并且它为过程变量维护了一个单独的命名空间，从而抑制了将过程用作一级对象的使用。此外，Common Lisp
    不支持延续或要求正确处理尾调用，但它支持几种在 Scheme 中找不到的不太通用的控制结构。虽然这两种语言相似，但 Common Lisp 包含更多专门的构造，而
    Scheme 包含更多通用的构建模块，可以用来构建这样的构造（以及其他构造）。
- en: The remainder of this chapter describes Scheme's syntax and naming conventions
    and the typographical conventions used throughout this book.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分描述了方案的语法和命名约定，以及本书中使用的排版约定。
- en: Section 1.1\. Scheme Syntax
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 1.1 节 方案语法
- en: Scheme programs are made up of keywords, variables, structured forms, constant
    data (numbers, characters, strings, quoted vectors, quoted lists, quoted symbols,
    etc.), whitespace, and comments.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme 程序由关键字、变量、结构化形式、常量数据（数字、字符、字符串、引用向量、引用列表、引用符号等）、空格和注释组成。
- en: Keywords, variables, and symbols are collectively called identifiers. Identifiers
    may be formed from letters, digits, and certain special characters, including
    `?`, `!`, `.`, `+`, `-`, `*`, `/`, `<`, `=`, `>`, `:`, `$`, `%`, `^`, `&`, `_`,
    `~`, and `@`, as well as a set of additional Unicode characters. Identifiers cannot
    start with an at sign ( `@` ) and normally cannot start with any character that
    can start a number, i.e., a digit, plus sign ( `+` ), minus sign ( `-` ), or decimal
    point ( `.` ). Exceptions are `+`, `-`, and `...`, which are valid identifiers,
    and any identifier starting with `->`. For example, `hi`, `Hello`, `n`, `x`, `x3`,
    `x+2`, and `?$&*!!!` are all identifiers. Identifiers are delimited by whitespace,
    comments, parentheses, brackets, string (double) quotes ( `"` ), and hash marks( `#` ).
    A delimiter or any other Unicode character may be included anywhere within the
    name of an identifier as an escape of the form `\x*sv*;`, where `*sv*` is the
    scalar value of the character in hexadecimal notation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字、变量和符号统称为标识符。标识符可以由字母、数字和某些特殊字符组成，包括 `?`, `!`, `.`, `+`, `-`, `*`, `/`, `<`,
    `=`, `>`, `:`, `$`, `%`, `^`, `&`, `_`, `~`, 和 `@`，以及一组额外的 Unicode 字符。标识符不能以 at
    符号（`@`）开头，通常也不能以任何可以开始数字的字符开头，即数字、加号（`+`）、减号（`-`）或小数点（`.`）。例外情况是 `+`, `-`, 和 `...`，它们是有效的标识符，以及任何以
    `->` 开头的标识符。例如，`hi`, `Hello`, `n`, `x`, `x3`, `x+2`, 和 `?$&*!!!` 都是标识符。标识符由空格、注释、括号、方括号、字符串（双引号）引号（`"`）和井号（`#`）界定。分隔符或任何其他
    Unicode 字符可以包含在标识符的名称中的任何位置，作为形式为 `\x*sv*;` 的转义，其中 `*sv*` 是字符的标量值的十六进制表示。
- en: There is no inherent limit on the length of a Scheme identifier; programmers
    may use as many characters as necessary. Long identifiers are no substitute for
    comments, however, and frequent use of long identifiers can make a program difficult
    to format and consequently difficult to read. A good rule is to use short identifiers
    when the scope of the identifier is small and longer identifiers when the scope
    is larger.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme 标识符的长度没有固有限制；程序员可以使用任意数量的字符。然而，长标识符并不能替代注释，频繁使用长标识符可能会使程序难以格式化，进而难以阅读。一个好的规则是在标识符的范围较小时使用短标识符，在范围较大时使用较长的标识符。
- en: Identifiers may be written in any mix of upper- and lower-case letters, and
    case is significant, i.e., two identifiers are different even if they differ only
    in case. For example, `abcde`, `Abcde`, `AbCdE`, and `ABCDE` all refer to different
    identifiers. This is a change from previous versions of the Revised Report.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 标识符可以使用任意大小写字母混合编写，大小写敏感，即使它们仅在大小写上有所不同，两个标识符也是不同的。例如，`abcde`，`Abcde`，`AbCdE`和`ABCDE`都指代不同的标识符。这与修订报告的先前版本不同。
- en: Structured forms and list constants are enclosed within parentheses, e.g., `(a b c)`
    or `(* (- x 2) y)`. The empty list is written `()`. Matched sets of brackets ( `[` `]` )
    may be used in place of parentheses and are often used to set off the subexpressions
    of certain standard syntactic forms for readability, as shown in examples throughout
    this book. Vectors are written similarly to lists, except that they are preceded
    by `#(` and terminated by `)`, e.g., `#(this is a vector of symbols)`. Bytevectors
    are written as sequences of unsigned byte values (exact integers in the range
    0 through 255) bracketed by `#vu8(` and `)`, e.g., `#vu8(3 250 45 73)`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化形式和列表常量用括号括起来，例如，`(a b c)`或`(* (- x 2) y)`。空列表写作`()`。匹配的方括号（`[` `]`）可以用于替代括号，并且通常用于设置某些标准语法形式的子表达式以提高可读性，如本书中的示例所示。向量类似于列表，只是它们前面有`#(`，结尾有`)`，例如，`#(this is a vector of symbols)`。字节向量写作无符号字节值序列（范围为0到255的精确整数），用`#vu8(`和`)`括起来，例如，`#vu8(3 250 45 73)`。
- en: Strings are enclosed in double quotation marks, e.g., `"I am a string"`. Characters
    are preceded by `#\`, e.g., `#\a`. Case is important within character and string
    constants, as within identifiers. Numbers may be written as integers, e.g., -123,
    as ratios, e.g., 1/2, in floating-point or scientific notation, e.g., 1.3 or 1e23,
    or as complex numbers in rectangular or polar notation, e.g., 1.3-2.7i or -1.2@73.
    Case is not important in the syntax of a number. The boolean values representing
    *true* and *false* are written `#t` and `#f`. Scheme conditional expressions actually
    treat `#f` as false and all other objects as true, so `3`, `0`, `()`, `"false"`,
    and `nil` all count as true.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串用双引号括起来，例如，`"I am a string"`。字符前面有`#\`，例如，`#\a`。在字符和字符串常量中，大小写很重要，就像在标识符中一样。数字可以写成整数，例如，-123，比率，例如，1/2，浮点或科学计数法，例如，1.3或1e23，或者作为矩形或极坐标形式的复数，例如，1.3-2.7i或-1.2@73。数字的语法中大小写不重要。表示*true*和*false*的布尔值分别写为`#t`和`#f`。Scheme条件表达式实际上将`#f`视为false，将所有其他对象视为true，因此`3`，`0`，`()`，`"false"`和`nil`都被视为true。
- en: Details of the syntax for each type of constant data are given in the individual
    sections of Chapter [6](objects.html#g106) and in the formal syntax of Scheme
    starting on page [455](grammar.html#APPENDIXFORMALSYNTAX).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每种类型的常量数据的语法细节在第[6](objects.html#g106)章的各个部分和Scheme的正式语法中给出，从第[455](grammar.html#APPENDIXFORMALSYNTAX)页开始。
- en: Scheme expressions may span several lines, and no explicit terminator is required.
    Since the number of whitespace characters (spaces and newlines) between expressions
    is not significant, Scheme programs should be indented to show the structure of
    the code in a way that makes the code as readable as possible. Comments may appear
    on any line of a Scheme program, between a semicolon ( `;` ) and the end of the
    line. Comments explaining a particular Scheme expression are normally placed at
    the same indentation level as the expression, on the line before the expression.
    Comments explaining a procedure or group of procedures are normally placed before
    the procedures, without indentation. Multiple comment characters are often used
    to set off the latter kind of comment, e.g., `;;; The following procedures ...`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme表达式可以跨越多行，不需要显式的终止符。由于表达式之间的空白字符（空格和换行符）的数量不重要，Scheme程序应该缩进以显示代码的结构，使代码尽可能易读。注释可以出现在Scheme程序的任何行上，位于分号（`;`）和行尾之间。通常，解释特定Scheme表达式的注释应放在与表达式相同的缩进级别上，在表达式之前的行上。解释过程或一组过程的注释通常放在过程之前，不缩进。通常使用多个注释字符来设置后一种注释，例如，`;;; 以下过程...`。
- en: 'Two other forms of comments are supported: block comments and datum comments.
    Block comments are delimited by `#|` and `|#` pairs, and may be nested. A datum
    comment consists of a `#;` prefix and the datum (printed data value) that follows
    it. Datum comments are typically used to comment out individual definitions or
    expressions. For example, `(three #;(not four) element list)` is just what it
    says. Datum comments may also be nested, though `#;#;(a)(b)` has the somewhat
    nonobvious effect of commenting out both `(a)` and `(b)`.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 还支持另外两种形式的注释：块注释和数据注释。块注释由 `#|` 和 `|#` 对界定，可以嵌套。数据注释由 `#;` 前缀和随后的数据（打印的数据值）组成。数据注释通常用于注释掉单个定义或表达式。例如，`(three #;(not four) element list)`
    就是字面意思。数据注释也可以嵌套，尽管 `#;#;(a)(b)` 会注释掉 `(a)` 和 `(b)`。
- en: Some Scheme values, such as procedures and ports, do not have standard printed
    representations and can thus never appear as a constant in the printed syntax
    of a program. This book uses the notation `#<*description*>` when showing the
    output of an operation that returns such a value, e.g., `#<procedure>` or `#<port>`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Scheme 的值，比如过程和端口，没有标准的打印表示形式，因此永远不会出现在程序的打印语法中作为常量。本书在展示返回这种值的操作的输出时使用符号
    `#<*description*>`，例如 `#<procedure>` 或 `#<port>`。
- en: Section 1.2\. Scheme Naming Conventions
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 1.2 节。Scheme 命名约定
- en: 'Scheme''s naming conventions are designed to provide a high degree of regularity.
    The following is a list of these naming conventions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme 的命名约定旨在提供高度的规律性。以下是这些命名约定的列表：
- en: Predicate names end in a question mark ( `?` ). Predicates are procedures that
    return a true or false answer, such as `eq?`, `zero?`, and `string=?`. The common
    numeric comparators `=`, `<`, `>`, `<=`, and `>=` are exceptions to this naming
    convention.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谓词名称以问号（ `?` ）结尾。谓词是返回真或假答案的过程，比如 `eq?`，`zero?` 和 `string=?`。常见的数值比较器 `=`, `<`,
    `>`, `<=`, 和 `>=` 是这种命名约定的例外。
- en: Type predicates, such as `pair?`, are created from the name of the type, in
    this case `pair`, and the question mark.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型谓词，比如 `pair?`，是从类型的名称（在本例中是 `pair`）和问号创建的。
- en: The names of most character, string, and vector procedures start with the prefix
    `char-`, `string-`, and `vector-`, e.g., `string-append`. (The names of some list
    procedures start with `list-`, but most do not.)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数字符、字符串和向量过程的名称以前缀 `char-`，`string-` 和 `vector-` 开头，例如 `string-append`。（一些列表过程的名称以
    `list-` 开头，但大多数不是。）
- en: The names of procedures that convert an object of one type into an object of
    another type are written as `*type[1]*->*type[2]*`, e.g., `vector->list`.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个类型的对象转换为另一个类型的对象的过程的名称写为 `*type[1]*->*type[2]*`，例如 `vector->list`。
- en: The names of procedures and syntactic forms that cause side effects end with
    an exclamation point ( `!` ). These include `set!` and `vector-set!`. Procedures
    that perform input or output technically cause side effects, but their names are
    exceptions to this rule.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导致副作用的过程和语法形式的名称以感叹号结尾（ `!` ）。这包括 `set!` 和 `vector-set!`。执行输入或输出的过程在技术上会导致副作用，但它们的名称是这个规则的例外。
- en: Programmers should employ these same conventions in their own code whenever
    possible.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员应尽可能在自己的代码中遵循这些约定。
- en: Section 1.3\. Typographical and Notational Conventions
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 1.3 节。排版和符号约定
- en: A standard procedure or syntactic form whose sole purpose is to perform some
    side effect is said to return *unspecified*. This means that an implementation
    is free to return any number of values, each of which can be any Scheme object,
    as the value of the procedure or syntactic form. Do not count on these values
    being the same across implementations, the same across versions of the same implementation,
    or even the same across two uses of the procedure or syntactic form. Some Scheme
    systems routinely use a special object to represent unspecified values. Printing
    of this object is often suppressed by interactive Scheme systems, so that the
    values of expressions returning unspecified values are not printed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一个标准过程或语法形式的唯一目的是执行一些副作用，被称为返回*未指定*。这意味着实现可以返回任意数量的值，每个值都可以是任何 Scheme 对象，作为过程或语法形式的值。不要指望这些值在不同实现之间相同，在同一实现的不同版本之间相同，甚至在两次使用过程或语法形式时相同。一些
    Scheme 系统通常使用一个特殊对象来表示未指定的值。交互式 Scheme 系统通常会抑制打印此对象，以便不打印返回未指定值的表达式的值。
- en: While most standard procedures return a single value, the language supports
    procedures that return zero, one, more than one, or even a variable number of
    values via the mechanisms described in Section [5.8](control.html#g104). Some
    standard expressions can evaluate to multiple values if one of their subexpressions
    evaluates to multiple values, e.g., by calling a procedure that returns multiple
    values. When this situation can occur, an expression is said to return "the values"
    rather than simply "the value" of its subexpression. Similarly, a standard procedure
    that returns the values resulting from a call to a procedure argument is said
    to return the values returned by the procedure argument.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数标准过程返回单个值，但语言支持通过第[5.8](control.html#g104)节描述的机制返回零个、一个、多个甚至可变数量的值的过程。如果它们的子表达式之一返回多个值，一些标准表达式可以评估为多个值，例如通过调用返回多个值的过程。当出现这种情况时，表达式被称为返回“值”，而不仅仅是其子表达式的“值”。类似地，一个返回由过程参数调用返回的值的标准过程被称为返回由过程参数返回的值。
- en: This book uses the words "must" and "should" to describe program requirements,
    such as the requirement to provide an index that is less than the length of the
    vector in a call to `vector-ref`. If the word "must" is used, it means that the
    requirement is enforced by the implementation, i.e., an exception is raised, usually
    with condition type `&assertion`. If the word "should" is used, an exception may
    or may not be raised, and if not, the behavior of the program is undefined.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用“必须”和“应该”这两个词来描述程序要求，例如在调用`vector-ref`时提供小于向量长度的索引的要求。如果使用“必须”这个词，意味着该要求由实现强制执行，即会引发异常，通常是条件类型`&assertion`。如果使用“应该”这个词，可能会引发异常，也可能不会，如果不会，程序的行为是未定义的。
- en: The phrase "syntax violation" is used to describe a situation in which a program
    is malformed. Syntax violations are detected prior to program execution. When
    a syntax violation is detected, an exception of type `&syntax` is raised and the
    program is not executed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: “语法违规”一词用于描述程序形式不正确的情况。在程序执行之前会检测到语法违规。当检测到语法违规时，会引发`&syntax`类型的异常，程序不会被执行。
- en: The typographical conventions used in this book are straightforward. All Scheme
    objects are printed in a `typewriter` typeface, just as they are to be typed at
    the keyboard. This includes syntactic keywords, variables, constant objects, Scheme
    expressions, and example programs. An *italic* typeface is used to set off syntax
    variables in the descriptions of syntactic forms and arguments in the descriptions
    of procedures. Italics are also used to set off technical terms the first time
    they appear. In general, names of syntactic forms and procedures are never capitalized,
    even at the beginning of a sentence. The same is true for syntax variables written
    in italics.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用的排版约定很简单。所有Scheme对象都以`typewriter`字体打印，就像在键盘上输入一样。这包括语法关键字、变量、常量对象、Scheme表达式和示例程序。斜体字体用于在语法形式描述和过程描述中设置语法变量。第一次出现技术术语时也使用斜体。一般来说，语法形式和过程的名称从不大写，即使在句子开头也是如此。斜体字体中的语法变量也是如此。
- en: In the description of a syntactic form or procedure, one or more prototype patterns
    show the syntactic form or forms or the correct number or numbers of arguments
    for an application of the procedure. The keyword or procedure name is given in
    typewriter font, as are parentheses. The remaining pieces of the syntax or arguments
    are shown in italics, using a name that implies the type of expression or argument
    expected by the syntactic form or procedure. Ellipses are used to specify zero
    or more occurrences of a subexpression or argument. For example, `(or *expr* ...)`
    describes the `or` syntactic form, which has zero or more subexpressions, and
    `(member *obj* *list*)` describes the `member` procedure, which expects two arguments,
    an object and a list.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在对语法形式或过程的描述中，一个或多个原型模式显示了应用该过程的正确数量的参数或参数的语法形式。关键字或过程名称以打字机字体给出，括号也是如此。语法或参数的其余部分以斜体显示，使用暗示语法形式或过程所期望的表达式或参数类型的名称。省略号用于指定子表达式或参数的零个或多个出现。例如，`(or *expr* ...)`描述了`or`语法形式，其中有零个或多个子表达式，而`(member *obj* *list*)`描述了`member`过程，它期望两个参数，一个对象和一个列表。
- en: A syntax violation occurs if the structure of a syntactic form does not match
    its prototype. Similarly, an exception with condition type `&assertion` is raised
    if the number of arguments passed to a standard procedure does not match what
    it is specified to receive. An exception with condition type `&assertion` is also
    raised if a standard procedure receives an argument whose type is not the type
    implied by its name or does not meet other criteria given in the description of
    the procedure. For example, the prototype for `vector-set!` is
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果语法形式的结构与其原型不匹配，则会发生语法违例。类似地，如果传递给标准过程的参数数量与其规定接收的数量不匹配，则会引发一个带有条件类型`&assertion`的异常。如果标准过程接收到的参数类型与其名称暗示的类型不符或不符合过程描述中给定的其他标准，则也会引发一个带有条件类型`&assertion`的异常。例如，`vector-set!`的原型为
- en: '`(vector-set! *vector* *n* *obj*)`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`(vector-set! *vector* *n* *obj*)`'
- en: and the description says that `*n*` must be an exact nonnegative integer strictly
    less than the length of `*vector*`. Thus, `vector-set!` must receive three arguments,
    the first of which must be a vector, the second of which must be an exact nonnegative
    integer less than the length of the vector, and the third of which may be any
    Scheme value. Otherwise, an exception with condition type `&assertion` is raised.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 描述指出，`*n*`必须是严格小于`*vector*`长度的精确非负整数。因此，`vector-set!`必须接收三个参数，第一个参数必须是一个向量，第二个参数必须是小于向量长度的精确非负整数，第三个参数可以是任何
    Scheme 值。否则，将引发一个带有条件类型`&assertion`的异常。
- en: In most cases, the type of argument required is obvious, as with `*vector*`,
    `*obj*`, or `*binary-input-port*`. In others, primarily within the descriptions
    of numeric routines, abbreviations are used, such as `*int*` for integer, `*exint*`
    for exact integer, and `*fx*` for fixnum. These abbreviations are explained at
    the start of the sections containing the affected entries.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，所需参数的类型是显而易见的，就像`*vector*`、`*obj*`或`*binary-input-port*`一样。在其他情况下，主要是在数值例程的描述中，会使用缩写，比如`*int*`表示整数，`*exint*`表示精确整数，`*fx*`表示固定数。这些缩写在包含受影响条目的部分开头有解释。
