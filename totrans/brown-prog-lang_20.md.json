["```\ndata Box:\n  | box(ref v)\nwhere:\n  n1 = box(1)\n  n2 = box(2)\n  n1!{v : 3}\n  n2!{v : 4}\n  n1!v is 3\n  n2!v is 4\nend\n```", "```\ncheck:\n  b0!v == b1!v is true\n  b0 is-not%(identical) b1\n  b1 is%(identical) b2\n  b1!v is b2!v\nend\n```", "```\ncheck:\n  b0!v == b1!v is false\n  b0 is-not%(identical) b1\n  b1 is%(identical) b2\n  b1!v is b2!v\nend\n```", "```\nb1!{v: hold-b1-value}\n```", "```\nb2!{v: \"yet another value\"}\n\ncheck:\n  b0!v == b1!v is false\n  b0 is-not%(identical) b1\n  b1 is%(identical) b2\n  b1!v is b2!v\nend\n```", "```\nb0!{v: \"yet another value\"}\ncheck:\n  b0!v is-not b1!v\nend\n```", "```\nweb-colors = link(\"white\", link(\"grey\", web-colors))\n```", "```\ndata CList: clink(v, r) end\n```", "```\ndata CList: clink(v, ref r) end\n```", "```\nwhite-clink = clink(\"white\", \"dummy\")\ngrey-clink = clink(\"grey\", \"dummy\")\n```", "```\nwhite-clink!{r: grey-clink}\ngrey-clink!{r: white-clink}\n```", "```\nweb-colors = white-clink\n```", "```\nfun take(n :: Number, il :: CList) -> List:\n  if n == 0:\n    empty\n  else:\n    link(il.v, take(n - 1, il!r))\n  end\nend\n```", "```\ncheck:\n  take(4, web-colors) is\n  [list: \"white\", \"grey\", \"white\", \"grey\"]\nend\n```", "```\nfun sum(n):\n  if n > 0:\n    n + sum(n - 1)\n  else:\n    0\n  end\nend\n```", "```\nsum =\n  lam(n):\n    if n > 0:\n      n + sum(n - 1)\n    else:\n      0\n    end\n  end\n```", "```\nrec sum =\n  lam(n):\n    if n > 0:\n      n + sum(n - 1)\n    else:\n      0\n    end\n  end\n```", "```\n    data CList:\n      | undef\n      | clink(v, ref r)\n    end\n    ```", "```\nvar x = 0\nx := 1\n```", "```\ncheck:\n  l1 = mk-counter()\n  l1() is 1\n  l1() is 2\n  l2 = mk-counter()\n  l2() is 1\n  l1() is 3\n  l2() is 2\nend\n```", "```\nfun mk-counter():\n  ctr = box(0)\n  lam():\n    ctr!{v : (ctr!v + 1)}\n    ctr!v\n  end\nend\n```", "```\nfun mk-broken-counter():\n  lam():\n    ctr = box(0)\n    ctr!{v : (ctr!v + 1)}\n    ctr!v\n  end\nwhere:\n  l1 = mk-broken-counter()\n  l1() is 1\n  l1() is 1\n  l2 = mk-broken-counter()\n  l2() is 1\n  l1() is 1\n  l2() is 1\nend\n```", "```\nfun mk-counter():\n  var ctr = 0\n  lam():\n    ctr := ctr + 1\n    ctr\n  end\nwhere:\n  l1 = mk-counter()\n  l1() is 1\n  l1() is 2\n  l2 = mk-counter()\n  l2() is 1\n  l1() is 3\n  l2() is 2\nend\n```", "```\nfun mk-broken-counter():\n  lam():\n    var ctr = 0\n    ctr := ctr + 1\n    ctr\n  end\nwhere:\n  l1 = mk-broken-counter()\n  l1() is 1\n  l1() is 1\n  l2 = mk-broken-counter()\n  l2() is 1\n  l1() is 1\n  l2() is 1\nend\n```", "```\ncheck:\n  E1(b0, b1) is true\n  E1(b1, b2) is true\nend\n```", "```\ncheck:\n  E1(b0, b1) is false\n  E1(b1, b2) is true\nend\n```", "```\ncheck:\n  (b0 == b1) is false\n  (b1 == b2) is true\n  identical(b0, b1) is false\n  identical(b1, b2) is true\nend\n```", "```\nb0 = box(\"a value\")\nb1 = box(\"a value\")\nb2 = b1\nl0 = [list: b0]\nl1 = [list: b1]\nl2 = [list: b2]\n```", "```\ncheck:\n  identical(l0, l1) is false\n  identical(l1, l2) is false\nend\n```", "```\ncheck:\n  equal-now(l0, l1) is true\n  equal-now(l1, l2) is true\nend\n```", "```\ncheck:\n  (l0 == l1) is false\n  (l1 == l2) is true\nend\n```", "```\n    fun my-eq(v1, v2) -> Boolean:\n      identical(v1, v2) or equal-always(v1, v2)\n    end\n    ```", "```\n    check:\n      my-eq(b0, b1) is false\n      my-eq(b1, b2) is true\n      my-eq(l0, l1) is false\n      my-eq(l1, l2) is true\n    end\n    ```"]