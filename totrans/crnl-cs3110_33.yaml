- en: 'Recitation 23: Recurrences'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第23课：递归关系
- en: Asymptotic complexity has limitations, but it is still a useful tool analyzing
    and improving program performance. The use of big-O notation simplifies the task
    of analyzing performance. For OCaml, we assume that all the reductions performed
    during evaluation take constant time, including all arithmetic operations and
    pattern matching.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 渐近复杂度有其局限性，但仍然是分析和改进程序性能的有用工具。使用大O符号简化了分析性能的任务。对于OCaml，我们假设在评估过程中执行的所有简化都需要常量时间，包括所有算术运算和模式匹配。
- en: This assumption may be surprising if you think in terms of the substitution
    model. Substitution may require a lot of work, because a substituted variable
    may appear at many different places in the code. However, the OCaml implementation
    is closer to the environment model of evaluation, in which the actual substitutions
    are never done, but bindings are recorded in a separate *environment* for later
    lookup. Environments can be implemented so that all environment operations, including
    lookup, can be performed in constant time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从替换模型的角度来思考，这个假设可能会让人感到惊讶。替换可能需要大量工作，因为替换的变量可能会出现在代码中的许多不同位置。然而，OCaml的实现更接近于求值的环境模型，在这种模型中，实际的替换从未执行过，而是将绑定记录在一个单独的*环境*中以供以后查找。环境可以被实现为所有环境操作（包括查找）都可以在常数时间内执行。
- en: 'The following multiplication routine for nonnegative integers is correct, but
    not very efficient:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的非负整数乘法例程是正确的，但不太高效：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What is the order of growth of the time required by `times1` as a function of
    *n*, where *n* is the magnitude of the parameter `b`? Note that the "size" of
    a number can be measured either in terms of its magnitude or in terms of the number
    of digits (the space it takes to write the number down). Often the number of digits
    is used, but here we use the magnitude. Note that it takes only about *log[10]
    x* digits to write down a number of magnitude *x*, thus these two measures are
    very different.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参数`b`的大小函数*n*的时间需求的增长顺序是多少？注意，数字的“大小”可以用它的幅度或数字的位数（写下该数字所需的空间）来衡量。通常使用位数来衡量，但在这里我们使用幅度。请注意，写下一个大小为*x*的数字只需要大约*log[10]
    x*位，因此这两个度量是非常不同的。
- en: 'We assume that all the primitive operations in the `times1` function (`if`,
    `+`, `=`, and `-`) and the overhead for function calls take constant time. Thus
    if *n*=0, the routine takes some constant time *c*[2]. If *n*>0, the time taken
    on an input of magnitude *n* is at most some constant *c*[1] plus the time taken
    by the recursive call on *n**`-`*`1`. In other words, there are constants *c*[1]
    and *c*[2] such that *T(n)* satisfies:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`times1`函数中的所有原始操作（`if`、`+`、`=`和`-`）以及函数调用的开销都需要常量时间。因此，如果*n*=0，该例程需要一些常量时间*c*[2]。如果*n*>0，则在大小为*n*的输入上所花费的时间最多为某个常量*c*[1]加上对*n**`-`*`1`的递归调用所花费的时间。换句话说，存在常量*c*[1]和*c*[2]使得*T(n)*满足：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is a **recurrence relation** (or simply **recurrence**) defining a function
    T(n). It simply states that the time to multiply a number *a* by another number
    *b* of size *n > 0* is the time required to multiply *a* by a number of size *n`-`1*
    plus a constant amount of work (the primitive operations performed).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个**递归关系**（或简称**递归**），定义了一个函数*T(n)*。它简单地说明了将一个数字*a*乘以另一个大小为*n>0*的数字*b*所需的时间是将*a*乘以一个大小为*n`-`1*的数字的时间再加上一定量的工作（执行的原始操作）。
- en: The recurrence relation is an inductive definition of a function. This particular
    recurrence relation has a unique **closed-form solution** that defines T(n) without
    any recursion. In order to determine the running time of recursive functions we
    will write recurrences that describe the running time, find closed form solutions
    to them, and express those solutions in terms of Big-O notation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 递归关系是一个函数的归纳定义。这个特定的递归关系有一个唯一的**闭合形式解**，它定义了*T(n)*而不涉及任何递归。为了确定递归函数的运行时间，我们将编写描述运行时间的递归，找到它们的闭合形式解，并用大O符号表示这些解。
- en: 'Expanding out this particular recurrence gives some idea of how to convert
    it to closed form:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 展开这个特定的递归可以给出如何将其转换为闭合形式的一些思路：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: which is *O(n)*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 即为*O(n)*。
- en: More generally, we guess a closed form solution for a recurrence, and then prove
    by induction that it holds. Sometimes expanding out the recurrence for a few steps
    can help with the guessing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地说，我们猜测递归的闭合形式解，然后通过归纳证明它成立。有时，将递归展开几步可以帮助猜测。
- en: 'Now consider a different procedure for multiplying two numbers:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑另一种乘两个数字的过程：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Again we want an expression for the running time in terms of *n*, the magnitude
    of the parameter `b`. We assume that double and half operations are constant time
    (these could be done in constant time using arithmetic shift) as well as the standard
    primitives. The recurrence relation for this problem is more complicated than
    the previous one:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们希望用 *n* 的表达式来表示运行时间，参数 `b` 的大小。我们假设双倍和半操作是常数时间的（这可以通过算术移位在常数时间内完成），以及标准的原语也是常数时间的。对于这个问题，递归关系比之前的更复杂：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We somehow need to figure out how often the first versus the second branch
    of this recurrence relation will be taken. It''s easy if *n* is a power of two,
    i.e. if *n = 2^m* for some integer *m*. In this case, the second branch of will
    only get taken when *n* = 1, because *2^m* is even except when *m* = 0, i.e. when
    *n* = 1\. Thus, for this special case we can use the expansion technique above
    to get a closed form in terms of *m*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要弄清楚这个递归关系的第一分支和第二分支将被执行多少次。如果 *n* 是 2 的幂，即如果 *n = 2^m* 对于某个整数 *m* 成立，那么这就很容易。在这种情况下，当
    *n* = 1 时，第二分支只会执行一次，因为 *2^m* 是偶数，除非 *m* = 0，即当 *n* = 1 时。因此，对于这种特殊情况，我们可以使用上面的展开技巧得到关于
    *m* 的封闭形式：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: which is *O(log n)*. We can show that this is the case using induction.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 *O(log n)*。我们可以通过归纳证明这一点。
- en: Strong Induction
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**强归纳**'
- en: 'Strong induction has the same steps as ordinary induction, which you will recall
    from CS 2800, but the induction hypothesis is a little different:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 强归纳与普通归纳有着相同的步骤，你可能还记得来自 CS 2800 的，但归纳假设略有不同：
- en: State the proposition to be proved in terms of *P*(*n*)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 陈述待证命题 *P*(*n*) 的形式
- en: 'Base case: show *P*(*n*[0]) is true'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基本情况：证明 *P*(*n*[0]) 成立
- en: 'Induction hypothesis: Assume that *P*(*m*) is true for all *n*[0] ≤ *m* ≤ *n*.
    This is different from ordinary induction where we only assume that *P*(*m*) is
    true for *m* = *n*.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 归纳假设：假设对于所有 *n*[0] ≤ *m* ≤ *n*，*P*(*m*) 都成立。这与普通归纳不同，普通归纳只假设 *P*(*m*) 对 *m*
    = *n* 成立。
- en: 'Induction step: Using the induction hypothesis, prove *P*(*n*+1) is true.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 归纳步骤：利用归纳假设，证明 *P*(*n*+1) 成立。
- en: Conclusion:  *P*(*n*) is true for all *n* ≥ *n*[0].
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结论：*P*(*n*) 对于所有 *n* ≥ *n*[0] 都成立。
- en: 'We can formalize this process as an inference rule that gives us a way to prove
    a proposition ∀n.P(n) for some predicate P. Here are the rules for weak (ordinary)
    and strong induction respectively:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个过程形式化为一个推理规则，这个规则给了我们证明对于某个谓词 P，命题 ∀n.P(n) 的方法。以下分别是弱归纳和强归纳的规则：
- en: '| **Weak induction:**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '| **弱归纳：**'
- en: '&#124; P(0) &#124; ∀n (P(n) ⇒ P(n+1)) &#124;'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; P(0) &#124; ∀n (P(n) ⇒ P(n+1)) &#124;'
- en: '&#124; ∀n P(n) &#124;'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; ∀n P(n) &#124;'
- en: '|  | **Strong induction:**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | **强归纳：**'
- en: '&#124; ∀n (∀m (m < n ⇒ P(m)) ⇒ P(n)) &#124;'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; ∀n (∀m (m < n ⇒ P(m)) ⇒ P(n)) &#124;'
- en: '&#124; ∀n P(n) &#124;'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; ∀n P(n) &#124;'
- en: '|  |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: 'Note that the base case does not occur explicitly in the strong induction rule.
    However, it is still there implicitly: for n=0, you must prove ∀m (m < 0 ⇒ P(m))
    ⇒ P(0), which reduces to P(0) since ∀m (m < 0 ⇒ P(m)) is vacuously true, as there
    are no m < 0.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，基本情况在强归纳规则中并没有明确出现。然而，它仍然在隐含中存在：对于 n=0，你必须证明 ∀m (m < 0 ⇒ P(m)) ⇒ P(0)，这可以简化为
    P(0)，因为∀m (m < 0 ⇒ P(m)) 是虚假的，因为不存在 m < 0。
- en: 'In practice, it is often easier to prove asymptotic complexity bounds with
    strong induction than with weak induction, because you have a stronger induction
    hypothesis to work with, namely ∀m m < n ⇒ P(m) rather than P(n). However, the
    two rules are logically equivalent: one can prove the validity of the strong rule
    using the weak rule with the induction hypothesis P''(n) = ∀m (m < n ⇒ P(m)).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，通常用强归纳来证明渐近复杂度边界比用弱归纳更容易，因为你有一个更强的归纳假设可用，即 ∀m m < n ⇒ P(m) 而不是 P(n)。然而，这两个规则在逻辑上是等价的：可以用弱规则证明强规则的有效性，其中归纳假设
    P'(n) = ∀m (m < n ⇒ P(m))。
- en: Running Time of times2
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`times2` 的运行时间'
- en: 'Let''s return to the analysis of `times2`. When *n* is a power of 2, we have
    the following recurrence:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到对 `times2` 的分析。当 *n* 是 2 的幂时，我们有以下递归：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We show *T(n) = c[2] log n + c[4]* is the solution to this recurrence using
    strong induction.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用强归纳来证明 *T(n) = c[2] log n + c[4]* 是这个递归的解。
- en: 'Base case: *T(1) = c[4] = c[2] log 1 + c[4]*.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 基本情况：*T(1) = c[4] = c[2] log 1 + c[4]*。
- en: 'Induction hypothesis: *T(m) = c[2] log m + c[4]* for all *1 ≤ m < n*.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳假设：*T(m) = c[2] log m + c[4]* 对于所有 *1 ≤ m < n* 成立。
- en: 'Inductive step:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳步骤：
- en: '*T(n) = T(n/2) + c[2]*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*T(n) = T(n/2) + c[2]*'
- en: '*= c[2] log(n/2) + c[4] + c[2]* by I.H.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*= c[2] log(n/2) + c[4] + c[2]* 由 I.H. 推导得出。'
- en: '*= c[2](log n − log 2) + c[4] + c[2]*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*= c[2](log n − log 2) + c[4] + c[2]*'
- en: '*= c[2] log n − c[2] + c[4] + c[2]*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*= c[2] log n − c[2] + c[4] + c[2]*'
- en: '*= c[2] log n + c[4]*.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*= c[2] log n + c[4]*。'
- en: Thus in the case of an input of size *n* which is a power of 2, the running
    time of `times2` is *O(log n)*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在输入大小为 *n* 且为2的幂的情况下，`times2` 的运行时间为 *O(log n)*。
- en: 'In the general case, the running time of `times2` is also *O(log n)*, but we
    need a slightly different recurrence to make this easier to show. Note that it
    is not possible for the parameter `b` to be odd on two successive recursive calls
    of `times2`, because when it is odd, one is subtracted making it even. Thus we
    can rewrite the original recurrence as:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在一般情况下，`times2` 的运行时间也是 *O(log n)*，但我们需要一个稍微不同的递归来更容易地展示这一点。 注意，在连续两次递归调用 `times2`
    时，参数 `b` 不可能为奇数，因为当它为奇数时，会减去一个，使其变为偶数。 因此，我们可以将原始递归重写为：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that this new occurrence is analogous to rewriting the code so that both
    recursive calls divide the input size in half:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个新的事件与重写代码的情况类似，使得两次递归调用都将输入大小减半：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It is a little difficult to come up with a closed form solution to this recurrence.
    However, using strong induction, we can show that whatever it is, it is bounded
    asymptotically by a function of the form *d log n + e* for sufficiently large
    constants *d* and *e*, and that is good enough to show that the solution is *O(log
    n)*. So we want to show by strong induction that *T(n) ≤ d log n + e* for some
    (as yet to be determined) constants *d* and *e*. To find suitable *d* and *e*,
    we'll just jump in and see what we need to make the proof work.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个递归式找到一个封闭形式的解有点困难。 但是，使用强归纳，我们可以证明无论它是什么，对于足够大的常数 *d* 和 *e*，它都被形式为 *d log
    n + e* 的函数渐近地界定，并且这足以证明解为 *O(log n)*。 因此，我们想要通过强归纳来证明 *T(n) ≤ d log n + e* 对于一些（尚未确定的）常数
    *d* 和 *e*。 为了找到合适的 *d* 和 *e*，我们将直接开始并查看使证明有效的需要什么。
- en: 'Base case: We want *T(1) = c[4] ≤ d log 1 + e*. This will be true provided
    we choose *e ≥ c[4]*.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 基本情况：我们希望 *T(1) = c[4] ≤ d log 1 + e*。 只要我们选择 *e ≥ c[4]*，这就成立。
- en: 'Induction hypothesis: *T(m) ≤ d log m + e* for all *1 ≤ m < n*.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳假设：对于所有 *1 ≤ m < n*，*T(m) ≤ d log m + e*。
- en: 'Inductive step, *n* even:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳步骤，*n* 为偶数：
- en: '*T(n) = T(n/2) + c[2]*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*T(n) = T(n/2) + c[2]*'
- en: '*≤ d log(n/2) + e + c[2]* by I.H.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*≤ d log(n/2) + e + c[2]* 通过 I.H.'
- en: '*= d log n − d + e + c[2]*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*= d log n − d + e + c[2]*'
- en: '*≤ d log n + e*, provided we choose *d ≥ c[2]*.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*≤ d log n + e*，只要我们选择 *d ≥ c[2]*。'
- en: 'Inductive step, *n* odd:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳步骤，*n* 为奇数：
- en: '*T(n) = T((n−1)/2) + c[1] + c[2]*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*T(n) = T((n−1)/2) + c[1] + c[2]*'
- en: '*≤ d log((n−1)/2) + e + c[1] + c[2]* by I.H.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*≤ d log((n−1)/2) + e + c[1] + c[2]* 通过 I.H.'
- en: '*= d log(n−1) − d + e + c[1] + c[2]*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*= d log(n−1) − d + e + c[1] + c[2]*'
- en: '*≤ d log n − d + e + c[1] + c[2]*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*≤ d log n − d + e + c[1] + c[2]*'
- en: '*≤ d log n + e*, provided we choose *d ≥ c[1] + c[2]*.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*≤ d log n + e*，只要我们选择 *d ≥ c[1] + c[2]*。'
- en: Choosing *d* and *e* just large enough to satisfy all these conditions, we see
    that *T(n) ≤ (c[1] + c[2]) log n + c[4]* for all *n ≥ 1*, therefore *T(n)* is
    *O(log n)*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 选择足够大的 *d* 和 *e* 来满足所有这些条件，我们看到 *T(n) ≤ (c[1] + c[2]) log n + c[4]* 对于所有 *n
    ≥ 1* 成立，因此 *T(n)* 是 *O(log n)*。
