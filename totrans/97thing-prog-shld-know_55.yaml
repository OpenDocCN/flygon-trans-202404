- en: Make Interfaces Easy to Use Correctly and Hard to Use Incorrectly
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让界面易于正确使用并难以错误使用
- en: Make Interfaces Easy to Use Correctly and Hard to Use Incorrectly
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让界面易于正确使用并难以错误使用
- en: One of the most common tasks in software development is interface specification.
    Interfaces occur at the highest level of abstraction (user interfaces), at the
    lowest (function interfaces), and at levels in between (class interfaces, library
    interfaces, etc.). Regardless of whether you work with end users to specify how
    they'll interact with a system, collaborate with developers to specify an API,
    or declare functions private to a class, interface design is an important part
    of your job. If you do it well, your interfaces will be a pleasure to use and
    will boost others' productivity. If you do it poorly, your interfaces will be
    a source of frustration and errors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发中最常见的任务之一是界面规范。界面出现在最高级别的抽象层（用户界面）、最低级别（函数接口）以及中间级别（类接口、库接口等）。无论您是与最终用户合作指定他们将如何与系统交互，还是与开发人员合作指定
    API，还是声明对类私有的函数，界面设计都是工作的重要部分。如果你做得好，你的界面将是一种愉快的使用体验，并将提高其他人的生产力。如果做得不好，你的界面将成为沮丧和错误的源泉。
- en: 'Good interfaces are:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 好的界面是：
- en: '**Easy to use correctly.** People using a well-designed interface almost always
    use the interface correctly, because that''s the path of least resistance. In
    a GUI, they almost always click on the right icon, button, or menu entry, because
    it''s the obvious and easy thing to do. In an API, they almost always pass the
    correct parameters with the correct values, because that''s what''s most natural.
    With interfaces that are easy to use correctly, *things just work.*'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于正确使用。** 使用设计良好的界面的人几乎总是正确地使用界面，因为这是最小阻力的路径。在 GUI 中，他们几乎总是点击正确的图标、按钮或菜单项，因为这是显而易见的、容易做的事情。在
    API 中，他们几乎总是传递正确的参数和正确的值，因为这是最自然的。使用易于正确使用的界面，*事情就能顺利进行*。'
- en: '**Hard to use incorrectly.** Good interfaces anticipate mistakes people might
    make and make them difficult — ideally impossible — to commit. A GUI might disable
    or remove commands that make no sense in the current context, for example, or
    an API might eliminate argument-ordering problems by allowing parameters to be
    passed in any order.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**难以错误使用。** 好的界面能够预见到用户可能会犯的错误，并使它们难以 —— 理想情况下是不可能 —— 发生。例如，GUI 可能会禁用或删除在当前上下文中毫无意义的命令，或者
    API 可能通过允许以任何顺序传递参数来消除参数顺序问题。'
- en: A good way to design interfaces that are easy to use correctly is to exercise
    them before they exist. Mock up a GUI — possibly on a whiteboard or using index
    cards on a table — and play with it before any underlying code has been created.
    Write calls to an API before the functions have been declared. Walk through common
    use cases and specify how you *want* the interface to behave. What do you *want*
    to be able to click on? What do you *want* to be able to pass? Easy to use interfaces
    seem natural, because they let you do what you want to do. You're more likely
    to come up with such interfaces if you develop them from a user's point of view.
    (This perspective is one of the strengths of test-first programming.)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 设计易于正确使用的界面的好方法是在它们存在之前对其进行测试。模拟一个 GUI —— 可能是在白板上或者在桌子上使用索引卡 —— 并在任何底层代码被创建之前尝试一下。在函数声明之前编写对
    API 的调用。遍历常见用例并指定你*希望*界面如何行为。你想*点击*什么？你想*传递*什么？易于使用的界面似乎很自然，因为它们让你做你想做的事情。如果你从用户的角度开发它们，那么你更有可能提出这样的界面。（这个视角是测试驱动编程的优势之一。）
- en: Making interfaces hard to use incorrectly requires two things. First, you must
    anticipate errors users might make and find ways to prevent them. Second, you
    must observe how an interface is misused during early release and modify the interface
    — yes, modify the interface! — to prevent such errors. The best way to prevent
    incorrect use is to make such use impossible. If users keep wanting to undo an
    irrevocable action, try to make the action revocable. If they keep passing the
    wrong value to an API, do your best to modify the API to take the values that
    users want to pass.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使界面难以错误使用需要两件事情。首先，你必须预见用户可能犯的错误，并找到方法防止它们。其次，您必须在早期版本中观察到界面的误用，并修改界面 —— 是的，修改界面！
    —— 以防止此类错误。防止不正确使用的最佳方法是使此类使用变得不可能。如果用户一直想撤销一个不可撤销的操作，请尝试使该操作可撤销。如果他们一直向 API 传递错误的值，请尽力修改
    API 以接受用户想要传递的值。
- en: Above all, remember that interfaces exist for the convenience of their users,
    not their implementers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是要记住，接口存在是为了方便其用户，而不是其实现者。
- en: By [Scott Meyers](http://programmer.97things.oreilly.com/wiki/index.php/Scott_Meyers)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[Scott Meyers](http://programmer.97things.oreilly.com/wiki/index.php/Scott_Meyers)
