["```\n x_data = [1.0, 2.0, 3.0]\ny_data = [2.0, 4.0, 6.0]\n\nw = 1.0  # a random guess: random value\n\n# our model forward pass\n\ndef forward(x):\n    return x * w\n\n# Loss function\ndef loss(x, y):\n    y_pred = forward(x)\n    return (y_pred - y) * (y_pred - y)\n\n# compute gradient\ndef gradient(x, y):  # d_loss/d_w\n    return 2 * x * (x * w - y)\n\n# Before training\nprint(\"predict (before training)\",  4, forward(4))\n\n# Training loop\nfor epoch in range(10):\n    for x_val, y_val in zip(x_data, y_data):\n        grad = gradient(x_val, y_val)\n        w = w - 0.01 * grad\n        print(\"\\tgrad: \", x_val, y_val, round(grad, 2))\n        l = loss(x_val, y_val)\n\n    print(\"progress:\", epoch, \"w=\", round(w, 2), \"loss=\", round(l, 2))\n\n# After training\nprint(\"predict (after training)\",  \"4 hours\", forward(4)) \n```"]