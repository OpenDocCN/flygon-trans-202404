- en: Church Numerals (contd.)Tuesday, February 21st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 教堂数（续）星期二，二月二十一日
- en: 'We can now define natural number addition — one simple idea is to get two encoded
    numbers `m` and `n`, then start with `x`, apply `f` on it `n` times by using it
    as a function, then apply `f` `m` more times on the result in the same way:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以定义自然数加法 — 一个简单的想法是得到两个编码数字 `m` 和 `n`，然后从 `x` 开始，通过将它用作函数，在结果上应用 `n` 次
    `f`，然后以相同的方式在结果上再应用 `m` 次 `f`：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'or equivalently:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 或等价地：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Another idea is to use `add1` and increment `n` by `m` using `add1`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个想法是使用 `add1` 并使用 `add1` 将 `n` 增加 `m`：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can also define multiplication of `m` and `n` quite easily — begin with
    addition — `(lambda (x) (+ n x))` is a function that expects an `x` and returns
    `(+ x n)` — it’s an increment-by-n function. But since all functions and applications
    are curried, this is actually the same as `(lambda (x) ((+ n) x))` which is the
    same as `(+ n)`. Now, what we want to do is repeat this operation `m` times over
    zero, which will add `n` to zero `m` times, resulting in `m` * `n`. The definition
    is therefore:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以很容易地定义 `m` 和 `n` 的乘法 — 从加法开始 — `(lambda (x) (+ n x))` 是一个期望 `x` 并返回 `(+
    x n)` 的函数 — 这是一个增量 `n` 的函数。但由于所有函数和应用都是柯里化的，这实际上与 `(lambda (x) ((+ n) x))` 相同，这与
    `(+ n)` 相同。现在，我们要做的是将此操作重复 `m` 次在零上，这将零加 `n` `m` 次，结果为 `m` * `n`。因此，定义是：
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: An alternative approach is to consider
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是考虑
- en: '[PRE4]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: for some encoded number `n` and a function `f` — this function is like `f`^`n`
    (f composed n times with itself). But remember that this is shorthand for
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某个编码数字 `n` 和一个函数 `f` — 这个函数就像 `f`^`n`（f 自己与自己组合 n 次）。但请记住，这只是简写形式
- en: '[PRE5]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: and we know that `(lambda (x) (foo x))` is just like `foo` (if it is a function),
    so this is equivalent to just
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道 `(lambda (x) (foo x))` 就像 `foo`（如果它是一个函数），所以这等价于
- en: '[PRE6]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So `(n f)` is `f`^`n`, and in the same way `(m g)` is `g`^`m` — if we use `(n
    f)` for `g`, we get `(m (n f))` which is n self-compositions of `f`, self-composed
    m times. In other words, `(m (n f))` is a function that is like `m`*`n` applications
    of `f`, so we can define multiplication as:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此 `(n f)` 是 `f`^`n`，以相同的方式 `(m g)` 是 `g`^`m` — 如果我们将 `(n f)` 用于 `g`，我们得到 `(m
    (n f))`，这是 `f` 的 n 次自组合，自组合 m 次。换句话说，`(m (n f))` 是一个类似于 `f` 的 `m`*`n` 次应用的函数，因此我们可以将乘法定义为：
- en: '[PRE7]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: which is the same as
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这与之相同
- en: '[PRE8]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The same principle can be used to define exponentiation (but now we have to
    be careful with the order since exponentiation is not commutative):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的原理可以用来定义指数（但现在我们必须注意顺序，因为指数不是可交换的）：
- en: '[PRE9]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And there is a similar alternative here too —
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里也有一个类似的替代方案 —
- en: a Church numeral `m` is the m-self-composition function,
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 教堂数 `m` 是 m-自组合函数，
- en: and `(1 m)` is just like `m`^`1` which is the same as `m` (`1`=`identity`)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 而 `(1 m)` 就像 `m`^`1`，与 `m` 相同（`1`=`identity`）
- en: and `(2 m)` is just like `m`^`2` — it takes a function `f`, self composes it
    `m` times, and self composes the result `m` times — for a total of `f`^`(m*m)`
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 而 `(2 m)` 就像 `m`^`2` — 它接受一个函数 `f`，自我组合 `m` 次，然后将结果再自我组合 `m` 次 — 总共 `f`^`(m*m)`
- en: and `(3 m)` is similarly `f`^`(m*m*m)`
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 而 `(3 m)` 类似于 `f`^`(m*m*m)`
- en: so `(n m)` is `f`^`(m^n)` (note that the first `^` is self-compositions, and
    the second one is a mathematical exponent)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此 `(n m)` 是 `f`^`(m^n)`（注意第一个 `^` 是自组合，第二个是数学上的指数）
- en: 'so `(n m)` is a function that returns `m`^`n` self-compositions of an input
    function, Which means that `(n m)` is the Church numeral for `m`^`n`, so we get:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，`(n m)` 是一个返回输入函数的 `m`^`n` 自组合的函数，这意味着 `(n m)` 是 `m`^`n` 的教堂数，因此我们得到：
- en: (define ^ (lambda (m n) (n m)))
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (define ^ (lambda (m n) (n m)))
- en: which basically says that any number encoding `n` is also the `?`^`n` operation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是说任何编码数字 `n` 也是 `?`^`n` 运算。
- en: All of this is was not too complicated — but all so far all we did is write
    functions that increment their inputs in various ways. What about `sub1`? For
    that, we need to do some more work — we will need to encode booleans.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都不是太复杂的事情 — 但到目前为止我们所做的一切都是以各种方式编写增加其输入的函数。`sub1` 呢？为此，我们需要做更多的工作 — 我们需要编码布尔值。
