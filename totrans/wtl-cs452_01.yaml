- en: Lecture 1 - Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pubilc Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due date for assignment 0/1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combination to trains lab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ubuntu 10.10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[How to compile and run your first program](../pdf/first.pdf)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Practical Details: [pdf](../pdf/intro.pdf)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Embedded Systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most of the mediation between the internal representations and the real-world
    is done by embedded systems
  prefs: []
  type: TYPE_NORMAL
- en: invisible computing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sense and control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: billions and billions sold
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Two box model
  prefs: []
  type: TYPE_NORMAL
- en: develop on one box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: execute on a different box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development cycle
  prefs: []
  type: TYPE_NORMAL
- en: edit & compile on one box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: download to second box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: execute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Problem one
  prefs: []
  type: TYPE_NORMAL
- en: raw code that owns the hardware itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hardware-specific libraries provide access to hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: microcontroller/hopper example
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Problem two
  prefs: []
  type: TYPE_NORMAL
- en: OS-like abstraction of hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: looks like a bunch of libraries, plus a little more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: What is real-time programming?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Actually real-world programming, which means
  prefs: []
  type: TYPE_NORMAL
- en: World is measured in seconds, metres, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programs manipulate bits, bytes, words, which must be translated into into real-world
    measures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'formatted output: translate from int, which computers manipulate, to decimal,
    which humans read'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'out in the open: i2a( ), printf( )'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'hidden: print, cout'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Banking: int translates into, e.g., number of cents'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: program says dispense( 10000 ), which means `put five twemties into the hopper'.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: microcontrollers start
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: activating motors
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sensing forces
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reading digitized video
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: etc.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Train control: contents of messages map into change speed, switch turn-out,
    sensor triggered'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What is important for real-time?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Throughput
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: e.g., number of frames per second in a game
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: e.g., frequency of sensor sampling in process control
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: no solution except
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: getting better hardware
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: getting better algorithms
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: restructuring the task
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Response time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: e.g., time from button press to gun firing in game
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: e.g., time from sensor reading to control code executing in provess control
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: several programming techniques exist
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: busy-wait
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: polling loop
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: tension between flexibility and performance
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: In cs452 we take guaranteed response time as the defining quality of real-time
    computation.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Serial I/O
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Uses a device called a UART,
  prefs: []
  type: TYPE_NORMAL
- en: which is really just two shift registers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with a one byte buffer in front of each one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plus one bit in a control register for each. They mean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'read: there''s a byte you haven''t read yet'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'write: the buffer is empty, you can write'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Busy Waiting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is used to synchronize with an external event, minimizing response time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: or in another form
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes you only want to do the thing once, as you do when putting a character
    on a serial line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Worst case response time
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: From the time that the ready bit sets until the first instruction of do-it is
    executed
  prefs: []
  type: TYPE_NORMAL
- en: execution time for
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Even a moderately optimizing compiler will produce good machine code. Something
    like
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here do-it is acquiring a single byte from interface hardware when the status
    register indicates that valid data is available in the dara register.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Worst case response time is the execution of `and`, `beq`, `ldb`, `and` and
    `beq`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Normally code like this would be inside a loop, acquiring one byte after another
    until no more are available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The problem with busy-waiting
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: What if the CPU has to two things at once?
  prefs: []
  type: TYPE_NORMAL
- en: E.g.,
  prefs: []
  type: TYPE_NORMAL
- en: collect bytes coming in a serial port
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: maintain a clock
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unless the rate of bytes coming in and rate of clock ticks are identical
  prefs: []
  type: TYPE_NORMAL
- en: you are guaranteed to lose something sooner or later.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
