["```\njs`// <input id=\"email\">\u306e\u6587\u5b57\u8272\u3092\u8d64\u8272\u306b\u3059\u308bDOM\u64cd\u4f5c\u306e\u4f8bconst  <data-lsp lsp=\"module emailInput\nconst emailInput: HTMLElement | null\">emailInput</data-lsp>  =  <data-lsp lsp=\"var document: Document\">document</data-lsp>.<data-lsp lsp=\"(method) Document.getElementById(elementId: string): HTMLElement | null\">getElementById</data-lsp>(\"email\");<data-lsp lsp=\"module emailInput\nconst emailInput: HTMLElement | null\">emailInput</data-lsp>.<data-lsp lsp=\"(property) ElementCSSInlineStyle.style: CSSStyleDeclaration\">style</data-lsp>.<data-lsp lsp=\"(property) CSSStyleDeclaration.color: string\">color</data-lsp> =  \"red\";`\n```", "```\njs`// <input id=\"email\">\u306e\u6587\u5b57\u8272\u3092\u8d64\u8272\u306b\u3059\u308bDOM\u64cd\u4f5c\u306e\u4f8bconst  <data-lsp lsp=\"module emailInput\nconst emailInput: HTMLElement | null\">emailInput</data-lsp>  =  <data-lsp lsp=\"var document: Document\">document</data-lsp>.<data-lsp lsp=\"(method) Document.getElementById(elementId: string): HTMLElement | null\">getElementById</data-lsp>(\"email\");<data-lsp lsp=\"module emailInput\nconst emailInput: HTMLElement | null\">emailInput</data-lsp>.<data-lsp lsp=\"(property) ElementCSSInlineStyle.style: CSSStyleDeclaration\">style</data-lsp>.<data-lsp lsp=\"(property) CSSStyleDeclaration.color: string\">color</data-lsp> =  \"red\";`\n```", "```\nhtml`<ul> <li>\u30ea\u30f3\u30b4</li> <li>\u30aa\u30ec\u30f3\u30b8</li> <li>\u3076\u3069\u3046</li></ul>`\n```", "```\nhtml`<ul> <li>\u30ea\u30f3\u30b4</li> <li>\u30aa\u30ec\u30f3\u30b8</li> <li>\u3076\u3069\u3046</li></ul>`\n```", "```\njs`const  <data-lsp lsp=\"const list: HTMLUListElement\">list</data-lsp>  =  <data-lsp lsp=\"var document: Document\">document</data-lsp>.<data-lsp lsp=\"(method) Document.createElement<&quot;ul&quot;>(tagName: &quot;ul&quot;, options?: ElementCreationOptions | undefined): HTMLUListElement (+2 overloads)\">createElement</data-lsp>(\"ul\");const  <data-lsp lsp=\"module apple\nconst apple: HTMLLIElement\">apple</data-lsp>  =  <data-lsp lsp=\"var document: Document\">document</data-lsp>.<data-lsp lsp=\"(method) Document.createElement<&quot;li&quot;>(tagName: &quot;li&quot;, options?: ElementCreationOptions | undefined): HTMLLIElement (+2 overloads)\">createElement</data-lsp>(\"li\");<data-lsp lsp=\"module apple\nconst apple: HTMLLIElement\">apple</data-lsp>.<data-lsp lsp=\"(property) HTMLElement.innerText: string\">innerText</data-lsp> =  \"\u30ea\u30f3\u30b4\";<data-lsp lsp=\"const list: HTMLUListElement\">list</data-lsp>.<data-lsp lsp=\"(method) ParentNode.append(...nodes: (string | Node)[]): void\">append</data-lsp>(<data-lsp lsp=\"module apple\nconst apple: HTMLLIElement\">apple</data-lsp>);const  <data-lsp lsp=\"module orange\nconst orange: HTMLLIElement\">orange</data-lsp>  =  <data-lsp lsp=\"var document: Document\">document</data-lsp>.<data-lsp lsp=\"(method) Document.createElement<&quot;li&quot;>(tagName: &quot;li&quot;, options?: ElementCreationOptions | undefined): HTMLLIElement (+2 overloads)\">createElement</data-lsp>(\"li\");<data-lsp lsp=\"module orange\nconst orange: HTMLLIElement\">orange</data-lsp>.<data-lsp lsp=\"(property) HTMLElement.innerText: string\">innerText</data-lsp> =  \"\u30aa\u30ec\u30f3\u30b8\";<data-lsp lsp=\"const list: HTMLUListElement\">list</data-lsp>.<data-lsp lsp=\"(method) ParentNode.append(...nodes: (string | Node)[]): void\">append</data-lsp>(<data-lsp lsp=\"module orange\nconst orange: HTMLLIElement\">orange</data-lsp>);const  <data-lsp lsp=\"module grape\nconst grape: HTMLLIElement\">grape</data-lsp>  =  <data-lsp lsp=\"var document: Document\">document</data-lsp>.<data-lsp lsp=\"(method) Document.createElement<&quot;li&quot;>(tagName: &quot;li&quot;, options?: ElementCreationOptions | undefined): HTMLLIElement (+2 overloads)\">createElement</data-lsp>(\"li\");<data-lsp lsp=\"module grape\nconst grape: HTMLLIElement\">grape</data-lsp>.<data-lsp lsp=\"(property) HTMLElement.innerText: string\">innerText</data-lsp> =  \"\u3076\u3069\u3046\";<data-lsp lsp=\"const list: HTMLUListElement\">list</data-lsp>.<data-lsp lsp=\"(method) ParentNode.append(...nodes: (string | Node)[]): void\">append</data-lsp>(<data-lsp lsp=\"module grape\nconst grape: HTMLLIElement\">grape</data-lsp>);`\n```", "```\njs`const  <data-lsp lsp=\"const list: HTMLUListElement\">list</data-lsp>  =  <data-lsp lsp=\"var document: Document\">document</data-lsp>.<data-lsp lsp=\"(method) Document.createElement<&quot;ul&quot;>(tagName: &quot;ul&quot;, options?: ElementCreationOptions | undefined): HTMLUListElement (+2 overloads)\">createElement</data-lsp>(\"ul\");const  <data-lsp lsp=\"module apple\nconst apple: HTMLLIElement\">apple</data-lsp>  =  <data-lsp lsp=\"var document: Document\">document</data-lsp>.<data-lsp lsp=\"(method) Document.createElement<&quot;li&quot;>(tagName: &quot;li&quot;, options?: ElementCreationOptions | undefined): HTMLLIElement (+2 overloads)\">createElement</data-lsp>(\"li\");<data-lsp lsp=\"module apple\nconst apple: HTMLLIElement\">apple</data-lsp>.<data-lsp lsp=\"(property) HTMLElement.innerText: string\">innerText</data-lsp> =  \"\u30ea\u30f3\u30b4\";<data-lsp lsp=\"const list: HTMLUListElement\">list</data-lsp>.<data-lsp lsp=\"(method) ParentNode.append(...nodes: (string | Node)[]): void\">append</data-lsp>(<data-lsp lsp=\"module apple\nconst apple: HTMLLIElement\">apple</data-lsp>);const  <data-lsp lsp=\"module orange\nconst orange: HTMLLIElement\">orange</data-lsp>  =  <data-lsp lsp=\"var document: Document\">document</data-lsp>.<data-lsp lsp=\"(method) Document.createElement<&quot;li&quot;>(tagName: &quot;li&quot;, options?: ElementCreationOptions | undefined): HTMLLIElement (+2 overloads)\">createElement</data-lsp>(\"li\");<data-lsp lsp=\"module orange\nconst orange: HTMLLIElement\">orange</data-lsp>.<data-lsp lsp=\"(property) HTMLElement.innerText: string\">innerText</data-lsp> =  \"\u30aa\u30ec\u30f3\u30b8\";<data-lsp lsp=\"const list: HTMLUListElement\">list</data-lsp>.<data-lsp lsp=\"(method) ParentNode.append(...nodes: (string | Node)[]): void\">append</data-lsp>(<data-lsp lsp=\"module orange\nconst orange: HTMLLIElement\">orange</data-lsp>);const  <data-lsp lsp=\"module grape\nconst grape: HTMLLIElement\">grape</data-lsp>  =  <data-lsp lsp=\"var document: Document\">document</data-lsp>.<data-lsp lsp=\"(method) Document.createElement<&quot;li&quot;>(tagName: &quot;li&quot;, options?: ElementCreationOptions | undefined): HTMLLIElement (+2 overloads)\">createElement</data-lsp>(\"li\");<data-lsp lsp=\"module grape\nconst grape: HTMLLIElement\">grape</data-lsp>.<data-lsp lsp=\"(property) HTMLElement.innerText: string\">innerText</data-lsp> =  \"\u3076\u3069\u3046\";<data-lsp lsp=\"const list: HTMLUListElement\">list</data-lsp>.<data-lsp lsp=\"(method) ParentNode.append(...nodes: (string | Node)[]): void\">append</data-lsp>(<data-lsp lsp=\"module grape\nconst grape: HTMLLIElement\">grape</data-lsp>);`\n```", "```\njs`function  <data-lsp lsp=\"function Fruits(): any\">Fruits</data-lsp>() {  return ( <<data-lsp lsp=\"any\">ul</data-lsp>> <<data-lsp lsp=\"any\">li</data-lsp>>\u30ea\u30f3\u30b4</<data-lsp lsp=\"any\">li</data-lsp>> <<data-lsp lsp=\"any\">li</data-lsp>>\u30aa\u30ec\u30f3\u30b8</<data-lsp lsp=\"any\">li</data-lsp>> <<data-lsp lsp=\"any\">li</data-lsp>>\u3076\u3069\u3046</<data-lsp lsp=\"any\">li</data-lsp>> </<data-lsp lsp=\"any\">ul</data-lsp>> );}`\n```", "```\njs`function <data-lsp lsp=\"function Fruits(): any\">Fruits</data-lsp>() {  return ( <<data-lsp lsp=\"any\">ul</data-lsp>> <<data-lsp lsp=\"any\">li</data-lsp>>\u30ea\u30f3\u30b4</<data-lsp lsp=\"any\">li</data-lsp>> <<data-lsp lsp=\"any\">li</data-lsp>>\u30aa\u30ec\u30f3\u30b8</<data-lsp lsp=\"any\">li</data-lsp>> <<data-lsp lsp=\"any\">li</data-lsp>>\u3076\u3069\u3046</<data-lsp lsp=\"any\">li</data-lsp>> </<data-lsp lsp=\"any\">ul</data-lsp>> );}`\n```", "```\nsh`npm install -g yarn`\n```", "```\nsh`npm install -g yarn`\n```", "```\nsh`yarn create react-app like-button --template typescript`\n```", "```\nsh`yarn create react-app like-button --template typescript`\n```", "```\nsh`cd ./like-button`\n```", "```\nsh`cd ./like-button`\n```", "```\n\u751f\u6210\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210text`.\u251c\u2500\u2500 .gitignore\u251c\u2500\u2500 README.md\u251c\u2500\u2500 package.json\u251c\u2500\u2500 public\u2502   \u251c\u2500\u2500 favicon.ico\u2502   \u251c\u2500\u2500 index.html\u2502   \u251c\u2500\u2500 logo192.png\u2502   \u251c\u2500\u2500 logo512.png\u2502   \u251c\u2500\u2500 manifest.json\u2502   \u2514\u2500\u2500 robots.txt\u251c\u2500\u2500 src\u2502   \u251c\u2500\u2500 App.css\u2502   \u251c\u2500\u2500 App.test.tsx\u2502   \u251c\u2500\u2500 App.tsx\u2502   \u251c\u2500\u2500 index.css\u2502   \u251c\u2500\u2500 index.tsx\u2502   \u251c\u2500\u2500 logo.svg\u2502   \u251c\u2500\u2500 react-app-env.d.ts\u2502   \u251c\u2500\u2500 reportWebVitals.ts\u2502   \u2514\u2500\u2500 setupTests.ts\u251c\u2500\u2500 tsconfig.json\u2514\u2500\u2500 yarn.lock`\n```", "```\n\u751f\u6210\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210text`.\u251c\u2500\u2500 .gitignore\u251c\u2500\u2500 README.md\u251c\u2500\u2500 package.json\u251c\u2500\u2500 public\u2502   \u251c\u2500\u2500 favicon.ico\u2502   \u251c\u2500\u2500 index.html\u2502   \u251c\u2500\u2500 logo192.png\u2502   \u251c\u2500\u2500 logo512.png\u2502   \u251c\u2500\u2500 manifest.json\u2502   \u2514\u2500\u2500 robots.txt\u251c\u2500\u2500 src\u2502   \u251c\u2500\u2500 App.css\u2502   \u251c\u2500\u2500 App.test.tsx\u2502   \u251c\u2500\u2500 App.tsx\u2502   \u251c\u2500\u2500 index.css\u2502   \u251c\u2500\u2500 index.tsx\u2502   \u251c\u2500\u2500 logo.svg\u2502   \u251c\u2500\u2500 react-app-env.d.ts\u2502   \u251c\u2500\u2500 reportWebVitals.ts\u2502   \u2514\u2500\u2500 setupTests.ts\u251c\u2500\u2500 tsconfig.json\u2514\u2500\u2500 yarn.lock`\n```", "```\nsh`yarn list react`\n```", "```\nsh`yarn list react`\n```", "```\nyarn list react\u306e\u5b9f\u884c\u7d50\u679ctext`yarn list v1.22.19\u2514\u2500 react@18.2.0`\n```", "```\nyarn list react\u306e\u5b9f\u884c\u7d50\u679ctext`yarn list v1.22.19\u2514\u2500 react@18.2.0`\n```", "```\nsh`yarn start`\n```", "```\nsh`yarn start`\n```", "```\nApp.tsxtsx`import <data-lsp lsp=\"(alias) namespace React\nimport React\">React</data-lsp> from  \"react\";import  \"./App.css\";function  <data-lsp lsp=\"function App(): React.JSX.Element\">App</data-lsp>() {  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>  <data-lsp lsp=\"(property) React.HTMLAttributes<HTMLDivElement>.className?: string | undefined\">className</data-lsp>=\"App\"> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>\">header</data-lsp>  <data-lsp lsp=\"(property) React.HTMLAttributes<T>.className?: string | undefined\">className</data-lsp>=\"App-header\">TypeScript\u306f\u3044\u3044\u305e</<data-lsp lsp=\"(property) JSX.IntrinsicElements.header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>\">header</data-lsp>> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> );}export  default <data-lsp lsp=\"function App(): React.JSX.Element\">App</data-lsp>;`\n```", "```\nApp.tsxtsx`import <data-lsp lsp=\"(alias) namespace React\nimport React\">React</data-lsp> from  \"react\";import  \"./App.css\";function <data-lsp lsp=\"function App(): React.JSX.Element\">App</data-lsp>() {  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp> <data-lsp lsp=\"(property) React.HTMLAttributes<HTMLDivElement>.className?: string | undefined\">className</data-lsp>=\"App\"> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>\">header</data-lsp> <data-lsp lsp=\"(property) React.HTMLAttributes<T>.className?: string | undefined\">className</data-lsp>=\"App-header\">TypeScript\u306f\u3044\u3044\u305e</<data-lsp lsp=\"(property) JSX.IntrinsicElements.header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>\">header</data-lsp>> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> );}export  default <data-lsp lsp=\"function App(): React.JSX.Element\">App</data-lsp>;`\n```", "```\nApp.tsxtsx`import <data-lsp lsp=\"(alias) namespace React\nimport React\">React</data-lsp> from  \"react\";import  \"./App.css\";function  <data-lsp lsp=\"function App(): React.JSX.Element\">App</data-lsp>() {  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>  <data-lsp lsp=\"(property) React.HTMLAttributes<HTMLDivElement>.className?: string | undefined\">className</data-lsp>=\"App\"> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>\">header</data-lsp>  <data-lsp lsp=\"(property) React.HTMLAttributes<T>.className?: string | undefined\">className</data-lsp>=\"App-header\"> <<data-lsp lsp=\"function LikeButton(): React.JSX.Element\">LikeButton</data-lsp> /> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>\">header</data-lsp>> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> );}function  <data-lsp lsp=\"function LikeButton(): React.JSX.Element\">LikeButton</data-lsp>() {  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>>\u3044\u3044\u306d\u30dc\u30bf\u30f3\u4e88\u5b9a\u5730</<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>>;}export  default <data-lsp lsp=\"function App(): React.JSX.Element\">App</data-lsp>;`\n```", "```\nApp.tsxtsx`import <data-lsp lsp=\"(alias) namespace React\nimport React\">React</data-lsp> from  \"react\";import  \"./App.css\";function <data-lsp lsp=\"function App(): React.JSX.Element\">App</data-lsp>() {  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp> <data-lsp lsp=\"(property) React.HTMLAttributes<HTMLDivElement>.className?: string | undefined\">className</data-lsp>=\"App\"> <<data-lsp lsp=\"(property) JSX.IntrinsicElements.header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>\">header</data-lsp> <data-lsp lsp=\"(property) React.HTMLAttributes<T>.className?: string | undefined\">className</data-lsp>=\"App-header\"> <<data-lsp lsp=\"function LikeButton(): React.JSX.Element\">LikeButton</data-lsp> /> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>\">header</data-lsp>> </<data-lsp lsp=\"(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\">div</data-lsp>> );}function <data-lsp lsp=\"function LikeButton(): React.JSX.Element\">LikeButton</data-lsp>() {  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>>\u3044\u3044\u306d\u30dc\u30bf\u30f3\u4e88\u5b9a\u5730</<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>>;}export  default <data-lsp lsp=\"function App(): React.JSX.Element\">App</data-lsp>;`\n```", "```\nApp.tsxtsx`function  <data-lsp lsp=\"function LikeButton(): React.JSX.Element\">LikeButton</data-lsp>() {  const  <data-lsp lsp=\"const count: 999\">count</data-lsp>  =  999;  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>>\u2665 {<data-lsp lsp=\"const count: 999\">count</data-lsp>}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>>;}`\n```", "```\nApp.tsxtsx`function <data-lsp lsp=\"function LikeButton(): React.JSX.Element\">LikeButton</data-lsp>() {  const  <data-lsp lsp=\"const count: 999\">count</data-lsp>  =  999;  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>>\u2665 {<data-lsp lsp=\"const count: 999\">count</data-lsp>}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>>;}`\n```", "```\nApp.tsxtsx`function  <data-lsp lsp=\"function LikeButton(): React.JSX.Element\">LikeButton</data-lsp>() {  const  <data-lsp lsp=\"const count: 999\">count</data-lsp>  =  999;  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>  <data-lsp lsp=\"(property) React.HTMLAttributes<HTMLSpanElement>.className?: string | undefined\">className</data-lsp>=\"likeButton\">\u2665 {<data-lsp lsp=\"const count: 999\">count</data-lsp>}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>>;}`\n```", "```\nApp.tsxtsx`function <data-lsp lsp=\"function LikeButton(): React.JSX.Element\">LikeButton</data-lsp>() {  const  <data-lsp lsp=\"const count: 999\">count</data-lsp>  =  999;  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp> <data-lsp lsp=\"(property) React.HTMLAttributes<HTMLSpanElement>.className?: string | undefined\">className</data-lsp>=\"likeButton\">\u2665 {<data-lsp lsp=\"const count: 999\">count</data-lsp>}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>>;}`\n```", "```\nApp.csscss`.likeButton {  background-color:  rgb(231, 76, 60);  color:  white;  padding:  0.8rem;  border-radius:  0.4rem;  cursor:  pointer;}`\n```", "```\nApp.csscss`.likeButton {  background-color: rgb(231, 76, 60);  color:  white;  padding:  0.8rem;  border-radius:  0.4rem;  cursor:  pointer;}`\n```", "```\nApp.tsxtsx`import <data-lsp lsp=\"(alias) namespace React\nimport React\">React</data-lsp> from  \"react\";import  \"./App.css\"; // \u3053\u306e\u884c\u304c\u3042\u308b\u304b\u78ba\u8a8d\u3059\u308bfunction  <data-lsp lsp=\"function App(): void\">App</data-lsp>() {  // ...}`\n```", "```\nApp.tsxtsx`import <data-lsp lsp=\"(alias) namespace React\nimport React\">React</data-lsp> from  \"react\";import  \"./App.css\"; // \u3053\u306e\u884c\u304c\u3042\u308b\u304b\u78ba\u8a8d\u3059\u308bfunction <data-lsp lsp=\"function App(): void\">App</data-lsp>() {  // ...}`\n```", "```\nApp.tsxtsx`import <data-lsp lsp=\"(alias) namespace React\nimport React\">React</data-lsp>, { <data-lsp lsp=\"(alias) function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>] (+1 overload)\nimport useState\">useState</data-lsp> } from  \"react\";//          ^^^^^^^^^^^^^^\u3053\u3053\u3082\u8ffd\u52a0/* ... */function  <data-lsp lsp=\"function LikeButton(): React.JSX.Element\">LikeButton</data-lsp>() {  const [<data-lsp lsp=\"const count: number\">count</data-lsp>,  <data-lsp lsp=\"const setCount: React.Dispatch<React.SetStateAction<number>>\">setCount</data-lsp>] =  <data-lsp lsp=\"(alias) useState<number>(initialState: number | (() => number)): [number, React.Dispatch<React.SetStateAction<number>>] (+1 overload)\nimport useState\">useState</data-lsp>(999); // \u3053\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>  <data-lsp lsp=\"(property) React.HTMLAttributes<HTMLSpanElement>.className?: string | undefined\">className</data-lsp>=\"likeButton\">\u2665 {<data-lsp lsp=\"const count: number\">count</data-lsp>}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>>;}`\n```", "```\nApp.tsxtsx`import <data-lsp lsp=\"(alias) namespace React\nimport React\">React</data-lsp>, { <data-lsp lsp=\"(alias) function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>] (+1 overload)\nimport useState\">useState</data-lsp> } from  \"react\";//          ^^^^^^^^^^^^^^\u3053\u3053\u3082\u8ffd\u52a0/* ... */function <data-lsp lsp=\"function LikeButton(): React.JSX.Element\">LikeButton</data-lsp>() {  const [<data-lsp lsp=\"const count: number\">count</data-lsp>,  <data-lsp lsp=\"const setCount: React.Dispatch<React.SetStateAction<number>>\">setCount</data-lsp>] = <data-lsp lsp=\"(alias) useState<number>(initialState: number | (() => number)): [number, React.Dispatch<React.SetStateAction<number>>] (+1 overload)\nimport useState\">useState</data-lsp>(999); // \u3053\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b  return <<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp> <data-lsp lsp=\"(property) React.HTMLAttributes<HTMLSpanElement>.className?: string | undefined\">className</data-lsp>=\"likeButton\">\u2665 {<data-lsp lsp=\"const count: number\">count</data-lsp>}</<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>>;}`\n```", "```\nApp.tsxtsx`function  <data-lsp lsp=\"function LikeButton(): React.JSX.Element\">LikeButton</data-lsp>() {  const [<data-lsp lsp=\"const count: number\">count</data-lsp>,  <data-lsp lsp=\"const setCount: React.Dispatch<React.SetStateAction<number>>\">setCount</data-lsp>] =  <data-lsp lsp=\"(alias) useState<number>(initialState: number | (() => number)): [number, React.Dispatch<React.SetStateAction<number>>] (+1 overload)\nimport useState\">useState</data-lsp>(999);  const  <data-lsp lsp=\"const handleClick: () => void\">handleClick</data-lsp>  = () => {  <data-lsp lsp=\"const setCount: (value: React.SetStateAction<number>) => void\">setCount</data-lsp>(<data-lsp lsp=\"const count: number\">count</data-lsp> +  1); };  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>  <data-lsp lsp=\"(property) React.HTMLAttributes<HTMLSpanElement>.className?: string | undefined\">className</data-lsp>=\"likeButton\"  <data-lsp lsp=\"(property) React.DOMAttributes<HTMLSpanElement>.onClick?: React.MouseEventHandler<HTMLSpanElement> | undefined\">onClick</data-lsp>={<data-lsp lsp=\"const handleClick: () => void\">handleClick</data-lsp>}> \u2665 {<data-lsp lsp=\"const count: number\">count</data-lsp>} </<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>> );}`\n```", "```\nApp.tsxtsx`function <data-lsp lsp=\"function LikeButton(): React.JSX.Element\">LikeButton</data-lsp>() {  const [<data-lsp lsp=\"const count: number\">count</data-lsp>,  <data-lsp lsp=\"const setCount: React.Dispatch<React.SetStateAction<number>>\">setCount</data-lsp>] = <data-lsp lsp=\"(alias) useState<number>(initialState: number | (() => number)): [number, React.Dispatch<React.SetStateAction<number>>] (+1 overload)\nimport useState\">useState</data-lsp>(999);  const <data-lsp lsp=\"const handleClick: () => void\">handleClick</data-lsp> = () => { <data-lsp lsp=\"const setCount: (value: React.SetStateAction<number>) => void\">setCount</data-lsp>(<data-lsp lsp=\"const count: number\">count</data-lsp> +  1); };  return ( <<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp> <data-lsp lsp=\"(property) React.HTMLAttributes<HTMLSpanElement>.className?: string | undefined\">className</data-lsp>=\"likeButton\" <data-lsp lsp=\"(property) React.DOMAttributes<HTMLSpanElement>.onClick?: React.MouseEventHandler<HTMLSpanElement> | undefined\">onClick</data-lsp>={<data-lsp lsp=\"const handleClick: () => void\">handleClick</data-lsp>}> \u2665 {<data-lsp lsp=\"const count: number\">count</data-lsp>} </<data-lsp lsp=\"(property) JSX.IntrinsicElements.span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\">span</data-lsp>> );}`\n```"]