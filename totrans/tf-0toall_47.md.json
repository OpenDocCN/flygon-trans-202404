["```\n# Lab 12 Character Sequence RNN\nimport tensorflow as tf\nimport numpy as np\ntf.set_random_seed(777)  # reproducibility\n\nsample = \" if you want you\"\nidx2char = list(set(sample))  # index -> char\nchar2idx = {c: i for i, c in enumerate(idx2char)}  # char -> idex\n\n# hyper parameters\ndic_size = len(char2idx)  # RNN input size (one hot size)\nhidden_size = len(char2idx)  # RNN output size\nnum_classes = len(char2idx)  # final output size (RNN or softmax, etc.)\nbatch_size = 1  # one sample data, one batch\nsequence_length = len(sample) - 1  # number of lstm rollings (unit #)\nlearning_rate = 0.1\n\nsample_idx = [char2idx[c] for c in sample]  # char to index\nx_data = [sample_idx[:-1]]  # X data sample (0 ~ n-1) hello: hell\ny_data = [sample_idx[1:]]   # Y label sample (1 ~ n) hello: ello\n\nX = tf.placeholder(tf.int32, [None, sequence_length])  # X data\nY = tf.placeholder(tf.int32, [None, sequence_length])  # Y label\n\nx_one_hot = tf.one_hot(X, num_classes)  # one hot: 1 -> 0 1 0 0 0 0 0 0 0 0\ncell = tf.contrib.rnn.BasicLSTMCell(\n    num_units=hidden_size, state_is_tuple=True)\ninitial_state = cell.zero_state(batch_size, tf.float32)\noutputs, _states = tf.nn.dynamic_rnn(\n    cell, x_one_hot, initial_state=initial_state, dtype=tf.float32)\n\n# FC layer\nX_for_fc = tf.reshape(outputs, [-1, hidden_size])\noutputs = tf.contrib.layers.fully_connected(X_for_fc, num_classes, activation_fn=None)\n\n# reshape out for sequence_loss\noutputs = tf.reshape(outputs, [batch_size, sequence_length, num_classes])\n\nweights = tf.ones([batch_size, sequence_length])\nsequence_loss = tf.contrib.seq2seq.sequence_loss(\n    logits=outputs, targets=Y, weights=weights)\nloss = tf.reduce_mean(sequence_loss)\ntrain = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(loss)\n\nprediction = tf.argmax(outputs, axis=2)\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    for i in range(50):\n        l, _ = sess.run([loss, train], feed_dict={X: x_data, Y: y_data})\n        result = sess.run(prediction, feed_dict={X: x_data})\n\n        # print char using dic\n        result_str = [idx2char[c] for c in np.squeeze(result)]\n\n        print(i, \"loss:\", l, \"Prediction:\", ''.join(result_str))\n\n'''\n0 loss: 2.35377 Prediction: uuuuuuuuuuuuuuu\n1 loss: 2.21383 Prediction: yy you y    you\n2 loss: 2.04317 Prediction: yy yoo       ou\n3 loss: 1.85869 Prediction: yy  ou      uou\n4 loss: 1.65096 Prediction: yy you  a   you\n5 loss: 1.40243 Prediction: yy you yan  you\n6 loss: 1.12986 Prediction: yy you wann you\n7 loss: 0.907699 Prediction: yy you want you\n8 loss: 0.687401 Prediction: yf you want you\n9 loss: 0.508868 Prediction: yf you want you\n10 loss: 0.379423 Prediction: yf you want you\n11 loss: 0.282956 Prediction: if you want you\n12 loss: 0.208561 Prediction: if you want you\n\n...\n\n''' \n```"]