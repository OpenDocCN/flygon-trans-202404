["```\n//action type\nconst ADD_TODO = 'ADD_TODO';\n\n//action creator, semantic methods that create actions\n//collected together in a module to become an API\nfunction addTodoAction(title, hour) {\n  //action, an object with a type property and new data, like events\n  return {type: ADD_TODO, title, hour}\n} \n```", "```\n//a function that accepts an accumulation and a value and returns a new accumulation.\nfunction todoReducers(state = [], action) {\n  switch (action.type) {\n    case ADD_TODO:\n      //always return a new state, never mutate old state\n      return [\n        {\n          id: Utils.GUID(),\n          title: action.title,\n          endTime: getEndTime(action.hour),\n          completed: false\n        },\n        ...state\n      ]\n    default:\n      //return default state\n      return state\n  }\n} \n```", "```\nimport { createStore } from 'redux';\n//1\\. define store\nlet store = createStore(todoReducers);\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {todos: []};\n  }\n  componentDidMount(){\n    //2\\. subscribe store\n    this.unsubscribeStore = store.subscribe(() =>{\n      //3\\. getState\n      this.setState({todos: store.getState()});\n    });\n  }\n  componentWillUnmount(){\n    //5\\. unsubscribe store\n    this.unsubscribeStore();\n  }\n  renderTodoList = ()=>{\n    //reder todo list\n    return this.state.todos.map( (todo)=> {\n      return <Text key={todo.id}>Todo: {todo.title}</Text>\n    });\n  }\n  handleAddTodo = ()=>{\n    //4\\. dispatching actions\n    store.dispatch( addTodoAction('Create a new todo', 8) );\n  }\n  render() {\n    return (\n      <View>\n        <TouchableHighlight onPress={this.handleAddTodo}>\n          <Text>Add Todo</Text>\n        </TouchableHighlight>\n        <ScrollView>{this.renderTodoList()}</ScrollView>\n      </View>\n    );\n  }\n} \n```", "```\nimport * as  navigationActions from './navigation';\nimport * as  todosActions from './todos';\n\nexport default {...navigationActions, ...todosActions}; \n```", "```\nimport { combineReducers } from 'redux';\nimport navigation from './navigation';\nimport todos from './todos';\n\nconst rootReducer = combineReducers({\n  navigation, todos\n});\n\nexport default rootReducer; \n```", "```\nimport { createStore } from 'redux';\nimport reducers from '../reducers';\n\nexport default function configureStore() {\n  const store = createStore(reducers);\n  return store;\n} \n```", "```\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n  renderTodoList = ()=>{\n    //reder todo list\n    return this.props.todos.map( (todo)=> {\n      return <Text key={todo.id}>Todo: {todo.title}</Text>\n    });\n  }\n  handleAddTodo = ()=>{\n    this.props.actions.addTodoAction('Create a new todo', 8);\n  }\n  render() {\n    return (\n      <View>\n        <TouchableHighlight onPress={this.handleAddTodo}>\n          <Text>Add Todo</Text>\n        </TouchableHighlight>\n        <ScrollView>{this.renderTodoList()}</ScrollView>\n      </View>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    todos: state.todos\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(Actions, dispatch)\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App); \n```", "```\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\n\nimport App from './containers/App';\nimport configureStore from './store/configureStore';\n\nclass Root extends Component {\n  render() {\n    return (\n      <Provider store={configureStore()}>\n        <App />\n      </Provider>\n    );\n  }\n}\n\nexport default Root; \n```", "```\nimport {\n  Header,\n  Main,\n} from '../components/home-view';\nimport Actions from '../actions';\n\nclass HomeView extends Component {\n  render() {\n    return (\n      <View>\n        <Header {...this.props}/>\n        <Main {...this.props} isVisible={this.state.isVisible}/>\n      </View>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    todos: state.todos\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(Actions, dispatch)\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HomeView); \n```", "```\nsrc/containers/ModuleNameView.js \n```", "```\nsrc/components/module-name-view\n - index.js\n - Main.js\n - Header.js\n - ...\n - img\n   - icon@2x.png\n   - icon@3x.png \n```", "```\nhandleEventName = ()=>{//todo}\n...\n<MyComponent onEventName={this.handleEventName}/> \n```", "```\n renderMethodName = () => {\n   //todo\n  }\n  render() {\n    return (\n      <View>\n        {this.renderMethodName()}\n      </View>\n    );\n  }\n` \n```", "```\nfunction mapStateToProps(state) {\n  return {\n    todos: state.todos\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(Actions, dispatch)\n  }\n} \n```", "```\nindex.js\ntodos.js\nnavigation.js \n```", "```\nexport const SWITCH_MAIN_TAB = 'SWITCH_MAIN_TAB'; \n```", "```src/actions/todos.js```", "```\nimport * as types from '../constants/ActionTypes'\n\nexport function addTodo(title, hour) {\n  return {type: types.ADD_TODO, title, hour}\n} \n```", "```\nindex.js\ntodos.js\nnavigation.js \n```", "```\nimport { ADD_TODO, DELETE_TODO, EDIT_TODO, COMPLETE_TODO } from '../constants/ActionTypes'\nconst initialState = []\n\nexport default function todos(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO:\n      //todo\n    default:\n      return state\n  }\n} \n```", "```\nindex.js\nBasic.js\nTheme.js \n```", "```\nimport { StyleSheet, Dimensions } from 'react-native';\nlet winSize = Dimensions.get('window');\nconst Basic = StyleSheet.create({\n  text: {\n    fontSize: 32/winSize.scale\n  }\n});\nexport default Basic; \n```", "```\n//colors\nconst color = {\n  green: '#00551e',\n  brown: '#693504',\n  red: '#db2828'\n}\n\n//other\nconst active = {\n  opacity: 0.6\n}\n\nexport default {color, active} \n```"]