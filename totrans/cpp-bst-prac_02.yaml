- en: Use the Tools Available
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use The Tools Available
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An automated framework for executing these tools should be established very
    early in the development process. It should not take more than 2-3 commands to
    checkout the source code, build, and execute the tests. Once the tests are done
    executing, you should have an almost complete picture of the state and quality
    of the code.
  prefs: []
  type: TYPE_NORMAL
- en: Source Control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Source control is an absolute necessity for any software development project.
    If you are not using one yet, start using one.
  prefs: []
  type: TYPE_NORMAL
- en: '[GitHub](https://github.com/) - allows for unlimited public repositories, must
    pay for a private repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bitbucket](https://bitbucket.org/) - allows for unlimited private repositories
    with up to 5 collaborators, for free.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SourceForge](http://sourceforge.net/) - open source hosting only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitLab](https://gitlab.com/) - allows for unlimited public and private repositories,
    unlimited CI Runners included, for free.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Visual Studio Online](https://visualstudio.com) ([http://www.visualstudio.com/what-is-visual-studio-online-vs](http://www.visualstudio.com/what-is-visual-studio-online-vs))
    - allows for unlimited public repositories, must pay for private repository. Repositories
    can be git or TFVC. Additionally: Issue tracking, project planning (multiple Agile
    templates, such as SCRUM), integrated hosted builds, integration of all this into
    Microsoft Visual Studio. Windows only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build Tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use an industry standard widely accepted build tool. This prevents you from
    reinventing the wheel whenever you discover / link to a new library / package
    your product / etc. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[CMake](http://www.cmake.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider: [https://github.com/sakra/cotire/](https://github.com/sakra/cotire/)
    for build performance'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider: [https://github.com/toeb/cmakepp](https://github.com/toeb/cmakepp)
    for enhanced usability'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Utilize: [https://cmake.org/cmake/help/v3.6/command/target_compile_features.html](https://cmake.org/cmake/help/v3.6/command/target_compile_features.html)
    for C++ standard flags'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conan](https://www.conan.io/) - a crossplatform dependency manager for C++'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[C++ Archive Network (CPPAN)](https://cppan.org/) - a crossplatform dependency
    manager for C++'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Waf](https://waf.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[FASTBuild](http://www.fastbuild.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ninja](https://ninja-build.org/) - can greatly improve the incremental build
    time of your larger projects. Can be used as a target for CMake.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bazel](http://bazel.io/) - Note: MacOS and Linux only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[gyp](https://chromium.googlesource.com/external/gyp/) - Google''s build tool
    for chromium.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[maiken](https://github.com/Dekken/maiken) - Crossplatform build tool with
    Maven-esque configuration style.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Qt Build Suite](http://doc.qt.io/qbs/) - Crossplatform build tool From Qt.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[meson](http://mesonbuild.com/index.html) - Open source build system meant
    to be both extremely fast, and, even more importantly, as user friendly as possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[premake](https://premake.github.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember, it's not just a build tool, it's also a programming language. Try
    to maintain good clean build scripts and follow the recommended practices for
    the tool you are using.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous Integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have picked your build tool, set up a continuous integration environment.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous Integration (CI) tools automatically build the source code as changes
    are pushed to the repository. These can be hosted privately or with a CI host.
  prefs: []
  type: TYPE_NORMAL
- en: '[Travis CI](http://travis-ci.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: works well with C++
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: designed for use with GitHub
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: free for public repositories on GitHub
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AppVeyor](http://www.appveyor.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: supports Windows, MSVC and MinGW
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: free for public repositories on GitHub
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hudson CI](http://hudson-ci.org/) / [Jenkins CI](https://jenkins-ci.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Application Server is required
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: supports Windows, OS X, and Linux
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: extendable with a lot of plugins
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TeamCity](https://www.jetbrains.com/teamcity)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: has a free option for open source projects
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Decent CI](https://github.com/lefticus/decent_ci)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: simple ad-hoc continuous integration that posts results to GitHub
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: supports Windows, OS X, and Linux
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: used by [ChaiScript](http://chaiscript.com/ChaiScript-BuildResults/full_dashboard.html)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Visual Studio Online](https://visualstudio.com) ([http://www.visualstudio.com/what-is-visual-studio-online-vs](http://www.visualstudio.com/what-is-visual-studio-online-vs))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tightly integrated with the source repositories from Visual Studio Online
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses MSBuild (Visual Studio's build engine), which is available on Windows,
    OS X and Linux
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides hosted build agents and also allows for user-provided build agents
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be controlled and monitored from within Microsoft Visual Studio
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On-Premise installation via Microsoft Team Foundation Server
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitLab](https://gitlab.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: use custom Docker images, so can be used for C++
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: has free shared runners
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: has trivial processing of result of coverage analyze
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you have an open source, publicly-hosted project on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: 'go enable Travis Ci and AppVeyor integration right now. We''ll wait for you
    to come back. For a simple example of how to enable it for your C++ CMake-based
    application, see here: [https://github.com/ChaiScript/ChaiScript/blob/master/.travis.yml](https://github.com/ChaiScript/ChaiScript/blob/master/.travis.yml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enable one of the coverage tools listed below (Codecov or Coveralls)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enable [Coverity Scan](https://scan.coverity.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These tools are all free and relatively easy to set up. Once they are set up
    you are getting continuous building, testing, analysis and reporting of your project.
    For free.
  prefs: []
  type: TYPE_NORMAL
- en: Compilers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use every available and reasonable set of warning options. Some warning options
    only work with optimizations enabled, or work better the higher the chosen level
    of optimization is, for example [`-Wnull-dereference`](https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wnull-dereference-367)
    with GCC.
  prefs: []
  type: TYPE_NORMAL
- en: You should use as many compilers as you can for your platform(s). Each compiler
    implements the standard slightly differently and supporting multiple will help
    ensure the most portable, most reliable code.
  prefs: []
  type: TYPE_NORMAL
- en: GCC / Clang
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`-Wall -Wextra -Wshadow -Wnon-virtual-dtor -pedantic`'
  prefs: []
  type: TYPE_NORMAL
- en: '`-Wall -Wextra` reasonable and standard'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wshadow` warn the user if a variable declaration shadows one from a parent
    context'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wnon-virtual-dtor` warn the user if a class with virtual functions has a
    non-virtual destructor. This helps catch hard to track down memory errors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wold-style-cast` warn for c-style casts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wcast-align` warn for potential performance problem casts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wunused` warn on anything being unused'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Woverloaded-virtual` warn if you overload (not override) a virtual function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wpedantic` warn if non-standard C++ is used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wconversion` warn on type conversions that may lose data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wsign-conversion` warn on sign conversions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wmisleading-indentation` warn if identation implies blocks where blocks do
    not exist'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wduplicated-cond` warn if `if` / `else` chain has duplicated conditions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wduplicated-branches` warn if `if` / `else` branches have duplicated code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wlogical-op` warn about logical operations being used where bitwise were
    probably wanted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wnull-dereference` warn if a null dereference is detected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wuseless-cast` warn if you perform a cast to the same type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wdouble-promotion` warn if `float` is implicit promoted to `double`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Wformat=2` warn on security issues around functions that format output (ie
    `printf`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider using `-Weverything` and disabling the few warnings you need to on
    Clang
  prefs: []
  type: TYPE_NORMAL
- en: '`-Weffc++` warning mode can be too noisy, but if it works for your project,
    use it also.'
  prefs: []
  type: TYPE_NORMAL
- en: MSVC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`/W4 /W44640` - use these and consider the following'
  prefs: []
  type: TYPE_NORMAL
- en: '`/W4` All reasonable warnings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14242` ''identfier'': conversion from ''type1'' to ''type1'', possible loss
    of data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14254` ''operator'': conversion from ''type1:field_bits'' to ''type2:field_bits'',
    possible loss of data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14263` ''function'': member function does not override any base class virtual
    member function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14265` ''classname'': class has virtual functions, but destructor is not
    virtual instances of this class may not be destructed correctly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14287` ''operator'': unsigned/negative constant mismatch'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/we4289` nonstandard extension used: ''variable'': loop control variable declared
    in the for-loop is used outside the for-loop scope'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14296` ''operator'': expression is always ''boolean_value'''
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14311` ''variable'': pointer truncation from ''type1'' to ''type2'''
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14545` expression before comma evaluates to a function which is missing
    an argument list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14546` function call before comma missing argument list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14547` ''operator'': operator before comma has no effect; expected operator
    with side-effect'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14549` ''operator'': operator before comma has no effect; did you intend
    ''operator''?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14555` expression has no effect; expected expression with side-effect'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14619` pragma warning: there is no warning number ''number'''
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14640` Enable warning on thread un-safe static member initialization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14826` Conversion from ''type1'' to ''type_2'' is sign-extended. This may
    cause unexpected runtime behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14905` wide string literal cast to ''LPSTR'''
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14906` string literal cast to ''LPWSTR'''
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/w14928` illegal copy-initialization; more than one user-defined conversion
    has been implicitly applied'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not recommended
  prefs: []
  type: TYPE_NORMAL
- en: '`/Wall` - Also warns on files included from the standard library, so it''s
    not very useful and creates too many extra warnings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Start with very strict warning settings from the beginning. Trying to raise
    the warning level after the project is underway can be painful.
  prefs: []
  type: TYPE_NORMAL
- en: Consider using the *treat warnings as errors* setting. `/Wx` with MSVC, `-Werror`
    with GCC / Clang
  prefs: []
  type: TYPE_NORMAL
- en: LLVM-based tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'LLVM based tools work best with a build system (such as cmake) that can output
    a compile command database, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you are not using a build system like that, you can consider [Build EAR](https://github.com/rizsotto/Bear)
    which will hook into your build system and generate a compile command database
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: CMake now also comes with built-in support for calling `clang-tidy` during [normal
    compilation](https://cmake.org/cmake/help/latest/prop_tgt/LANG_CLANG_TIDY.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[include-what-you-use](https://github.com/include-what-you-use), [example results](https://github.com/ChaiScript/ChaiScript/commit/c0bf6ee99dac14a19530179874f6c95255fde173)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[clang-modernize](http://clang.llvm.org/extra/clang-modernize.html), [example
    results](https://github.com/ChaiScript/ChaiScript/commit/6eab8ddfe154a4ebbe956a5165b390ee700fae1b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[clang-check](http://clang.llvm.org/docs/ClangCheck.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[clang-tidy](http://clang.llvm.org/extra/clang-tidy.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static Analyzers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best bet is the static analyzer that you can run as part of your automated
    build system. Cppcheck and clang meet that requirement for free options.
  prefs: []
  type: TYPE_NORMAL
- en: Coverity Scan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Coverity](https://scan.coverity.com/) has a free (for open source) static
    analysis toolkit that can work on every commit in integration with [Travis CI](http://travis-ci.org)
    and [AppVeyor](http://www.appveyor.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: PVS-Studio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PVS-Studio](http://www.viva64.com/en/pvs-studio/) is a tool for bug detection
    in the source code of programs, written in C, C++ and C#. It is free for personal
    academic projects, open source non-commercial projects and independent projects
    of individual developers. It works in Windows and Linux environment.'
  prefs: []
  type: TYPE_NORMAL
- en: Cppcheck
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Cppcheck](http://cppcheck.sourceforge.net/) is free and open source. It strives
    for 0 false positives and does a good job at it. Therefore all warnings should
    be enabled: `--enable=all`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For correct work it requires well formed path for headers, so before usage
    don''t forget to pass: `--check-config`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding unused headers does not work with `-j` more than 1\.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember to add `--force` for code with a lot number of `#ifdef` if you need
    check all of them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clang's Static Analyzer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Clang's analyzer's default options are good for the respective platform. It
    can be used directly [from CMake](http://garykramlich.blogspot.com/2011/10/using-scan-build-from-clang-with-cmake.html).
    They can also be called via clang-check and clang-tidy from the [LLVM-based Tools](#llvm-based-tools).
  prefs: []
  type: TYPE_NORMAL
- en: Also, [CodeChecker](https://github.com/Ericsson/CodeChecker) is available as
    a front-end to clang's static analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '`clang-tidy` can be easily used with Visual Studio via the [Clang Power Tools](https://caphyon.github.io/clang-power-tools/)
    extension.'
  prefs: []
  type: TYPE_NORMAL
- en: MSVC's Static Analyzer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can be enabled with the `/analyze` [command line option](http://msdn.microsoft.com/en-us/library/ms173498.aspx).
    For now we will stick with the default options.
  prefs: []
  type: TYPE_NORMAL
- en: Flint / Flint++
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Flint](https://github.com/facebook/flint) and [Flint++](https://github.com/L2Program/FlintPlusPlus)
    are linters that analyze C++ code against Facebook''s coding standards.'
  prefs: []
  type: TYPE_NORMAL
- en: ReSharper C++ / CLion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both of these tools from [JetBrains](https://www.jetbrains.com/cpp/) offer some
    level of static analysis and automated fixes for common things that can be done
    better. They have options available for free licenses for open source project
    leaders.
  prefs: []
  type: TYPE_NORMAL
- en: Cevelop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Eclipse based [Cevelop](https://www.cevelop.com/) IDE has various static
    analysis and refactoring / code fix tools available. For example, you can replace
    macros with C++ `constexprs`, refactor namespaces (extract/inline `using`, qualify
    name), and refactor your code to C++11's uniform initialization syntax. Cevelop
    is free to use.
  prefs: []
  type: TYPE_NORMAL
- en: Qt Creator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Qt Creator can plug into the clang static analyzer.
  prefs: []
  type: TYPE_NORMAL
- en: Runtime Checkers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Code Coverage Analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A coverage analysis tool shall be run when tests are executed to make sure the
    entire application is being tested. Unfortunately, coverage analysis requires
    that compiler optimizations be disabled. This can result in significantly longer
    test execution times.
  prefs: []
  type: TYPE_NORMAL
- en: '[Codecov](https://codecov.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integrates with Travis CI and AppVeyor
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: free for open source projects
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Coveralls](https://coveralls.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integrates with Travis CI and AppVeyor
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: free for open source projects
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[LCOV](http://ltp.sourceforge.net/coverage/lcov.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: very configurable
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Gcovr](http://gcovr.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[kcov](http://simonkagstrom.github.io/kcov/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integrates with codecov and coveralls
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: performs code coverage reporting without needing special compiler flags, just
    by instrumenting debug symbols.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Valgrind
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Valgrind](http://www.valgrind.org/) is a runtime code analyzer that can detect
    memory leaks, race conditions, and other associated problems. It is supported
    on various Unix platforms.'
  prefs: []
  type: TYPE_NORMAL
- en: Dr Memory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to Valgrind. [http://www.drmemory.org](http://www.drmemory.org)
  prefs: []
  type: TYPE_NORMAL
- en: GCC / Clang Sanitizers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These tools provide many of the same features as Valgrind, but built into the
    compiler. They are easy to use and provide a report of what went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: AddressSanitizer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MemorySanitizer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ThreadSanitizer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UndefinedBehaviorSanitizer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fuzzy Analyzers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your project accepts user defined input, considering running a fuzzy input
    tester.
  prefs: []
  type: TYPE_NORMAL
- en: Both of these tools use coverage reporting to find new code execution paths
    and try to breed novel inputs for your code. They can find crashes, hangs, and
    inputs you didn't know were considered valid.
  prefs: []
  type: TYPE_NORMAL
- en: '[american fuzzy lop](http://lcamtuf.coredump.cx/afl/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[LibFuzzer](http://llvm.org/docs/LibFuzzer.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KLEE](http://klee.github.io/) - Can be used to fuzz individual functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ignoring Warnings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If it is determined by team consensus that the compiler or analyzer is warning
    on something that is either incorrect or unavoidable, the team will disable the
    specific error to as localized part of the code as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to reenable the warning after disabling it for a section of code. You
    do not want your disabled warnings to [leak into other code](http://www.forwardscattering.org/post/48).
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CMake, mentioned above, has a built in framework for executing tests. Make sure
    whatever build system you use has a way to execute tests built in.
  prefs: []
  type: TYPE_NORMAL
- en: To further aid in executing tests, consider a library such as [Google Test](https://github.com/google/googletest),
    [Catch](https://github.com/philsquared/Catch), [CppUTest](https://github.com/cpputest/cpputest)
    or [Boost.Test](http://www.boost.org/doc/libs/release/libs/test/) to help you
    organize the tests.
  prefs: []
  type: TYPE_NORMAL
- en: Unit Tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unit tests are for small chunks of code, individual functions which can be tested
    standalone.
  prefs: []
  type: TYPE_NORMAL
- en: Integration Tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There should be a test enabled for every feature or bug fix that is committed.
    See also [Code Coverage Analysis](#code-coverage-analysis). These are tests that
    are higher level than unit tests. They should still be limited in scope to individual
    features.
  prefs: []
  type: TYPE_NORMAL
- en: Negative Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget to make sure that your error handling is being tested and works
    properly as well. This will become obvious if you aim for 100% code coverage.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: uftrace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[uftrace](https://github.com/namhyung/uftrace) can be used to generating function
    call graphs of a program execution'
  prefs: []
  type: TYPE_NORMAL
- en: rr
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[rr](http://rr-project.org/) is a free (open source) reverse debugger that
    supports C++.'
  prefs: []
  type: TYPE_NORMAL
- en: Other Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metrix++
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Metrix++](http://metrixplusplus.sourceforge.net/) can identify and report
    on the most complex sections of your code. Reducing complex code helps you and
    the compiler understand it better and optimize it better.'
  prefs: []
  type: TYPE_NORMAL
- en: ABI Compliance Checker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[ABI Compliance Checker](http://ispras.linuxbase.org/index.php/ABI_compliance_checker)
    (ACC) can analyze two library versions and generates a detailed compatibility
    report regarding API and C++ ABI changes. This can help a library developer spot
    unintentional breaking changes to ensure backward compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: CNCC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Customizable Naming Convention Checker](https://github.com/mapbox/cncc) can
    report on identifiers in your code that do not follow certain naming conventions.'
  prefs: []
  type: TYPE_NORMAL
- en: ClangFormat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[ClangFormat](http://clang.llvm.org/docs/ClangFormat.html) can check and correct
    code formatting to match organizational conventions automatically. [Multipart
    series](https://engineering.mongodb.com/post/succeeding-with-clangformat-part-1-pitfalls-and-planning/)
    on utilizing clang-format.'
  prefs: []
  type: TYPE_NORMAL
- en: SourceMeter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[SourceMeter](https://www.sourcemeter.com/) offers a free version which provides
    many different metrics for your code and can also call into cppcheck.'
  prefs: []
  type: TYPE_NORMAL
- en: Bloaty McBloatface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Bloaty McBloatface](https://github.com/google/bloaty) is a binary size analyzer/profiler
    for unix-like platforms'
  prefs: []
  type: TYPE_NORMAL
