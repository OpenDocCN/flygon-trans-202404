- en: VerifyCompilerA Verified Compiler for CS 3110
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VerifyCompilerA 用于 CS 3110 的验证编译器
- en: Source Language
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源语言
- en: Arithmetic expressions with constants and addition:    e ::= c | e + eIn OCaml,
    we could represent these with a data type:    type expr =
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 带有常量和加法的算术表达式：e ::= c | e + e 在 OCaml 中，我们可以用数据类型表示这些：类型 expr =
- en: '| Const of int'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '| Const of int'
- en: '| Plus of expr × exprIn Coq, they have a very similar representation:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '| Plus of expr × expr 在 Coq 中，它们有非常相似的表示：'
- en: 'Inductive expr : Type :='
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳 expr：类型 :=
- en: '| Const : nat → expr'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '| Const : nat → expr'
- en: '| Plus : expr → expr → expr.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '| Plus : expr → expr → expr。'
- en: In fact, if we extract that Coq expr to OCaml, we get essentially what we expect.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，如果我们将 Coq 的表达式提取到 OCaml，我们得到的基本上是我们期望的结果。
- en: Extraction expr.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 提取 expr。
- en: (* type expr =
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: (* 类型 expr =
- en: '| Const of nat'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '| Const of nat'
- en: '| Plus of expr * expr'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '| Plus of expr * expr'
- en: '*)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*)'
- en: The one mismatch is that Coq uses nat, whereas in OCaml we'd normally use int.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的不匹配是 Coq 使用自然数，而在 OCaml 中我们通常使用整数。
- en: nat is (theoretically) unbounded and non-negative
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自然数（理论上）是无界的且非负的
- en: int is definitely bounded and can be negative.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: int 明确受限且可为负。
- en: There is a library called Int31 in Coq that provides the equivalent to OCaml's
    31-bit int.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Coq 中有一个名为 Int31 的库，提供了相当于 OCaml 的 31 位整数。
- en: 'Source: Semantics'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语义来源
- en: 'The *dynamic semantics* of expressions is something we can easily implement.
    Here''s a simple interpreter that evaluates expressions:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*动态语义*的表达式是我们可以轻松实现的东西。以下是一个评估表达式的简单解释器：'
- en: 'Fixpoint evalExpr (e : expr) : nat :='
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '递归定义 evalExpr 函数 (e : expr)：自然数 :='
- en: match e with
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配表达式 e：
- en: '| Const n ⇒ n'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '| Const n ⇒ n'
- en: '| Plus e1 e2 ⇒ plus (evalExpr e1) (evalExpr e2)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '| Plus e1 e2 ⇒ 加法 (evalExpr e1) (evalExpr e2)'
- en: end.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: end。
- en: 'Again, this extracts to OCaml as we would expect:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这与我们预期的方式在 OCaml 中提取：
- en: Extraction evalExpr.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 提取 evalExpr。
- en: (*
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: (*
- en: let rec evalExpr = function
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 递归定义 evalExpr 函数：
- en: '| Const n -> n'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '| Const n -> n'
- en: '| Plus (e1, e2) -> plus (evalExpr e1) (evalExpr e2)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '| Plus (e1，e2) -> 加法 (evalExpr e1) (evalExpr e2)'
- en: '*)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*)'
- en: 'Source: Unit tests of semantics'
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语义的单元测试来源
- en: 'Here are a couple test cases for our interpreter:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们解释器的几个测试用例：
- en: 'Example source_test_1 : evalExpr (Const 42) = 42.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '例子 source_test_1: evalExpr (Const 42) = 42。'
- en: Proof. reflexivity. Qed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。反射性。Qed。
- en: 'Example source_test_2 : evalExpr (Plus (Const 2) (Const 2)) = 4.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '例子 source_test_2: evalExpr (Plus (Const 2) (Const 2)) = 4。'
- en: Proof. reflexivity. Qed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。反射性。Qed。
- en: Target Language
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标语言
- en: One of the primary tasks of a *compiler* is to translate from a *high-level
    language* to a *low-level language*. For example,
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*编译器* 的主要任务之一是将 *高级语言* 转换为 *低级语言*。例如，'
- en: The Java compiler translates from Java to JVM bytecode.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 编译器将 Java 代码转换为 JVM 字节码。
- en: The OCaml compiler translates from OCaml to Zinc machine bytecode. [http://cadmium.x9c.fr/distrib/caml-instructions.pdf]
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OCaml 编译器将 OCaml 代码转换为 Zinc 机器字节码。[http://cadmium.x9c.fr/distrib/caml-instructions.pdf]
- en: Both compilers can additionally produce *native* code that runs on a particular
    machine architecture.JVM and OCaml bytecode are both based on a *stack machine*
    model, in which a stack is used as the main data structure, rather than a set
    of registers.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 两个编译器都可以额外生成在特定机器架构上运行的 *本机* 代码。JVM 和 OCaml 字节码都基于 *栈机* 模型，其中栈被用作主要数据结构，而不是一组寄存器。
- en: 'Target: Syntax'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标：语法
- en: So as a *target language*, let's use the following stack-machine instruction
    set:      inst ::= PUSH c | ADDAn inst is a machine instruction. A program prog
    is a list of instructions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，作为 *目标语言*，让我们使用以下栈机指令集： inst ::= PUSH c | ADD inst 是一条机器指令。程序 prog 是指令的列表。
- en: 'Inductive inst : Type :='
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳 inst：类型 :=
- en: '| PUSH : nat → inst'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '| PUSH : nat → inst'
- en: '| ADD : inst.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '| ADD : inst。'
- en: Definition prog := list inst.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 prog := 列表 inst。
- en: These extact to OCaml as we would expect.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些如预期地转换为 OCaml。
- en: Extraction inst.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 提取 inst。
- en: (*
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: (*
- en: type inst =
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 类型 inst =
- en: '| PUSH of nat'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '| PUSH of nat'
- en: '| ADD'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '| ADD'
- en: '*)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*)'
- en: Extraction prog.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 提取 prog。
- en: (*
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: (*
- en: type prog = inst list
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 类型 prog := inst 列表
- en: '*)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*)'
- en: 'Target: Semantics'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标：语义
- en: 'To define the *dynamic semantics* of this target language, we need a notion
    of a stack:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义此目标语言的 *动态语义*，我们需要一个栈的概念：
- en: Definition stack := list nat.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 定义栈 := 列表 自然数。
- en: Now it's time to write an interpreter for the target language.Evaluation of
    a program takes in an initial stack, and returns the final stack. But since evaluation
    could fail (if we try to ADD when there aren't at least two values on the stack),
    we wrap the return in an option, and return None if an error occurs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为目标语言编写解释器了。程序的评估接受初始栈，并返回最终栈。但由于评估可能失败（如果我们尝试在栈上至少没有两个值的情况下执行 ADD 操作），因此我们将返回包装在选项中，并在发生错误时返回
    None。
- en: 'Fixpoint evalProg (p : prog) (s : stack) : option stack :='
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '递归定义 evalProg 函数 (p : prog) (s : stack)：选项栈 :='
- en: match p,s with
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 p，s：
- en: '| (PUSH n)::p'', s ⇒ evalProg p'' (n::s)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '| (PUSH n)::p'', s ⇒ evalProg p'' (n::s)'
- en: '| ADD::p'', x::y::s'' ⇒ evalProg p'' ((x+y)::s'')'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '| ADD::p'', x::y::s'' ⇒ evalProg p'' ((x+y)::s'')'
- en: '| [], s ⇒ Some s'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '| [], s ⇒ Some s'
- en: '| _, _ ⇒ None'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '| _, _ ⇒ None'
- en: end.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: end。
- en: 'DOES THAT LOOK FAMILIAR? It should...Extraction of the deep pattern matching
    doesn''t turn out quite so nicely:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 那看起来熟悉吗？应该...深层模式匹配的提取结果并不那么美观：
- en: Extraction evalProg.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Extraction evalProg。
- en: (*
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: （*
- en: let rec evalProg p s =
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: let rec evalProg p s =
- en: match p with
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: match p with
- en: '| Nil -> Some s'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '| Nil -> Some s'
- en: '| Cons (i, p'') ->'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '| Cons (i, p'') ->'
- en: (match i with
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: (match i with
- en: '| PUSH n -> evalProg p'' (Cons (n, s))'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '| PUSH n -> evalProg p'' (Cons (n, s))'
- en: '| ADD ->'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '| ADD ->'
- en: (match s with
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: (match s with
- en: '| Nil -> None'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '| Nil -> None'
- en: '| Cons (x, l) ->'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '| Cons (x, l) ->'
- en: (match l with
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: (match l with
- en: '| Nil -> None'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '| Nil -> None'
- en: '| Cons (y, s'') -> evalProg p'' (Cons ((plus x y), s'')))))'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '| Cons (y, s'') -> evalProg p'' (Cons ((plus x y), s'')))))'
- en: '*)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*）'
- en: 'Target: Unit tests'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标：单元测试
- en: Here are a couple unit tests for the target language interpreter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些针对目标语言解释器的单元测试。
- en: 'Example target_test_1 : evalProg [PUSH 42] [] = Some [42].'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '举例 target_test_1 : evalProg [PUSH 42] [] = Some [42]。'
- en: Proof. reflexivity. Qed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。自反性。证毕。
- en: 'Example target_test_2 : evalProg [PUSH 2; PUSH 2; ADD] [] = Some [4].'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '举例 target_test_2 : evalProg [PUSH 2; PUSH 2; ADD] [] = Some [4]。'
- en: Proof. reflexivity. Qed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。自反性。证毕。
- en: Compiler
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译器
- en: Now we're ready to translate from the source language to the target language.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好从源语言翻译到目标语言了。
- en: To translate a constant c, we just push c onto the stack.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要翻译一个常数 c，我们只需将 c 推到堆栈上。
- en: To translate an addition e1 + e2, we translate e2, translate e1, then append
    the instructions together, followed by an ADD instruction.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要翻译一个加法 e1 + e2，我们先翻译 e2，再翻译 e1，然后将指令连接在一起，最后加上一个 ADD 指令。
- en: (* returns: compile e produces a program p, such that
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: （* 返回：编译 e 生成一个程序 p，使得
- en: evaluation of p leaves a single new value at the top
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对 p 的评估会在堆栈顶部留下一个单一的新值
- en: of the stack, and that value would be the result of
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈的，而该值将是的结果
- en: evaluating e. *)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对 e 的求值。*）
- en: 'Fixpoint compile (e : expr) : prog :='
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fixpoint compile (e : expr) : prog :='
- en: match e with
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: match e with
- en: '| Const n ⇒ [PUSH n]'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '| Const n ⇒ [PUSH n]'
- en: '| Plus e1 e2 ⇒ compile e2 ++ compile e1 ++ [ADD]'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '| Plus e1 e2 ⇒ compile e2 ++ compile e1 ++ [ADD]'
- en: end.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: end。
- en: 'Note that ++ is the Coq append operator, analogous to OCaml''s @.We can extract
    the compiler to its own file:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，++ 是 Coq 的追加运算符，类似于 OCaml 的 @。我们可以将编译器提取到它自己的文件中：
- en: Extraction "compiler.ml" compile.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Extraction "compiler.ml" compile。
- en: Try using that file in the OCaml REPL!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在 OCaml REPL 中使用该文件！
- en: 'Compiler: Unit tests'
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译器：单元测试
- en: 'Here are a couple unit tests for our compiler:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些我们编译器的单元测试：
- en: 'Example compile_test_1 : compile (Const 42) = [PUSH 42].'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '举例 compile_test_1 : compile (Const 42) = [PUSH 42]。'
- en: Proof. reflexivity. Qed.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。自反性。证毕。
- en: 'Example compile_test_2 : compile (Plus (Const 2) (Const 2))'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '举例 compile_test_2 : compile (Plus (Const 2) (Const 2))'
- en: = [PUSH 2; PUSH 2; ADD].
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: = [PUSH 2; PUSH 2; ADD]。
- en: Proof. reflexivity. Qed.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。自反性。证毕。
- en: 'These tests demonstrate that the compiler produces some programs that do seem
    to correspond to the input expression. But we haven''t really tested the postcondition
    of compile: we want to know whether both side of the = above evaluate to the same
    value.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试表明编译器生成了一些似乎对应于输入表达式的程序。但我们还没有真正测试编译器的后置条件：我们想知道上述等式的两侧是否评估为相同的值。
- en: 'Example post_test_1 : evalProg (compile (Const 42)) [] = Some [evalExpr (Const
    42)].'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '举例 post_test_1 : evalProg (compile (Const 42)) [] = Some [evalExpr (Const 42)]。'
- en: Proof. reflexivity. Qed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。自反性。证毕。
- en: 'Example post_test_2 : evalProg (compile (Plus (Const 2) (Const 2))) []'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '举例 post_test_2 : evalProg (compile (Plus (Const 2) (Const 2))) []'
- en: = Some [evalExpr (Plus (Const 2) (Const 2))].
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: = Some [evalExpr (Plus (Const 2) (Const 2))]。
- en: Proof. reflexivity. Qed.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。自反性。证毕。
- en: So far, so good. But as we know from Dijkstra, "testing can only prove the presence
    of bugs, never their absence." How could we show that the compiler is correct
    for every input expression?WE PROVE IT...
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利。但正如我们从 Dijkstra 那里所知道的，“测试只能证明错误的存在，而不能证明错误的不存在。”我们怎样才能证明编译器对每个输入表达式都是正确的？我们证明它...
- en: Compiler Verification
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译器验证
- en: The following theorem is a *specification* that says what it means for compile
    to be correct.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的定理是一个 *规范*，说明了 compile 正确的含义。
- en: 'Theorem compile_correct : ∀ e,'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '定理 compile_correct : ∀ e，'
- en: evalProg (compile e) [] = Some [evalExpr e].
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: evalProg (compile e) [] = Some [evalExpr e]。
- en: Proof.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: intros; rewrite (app_nil_end (compile e));
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: intros; rewrite (app_nil_end (compile e));
- en: 'assert (lemma : ∀ e'' s p,'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '断言 (lemma : ∀ e'' s p,'
- en: 'evalProg (compile e'' ++ p) s = evalProg p (evalExpr e'' :: s)) by'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 'evalProg (compile e'' ++ p) s = evalProg p (evalExpr e'' :: s)) by'
- en: (induction e'; crush);
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: （对 e' 进行归纳；压碎）；
- en: crush.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 压碎。
- en: Qed.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 证毕。
- en: 'Now we have a *verified compiler*: we have evidence that there cannot be any
    bugs in the translation. The code we extracted is certified as correct!'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个*经过验证的编译器*：我们有证据证明翻译中不可能存在任何错误。我们提取的代码被证明是正确的！
- en: CompCert
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CompCert
- en: CompCert is a certified C compiler.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: CompCert 是一个经过认证的 C 编译器。
- en: 'Source language: ISO C 99, mostly.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源语言：ISO C 99，主要是。
- en: 'Target language: PowerPC, ARM, x86.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标语言：PowerPC、ARM、x86。
- en: Specified, programmed, proved correct in Coq.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Coq 中指定、编程、证明为正确。
- en: 'Not verified: parser, assembler, linker'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未经验证的部分：解析器、汇编器、链接器
- en: 'Performance: about 10 percent slowdown compared to gcc -O1.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能：与 gcc -O1 相比大约减慢了 10%。
- en: 'The main theorem from the CompCert Coq source code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: CompCert Coq 源代码的主要定理：
- en: (*
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: (*
- en: 'Theorem transf_c_program_correct:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 transf_c_program_correct：
- en: forall p tp,
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有的 p 和 tp，
- en: transf_c_program p = OK tp ->
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: transf_c_program p = OK tp ->
- en: backward_simulation (Csem.semantics p) (Asm.semantics tp).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: backward_simulation (Csem.semantics p) (Asm.semantics tp)。
- en: '*)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*)'
- en: Acknowledgment
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 致谢
- en: This lecture is inspired by an example in a textbook by Adam Chlipala titled
    "Certified Programming with Dependent Types".
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这节课受到了 Adam Chlipala 所著书籍《带依赖类型的认证编程》中的一个例子的启发。
- en: '[PRE0]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '* * *'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[Index](coqindex.html)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[索引](coqindex.html)'
- en: '* * *'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This page has been generated by [coqdoc](http://www.lix.polytechnique.fr/coq/)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本页由[coqdoc](http://www.lix.polytechnique.fr/coq/)生成。
