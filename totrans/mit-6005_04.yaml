- en: 'Reading 4: Code Review'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You must complete the ***reading exercises*** in this reading by 10:00 pm the
    night before class.
  prefs: []
  type: TYPE_NORMAL
- en: Software in 6.005
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  prefs: []
  type: TYPE_TB
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  prefs: []
  type: TYPE_TB
- en: Objectives for Today’s Class
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In today’s class, we will practice:'
  prefs: []
  type: TYPE_NORMAL
- en: 'code review: reading and discussing code written by somebody else'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'general principles of good coding: things you can look for in every code review,
    regardless of programming language or program purpose'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code Review
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,code_review/Qo7N8y97mKE)'
  prefs: []
  type: TYPE_NORMAL
- en: Code review is careful, systematic study of source code by people who are not
    the original author of the code. It’s analogous to proofreading a term paper.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code review really has two purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Improving the code.** Finding bugs, anticipating possible bugs, checking
    the clarity of the code, and checking for consistency with the project’s style
    standards.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improving the programmer.** Code review is an important way that programmers
    learn and teach each other, about new language features, changes in the design
    of the project or its coding standards, and new techniques. In open source projects,
    particularly, much conversation happens in the context of code reviews.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code review is widely practiced in open source projects like Apache and [Mozilla](http://blog.humphd.org/vocamus-1569/?p=1569).
    Code review is also widely practiced in industry. At Google, you can’t push any
    code into the main repository until another engineer has signed off on it in a
    code review.
  prefs: []
  type: TYPE_NORMAL
- en: In 6.005, we’ll do code review on problem sets, as described in the [Code Reviewing
    document](../../general/code-review.html) on the course website.
  prefs: []
  type: TYPE_NORMAL
- en: Style Standards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most companies and large projects have coding style standards (for example,
    [Google Java Style](http://google.github.io/styleguide/javaguide.html)). These
    can get pretty detailed, even to the point of specifying whitespace (how deep
    to indent) and where curly braces and parentheses should go. These kinds of questions
    often lead to [holy wars](http://www.outpost9.com/reference/jargon/jargon_23.html#TAG897)
    since they end up being a matter of taste and style.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Java, there’s a general [style guide](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html)
    (unfortunately not updated for the latest versions of Java). Some of its advice
    gets very specific:'
  prefs: []
  type: TYPE_NORMAL
- en: The opening brace should be at the end of the line that begins the compound
    statement; the closing brace should begin a line and be indented to the beginning
    of the compound statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In 6.005, we have no official style guide of this sort. We’re not going to tell
    you where to put your curly braces. That’s a personal decision that each programmer
    should make. It’s important to be self-consistent, however, and it’s *very* important
    to follow the conventions of the project you’re working on. If you’re the programmer
    who reformats every module you touch to match your personal style, your teammates
    will hate you, and rightly so. Be a team player.
  prefs: []
  type: TYPE_NORMAL
- en: But there are some rules that are quite sensible and target our big three properties,
    in a stronger way than placing curly braces. The rest of this reading talks about
    some of these rules, at least the ones that are relevant at this point in the
    course, where we’re mostly talking about writing basic Java. These are some things
    you should start to look for when you’re code reviewing other students, and when
    you’re looking at your own code for improvement. Don’t consider it an exhaustive
    list of code style guidelines, however. Over the course of the semester, we’ll
    talk about a lot more things — specifications, abstract data types with representation
    invariants, concurrency and thread safety — which will then become fodder for
    code review.
  prefs: []
  type: TYPE_NORMAL
- en: 'Smelly Example #1'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Programmers often describe bad code as having a “bad smell” that needs to be
    removed. “Code hygiene” is another word for this. Let’s start with some smelly
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The next few sections and exercises will pick out the particular smells in this
    code example.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t Repeat Yourself
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Duplicated code is a risk to safety. If you have identical or very similar code
    in two places, then the fundamental risk is that there’s a bug in both copies,
    and some maintainer fixes the bug in one place but not the other.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid duplication like you’d avoid crossing the street without looking. Copy-and-paste
    is an enormously tempting programming tool, and you should feel a frisson of danger
    run down your spine every time you use it. The longer the block you’re copying,
    the riskier it is.
  prefs: []
  type: TYPE_NORMAL
- en: '[Don’t Repeat Yourself](http://en.wikipedia.org/wiki/Don''t_repeat_yourself),
    or DRY for short, has become a programmer’s mantra.'
  prefs: []
  type: TYPE_NORMAL
- en: The `dayOfYear` example is full of identical code. How would you DRY it out?
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Don’t repeat yourself
  prefs: []
  type: TYPE_NORMAL
- en: Some of the repetition in `dayOfYear()` is repeated values. How many times is
    the number of days in April written in `dayOfYear()`?
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Don’t repeat yourself
  prefs: []
  type: TYPE_NORMAL
- en: One reason why repeated code is bad is because a problem in the repeated code
    has to be fixed in many places, not just one. Suppose our calendar changed so
    that February really has 30 days instead of 28\. How many numbers in this code
    have to be changed?
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Don’t repeat yourself
  prefs: []
  type: TYPE_NORMAL
- en: 'Another kind of repetition in the code is `dayOfMonth+=`. Assume you have an
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '`int[] monthLengths = new int[] { 31, 28, 31, 30, ..., 31}`'
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following code skeletons could be used to DRY the code out enough
    so that `dayOfMonth+=` appears only once?
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Comments Where Needed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,comments_where_needed/kUU0wapC8R0)'
  prefs: []
  type: TYPE_NORMAL
- en: A quick general word about commenting. Good software developers write comments
    in their code, and do it judiciously. Good comments should make the code easier
    to understand, safer from bugs (because important assumptions have been documented),
    and ready for change.
  prefs: []
  type: TYPE_NORMAL
- en: 'One kind of crucial comment is a specification, which appears above a method
    or above a class and documents the behavior of the method or class. In Java, this
    is conventionally written as a Javadoc comment, meaning that it starts with `/**`
    and includes `@`-syntax, like `@param` and `@return` for methods. Here’s an example
    of a spec:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Specifications document assumptions. We’ve already mentioned specs a few times,
    and there will be much more to say about them in a future reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another crucial comment is one that specifies the provenance or source of a
    piece of code that was copied or adapted from elsewhere. This is vitally important
    for practicing software developers, and is required by the [6.005 collaboration
    policy](../../general/collaboration.html) when you adapt code you found on the
    web. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: One reason for documenting sources is to avoid violations of copyright. Small
    snippets of code on Stack Overflow are typically in the public domain, but code
    copied from other sources may be proprietary or covered by other kinds of open
    source licenses, which are more restrictive. Another reason for documenting sources
    is that the code can fall out of date; the [Stack Overflow answer](http://stackoverflow.com/questions/4328711/read-url-to-string-in-few-lines-of-java-code)
    from which this code came has evolved significantly in the years since it was
    first answered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some comments are bad and unnecessary. Direct transliterations of code into
    English, for example, do nothing to improve understanding, because you should
    assume that your reader at least knows Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'But obscure code should get a comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[The `dayOfYear` code](#dayOfYear) needs some comments — where would you put
    them? For example, where would you document whether `month` runs from 0 to 11
    or from 1 to 12?'
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Comments where needed
  prefs: []
  type: TYPE_NORMAL
- en: Which comments are useful additions to the code? Consider each comment independently,
    as if the other comments weren’t there.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Fail Fast
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,fail_fast/geiuKB2addQ)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Failing fast* means that code should reveal its bugs as early as possible.
    The earlier a problem is observed (the closer to its cause), the easier it is
    to find and fix. As we saw in the [first reading](../01-static-checking/#static_checking_dynamic_checking_no_checking),
    static checking fails faster than dynamic checking, and dynamic checking fails
    faster than producing a wrong answer that may corrupt subsequent computation.'
  prefs: []
  type: TYPE_NORMAL
- en: The `dayOfYear` function doesn’t fail fast — if you pass it the arguments in
    the wrong order, it will quietly return the wrong answer. In fact, the way dayOfYear
    is designed, it’s highly likely that a non-American will pass the arguments in
    the wrong order! It needs more checking — either static checking or dynamic checking.
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Fail fast
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Suppose the date is February 9, 2019\. The correct `dayOfYear()` result for
    this date is 40, since it’s the fortieth day of the year.
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following are plausible ways that a programmer might (mistakenly)
    call `dayOfYear()`? And for each one, does it lead to a static error, dynamic
    error, or wrong answer?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>plausible mistake – static error</option>,<option>plausible
    mistake – dynamic error</option>,<option>plausible mistake – wrong answer</option>,<option>plausible
    mistake – right answer</option>,<option>implausible mistake</option>,<option>not
    a mistake – right answer</option></select>(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>plausible mistake – static error</option>,<option>plausible
    mistake – dynamic error</option>,<option>plausible mistake – wrong answer</option>,<option>plausible
    mistake – right answer</option>,<option>implausible mistake</option>,<option>not
    a mistake – right answer</option></select>(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>plausible mistake – static error</option>,<option>plausible
    mistake – dynamic error</option>,<option>plausible mistake – wrong answer</option>,<option>plausible
    mistake – right answer</option>,<option>implausible mistake</option>,<option>not
    a mistake – right answer</option></select>(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>plausible mistake – static error</option>,<option>plausible
    mistake – dynamic error</option>,<option>plausible mistake – wrong answer</option>,<option>plausible
    mistake – right answer</option>,<option>implausible mistake</option>,<option>not
    a mistake – right answer</option></select>(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>plausible mistake – static error</option>,<option>plausible
    mistake – dynamic error</option>,<option>plausible mistake – wrong answer</option>,<option>plausible
    mistake – right answer</option>,<option>implausible mistake</option>,<option>not
    a mistake – right answer</option></select>(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>plausible mistake – static error</option>,<option>plausible
    mistake – dynamic error</option>,<option>plausible mistake – wrong answer</option>,<option>plausible
    mistake – right answer</option>,<option>implausible mistake</option>,<option>not
    a mistake – right answer</option></select>(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Fail faster
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following changes (considered separately) would make the code fail
    faster if it were called with arguments in the wrong order?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>no change</option>,<option>fails faster
    – static error</option>,<option>fails faster – dynamic error</option></select>(missing
    answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>no change</option>,<option>fails faster
    – static error</option>,<option>fails faster – dynamic error</option></select>(missing
    answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>no change</option>,<option>fails faster
    – static error</option>,<option>fails faster – dynamic error</option></select>(missing
    answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>no change</option>,<option>fails faster
    – static error</option>,<option>fails faster – dynamic error</option></select>(missing
    answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: <select class="form-control"><option>no change</option>,<option>fails faster
    – static error</option>,<option>fails faster – dynamic error</option></select>(missing
    answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Avoid Magic Numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,avoid_magic_numbers/arqiSx-9_DI)'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are really only two constants that computer scientists recognize as valid
    in and of themselves: 0, 1, and maybe 2\. (Okay, three constants.)'
  prefs: []
  type: TYPE_NORMAL
- en: All other constants are called [magic](https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants)
    because they appear as if out of thin air with no explanation.
  prefs: []
  type: TYPE_NORMAL
- en: One way to explain a number is with a comment, but a far better way is to declare
    the number as a named constant with a good, clear name.
  prefs: []
  type: TYPE_NORMAL
- en: '`dayOfYear` is full of magic numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: The months 2, …, 12 would be far more readable as `FEBRUARY`, …, `DECEMBER`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The days-of-months 30, 31, 28 would be more readable (and eliminate duplicate
    code) if they were in a data structure like an array, list, or map, e.g. `MONTH_LENGTH[month]`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mysterious numbers 59 and 90 are particularly pernicious examples of magic
    numbers. Not only are they uncommented and undocumented, they are actually the
    result of a *computation done by hand* by the programmer. Don’t hardcode constants
    that you’ve computed by hand. Java is better at arithmetic than you are. Explicit
    computations like `31 + 28` make the provenance of these mysterious numbers much
    clearer. `MONTH_LENGTH[JANUARY] + MONTH_LENGTH[FEBRUARY]` would be clearer still.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Avoid magic numbers
  prefs: []
  type: TYPE_NORMAL
- en: 'In the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: what might a reasonable programmer plausibly assume about the meaning of the
    magic number 2?
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: What happens when you assume
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you’re reading some code that uses a turtle graphics library that you
    don’t know well, and you see the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Which of the following are likely assumptions you might make about the meaning
    of the magic number 3?
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Names instead of numbers
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The magic numbers in this code cause it to fail all three of our measures of
    code quality: it’s not safe from bugs (SFB), not easy to understand (ETU) and
    not ready for change (RFC).'
  prefs: []
  type: TYPE_NORMAL
- en: For each of the following rewrites, judge whether it improves SFB, ETU, and/or
    RFC, or none of the above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: One Purpose For Each Variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,one_purpose_for_each_variable/zC0_rI9hoMk)'
  prefs: []
  type: TYPE_NORMAL
- en: In the `dayOfYear` example, the parameter `dayOfMonth` is reused to compute
    a very different value — the return value of the function, which is not the day
    of the month.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t reuse parameters, and don’t reuse variables. Variables are not a scarce
    resource in programming. Introduce them freely, give them good names, and just
    stop using them when you stop needing them. You will confuse your reader if a
    variable that used to mean one thing suddenly starts meaning something different
    a few lines down.
  prefs: []
  type: TYPE_NORMAL
- en: Not only is this an ease-of-understanding question, but it’s also a safety-from-bugs
    and ready-for-change question.
  prefs: []
  type: TYPE_NORMAL
- en: 'Method parameters, in particular, should generally be left unmodified. (This
    is important for being ready-for-change — in the future, some other part of the
    method may want to know what the original parameters of the method were, so you
    shouldn’t blow them away while you’re computing.) It’s a good idea to use `final`
    for method parameters, and as many other variables as you can. The `final` keyword
    says that the variable should never be reassigned, and the Java compiler will
    check it statically. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Smelly Example #2'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There was a latent bug in `dayOfYear`. It didn’t handle leap years at all. As
    part of fixing that, suppose we write a leap-year method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: What are the bugs hidden in this code? And what style problems that we’ve already
    talked about?
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Mental execution 2016
  prefs: []
  type: TYPE_NORMAL
- en: 'What happens when you call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Mental execution 2017
  prefs: []
  type: TYPE_NORMAL
- en: 'What happens when you call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)Mental execution 2050
  prefs: []
  type: TYPE_NORMAL
- en: 'What happens when you call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Mental execution 10016
  prefs: []
  type: TYPE_NORMAL
- en: 'What happens when you call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Mental execution 916
  prefs: []
  type: TYPE_NORMAL
- en: 'What happens when you call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Magic numbers
  prefs: []
  type: TYPE_NORMAL
- en: How many magic numbers are in this code? Count every occurrence if some appear
    more than once.
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: DRYing out
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you wrote the helper function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: If `leap()` were rewritten to use `isDivisibleBy(year, ...)`, and to correctly
    follow the [**leap year algorithm**](http://en.wikipedia.org/wiki/Leap_year#Algorithm),
    how many magic numbers would be in the code?
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Use Good Names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,use_good_names/UnQBNYjnMQo)'
  prefs: []
  type: TYPE_NORMAL
- en: Good method and variable names are long and self-descriptive. Comments can often
    be avoided entirely by making the code itself more readable, with better names
    that describe the methods and variables.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can rewrite
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: In general, variable names like `tmp`, `temp`, and `data` are awful, symptoms
    of extreme programmer laziness. Every local variable is temporary, and every variable
    is data, so those names are generally meaningless. Better to use a longer, more
    descriptive name, so that your code reads clearly all by itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the lexical naming conventions of the language. In Python, classes are
    typically Capitalized, variables are lowercase, and words_are_separated_by_underscores.
    In Java:'
  prefs: []
  type: TYPE_NORMAL
- en: methodsAreNamedWithCamelCaseLikeThis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variablesAreAlsoCamelCase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CONSTANTS_ARE_IN_ALL_CAPS_WITH_UNDERSCORES
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ClassesAreCapitalized
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: packages.are.lowercase.and.separated.by.dots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method names are usually verb phrases, like `getDate` or `isUpperCase`, while
    variable and class names are usually noun phrases. Choose short words, and be
    concise, but avoid abbreviations. For example, `message` is clearer than `msg`,
    and `word` is so much better than `wd`. Keep in mind that many of your teammates
    in class and in the real world will not be native English speakers, and abbreviations
    can be even harder for non-native speakers.
  prefs: []
  type: TYPE_NORMAL
- en: ALL_CAPS_WITH_UNDERSCORES is used for `static final` constants. All variables
    declared inside a method, including `final` ones, use camelCaseNames.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `leap` method has bad names: the method name itself, and the local variable
    name. What would you call them instead?'
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Better method names
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Which of the following are good names for the `leap()` method?
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Better variable names
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following are good names for the `tmp` variable inside `leap()`?
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Use Whitespace to Help the Reader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,use_whitespace_to_help_the_reader/oQfeQtbsDb0)'
  prefs: []
  type: TYPE_NORMAL
- en: Use consistent indentation. The `leap` example is bad at this. The `dayOfYear`
    example is much better. In fact, `dayOfYear` nicely lines up all the numbers into
    columns, making them easy for a human reader to compare and check. That’s a great
    use of whitespace.
  prefs: []
  type: TYPE_NORMAL
- en: Put spaces within code lines to make them easy to read. The leap example has
    some lines that are packed together — put in some spaces.
  prefs: []
  type: TYPE_NORMAL
- en: Never use tab characters for indentation, only space characters. Note that we
    say *characters*, not keys. We’re not saying you should never press the Tab key,
    only that your editor should never put a tab character into your source file in
    response to your pressing the Tab key. The reason for this rule is that different
    tools treat tab characters differently — sometimes expanding them to 4 spaces,
    sometimes to 2 spaces, sometimes to 8\. If you run “git diff” on the command line,
    or if you view your source code in a different editor, then the indentation may
    be completely screwed up. Just use spaces. Always set your programming editor
    to insert space characters when you press the Tab key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Smelly Example #3'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here’s a third example of smelly code that will illustrate the remaining points
    of this reading.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Don’t Use Global Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,dont_use_global_variables/HIxWGVy1Fqo)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Avoid global variables. Let’s break down what we mean by *global variable*.
    A global variable is:'
  prefs: []
  type: TYPE_NORMAL
- en: a *variable*, a name whose meaning can be changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: that is *global*, accessible and changeable from anywhere in the program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why Global Variables Are Bad](http://c2.com/cgi/wiki?GlobalVariablesAreBad)
    ([cached version](http://web.archive.org/web/20160902115611/http://c2.com/cgi/wiki?GlobalVariablesAreBad))
    has a good list of the dangers of global variables.'
  prefs: []
  type: TYPE_NORMAL
- en: In Java, a global variable is declared `public static`. The `public` modifier
    makes it accessible anywhere, and `static` means there is a single instance of
    the variable.
  prefs: []
  type: TYPE_NORMAL
- en: In general, change global variables into parameters and return values, or put
    them inside objects that you’re calling methods on. We’ll see many techniques
    for doing that in future readings.
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Identifying global variables
  prefs: []
  type: TYPE_NORMAL
- en: In this code, which of these are global variables?
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Effect of final
  prefs: []
  type: TYPE_NORMAL
- en: Making a variable into a constant by adding the `final` keyword can eliminate
    the risk of global variables. What happens to each of these when the `final` keyword
    is added?
  prefs: []
  type: TYPE_NORMAL
- en: '`n`'
  prefs: []
  type: TYPE_NORMAL
- en: <select class="form-control"><option>becomes constant</option>,<option>doesn’t
    become constant</option>,<option>error before program starts</option>,<option>error
    while program is running</option></select>(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '`LONG_WORD_LENGTH`'
  prefs: []
  type: TYPE_NORMAL
- en: <select class="form-control"><option>becomes constant</option>,<option>doesn’t
    become constant</option>,<option>error before program starts</option>,<option>error
    while program is running</option></select>(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '`longestWord`'
  prefs: []
  type: TYPE_NORMAL
- en: <select class="form-control"><option>becomes constant</option>,<option>doesn’t
    become constant</option>,<option>error before program starts</option>,<option>error
    while program is running</option></select>(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '`word`'
  prefs: []
  type: TYPE_NORMAL
- en: <select class="form-control"><option>becomes constant</option>,<option>doesn’t
    become constant</option>,<option>error before program starts</option>,<option>error
    while program is running</option></select>(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: '`words`'
  prefs: []
  type: TYPE_NORMAL
- en: <select class="form-control"><option>becomes constant</option>,<option>doesn’t
    become constant</option>,<option>error before program starts</option>,<option>error
    while program is running</option></select>(missing answer)
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  prefs: []
  type: TYPE_NORMAL
- en: Methods Should Return Results, not Print Them
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`countLongWords` isn’t ready for change. It sends some of its result to the
    console, `System.out`. That means that if you want to use it in another context
    — where the number is needed for some other purpose, like computation rather than
    human eyes — it would have to be rewritten.'
  prefs: []
  type: TYPE_NORMAL
- en: In general, only the highest-level parts of a program should interact with the
    human user or the console. Lower-level parts should take their input as parameters
    and return their output as results. The sole exception here is debugging output,
    which can of course be printed to the console. But that kind of output shouldn’t
    be a part of your design, only a part of how you debug your design.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Code review is a widely-used technique for improving software quality by human
    inspection. Code review can detect many kinds of problems in code, but as a starter,
    this reading talked about these general principles of good code:'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t Repeat Yourself (DRY)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comments where needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fail fast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid magic numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One purpose for each variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use good names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No global variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return results, don’t print them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use whitespace for readability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topics of today’s reading connect to our three key properties of good software
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Safe from bugs.** In general, code review uses human reviewers to find bugs.
    DRY code lets you fix a bug in only one place, without fear that it has propagated
    elsewhere. Commenting your assumptions clearly makes it less likely that another
    programmer will introduce a bug. The Fail Fast principle detects bugs as early
    as possible. Avoiding global variables makes it easier to localize bugs related
    to variable values, since non-global variables can be changed in only limited
    places in the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy to understand.** Code review is really the only way to find obscure
    or confusing code, because other people are reading it and trying to understand
    it. Using judicious comments, avoiding magic numbers, keeping one purpose for
    each variable, using good names, and using whitespace well can all improve the
    understandability of code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ready for change.** Code review helps here when it’s done by experienced
    software developers who can anticipate what might change and suggest ways to guard
    against it. DRY code is more ready for change, because a change only needs to
    be made in one place. Returning results instead of printing them makes it easier
    to adapt the code to a new purpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Remember the exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point you should have completed all the reading exercises above.
  prefs: []
  type: TYPE_NORMAL
- en: Completing the reading exercises prepares you for the *nanoquiz* at the beginning
    of each class meeting, and submitting the exercises is required by 10pm the evening
    before class.
  prefs: []
  type: TYPE_NORMAL
