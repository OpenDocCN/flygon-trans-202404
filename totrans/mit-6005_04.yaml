- en: 'Reading 4: Code Review'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读 4：代码审查
- en: You must complete the ***reading exercises*** in this reading by 10:00 pm the
    night before class.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须在课前晚上 10:00 之前完成本次阅读中的***阅读练习***。
- en: Software in 6.005
  id: totrans-2
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在 6.005 中的软件
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 无 Bug | 易于理解 | 可随时更改 |'
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 今天正确且未来也正确。 | 与未来的程序员清晰沟通，包括未来的您。 | 设计以适应更改而无需重写。 |'
- en: Objectives for Today’s Class
  id: totrans-5
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 今天课程的目标
- en: 'In today’s class, we will practice:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的课程中，我们将练习：
- en: 'code review: reading and discussing code written by somebody else'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码审查：阅读并讨论其他人编写的代码
- en: 'general principles of good coding: things you can look for in every code review,
    regardless of programming language or program purpose'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 良好编码的一般原则：不论编程语言或程序目的如何，您都可以在每次代码审查中查找的内容
- en: Code Review
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码审查
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,code_review/Qo7N8y97mKE)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[**▶︎ 播放 MITx 视频**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,code_review/Qo7N8y97mKE)'
- en: Code review is careful, systematic study of source code by people who are not
    the original author of the code. It’s analogous to proofreading a term paper.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查是由非代码原作者进行的源代码的仔细、系统的研究。这类似于校对一篇学期论文。
- en: 'Code review really has two purposes:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查真正有两个目的：
- en: '**Improving the code.** Finding bugs, anticipating possible bugs, checking
    the clarity of the code, and checking for consistency with the project’s style
    standards.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进代码。** 查找错误，预测可能的错误，检查代码的清晰度，并检查与项目的样式标准的一致性。'
- en: '**Improving the programmer.** Code review is an important way that programmers
    learn and teach each other, about new language features, changes in the design
    of the project or its coding standards, and new techniques. In open source projects,
    particularly, much conversation happens in the context of code reviews.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进程序员。** 代码审查是程序员学习和互相教导的重要方式，包括新语言特性、项目设计的变化或其编码标准以及新技术。在开源项目中，尤其是，很多对话都发生在代码审查的背景下。'
- en: Code review is widely practiced in open source projects like Apache and [Mozilla](http://blog.humphd.org/vocamus-1569/?p=1569).
    Code review is also widely practiced in industry. At Google, you can’t push any
    code into the main repository until another engineer has signed off on it in a
    code review.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查在像 Apache 和[Mozilla](http://blog.humphd.org/vocamus-1569/?p=1569)这样的开源项目中得到了广泛的实践。在工业界也得到了广泛的实践。在
    Google，您不能将任何代码推送到主存储库中，直到另一位工程师在代码审查中签字。
- en: In 6.005, we’ll do code review on problem sets, as described in the [Code Reviewing
    document](../../general/code-review.html) on the course website.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 6.005 中，我们将根据课程网站上的[代码审查文档](../../general/code-review.html)对问题集进行代码审查。
- en: Style Standards
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 样式标准
- en: Most companies and large projects have coding style standards (for example,
    [Google Java Style](http://google.github.io/styleguide/javaguide.html)). These
    can get pretty detailed, even to the point of specifying whitespace (how deep
    to indent) and where curly braces and parentheses should go. These kinds of questions
    often lead to [holy wars](http://www.outpost9.com/reference/jargon/jargon_23.html#TAG897)
    since they end up being a matter of taste and style.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数公司和大型项目都有编码样式标准（例如，[Google Java 样式](http://google.github.io/styleguide/javaguide.html)）。这些可以变得非常详细，甚至到指定空格（缩进多深）以及大括号和括号应该放在哪里的程度。这些问题往往会引发[圣战](http://www.outpost9.com/reference/jargon/jargon_23.html#TAG897)，因为它们最终成为品味和风格的问题。
- en: 'For Java, there’s a general [style guide](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html)
    (unfortunately not updated for the latest versions of Java). Some of its advice
    gets very specific:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Java，有一个通用的[样式指南](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html)（不幸的是，没有更新到最新版本的
    Java）。其中一些建议非常具体：
- en: The opening brace should be at the end of the line that begins the compound
    statement; the closing brace should begin a line and be indented to the beginning
    of the compound statement.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开放的花括号应位于开始复合语句的行的末尾；闭合的花括号应该从一行开始，并缩进到复合语句的开始处。
- en: In 6.005, we have no official style guide of this sort. We’re not going to tell
    you where to put your curly braces. That’s a personal decision that each programmer
    should make. It’s important to be self-consistent, however, and it’s *very* important
    to follow the conventions of the project you’re working on. If you’re the programmer
    who reformats every module you touch to match your personal style, your teammates
    will hate you, and rightly so. Be a team player.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在6.005中，我们没有这样的官方风格指南。我们不会告诉你在哪里放置花括号。这是每个程序员都应该做出的个人决定。但是保持自一致很重要，遵循你正在处理的项目的约定也非常重要。如果你是那种每次接触的模块都会按照个人风格重新格式化的程序员，你的队友会讨厌你，而且理所当然。要成为团队的一员。
- en: But there are some rules that are quite sensible and target our big three properties,
    in a stronger way than placing curly braces. The rest of this reading talks about
    some of these rules, at least the ones that are relevant at this point in the
    course, where we’re mostly talking about writing basic Java. These are some things
    you should start to look for when you’re code reviewing other students, and when
    you’re looking at your own code for improvement. Don’t consider it an exhaustive
    list of code style guidelines, however. Over the course of the semester, we’ll
    talk about a lot more things — specifications, abstract data types with representation
    invariants, concurrency and thread safety — which will then become fodder for
    code review.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有一些规则是相当合理的，而且比放置花括号更有针对性，针对我们的三个主要属性。本文的其余部分将讨论这些规则，至少是在课程的这一阶段，我们主要讨论编写基本Java时是相关的。当你审查其他学生的代码时，以及当你查看自己的代码以进行改进时，这些都是你应该开始寻找的东西。但是不要认为这是代码风格指南的详尽列表。在学期结束时，我们将讨论更多的内容——规格、具有表示不变量的抽象数据类型、并发和线程安全——这些将成为代码审查的素材。
- en: 'Smelly Example #1'
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有臭味的示例＃1
- en: Programmers often describe bad code as having a “bad smell” that needs to be
    removed. “Code hygiene” is another word for this. Let’s start with some smelly
    code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员经常将糟糕的代码描述为具有需要删除的“坏味道”。“代码卫生”是另一个词。让我们从一些有臭味的代码开始。
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The next few sections and exercises will pick out the particular smells in this
    code example.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几节和练习将挑出这个代码示例中的特定问题。
- en: Don’t Repeat Yourself
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要重复自己
- en: Duplicated code is a risk to safety. If you have identical or very similar code
    in two places, then the fundamental risk is that there’s a bug in both copies,
    and some maintainer fixes the bug in one place but not the other.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 重复的代码对安全构成风险。如果两个地方有相同或非常相似的代码，那么根本风险就在于两个副本中都存在错误，某个维护者修复了一个地方的错误，但没有修复另一个地方的错误。
- en: Avoid duplication like you’d avoid crossing the street without looking. Copy-and-paste
    is an enormously tempting programming tool, and you should feel a frisson of danger
    run down your spine every time you use it. The longer the block you’re copying,
    the riskier it is.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 避免像你避免过马路不看一样重复。复制粘贴是一种极具诱惑力的编程工具，每次使用它时你应该感受到一丝危险的冲击。你复制的代码块越长，风险就越大。
- en: '[Don’t Repeat Yourself](http://en.wikipedia.org/wiki/Don''t_repeat_yourself),
    or DRY for short, has become a programmer’s mantra.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[不要重复自己](http://en.wikipedia.org/wiki/Don''t_repeat_yourself)，或简称为DRY，已成为程序员的口头禅。'
- en: The `dayOfYear` example is full of identical code. How would you DRY it out?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`dayOfYear()`示例中充满了相同的代码。你会如何消除重复？'
- en: reading exercises
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Don’t repeat yourself
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不要重复自己
- en: Some of the repetition in `dayOfYear()` is repeated values. How many times is
    the number of days in April written in `dayOfYear()`?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`dayOfYear()`中一些重复是重复的值。四月份的天数在`dayOfYear()`中写了多少次？'
- en: (missing answer)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）
- en: (missing explanation)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: Don’t repeat yourself
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不要重复自己
- en: One reason why repeated code is bad is because a problem in the repeated code
    has to be fixed in many places, not just one. Suppose our calendar changed so
    that February really has 30 days instead of 28\. How many numbers in this code
    have to be changed?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重复代码之所以不好的一个原因是因为重复代码中的问题必须在许多地方进行修复，而不仅仅是一个地方。假设我们的日历变了，所以二月实际上有30天而不是28天。在这段代码中有多少个数字必须更改？
- en: (missing answer)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）
- en: (missing explanation)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: Don’t repeat yourself
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不要重复自己
- en: 'Another kind of repetition in the code is `dayOfMonth+=`. Assume you have an
    array:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的另一种重复是`dayOfMonth+=`。假设你有一个数组：
- en: '`int[] monthLengths = new int[] { 31, 28, 31, 30, ..., 31}`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`int[] monthLengths = new int[] { 31, 28, 31, 30, ..., 31}`'
- en: Which of the following code skeletons could be used to DRY the code out enough
    so that `dayOfMonth+=` appears only once?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪种代码框架可以使代码足够简洁，以至于 `dayOfMonth+=` 只出现一次？
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)(缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: Comments Where Needed
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要注释的地方
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,comments_where_needed/kUU0wapC8R0)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[**▶︎ 播放 MITx 视频**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,comments_where_needed/kUU0wapC8R0)'
- en: A quick general word about commenting. Good software developers write comments
    in their code, and do it judiciously. Good comments should make the code easier
    to understand, safer from bugs (because important assumptions have been documented),
    and ready for change.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关于注释的快速概述。优秀的软件开发人员在他们的代码中写注释，并且要审慎地做到这一点。好的注释应该使代码更容易理解，更安全免受错误（因为重要的假设已经被记录下来），并且方便修改。
- en: 'One kind of crucial comment is a specification, which appears above a method
    or above a class and documents the behavior of the method or class. In Java, this
    is conventionally written as a Javadoc comment, meaning that it starts with `/**`
    and includes `@`-syntax, like `@param` and `@return` for methods. Here’s an example
    of a spec:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一种至关重要的注释是规范，它出现在方法或类的上方，并记录了方法或类的行为。在 Java 中，这通常被写成 Javadoc 注释，意味着以 `/**` 开头，并包含
    `@`-语法，比如方法的 `@param` 和 `@return`。这是一个规范的例子：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Specifications document assumptions. We’ve already mentioned specs a few times,
    and there will be much more to say about them in a future reading.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 规范文件记录了假设。我们已经多次提到规范，并且在未来的阅读中还会有更多内容。
- en: 'Another crucial comment is one that specifies the provenance or source of a
    piece of code that was copied or adapted from elsewhere. This is vitally important
    for practicing software developers, and is required by the [6.005 collaboration
    policy](../../general/collaboration.html) when you adapt code you found on the
    web. Here is an example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个至关重要的注释是指定代码来源或源自其他地方的代码的注释。这对于实践软件开发人员至关重要，并且在你从网上找到的代码进行修改时，[6.005 合作政策](../../general/collaboration.html)要求这样做。这里是一个例子：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: One reason for documenting sources is to avoid violations of copyright. Small
    snippets of code on Stack Overflow are typically in the public domain, but code
    copied from other sources may be proprietary or covered by other kinds of open
    source licenses, which are more restrictive. Another reason for documenting sources
    is that the code can fall out of date; the [Stack Overflow answer](http://stackoverflow.com/questions/4328711/read-url-to-string-in-few-lines-of-java-code)
    from which this code came has evolved significantly in the years since it was
    first answered.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 记录来源的一个原因是为了避免侵犯版权。来自 Stack Overflow 的小代码片段通常属于公共领域，但从其他来源复制的代码可能是专有的或受其他类型的开源许可证保护，这些许可证更具限制性。记录来源的另一个原因是代码可能会过时；这段代码来自的[Stack
    Overflow 回答](http://stackoverflow.com/questions/4328711/read-url-to-string-in-few-lines-of-java-code)在回答之后的几年里发生了显著变化。
- en: 'Some comments are bad and unnecessary. Direct transliterations of code into
    English, for example, do nothing to improve understanding, because you should
    assume that your reader at least knows Java:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有些注释是糟糕且不必要的。例如，直译代码成英语对理解没有任何帮助，因为你应该假设你的读者至少了解 Java：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'But obscure code should get a comment:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 但是晦涩的代码应该加上注释：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[The `dayOfYear` code](#dayOfYear) needs some comments — where would you put
    them? For example, where would you document whether `month` runs from 0 to 11
    or from 1 to 12?'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dayOfYear` 代码](#dayOfYear) 需要一些注释 — 你会把它们放在哪里？例如，你会在哪里记录 `month` 是从 0 到 11
    还是从 1 到 12？'
- en: reading exercises
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Comments where needed
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注释的地方
- en: Which comments are useful additions to the code? Consider each comment independently,
    as if the other comments weren’t there.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 哪些注释对代码是有用的补充？独立考虑每个注释，就好像其他注释不存在一样。
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)(缺失答案)(缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: Fail Fast
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速失败
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,fail_fast/geiuKB2addQ)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[**▶︎ 播放 MITx 视频**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,fail_fast/geiuKB2addQ)'
- en: '*Failing fast* means that code should reveal its bugs as early as possible.
    The earlier a problem is observed (the closer to its cause), the easier it is
    to find and fix. As we saw in the [first reading](../01-static-checking/#static_checking_dynamic_checking_no_checking),
    static checking fails faster than dynamic checking, and dynamic checking fails
    faster than producing a wrong answer that may corrupt subsequent computation.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*快速失败*意味着代码应该尽早显示其错误。问题越早被观察到（接近其原因），找到并修复就越容易。正如我们在[第一次阅读](../01-static-checking/#static_checking_dynamic_checking_no_checking)中看到的，静态检查比动态检查失败得更快，动态检查比产生可能会破坏后续计算的错误答案更快。'
- en: The `dayOfYear` function doesn’t fail fast — if you pass it the arguments in
    the wrong order, it will quietly return the wrong answer. In fact, the way dayOfYear
    is designed, it’s highly likely that a non-American will pass the arguments in
    the wrong order! It needs more checking — either static checking or dynamic checking.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`dayOfYear`函数不会快速失败 —— 如果你传递的参数顺序不对，它将悄悄地返回错误答案。事实上，dayOfYear的设计方式，非常有可能一个非美国人会传递错误的参数顺序！它需要更多的检查
    —— 要么是静态检查，要么是动态检查。'
- en: reading exercises
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Fail fast
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 快速失败
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Suppose the date is February 9, 2019\. The correct `dayOfYear()` result for
    this date is 40, since it’s the fortieth day of the year.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 假设日期是2019年2月9日。这个日期的`dayOfYear()`正确结果是40，因为它是一年中的第40天。
- en: Which of the following are plausible ways that a programmer might (mistakenly)
    call `dayOfYear()`? And for each one, does it lead to a static error, dynamic
    error, or wrong answer?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪些是程序员可能（错误地）调用`dayOfYear()`的合理方式？对于每一种方式，它是否会导致静态错误、动态错误或错误答案？
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <select class="form-control"><option>plausible mistake – static error</option>,<option>plausible
    mistake – dynamic error</option>,<option>plausible mistake – wrong answer</option>,<option>plausible
    mistake – right answer</option>,<option>implausible mistake</option>,<option>not
    a mistake – right answer</option></select>(missing answer)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>合理的错误 - 静态错误</option>,<option>合理的错误 - 动态错误</option>,<option>合理的错误
    - 错误答案</option>,<option>合理的错误 - 正确答案</option>,<option>不合理的错误</option>,<option>不是错误
    - 正确答案</option></select>(缺失答案)
- en: (missing explanation)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <select class="form-control"><option>plausible mistake – static error</option>,<option>plausible
    mistake – dynamic error</option>,<option>plausible mistake – wrong answer</option>,<option>plausible
    mistake – right answer</option>,<option>implausible mistake</option>,<option>not
    a mistake – right answer</option></select>(missing answer)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>合理的错误 - 静态错误</option>,<option>合理的错误 - 动态错误</option>,<option>合理的错误
    - 错误答案</option>,<option>合理的错误 - 正确答案</option>,<option>不合理的错误</option>,<option>不是错误
    - 正确答案</option></select>(缺失答案)
- en: (missing explanation)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <select class="form-control"><option>plausible mistake – static error</option>,<option>plausible
    mistake – dynamic error</option>,<option>plausible mistake – wrong answer</option>,<option>plausible
    mistake – right answer</option>,<option>implausible mistake</option>,<option>not
    a mistake – right answer</option></select>(missing answer)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>合理的错误 - 静态错误</option>,<option>合理的错误 - 动态错误</option>,<option>合理的错误
    - 错误答案</option>,<option>合理的错误 - 正确答案</option>,<option>不合理的错误</option>,<option>不是错误
    - 正确答案</option></select>(缺失答案)
- en: (missing explanation)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <select class="form-control"><option>plausible mistake – static error</option>,<option>plausible
    mistake – dynamic error</option>,<option>plausible mistake – wrong answer</option>,<option>plausible
    mistake – right answer</option>,<option>implausible mistake</option>,<option>not
    a mistake – right answer</option></select>(missing answer)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>合理的错误 - 静态错误</option>,<option>合理的错误 - 动态错误</option>,<option>合理的错误
    - 错误答案</option>,<option>合理的错误 - 正确答案</option>,<option>不合理的错误</option>,<option>不是错误
    - 正确答案</option></select>(缺失答案)
- en: (missing explanation)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <select class="form-control"><option>plausible mistake – static error</option>,<option>plausible
    mistake – dynamic error</option>,<option>plausible mistake – wrong answer</option>,<option>plausible
    mistake – right answer</option>,<option>implausible mistake</option>,<option>not
    a mistake – right answer</option></select>(missing answer)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>合理的错误 - 静态错误</option>,<option>合理的错误 - 动态错误</option>,<option>合理的错误
    - 错误答案</option>,<option>合理的错误 - 正确答案</option>,<option>不合理的错误</option>,<option>不是错误
    - 正确答案</option></select>(缺失答案)
- en: (missing explanation)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <select class="form-control"><option>plausible mistake – static error</option>,<option>plausible
    mistake – dynamic error</option>,<option>plausible mistake – wrong answer</option>,<option>plausible
    mistake – right answer</option>,<option>implausible mistake</option>,<option>not
    a mistake – right answer</option></select>(missing answer)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>合理错误 - 静态错误</option>,<option>合理错误 - 动态错误</option>,<option>合理错误
    - 错误答案</option>,<option>合理错误 - 正确答案</option>,<option>不合理的错误</option>,<option>没有错误
    - 正确答案</option></select>(缺少答案)
- en: (missing explanation)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: Fail faster
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 更快失败
- en: Which of the following changes (considered separately) would make the code fail
    faster if it were called with arguments in the wrong order?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按错误的顺序调用带参数的代码，下列哪些变化（分开考虑）会使代码更快失败？
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <select class="form-control"><option>no change</option>,<option>fails faster
    – static error</option>,<option>fails faster – dynamic error</option></select>(missing
    answer)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>无更改</option>,<option>失败更快 - 静态错误</option>,<option>失败更快
    - 动态错误</option></select>(缺少答案)
- en: (missing explanation)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: <select class="form-control"><option>no change</option>,<option>fails faster
    – static error</option>,<option>fails faster – dynamic error</option></select>(missing
    answer)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>无更改</option>,<option>失败更快 - 静态错误</option>,<option>失败更快
    - 动态错误</option></select>(缺少答案)
- en: (missing explanation)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: <select class="form-control"><option>no change</option>,<option>fails faster
    – static error</option>,<option>fails faster – dynamic error</option></select>(missing
    answer)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>无更改</option>,<option>失败更快 - 静态错误</option>,<option>失败更快
    - 动态错误</option></select>(缺少答案)
- en: (missing explanation)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: <select class="form-control"><option>no change</option>,<option>fails faster
    – static error</option>,<option>fails faster – dynamic error</option></select>(missing
    answer)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>无更改</option>,<option>失败更快 - 静态错误</option>,<option>失败更快
    - 动态错误</option></select>(缺少答案)
- en: (missing explanation)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: <select class="form-control"><option>no change</option>,<option>fails faster
    – static error</option>,<option>fails faster – dynamic error</option></select>(missing
    answer)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>无更改</option>,<option>失败更快 - 静态错误</option>,<option>失败更快
    - 动态错误</option></select>(缺少答案)
- en: (missing explanation)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: Avoid Magic Numbers
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免神奇数字
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,avoid_magic_numbers/arqiSx-9_DI)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[**▶︎ 播放 MITx 视频**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,avoid_magic_numbers/arqiSx-9_DI)'
- en: 'There are really only two constants that computer scientists recognize as valid
    in and of themselves: 0, 1, and maybe 2\. (Okay, three constants.)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机科学家真正承认的只有两个常数是自身有效的：0，1，也许还有2（好吧，是三个常数）。
- en: All other constants are called [magic](https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants)
    because they appear as if out of thin air with no explanation.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他常数都被称为[神奇](https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants)，因为它们似乎是无缘无故出现的，没有解释。
- en: One way to explain a number is with a comment, but a far better way is to declare
    the number as a named constant with a good, clear name.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 解释数字的一种方法是通过注释，但更好的方法是将数字声明为具有良好、清晰名称的命名常量。
- en: '`dayOfYear` is full of magic numbers:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`dayOfYear`充满了神奇数字：'
- en: The months 2, …, 12 would be far more readable as `FEBRUARY`, …, `DECEMBER`.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 月份2至12可以更清晰地写为`FEBRUARY`到`DECEMBER`。
- en: The days-of-months 30, 31, 28 would be more readable (and eliminate duplicate
    code) if they were in a data structure like an array, list, or map, e.g. `MONTH_LENGTH[month]`.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 月份的天数30、31、28如果在数组、列表或映射等数据结构中，例如`MONTH_LENGTH[month]`，将更易读（并消除重复代码）。
- en: The mysterious numbers 59 and 90 are particularly pernicious examples of magic
    numbers. Not only are they uncommented and undocumented, they are actually the
    result of a *computation done by hand* by the programmer. Don’t hardcode constants
    that you’ve computed by hand. Java is better at arithmetic than you are. Explicit
    computations like `31 + 28` make the provenance of these mysterious numbers much
    clearer. `MONTH_LENGTH[JANUARY] + MONTH_LENGTH[FEBRUARY]` would be clearer still.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 神秘的数字59和90是特别恶劣的神奇数字示例。它们不仅没有被注释和记录，而且实际上是程序员手工计算的结果。不要将手工计算的常数硬编码。Java在算术方面比你强。明确的计算，如`31
    + 28`，使这些神秘数字的来源更加清晰。`MONTH_LENGTH[JANUARY] + MONTH_LENGTH[FEBRUARY]`会更清晰。
- en: reading exercises
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Avoid magic numbers
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 避免神奇数字
- en: 'In the code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中：
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: what might a reasonable programmer plausibly assume about the meaning of the
    magic number 2?
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一个合理的程序员可能对魔法数字2的含义做出什么样的假设？
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: What happens when you assume
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当你假设时会发生什么
- en: 'Suppose you’re reading some code that uses a turtle graphics library that you
    don’t know well, and you see the code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在阅读一些使用你不太了解的乌龟图形库的代码，你看到了这段代码：
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Which of the following are likely assumptions you might make about the meaning
    of the magic number 3?
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪些是你可能对魔法数字3的含义做出的合理假设？
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Names instead of numbers
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用名称而不是数字
- en: 'Consider this code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The magic numbers in this code cause it to fail all three of our measures of
    code quality: it’s not safe from bugs (SFB), not easy to understand (ETU) and
    not ready for change (RFC).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中的魔法数字导致它在代码质量的三个度量标准上都失败：不安全（SFB），难以理解（ETU）和不适应变更（RFC）。
- en: For each of the following rewrites, judge whether it improves SFB, ETU, and/or
    RFC, or none of the above.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下每个重写，判断它是否改进了SFB、ETU和/或RFC，或者都没有改进。
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '[PRE24]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: One Purpose For Each Variable
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每个变量只有一个目的
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,one_purpose_for_each_variable/zC0_rI9hoMk)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[**▶︎ 播放 MITx 视频**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,one_purpose_for_each_variable/zC0_rI9hoMk)'
- en: In the `dayOfYear` example, the parameter `dayOfMonth` is reused to compute
    a very different value — the return value of the function, which is not the day
    of the month.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dayOfYear`示例中，参数`dayOfMonth`被重复使用来计算一个非常不同的值——函数的返回值，这不是月份的日期。
- en: Don’t reuse parameters, and don’t reuse variables. Variables are not a scarce
    resource in programming. Introduce them freely, give them good names, and just
    stop using them when you stop needing them. You will confuse your reader if a
    variable that used to mean one thing suddenly starts meaning something different
    a few lines down.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 不要重复使用参数，也不要重复使用变量。在编程中，变量不是一种稀缺资源。自由引入它们，给它们起个好名字，当你不再需要它们时就停止使用。如果一个变量曾经代表一件事情，突然在几行代码后开始代表另一件事情，会让读者感到困惑。
- en: Not only is this an ease-of-understanding question, but it’s also a safety-from-bugs
    and ready-for-change question.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅是一个易于理解的问题，也是一个防止错误和为变更做好准备的问题。
- en: 'Method parameters, in particular, should generally be left unmodified. (This
    is important for being ready-for-change — in the future, some other part of the
    method may want to know what the original parameters of the method were, so you
    shouldn’t blow them away while you’re computing.) It’s a good idea to use `final`
    for method parameters, and as many other variables as you can. The `final` keyword
    says that the variable should never be reassigned, and the Java compiler will
    check it statically. For example:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 方法参数，特别是，通常应该保持不被修改。（这对于做好变更准备很重要——将来，方法的其他部分可能想知道方法的原始参数是什么，所以在计算时不应该将它们清除。）最好使用`final`关键字来声明方法参数，以及尽可能多的其他变量。`final`关键字表示该变量永远不会被重新赋值，并且Java编译器会在静态检查时检查它。例如：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Smelly Example #2'
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '有臭味的示例 #2'
- en: There was a latent bug in `dayOfYear`. It didn’t handle leap years at all. As
    part of fixing that, suppose we write a leap-year method.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`dayOfYear`中存在一个潜在的错误。它根本没有处理闰年。作为修复的一部分，假设我们编写了一个闰年方法。'
- en: '[PRE26]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: What are the bugs hidden in this code? And what style problems that we’ve already
    talked about?
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中隐藏了哪些错误？以及我们已经讨论过的哪些风格问题？
- en: reading exercises
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Mental execution 2016
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 心理执行 2016
- en: 'What happens when you call:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用时会发生什么：
- en: '[PRE27]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Mental execution 2017
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 心理执行 2017
- en: 'What happens when you call:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用时会发生什么：
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)Mental execution 2050
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）Mental execution 2050
- en: 'What happens when you call:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用时会发生什么：
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Mental execution 10016
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Mental execution 10016
- en: 'What happens when you call:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用时会发生什么：
- en: '[PRE30]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Mental execution 916
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Mental execution 916
- en: 'What happens when you call:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用时会发生什么：
- en: '[PRE31]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Magic numbers
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法数字
- en: How many magic numbers are in this code? Count every occurrence if some appear
    more than once.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中有多少个魔法数字？如果某些数字出现多次，请计算每个出现次数。
- en: (missing answer)
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）
- en: (missing explanation)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: DRYing out
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: DRYing out
- en: 'Suppose you wrote the helper function:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你编写了辅助函数：
- en: '[PRE32]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If `leap()` were rewritten to use `isDivisibleBy(year, ...)`, and to correctly
    follow the [**leap year algorithm**](http://en.wikipedia.org/wiki/Leap_year#Algorithm),
    how many magic numbers would be in the code?
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`leap()`被重写为使用`isDivisibleBy(year, ...)`，并正确遵循[**闰年算法**](http://en.wikipedia.org/wiki/Leap_year#Algorithm)，那么代码中会有多少个魔法数字？
- en: (missing answer)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）
- en: (missing explanation)
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Use Good Names
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用好的名称
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,use_good_names/UnQBNYjnMQo)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[**▶︎ 播放 MITx 视频**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,use_good_names/UnQBNYjnMQo)'
- en: Good method and variable names are long and self-descriptive. Comments can often
    be avoided entirely by making the code itself more readable, with better names
    that describe the methods and variables.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的方法和变量名称应该长而自我描述性。通过使代码本身更易读，使用更好的名称来描述方法和变量，通常可以完全避免注释。
- en: For example, you can rewrite
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以重写
- en: '[PRE33]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'as:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如：
- en: '[PRE34]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In general, variable names like `tmp`, `temp`, and `data` are awful, symptoms
    of extreme programmer laziness. Every local variable is temporary, and every variable
    is data, so those names are generally meaningless. Better to use a longer, more
    descriptive name, so that your code reads clearly all by itself.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，像`tmp`、`temp`和`data`这样的变量名很糟糕，是极度懒惰的程序员的症状。每个局部变量都是临时的，每个变量都是数据，所以这些名称通常没有意义。最好使用一个更长、更描述性的名称，这样你的代码就能清晰地阅读。
- en: 'Follow the lexical naming conventions of the language. In Python, classes are
    typically Capitalized, variables are lowercase, and words_are_separated_by_underscores.
    In Java:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循语言的词汇命名惯例。在Python中，类通常大写，变量小写，单词用下划线分隔。在Java中：
- en: methodsAreNamedWithCamelCaseLikeThis
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: methodsAreNamedWithCamelCaseLikeThis
- en: variablesAreAlsoCamelCase
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: variablesAreAlsoCamelCase
- en: CONSTANTS_ARE_IN_ALL_CAPS_WITH_UNDERSCORES
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CONSTANTS_ARE_IN_ALL_CAPS_WITH_UNDERSCORES
- en: ClassesAreCapitalized
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类名首字母大写
- en: packages.are.lowercase.and.separated.by.dots
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: packages.are.lowercase.and.separated.by.dots
- en: Method names are usually verb phrases, like `getDate` or `isUpperCase`, while
    variable and class names are usually noun phrases. Choose short words, and be
    concise, but avoid abbreviations. For example, `message` is clearer than `msg`,
    and `word` is so much better than `wd`. Keep in mind that many of your teammates
    in class and in the real world will not be native English speakers, and abbreviations
    can be even harder for non-native speakers.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 方法名称通常是动词短语，如`getDate`或`isUpperCase`，而变量和类名称通常是名词短语。选择简短的词汇，并简洁，但避免缩写。例如，`message`比`msg`更清晰，`word`比`wd`更好。请记住，你班级和现实世界中的许多队友都不是以英语为母语，缩写对于非母语人士可能更难理解。
- en: ALL_CAPS_WITH_UNDERSCORES is used for `static final` constants. All variables
    declared inside a method, including `final` ones, use camelCaseNames.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: ALL_CAPS_WITH_UNDERSCORES用于`static final`常量。方法内声明的所有变量，包括`final`变量，都使用camelCaseNames。
- en: 'The `leap` method has bad names: the method name itself, and the local variable
    name. What would you call them instead?'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`leap`方法的命名不好：方法名称本身和局部变量名称。你会给它们起什么名字呢？'
- en: reading exercises
  id: totrans-210
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Better method names
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的方法名
- en: '[PRE35]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Which of the following are good names for the `leap()` method?
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪些是`leap()`方法的好名字？
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)(缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: Better variable names
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的变量名
- en: Which of the following are good names for the `tmp` variable inside `leap()`?
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪些是`leap()`函数内`tmp`变量的良好命名？
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)(缺失答案)(缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: Use Whitespace to Help the Reader
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用空格帮助读者
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,use_whitespace_to_help_the_reader/oQfeQtbsDb0)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[**▶︎ 播放MITx视频**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,use_whitespace_to_help_the_reader/oQfeQtbsDb0)'
- en: Use consistent indentation. The `leap` example is bad at this. The `dayOfYear`
    example is much better. In fact, `dayOfYear` nicely lines up all the numbers into
    columns, making them easy for a human reader to compare and check. That’s a great
    use of whitespace.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一致的缩进。`leap`示例在这方面做得很糟糕。`dayOfYear`示例要好得多。事实上，`dayOfYear`很好地将所有数字对齐成列，使人类读者可以轻松比较和检查。这是空格的一个很好的运用。
- en: Put spaces within code lines to make them easy to read. The leap example has
    some lines that are packed together — put in some spaces.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码行内部放置空格，使其易于阅读。`leap`示例中有一些紧密排列的行——加入一些空格。
- en: Never use tab characters for indentation, only space characters. Note that we
    say *characters*, not keys. We’re not saying you should never press the Tab key,
    only that your editor should never put a tab character into your source file in
    response to your pressing the Tab key. The reason for this rule is that different
    tools treat tab characters differently — sometimes expanding them to 4 spaces,
    sometimes to 2 spaces, sometimes to 8\. If you run “git diff” on the command line,
    or if you view your source code in a different editor, then the indentation may
    be completely screwed up. Just use spaces. Always set your programming editor
    to insert space characters when you press the Tab key.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 缩进时永远不要使用制表符，只能使用空格字符。请注意我们说的是*字符*，而不是键。我们并不是说你永远不应该按Tab键，只是你的编辑器不应该在你按Tab键时向源文件中插入制表符。这条规则的原因是不同的工具对制表符的处理方式不同——有时将它们扩展为4个空格，有时为2个空格，有时为8个空格。如果在命令行上运行“git
    diff”，或者在不同的编辑器中查看源代码，那么缩进可能会完全混乱。只使用空格。始终将编程编辑器设置为在按Tab键时插入空格字符。
- en: 'Smelly Example #3'
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有问题的示例#3
- en: Here’s a third example of smelly code that will illustrate the remaining points
    of this reading.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第三个例子，展示了本阅读剩余部分的要点。
- en: '[PRE36]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Don’t Use Global Variables
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要使用全局变量
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,dont_use_global_variables/HIxWGVy1Fqo)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[**▶︎ 播放MITx视频**](https://courses.csail.mit.edu/6.005/video/reading_4_code_review,dont_use_global_variables/HIxWGVy1Fqo)'
- en: 'Avoid global variables. Let’s break down what we mean by *global variable*.
    A global variable is:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 避免使用全局变量。让我们来解释一下*全局变量*的含义。全局变量是：
- en: a *variable*, a name whose meaning can be changed
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个*变量*，其含义可以更改的名称
- en: that is *global*, accessible and changeable from anywhere in the program.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局的，可以从程序的任何地方访问和更改的变量。
- en: '[Why Global Variables Are Bad](http://c2.com/cgi/wiki?GlobalVariablesAreBad)
    ([cached version](http://web.archive.org/web/20160902115611/http://c2.com/cgi/wiki?GlobalVariablesAreBad))
    has a good list of the dangers of global variables.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[为什么全局变量是不好的](http://c2.com/cgi/wiki?GlobalVariablesAreBad)（[缓存版本](http://web.archive.org/web/20160902115611/http://c2.com/cgi/wiki?GlobalVariablesAreBad)）列出了全局变量的危险性。'
- en: In Java, a global variable is declared `public static`. The `public` modifier
    makes it accessible anywhere, and `static` means there is a single instance of
    the variable.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，全局变量声明为`public static`。`public`修饰符使其可以在任何地方访问，而`static`表示变量只有一个实例。
- en: In general, change global variables into parameters and return values, or put
    them inside objects that you’re calling methods on. We’ll see many techniques
    for doing that in future readings.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，将全局变量转换为参数和返回值，或将它们放在你正在调用方法的对象内部。我们将在未来的阅读中看到许多实现这一点的技术。
- en: reading exercises
  id: totrans-236
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Identifying global variables
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 识别全局变量
- en: In this code, which of these are global variables?
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中，哪些是全局变量？
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)(缺失答案)(缺失答案)(缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: Effect of final
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: final的效果
- en: Making a variable into a constant by adding the `final` keyword can eliminate
    the risk of global variables. What happens to each of these when the `final` keyword
    is added?
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加`final`关键字将变量转换为常量可以消除全局变量的风险。当添加`final`关键字时，每个变量会发生什么变化？
- en: '`n`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`n`'
- en: <select class="form-control"><option>becomes constant</option>,<option>doesn’t
    become constant</option>,<option>error before program starts</option>,<option>error
    while program is running</option></select>(missing answer)
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>变成常量</option>,<option>不变成常量</option>,<option>程序启动前出错</option>,<option>程序运行时出错</option></select>(缺失答案)
- en: (missing explanation)
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '`LONG_WORD_LENGTH`'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`LONG_WORD_LENGTH`'
- en: <select class="form-control"><option>becomes constant</option>,<option>doesn’t
    become constant</option>,<option>error before program starts</option>,<option>error
    while program is running</option></select>(missing answer)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>变成常量</option>,<option>不变成常量</option>,<option>程序启动前出错</option>,<option>程序运行时出错</option></select>(缺失答案)
- en: (missing explanation)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '`longestWord`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`longestWord`'
- en: <select class="form-control"><option>becomes constant</option>,<option>doesn’t
    become constant</option>,<option>error before program starts</option>,<option>error
    while program is running</option></select>(missing answer)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>变成常量</option>,<option>不变成常量</option>,<option>程序启动前出错</option>,<option>程序运行时出错</option></select>(缺失答案)
- en: (missing explanation)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '`word`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`word`'
- en: <select class="form-control"><option>becomes constant</option>,<option>doesn’t
    become constant</option>,<option>error before program starts</option>,<option>error
    while program is running</option></select>(missing answer)
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>变成常量</option>,<option>不变成常量</option>,<option>程序启动前出错</option>,<option>程序运行时出错</option></select>(缺失答案)
- en: (missing explanation)
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '`words`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`words`'
- en: <select class="form-control"><option>becomes constant</option>,<option>doesn’t
    become constant</option>,<option>error before program starts</option>,<option>error
    while program is running</option></select>(missing answer)
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>变成常量</option>,<option>不变成常量</option>,<option>程序启动前出错</option>,<option>程序运行时出错</option></select>(缺失答案)
- en: (missing explanation)
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Methods Should Return Results, not Print Them
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法应该返回结果，而不是打印它们
- en: '`countLongWords` isn’t ready for change. It sends some of its result to the
    console, `System.out`. That means that if you want to use it in another context
    — where the number is needed for some other purpose, like computation rather than
    human eyes — it would have to be rewritten.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`countLongWords`还没有做好变化的准备。它将一些结果发送到控制台`System.out`。这意味着，如果您想在另一个上下文中使用它——在该上下文中，该数字需要用于其他目的，例如计算而不是人眼——它将不得不被重新编写。'
- en: In general, only the highest-level parts of a program should interact with the
    human user or the console. Lower-level parts should take their input as parameters
    and return their output as results. The sole exception here is debugging output,
    which can of course be printed to the console. But that kind of output shouldn’t
    be a part of your design, only a part of how you debug your design.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，程序的最高级部分应该与人类用户或控制台进行交互。较低级别的部分应该将其输入作为参数并将其输出作为结果返回。这里唯一的例外是调试输出，当然可以将其打印到控制台上。但是，那种输出不应该成为你设计的一部分，只应该成为你调试设计的一部分。
- en: Summary
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Code review is a widely-used technique for improving software quality by human
    inspection. Code review can detect many kinds of problems in code, but as a starter,
    this reading talked about these general principles of good code:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查是一种通过人工检查来提高软件质量的广泛使用的技术。代码审查可以检测代码中许多种类的问题，但作为一个入门者，本文讨论了以下关于良好代码的一般原则：
- en: Don’t Repeat Yourself (DRY)
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要重复自己（DRY）
- en: Comments where needed
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要注释的地方
- en: Fail fast
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速失败
- en: Avoid magic numbers
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免魔法数字
- en: One purpose for each variable
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个变量只有一个目的
- en: Use good names
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用良好的名称
- en: No global variables
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无全局变量
- en: Return results, don’t print them
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回结果，不要打印它们
- en: Use whitespace for readability
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用空白以提高可读性
- en: 'The topics of today’s reading connect to our three key properties of good software
    as follows:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 今天阅读的主题与我们的三个关键软件特性相关如下：
- en: '**Safe from bugs.** In general, code review uses human reviewers to find bugs.
    DRY code lets you fix a bug in only one place, without fear that it has propagated
    elsewhere. Commenting your assumptions clearly makes it less likely that another
    programmer will introduce a bug. The Fail Fast principle detects bugs as early
    as possible. Avoiding global variables makes it easier to localize bugs related
    to variable values, since non-global variables can be changed in only limited
    places in the code.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**免受错误侵扰。** 通常，代码审查使用人类审阅员来发现错误。DRY代码使您可以在一个地方修复错误，而不必担心它已在其他地方蔓延。清楚地注释您的假设使得其他程序员引入错误的可能性更小。Fail
    Fast 原则尽可能早地检测到错误。避免使用全局变量使得更容易局部化与变量值相关的错误，因为非全局变量只能在代码中的有限位置更改。'
- en: '**Easy to understand.** Code review is really the only way to find obscure
    or confusing code, because other people are reading it and trying to understand
    it. Using judicious comments, avoiding magic numbers, keeping one purpose for
    each variable, using good names, and using whitespace well can all improve the
    understandability of code.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于理解。** 代码审查实际上是找到晦涩或令人困惑的代码的唯一方法，因为其他人在阅读它并试图理解它。适度使用注释，避免使用神奇数字，使每个变量只有一个目的，使用良好的命名以及合理使用空白都可以提高代码的可理解性。'
- en: '**Ready for change.** Code review helps here when it’s done by experienced
    software developers who can anticipate what might change and suggest ways to guard
    against it. DRY code is more ready for change, because a change only needs to
    be made in one place. Returning results instead of printing them makes it easier
    to adapt the code to a new purpose.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准备变革。** 当由有经验的软件开发人员进行代码审查时，他们可以预见可能发生的变化并提出防范措施。DRY（Don''t Repeat Yourself）的代码更容易应对变化，因为只需在一个地方进行更改。返回结果而不是将其打印出来使得将代码适应新目的更容易。'
- en: '* * *'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Remember the exercises
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记住这些练习
- en: At this point you should have completed all the reading exercises above.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，你应该已经完成了上述所有的阅读练习。
- en: Completing the reading exercises prepares you for the *nanoquiz* at the beginning
    of each class meeting, and submitting the exercises is required by 10pm the evening
    before class.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 完成阅读练习可以为每次课堂会议开始时的*微小测验*做准备，并且要求在课前晚上`10pm`前提交练习。
