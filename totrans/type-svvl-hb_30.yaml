- en: シングルプロセス・シングルスレッドとコールバック
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: シングルプロセス・シングルスレッドとコールバック
- en: 原文：[https://typescriptbook.jp/reference/single-process-and-callback](https://typescriptbook.jp/reference/single-process-and-callback)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/reference/single-process-and-callback](https://typescriptbook.jp/reference/single-process-and-callback)
- en: コンピューティング。特に並列、並行処理をするプログラミングに入ってくるとプロセス、スレッドという言葉を耳にするようになります。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: コンピューティング。特に並列、並行処理をするプログラミングに入ってくるとプロセス、スレッドという言葉を耳にするようになります。
- en: JavaScriptはシングルプロセス、シングルスレッドの言語です。これは言い換えるとすべてのプログラムは直列に処理されることを意味します。シングルスレッドの言語はコールスタックも1個です。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptはシングルプロセス、シングルスレッドの言語です。これは言い換えるとすべてのプログラムは直列に処理されることを意味します。シングルスレッドの言語はコールスタックも1個です。
- en: コールスタックとは実行している関数の呼び出しの順序を司っているものです。スタックという言葉自体は関数の再帰呼び出しを誤って無限ループにしてしまった時に目にしたことがある人が多いのではないでしょうか。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: コールスタックとは実行している関数の呼び出しの順序を司っているものです。スタックという言葉自体は関数の再帰呼び出しを誤って無限ループにしてしまった時に目にしたことがある人が多いのではないでしょうか。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ブロッキング[​](#ブロッキング "ブロッキング への直接リンク")
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ブロッキング[​](#ブロッキング "ブロッキング への直接リンク")
- en: 直列に処理されるということは、時間のかかる処理があるとその間は他の処理が実行されないことを意味します。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 直列に処理されるということは、時間のかかる処理があるとその間は他の処理が実行されないことを意味します。
- en: ブラウザでAJAX通信を実装したことがある方は多いでしょう。AJAXはリクエストを送信してからレスポンスを受信するまでの間は待ち時間になりますが、直列で処理するのであればJavaScriptはこの間も他の処理ができないことになります。これをブロッキングと言います。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ブラウザでAJAX通信を実装したことがある方は多いでしょう。AJAXはリクエストを送信してからレスポンスを受信するまでの間は待ち時間になりますが、直列で処理するのであればJavaScriptはこの間も他の処理ができないことになります。これをブロッキングと言います。
- en: JavaScriptはブラウザで発生するクリック、各種input要素からの入力、ブラウザの履歴の戻る進むなど、各種イベントをハンドリングできる言語ですが、時間のかかる処理が実行されている間はブロッキングが起こるためこれらの操作をハンドリングできなくなります。画面の描画もJavaScriptに任せていた場合はさらに画面が止まったように見えるでしょう。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptはブラウザで発生するクリック、各種input要素からの入力、ブラウザの履歴の戻る進むなど、各種イベントをハンドリングできる言語ですが、時間のかかる処理が実行されている間はブロッキングが起こるためこれらの操作をハンドリングできなくなります。画面の描画もJavaScriptに任せていた場合はさらに画面が止まっ���ように見えるでしょう。
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 上記のメソッドたちはどれも実在するメソッドではありませんが、おおよその意味を理解していただければ問題ありません。これを先入観なく見ると
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上記のメソッドたちはどれも実在するメソッドではありませんが、おおよその意味を理解していただければ問題ありません。これを先入観なく見ると
- en: AJAXを開始する
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AJAXを開始する
- en: 3000ms待つ
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3000ms待つ
- en: AJAXが終わっていなかったら
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AJAXが終わっていなかったら
- en: AJAXを中止する
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AJAXを中止する
- en: のように見えるかもしれませんが、これはその意図した動作にはなりません。実際には次のようになります。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: のように見えるかもしれませんが、これはその意図した動作にはなりません。実際には次のようになります。
- en: AJAXをして、結果を取得する（ブロックして戻ってきたら2に進む)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AJAXをして、結果を取得する（ブロックして戻ってきたら2に進む)
- en: 3000ms待つ
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3000ms待つ
- en: AJAXが終わっていなかったら(すでに終了している)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AJAXが終わっていなかったら(すでに終了している)
- en: AJAXを中止する
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AJAXを中止する
- en: となります。もちろん`ajaxDone()`は`ajax()`の時点で結果にかかわらず終了しているため`cancelAjax()`は実行されません。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: となります。もちろん`ajaxDone()`は`ajax()`の時点で結果にかかわらず終了しているため`cancelAjax()`は実行されません。
- en: ノンブロッキング[​](#ノンブロッキング "ノンブロッキング への直接リンク")
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ノンブロッキング[​](#ノンブロッキング "ノン��ロッキング への��接リンク")
- en: ブロッキングの逆の概念です。Node.jsはノンブロッキングI/Oを取り扱うことができます。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ブロッキングの逆の概念です。Node.jsはノンブロッキングI/Oを取り扱うことができます。
- en: これは入出力の処理が終わるまで待たずにすぐに呼び出し元に結果を返し、追って別の方法で結果を伝える方式を指します。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: これは入出力の処理が終わるまで待たずにすぐに呼び出し元に結果を返し、追って別の方法で結果を伝える方式を指します。
- en: ここで指している入出力とはアプリケーションが動くマシン(サーバー)が主にリポジトリと呼ばれるようなファイル、リクエスト、DBなど他のデータがある場所へのアクセスを指す時に使われます。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: ここで指している入出力とはアプリケーションが動くマシン(サーバー)が主にリポジトリと呼ばれるようなファイル、リクエスト、DBなど他のデータがある場所へのアクセスを指す時に使われます。
- en: ノンブロッキングかわかりやすい例としては次のようなものがあります。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ノンブロッキングかわかりやすい例としては次のようなものがあります。
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`setTimeout()`は実際に存在する関数です。第2引数では指定したミリ秒後に第1引数の関数を実行します。ここでは1000を指定しているので、1000ミリ秒、つまり1秒後となります。'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTimeout()`は実際に存在する関数です。第2引数では指定したミリ秒後に第1引数の関数を実行します。ここでは1000を指定しているので、1000ミリ秒、つまり1秒後となります。'
- en: JavaScriptを始めて日が浅い方はこのコードに対する出力を次のように考えます。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptを始めて日が浅い方はこのコードに対する出力を次のように考えます。
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 実際の出力は以下です。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 実際の出力は以下です。
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`setTimeout()`がノンブロッキングな関数です。この関数は実行されると第1引数の関数をいったん保留し、処理を終えます。そのため次の`console.log(''third'')`が実行され、1000ミリ秒後に第1引数の関数が実行され、中にある`console.log(''second'')`が実行されます。'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTimeout()`がノンブロッキングな関数です。この関数は実行されると第1引数の関数をいったん保留し、処理を終えます。そのため次の`console.log(''third'')`が実行され、1000ミリ秒後に第1引数の関数が実行され、中にある`console.log(''second'')`が実行されます。'
- en: 1000ミリ秒は待ちすぎ、もっと短ければ意図する順番通りに表示される。と思われるかもしれませんが、基本的に意図するとおりにはなりません。以下は第2引数を1000ミリ秒から0ミリ秒に変更した例ですが、出力される内容は変更前と変わりません。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 1000ミリ秒は待ちすぎ、もっと短ければ意図する順番通りに表示される。と思われるかもしれませんが、基本的に意図するとおりにはなりません。以下は第2引数を1000ミリ秒から0ミリ秒に変更した例ですが、出力される内容は変更前と変わりません。
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 現実世界の料理に例えてみるとわかりやすいかもしれません。お米を炊いている40分間、ずっと炊飯器の前で待機する料理人はおらず、その間に別のおかずを作るでしょう。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 現実世界の料理に例えてみるとわかりやすいかもしれません。お米を炊いている40分間、ずっと炊飯器の前で待機する料理人はおらず、その間に別のおかずを作るでしょう。
- en: 時間はかかるものの待機が多い作業、炊飯器なら炊飯ボタンを押したら炊き上がるまでの間待たずに他の処理の実行に移ることがノンブロッキングを意味します。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 時間はかかるものの待機が多い作業、炊飯器なら炊飯ボタンを押したら炊き上がるまでの間待たずに他の処理の実行に移ることがノンブロッキングを意味します。
- en: ノンブロッキングを成し遂げるための立役者[​](#ノンブロッキングを成し遂げるための立役者 "ノンブロッキングを成し遂げるための立役者 への直接リンク")
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ノンブロッキングを成し遂げるための立役者[​](#ノンブロッキングを成し遂げるための立役者 "ノンブロッキングを成し遂げるための立役者 への直接リンク")
- en: ノンブロッキングを語る上で欠かせない、必ず目にすることになるであろう縁の下の力持ちを紹介します。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: ノンブロッキングを語る上で欠かせない、必ず目にすることになるであろう縁の下の力持ちを紹介します。
- en: メッセージキュー[​](#メッセージキュー "メッセージキュー への直接リンク")
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: メッセージキュー[​](#メッセージキュー "メッセージキュー への直接リンク")
- en: メッセージキューとはユーザーからのイベントや、ブラウザからのイベントなどを一時的に蓄えておく領域です。メッセージキューに蓄積されたイベントはコールスタックが空のときにひとつずつコールスタックに戻されます。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: メッセージキューとはユーザーからのイベントや、ブラウザからのイベントなどを一時的に蓄えておく領域です。メッセージキューに蓄積されたイベントはコールスタックが空のときにひとつずつコールスタックに戻されます。
- en: コールバック[​](#コールバック "コールバック への直接リンク")
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: コールバック[​](#コールバック "コールバック への直接リンク")
- en: '`setTimeout()`のときに説明した**いったん保留した関数**は、いわゆるコールバック関数と呼ばれます。前項で述べた、**追って別の方法で伝える**というのは、このコールバック関数のことです。'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTimeout()`のときに説明した**いったん保留した関数**は、いわゆるコールバック関数と呼ばれます。前項で述べた、**追って別の方法で伝える**というのは、このコールバック関数のことです。'
- en: コールバック関数は、ある関数が条件を満たした時、前項の例だと1000ミリ秒後に、メッセージキューに蓄積されます。メッセージキューに蓄積されるだけなので、実際に実行されるのはコールスタックが空になるまでさらに時間がかかります。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: コールバック関数は、ある関数が条件を満たした時、前項の例だと1000ミリ秒後に、メッセージキューに蓄積されます。メッセージキューに蓄積されるだけなので、実際に実行されるのはコールスタックが空になるまでさらに時間がかかります。
- en: いままで`setTimeout()`は第2引数のミリ秒だけ遅延させてコールバック関数を実行すると説明していましたが、厳密にはミリ秒経過後にメッセージキューに戻すだけで、そのコールバック関数が即座に実行されるわけではありません。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: いままで`setTimeout()`は第2引数のミリ秒だけ遅延させてコールバック関数を実行すると説明していましたが、厳密にはミリ秒経過後にメッセージキューに戻すだけで、そのコールバック関数が即座に実行されるわけではありません。
- en: イベントループ[​](#イベントループ "イベントループ への直接リンク")
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: イベントループ[​](#イベントループ "イベントループ への直接リンク")
- en: イベントループは単純な無限ループです。常にコールスタックを監視しており、イベントがあればそれを実行します。普通の関数呼び出しのスタック以外にもメッセージキューが戻してきたイベントも処理します。現時点では詳しくは説明しませんが、ずっとイベントをどうにかしてくれているやつがいるなー、程度の認識でオッケーです！
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: イベントループは単純な無限ループです。常にコールスタックを監視しており、イベントがあればそれを実行します。普通の関数呼び出しのスタック以外にもメッセージキューが戻してきたイベントも処理します。現時点では詳しくは説明しませんが、ずっとイベントをどうにかしてくれているやつがいるなー、程度の認識でオッケーです！
- en: ノンブロッキングの弊害[​](#ノンブロッキングの弊害 "ノンブロッキングの弊害 への直接リンク")
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ノンブロッキングの弊害[​](#ノンブロッキングの弊害 "ノンブロッキングの弊害 への直接リンク")
- en: ノンブロッキングにはたくさんいいところがあって頼れる仲間ですが、そのノンブロッキングが時として唐突に牙を剥くことがあります。こわいですねぇ。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ノンブロッキングにはたくさんいいところがあって頼れる仲間ですが、そのノンブロッキングが時として唐突に牙を剥くことがあります。こわいですねぇ。
- en: コールバック地獄(Callback hell)[​](#コールバック地獄callback-hell "コールバック地獄(Callback hell) への直接リンク")
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回调地狱（Callback hell）[​](#コールバック地獄callback-hell "直达回调地狱（Callback hell）的链接")
- en: コールバック界における**負の産物**です。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 回调地狱中的**负面产物**。
- en: 一般的にコールバックは、ある一定の時間を要する処理結果を後から受け取るために使われます。コールバックを採用している関数は主に次のような形をしています。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一般情况下，回调函数用于接收需要一定时间才能完成的处理结果。采用回调函数的函数主要具有以下形式。
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: この関数を使う時はこのようになります。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用这个函数时，会是这样的。
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: ここで、この関数`ajax()`の結果を受けてさらに`ajax()`を使いたいとすると、このようになってしまいます。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果想要接收这个函数`ajax()`的结果并进一步使用`ajax()`，就会变成这样。
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: インデント(ネスト)が深くなります。これが何度も続くと見るに堪えなくなります。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 缩进（嵌套）会变得很深。如果这种情况反复出现，就会变得难以忍受。
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: このコールバック地獄を解消する画期的なクラスとして`Promise`が登場し主要なブラウザとNode.jsではビルトインオブジェクトとして使うことができます。こちらの説明については本書に専用のページがありますのでそちらをご参照ください。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作为解决这种回调地狱的划时代类的`Promise`出现了，在主要的浏览器和Node.js中可以作为内置对象使用。关于这个功能的说明，本书有专门的页面，请参考那里。
- en: '[## 📄️ 非同期処理'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ 异步处理'
- en: もしJavaScriptで本格的に何かを作りたいのであれば、非同期処理とは切っても切れない関係になるでしょう。初めのうちは理解に苦しむことが多いですが今では非同期処理を直観的に操作できる機能が実装されたのでハードルは大きく下がりました。](/reference/asynchronous)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想要在JavaScript中真正地构建一些东西，那么与异步处理将会有密不可分的关系。一开始可能会很难理解，但现在已经实现了可以直观操作异步处理的功能，因此门槛大大降低了。](/reference/asynchronous)
