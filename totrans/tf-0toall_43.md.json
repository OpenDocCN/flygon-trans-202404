["```\n# Lab 11 MNIST and Deep learning CNN\n# https://www.tensorflow.org/tutorials/layers\nimport tensorflow as tf\nimport numpy as np\n\nfrom tensorflow.examples.tutorials.mnist import input_data\n\ntf.set_random_seed(777)  # reproducibility\n\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n# Check out https://www.tensorflow.org/get_started/mnist/beginners for\n# more information about the mnist dataset\n\n# hyper parameters\nlearning_rate = 0.001\ntraining_epochs = 20\nbatch_size = 100\n\nclass Model:\n\n    def __init__(self, sess, name):\n        self.sess = sess\n        self.name = name\n        self._build_net()\n\n    def _build_net(self):\n        with tf.variable_scope(self.name):\n            # dropout (keep_prob) rate  0.7~0.5 on training, but should be 1\n            # for testing\n            self.training = tf.placeholder(tf.bool)\n\n            # input place holders\n            self.X = tf.placeholder(tf.float32, [None, 784])\n\n            # img 28x28x1 (black/white), Input Layer\n            X_img = tf.reshape(self.X, [-1, 28, 28, 1])\n            self.Y = tf.placeholder(tf.float32, [None, 10])\n\n            # Convolutional Layer #1\n            conv1 = tf.layers.conv2d(inputs=X_img, filters=32, kernel_size=[3, 3],\n                                     padding=\"SAME\", activation=tf.nn.relu)\n            # Pooling Layer #1\n            pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2],\n                                            padding=\"SAME\", strides=2)\n            dropout1 = tf.layers.dropout(inputs=pool1,\n                                         rate=0.3, training=self.training)\n\n            # Convolutional Layer #2 and Pooling Layer #2\n            conv2 = tf.layers.conv2d(inputs=dropout1, filters=64, kernel_size=[3, 3],\n                                     padding=\"SAME\", activation=tf.nn.relu)\n            pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2],\n                                            padding=\"SAME\", strides=2)\n            dropout2 = tf.layers.dropout(inputs=pool2,\n                                         rate=0.3, training=self.training)\n\n            # Convolutional Layer #3 and Pooling Layer #3\n            conv3 = tf.layers.conv2d(inputs=dropout2, filters=128, kernel_size=[3, 3],\n                                     padding=\"SAME\", activation=tf.nn.relu)\n            pool3 = tf.layers.max_pooling2d(inputs=conv3, pool_size=[2, 2],\n                                            padding=\"SAME\", strides=2)\n            dropout3 = tf.layers.dropout(inputs=pool3,\n                                         rate=0.3, training=self.training)\n\n            # Dense Layer with Relu\n            flat = tf.reshape(dropout3, [-1, 128 * 4 * 4])\n            dense4 = tf.layers.dense(inputs=flat,\n                                     units=625, activation=tf.nn.relu)\n            dropout4 = tf.layers.dropout(inputs=dense4,\n                                         rate=0.5, training=self.training)\n\n            # Logits (no activation) Layer: L5 Final FC 625 inputs -> 10 outputs\n            self.logits = tf.layers.dense(inputs=dropout4, units=10)\n\n        # define cost/loss & optimizer\n        self.cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n            logits=self.logits, labels=self.Y))\n        self.optimizer = tf.train.AdamOptimizer(\n            learning_rate=learning_rate).minimize(self.cost)\n\n        correct_prediction = tf.equal(\n            tf.argmax(self.logits, 1), tf.argmax(self.Y, 1))\n        self.accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n    def predict(self, x_test, training=False):\n        return self.sess.run(self.logits,\n                             feed_dict={self.X: x_test, self.training: training})\n\n    def get_accuracy(self, x_test, y_test, training=False):\n        return self.sess.run(self.accuracy,\n                             feed_dict={self.X: x_test,\n                                        self.Y: y_test, self.training: training})\n\n    def train(self, x_data, y_data, training=True):\n        return self.sess.run([self.cost, self.optimizer], feed_dict={\n            self.X: x_data, self.Y: y_data, self.training: training})\n\n# initialize\nsess = tf.Session()\n\nmodels = []\nnum_models = 2\nfor m in range(num_models):\n    models.append(Model(sess, \"model\" + str(m)))\n\nsess.run(tf.global_variables_initializer())\n\nprint('Learning Started!')\n\n# train my model\nfor epoch in range(training_epochs):\n    avg_cost_list = np.zeros(len(models))\n    total_batch = int(mnist.train.num_examples / batch_size)\n    for i in range(total_batch):\n        batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n\n        # train each model\n        for m_idx, m in enumerate(models):\n            c, _ = m.train(batch_xs, batch_ys)\n            avg_cost_list[m_idx] += c / total_batch\n\n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', avg_cost_list)\n\nprint('Learning Finished!')\n\n# Test model and check accuracy\ntest_size = len(mnist.test.labels)\npredictions = np.zeros([test_size, 10])\nfor m_idx, m in enumerate(models):\n    print(m_idx, 'Accuracy:', m.get_accuracy(\n        mnist.test.images, mnist.test.labels))\n    p = m.predict(mnist.test.images)\n    predictions += p\n\nensemble_correct_prediction = tf.equal(\n    tf.argmax(predictions, 1), tf.argmax(mnist.test.labels, 1))\nensemble_accuracy = tf.reduce_mean(\n    tf.cast(ensemble_correct_prediction, tf.float32))\nprint('Ensemble accuracy:', sess.run(ensemble_accuracy))\n\n'''\n0 Accuracy: 0.9933\n1 Accuracy: 0.9946\n2 Accuracy: 0.9934\n3 Accuracy: 0.9935\n4 Accuracy: 0.9935\n5 Accuracy: 0.9949\n6 Accuracy: 0.9941\n\nEnsemble accuracy: 0.9952\n''' \n```"]