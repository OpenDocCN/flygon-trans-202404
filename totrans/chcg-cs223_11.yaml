- en: More Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多动画
- en: We'll work through a couple more examples that deal with time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过几个处理时间的示例进行更多工作。
- en: 'Example: Stopwatch'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：秒表
- en: Previously, we implemented a counter controlled by increment and reset buttons.
    Now let's implement a "stopwatch" counter that increments every so often (say,
    every second), along with buttons that pause and resume the counter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们实现了一个由增量和重置按钮控制的计数器。现在让我们实现一个"秒表"计数器，每隔一段时间（比如，每秒）增加一次，同时还有暂停和恢复计数器的按钮。
- en: We start by identifying that, in addition to the count itself, the `State` of
    our application needs to keep track of whether the stopwatch is currently `Paused`
    or `Playing`. In the latter case, we also keep track of the next `Time` at which
    to update the count.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要确定，除了计数本身之外，我们的应用程序的`State`还需要跟踪秒表当前是`Paused`还是`Playing`。在后一种情况下，我们还要跟踪下一个更新计数的`Time`。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We define the type `Msg` to describe the messages sent as a result of button
    clicks. We will want to merge the signal of button `Msg`s with a signal of `Time`
    values, so we define an `Event` time to describe the union of these two types.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义类型`Msg`来描述由于按钮点击而发送的消息。我们希望将按钮`Msg`的信号与`Time`值的信号合并，因此我们定义了一个`Event`时间来描述这两种类型的联合。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Merging Time and Other Signals
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 合并时间和其他信号
- en: Both kinds of `Event`s carry along the time at which an updated value is produced,
    but extracting this value is slightly annoying because we would have use pattern
    matching to obtain the first component. Furthermore, we have previously seen this
    pattern of merging a signal with a ticker (in the fading dots example). So, instead
    of the `Event` type definition above, we can factor this pattern more generally.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 两种`Event`都携带生成更新值的时间，但提取这个值稍微麻烦，因为我们必须使用模式匹配来获取第一个组件。此外，我们以前已经看到了这种将信号与计时器合并的模式（在淡出点示例中）。因此，我们可以更一般地因素化上面的`Event`类型定义。
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice how we use the type variable `msg` as an indication that we are going
    to instantiate it with the `Msg` type. But, of course, we could have chosen to
    use any type variable we wish (except `number` or `comparable`, which would be
    unnecessarily restrictive).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们如何使用类型变量`msg`作为我们将用`Msg`类型实例化它的指示。但是，当然，我们可以选择使用任何我们希望的类型变量（除了`number`或`comparable`，这将是不必要的限制）。
- en: We can now define the following function to merge an arbitrary signal together
    with a ticker that takes an arbitrary signal
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以定义以下函数，将任意信号与每秒更新一次的计时器合并在一起
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After defining the channel `ch` to pass along `Start` and `Stop` messages originating
    from the buttons we will draw, we merge its values with a ticker that updates
    ten times per second.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义通道`ch`以传递来自我们将绘制的按钮的`Start`和`Stop`消息之后，我们将其值与每秒更新十次的计时器合并。
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finite State Machines
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有限状态机
- en: Next, we'll look at how to update our stopwatch in response to `Event`s. There
    are two kinds of `RunState` states (`Paused` and `Playing`) and three kinds of
    `TickOr Msg` messages (`Tick`, `Start`, and `Stop`). So, we can think of the execution
    of our application in terms of a transition graph, where nodes are `RunState`s
    and edges of `TickOr Msg`s.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何响应`Event`更新我们的秒表。有两种`RunState`状态（`Paused`和`Playing`）和三种`TickOr Msg`消息（`Tick`，`Start`和`Stop`）。因此，我们可以将我们的应用程序的执行视为一个转换图，其中节点是`RunState`，边缘是`TickOr
    Msg`。
- en: '![](../Images/0662a156872909aaf52240f45907b005.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0662a156872909aaf52240f45907b005.jpg)'
- en: 'Notice that our diagram omits two transitions: there is no edge labeled `Stop`
    from node `Paused` and no edge labeled `Start` from node `Playing`. As a result,
    we will take care to make sure that our application does not enter one of these
    undefined configurations.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的图表省略了两个转换：从节点`Paused`到标记为`Stop`的边缘，以及从节点`Playing`到标记为`Start`的边缘。因此，我们将确保我们的应用程序不会进入这些未定义的配置之一。
- en: We define the `upstate` function to handle each of the transitions above.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义`upstate`函数来处理上述每个转换。
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When processing the `Start` message at time `now`, the updated `Playing` state
    records the time `now + delay` at which the counter should be incremented. If
    a `Tick` message is received while the stopwatch is `Playing`, then the count
    is incremented if the current time is larger than the previously computed time
    at which to increment. Furthermore, the updated state includes the next time at
    which to updated the counter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在时间`now`处理`Start`消息时，更新的`Playing`状态记录了应该增加计数器的时间`now + delay`。如果在秒表处于`Playing`状态时收到`Tick`消息，则如果当前时间大于先前计算的应该增加计数器的时间，则增加计数。此外，更新的状态包括下次更新计数器的时间。
- en: As informed by our transition diagram, our patterns are not exhaustive. Because
    we'll be running our application in the browser, rather than `elm-repl`, a run-time
    pattern match exception will be raised silently. If you suspect that your Elm
    program is crashing silently, open up the Web Console in your browser to take
    a look at any JavaScript errors raised.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的转换图，我们的模式并不全面。因为我们将在浏览器中运行我们的应用程序，而不是在`elm-repl`中，所以会悄无声息地引发运行时模式匹配异常。如果您怀疑您的Elm程序在悄无声息地崩溃，请在浏览器中打开Web控制台查看引发的任何JavaScript错误。
- en: Let's now draw our UI such that we never enter into one of the undefined configurations.
    We'll reuse the `myButton` function we developed in previous lectures that uses
    the `Collage` library to draw a nice, bordered button that changes colors. We'll
    draw a single button, and we'll set its message to send (either `Start` or `Stop`)
    depending on the current `RunState`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们绘制我们的UI，以便我们永远不会进入未定义的配置之一。我们将重用我们在以前的讲座中开发的`myButton`函数，该函数使用`Collage`库绘制一个漂亮的有边框的按钮，可以更改颜色。我们将绘制一个单一的按钮，并根据当前的`RunState`设置其要发送的消息（`Start`或`Stop`）。
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: notice how we choose to display only a single button at a time, which issues
    only the signals that are allowed by the finite state machine above. rather than
    drawing multiple buttons, we draw a single one and choose the event appropriately.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们选择一次只显示一个按钮，只发出有限状态机允许的信号。而不是绘制多个按钮，我们绘制一个单一的按钮，并适当选择事件。
- en: We have been careful to convince ourselves, if not the language, that we will
    never attempt to follow an undefined transition at run-time. Alternatively, we
    could have chosen to define a single `Msg` value called `Toggle` or `()`, where
    `upstate` toggles between the two `RunState`s as above.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直小心地说服自己，即使语言没有，我们也永远不会在运行时尝试跟随未定义的转换。或者，我们可以选择定义一个名为`Toggle`或`()`的单个`Msg`值，其中`upstate`在两个`RunState`之间切换，如上所示。
- en: The rest of the drawing code is similar to ones we have seen before.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的绘图代码与我们以前看到的代码类似。
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Check out the [source](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stopwatch1.elm)
    and [demo](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stopwatch1.html)
    for this version.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这个版本的[源代码](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stopwatch1.elm)和[演示](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stopwatch1.html)。
- en: Refactoring Events
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重构事件
- en: There's a cute way of reorganizing our setup that avoids the need to define
    new `Msg` and `TickOr` types. We keep the `State` representation the same...
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种巧妙的重新组织我们的设置的方法，避免了定义新的`Msg`和`TickOr`类型的需要。我们保持`State`表示相同...
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '... but define `Msg`s to be functions that given the current `time` and `State`
    produces an updated `State`. Notice that `Msg` is now simply a type `alias`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '... 但将`Msg`定义为一个函数，给定当前的`time`和`State`，产生一个更新的`State`。注意，现在`Msg`只是一个类型`alias`。'
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We then break up the previous `upstate` implementation into separate functions
    for each kind of message.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将先前的`upstate`实现分解为每种消息类型的单独函数。
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that `start`, `stop`, and `tick` each have type `Msg`. Wherever we used
    `Start` and `Stop` before, now we use `start` and `stop`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`start`，`stop`和`tick`每个都有类型`Msg`。无论我们以前使用`Start`和`Stop`，现在我们使用`start`和`stop`。
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Finally, we redefine `mergeWithTicker` to use `tick` instead of `Tick`, to eliminate
    the wrapper `M` data constructor from before, and to change its type signature.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们重新定义`mergeWithTicker`以使用`tick`而不是`Tick`，以消除以前的包装器`M`数据构造函数，并更改其类型签名。
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![](../Images/507f2f0f7f581bbd117f0e424de0f362.jpg)](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stopwatch2.html)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](../Images/507f2f0f7f581bbd117f0e424de0f362.jpg)](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stopwatch2.html)'
- en: Check out the [source](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stopwatch2.elm)
    and [demo](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stopwatch2.html)
    for this version, which implements the same functionality as before. You may prefer
    this organization of this version to the previous, because it avoids the need
    to define new types `Msg` and `TickOr`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这个版本的[源代码](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stopwatch2.elm)和[演示](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stopwatch2.html)，它实现了与之前相同的功能。您可能更喜欢这个版本的组织方式，因为它避免了定义新类型`Msg`和`TickOr`的需要。
- en: 'Example: Drawing Stacks'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：绘制堆栈
- en: Our next example will be an animation of a stack data structure. We'll make
    the simplifying assumption that our stack may contain at most five elements.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一个示例将是一个堆栈数据结构的动画。我们将简化假设，即我们的堆栈最多可能包含五个元素。
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We will start by getting the basic functionality to work. Then we will allow
    the user to specify what element to push using a text box. Finally, we will animate
    the push and pop operations so that the element being added or removed, respectively,
    will fade in or out.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使基本功能正常工作。然后，我们将允许用户使用文本框指定要推送的元素。最后，我们将使添加或移除的元素分别淡入或淡出。
- en: Basic Functionality
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基本功能
- en: We will restrict our stack to `String` values, which will be represented as
    a `List`. In addition, our `State` will track whether the stack is in a `Steady`
    state, or whether we are in the processing of `Pushing` or `Popping`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将限制我们的堆栈只包含`String`值，这些值将被表示为`List`。此外，我们的`State`将跟踪堆栈是否处于`Steady`状态，或者我们正在进行`Pushing`或`Popping`。
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the latter two cases, we keep track of three `Time` values:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在后两种情况下，我们会跟踪三个`Time`值：
- en: a `now` time, which is the most recent `Time` value reported by the ticker;
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`now`时间，即由计时器报告的最近的`Time`值；
- en: a `start` time, which is the `Time` when the given operation was initiated;
    and
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`start`时间，即给定操作启动时的`Time`；
- en: an `end` time, which is the `Time` at which the given operation will be completed.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`end`时间，即给定操作将完成的`Time`。
- en: We will start with an initially empty stack.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个最初为空的堆栈开始。
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We will use the `TickOr` approach introduced earlier to help manage timed messages.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前介绍的`TickOr`方法来帮助管理定时消息。
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For brevity later in the code, we define wrappers for the different kinds of
    `Msg`s that will be sent over our channel.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在代码中简洁，我们为将要发送到通道上的不同类型的`Msg`定义了包装器。
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: And, as before, we will define our application to update based on `Msg`s sent
    over `ch` as well as updates to the current `Time`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，与以前一样，我们将定义我们的应用程序根据发送到`ch`上的`Msg`以及当前`Time`的更新来更新。
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Finite State Machines
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有限状态机
- en: '![](../Images/45341b91db00c2c7bbd2dd98a1ecf9f2.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/45341b91db00c2c7bbd2dd98a1ecf9f2.jpg)'
- en: Let's start to tackle the transitions between states in response to `Event`s.
    We'll start out by always using the `Steady` state.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始处理对`Event`响应中状态之间的转换。我们将从始终使用`Steady`状态开始。
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As with the stopwatch example, our pattern match is not exhaustive, so we must
    take care to prevent undefined transitions from being attempted at run-time. In
    that example, we rendered a single button and set up its message to be in sync
    with the current `State`. In contrast, in this example, we will always render
    both push and pop buttons, but we will disable them when appropriate.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与秒表示例一样，我们的模式匹配并不全面，因此我们必须小心防止在运行时尝试未定义的转换。在该示例中，我们渲染了一个按钮，并设置其消息与当前`State`同步。相比之下，在这个示例中，我们将始终渲染推送和弹出按钮，但在适当时禁用它们。
- en: To distinguish between enabled and disabled buttons, we first define a version
    of `myButton` that colors the resulting button `white` when the `enabled` argument
    is `False`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了区分启用和禁用的按钮，我们首先定义了一个`myButton`的版本，当`enabled`参数为`False`时，会将生成的按钮颜色设置为`white`。
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Then, we conditionally enable a button based on a predicate `b`. To disable
    a button, we set its `Msg` to `Noop` so that it has no effect on the `State`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们根据谓词`b`有条件地启用一个按钮。要禁用一个按钮，我们将其`Msg`设置为`Noop`，以便它不会对`State`产生影响。
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here's a bunch of code that renders the stack and buttons to manipulate it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一堆代码，用于渲染堆栈和操作它的按钮。
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Check out the [source](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stack1.elm)
    and [demo](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stack1.html)
    for this version.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Input Fields
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now, instead of only pushing `"BLAH"` values, let's add a text box so that the
    user can enter values. The [`Graphics.Input.Field`](http://package.elm-lang.org/packages/elm-lang/core/1.1.0/Graphics-Input-Field)
    library provides the following function for creating text input fields.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Values of type `Content` store the contents of a textbook in a `String`, along
    with information about what text is highlighted;
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Notice that the second argument to `field` must be a function that takes a single
    argument and returns a `Signal.message`. Recall the following function from the
    [`Signal`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Signal) library
    that is used to create `Message`s.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If we call `send` with a single argument of type `Channel Content`, the resulting
    (function) is the type of value we need to pass as the second argument to `field`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: So, let's create a channel for communicating `Content` values from a text box.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We will `subscribe` to this channel, and add its current value as a parameter
    to `view`, because that's where we decide what value to `Push` when the push button
    is clicked.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the `view` function, we define our field to `send` updates to the `textbox`
    channel, and we display `con`, the current `Content`, in the field. We set up
    the push button to `send` the `String` value currently in the field.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Check out the [source](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stack2.elm)
    and [demo](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stack2.html)
    for this version.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Fading
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Our final task is to animate the `Push` and `Pop` operations. We update the
    `upstate` function to make use of `Pushing` and `Popping` constructors.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Notice that the `Pop` message does not immediately pop the stack, because the
    value `s` on top of the stack will faded out slowly until time `now + delay`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: When processing a new `Tick` at time `now`, we check to see whether `now` is
    passed the `end` of the given animation phase. If it is, we return to the `Steady`
    state; otherwise, continue in the same animating state and track the new `now`
    time.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: As with the `FadingDots` example from a previous lecture, we will use the alpha
    component of colors to smoothly fade objects in and out.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Inside the "loop" (the `indexedMap` call) in `view`, we check to see if the
    current state is `Popping` or `Pushing` and, if so, set the alpha component of
    the top element of the stack (which is represented in three parts: a solid rectangle,
    an outlined rectangle, and the text value of the element).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[![](../Images/c3bcb408524125077452de73e50550f7.jpg)](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stack3.html)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](../Images/c3bcb408524125077452de73e50550f7.jpg)](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stack3.html)'
- en: Check out the [source](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stack3.elm)
    and [demo](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stack3.html)
    for this final version.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这个最终版本的[源代码](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stack3.elm)和[演示](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/MoreAnimations/Stack3.html)。
- en: '**Optional Exercises**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选练习**'
- en: Our solution can be improved in many ways.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的解决方案可以在许多方面得到改进。
- en: Prevent `Push`ing when the field is empty.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当字段为空时，防止`Push`操作。
- en: Generalize to stacks of arbitrary size.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推广到任意大小的堆栈。
- en: The approach we have been taking is rather low-level, explicitly manipulating
    current, start, and finish times for animations. Build higher-level abstractions
    that allow smoothly interpolating between two shapes, and use them to refactor
    the examples.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们一直采取的方法相当低级，明确地操纵动画的当前、开始和结束时间。构建更高级的抽象，允许在两个形状之间平滑插值，并使用它们来重构示例。
