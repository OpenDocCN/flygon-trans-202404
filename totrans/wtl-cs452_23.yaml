- en: Lecture 23 - Administrator, Detective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Exam: 9.00, August 8 to 11.30, August 9.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the earliest that anybody is planning to start?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I now have back my document creation tools. Assignments will start to be more
    uptodate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Administrator, Worker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Administrator is a proprietor who does no work but only assigns work to others
  prefs: []
  type: TYPE_NORMAL
- en: Tasks are given to workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If Create is fast and you have a method for reclaiming resources you can Create
    and Destroy workers on demand.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise workers are created at initialization and the administrator maintains
    a pool of free workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: each free worker is a REPLY-BLOCKED task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real administrators manage workers
  prefs: []
  type: TYPE_NORMAL
- en: Static organizations hire a workforce of employees who are assigned tasks as
    they come up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And if they have run out of employees then you (the client) just have to wait.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the worker is waiting for some data to be available, which is the most common
    case, then
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a worker at the priority of the client does the waiting,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the administrator goes on to supply workers to other clients,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: nobody loses
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic organizations hire workers after the need for work appears, and fire
    them when the work is done. These are called contract workers or consultants.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need Destroy to achieve a dynamic structure.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Helpers hired by the consultant fired with the consultant.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Semi-dynamic organizations are between static and dynamic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New workers are hired (created),
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: but they are not fired.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If two dynamic administrators exist in a system you may have to regulate the
    system globally in order to resolve a creation race between them.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of independent agent system studied by Kate Larson handles such problems
    locally
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Most workers prefer employee status to consultant status.*'
  prefs: []
  type: TYPE_NORMAL
- en: Worker code
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`doWork` might require further sends to servers or warehouses, which is harmless
    in this context.'
  prefs: []
  type: TYPE_NORMAL
- en: Administrator code
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Initialization
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: Tid of the client is included in the workorder to the administrator does
    not have to maintain and search a list of jobs being done. (Administrators are
    by nature lazy!)'
  prefs: []
  type: TYPE_NORMAL
- en: Alternative Worker/Administrator Model
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As above, Administrator includes Tid of the client in the order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Worker replies to client with result and to administrator with request for another
    order to process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The administrator can add a little more value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Suppose that there is data required for processing each order.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The administrator could receive it from a notifier or courier.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It would be maintained internally and added to the appropriate order before
    the order is despatched to the worker.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another model: the worker queries a detective.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 8\. The Detective
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Simple Events
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The notifier is a task that waits on events.
  prefs: []
  type: TYPE_NORMAL
- en: AwaitEvent is like Send
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has two features
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a simple, kernel-defined event that it waits on
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: hardware/kernel is like Receive/Reply
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: can only serve one master (`one' defined in terms of the kernel events)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The notifier needs to pass on that the event has happened
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: which it does using Send
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: You could call a notifier a detective,
  prefs: []
  type: TYPE_NORMAL
- en: who looks around on your behalf,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and let's you know when something you care about happens,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: but really it is a detective's worker, whom you employ directly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex Events
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In an application there is likely to be lots of waiting on combinations of events.
  prefs: []
  type: TYPE_NORMAL
- en: form the combinations using Boolean operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for example, Respond `okay' when this sensor is triggered or `time-out' when
    Delay returns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the detective to discover that a complex event has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: How does the detective work?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conjunction
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Code could be
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Disjunction
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Code above doesn't even pretend to work!
  prefs: []
  type: TYPE_NORMAL
- en: Try instead, something like
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is the code of a particular detective, one that notifies you which occurs
    first, a time-out or an event.
  prefs: []
  type: TYPE_NORMAL
- en: Not
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We can say that an event has not happened yet.
  prefs: []
  type: TYPE_NORMAL
- en: Only at the end of the universe can we say that an event simply has not happened.
  prefs: []
  type: TYPE_NORMAL
- en: 'Time-outs are needed for NOT: how to do them is shown above.'
  prefs: []
  type: TYPE_NORMAL
- en: Who is the client of the detective
  prefs: []
  type: TYPE_NORMAL
- en: Initiator of a normal action
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Housekeeper of the system who will clean up pathologies (Idletask?))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
