["```\n(define (mapreduce mapper reducer base-case data)\n    (accumulate reducer base-case (map mapper data))) \n```", "```\n>(define song1   '( ((please please me) i saw her standing there)\n            ((please please me) misery)\n            ((please please me) please please me)))\n\n>(define song2   '( ((with the beatles) it wont be long)\n            ((with the beatles) all ive got to do)\n            ((with the beatles) all my loving)))\n\n>(define song3   '( ((a hard days night) a hard days night)\n            ((a hard days night) i should have known better)\n            ((a hard days night) if i fell)))\n\n>(define all-songs (append song1 song2 song3))\n( ((please please me) i saw her standing there)\n  ((please please me) misery)\n  ((please please me) please please me)\n  ((with the beatles) it wont be long)\n  ((with the beatles) all i have got to do)\n  ((with the beatles) all my loving)\n  ((a hard days night) a hard days night)\n  ((a hard days night) i should have known better)\n  ((a hard days night) if i fell) ) \n```", "```\n(map mapper data) \n```", "```\n (define make-kv-pair cons)\n    (define kv-key car)\n    (define kv-value cdr) \n```", "```\n >(kv-key '((please please me) i saw her standing there))\n (please please me)\n >(kv-value '((please please me) i saw her standing there))\n (i saw her standing there) \n```", "```\n>(define (mapper input-kv-pair)\n    (map (lambda (wd) (make-kv-pair wd 1)) (kv-value input-kv-pair)))\n\n>(mapper '((please please me) i saw her standing there))\n((i . 1) (saw . 1) (her . 1) (standing . 1) (there . 1)) \n\n>(mapper '((please please me) please please me))\n((please . 1) (please . 1) (me . 1)) \n```", "```\n>(map mapper all-songs)\n( ((i . 1) (saw . 1) (her . 1) (standing . 1) (there . 1))  \n  ((misery . 1))  \n  ((please . 1) (please . 1) (me . 1))  \n  ((it . 1) (wont . 1) (be . 1) (long . 1))   \n  ((all . 1) (i . 1) (have . 1) (got . 1) (to . 1) (do . 1))  \n  ((all . 1) (my . 1) (loving . 1))   \n  ((a . 1) (hard . 1) (days . 1) (night . 1))   \n  ((i . 1) (should . 1) (have . 1) (known . 1) (better . 1))  \n  ((if . 1) (i . 1) (fell . 1)) ) \n```", "```\n>(sort-into-buckets (map mapper all-songs))\n\n'( ((i . 1) (i . 1) (i . 1) (i . 1))\n   ((saw . 1))\n   ((her . 1))\n   ((standing . 1))\n   . . .\n   ((all . 1) (all . 1))\n   ((have . 1) (have . 1))\n   . . . \n   ((if . 1))  \n   ((fell . 1)) ) \n```", "```\n(define (reducer num other-num)\n    (+ num other-num)) \n```", "```\n((i . 1) (i . 1) (i . 1) (i. 1) (i . 1)) \n```", "```\n(make-kv-pair (kv-key '(i . 1))\n              (accumulate reducer 0 (map kv-value '((i . 1) (i . 1)  \n                                    (i . 1) (i . 1) (i . 1))))) \n```", "```\n(define (reduce-bucket reducer base-value bucket)\n    (make-kv-pair   (kv-key (car bucket))\n            (accumulate reducer base-value (map kv-value bucket)))) \n```", "```\n(define (groupreduce reducer base-case buckets)\n    (map (lambda (bucket) (reduce-bucket reducer base-case bucket))  \n             buckets)) \n```", "```\n>(groupreduce reducer 0 (sort-into-buckets (map mapper all-songs)))\n( (i . 4) (saw . 1) (her . 1)\n  . . .\n  (misery . 1) (please . 2) (me . 1)\n  . . .\n  (all . 2) (have . 2)) \n```", "```\n(define (mapreduce mapper reducer base-case data)\n    (groupreduce reducer base-case (sort-into-buckets (map mapper data)))) \n```", "```\n>(define x (list (make-kv-pair her 1) (make-kv-pair i 4) (make-kv-pair saw 1))\n>(most-frequent x) ; i appears the most\n((i . 4)) \n```", "```\n>(real-most-frequent all-songs)\n((i . 4)) \n```"]