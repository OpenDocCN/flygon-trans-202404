["```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>HTML</title>\n</head>\n<body>\n*<!-- Add your content here-->*\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n<script>\n\nconsole.log(Node.ELEMENT_NODE) *//logs 1, one is the numeric code value for element nodes*\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n<script>\n\nfor(var key in Node){\n\u00a0 \u00a0\u00a0console.log(key,' = '+Node[key]); \n};\n\n***/* the above code logs to the console the following\nELEMENT_NODE  = 1\nATTRIBUTE_NODE  = 2\nTEXT_NODE  = 3\nCDATA_SECTION_NODE  = 4\nENTITY_REFERENCE_NODE  = 5\nENTITY_NODE  = 6\nPROCESSING_INSTRUCTION_NODE  = 7\nCOMMENT_NODE  = 8\nDOCUMENT_NODE  = 9\nDOCUMENT_TYPE_NODE  = 10\nDOCUMENT_FRAGMENT_NODE  = 11\nNOTATION_NODE  = 12\nDOCUMENT_POSITION_DISCONNECTED  = 1\nDOCUMENT_POSITION_PRECEDING  = 2\nDOCUMENT_POSITION_FOLLOWING  = 4\nDOCUMENT_POSITION_CONTAINS  = 8\nDOCUMENT_POSITION_CONTAINED_BY  = 16\nDOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC  = 32 */***\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<a href=\"#\">Hi</a> *<!-- this is a HTMLAnchorElement which inherits from... -->*\n\n<script>\n\n*//get reference to element node object*\nvar nodeAnchor = document.querySelector('a');\n *//create props array to store property keys for element node object*\nvar props = [];\n\n*//loop over element node object getting all properties & methods (inherited too)*\nfor(var key in nodeAnchor){\n\u00a0 \u00a0 props.push(key); \u00a0 \n}\n\n*//log alphabetical list of properties & methods* \nconsole.log(props.sort());\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<a href=\"#\">Hi</a>\n\n<script>\n\n*//This is DOCUMENT_TYPE_NODE or nodeType 10 because Node.DOCUMENT_TYPE_NODE === 10*\nconsole.log(\n\tdocument.doctype.nodeName, *//logs 'html' also try document.doctype to get <!DOCTYPE html>*\n\tdocument.doctype.nodeType *//logs 10 which maps to DOCUMENT_TYPE_NODE*\n); **//This is DOCUMENT_NODE or nodeType 9 because Node.DOCUMENT_NODE === 9*\nconsole.log(\n\t**document.nodeName**, *//logs '#document'*\n\t**document.nodeType** *//logs 9 which maps to DOCUMENT_NODE*\n);\n\n*//This is DOCUMENT_FRAGMENT_NODE or nodeType 11 because Node.DOCUMENT_FRAGMENT_NODE === 11*\nconsole.log(\n\t**document.createDocumentFragment().nodeName**, *//logs '#document-fragment'*\n\t**document.createDocumentFragment().nodeType** *//logs 11 which maps to DOCUMENT_FRAGMENT_NODE*\n);\n\n*//This is ELEMENT_NODE or nodeType 1 because Node. ELEMENT_NODE === 1*\nconsole.log(\n\t**document.querySelector('a').nodeName**, *//logs 'A'*\n\t**document.querySelector('a').nodeType** *//logs 1 which maps to ELEMENT_NODE*\n); **//This is TEXT_NODE or nodeType 3 because Node.TEXT_NODE === 3*\nconsole.log(\n\t**document.querySelector('a').firstChild.nodeName**, *//logs '#text'*\n\t**document.querySelector('a').firstChild.nodeType** *//logs 3 which maps to TEXT_NODE*\n); **</script>\n</body>\n</html>**** \n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<a href=\"#\">Hi</a>\n\n<script>\n\n*//is <a> a ELEMENT_NODE?*\nconsole.log(document.querySelector('a').nodeType === 1); *//logs true, <a> is an Element node*\n\n*//or use Node.ELEMENT_NODE which is a property containg the numerice value of 1*\nconsole.log(document.querySelector('a').nodeType === Node.ELEMENT_NODE); *//logs true, <a> is an Element node*\n\n</script>\n</body> \n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<a href=\"#\">Hi</a>\n\n<script>\n\n*//logs null for DOCUMENT_TYPE_NODE, DOCUMENT_NODE, DOCUMENT_FRAGMENT_NODE, ELEMENT_NODE* *below*\nconsole.log(document.doctype.nodeValue); *console.log(**document.nodeValue***);\nconsole.log(**document.createDocumentFragment().nodeValue***); *console.log(**document.querySelector('a').nodeVale***);\n\n*//logs string of text*\nconsole.log(**document.querySelector('a').firstChild.nodeValue**); ***//logs 'Hi'*\n\n</script>\n</body>\n</html>******* \n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n<script>\n\nvar elementNode\u00a0= document.createElement('div');\nconsole.log(elementNode, elementNode.nodeType); *//log <div> 1, and 1 indicates an element node*\n\nvar textNode\u00a0= document.createTextNode('Hi');\nconsole.log(textNode, textNode.nodeType); *//logs Text {} 3, and 3 indicates a text node*\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<div id=\"A\"></div>\n<span id=\"B\"></span>\n<div id=\"C\"></div>\n<div id=\"D\"></div>\n<div id=\"E\"></div>\n\n<script>\n\n*//create a strong element and text node and add it to the DOM*\ndocument.getElementById('A').innerHTML = '<strong>Hi</strong>'; \n\n*//create a div element and text node to replace <span id=\"B\"></div> (notice span#B is replaced)*\ndocument.getElementById('B').outerHTML = '<div id=\"B\" class=\"new\">Whats Shaking</div>'\n\n*//create a text node and update the div#C with the text node*\ndocument.getElementById('C').textContent = 'dude';\n\n*//NON standard extensions below i.e. innerText & outerText*\n\n*//create a text node and update the div#D with the text node*\ndocument.getElementById('D').innerText = 'Keep it';\n\n*//create a text node and replace the div#E with the text node (notice div#E is gone)*\ndocument.getElementById('E').outerText\u00a0=\u00a0'real!';\n\nconsole.log(document.body.innerHTML);\n*/* logs\n<div id=\"A\"><strong>Hi</strong></div>\n<div id=\"B\" class=\"new\">Whats Shaking</div>\n<span id=\"C\">dude</span>\n<div id=\"D\">Keep it</div>\nreal!\n*/*\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body><i id=\"elm\">how</i>\n\n<script>\n\nvar elm = document.getElementById('elm');\n\nelm.insertAdjacentHTML('beforebegin',\u00a0'<span>Hey-</span>');\nelm.insertAdjacentHTML('afterbegin',\u00a0'<span>dude-</span>');\u00a0\nelm.insertAdjacentHTML('beforeend',\u00a0'<span>-are</span>');\u00a0\nelm.insertAdjacentHTML('afterend',\u00a0'<span>-you?</span>');\u00a0\u00a0\n\nconsole.log(document.body.innerHTML);\n*/* logs\n<span>Hey-</span><i id=\"A\"><span>dude-</span>how<span>-are</span></i><span>-you?</span>\n*/*\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<div id=\"A\"><i>Hi</i></div>\n<div id=\"B\">Dude<strong> !</strong></div>\n\n<script>\n\nconsole.log(document.getElementById('A').innerHTML); *//logs '<i>Hi</i>'*\n\nconsole.log(document.getElementById('A').outerHTML);\u00a0*//logs <div id=\"A\">Hi</div>*\n\n*//notice that all text is returned even if its in child element nodes (i.e. <strong> !</strong>)* \nconsole.log(document.getElementById('B').textContent); *//logs 'Dude !'*\n\n*//NON standard extensions below i.e. innerText & outerText*\n\nconsole.log(document.getElementById('B').innerText);*\u00a0//logs 'Dude !'*\n\nconsole.log(document.getElementById('B').outerText);\u00a0*//logs 'Dude !'\u200b*\u200b\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<p>Hi</p>\n\n<script>\n\n*//create a blink element node and text node*\nvar elementNode = document.createElement('strong');\nvar textNode = document.createTextNode(' Dude');\n\n*//append these nodes to the DOM*\ndocument.querySelector('p').appendChild(elementNode);\ndocument.querySelector('strong').appendChild(textNode);\n\n*//log's <p>Hi<strong> Dude</strong></p>*\nconsole.log(document.body.innerHTML);\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<ul>\n\u00a0 \u00a0 <li>2</li>\n\u00a0 \u00a0 <li>3</li>\n</ul>\n\n<script>\n\n*//create a text node and li element node and append the text to the li*\nvar text1\u00a0= document.createTextNode('1');\nvar li\u00a0= document.createElement('li');\nli.appendChild(text1);\n\n*//select the ul in the document*\nvar ul\u00a0= document.querySelector('ul');\n\n*/* \nadd the li element we created above to the DOM, notice I call on <ul> and pass reference to <li>2</li> using ul.firstChild \n*/*\nul.insertBefore(li,ul.firstChild);\n\nconsole.log(document.body.innerHTML);\n*/*logs\n<ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n*/*\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<div id=\"A\">Hi</div>\n<div id=\"B\">Dude</div>\n\n<script>\n\n*//remove element node*\nvar divA = document.getElementById('A');\ndivA.parentNode.removeChild(divA);\n\n*//remove text node*\nvar divB = document.getElementById('B').firstChild;\ndivB.parentNode.removeChild(divB);\n\n*//log the new DOM updates, which should only show the remaining empty div#B*\nconsole.log(document.body.innerHTML);\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<div id=\"A\">Hi</div>\n<div id=\"B\">Dude</div>\n\n<script>\n\n*//replace element node*\nvar divA = document.getElementById('A');\nvar newSpan = document.createElement('span');\nnewSpan.textContent = 'Howdy';\ndivA.parentNode.replaceChild(newSpan,divA);\n\n*//replace text node*\nvar divB = document.getElementById('B').firstChild;\nvar newText = document.createTextNode('buddy');\ndivB.parentNode.replaceChild(newText, divB);\n\n*//log the new DOM updates,* \nconsole.log(document.body.innerHTML);\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<ul>\n  <li>Hi</li>\n  <li>there</li>\n</ul>\n\n<script>\n\nvar cloneUL = document.querySelector('ul').cloneNode();\n\nconsole.log(cloneUL.constructor); *//logs HTMLUListElement()*\nconsole.log(cloneUL.innerHTML); *//logs (an empty string) as only the ul was cloned*\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<ul>\n  <li>Hi</li>\n  <li>there</li>\n</ul>\n\n<script>\n\nvar cloneUL = document.querySelector('ul').cloneNode(true);\n\nconsole.log(cloneUL.constructor); *//logs HTMLUListElement()*\nconsole.log(cloneUL.innerHTML); *//logs <li>Hi</li><li>there</li>*\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<ul>\n  <li>Hi</li>\n  <li>there</li>\n</ul>\n\n<script>\n\nvar ulElementChildNodes = document.querySelector('ul').childNodes;\n\nconsole.log(ulElementChildNodes); *//logs an array like list of all nodes inside of the ul*\n\n*/*Call forEach as if its a method of NodeLists so we can loop over the NodeList. Done because NodeLists are array like, but do not directly inherit from Array*/*\nArray.prototype.forEach.call(ulElementChildNodes,function(item){ \n\u00a0 \u00a0console.log(item); //logs each item in the array\n});\u00a0\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<a href=\"#\"></a>\n\n<script>\n\nconsole.log(Array.isArray(document.links)); *//returns false, its an HTMLCollection not an Array*\nconsole.log(Array.isArray(document.querySelectorAll('a'))); *//returns false, its an NodeList not an Array*\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<a href=\"#\"></a>\n\n<script>\n\nconsole.log(Array.isArray(Array.prototype.slice.call(document.links))); *//returns true*\nconsole.log(Array.isArray(Array.prototype.slice.call(document.querySelectorAll('a')))); *//returns true*\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body><ul><!-- comment -->\n<li id=\"A\"></li>\n<li id=\"B\"></li>\n<!-- comment -->\n</ul>\n\n<script>\n\n*//cache selection of the ul*\nvar ul = document.querySelector('ul');\n\n*//What is the parentNode of the ul?*\nconsole.log(ul.parentNode.nodeName); *//logs body* **//What is the first child of the ul?*\nconsole.log(ul.**firstChild**.nodeName); *//logs comment*\n\n*//What is the last child of the ul?*\nconsole.log(ul.**lastChild**.nodeName); *//logs text not comment, because there is a line break*\n\n*//What is the nextSibling of the first li?*\nconsole.log(ul.querySelector('#A').**nextSibling**.nodeName); *//logs text*\n\n*//What is the previousSibling of the last li?*\nconsole.log(ul.querySelector('#B').**previousSibling**.nodeName); *//logs text*\n\n</script>\n</body>\n</html>* \n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body><ul><!-- comment -->\n<li id=\"A\"></li>\n<li id=\"B\"></li>\n<!-- comment -->\n</ul>\n\n<script>\n\n*//cache selection of the ul*\nvar ul = document.querySelector('ul');\n\n*//What is the first child of the ul?*\nconsole.log(ul.firstElementChild.nodeName); *//logs li*\n\n*//What is the last child of the ul?*\nconsole.log(ul.lastElementChild.nodeName); *//logs li*\n\n*//What is the nextSibling of the first li?*\nconsole.log(ul.querySelector('#A').nextElementSibling.nodeName); *//logs li*\n\n*//What is the previousSibling of the last li?*\nconsole.log(ul.querySelector('#B').previousElementSibling.nodeName); *//logs li*\n\n*//What are the element only child nodes of the ul?* \nconsole.log(ul.children); **//HTMLCollection, all child nodes including text nodes*\n\n</script>\n</body>\n</html>* \n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<script>\n\n*// is <body> inside <html lang=\"en\"> ?*\nvar inside = document.querySelector('html').contains(document.querySelector('body'));\n\nconsole.log(inside); *//logs true*\n\n</script>\n</body>\n</html>\n\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<input type=\"text\">\n<input type=\"text\">\n\n<textarea>foo</textarea>\n<textarea>bar</textarea>\n\n<script>\n\n*//logs true, because they are exactly idential*\nvar input = document.querySelectorAll('input');\nconsole.log(input[0].isEqualNode(input[1]));\n\n*//logs false, because the child text node is not the same*\nvar textarea = document.querySelectorAll('textarea');\nconsole.log(textarea[0].isEqualNode(textarea[1]));\n\n</script>\n</body>\n</html>\n```"]