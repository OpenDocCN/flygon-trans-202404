- en: Expressions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表达式
- en: What Are Expressions?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是表达式？
- en: Expressions are anything that you type into the Racket interpreter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式是你输入到Racket解释器中的任何内容。
- en: For example,
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '`2`'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`2`'
- en: is an expression. So is
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个表达式。另一个例子是
- en: '`(+ 2 3)`'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 2 3)`'
- en: A combination, as shown above, is an expression where paretheses are used to
    show when a procedure is called. The procedure, in this case +, is called the
    *operator*, and the arguments, in this case `2` and `3` are called the *operands*.
    The value of a combination is obtained by applying the operator to the operands.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示的组合是一个表达式，其中使用括号显示何时调用一个过程。在这种情况下，+被称为*运算符*，而2和3被称为*操作数*。一个组合的值是通过将运算符应用于操作数得到的。
- en: Prefix Notation
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前缀表示法
- en: You've already been introduced to prefix notation in Unit 0.1, so here's a quick
    recap.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在第0.1单元介绍了前缀表示法，所以这里是一个快速回顾。
- en: In Racket, we use prefix notation. So, instead of typing in `2 + 3` into the
    interpreter, we type in `(+ 2 3)` --that is, the operator comes before the operands,
    or arguments.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在Racket中，我们使用前缀表示法。因此，我们不是在解释器中输入`2 + 3`，而是输入`(+ 2 3)` --也就是说，运算符在操作数或参数之前。
- en: This has a few benefits. The most obvious one right now is that it can take
    procedures, such as + or *, that take a variable number of arguments. For example,
    in prefix notation, adding 5 numbers would look like `(+ 1 2 3 4 5)`, whereas
    in infix notation, it would look like `1 + 2 + 3 + 4 + 5`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这有几个好处。目前最明显的一个好处是它可以接受接受可变数量参数的过程，比如+或*。例如，在前缀表示法中，添加5个数字看起来像`(+ 1 2 3 4 5)`，而在中缀表示法中，看起来像`1
    + 2 + 3 + 4 + 5`。
- en: Another benefit is that it makes *nesting* procedures within each other very
    easy. For example, `(+ (- 4 3) (/ 4 2))` evaluates to 3\. The depth of these expressions
    can be arbitrarily extended, so that
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个好处是它使得*嵌套*程序在彼此之间非常容易。例如，`(+ (- 4 3) (/ 4 2))`的计算结果为3。这些表达式的深度可以任意扩展，因此
- en: '`(+ (- (/ 4 2) (+ 3 4 2 (/ 4 3))) (* 4 (- 3 4)))`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ (- (/ 4 2) (+ 3 4 2 (/ 4 3))) (* 4 (- 3 4)))`'
- en: is also valid Racket expression, though one that is very difficult for us humans
    to understand.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 也是有效的Racket表达式，尽管这对我们人类来说非常难以理解。
- en: Another advantage is that it makes *parsing* Racket very easy, which comes in
    useful when writing an interpreter. If you have no idea what this means yet, don't
    worry about it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个优点是它使得解析Racket非常容易，这在编写解释器时非常有用。如果你还不知道这意味着什么，不用担心。
- en: 'Even with the most complicated expressions, the interpreter does the same thing:
    it reads the expression, evaluates it, and prints it to the screen. This is known
    as the [read-eval-print loop](https://edge.edx.org/courses/uc- berkeley/cs61as-1x/SICP/wiki/cs61as-1x/read-eval-print-loop/)
    .'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是最复杂的表达式，解释器也会执行相同的操作：读取表达式，计算它，并将其打印到屏幕上。这被称为[读取-求值-打印循环](https://edge.edx.org/courses/uc-berkeley/cs61as-1x/SICP/wiki/cs61as-1x/read-eval-print-loop/)。
