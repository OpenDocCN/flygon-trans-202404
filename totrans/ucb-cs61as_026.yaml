- en: Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What Are Expressions?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Expressions are anything that you type into the Racket interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '`2`'
  prefs: []
  type: TYPE_NORMAL
- en: is an expression. So is
  prefs: []
  type: TYPE_NORMAL
- en: '`(+ 2 3)`'
  prefs: []
  type: TYPE_NORMAL
- en: A combination, as shown above, is an expression where paretheses are used to
    show when a procedure is called. The procedure, in this case +, is called the
    *operator*, and the arguments, in this case `2` and `3` are called the *operands*.
    The value of a combination is obtained by applying the operator to the operands.
  prefs: []
  type: TYPE_NORMAL
- en: Prefix Notation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You've already been introduced to prefix notation in Unit 0.1, so here's a quick
    recap.
  prefs: []
  type: TYPE_NORMAL
- en: In Racket, we use prefix notation. So, instead of typing in `2 + 3` into the
    interpreter, we type in `(+ 2 3)` --that is, the operator comes before the operands,
    or arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This has a few benefits. The most obvious one right now is that it can take
    procedures, such as + or *, that take a variable number of arguments. For example,
    in prefix notation, adding 5 numbers would look like `(+ 1 2 3 4 5)`, whereas
    in infix notation, it would look like `1 + 2 + 3 + 4 + 5`.
  prefs: []
  type: TYPE_NORMAL
- en: Another benefit is that it makes *nesting* procedures within each other very
    easy. For example, `(+ (- 4 3) (/ 4 2))` evaluates to 3\. The depth of these expressions
    can be arbitrarily extended, so that
  prefs: []
  type: TYPE_NORMAL
- en: '`(+ (- (/ 4 2) (+ 3 4 2 (/ 4 3))) (* 4 (- 3 4)))`'
  prefs: []
  type: TYPE_NORMAL
- en: is also valid Racket expression, though one that is very difficult for us humans
    to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage is that it makes *parsing* Racket very easy, which comes in
    useful when writing an interpreter. If you have no idea what this means yet, don't
    worry about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even with the most complicated expressions, the interpreter does the same thing:
    it reads the expression, evaluates it, and prints it to the screen. This is known
    as the [read-eval-print loop](https://edge.edx.org/courses/uc- berkeley/cs61as-1x/SICP/wiki/cs61as-1x/read-eval-print-loop/)
    .'
  prefs: []
  type: TYPE_NORMAL
