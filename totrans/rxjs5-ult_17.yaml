- en: Operators - combination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Operators combination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many operators out there that allows you to combine the values from
    2 or more source, they act a bit differently though and its important to know
    the difference.
  prefs: []
  type: TYPE_NORMAL
- en: combineLatest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The signature on this one is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What this does is to essentially take the latest response from each `source`
    and return it as an array of x number of elements. One element per source.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see source2 stops emitting after 2 values but is able to keep sending
    the latest emitted.
  prefs: []
  type: TYPE_NORMAL
- en: Business case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The business case is when you are interested in the very latest from each source
    and past values is of less interest, and of course you have more than one source
    that you want to combine.
  prefs: []
  type: TYPE_NORMAL
- en: concat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The signature is :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at the following data, it''s easy to think that it should care when
    data is emitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The result however is that the resulting observable takes all the values from
    the first source and emits those first then it takes all the values from source
    2, so order in which the source go into `concat()` operator matters.
  prefs: []
  type: TYPE_NORMAL
- en: So if you have a case where a source somehow should be prioritized then this
    is the operator for you.
  prefs: []
  type: TYPE_NORMAL
- en: merge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This operator enables you two merge several streams into one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Point with is operator is to combine several streams and as you can see above
    any time operators such as `delay()` is respected.
  prefs: []
  type: TYPE_NORMAL
- en: zip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Gives us `1,2,7`
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at another example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Gives us `1,2,7` and `5,3,9` so it joins values on column basis. It will act
    on the least common denominator which in this case is 2\. The `4` is ignored in
    the `2,3,4` sequence. As you can see from the first example it's also possible
    to mix different async concepts such as Promises with Observables because interval
    conversion happens.
  prefs: []
  type: TYPE_NORMAL
- en: Business case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you really care about what different sources emitted at a certain position.
    Let's say the 2nd response from all your sources then `zip()` is your operator.
  prefs: []
  type: TYPE_NORMAL
