["```\nimport org.junit.Assert.*\nimport org.junit.Test\n\npublic class AdditionTest {\n\n  @Test\n  fun onePlusOne() {\n    assertEquals(\"1 + 1 must be 2\", 2, 1 + 1)\n    assertNotEquals(\"1 + 1 must not be 3\", 3, 1 + 1)\n  }\n} \n\n```", "```\n$ ktc test1.kt\n\n```", "```\n$ kttest AdditionTest\nJUnit version 4.12\n.\nTime: 0.004\n\nOK (1 test)\n\n```", "```\n  assertNotEquals(\"1 + 1 must not be 2\", 2, 1 + 1)\n\n```", "```\n$ ktc test1.kt \n$ kttest AdditionTest\nJUnit version 4.12\n.E\nTime: 0.005\nThere was 1 failure:\n1) onePlusOne(AdditionTest)\njava.lang.AssertionError: 1 + 1 must not be 2\\. Actual: 2\n\tat org.junit.Assert.fail(Assert.java:88)\n\n```", "```\nimport org.junit.Assert.*\nimport org.junit.Test\n\npublic class ArithmeticTest {\n\n  @Test\n  fun onePlusOne() {\n    assertEquals(\"1 + 1 must be 2\", 2, 1 + 1)\n    assertNotEquals(\"1 + 1 must not be 3\", 3, 1 + 1)\n  }\n\n  @Test(expected = ArithmeticException::class)\n  fun divisionByZero() {\n    @Suppress(\"UNUSED_VARIABLE\")\n    val result = 1 / 0\n  }\n}\n\n```", "```\n$ ktc test2.kt \ntest2.kt:14:18: warning: division by zero\n$ kttest ArithmeticTest\nJUnit version 4.12\n..\nTime: 0.004\n\nOK (2 tests)\n\n```", "```\n$ kttest ArithmeticTest\nJUnit version 4.12\n..E\nTime: 0.006\nThere was 1 failure:\n1) divisionByZero(ArithmeticTest)\njava.lang.AssertionError: Expected exception: java.lang.ArithmeticException\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)\n\n```", "```\nimport org.junit.Assert.*\nimport org.junit.Test\n\npublic class PolynomialTest {\n\n  @Test\n  fun creatingPolynomials() {\n    val p1 = Polynomial(3)\n    assertEquals(p1.degree(), 0)\n    assertEquals(p1.toString(), \"3\")\n    val p2 = Polynomial(-1, 3, -4, 0, -6)\n    assertEquals(p2.degree(), 4)\n    assertEquals(p2.toString(), \"-6 * X^4 - 4 * X^2 + 3 * X - 1\")\n    val p3 = Polynomial(0, 0, 1)\n    assertEquals(p3.degree(), 2)\n    assertEquals(p3.toString(), \"X^2\")\n    val p0 = Polynomial(0)\n    assertEquals(p0.degree(), -1)\n  }\n\n  @Test\n  fun additionAndSubtraction() {\n    val p1 = Polynomial(3)\n    val p2 = Polynomial(-1, 3, -4, 0, -6)\n    val p3 = Polynomial(5, 0, 4, 0, -6)\n\n    val q1 = p1 + p2\n    val q2 = p2 - p3\n    assertEquals(q1.toString(), \"-6 * X^4 - 4 * X^2 + 3 * X + 2\")\n    assertEquals(q2.degree(), 2)\n    assertEquals(q2.toString(), \"-8 * X^2 + 3 * X - 6\")\n  }\n\n  @Test\n  fun multiplication() {\n    val p1 = Polynomial(3)\n    val p2 = Polynomial(-1, 3, -4, 0, -6)\n    val p3 = Polynomial(0, 0, 5)\n    val p4 = Polynomial(2, -4, 6, 8)\n\n    val q1 = p1 * p2\n    val q4 = p2 * p3\n    val q5 = p2 * p4\n    assertEquals(q1.toString(), \"-18 * X^4 - 12 * X^2 + 9 * X - 3\")\n    assertEquals(q4.degree(), 6)\n    assertEquals(q4.toString(), \"-30 * X^6 - 20 * X^4 + 15 * X^3 - 5 * X^2\")\n    assertEquals(q5.toString(), \"-48 * X^7 - 36 * X^6 - 8 * X^5 - 12 * X^4 + 26 * X^3 - 26 * X^2 + 10 * X - 2\")\n  }\n\n  @Test\n  fun power() {\n    val p1 = Polynomial(3)\n    val p3 = Polynomial(0, 0, 5)\n\n    val q2 = p1 pow 5\n    val q3 = p3 pow 5\n    assertEquals(q2.degree(), 0)\n    assertEquals(q2.coeff(0), 3*3*3*3*3)\n    assertEquals(q3.degree(), 10)\n    assertEquals(q3.toString(), \"3125 * X^10\")\n  }\n\n@Test\n  fun creatingPolynomialsUsingX() {\n    assertEquals(X.toString(), \"X\")\n    val p4 = -1 * (X pow 5) + 3 * (X pow 3) - (X pow 2) + 5\n    assertEquals(p4.toString(), \"-X^5 + 3 * X^3 - X^2 + 5\")\n    val p5 = (X - 1) * (X - 3) * (X + 5) pow 2\n    assertEquals(p5.toString(), \"X^6 + 2 * X^5 - 33 * X^4 - 4 * X^3 + 319 * X^2 - 510 * X + 225\")\n  }\n\n  @Test\n  fun evaluation() {\n    val p1 = Polynomial(3)\n    val p2 = Polynomial(-1, 3, -4, 0, -6)\n    val p3 = Polynomial(0, 0, 1)\n    val p4 = -1 * (X pow 5) + 3 * (X pow 3) - (X pow 2) + 5\n    val p5 = (X - 1) * (X - 3) * (X + 5) pow 2\n\n    val eps = 1.0e-9 // floating point precision\n\n    assertEquals(3.0, p1(5.0), eps)\n    assertEquals(-1.0, p2(0.0), eps)\n    assertEquals(4.0, p3(2.0), eps)\n    assertEquals(2.0, p4(-1.0), eps)    \n    assertEquals(0.0, p5(-5.0), eps)\n  }\n\n  @Test\n  fun derivatives() {\n    @Suppress(\"UNUSED_VARIABLE\")\n    val p1 = (X - 1) * (X - 3) * ((X + 5) pow 2)\n    /*\n    val q1 = p1.derivative()\n    assertEquals(q1.degree(), 3)\n    assertEquals(q1.toString(), \"4 * X^3 + 18 * X^2 - 24 * X - 70\")\n    val q2 = q1.derivative()\n    assertEquals(q2.degree(), 2)\n    assertEquals(q2.toString(), \"12 * X^2 + 36 * X - 24\")\n    */\n  }\n}\n\n```", "```\n$ ktc polynomial.kt\n$ ktc polytest.kt\n$ kttest PolynomialTest\nJUnit version 4.12\n.......\nTime: 0.03\n\nOK (7 tests)\n\n```", "```\n@Suppress(\"UNUSED_PARAMETER\")\nclass Polynomial(coeffs: Array<Int>) {\n\n  constructor(vararg coeffs: Int) : this(coeffs.toTypedArray()) { }\n\n  fun degree(): Int = TODO()\n\n  fun coeff(i: Int): Int = TODO()\n\n  override fun toString(): String = TODO()\n\n  operator fun plus (rhs: Polynomial): Polynomial = TODO()\n\n  operator fun plus(rhs: Int) = this + Polynomial(rhs)\n\n  operator fun minus (rhs: Polynomial): Polynomial = TODO()\n\n  operator fun minus(rhs: Int) = this - Polynomial(rhs)\n\n  operator fun times (rhs: Polynomial): Polynomial = TODO()\n\n  infix fun pow (ex: Int): Polynomial = TODO()\n\n  operator fun invoke(x: Double): Double = TODO()\n}\n\noperator fun Int.times(rhs: Polynomial) = Polynomial(this) * rhs\n\nval X = Polynomial(0, 1)\n\n```", "```\n$ ktc polynomial1.kt\n\n```", "```\n$ ktc polytest.kt\n\n```", "```\n$ kttest PolynomialTest\nJUnit version 4.12\n.E.E.E.E.E.E.E\nTime: 0.026\nThere were 7 failures:\n1) creatingPolynomials(PolynomialTest)\nkotlin.NotImplementedError: An operation is not implemented.\n\tat Polynomial.degree(polynomial1.kt:31)\n2) power(PolynomialTest)\nkotlin.NotImplementedError: An operation is not implemented.\n\tat Polynomial.pow(polynomial1.kt:31)\n3) additionAndSubtraction(PolynomialTest)\nkotlin.NotImplementedError: An operation is not implemented.\n\tat Polynomial.plus(polynomial1.kt:31)\n4) multiplication(PolynomialTest)\nkotlin.NotImplementedError: An operation is not implemented.\n\tat Polynomial.times(polynomial1.kt:31)\n5) evaluation(PolynomialTest)\nkotlin.NotImplementedError: An operation is not implemented.\n\tat Polynomial.pow(polynomial1.kt:31)\n6) creatingPolynomialsUsingX(PolynomialTest)\nkotlin.NotImplementedError: An operation is not implemented.\n\tat Polynomial.toString(polynomial1.kt:31)\n7) derivatives(PolynomialTest)\nkotlin.NotImplementedError: An operation is not implemented.\n\tat Polynomial.minus(polynomial1.kt:31)\n\nFAILURES!!!\nTests run: 7,  Failures: 7\n\n```", "```\n@Suppress(\"UNUSED_PARAMETER\")\nclass Polynomial(coeffs: Array<Int>) {\n\n  constructor(vararg coeffs: Int) : this(coeffs.toTypedArray()) { }\n\n  private val c = createCoeffs(coeffs)\n\n  private fun createCoeffs(a: Array<Int>): List<Int> {\n    var s = a.lastIndex\n    while (s >= 0 && a[s] == 0)\n      s -= 1\n    return a.take(s+1)\n  }\n\n  fun degree(): Int = c.lastIndex\n\n  fun coeff(i: Int): Int = if (i < c.size) c[i] else 0\n\n  override fun toString(): String {\n    var s = StringBuilder()\n    var plus = \"\"\n    var minus = \"-\"\n    for (i in degree() downTo 0) {\n      if (c[i] != 0) {\n\tvar e = c[i]\n\ts.append(if (e > 0) plus else minus)\n\tplus = \" + \"; minus = \" - \"\n\te = Math.abs(e)\n\tif (i == 0)\n\t  s.append(e)\n\telse {\n\t  if (e != 1) {\n\t    s.append(e)\n\t    s.append(\" * \")\n\t  }\n\t  if (i > 1) {\n\t    s.append(\"X^\")\n\t    s.append(i)\n\t  } else \n\t    s.append(\"X\")\n\t}\n      }\n    }\n    return s.toString()\n  }\n\n  operator fun plus (rhs: Polynomial): Polynomial = TODO()\n\n  operator fun plus(rhs: Int) = this + Polynomial(rhs)\n\n  operator fun minus (rhs: Polynomial): Polynomial = TODO()\n\n  operator fun minus(rhs: Int) = this - Polynomial(rhs)\n\n  operator fun times (rhs: Polynomial): Polynomial = TODO()\n\n  infix fun pow (ex: Int): Polynomial = TODO()\n\n  operator fun invoke(x: Double): Double = TODO()\n}\n\noperator fun Int.times(rhs: Polynomial) = Polynomial(this) * rhs\n\nval X = Polynomial(0, 1)\n\n```", "```\n$ ktc polynomial2.kt \n$ kttest PolynomialTestJUnit version 4.12\n..E.E.E.E.E.E\nTime: 0.031\nThere were 6 failures:\n1) power(PolynomialTest)\nkotlin.NotImplementedError: An operation is not implemented.\n\tat Polynomial.pow(polynomial2.kt:66)\n...\n\n```"]