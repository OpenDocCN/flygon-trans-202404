["```\n# lab 9.XOR\nimport tensorflow as tf\nimport numpy as np\n\ntf.set_random_seed(777)  # for reproducibility\nlearning_rate = 0.01\n\nx_data = [[0, 0],\n          [0, 1],\n          [1, 0],\n          [1, 1]]\ny_data = [[0],\n          [1],\n          [1],\n          [0]]\nx_data = np.array(x_data, dtype=np.float32)\ny_data = np.array(y_data, dtype=np.float32)\n\nX = tf.placeholder(tf.float32, [None, 2], name='x-input')\nY = tf.placeholder(tf.float32, [None, 1], name='y-input')\n\nwith tf.name_scope(\"layer1\"):\n    W1 = tf.Variable(tf.random_normal([2, 2]), name='weight1')\n    b1 = tf.Variable(tf.random_normal([2]), name='bias1')\n    layer1 = tf.sigmoid(tf.matmul(X, W1) + b1)\n\n    w1_hist = tf.summary.histogram(\"weights1\", W1)\n    b1_hist = tf.summary.histogram(\"biases1\", b1)\n    layer1_hist = tf.summary.histogram(\"layer1\", layer1)\n\nwith tf.name_scope(\"layer2\"):\n    W2 = tf.Variable(tf.random_normal([2, 1]), name='weight2')\n    b2 = tf.Variable(tf.random_normal([1]), name='bias2')\n    hypothesis = tf.sigmoid(tf.matmul(layer1, W2) + b2)\n\n    w2_hist = tf.summary.histogram(\"weights2\", W2)\n    b2_hist = tf.summary.histogram(\"biases2\", b2)\n    hypothesis_hist = tf.summary.histogram(\"hypothesis\", hypothesis)\n\n# cost/loss function\nwith tf.name_scope(\"cost\"):\n    cost = -tf.reduce_mean(Y * tf.log(hypothesis) + (1 - Y) *\n                           tf.log(1 - hypothesis))\n    cost_summ = tf.summary.scalar(\"cost\", cost)\n\nwith tf.name_scope(\"train\"):\n    train = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)\n\n# Accuracy computation\n# True if hypothesis>0.5 else False\npredicted = tf.cast(hypothesis > 0.5, dtype=tf.float32)\naccuracy = tf.reduce_mean(tf.cast(tf.equal(predicted, Y), dtype=tf.float32))\naccuracy_summ = tf.summary.scalar(\"accuracy\", accuracy)\n\n# Launch graph\nwith tf.Session() as sess:\n    # tensorboard --logdir=./logs/xor_logs\n    merged_summary = tf.summary.merge_all()\n    writer = tf.summary.FileWriter(\"./logs/xor_logs_r0_01\")\n    writer.add_graph(sess.graph)  # Show the graph\n\n    # Initialize TensorFlow variables\n    sess.run(tf.global_variables_initializer())\n\n    for step in range(10001):\n        summary, _ = sess.run([merged_summary, train], feed_dict={X: x_data, Y: y_data})\n        writer.add_summary(summary, global_step=step)\n\n        if step % 100 == 0:\n            print(step, sess.run(cost, feed_dict={\n                  X: x_data, Y: y_data}), sess.run([W1, W2]))\n\n    # Accuracy report\n    h, c, a = sess.run([hypothesis, predicted, accuracy],\n                       feed_dict={X: x_data, Y: y_data})\n    print(\"\\nHypothesis: \", h, \"\\nCorrect: \", c, \"\\nAccuracy: \", a)\n\n'''\nHypothesis:  [[  6.13103184e-05]\n [  9.99936938e-01]\n [  9.99950767e-01]\n [  5.97514772e-05]]\nCorrect:  [[ 0.]\n [ 1.]\n [ 1.]\n [ 0.]]\nAccuracy:  1.0\n''' \n```"]