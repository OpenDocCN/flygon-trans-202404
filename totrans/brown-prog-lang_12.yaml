- en: 12Examples, Testing, and Program Checking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12示例、测试和程序检查
- en: '|     [12.1 From Examples to Tests](#%28part._.From_.Examples_to_.Tests%29)
    |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|     [12.1 从示例到测试](#%28part._.From_.Examples_to_.Tests%29) |'
- en: '|     [12.2 More Refined Comparisons](#%28part._s~3arefined%29) |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|     [12.2 更精细的比较](#%28part._s~3arefined%29) |'
- en: '|     [12.3 When Tests Fail](#%28part._.When_.Tests_.Fail%29) |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '|     [12.3 当测试失败时](#%28part._.When_.Tests_.Fail%29) |'
- en: '|     [12.4 Oracles for Testing](#%28part._test-oracle%29) |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|     [12.4 用于测试的神谕](#%28part._test-oracle%29) |'
- en: '|     [12.5 Testing Erroneous Programs](#%28part._test-raises%29) |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|     [12.5 测试错误的程序](#%28part._test-raises%29) |'
- en: When we think through a problem, it is often useful to write down examples of
    what we are trying to do. For example (see what I did there?), if we’re asked
    to compute the [FILL]
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们思考一个问题时，写下我们试图做的事情的示例通常是有用的。例如（看我做了什么？），如果我们被要求计算[FILL]
- en: 'There are, of course, many ways to write down examples. We could write them
    on a board, on paper, or even as comments in a computer document. These are all
    reasonable and indeed, often, the best way to begin working on a problem. However,
    if we can write our examples in a precise form that a computer can understand,
    we achieve two things:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有很多种方法可以写下示例。我们可以在板上写，纸上写，甚至可以作为计算机文档中的注释。这些都是合理的，而且通常是解决问题的最佳方法。然而，如果我们能够以计算机能理解的精确形式编写我们的示例，我们就可以实现两个目标：
- en: When we’re done writing our purported solution, we can have the computer check
    whether we got it right.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们完成写我们假定的解决方案时，我们可以让计算机检查我们是否做对了。
- en: In the process of writing down our expectation, we often find it hard to express
    with the precision that a computer expects. Sometimes this is because we’re still
    formulating the details and haven’t yet pinned them down, but at other times it’s
    because we don’t yet understand the problem. In such situations, the force of
    precision actually does us good, because it helps us understand the weakness of
    our understanding.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在写下我们的期望的过程中，我们经常发现很难以计算机期望的精度来表达。有时这是因为我们还在形成细节，还没有把它们确定下来，但在其他时候，这是因为我们还没有理解这个问题。在这种情况下，精确度的力量实际上对我们有好处，因为它帮助我们理解我们理解的弱点。
- en: 12.1From Examples to Tests
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.1从示例到测试
- en: failure of tests can be due to
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 测试失败可能是由于
- en: '- the program being wrong - the example itself being wrong'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '- 程序错误 - 示例本身错误'
- en: when we find a bug, we
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们发现一个错误时，我们
- en: '- find an example that captures the bug - add it to the program’s test suite'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '- 找到一个捕捉到错误的例子 - 将其添加到程序的测试套件中'
- en: 'so that if we make the same mistake again [REF: we do], we will catch it right
    away'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再犯同样的错误[REF：我们会]，我们将立即发现它
- en: 12.2More Refined Comparisons
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.2更精细的比较
- en: 'Sometimes, a direct comparison via is isn’t enough for testing. We saw raises
    in the last section for testing errors. However, when doing some computations,
    especially involving math with approximations, we want to ask a different question.
    For example, consider these tests for distance-to-origin:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，通过 `is` 进行直接比较并不足以进行测试。在上一节中，我们看到了测试错误的 raises。然而，在做一些计算时，特别是涉及到近似数学的计算时，我们想问一个不同的问题。例如，考虑这些距离原点的测试：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What can we check here? Typing this into the REPL, we can find that the answer
    prints as 1.4142135623730951. That’s an approximation of the real answer, which
    Pyret cannot represent exactly. But it’s hard to know that this precise answer,
    to this decimal place, and no more, is the one we should expect up front, and
    thinking through the answers is supposed to be the first thing we do!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以检查什么？在 REPL 中输入这个，我们可以发现答案打印为 1.4142135623730951。这是对真实答案的近似，Pyret 无法完全表示。但很难知道这个精确的答案，到这个小数位数，没有更多，是我们应该预期的，思考答案应该是我们做的第一件事！
- en: Since we know we’re getting an approximation, we can really only check that
    the answer is roughly correct, not exactly correct. If we can check that the answer
    to distance-to-origin(point(1, 1)) is around, say, 1.41, and can do the same for
    some similar cases, that’s probably good enough for many applications, and for
    our purposes here. If we were calculating orbital dynamics, we might demand higher
    precision, but note that we’d still need to pick a cutoff! Testing for inexact
    results is a necessary task.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道我们得到的是一个近似值，我们实际上只能检查答案是否大致正确，而不是完全正确。如果我们可以检查到到达原点（point(1, 1)）的距离的答案大约是，比如说，1.41，并且可以对一些类似情况做同样的事情，那对于许多应用程序来说，这可能已经足够了，对于我们这里的目的也是如此。如果我们正在计算轨道动力学，我们可能会要求更高的精度，但请注意，我们仍然需要选择一个截止值！测试不精确结果是一项必要的任务。
- en: 'Let’s first define what we mean by “around” with one of the most precise ways
    we can, a function:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先用一种最精确的方式来定义“around”，即一个函数：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The is form now helps us out. There is special syntax for supplying a user-defined
    function to use to compare the two values, instead of just checking if they are
    equal:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 is 形式帮了我们一个忙。有一种特殊的语法可以提供一个用户定义的函数来比较这两个值，而不仅仅是检查它们是否相等：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Adding %(something) after is changes the behavior of is. Normally, it would
    compare the left and right values for equality. If something is provided with
    %, however, it instead passes the left and right values to the provided function
    (in this example around). If the provided function produces true, the test passes,
    if it produces false, the test fails. This gives us the control we need to test
    functions with predictable approximate results.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 is 后面添加 %(something) 会改变 is 的行为。通常，它会比较左右值是否相等。但是如果提供了 something，它会将左右值传递给提供的函数（在这个示例中是
    around）。如果提供的函数返回 true，则测试通过，如果返回 false，则测试失败。这给了我们测试具有可预测近似结果的函数所需的控制权。
- en: Exercise
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Extend the definition of distance-to-origin to include polar points.
  id: totrans-28
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扩展 distance-to-origin 的定义以包括极坐标点。
- en: Exercise
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This might save you a Google search: [polar conversions](http://en.wikipedia.org/wiki/Polar_coordinate_system#Converting_between_polar_and_Cartesian_coordinates).
    Use the design recipe to write x-component and y-component, which return the x
    and y Cartesian parts of the point (which you would need, for example, if you
    were plotting them on a graph). Read about num-sin and other functions you’ll
    need at [the Pyret number documentation](http://www.pyret.org/docs/latest/numbers.html).'
  id: totrans-31
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这可能会省去你一次谷歌搜索的时间：[极坐标转换](http://en.wikipedia.org/wiki/Polar_coordinate_system#Converting_between_polar_and_Cartesian_coordinates)。使用设计配方编写
    x-分量和 y-分量，它们返回点的 x 和 y 笛卡尔部分（例如，如果你要在图表上绘制它们）。阅读关于 num-sin 和其他你需要的函数在[Pyret 数字文档](http://www.pyret.org/docs/latest/numbers.html)。
- en: Exercise
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Write a data definition called Pay for pay types that includes both hourly
    employees, whose pay type includes an hourly rate, and salaried employees, whose
    pay type includes a total salary for the year. Use the design recipe to write
    a function called expected-weekly-wages that takes a Pay, and returns the expected
    weekly salary: the expected weekly salary for an hourly employee assumes they
    work 40 hours, and the expected weekly salary for a salaried employee is 1/52
    of their salary.'
  id: totrans-34
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 写一个名为 Pay 的支付类型的数据定义，其中包括按小时计算工资的员工，其支付类型包括每小时的工资率，以及按年计算工资的员工，其支付类型包括一年的总工资。使用设计配方编写一个名为
    expected-weekly-wages 的函数，它接受一个 Pay，并返回预期的周工资：按小时计算员工的预期周工资假设他们工作 40 小时，按年计算员工的预期周工资是他们年薪的
    1/52。
- en: 12.3When Tests Fail
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.3当测试失败时
- en: Suppose we’ve written the function sqrt, which computes the square root of a
    given number. We’ve written some tests for this function. We run the program,
    and find that a test fails. There are two obvious reasons why this can happen.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们写了一个函数 sqrt，用于计算给定数字的平方根。我们为这个函数写了一些测试。我们运行程序，发现一个测试失败了。这可能有两个明显的原因。
- en: Do Now!
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 立刻做！
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What are the two obvious reasons?
  id: totrans-39
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 两个明显的原因是什么？
- en: 'The two reasons are, of course, the two “sides” of the test: the problem could
    be with the values we’ve written or with the function we’ve written. For instance,
    if we’ve written'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这两个原因就是测试的“两面”：问题可能出在我们写的值上，也可能出在我们写的函数上。例如，如果我们写的是
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: then the fault clearly lies with the values (because \(1.75^2\) is clearly not
    \(4\)). On the other hand, if it fails the test
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 那么显然问题出在值上（因为 \(1.75^2\) 显然不是 \(4\)）。另一方面，如果测试失败
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: then the odds are that we’ve made an error in the definition of sqrt instead,
    and that’s what we need to fix.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 那么很可能是我们在 sqrt 的定义上出了错，这就是我们需要修正的地方。
- en: Note that there is no way for the computer to tell what went wrong. When it
    reports a test failure, all it’s saying is that there is an inconsistency between
    the program and the tests. The computer is not passing judgment on which one is
    “correct”, because it can’t do that. That is a matter for human judgment.For this
    reason, we’ve been doing research on [peer review of tests](http://cs.brown.edu/~sk/Publications/Papers/Published/pkf-ifpr-tests-tf-prog/),
    so students can help one another review their tests before they begin writing
    programs.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，计算机无法知道出了什么问题。当它报告测试失败时，它所说的只是程序和测试之间存在不一致。计算机不会对哪一个是“正确”的进行判断，因为它无法做到这一点。这是人类判断的事情。因此，我们一直在研究
    [测试的同行评审](http://cs.brown.edu/~sk/Publications/Papers/Published/pkf-ifpr-tests-tf-prog/)，这样学生可以在开始编写程序之前相互帮助审查他们的测试。
- en: 'Actually...not so fast. There’s one more possibility we didn’t consider: the
    third, not-so-obvious reason why a test might fail. Return to this test:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其实...不要这么快下结论。我们没有考虑的还有一个可能性：测试失败的第三个，不那么明显的原因。回到这个测试：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Clearly the inputs and outputs are correct, but it could be that the definition
    of sqrt is also correct, and yet the test fails.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，输入和输出是正确的，但可能定义的 sqrt 也是正确的，但测试失败了。
- en: Do Now!
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就做！
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Do you see why?
  id: totrans-51
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你明白原因了吗？
- en: Depending on how we’ve programmed sqrt, it might return the root -2 instead
    of 2. Now -2 is a perfectly good answer, too. That is, neither the function nor
    the particular set of test values we specified is inherently wrong; it’s just
    that the function happens to be a relation, i.e., it maps one input to multiple
    outputs (that is, \(\sqrt{4} = \pm 2\)). The question now is how to write the
    test properly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们编写 sqrt 的方式不同，它可能返回 -2 这个根，而不是 2。现在 -2 也是一个完全正确的答案。也就是说，函数和我们指定的特定测试值集都不是固有错误；只是函数恰好是一个关系，即它将一个输入映射到多个输出（也就是说，\(\sqrt{4}
    = \pm 2\））。现在的问题是如何正确编写测试。
- en: 12.4Oracles for Testing
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.4 用于测试的预言
- en: 'In other words, sometimes what we want to express is not a concrete input-output
    pair, but rather check that the output has the right relationship to the input.
    Concretely, what might this be in the case of sqrt? We hinted at this earlier
    when we said that 1.75 clearly can’t be right, because squaring it does not yield
    4. That gives us the general insight: that a number is a valid root (note the
    use of “a” instead of “the”) if squaring it yields the original number. That is,
    we might write a function like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，有时我们想要表达的不是具体的输入输出对，而是检查输出与输入之间的正确关系。具体来说，在 sqrt 的情况下可能是什么呢？我们之前曾暗示过，当我们说
    1.75 明显不对时，因为它的平方不等于 4 时，这给了我们一个一般性的见解：如果平方后的数与原始数相等，则该数字是有效的根（请注意使用“a”而不是“the”）。也就是说，我们可能写出这样的一个函数：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: and then our test looks like
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们的测试看起来像
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Unfortunately, this has an awkward failure case. If sqrt does not produce a
    number that is in fact a root, we aren’t told what the actual value is; instead,
    is-sqrt returns false, and the test failure just says that false (what is-sqrt
    returns) is not true (what the test expects)—<wbr>which is both absolutely true
    and utterly useless.Fortunately, Pyret has a better way of expressing the same
    check. Instead of is, we can write satisfies, and then the value on the left must
    satisfy the predicate on the right. Concretely, this looks like:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这有一个尴尬的失败案例。如果 sqrt 未产生实际上是根的数字，我们将不会被告知实际值是多少；相反，is-sqrt 返回 false，测试失败只是说
    false（is-sqrt 返回的值）不是 true（测试期望的值）—这既绝对正确又毫无用处。幸运的是，Pyret 有一种更好的方法来表达相同的检查。我们可以使用
    satisfies 替代 is，然后左侧的值必须满足右侧的谓词。具体来说，看起来像这样：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'which lets us write:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们可以写成：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, if there’s a failure, we learn of the actual value produced by sqrt(4)
    that failed to satisfy the predicate.Consider the following problem: given a word
    (such as a name), we would like to spell it using the symbols of atoms (ignoring
    upper- and lower-case). This function, call it elemental, consumes a string and
    produces a list of strings such that'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果有失败，我们将得知 sqrt(4) 产生的实际值未能满足谓词。考虑以下问题：给定一个单词（例如一个名称），我们希望使用原子的符号来拼写它（忽略大小写）。这个函数，称之为
    elemental，消耗一个字符串并产生一个字符串列表，使得
- en: each string in the output is an atomic symbol, and
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出中的每个字符串都是一个原子符号，并且
- en: the concatenation of the strings in the output yields the input.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出中字符串的连接产生了输入。
- en: 'For instance, consider my name; it can be spelled as [list: "S", "H", "Ri",
    "Ra", "M"] (for [FILL], respectively). Thus we would write:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，考虑我的名字；它可以拼写为 [list: "S", "H", "Ri", "Ra", "M"]（分别对应 [FILL]）。因此我们会写：'
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now consider another example: [FILL]. We can clearly see that this breaks down
    as'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑另一个例子：[FILL]。我们可以清楚地看到，这个例子会分解为
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 12.5Testing Erroneous Programs
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.5测试错误程序
- en: '- use RAISES to check erroneous code'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '- 使用RAISES来检查错误代码'
