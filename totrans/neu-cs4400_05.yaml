- en: Lists & RecursionTuesday, January 10th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表与递归星期二，1月10日
- en: Lists are a fundamental Racket data type.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是 Racket 的基本数据类型。
- en: 'A list is defined as either:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 列表被定义为：
- en: the empty list (`null`, `empty`, or `'()`),
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 空列表（`null`、`empty` 或 `'()`），
- en: a pair (`cons` cell) of anything and a list.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何东西和一个列表的一对（`cons` 细胞）。
- en: As simple as this may seem, it gives us precise *formal* rules to prove that
    something is a list.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这看起来很简单，但它给了我们精确的 *形式* 规则，以证明某些东西是一个列表。
- en: Why is there a “the” in the first rule?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么第一个规则中有一个“the”？
- en: 'Examples:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'List operations — predicates:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 列表操作 — 断言：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can derive `list?` from the above rules:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据上述规则推导出`list?`：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: But why can’t we define `list?` more simply as
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但为什么我们不能更简单地定义`list?`为
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The difference between the above definition and the proper one can be observed
    in the full Racket language, not in the student languages (where there are no
    pairs with non-list values in their tails).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述定义与正确定义之间的区别可以在完整的 Racket 语言中观察到，而不是在学生语言中（其中尾部没有包含非列表值的对）。
- en: 'List operations — destructors for pairs (`cons` cells):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 列表操作 — 对成对（`cons` 细胞）的解构器：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Traditionally called `car`, `cdr`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上称为`car`、`cdr`。
- en: Also, any `c<x>r` combination for `<x>` that is made of up to four `a`s and/or
    `d`s — we will probably not use much more than `cadr`, `caddr` etc.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，任何由最多四个`a`和/或`d`组成的`c<x>r`组合 — 我们可能不会使用比`cadr`、`caddr`等更多。
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Example for recursive function involving lists:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 包含列表的递归函数的示例：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Use different tools, esp:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同的工具，尤其是：
- en: syntax-checker
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法检查器
- en: stepper
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步进器
- en: How come we could use `list` as an argument — use the syntax checker
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们可以将`list`用作参数 — 使用语法检查器
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Main idea: lists are a recursive structure, so functions that operate on lists
    should be recursive functions that follow the recursive definition of lists.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思想：列表是一个递归结构，所以操作列表的函数应该是遵循列表的递归定义的递归函数。
- en: Another example for list function — summing a list of numbers
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表函数的另一个例子 — 对数字列表求和
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Also show how to implement `rcons`, using this guideline.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 还展示如何使用这个指南实现`rcons`。
- en: '* * *'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'More examples:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更多例子：
- en: Define `reverse` — solve the problem using `rcons`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 定义`reverse` — 使用`rcons`解决问题。
- en: '`rcons` can be generalized into something very useful: `append`.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`rcons`可以被泛化为非常有用的东西：`append`。'
- en: How would we use `append` instead of `rcons`?
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何使用`append`而不是`rcons`？
- en: How much time will this take? Does it matter if we use `append` or `rcons`?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这需要多长时间？我们使用`append`还是`rcons`有关系吗？
- en: Redefine `reverse` using tail recursion.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用尾递归重新定义`reverse`。
- en: Is the result more complex? (Yes, but not too bad because it collects the elements
    in reverse.)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果更复杂吗？（是的，但不会太糟糕，因为它按相反顺序收集元素。）
