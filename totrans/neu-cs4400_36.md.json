["```\n    (run \"{with {x 3}\u00a0 \u00a0 \u00a0 \u00a0 {with {f {fun {y} {+ x y}}}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {with {x 5}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {call f 4}}}}\")\n    ```", "```\n    (define (kons x y)\u00a0 (lambda (n)\u00a0 \u00a0 (match n\u00a0 \u00a0 \u00a0 ['first\u00a0 x]\u00a0 \u00a0 \u00a0 ['second y]\u00a0 \u00a0 \u00a0 [else (error ...)])))(define my-pair (kons 1 2))\n    ```", "```\n    (define (foo)\u00a0 x)\n    ```", "```\n    (let ([x 1])\u00a0 (foo))\n    ```", "```\n    (define (bar x)\u00a0 (foo))(let ([x 1])\u00a0 (bar 2))\n    ```", "```\n    (define (add x y)\u00a0 (+ x y))\n    ```", "```\n    (let ([+ -])\u00a0 (add 1 2))\n    ```", "```\n    x=\"the global x\"print_x() { echo \"The current value of x is \\\"$x\\\"\"; }foo() { local x=\"x from foo\"; print_x; }print_x; foo; print_x\n    ```", "```\n    $x=\"the global x\";sub print_x { print \"The current value of x is \\\"$x\\\"\\n\"; }sub foo { local($x); $x=\"x from foo\"; print_x; }print_x; foo; print_x;\n    ```", "```\n    (define (orange-juice)\u00a0 (* x 2))(define x 3)(define y (orange-juice)) ; y is now 6(define x 1)(define y (orange-juice)) ; y is now 2\n    ```", "```\n    def orange_juice():\u00a0 return x*2def foo(x):\u00a0 return orange_juice()foo(2)\n    ```", "```\n    from __future__ import nested_scope\n    ```", "```\n    % irbirb(main):001:0> x = 0=> 0irb(main):002:0> lambda{|x| x}.call(5)=> 5irb(main):003:0> x=> 5\n    ```", "```\n        {with {f {fun {x} {call f x}}}\u00a0 {call f 0}}\n        ```"]