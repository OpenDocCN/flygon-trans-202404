- en: Virtual Machine Monitors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lecture Notes for CS 140
  prefs: []
  type: TYPE_NORMAL
- en: Spring 2014
  prefs: []
  type: TYPE_NORMAL
- en: John Ousterhout
  prefs: []
  type: TYPE_NORMAL
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    Section 10.2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the abstraction provided by an OS to a process?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (Virtual) memory
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A subset of the instruction set of the underlying machine
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Most (but not all) of the hardware registers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A set of kernel calls with particular arguments for file I/O, etc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Overall: a subset of the facilities of the underlying machine, augmented with
    extra mechanisms implemented by the operating system.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What if we implemented a different abstraction for a process, which looks *exactly*
    like the underlying hardware:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The complete instruction set of the underlying machine
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical memory
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory management unit (page tables, etc.)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I/O devices
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Traps and interrupts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No predefined system calls
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This abstraction is called a *virtual machine*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To a "process", it appears that it has its own private machine.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple "processes" can share a single machine, each thinking it's running
    on its own private machine.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The operating system for this is called a *virtual machine monitor*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Can run a complete operating system inside a virtual machine: called a *guest
    operating system*.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each virtual machine can run a different guest operating system.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing virtual machine monitors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One approach: simulation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write program that simulates instruction execution, like Bochs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulate memory, I/O devices also.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use one large file to hold contents of a "disk"
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulate kernel/user bit, interrupt vectors, etc.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Problem: too slow'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 100x slowdown for CPU/memory
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 2x slowdown for I/O
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Better approach: use CPU to simulate itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run virtual machine guest OS like a user process (in unprivileged mode).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Most instructions executed at the full speed of the CPU.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Anything "unusual" causes a trap into the virtual machine monitor, which simulates
    the appropriate behavior.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Special cases:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Privileged instructions (e.g. HALT):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Since virtual machine runs in user mode, these cause "illegal instruction" traps
    into VMM.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM catches these traps, simulates appropriate behavior.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kernel calls in guest OS:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: User program running under guest OS issues kernel call instruction.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Traps always go to VMM (not guest OS).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VMM analyzes trapping instruction, simulates system call to guest OS:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Move trap info from VMM stack to stack of guest OS
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Find interrupt vector in memory of guest OS
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch simulated mode to "privileged"
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Return out of VMM to interrupt handler in guest OS.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When guest OS returns from system call, this traps to VMM also (illegal instruction
    in user mode); VMM simulates return to guest user level.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I/O devices:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Guest OS writes to I/O device register
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM has arranged for the containing page to fault
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM takes page fault, recognizes address as I/O device register
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM simulates instruction and its impact on the simulated I/O device
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When actual I/O operation completes, VMM simulates interrupt into the guest
    OS
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For better performance, write new device drivers that call directly into the
    VMM (using system calls).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Virtual memory: VMM uses page tables to simulate virtual memory mapping in
    guest OS.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Three levels of memory:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Guest virtual address space
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Guest physical address space
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM physical memory
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Guest OS creates page tables, but these aren't used by actual hardware.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM manages the real page tables, one set per virtual machine. These are called
    *shadow page tables*.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM manages physical memory
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Initially all (shadow) page table entries have present 0.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When page fault occurs, VMM finds physical page and corresponding guest page
    table entry. Two possibilities:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'present is 0 in the guest page table entry: this fault must be reflected to
    the guest OS:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulate page fault for guest OS (similar to kernel call).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Guest OS invokes I/O to load page into guest physical memory.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Guest OS sets present to 1 in guest page table entry.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Guest OS returns from page fault, which traps into VMM again (like returning
    from kernel call).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM sees that present is 1 in guest page table entry, finds corresponding physical
    page, creates entry in shadow page table.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM returns from the original page fault, causing guest application to retry
    the reference.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'present is 1 in the guest page table entry: guest OS thinks page is present
    in guest physical memory (but VMM may have swapped it out anyway).'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM locates the corresponding physical page, loading it in memory if needed.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM creates entry in shadow page table.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM returns from the original page fault, causing guest application to retry
    the reference.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In this situation the page fault is invisible to the guest OS.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If guest OS modifies its page tables, causes page fault, VMM updates shadow
    page tables to match.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Potential problem:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM must trap any behavior that requires simulation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Special memory locations? Use page faults.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Special instructions? Must trap
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pathological case:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Instruction that is valid in both user mode and kernel mode
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: But, behaves differently in user mode
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example: "read processor status" (where kernel/user mode bit is in the status
    word)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Virtualizable*: a machine with no such special cases'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Until recently, very few machines were completely virtualizable (e.g. x86 wasn't
    until recently)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Dynamic binary translation*: solution for machines that are not virtualizable:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM analyzes all code executed in virtual machine
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Replaces non-virtualizable instructions with traps
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Very tricky: how to find all code?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In practice, how much overhead do VMMs add?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CPU-bound applications: < 5%'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I/O-bound applications: ~30%'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: History/usage of virtual machines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Invented by IBM in late 1960's
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Original usage:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One VM per user
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each user ran a different guest OS
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Single shared hardware platform
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interest died out in the 1980''s and 1990''s:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each user has a private machine
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reinvented, made practical by Mendel Rosenblum and graduate students at Stanford,
    formed VMware.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Software development:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Need to test software on different OS versions:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep one VM for each OS version.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a single machine to test all versions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Datacenters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Problem: many machines, each running a single application'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Need separate machines for isolation: application crash could bring down the
    entire machine'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Most applications only need a fraction of machine's resources.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution: datacenter consolidation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One VM per application
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run several VM's on a single machine
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reduce # of machines'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Encapsulation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMM can encapsulate entire state of a VM in a file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can save, continue, restore old state.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Datacenter example:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can migrate VM's between machines to balance load
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Software development:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests may corrupt the state of the machine
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run tests in a VM
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Always start tests from a saved VM configuration
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Discard VM state after tests
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Results: reproducible tests'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Many other uses:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run MacOS and Windows on the same machine
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Security: can monitor all communication into and out of VM.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
