- en: Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口
- en: Interface
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接口
- en: 'Interface is a reference type which contains some method definitions. Any type
    which implements all the methods defined by a reference type will satisfy this
    interface type automatically. Through interface, you can approach object-oriented
    programming. Check the following example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 接口是一个引用类型，其中包含一些方法定义。任何实现了引用类型定义的所有方法的类型都会自动满足这个接口类型。通过接口，你可以使用面向对象编程。看下面的例子：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The running result is:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 运行结果是：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s analyze the code detailedly:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析一下代码：
- en: (1)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: (1)
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The above code defines a interface `Foo` which has only one method: `foo()`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码定义了一个只有一个方法 `foo()` 的接口 `Foo`。
- en: (2)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: (2)
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'struct `A` has `2` methods: `foo()` and `bar()`. Since it already implements
    `foo()` method, it satisfies `Foo` interface.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 结构体 `A` 有 `2` 个方法：`foo()` 和 `bar()`。由于它已经实现了 `foo()` 方法，所以它满足 `Foo` 接口。
- en: (3)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: (3)
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`callFoo` requires a variable whose type is `Foo` interface, and passing `A`
    is OK. The `callFoo` will use `A`''s `foo()` method, and "`A foo`" is printed.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`callFoo` 需要一个类型为 `Foo` 接口的变量，传递 `A` 是可以的。`callFoo` 将使用 `A` 的 `foo()` 方法，并打印出“`A
    foo`”。'
- en: 'Let''s change the `main()` function:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改 `main()` 函数：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This time, the argument of `callFoo()` is `&a`, whose type is `*A`. Compile
    and run the program, you may find it also outputs: "`A foo`". So `*A` type has
    all the methods which `A` has. But the reverse is not true:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，`callFoo()` 的参数是 `&a`，它的类型是 `*A`。编译并运行程序，你可能会发现它也输出了：“`A foo`”。所以 `*A` 类型拥有
    `A` 所有的方法。但反过来不成立：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Compile the program:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 编译程序：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can see also `*A` type has implemented `foo()` and `bar()` methods, it doesn't
    mean `A` type has both methods by default.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以看到 `*A` 类型实现了 `foo()` 和 `bar()` 方法，这并不意味着 `A` 类型默认就有这两个方法。
- en: 'BTW, every type satisfies the empty interface: `interface{}`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，每种类型都满足空接口：`interface{}`。
- en: 'The interface type is actually a tuple which contains `2` elements: `<type,
    value>`, `type` identifies the type of the variable which stores in the interface
    while `value` points to the actual value. The default value of an interface type
    is `nil`, which means both `type` and `value` are `nil`: `<nil, nil>`. When you
    check whether an interface is empty or not:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接口类型实际上是一个包含 `2` 个元素的元组：`<type, value>`，`type` 标识存储在接口中的变量的类型，而 `value` 指向实际的值。接口类型的默认值是
    `nil`，这意味着 `type` 和 `value` 都是 `nil`：`<nil, nil>`。当你检查一个接口是否为空时：
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You must remember only if both `type` and `value` are `nil` means the interface
    value is `nil`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须记住，只有当 `type` 和 `value` 都是 `nil` 时，接口值才是 `nil`。
- en: 'Reference:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料：
- en: '[The Go Programming Language](http://www.gopl.io/).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go语言圣经](http://www.gopl.io/)。'
