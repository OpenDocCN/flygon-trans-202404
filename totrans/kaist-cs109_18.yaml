- en: More about classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多关于类的信息
- en: 'So far all our classes where data classes, because the compiler provides some
    nice support for these: a reasonable toString method, equality testing, and they
    can be used as elements in a set or as keys in a map.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所有的类都是数据类，因为编译器为这些类提供了一些很好的支持：一个合理的`toString`方法，相等性测试，它们可以用作集合中的元素或映射中的键。
- en: Data classes are meant for objects that have a number of basic attributes, like
    numbers and strings, and there are some restrictions on their definition. In this
    section we will work with general classes—we will review the differences at the
    end.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类是为具有一些基本属性的对象而设计的，比如数字和字符串，并且对它们的定义有一些限制。在本节中，我们将使用一般的类—我们将在最后回顾它们的区别。
- en: Constructor arguments
  id: totrans-3
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构造函数参数
- en: 'When creating objects, we are often providing arguments for the constructor,
    as for instance when we made a Date:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建对象时，我们经常为构造函数提供参数，就像我们创建日期时一样：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The arguments 2012, 4, 9 correspond to the parameters year, month, and day that
    appear in parentheses after the class name in the class declaration. The constructor
    parameters can be val fields, var fields, or simply parameters for the construction
    of the class.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`2012, 4, 9`对应于在类声明中类名后的括号中出现的参数`year`、`month`和`day`。构造函数参数可以是`val`字段、`var`字段或类的构造的参数。
- en: 'Here is an immutable Point class. Both class parameters are val fields:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个不可变的`Point`类。两个类参数都是`val`字段：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is a mutable Rect class to store an axis-parallel rectangle. The class
    parameters are var fields:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个可变的矩形类`Rect`来存储一个与坐标轴平行的矩形。类参数是`var`字段：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first class parameter is a Point object, so I should create rectangle objects
    like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个类参数是一个`Point`对象，所以我应该像这样创建矩形对象：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s say I don''t like this, I want to be able to create rectangles by giving
    four numbers, like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我不喜欢这个，我想要能够通过给出四个数字来创建矩形，就像这样：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'I still want to be able to store the top-left corner as a Point object, but
    because the class parameters now look different, I cannot define the corner field
    in the class parameter list. Instead I need to do it like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然想要能够将左上角存储为`Point`对象，但是因为类参数现在看起来不同了，我不能在类参数列表中定义`corner`字段。相反，我需要像这样做：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now the corner field is defined in the body of the class. The class parameters
    x and y are simply parameters of the method that constructs objects of type Rect,
    they are not fields of the class:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`corner`字段在类的主体中被定义。类参数`x`和`y`只是`Rect`类型对象构造方法的参数，它们不是类的字段：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So every occurrence of val or var in the body of the class defines a field of
    the class. Every field has to be initialized with a starting value. This value
    is used when the object is constructed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以类的每个`val`或`var`在类的主体中的出现都定义了一个类的字段。每个字段都必须用一个初始值进行初始化。当对象被构造时，将使用此值。
- en: Privacy
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 隐私性
- en: 'Let us define an Accumulator, a counter that starts with zero, and to which
    we can add a value ([accum1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/52-objects/accum1.kts)):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个累加器，一个从零开始的计数器，我们可以给它加上一个值（[accum1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/52-objects/accum1.kts)）：
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The class itself has no class parameters this time, so no arguments are given
    when we create Accumulator objects:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这次类本身没有类参数，所以在创建`Accumulator`对象时不需要给出任何参数：
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: (Note that since Accumulator is not a data class, it has a rather ugly toString
    method by default. We would have to override toString to get nicer output.)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: （注意，由于`Accumulator`不是数据类，它默认有一个相当丑陋的`toString`方法。我们需要重写`toString`以获得更好的输出。）
- en: 'What is not so nice here is that we could accidentally modify the sum-field
    of the Accumulator object:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不太好的是，我们可能会意外修改`Accumulator`对象的`sum`字段：
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The programmer using the Accumulator class made a mistake here and set acc2.sum
    back to zero—so now the final result is wrong.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用累加器类的程序员在这里犯了一个错误，并将`acc2.sum`设为零—所以现在最终结果是错误的。
- en: 'This is an example that shows the importance of privacy. A client—that is,
    code using our class— should consider an object as a black box. The client should
    not need or want to know how the object is implemented, and must only use the
    methods provided by the object to communicate with it. Our Accumulator object
    should have two operations: adding a number to the current sum, and reading out
    the current sum. It should not be possible to modify the current sum.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个展示隐私重要性的例子。一个客户端——也就是使用我们类的代码——应该将对象视为黑匣子。客户端不应该需要或想要知道对象是如何实现的，只能使用对象提供的方法与其通信。我们的
    Accumulator 对象应该有两个操作：将一个数字添加到当前总和中，以及读取当前总和。不应该可以修改当前总和。
- en: 'We can achieve this by forbidding client code to access the field that stores
    the current sum. To do so, we declare the field to be private. However, that means
    that we cannot access it at all, so we have to add a new method to be able to
    read the current value of the summation ([accum2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/52-objects/accum2.kts)):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过禁止客户端代码访问存储当前总和的字段来实现这一点。为此，我们将该字段声明为 private。然而，这意味着我们根本无法访问它，因此我们必须添加一个新方法来读取求和的当前值（[accum2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/52-objects/accum2.kts)）：
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is how we use it correctly:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们正确使用它的方式：
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'But now see what happens when we make a mistake and try to change the sum:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但是现在看看当我们犯一个错误并尝试更改总和时会发生什么：
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Since sum is not a field but a method that returns a value, we cannot assign
    to it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 sum 不是一个字段而是一个返回值的方法，我们无法对其进行赋值。
- en: 'And even if we tried to change the field current directly, the compiler would
    catch this programming error:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们试图直接更改字段 current，编译器也会捕捉到这个编程错误：
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In fact, even looking at the value of current is forbidden (that''s why we
    needed the sum method):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，甚至查看 current 的值都是被禁止的（这就是为什么我们需要 sum 方法）：
- en: '[PRE14]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The private keyword means that the member can be accessed only from methods
    inside the class. You can use it both for fields and for methods. So a private
    method is a method that can be called only from other methods in the same class.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: private 关键字意味着该成员只能从类内部的方法中访问。你可以用它来修饰字段和方法。因此，私有方法是只能从同一类中的其他方法调用的方法。
- en: A Blackjack game
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一个二十一点游戏
- en: To see a more interesting example, let us program a Blackjack game. We first
    need a class that represents the playing cards. Remember that there are four suits
    called clubs, spades, hearts, and diamonds, and 13 faces, namely 2 to 10, Jack,
    Queen, King, and Ace.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到一个更有趣的例子，让我们来编写一个二十一点游戏。我们首先需要一个代表扑克牌的类。记住，有四种花色，分别是梅花、黑桃、红心和方块，以及 13 个面值，即
    2 到 10、J、Q、K 和 A。
- en: '![A set of playing cards](../Images/087a846aa87e996f0322a944f0bf09ea.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![一副扑克牌](../Images/087a846aa87e996f0322a944f0bf09ea.jpg)'
- en: 'Since this is a simple class, we should make it a data class. We override toString
    anyway to obtain a nice string representation ([blackjack1.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/52-objects/blackjack1.kt)):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个简单的类，我们应该将其制作成一个数据类。无论如何，我们都会重写 toString 以获得一个漂亮的字符串表示（[blackjack1.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/52-objects/blackjack1.kt)）：
- en: '[PRE15]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note the value method, which returns the number of points that the card is worth.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 value 方法，它返回卡片的点数。
- en: '[PRE16]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We next need a class Deck that stores an entire deck of cards, and allows us
    to draw cards from the deck ([blackjack2.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/52-objects/blackjack2.kt)):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要一个 Deck 类，它存储整副牌，并允许我们从牌堆中抽取牌（[blackjack2.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/52-objects/blackjack2.kt)）：
- en: '[PRE17]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Note that Deck has no class parameter, so it is created simply by saying Deck()
    without any arguments. Let''s look at the first lines of the class more carefully:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 Deck 没有类参数，因此可以简单地通过 Deck() 来创建它，不需要任何参数。让我们仔细看看类的前几行：
- en: '[PRE18]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The first line defines a val-field named cards. This field is initialized with
    an empty mutable list. So before the Deck object can be used, this list has to
    be filled with the actual cards. This is done by the two method calls generateDeck()
    and shuffleDeck(). Both are private methods of Deck: That is, they are methods
    of Deck, but they cannot be called directly by client code. They are purely for
    internal use of the class (in our case for use in the constructor, to set up a
    properly shuffled deck of the 52 Blackjack cards). The first method generateDeck
    fills the array with the 52 cards, the second method shuffleDeck rearranges them
    into a random order.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行定义了一个名为 cards 的 val 字段。该字段用一个空的可变列表进行初始化。因此，在 Deck 对象可以被使用之前，这个列表必须填充实际的卡片。这是通过两个方法调用
    generateDeck() 和 shuffleDeck() 来完成的。它们都是 Deck 的私有方法：也就是说，它们是 Deck 的方法，但不能被客户端代码直接调用。它们纯粹是为了类的内部使用（在我们的例子中是在构造函数中使用，以设置一个正确洗牌的
    52 张二十一点卡片的牌堆）。第一个方法 generateDeck 用 52 张卡片填充数组，第二个方法 shuffleDeck 将它们重新排列成随机顺序。
- en: 'Finally, the draw method is not private: It is meant for clients of the Deck
    to draw one card from the deck.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，draw 方法不是私有的：它是为了让 Deck 的客户端从牌堆中抽取一张牌而设计的。
- en: 'Here is an example of using the Deck class:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用 Deck 类的一个例子：
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now that we have a working deck, we can write the client code, that is, we can
    implement the complete Blackjack game. Here is the main function that implements
    one game (you can download the entire program as [blackjack-game.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/52-objects/blackjack-game.kt)).
    Note how easy it is to read this code, because we have hidden all the complexity
    of storing cards and shuffling and managing the deck inside the Card and Deck
    classes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个可工作的牌堆，我们可以编写客户端代码，也就是我们可以实现完整的二十一点游戏。这里是实现一个游戏的 main 函数（你可以下载整个程序 [blackjack-game.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/52-objects/blackjack-game.kt)）。请注意，由于我们已经隐藏了存储卡片、洗牌和管理牌堆的所有复杂性在
    Card 和 Deck 类中，因此阅读这段代码是多么容易。
- en: '[PRE20]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To compile the game, we need the Date and Deck classes (from blackjack2.kt)
    and the game functions (from blackjack-game.kt), so we can compile like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译游戏，我们需要 Date 和 Deck 类（来自 blackjack2.kt）以及游戏函数（来自 blackjack-game.kt），所以我们可以这样编译：
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We run the game through the main function in blackjack-game.kt, that is like
    this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过 blackjack-game.kt 中的 main 函数来运行游戏，就像这样：
- en: '[PRE22]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: So what about data classes?
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 那么数据类呢？
- en: In a [previous chapter](tutorial-data-classes.html) we have learnt about data
    classes. In this chapter we have started to talk about normal classes. So what's
    the difference?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在[之前的章节](tutorial-data-classes.html)中，我们已经学习了数据类。在本章中，我们开始讨论普通类。那么它们有��么区别呢？
- en: 'The short answer is: Data classes are for small objects that have no hidden
    state. Our Deck class was an example of an object with hidden state, namely the
    current cards on the deck.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 简短的答案是：数据类适用于没有隐藏状态的小对象。我们的 Deck 类就是一个具有隐藏状态的对象的例子，即牌堆上的当前卡片。
- en: 'The long answer is that data classes are different from normal classes in the
    following ways:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 长答案是，数据类与普通类在以下方面有所不同：
- en: For normal classes, the toString method just prints the class name and some
    string in hexadecimal. For data classes, it prints the class name and the values
    of all the fields. If we want a pretty toString method for normal classes, we
    need to override the toString method and define it ourselves.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于普通类，toString 方法只会打印类名和一些十六进制字符串。对于数据类，它会打印类名和所有字段的值。如果我们想要一个漂亮的 toString 方法用于普通类，我们需要重写
    toString 方法并自己定义它。
- en: 'For normal classes, the equality operators == and != only test if the two references
    refer to the same object. For data classes, two objects are equal if all their
    fields are equal:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于普通类，相等运算符 == 和 != 只检查两个引用是否指向同一个对象。对于数据类，如果它们的所有字段都相等，则两个对象是相等的：
- en: '[PRE23]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you want to redefine the meaning of == and != for normal classes, you have
    to define an equals method.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想重新定义普通类的 == 和 != 的含义，你必须定义一个 equals 方法。
- en: Immutable data class objects can be used as elements of a set or as keys of
    a map. For normal classes, this will only work if you define equals and hashCode,
    but that goes beyond the scope of this tutorial.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可变数据类对象可以作为集合的元素或映射的键使用。对于普通类，只有在你定义 equals 和 hashCode 方法时才能起作用，但这超出了本教程的范围。
- en: 'Multiple data class fields can be extracted in one step:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个数据类字段可以一次性提取：
- en: '[PRE24]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The assignment val (y, m, d) = date works because date is a data class object.
    For normal classes, you would have to define the componentX methods.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 赋值语句`val (y, m, d) = date`有效是因为`date`是一个数据类对象。对于普通类，你需要定义`componentX`方法。
- en: 'Data classes automatically have a copy method that allows you to make copies
    where you selectively change some field, for instance like this:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类自动拥有一个复制方法，允许你制作副本并选择性地更改一些字段，例如像这样：
- en: '[PRE25]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: For normal classes you would have to define such a method by hand.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于普通的类，你需要手动定义这样一个方法。
