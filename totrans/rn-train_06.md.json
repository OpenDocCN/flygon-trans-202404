["```\n import MainTabsView from './MainTabsView';\nimport EditView from './EditView';\nimport BroswerView from './BroswerView';\n\nconst ROUTES = { MainTabsView,  BroswerView, EditView }; \n```", "```\nclass App extends Component {\n  renderScene = (route, navigator) => {\n    let Scene = ROUTES[route.name];\n    return <Scene {...route} navigator={navigator}/>;\n  }\n  configureScene = (route, routeStack) => {\n    switch (route.name){\n      case 'EditView':\n        return Navigator.SceneConfigs.FloatFromBottom;\n      default:\n        return Navigator.SceneConfigs.PushFromRight;\n    }\n  }\n  render() {\n    return (\n      <View style={styles.container}>\n        <StatusBar barStyle=\"light-content\"/>\n        <Navigator\n          initialRoute={{name: 'MainTabsView'}}\n          renderScene={this.renderScene}\n          configureScene={this.configureScene}/>\n      </View>\n    )\n  }\n} \n```", "```\n...\n  handleEdit = ()=>{\n    //Navigate forward to a new scene\n    this.props.navigator.push({name: 'EditView', data: this.props.data});\n  }\n... \n```", "```\n...\n  close = ()=>{\n    //Transition back and unmount the current scene\n    this.props.navigator.pop();\n  }\n... \n```", "```\n...\ncomponentDidMount(){\n    this.currentRoute = this.props.navigator.navigationContext.currentRoute;\n    this.bindEvents();\n  }\n  componentWillUnmount(){\n    this.unBindEvents();\n  }\n  bindEvents = ()=>{\n    this.willFocusSubscription  = this.props.navigator.navigationContext.addListener('willfocus', (event) => {\n      if (this.currentRoute !== event.data.route) {\n        this.setState({isVisible: false});\n      }\n    });\n    this.didFocusSubscription  = this.props.navigator.navigationContext.addListener('didfocus', (event) => {\n      if (this.currentRoute === event.data.route) {\n        this.setState({isVisible: true});\n      }\n    });\n  }\n  unBindEvents = ()=>{\n    this.willFocusSubscription.remove();\n    this.didFocusSubscription.remove();\n  }\n... \n```"]