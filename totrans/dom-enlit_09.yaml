- en: Chapter 4 - Element Node Selecting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 4.1 Selecting a specific element node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most common methods for getting a reference to a single element node are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*querySelector()*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*getElementById()*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the code below I leverage both of these methods to select an element node
    from the HTML document.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/b4Rch](http://jsfiddle.net/domenlightenment/b4Rch)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The *getElementById()* method is pretty simple compared to the more robust *querySelector()*
    method. The *querySelector()* method permits a parameter in the form of a [CSS
    selector syntax](http://www.w3.org/TR/css3-selectors/#selectors). Basically you
    can pass this method a CSS 3 selector (e.g. *'#score>tbody>tr>td:nth-of-type(2)'*)
    which it will use to select a single element in the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*querySelector()* will return the first node element found in the document
    based on the selector. For example, in the code example above we pass a selector
    that would select all the li''s in CSS, but only the first one is returned.'
  prefs: []
  type: TYPE_NORMAL
- en: '*querySelector()* is also defined on element nodes. This allows for the method
    to limit (allows for context querying) its results to a specific vein of the DOM
    tree'
  prefs: []
  type: TYPE_NORMAL
- en: 4.2 Selecting/creating a list (aka *NodeList*) of element nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most common methods for selecting/creating a list of nodes in an HTML document
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*querySelectorAll()*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*getElementsByTagName()*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*getElementsByClassName()*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below we use all three of these methods to create a list of the *<li>* elements
    in the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/nT7Lr](http://jsfiddle.net/domenlightenment/nT7Lr)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If its not clear the methods used in the code example above do not select a
    specific element, but instead creates a list (aka [*NodeLists*](https://developer.mozilla.org/En/DOM/NodeList))
    of elements that you can select from.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*NodeLists* created from *getElementsByTagName()* and *getElementsByClassName()*
    are considered live are will always reflect the state of the document even if
    the document is updated after the list is created/selected.'
  prefs: []
  type: TYPE_NORMAL
- en: The *querySelectorAll()* method does not return a live list of elements. Meaning
    that the list created from *querySelectorAll()* is a snap shot of the document
    at the time it was created and is not reflective of the document as it changes.
    The list is static not live.
  prefs: []
  type: TYPE_NORMAL
- en: '*querySelectorAll()*, *getElementsByTagName()*, and *getElementsByClassName*
    are also defined on element nodes. This allows for the method to limit its results
    to specific vein(s) of the DOM tree (e.g. *document.getElementById(''header'').getElementsByClassName(''a'')*).'
  prefs: []
  type: TYPE_NORMAL
- en: I did not mention the *getElementsByName()* method as it not commonly leverage
    over other solutions but you should be aware of its existence for selecting form,
    img, frame, embed, and object elements from a document that all have the same
    name attribute value.
  prefs: []
  type: TYPE_NORMAL
- en: Passing either *querySelectorAll()* or *getElementsByTagName()* the string *'*'*,
    which generally means all, will return a list of all elements in the document.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that *childNodes* will also return a *NodeList* just like *querySelectorAll()*,
    *getElementsByTagName()*, and *getElementsByClassName*
  prefs: []
  type: TYPE_NORMAL
- en: The *NodeLists* are array like (but does not inherit array methods) lists/collections
    and have a read only *length* property
  prefs: []
  type: TYPE_NORMAL
- en: 4.3 Selecting all immediate child element nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *children* property from an element node we can get a list (aka [*HTMLCollection*](https://developer.mozilla.org/en/DOM/HTMLCollection))
    of all the immediate children nodes that are element nodes. In the code below
    I use *children* to create a selection/list of all of the *<li>*'s contained wiithin
    the *<ul>*.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/svfRC](http://jsfiddle.net/domenlightenment/svfRC)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Notice that using *children* only gives us the immediate element nodes excluding
    any nodes (e.g. text nodes) that are not elements. If the element has no children
    then *children* will return an empty array-like-list.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*HTMLCollection*''s contain elements in document order, that is they are placed
    in the array in the order the elements appear in the DOM'
  prefs: []
  type: TYPE_NORMAL
- en: '*HTMLCollection*''s are live, which means any change to the document will be
    reflected dynamically in the collection'
  prefs: []
  type: TYPE_NORMAL
- en: 4.4 Contextual element selecting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The methods *querySelector()*, *querySelectorAll()*, *getElementsByTagName()*,
    and *getElementsByClassName* typically accessed from the *document* object are
    also defined on element nodes. This allows for these methods to limit its results
    to specific vein(s) of the DOM tree. Or said another, you can select a specific
    context in which you would like the methods to search for element nodes by invoking
    these methods on element node objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/fL6tV](http://jsfiddle.net/domenlightenment/fL6tV)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These methods not only operate on the live dom but programatic DOM structures
    that are created in code as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/CCnva](http://jsfiddle.net/domenlightenment/CCnva)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 4.5 Pre-configured selections/lists of element nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should be aware that there are some legacy, pre-configured arrays-like-lists,
    containing element nodes from an HTML document. Below I list a couple of these
    (not the complete list) that might be handy to be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: '*document.all* - all elements in HTML document'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*document.forms* - all *<form>* elements in HTML document'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*document.images* - all *<img>* elements in HTML document'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*document.links* - all *<a>* elements in HTML document'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*document.scripts* - all *<script>* elements in HTML document'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*document.styleSheets* - all *<link>* or *<style>* objects in HTML document'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These pre-configured arrays are constucted from the [HTMLCollection](https://developer.mozilla.org/en/DOM/HTMLCollection)
    interface/object, except *document.styleSheets* it uses *StyleSheetList*
  prefs: []
  type: TYPE_NORMAL
- en: '*[HTMLCollection](https://developer.mozilla.org/en-US/docs/DOM/HTMLCollection)*''s
    are live just like *[NodeList](https://developer.mozilla.org/En/DOM/NodeList)*''s.'
  prefs: []
  type: TYPE_NORMAL
- en: Oddly *document.all* is constucted from a *HTMLAllCollection* not an *HTMLCollection*
    and is not supported in Firefox
  prefs: []
  type: TYPE_NORMAL
- en: 4.6 Verify an element will be selected using *matchesSelector()*
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *matchesSelector()* method we can determine if an element will match
    a selector string. For example say we want to determine if an *<li>* is the first
    child element of a *<ul>*. In the code example below I select the first *<li>*
    inside of the *<ul>* and then ask if that element matches the selector, *li:first-child*.
    Because it in fact does, the *matchesSelector()* method returns *true*.
  prefs: []
  type: TYPE_NORMAL
- en: 'live code: [http://jsfiddle.net/domenlightenment/9RayM](http://jsfiddle.net/domenlightenment/9RayM)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: matchesSelector has not seen much love from the browsers as its usage is behind
    browser prefixes *mozMatchesSelector()*, *webkitMatchesSelector()*, *oMatchesSelector()*,
    *msMatchesSelector()*
  prefs: []
  type: TYPE_NORMAL
- en: In the future *matchesSelector()* will be renamed to *matches()*
  prefs: []
  type: TYPE_NORMAL
