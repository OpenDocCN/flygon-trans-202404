["```\nnull(cons 1 null)(cons 1 (cons 2 (cons 3 null)))(list 1 2 3) ; a more convenient function to get the above\n```", "```\nnull? ; true only for the empty listpair? ; true for any cons celllist? ; this can be defined using the above\n```", "```\n(define (list? x)\u00a0 (if (null? x)\u00a0 \u00a0 #t\u00a0 \u00a0 (and (pair? x) (list? (rest x)))))(define (list? x)\u00a0 (or (null? x)\u00a0 \u00a0 \u00a0 (and (pair? x) (list? (rest x)))))\n```", "```\n(define (list? x)\u00a0 (or (null? x) (pair? x)))\n```", "```\nfirstrest\n```", "```\n(define (list-length list)\u00a0 (if (null? list)\u00a0 \u00a0 0\u00a0 \u00a0 (+ 1 (list-length (rest list)))))\n```", "```\n(define (list-length-helper list len)\u00a0 (if (null? list)\u00a0 \u00a0 len\u00a0 \u00a0 (list-length-helper (rest list) (+ len 1))))(define (list-length list)\u00a0 (list-length-helper list 0))\n```", "```\n(define (sum-list l)\u00a0 (if (null? l)\u00a0 \u00a0 0\u00a0 \u00a0 (+ (first l) (sum-list (rest l)))))\n```"]