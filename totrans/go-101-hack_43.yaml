- en: Use sync.WaitGroup to synchronize goroutines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use sync.WaitGroup to synchronize goroutines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: (This post is a modification edition of [Use sync.WaitGroup in Golang](http://nanxiao.me/en/use-sync-waitgroup-in-golang/)).
  prefs: []
  type: TYPE_NORMAL
- en: '[sync.WaitGroup](https://golang.org/pkg/sync/#WaitGroup) provides a goroutine
    synchronization mechanism, and used for waiting for a collection of goroutines
    to finish. In the internal of `sync.WaitGroup` struct, there is a `counter` which
    records how many goroutines need to be waited are living now.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sync.WaitGroup` provides `3` methods: `Add`, `Done` and `Wait`. `Add` method
    is used to identify how many goroutines need to be waited, and it will add `counter`
    value. When a goroutine exits, it must call `Done`, and it will decrease `counter`
    value by `1`. The `main` goroutine blocks on `Wait`, once the `counter` becomes
    `0`, the `Wait` will return, and main goroutine can continue to run.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the `main` goroutine need to wait `2` goroutines, so the argument for
    `wg.Add` is `2`. The execution result is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
