- en: Install
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: '**Note:** If you do not want to install yet, you can follow along in this guide
    with the [online editor](http://elm-lang.org/try) and the [online REPL](http://elmrepl.cuberoot.in/).'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 如果你不想安装，可以在本指南中使用[在线编辑器](http://elm-lang.org/try)和[在线 REPL](http://elmrepl.cuberoot.in/)跟着学习。'
- en: Install
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: Mac — [installer](http://install.elm-lang.org/Elm-Platform-0.18.pkg)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac — [安装程序](http://install.elm-lang.org/Elm-Platform-0.18.pkg)
- en: Windows — [installer](http://install.elm-lang.org/Elm-Platform-0.18.exe)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows — [安装程序](http://install.elm-lang.org/Elm-Platform-0.18.exe)
- en: Anywhere — [npm installer](https://www.npmjs.com/package/elm) or [build from
    source](https://github.com/elm-lang/elm-platform)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何地方 — [npm 安装程序](https://www.npmjs.com/package/elm) 或[从源代码构建](https://github.com/elm-lang/elm-platform)
- en: 'After installing through any of those routes, you will have the following command
    line tools:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过任何这些途径安装后，你将拥有以下命令行工具：
- en: '[`elm-repl`](#elm-repl) — play with Elm expressions'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`elm-repl`](#elm-repl) — 与 Elm 表达式互动'
- en: '[`elm-reactor`](#elm-reactor) — get a project going quickly'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`elm-reactor`](#elm-reactor) — 快速启动项目'
- en: '[`elm-make`](#elm-make) — compile Elm code directly'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`elm-make`](#elm-make) — 直接编译 Elm 代码'
- en: '[`elm-package`](#elm-package) — download packages'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`elm-package`](#elm-package) — 下载包'
- en: We will go over how they all work in more detail right after we get your editor
    set up!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在设置好你的编辑器后立即详细介绍它们的工作原理！
- en: '**Troubleshooting:** The fastest way to learn *anything* is to talk with other
    people in the Elm community. We are friendly and happy to help! So if you get
    stuck during installation or encounter something weird, visit [the Elm Slack](http://elmlang.herokuapp.com/)
    and ask about it. In fact, if you run into something confusing at any point while
    learning or using Elm, come ask us about it. You can save yourself hours. Just
    do it!'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**故障排除：** 学习*任何*东西的最快方法是与 Elm 社区的其他人交流。我们友好且乐意帮助！所以，如果在安装过程中遇到困难或遇到奇怪的问题，请访问[Elm
    Slack](http://elmlang.herokuapp.com/)并询问。事实上，如果在学习或使用 Elm 的任何阶段遇到令人困惑的问题，请随时向我们询问。这样可以节省你几个小时。就这样！'
- en: Configure Your Editor
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置你的编辑器
- en: 'Using Elm is way nicer when you have a code editor to help you out. There are
    Elm plugins for at least the following editors:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Elm 时最好有一个代码编辑器来帮助你。以下至少有以下编辑器的 Elm 插件：
- en: '[Atom](https://atom.io/packages/language-elm)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Atom](https://atom.io/packages/language-elm)'
- en: '[Brackets](https://github.com/lepinay/elm-brackets)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[括号](https://github.com/lepinay/elm-brackets)'
- en: '[Emacs](https://github.com/jcollard/elm-mode)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Emacs](https://github.com/jcollard/elm-mode)'
- en: '[IntelliJ](https://github.com/durkiewicz/elm-plugin)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[IntelliJ](https://github.com/durkiewicz/elm-plugin)'
- en: '[Light Table](https://github.com/rundis/elm-light)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Light Table](https://github.com/rundis/elm-light)'
- en: '[Sublime Text](https://packagecontrol.io/packages/Elm%20Language%20Support)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Sublime Text](https://packagecontrol.io/packages/Elm%20Language%20Support)'
- en: '[Vim](https://github.com/ElmCast/elm-vim)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Vim](https://github.com/ElmCast/elm-vim)'
- en: '[VS Code](https://github.com/sbrink/vscode-elm)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[VS Code](https://github.com/sbrink/vscode-elm)'
- en: If you do not have an editor at all, [Sublime Text](https://www.sublimetext.com/)
    is a great one to get started with!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你根本没有编辑器，[Sublime Text](https://www.sublimetext.com/)是一个很好的开始！
- en: You may also want to try out [elm-format](https://github.com/avh4/elm-format)
    which makes your code pretty!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想尝试一下[elm-format](https://github.com/avh4/elm-format)，它可以让你的代码更漂亮！
- en: The Command Line Tools
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令行工具
- en: So we installed Elm, and it gave us `elm-repl`, `elm-reactor`, `elm-make`, and
    `elm-package`. But what do they all do exactly?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们安装了 Elm，它给了我们`elm-repl`、`elm-reactor`、`elm-make`和`elm-package`。但它们究竟是做什么的呢？
- en: elm-repl
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: elm-repl
- en: '[`elm-repl`](https://github.com/elm-lang/elm-repl) lets you play with simple
    Elm expressions.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[`elm-repl`](https://github.com/elm-lang/elm-repl) 让你可以玩弄简单的 Elm 表达式。'
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will be using `elm-repl` in the upcoming “Core Language” section, and you
    can read more about how it works [here](https://github.com/elm-lang/elm-repl/blob/master/README.md).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的“核心语言”部分使用`elm-repl`，你可以在[这里](https://github.com/elm-lang/elm-repl/blob/master/README.md)详细了解它的工作原理。
- en: '**Note:** `elm-repl` works by compiling code to JavaScript, so make sure you
    have [Node.js](http://nodejs.org/) installed. We use that to evaluate code.'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** `elm-repl` 通过将代码编译为 JavaScript 来工作，因此请确保已安装[Node.js](http://nodejs.org/)。我们使用它来评估代码。'
- en: elm-reactor
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: elm-reactor
- en: '[`elm-reactor`](https://github.com/elm-lang/elm-reactor) helps you build Elm
    projects without messing with the command-line too much. You just run it at the
    root of your project, like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[`elm-reactor`](https://github.com/elm-lang/elm-reactor) 帮助你构建 Elm 项目，而不用���过纠结于命令行。只需在项目的根目录运行它，就像这样：'
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This starts a server at [`http://localhost:8000`](http://localhost:8000). You
    can navigate to any Elm file and see what it looks like. Try to check out `examples/01-button.elm`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在[`http://localhost:8000`](http://localhost:8000)启动一个服务器。你可以导航到任何 Elm 文件并查看其内容。尝试查看`examples/01-button.elm`。
- en: '**Notable flags:**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**值得注意的标志：**'
- en: '`--port` lets you pick something besides port 8000\. So you can say `elm-reactor
    --port=8123` to get things to run at `http://localhost:8123`.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--port` 让你选择除了端口 8000 之外的东西。因此，你可以说`elm-reactor --port=8123`来使事情在`http://localhost:8123`上运行。'
- en: '`--address` lets you replace `localhost` with some other address. For example,
    you may want to use `elm-reactor --address=0.0.0.0` if you want to try out an
    Elm program on a mobile device through your local network.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--address` 让你用其他地址替换`localhost`。例如，如果你想通过本地网络在移动设备上尝试 Elm 程序，你可能想使用`elm-reactor
    --address=0.0.0.0`。'
- en: elm-make
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: elm-make
- en: '[`elm-make`](https://github.com/elm-lang/elm-make) builds Elm projects. It
    can compile Elm code to HTML or JavaScript. It is the most general way to compile
    Elm code, so if your project becomes too advanced for `elm-reactor`, you will
    want to start using `elm-make` directly.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[`elm-make`](https://github.com/elm-lang/elm-make) 构建 Elm 项目。它可以将 Elm 代码编译为
    HTML 或 JavaScript。这是编译 Elm 代码的最常用方法，所以如果你的项目对`elm-reactor`来说太复杂了，你就会想直接开始使用`elm-make`。'
- en: 'Say you want to compile `Main.elm` to an HTML file named `main.html`. You would
    run this command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要将`Main.elm`编译为一个名为`main.html`的 HTML 文件。你会运行这个命令：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Notable flags:**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**值得注意的标志：**'
- en: '`--warn` prints warnings to improve code quality'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--warn` 输出警告以提高代码质量。'
- en: elm-package
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: elm-package
- en: '[`elm-package`](https://github.com/elm-lang/elm-package) downloads and publishes
    packages from our [package catalog](http://package.elm-lang.org/). As community
    members solve problems [in a nice way](http://package.elm-lang.org/help/design-guidelines),
    they share their code in the package catalog for anyone to use!'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[`elm-package`](https://github.com/elm-lang/elm-package) 从我们的[包目录](http://package.elm-lang.org/)下载并发布包。当社区成员以[友好的方式](http://package.elm-lang.org/help/design-guidelines)解决问题时，他们会在包目录中分享他们的代码供任何人使用！'
- en: 'Say you want to use [`elm-lang/http`](http://package.elm-lang.org/packages/elm-lang/http/latest)
    and [`NoRedInk/elm-decode-pipeline`](http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest)
    to make HTTP requests to a server and turn the resulting JSON into Elm values.
    You would say:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要使用[`elm-lang/http`](http://package.elm-lang.org/packages/elm-lang/http/latest)和[`NoRedInk/elm-decode-pipeline`](http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest)来向服务器发出
    HTTP 请求并将结果 JSON 转换为 Elm 值。你会说：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will add the dependencies to your `elm-package.json` file that describes
    your project. (Or create it if you do not have one yet!) More information about
    all this [here](https://github.com/elm-lang/elm-package)!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把依赖项添加到描述你的项目的`elm-package.json`文件中。（如果你还没有一个的话，会创建一个！）关于这一切的更多信息[在这里](https://github.com/elm-lang/elm-package)！
- en: '**Notable commands:**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**值得注意的命令：**'
- en: '`install`: install the dependencies in `elm-package.json`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install`：在`elm-package.json`中安装依赖项'
- en: '`publish`: publish your library to the Elm Package Catalog'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`publish`：将你的库发布到 Elm Package Catalog'
- en: '`bump`: bump version numbers based on API changes'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bump`：根据 API 更改来增加版本号。'
- en: '`diff`: get the difference between two APIs'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diff`：获取两个 API 之间的差异'
