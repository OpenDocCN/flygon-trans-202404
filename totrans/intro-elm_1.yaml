- en: Install
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Note:** If you do not want to install yet, you can follow along in this guide
    with the [online editor](http://elm-lang.org/try) and the [online REPL](http://elmrepl.cuberoot.in/).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Install
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mac — [installer](http://install.elm-lang.org/Elm-Platform-0.18.pkg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows — [installer](http://install.elm-lang.org/Elm-Platform-0.18.exe)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anywhere — [npm installer](https://www.npmjs.com/package/elm) or [build from
    source](https://github.com/elm-lang/elm-platform)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After installing through any of those routes, you will have the following command
    line tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`elm-repl`](#elm-repl) — play with Elm expressions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`elm-reactor`](#elm-reactor) — get a project going quickly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`elm-make`](#elm-make) — compile Elm code directly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`elm-package`](#elm-package) — download packages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will go over how they all work in more detail right after we get your editor
    set up!
  prefs: []
  type: TYPE_NORMAL
- en: '**Troubleshooting:** The fastest way to learn *anything* is to talk with other
    people in the Elm community. We are friendly and happy to help! So if you get
    stuck during installation or encounter something weird, visit [the Elm Slack](http://elmlang.herokuapp.com/)
    and ask about it. In fact, if you run into something confusing at any point while
    learning or using Elm, come ask us about it. You can save yourself hours. Just
    do it!'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Configure Your Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using Elm is way nicer when you have a code editor to help you out. There are
    Elm plugins for at least the following editors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Atom](https://atom.io/packages/language-elm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Brackets](https://github.com/lepinay/elm-brackets)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Emacs](https://github.com/jcollard/elm-mode)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[IntelliJ](https://github.com/durkiewicz/elm-plugin)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Light Table](https://github.com/rundis/elm-light)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sublime Text](https://packagecontrol.io/packages/Elm%20Language%20Support)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vim](https://github.com/ElmCast/elm-vim)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[VS Code](https://github.com/sbrink/vscode-elm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you do not have an editor at all, [Sublime Text](https://www.sublimetext.com/)
    is a great one to get started with!
  prefs: []
  type: TYPE_NORMAL
- en: You may also want to try out [elm-format](https://github.com/avh4/elm-format)
    which makes your code pretty!
  prefs: []
  type: TYPE_NORMAL
- en: The Command Line Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So we installed Elm, and it gave us `elm-repl`, `elm-reactor`, `elm-make`, and
    `elm-package`. But what do they all do exactly?
  prefs: []
  type: TYPE_NORMAL
- en: elm-repl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`elm-repl`](https://github.com/elm-lang/elm-repl) lets you play with simple
    Elm expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will be using `elm-repl` in the upcoming “Core Language” section, and you
    can read more about how it works [here](https://github.com/elm-lang/elm-repl/blob/master/README.md).
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** `elm-repl` works by compiling code to JavaScript, so make sure you
    have [Node.js](http://nodejs.org/) installed. We use that to evaluate code.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: elm-reactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`elm-reactor`](https://github.com/elm-lang/elm-reactor) helps you build Elm
    projects without messing with the command-line too much. You just run it at the
    root of your project, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This starts a server at [`http://localhost:8000`](http://localhost:8000). You
    can navigate to any Elm file and see what it looks like. Try to check out `examples/01-button.elm`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Notable flags:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`--port` lets you pick something besides port 8000\. So you can say `elm-reactor
    --port=8123` to get things to run at `http://localhost:8123`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--address` lets you replace `localhost` with some other address. For example,
    you may want to use `elm-reactor --address=0.0.0.0` if you want to try out an
    Elm program on a mobile device through your local network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: elm-make
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`elm-make`](https://github.com/elm-lang/elm-make) builds Elm projects. It
    can compile Elm code to HTML or JavaScript. It is the most general way to compile
    Elm code, so if your project becomes too advanced for `elm-reactor`, you will
    want to start using `elm-make` directly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Say you want to compile `Main.elm` to an HTML file named `main.html`. You would
    run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Notable flags:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`--warn` prints warnings to improve code quality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: elm-package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`elm-package`](https://github.com/elm-lang/elm-package) downloads and publishes
    packages from our [package catalog](http://package.elm-lang.org/). As community
    members solve problems [in a nice way](http://package.elm-lang.org/help/design-guidelines),
    they share their code in the package catalog for anyone to use!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Say you want to use [`elm-lang/http`](http://package.elm-lang.org/packages/elm-lang/http/latest)
    and [`NoRedInk/elm-decode-pipeline`](http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest)
    to make HTTP requests to a server and turn the resulting JSON into Elm values.
    You would say:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will add the dependencies to your `elm-package.json` file that describes
    your project. (Or create it if you do not have one yet!) More information about
    all this [here](https://github.com/elm-lang/elm-package)!
  prefs: []
  type: TYPE_NORMAL
- en: '**Notable commands:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`install`: install the dependencies in `elm-package.json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`publish`: publish your library to the Elm Package Catalog'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bump`: bump version numbers based on API changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`diff`: get the difference between two APIs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
