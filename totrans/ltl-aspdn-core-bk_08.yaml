- en: Deploy the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploy the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've come a long way, but you're not quite done yet. Once you've created a
    great application, you need to share it with the world!
  prefs: []
  type: TYPE_NORMAL
- en: Because ASP.NET Core applications can run on Windows, Mac, or Linux, there are
    a number of different ways you can deploy your application. In this chapter, I'll
    show you the most common (and easiest) ways to go live.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ASP.NET Core applications are typically deployed to one of these environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Any Docker host**. Any machine capable of hosting Docker containers can be
    used to host an ASP.NET Core application. Creating a Docker image is a very quick
    way to get your application deployed, especially if you''re familiar with Docker.
    (If you''re not, don''t worry! I''ll cover the steps later.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure**. Microsoft Azure has native support for ASP.NET Core applications.
    If you have an Azure subscription, you just need to create a Web App and upload
    your project files. I''ll cover how to do this with the Azure CLI in the next
    section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux (with Nginx)**. If you don''t want to go the Docker route, you can
    still host your application on any Linux server (this includes Amazon EC2 and
    DigitalOcean virtual machines). It''s typical to pair ASP.NET Core with the Nginx
    reverse proxy. (More about Nginx below.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows**. You can use the IIS web server on Windows to host ASP.NET Core
    applications. It''s usually easier (and cheaper) to just deploy to Azure, but
    if you prefer managing Windows servers yourself, it''ll work just fine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kestrel and reverse proxies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don't care about the guts of hosting ASP.NET Core applications and just
    want the step-by-step instructions, feel free to skip to one of the next two sections!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ASP.NET Core includes a fast, lightweight development web server called Kestrel.
    It's the server you've been using every time you ran the app locally and browsed
    to `http://localhost:5000`. When you deploy your application to a production environment,
    it'll still use Kestrel behind the scenes. However, it's recommended that you
    put a reverse proxy in front of Kestrel, because Kestrel doesn't yet have load
    balancing and other features that bigger web servers have.
  prefs: []
  type: TYPE_NORMAL
- en: On Linux (and in Docker containers), you can use Nginx or the Apache web server
    to receive incoming requests from the internet and route them to your application
    hosted with Kestrel. If you're on Windows, IIS does the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using Azure to host your application, this is all taken care of for
    you automatically. I'll cover setting up Nginx as a reverse proxy in the Docker
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy to Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploy to Azure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deploying your ASP.NET Core application to Azure only takes a few steps. You
    can do it through the Azure web portal, or on the command line using the Azure
    CLI. I'll cover the latter.
  prefs: []
  type: TYPE_NORMAL
- en: What you'll need
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Git (use `git --version` to make sure it's installed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure CLI (follow the install instructions at [https://github.com/Azure/azure-cli](https://github.com/Azure/azure-cli))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Azure subscription (the free subscription is fine)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A deployment configuration file in your project root
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a deployment configuration file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since there are multiple projects in your directory structure (the web application,
    and two test projects), Azure won''t know which one to show to the world. To fix
    this, create a file called `.deployment` at the very top of your directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`.deployment`**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you save the file as `.deployment` with no other parts to the name.
    (On Windows, you may need to put quotes around the filename, like `".deployment"`,
    to prevent a `.txt` extension from being added.)
  prefs: []
  type: TYPE_NORMAL
- en: 'If you `ls` or `dir` in your top-level directory, you should see these items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Set up the Azure resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you just installed the Azure CLI for the first time, run
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'and follow the prompts to log in on your machine. Then, create a new Resource
    Group for this application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This creates a Resource Group in the West US region. If you're located far away
    from the western US, use `az account list-locations` to get a list of locations
    and find one closer to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create an App Service plan in the group you just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Sidebar: `F1` is the free app plan. If you want to use a custom domain name
    with your app, use the D1 ($10/month) plan or higher.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now create a Web App in the App Service plan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The name of the app (`MyTodoApp` above) must be globally unique in Azure. Once
    the app is created, it will have a default URL in the format: [http://mytodoapp.azurewebsites.net](http://mytodoapp.azurewebsites.net)'
  prefs: []
  type: TYPE_NORMAL
- en: Update the application settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sidebar: This is only necessary if you configured Facebook login in the *Security
    and identity* chapter.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Your application won''t start up properly if it''s missing the `Facebook:AppId`
    and `Facebook:AppSecret` configuration values. You''ll need to add these using
    the Azure web portal:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Azure account via [https://portal.azure.com](https://portal.azure.com)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your Web App (called `MyTodoApp` above)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Application settings** tab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **App settings** section, add `Facebook:AppId` and `Facebook:AppSecret`
    with their respective values
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Save** at the top
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy your project files to Azure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use Git to push your application files up to the Azure Web App. If
    your local directory isn''t already tracked as a Git repo, run these commands
    to set it up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create an Azure username and password for deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow the instructions to create a password. Then use `config-local-git` to
    spit out a Git URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the URL to the clipboard, and use it to add a Git remote to your local
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You only need to do these steps once. Now, whenever you want to push your application
    files to Azure, check them in with Git and run
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You'll see a stream of log messages as the application is deployed to Azure.
    When it's complete, browse to [http://yourappname.azurewebsites.net](http://yourappname.azurewebsites.net)
    to check it out!
  prefs: []
  type: TYPE_NORMAL
- en: Deploy with Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploy with Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Containerization technologies like Docker can make it much easier to deploy
    web applications. Instead of spending time configuring a server with the dependencies
    it needs to run your app, copying files, and restarting processes, you can simply
    create a Docker image that contains everything your app needs to run, and spin
    it up as a container on any Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: Docker can make scaling your app across multiple servers easier, too. Once you
    have an image, using it to create 1 container is the same process as creating
    100 containers.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start, you need the Docker CLI installed on your development machine.
    Search for "get docker for (mac/windows/linux)" and follow the instructions on
    the official Docker website. You can verify that it's installed correctly with
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you set up Facebook login in the *Security and identity* chapter, you'll
    need to use Docker secrets to securely set the Facebook app secret inside your
    container. Working with Docker secrets is outside the scope of this book. If you
    want, you can comment out the `AddFacebook` line in the `ConfigureServices` method
    to disable Facebook log in.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Add a Dockerfile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first thing you'll need is a Dockerfile, which is like a recipe that tells
    Docker what your application needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `Dockerfile` (no extension) in the web application root,
    next to `Program.cs`. Open it in your favorite editor. Write the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This tells Docker to start your image from an existing image that Microsoft
    publishes. This will make sure the container has everything it needs to run an
    ASP.NET Core app.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `COPY` command copies the contents of your local directory (the source code
    of your application) into a directory called `/app` in the Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`WORKDIR` is the Docker equivalent of `cd`. The remainder of the commands in
    the Dockerfile will run from inside the `/app` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: These commands will execute `dotnet restore` (which downloads the NuGet packages
    your application needs) and `dotnet build` (which compiles the application).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: By default, Docker containers don't expose any network ports to the outside
    world. You have to explicitly let Docker know that your app will be communicating
    on port 5000 (the default Kestrel port).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `ENV` command sets environment variables in the container. The `ASPNETCORE_URLS`
    variable tells ASP.NET Core which network interface and port it should bind to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The last line of the Dockerfile starts up your application with the `dotnet
    run` command. Kestrel will start listening on port 5000, just like it does when
    you use `dotnet run` on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full Dockerfile looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`Dockerfile`**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Create an image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Make sure the Dockerfile is saved, and then use `docker build` to create an
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Don't miss the trailing period! That tells Docker to look for a Dockerfile in
    the current directory.
  prefs: []
  type: TYPE_NORMAL
- en: Once the image is created, you can run `docker images` to to list all the images
    available on your local machine. To test it out in a container, run
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `-it` flag tells Docker to run the container in interactive mode. When you
    want to stop the container, press `Control-C`.
  prefs: []
  type: TYPE_NORMAL
- en: Set up Nginx
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the beginning of this chapter, I mentioned that you should use a reverse
    proxy like Nginx to proxy requests to Kestrel. You can use Docker for this, too.
  prefs: []
  type: TYPE_NORMAL
- en: 'The overall architecture will consist of two containers: an Nginx container
    listening on port 80, forwarding requests to a separate container running Kestrel
    and listening on port 5000.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Nginx container needs its own Dockerfile. To keep it from colliding with
    the Dockerfile you just created, make a new directory in the web application root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new Dockerfile and add these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`nginx/Dockerfile`**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create an `nginx.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`nginx/nginx.conf`**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This configuration file tells Nginx to proxy incoming requests to `http://kestrel:5000`.
    (You'll see why `kestrel:5000` works in a moment.)
  prefs: []
  type: TYPE_NORMAL
- en: Set up Docker Compose
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There''s one more file to create. Up in the web application root directory,
    create `docker-compose.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`docker-compose.yml`**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Docker Compose is a tool that helps you create and run multi-container applications.
    This configuration file defines two containers: `nginx` from the `./nginx/Dockerfile`
    recipe, and `kestrel` from the `./Dockerfile` recipe. The containers are explicitly
    linked together so they can communicate.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can try spinning up the entire multi-container application by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Try opening a browser and navigating to `http://localhost` (not 5000!). Nginx
    is listening on port 80 (the default HTTP port) and proxying requests to your
    ASP.NET Core application hosted by Kestrel.
  prefs: []
  type: TYPE_NORMAL
- en: Set up a Docker server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Specific setup instructions are outside the scope of this Little book, but any
    modern Linux distro (like Ubuntu) can be set up as a Docker host. For example,
    you could create a virtual machine with Amazon EC2, and install the Docker service.
    You can search for "amazon ec2 set up docker" (for example) for instructions.
  prefs: []
  type: TYPE_NORMAL
- en: I prefer DigitalOcean because they've made it really easy to get started. DigitalOcean
    has both a pre-built Docker virtual machine, and in-depth tutorials for getting
    Docker up and running (search for "digitalocean docker").
  prefs: []
  type: TYPE_NORMAL
