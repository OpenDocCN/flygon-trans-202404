["```\ndata ArithC:\n  | numC(n :: Number)\n  | plusC(l :: ArithC, r :: ArithC)\n  | multC(l :: ArithC, r :: ArithC)\nend\n```", "```\nfun interp(e :: ArithC) -> Number:\n  cases (ArithC) e:\n    | numC(n) => ...\n    | plusC(l, r) => ...\n    | multC(l, r) => ...\n  end\nend\n```", "```\nfun interp(e :: ArithC) -> Number:\n  cases (ArithC) e:\n    | numC(n) => n\n    | plusC(l, r) => l + r\n    | multC(l, r) => l * r\n  end\nwhere:\n  interp(numC(3)) is 3\nend\n```", "```\nfun interp(e :: ArithC) -> Number:\n  cases (ArithC) e:\n    | numC(n) => ...\n    | plusC(l, r) => ... interp(l) ... interp(r) ...\n    | multC(l, r) => ... interp(l) ... interp(r) ...\n  end\nend\n```", "```\nfun interp(e :: ArithC) -> Number:\n  cases (ArithC) e:\n    | numC(n) => n\n    | plusC(l, r) => interp(l) + interp(r)\n    | multC(l, r) => interp(l) * interp(r)\n  end\nend\n```"]