- en: Directories and Links
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录和链接
- en: Lecture Notes for CS 140
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CS 140课程讲义
- en: Spring 2014
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年春季
- en: John Ousterhout
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰·奥斯特豪特
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    Sections 13.1-13.2.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此主题的阅读材料来自《操作系统：原理与实践》：第13.1-13.2节。
- en: 'Naming: how do users refer to their files? How does OS find file, given name?'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名：用户如何引用他们的文件？操作系统如何根据名称找到文件？
- en: 'First step: file descriptor has to be stored on disk, so it will persist across
    system reboots.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一步：文件描述符必须存储在磁盘上，以便它在系统重新启动后仍然存在。
- en: 'Early UNIX versions: all descriptors stored in a fixed- size array on disk.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 早期的UNIX版本：所有描述符都存储在固定大小的数组中。
- en: 'Originally entire descriptor array was at the outer edge of the disk. Result:
    long seeks between descriptors and file data.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最初，整个描述符数组位于磁盘的外缘。结果：描述符和文件数据之间的长时间查找。
- en: 'Later improvements:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后来的改进：
- en: Place descriptor array mid-way across disk.
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将描述符数组放在磁盘中间。
- en: Many small descriptor arrays spread across disk, so descriptors can be near
    to file data.
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多小的描述符数组分布在磁盘上，因此描述符可以靠近文件数据。
- en: Space for descriptors is fixed when the disk is initialized, and can't be changed.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘初始化时，描述符的空间是固定的，无法更改。
- en: 'UNIX/Linux/Pintos terms:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UNIX/Linux/Pintos术语：
- en: File descriptor is called an *i-node*
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件描述符称为*i-节点*
- en: 'Index of i-node in the descriptor array: *i-number*. Internally the OS uses
    the i-number as an identifier for the file.'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述符数组中的i-节点索引：*i-编号*。操作系统内部使用i-编号作为文件的标识符。
- en: When a file is open, its descriptor is kept in main memory. When the file is
    closed, the descriptor is stored back to disk.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当文件打开时，其描述符保存在主存储器中。当文件关闭时，描述符会存储回磁盘。
- en: 'File naming: users want to use text names to refer to files. Special disk structures
    called *directories* are used to map names to descriptor indexes.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件命名：用户希望使用文本名称引用文件。使用称为*目录*的特殊磁盘结构将名称映射到描述符索引。
- en: 'Early approaches to directory management:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录管理的早期方法：
- en: 'A single directory for the entire disk:'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个磁盘只有一个目录：
- en: If one user uses a particular name, no-one else can.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个用户使用特定名称，则其他人都不能使用。
- en: Many early personal computers worked this way.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多早期个人计算机是这样工作的。
- en: 'A single directory for each user (e.g. TOPS-10):'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个用户只有一个目录（例如TOPS-10）：
- en: Avoids problems between users, but still makes it hard to organize information.
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免用户之间的问题，但仍然使信息组织变得困难。
- en: 'Modern systems support hierarchical directory structures. UNIX/Linux approach:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代系统支持分层目录结构。UNIX/Linux方法：
- en: Directories are stored on disk just like regular files (i.e. file descriptor
    with 14 pointers, etc.) except file descriptor has special flag bit set to indicate
    that it's a directory.
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录与常规文件一样存储在磁盘上（即，文件描述符具有14个指针等），只是文件描述符设置了特殊标志位以指示它是一个目录。
- en: Each directory contains <*name*, *i-number*> pairs in no particular order.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个目录以无特定顺序包含<*名称*，*i-编号*>对。
- en: The file pointed to by the i-number may be another directory. Hence, get hierarchical
    tree structure. Names have slashes separating the levels of the tree.
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: i-编号指向的文件可能是另一个目录。因此，得到层次树结构。名称使用斜杠分隔树的级别。
- en: There is one special directory, called the *root*. This directory has no name;
    it has i-number 2 (i-numbers 0 and 1 have other special purposes).
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个特殊的目录，称为*根目录*。这个目录没有名字；它的i-编号为2（i-编号0和1有其他特殊用途）。
- en: On some systems user programs can read directories just like regular files.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些系统上，用户程序可以像常规文件一样读取目录。
- en: Only the operating system can write directories.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有操作系统可以写入目录。
- en: Working directories
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作目录
- en: Cumbersome constantly to have to specify the full path name for all files.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不断为所有文件指定完整路径名是很繁琐的。
- en: Have OS remember one distinguished directory per process, called the *working
    directory*.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让操作系统记住每个进程一个特殊的目录，称为*工作目录*。
- en: If a file name doesn't start with "/" then it is looked up starting in the working
    directory.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文件名不以"/"开头，则从工作目录开始查找。
- en: Names starting with "/" are looked up starting in the root directory.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以"/"开头的名称从根目录开始查找。
- en: Links
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接
- en: '*UNIX hard links*:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*UNIX硬链接*：'
- en: It is possible for more than one directory entry to refer to a single file.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能有多个目录条目指向单个文件。
- en: UNIX uses reference counts in file descriptors to keep track of hard links referring
    to a file.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: UNIX使用文件描述符中的引用计数来跟踪引用文件的硬链接。
- en: Files are deleted when the last directory entry goes away.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当最后一个目录条目消失时，文件被删除。
- en: Must prevent circularities.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须防止循环。
- en: '*Symbolic links*:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*符号链接*：'
- en: A file whose contents are another file name.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个内容是另一个文件名的文件。
- en: Stored on disk like regular files, but with special flag set in descriptor.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储在磁盘上，像普通文件一样，但在描述符中设置了特殊标志。
- en: If a symbolic link is encountered during file lookup, switch to target named
    in symbolic link, continue lookup from there.
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在文件查找过程中遇到符号链接，则切换到符号链接中指定的目标，然后从那里继续查找。
