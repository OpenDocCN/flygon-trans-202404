["```\n    Receive( &serverTid, eventId );\n    Reply( serverTid, ... );\n\n    ```", "```\n    FOREVER {\n      data = AwaitEvent( eventid );  // data includes event type and volatile data\n      switch( data.event-type ) {\n      case RCV_INT:\n        Send( serverTid, {NOT_RCV, data.byte}, ... );\n        break;\n      case XMT_INT:\n        // test transmitter, turn interrupt off and on?\n        Send( serverTid, {NOT_XMIT}, byte );  // byte is to be transmitted\n        store( UART..., byte )\n        break;\n      default:\n        ASSERT( \"This never happens because our kernel is bug-free.\" );\n    }\n    ```", "```\n    // queues & fifos\n    notifierPid = Create( notifier );     //Should notifier code name be hard coded?\n    Send( notifierTid, MyTid( ), ... );   //On return notifier is known to be okay\n    RegisterAs( );                        //On return requests can begin.\n\n    ```", "```\n    FOREVER {\n      requesterTid = Receive( request, {request-type, data} );\n      switch ( request-type ) {\n      case NOT_RCV:\n        Reply( requesterTid, ... );\n        enqueue( rcvfifo, data );\n        if ( ! empty( rcvQ ) ) Reply( dequeue( rcvQ ), dequeue( rcvfifo ) );\n        break;\n      case NOT_XMIT:\n        enqueue( xmitQ, requesterTid );\n        if ( ! empty( xmitfifo ) ) Reply( dequeue( xmitQ ), dequeue( xmitfifo ) );\n        break;\n      case CLIENT_RCV:\n        enqueue( rcvQ, requesterTid );\n        if ( !empty( rcvfifo ) Reply( dequeue( rcvQ ), dequeue( rcvfifo ) );\n        break;\n      case CLIENT_XMIT:\n        Reply( requesterTid, ... );\n        enqueue ( xmitfifo, data );\n        if ( ! empty( xmitQ ) ) Reply( dequeue( xmitQ ), dequeue( xmitfifo ) );\n        break;\n      default:\n        ASSERT( \"Never executed because notifiers and clients are bug-free.\" )\n      }\n    }\n    ```", "```\n    Receive( &courierTid, ... );\n    Reply( courierTid, ... );\n\n    ```", "```\n    FOREVER {\n      Receive( &courierTid, byte );\n      load( UART..., byte )\n      data = AwaitEvent( eventid );\n      Reply( courierTid, NOT_XMIT,  );\n    }\n    ```", "```\n    Receive( &serverTid, notifierTid );\n    Send( notifierTid, ... );\n    Reply( serverTid );\n    ```", "```\n    FOREVER {\n      Send( notifierTid, {data} );\n      Send( serverTid, {req}, {data} );\n    }\n    ```", "```\n    // queues & fifos\n    notifierTid = Create( notifier );\n    courierTid = Create( courier );\n    Send( courierTid, notifierTid, ... ); // On return courier & notifier are known to be okay\n    RegisterAs( );                        //On return client requests will begin.\n\n    ```", "```\n    FOREVER {\n      requesterTid = Receive( request, {request-type, data} );\n      switch ( request-type ) {\n      case NOT_XMIT:\n        enqueue( requesterTid, xmitQ )\n        if ( ! empty( xmitFifo ) ) Reply( dequeue( xmitQ ), dequeue( xmitFifo ) );\n        break;\n      case CLIENT_XMIT:\n        Reply( requesterTid, ... );\n        enqueue ( xmitFifo, data );\n        if ( ! empty( xmitQ ) ) Reply( dequeue( xmitQ ), dequeue( xmitFifo ) );\n        break;\n      default:\n        ASSERT( \"...\" );\n      }\n    }\n    ```"]