- en: Implementing Recursion using `letrec`Tuesday, February 21st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`letrec`实现递归Tuesday，February 21st
- en: 'We will see how to add a similar construct to our language — for simplicity,
    we will add a `rec` form that handles a single binding:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何在我们的语言中添加一个类似的结构——为了简单起见，我们将添加一个处理单个绑定的`rec`形式：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using this, things can get a little tricky. What should we get if we do:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个，事情可能会变得有点棘手。如果我们执行以下操作，我们应该得到什么：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '? Currently, it seems like there is no point in using any expression except
    for a *function* expression in a `rec` expression, so we will handle only these
    cases.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '? 目前，似乎除了*函数*表达式之外，使用任何表达式都没有意义，在`rec`表达式中，所以我们只会处理这些情况。'
- en: (BTW, under what circumstances would non-function values be useful in a letrec?)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: （顺便说一句，在什么情况下非函数值在`letrec`中会有用呢？）
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'One way to achieve this is to use the same trick that we have recently seen:
    instead of re-implementing language features, we can use existing features in
    our own language, which hopefully has the right functionality in a form that can
    be re-used to in our evaluator.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的一种方法是使用我们最近见过的相同技巧：不要重新实现语言功能，而是可以使用我们自己语言中的现有功能，希望它具有正确的功能形式，以便在我们的评估器中重复使用。
- en: 'Previously, we have seen a way to implement environments using Racket closures:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们已经看到了使用 Racket 闭包实现环境的方法：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can use this implementation, and create circular environments using Racket’s
    `letrec`. The code for handling a `with` expressions is:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个实现，并使用 Racket 的`letrec`创建循环环境。处理`with`表达式的代码如下：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It looks like we should be able to handle `rec` in a similar way (the AST constructor
    name is `WRec` (“with-rec”) so it doesn’t collide with TR’s `Rec` constructor
    for recursive types):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们应该能以类似的方式处理`rec`（AST 构造器名称为`WRec`（“with-rec”），因此它与 TR 的递归类型的`Rec`构造器不冲突）：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'but this won’t work because the named expression is evaluated prematurely,
    in the previous environment. Instead, we will move everything that needs to be
    done, including evaluation, to a separate `extend-rec` function:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不起作用，因为命名表达式在先前的环境中过早地进行了评估。相反，我们将所有需要完成的工作，包括评估，移到一个单独的`extend-rec`函数中：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, the `extend-rec` function needs to provide the new, “magically circular”
    environment. Following what we know about the arguments to `extend-rec`, and the
    fact that it returns a new environment (= a lookup function), we can sketch a
    rough definition:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`extend-rec` 函数需要提供新的“神奇循环”环境。根据我们对`extend-rec`参数的了解以及它返回一个新环境（=一个查找函数）的事实，我们可以勾勒出一个粗略的定义：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'What should the missing expression be? It can simply evaluate the object given
    itself:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 遗失的表达式应该是什么？它可以简单地评估给定的对象本身：
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'But how do we get *this environment*, before it is defined? Well, the environment
    is itself a Racket *function*, so we can use Racket’s `letrec` to make the function
    refer to itself recursively:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但在定义之前我们如何获得*这个环境*呢？好吧，环境本身是一个 Racket *函数*，所以我们可以使用 Racket 的 `letrec` 让函数递归地引用自身：
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It’s a little more convenient to use an internal definition, and add a type
    for clarity:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内部定义会更方便，并且为了清晰起见添加一个类型：
- en: '[PRE9]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This works, but there are several problems:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是有效的，但存在几个问题：
- en: First, we no longer do a simple lookup in the new environment. Instead, we evaluate
    the expression on *every* such lookup. This seems like a technical point, because
    we do not have side-effects in our language (also because we said that we want
    to handle only function expressions). Still, it wastes space since each evaluation
    will allocate a new closure.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们不再在新环境中进行简单的查找。相反，我们在每次查找时都会对表达式进行评估。这似乎是一个技术性的问题，因为在我们的语言中我们没有副作用（也因为我们说我们只想处理函数表达式）。尽管如此，它会浪费空间，因为每次评估都会分配一个新的闭包。
- en: 'Second, a related problem — what happens if we try to run this:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，一个相关的问题——如果我们尝试运行以下内容会发生什么：
- en: '[PRE10]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '? Well, we do that stuff to extend the current environment, then evaluate the
    body in the new environment, this body is a single variable reference:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '? 好吧，我们做那些事情来扩展当前环境，然后在新环境中评估主体，这个主体是一个单变量引用：'
- en: '[PRE11]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'so we look up the value:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所以我们查找值：
- en: '[PRE12]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'which is:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即：
- en: '[PRE13]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'which goes into the function which implements this environment, there we see
    that `name` is the same as `name1`, so we return:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进入实现此环境的函数，我们看到`name`与`name1`相同，所以我们返回：
- en: '[PRE14]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: but the `expr` here is the original named-expression which is itself `(Id 'x)`,
    and we’re in an infinite loop.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但这里的`expr`是原始的命名表达式，它本身是`(Id 'x)`，我们处于无限循环中。
- en: 'We can try to get over these problems using another binding. Racket allows
    several bindings in a single `letrec` expression or multiple internal function
    definitions, so we change `extend-rec` to use the newly-created environment:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试使用另一个绑定来解决这些问题。Racket 允许在单个`letrec`表达式或多个内部函数定义中进行多个绑定，因此我们将`extend-rec`更改为使用新创建的环境：
- en: '[PRE15]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This runs into an interesting type error, which complains about possibly getting
    some `Undefined` value. It does work if we switch to the untyped language for
    now (using `#lang pl untyped`) — and it seems to run fine too. But it raises more
    questions, beginning with: what is the meaning of:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这遇到了一个有趣的类型错误，它抱怨可能获得一些`Undefined`值。暂时，如果我们切换到无类型语言（使用`#lang pl untyped`），它确实可以工作
    —— 而且似乎也可以正常运行。但它引发了更多问题，首先是：什么是：
- en: '[PRE16]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: or equivalently, an internal block of
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 或等效地，一个内部块
- en: '[PRE17]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '? Well, DrRacket seems to do the “right thing” in this case, but what about:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ？嗯，DrRacket在这种情况下似乎做了“正确的事情”，但是怎么样：
- en: '[PRE18]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '? As a hint, see what happens when we now try to evaluate the problematic'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ？作为提示，看看当我们现在尝试评估有问题的时候会发生什么
- en: '[PRE19]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: expression, and compare that with the result that you’d get from Racket. This
    also clarifies the type error that we received.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式，并将其与您在 Racket 中得到的结果进行比较。这也澄清了我们收到的类型错误。
- en: It should be clear now why we want to restrict usage to just binding recursive
    functions. There are no problems with such definitions because when we evaluate
    a `fun` expression, there is no evaluation of the body, which is the only place
    where there are potential references to the same function that is defined — a
    function’s body is *delayed*, and executed only when the function is applied later.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该清楚为什么我们希望将使用限制在仅绑定递归函数。这种定义没有问题，因为当我们评估`fun`表达式时，不会评估体，体是唯一可能引用定义的相同函数的地方
    —— 函数的体被*延迟*，仅在稍后应用函数时执行。
- en: 'But the biggest question that is still open: we just implemented a circular
    environment using Racket’s own circular environment implementation, and that does
    not explain how they are actually implemented. The cycle of pointers that we’ve
    implemented depends on the cycle of pointers that Racket uses, and that is a black
    box we want to open up.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 但仍然存在一个最大的问题：我们只是使用了 Racket 自己的循环环境实现来实现循环环境，并且这并不能解释它们实际上是如何实现的。我们实现的指针循环依赖于
    Racket 使用的指针循环，这是一个我们想要打开的黑盒子。
- en: For reference, the complete code is below. Note that it doesn’t work because
    of the type error — to try it, you need to switch to the untyped language, or
    avoid the extra internal binding of `val` and stick to the evaluate-when-referenced
    method.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 供参考，完整的代码如下。请注意，由于类型错误而无法正常工作——要尝试它，您需要切换到无类型语言，或者避免额外的`val`内部绑定，并坚持使用引用时评估的方法。
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
