- en: Challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grafik
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Challenge | Kurzbeschreibung | Rating |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Spirale](spiral.html) | Zeichne eine Spirale | sehr leicht |'
  prefs: []
  type: TYPE_TB
- en: '| [Postcards](postcard.html) | Zeichne eine Postkarte | leicht |'
  prefs: []
  type: TYPE_TB
- en: '| [Thumbnails](index2.html) | Erzeuge Thumbnails von Bildern | mittel |'
  prefs: []
  type: TYPE_TB
- en: '| [Rekursive Grafik](recursive_graph.html) | Zeichne rekursive Bilder | mittel
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Film](index3.html) | Drehe einen kurzen Film | schwer |'
  prefs: []
  type: TYPE_TB
- en: Daten
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Challenge | Kurzbeschreibung | Rating |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Babynamengenerator](babynamengenerator.html) | Erzeuge zufällige Babynamen
    | leicht |'
  prefs: []
  type: TYPE_TB
- en: '| [Reguläre Ausdrücke](regex.html) | Suche Muster in Text | mittel |'
  prefs: []
  type: TYPE_TB
- en: '| [Google](google.html) | Führe eine Google-Suche durch | mittel |'
  prefs: []
  type: TYPE_TB
- en: '| [Webrecherche](webrecherche.html) | Lade Webseiten herunter | mittel |'
  prefs: []
  type: TYPE_TB
- en: Webentwicklung
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Challenge | Kurzbeschreibung | Rating |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Daten anzeigen](webpage.md) | Erstelle einen einfachen Bottle-Webserver
    | mittel |'
  prefs: []
  type: TYPE_TB
- en: '| [Blog](blog.html) | Erstelle eine Blog-Webseite mit Django | schwer |'
  prefs: []
  type: TYPE_TB
- en: Spirale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Coding Challenge: Spiral'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Challenge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write a program, that draws a spiral:'
  prefs: []
  type: TYPE_NORMAL
- en: '![spiral](60014e26.png)'
  prefs: []
  type: TYPE_IMG
- en: When your program draws a spiral with at least 3 loops, you have mastered this
    challenge.
  prefs: []
  type: TYPE_NORMAL
- en: What you can practise in this coding challenge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Pillow** library in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **turtle** module in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is sufficient to draw the spiral as a series of short lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where is it easier to start (inside or outside)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both the Python modules `Pillow` and `turtle` are up to the task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have no idea where to start, try the following Python script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Optional goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: the line width grows thicker from the inside to the outside
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: there is a color gradient along the spiral
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Spiral with width and color](27a134f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Postkarte
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a Postcard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a program that creates a postcard for the city of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: '![Welcome to Poznan](poznan.png)'
  prefs: []
  type: TYPE_IMG
- en: 1\. Install Pillow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: (it is already installed with Anaconda)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Learn to know PIL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exercise 2.1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the program `example01.py`. What does it do?
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2.2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Change the numbers in the program, so that you create a square-shaped image.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Drawing shapes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exercise 3.1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the program `example02.py`. What does it do?
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3.2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add a broad horizontal bar to an image of your favourite city.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3.3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**for fast students**'
  prefs: []
  type: TYPE_NORMAL
- en: Draw a 8-pointed star on an image of your favourite city.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hint:** You can compose such a star from squares, triangles or polygons.'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Drawing text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exercise 4.1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the program `example03.py`. What does it do?
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write the text *"Welcome to (your city)"* to the shape from exercise 3.2.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Composing images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exercise 5.1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the program `example04.py`. What does it do?
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5.2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a postcard composed of four smaller pictures, the horizontal bar and
    some text on it.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Applying filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exercise 6.1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the program `example05.py`. What does it do?
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 6.2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be creative!
  prefs: []
  type: TYPE_NORMAL
- en: License
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (c) 2015 Dr. Kristian Rother and Magdalena Rother
  prefs: []
  type: TYPE_NORMAL
- en: Distributed under the conditions of the Creative Commons Attribution Share-alike
    License 4.0
  prefs: []
  type: TYPE_NORMAL
- en: Thumbnails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thumbnail Generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem description
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*“I have a big collection of photographs, and would like to search them. I
    have written a up keywords for each photograph in text files, e.g.* ''flower''*,*
    ''beach''*,* ''mountain''* etc. Now I need a program that can find all photographs
    for a given keyword.'
  prefs: []
  type: TYPE_NORMAL
- en: The program should create a big picture that shows thumbnail images 100 pixels
    wide, like in the image below.”*
  prefs: []
  type: TYPE_NORMAL
- en: Rick Closeview , hobby photographer
  prefs: []
  type: TYPE_NORMAL
- en: '![Thumbnail matrix](thumbnail_matrix.png)'
  prefs: []
  type: TYPE_IMG
- en: Instructions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Implement a program according to the problem description. The following steps
    may be helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Planning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dissect the problem into at least three separate sub-problems. Write them down
    on paper (cards or a single sheet). Try to be as precise as possible. Answer resulting
    questions.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Divide the program into functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Identify key functions your program needs to have. Decide what should be the
    input and output for each of them. Write them up as well.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Get the Graphics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The file `sample_photos.zip` contains a few example photographs. It also contains
    a file `pics.txt` in each subfolder. This is the input information for the program.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Explore Python libraries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might want to take a closer look at:'
  prefs: []
  type: TYPE_NORMAL
- en: '`os` for file handling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pillow` for image manipulation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5\. Write the program
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After these steps, start implementing.
  prefs: []
  type: TYPE_NORMAL
- en: Rekursive Grafik
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Coding Challenge: The Recursive Snowflake'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Challenge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write a program, that for a parameter `n=1` creates a basic shape out of four
    straight lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![n=1](snowflake1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you increase `n`, each line gets replaced by a smaller version of the
    basic shape. For, instance with `n=2` you get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![n=2](snowflake2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And with `n=5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![n=5](snowflake3.png)'
  prefs: []
  type: TYPE_IMG
- en: When your program is able to produce a picture for `0 < n < 6`, you have mastered
    this challenge.
  prefs: []
  type: TYPE_NORMAL
- en: 'What you can exercise in this coding challenge:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recursive algorithms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Pillow** library in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **turtle** module in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Film
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a Movie
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your favourite image(s)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python + Pillow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MEncoder` or another program to create movies from a set of images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: see the [Flower Assembly Movie](https://youtu.be/FE6_nx-MKc8) to get an idea
    how the result could look like.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a program using the PIL library that creates a set of `.png` images. Generate
    the images and generate a movie from that using a non-Python tool (e.g. MEncoder).
    Remember that a movie typically has 25 frames per second.
  prefs: []
  type: TYPE_NORMAL
- en: Hints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: start with a very simple movie to make sure the assembly is working
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the [Flower Assembly Movie](https://youtu.be/FE6_nx-MKc8) was created by slowly
    disassembling the picture and playing the frames backwards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a movie from frames on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MEncoder requires files with the frames to have names like frame_000123.png
    so that they have the right order in the final movie.
  prefs: []
  type: TYPE_NORMAL
- en: Collect all frame images in one directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: copy Mencoder into that directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: open a console (`Start -> Execute -> cmd`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: switch with `cd <directory_name>` to that directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: type
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: mencoder "mf://*.png" -mf fps=25 -o output.avi -ovc lavc -lavcopts vcodec=mpeg4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Babynamengenerator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Babynamengenerator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Programmiere einen Babynamengenerator für unentschlossene Eltern.
  prefs: []
  type: TYPE_NORMAL
- en: 'Optionale Ziele:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Das Programm gibt zufällig einen Namen aus einer vorgegebenen Liste aus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Das Programm gibt zufällig einen Namen aus dem US-Melderegister aus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Der Benutzer kann wahlweise Jungen- oder Mädchennamen auswählen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Das Programm macht 10 Vorschläge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verwende als Liste möglicher Vornamen eine Datei aus dem US-Datensatz
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reguläre Ausdrücke
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reguläre Ausdrücke
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aufgabe 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finde Wörter mit `F` im Text. Führe dazu folgendes Beispiel aus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Aufgabe 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Was haben diese vier Bilder gemeinsam?
  prefs: []
  type: TYPE_NORMAL
- en: '![King Kong Flip Flop Hip Hop Ping Pong](regex.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Bildquellen (links oben nach rechts unten):'
  prefs: []
  type: TYPE_NORMAL
- en: '*[By Source (WP:NFCC#4), Fair use](https://en.wikipedia.org/w/index.php?curid=48711736)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*[Die Autorenschaft wurde nicht in einer maschinell lesbaren Form angegeben.
    Es wird Swarve~commonswiki als Autor angenommen, CC BY-SA 3.0](https://commons.wikimedia.org/w/index.php?curid=336076)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*[Gaël Marziou from Grenoble, France - IMG_6266_DXO, CC BY 2.0](https://commons.wikimedia.org/w/index.php?curid=47416377)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Derfu, CC BY-SA 3.0*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Führe folgendes Codebeispiel aus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Aufgabe 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Besuche die Seite [www.regexone.com](http://www.regexone.com) und führe einige
    der Übungen aus.
  prefs: []
  type: TYPE_NORMAL
- en: Aufgabe 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Schreibe ein Programm, das E-Mail-Adressen in Text erkennt.
  prefs: []
  type: TYPE_NORMAL
- en: Verwende die Funktion `re.findall` und erstelle ein entsprechendes Suchmuster.
  prefs: []
  type: TYPE_NORMAL
- en: Auf [Regex101](https://regex101.com/) kannst Du den regulären Ausdruck testen.
  prefs: []
  type: TYPE_NORMAL
- en: Google
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Überprüfe mit einem Python-Programm, ob die Suchmaschine Google funktioniert.
  prefs: []
  type: TYPE_NORMAL
- en: Aufgabe 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Lade die Webseite `www.google.de` mit Python herunter.
  prefs: []
  type: TYPE_NORMAL
- en: Aufgabe 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extrahiere den Titel der Seite aus dem HTML-Dokument und gib ihn auf dem Bildschirm
    aus.
  prefs: []
  type: TYPE_NORMAL
- en: Aufgabe 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Führe eine Google-Suche aus Python durch. Recherchiere in der Dokumentation
    zum Modul `requests` danach, wie Du ein Formular über ein POST-request ausfüllen
    kannst.
  prefs: []
  type: TYPE_NORMAL
- en: Gib die Suchergebnisse auf dem Bildschirm aus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hinweise:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Das Modul `requests` hilft beim Vorbereiten der Suchanfrage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Das Formular verwendet HTTP POST.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Es gibt im Formular mindestens ein *'hidden'*-Feld, das Du angeben mußt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webrecherche
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Herunterladen von HTML-Seiten
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In den folgenden Aufgaben laden wir Daten von einer statischen Webseite oder
    einem RSS-Feed herunter.
  prefs: []
  type: TYPE_NORMAL
- en: Aufgabe 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Suche Dir eine der folgenden Seiten aus:'
  prefs: []
  type: TYPE_NORMAL
- en: RSS-Feeds des Parlaments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`https://www.parlament-berlin.de/de/Service/RSS-Feeds`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Biologische Datenbanken
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`http://ncbi.nlm.nih.gov`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`http://www.reuters.com/tools/rss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demographie
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`http://www.gapminder.org`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bücher
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`http://www.gutenberg.org`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aufgabe 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zeige den Quelltext der Seite/des Feeds an. Versuche, markante Elemente zu finden,
    anhand derer Du den Titel, Links oder Inhalte erkennst.
  prefs: []
  type: TYPE_NORMAL
- en: Aufgabe 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extrahiere den Titel der Seite aus dem HTML-Dokument/Feed und gib ihn auf dem
    Bildschirm aus. Verwende dazu die normalen Stringfunktionen.
  prefs: []
  type: TYPE_NORMAL
- en: Aufgabe 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extrahiere Links oder andere Daten aus der Seite. Entwickle dazu eine Strategie,
    die entweder die Methoden von Strings, reguläre Ausdrücke oder einen fertigen
    Parser verwendet.
  prefs: []
  type: TYPE_NORMAL
- en: Aufgabe 5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Lade 10 der verlinkten Seiten herunter und speichere sie ab.
  prefs: []
  type: TYPE_NORMAL
- en: Nützliche Module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`requests` zum Herunterladen von Webseiten'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BeautifulSoup` zum Parsen von HTML-Seiten'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scrapy` für beides zusammen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webseite mit Strassennamen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Einen Webserver mit Flask bauen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In diesem Tutorial kannst Du eine eigene dynamische HTML-Seite erstellen und
    auf einem Webserver zum Laufen bringen. Wir verwenden dazu das Python-Modul `flask`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`flask`](http://flask.pocoo.org/) ist vor allem für kleinere Webseiten geeignet.
    Eine Alternative ist `Django`, zu dem es das ausgezeichnete [DjangoGirls Tutorial](https://tutorial.djangogirls.org/)
    gibt.'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Flask installieren
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installiere das Python-Modul `flask` mit `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Eine minimale Webseite starten
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Erstelle ein Python-Programm `server.py`, und baue das Hello-World-Beispiel
    aus der [Flask-Dokumentation](http://flask.pocoo.org/docs/) nach.
  prefs: []
  type: TYPE_NORMAL
- en: 'Füge folgende Zeile zum Programm hinzu (funktioniert mit Anaconda besser als
    die in der Dokumentation angegebene Methode):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Starte das Programm. Finde heraus, unter welcher HTTP-Adresse der Server läuft.
    Setze diese Adresse im Browser ein und prüfe, ob Dein Server erreichbar ist.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tip:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Wir werden den Server im Verlauf des Tutorials noch sehr oft starten müssen.
    Stelle sicher, dass Du das Programm aus Deinem Editor oder von der Kommandozeile
    leicht anhalten und neu starten kannst.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. HTML-Code einbinden
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Die Flask-Funktionen können HTML-Code zurückgeben. Dies geht z.B. als String
    mit dreifachen Anführungszeichen. Folgender HTML-Code erzeugt eine Überschrift:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Mehr zu HTML-Elementen erfährst Du auf [Selfhtml.org](https://selfhtml.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Baue die Überschrift in die Rückgabe der Python-Funktion ein. Starte den Server
    neu. Lade die Webseite im Browser neu. Prüfe, ob Deine Überschrift auf der Seite
    erscheint.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Eine Unterseite hinzufügen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Schreibe eine zweite Python-Funktion, die den Namen Deiner Strasse ausgibt.
    Verwende den Dekorator `@app.route`, um die Seite auf die URL `/zuhause` zu legen.
  prefs: []
  type: TYPE_NORMAL
- en: Starte den Server neu und rufe beide Unterseiten im Browser auf (`/` und `/zuhause`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Hilfe:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In der Dokumentation unter [**Routing**](http://flask.pocoo.org/docs/quickstart/#routing)
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Hyperlinks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Erstelle auf der Startseite einen Hyperlink, der auf die Unterseite verweist.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dazu muss die Funktion `hello()` folgenden HTML-Code zurückgeben:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Starte den Server neu und prüfe, ob der Link funktioniert.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Ein Template hinzufügen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Es wird schnell beschwerlich, eine ganze HTML-Seite in unser Python-Skript zu
    kleben. Es ist besser, den HTML-Code in **Templates** zu speichern und diese einzubinden.
  prefs: []
  type: TYPE_NORMAL
- en: 'Erstelle eine Datei `templates/hello.html`, in die Du den folgenden HTML-Code
    einfügst:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Binde das Template entsprechend dem Abschnitt [Rendering Templates](http://flask.pocoo.org/docs/quickstart/#rendering-templates)
    aus der Flask-Dokumentation hinzu.
  prefs: []
  type: TYPE_NORMAL
- en: Starte dann den Server neu und stelle sicher, dass der Inhalt des Templates
    angezeigt wird (**achte auf die Titelzeile des Browserfensters!**).
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Variablen ins Template einbinden
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wir können aus den Python-Funktionen Daten an ein Template schicken, indem
    wir ein Dictionary zurückgeben:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In den HTML-Templates kannst Du diese Variablen folgendermassen ansprechen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 8\. Dynamische URLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Du kannst in den URLs Platzhalter verwenden, deren Inhalt als Variable verfügbar
    ist. Schreibe eine Funktion, die einen Strassennamen in der URL erhält:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Schreibe diese Funktion fertig und probiere die fertige Seite mit unterschiedlichen
    Strassennamen aus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Achtung:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Mit Platzhaltern kann es leicht passieren, dass zwei Funktionen die gleiche
    URL ansprechen. Dies kann zu interessanten Fehlern führen, weil nicht sofort ersichtlich
    ist, welche Funktion Flask aufruft.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Geodaten bereitstellen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Als Datensatz verwenden wir das [Strassennamenverzeichnis der Zeit](http://www.zeit.de/interactive/strassennamen/).
    Die Daten liegen ursprünglich im Format **GeoJSON** vor. Wir verwenden eine Datei,
    die in das `.csv`-Format umgewandelt wurde, so dass Du es bequem mit `pandas`
    verwenden kannst.
  prefs: []
  type: TYPE_NORMAL
- en: Wähle einige Strassen aus der Datei aus und stelle diese auf der Webseite als
    Tabelle dar. Lies dazu nach, wie Du eine `for`-Schleife im Template unterbringst.
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Ein Formular erstellen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Recherchiere, wie Du ein Formular mit Flask erstellst. Baue ein Formular ein,
    in dem Du einen Strassennamen in ein Eingabefeld eingibst und über einen Knopf
    das Formular abschickst.
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Kopf- und Fußzeilen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Du kannst Deine Templates auf mehrere Dateien aufteilen, um Redundanzen zu vermeiden.
    Erstelle eine Datei für Kopf- und Fusszeilen.
  prefs: []
  type: TYPE_NORMAL
- en: Wie das in Flask geht findest Du unter [Template Inheritance](http://flask.pocoo.org/docs/patterns/templateinheritance/#template-inheritance).
  prefs: []
  type: TYPE_NORMAL
- en: 12\. CSS-Stylesheets einbinden
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hier kannst Du Typographie und Farben festlegen.
  prefs: []
  type: TYPE_NORMAL
- en: Lies unter [Selfhtml.org](https://selfhtml.org/) nach, wie CSS-Befehle aussehen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Baue einen CSS-Befehl in eines der Templates ein, der die Überschrift einfärbt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Erstelle eine Datei `static/style.css`, in die Du eine weitere CSS-Anweisung
    schreibst.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binde die CSS-Datei in Dein Template ein (schreibt Dozent an).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sage Flask, wo die CSS-Datei zu finden ist. Siehe [Static Files](http://flask.pocoo.org/docs/quickstart/#static-files)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13\. Eine Karte mit Folium zeichnen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Stelle die gefundenen Strassen als interaktive Karte dar. Probiere dazu zunächst
    ein Python-Skript mit dem Modul `folium` aus. Siehe [https://github.com/krother/python_showcase/tree/master/map_markers](https://github.com/krother/python_showcase/tree/master/map_markers).
  prefs: []
  type: TYPE_NORMAL
- en: 14\. Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*"Half the internet is built on Bootstrap"*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bootstrap** ist eine Sammlung nützlicher CSS- und JavaScript-Elemente, mit
    denen Du schnell eine Typographie hinbekommst, die auch auf Mobilgeräten gut aussieht.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dazu ist eine Reihe von Schritten nötig:'
  prefs: []
  type: TYPE_NORMAL
- en: Binde die Bootstrap-Dateien in Deine Templates ein (siehe [Anleitung](http://getbootstrap.com/docs/4.0/getting-started/introduction/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Probiere eine Vorlage aus der Dokumentation aus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Probiere einzelne Elemente aus (unter *"Components"* findest Du einige, bei
    denen Du leicht siehst, ob sie funktionieren)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Anmerkung:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Oft ist es nicht wünschenswert, Dateien von einer Drittpartei einzubinden. Nachhaltiger
    ist es, diese als *statische Dateien* auf Deinem eigenen Server abzulegen.
  prefs: []
  type: TYPE_NORMAL
- en: 15\. Eine SQL-Datenbank verwenden
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Es ist natürlich nicht grade effizient, bei jedem Neustart des Servers 900 MB
    Daten in den Speicher zu laden. Eine bessere Alternative ist eine **Datenbank**.
    Verwende das Python-Modul `sqlite3`, um eine Datenbank zu erstellen und die gewünschten
    Strassen aus einer Tabelle abzufragen.
  prefs: []
  type: TYPE_NORMAL
- en: 16\. Deployment auf einem öffentlichen Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lies Dir im [Djangogirls-Tutorial](https://tutorial.djangogirls.org/en/deploy/)
    durch, wie Du einen Server auf [pythonanywhere](https://www.pythonanywhere.com/)
    anlegst. Probiere es aus! Es kostet nichts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hinweis:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Es ist sehr zu empfehlen, den Code mit `git` zu veröffentlichen, bevor Du Dich
    mit dem öffentlichen Server beschäftigst. Dadurch werden viele Einzelheiten deutlich
    einfacher.
  prefs: []
  type: TYPE_NORMAL
- en: Blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Das Projekt besteht darin, eine eigene Webseite zu entwickeln und im Netz zu
    veröffentlichen. Das [Django Girls Tutorial](https://djangogirls.org/resources/)
    bietet eine ausgezeichnete Anleitung.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ziel:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Die Webseite ist über einen Browser erreichbar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Themen:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Server-Programmierung, HTML, Deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'Python-Bibliotheken:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Django oder Bottle
  prefs: []
  type: TYPE_NORMAL
