- en: Control Measures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If, Elif, Else
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conditional statements are formed using if, elif, and else statements. An if
    statement is composed of a predicate and a body that is executed if the predicate
    is satisfied. Elif is shorthand for “else if” and is used for any additional conditions
    beyond the first if statement. An elif statement has a similar construction as
    an if statement. The else statement follows all if and elif statement as is triggered
    when none of the conditional statements prior are fulfilled.
  prefs: []
  type: TYPE_NORMAL
- en: If, elif, and else use indentation and colons to block the code appropriately.
    When you’re done, you’ll need a empty line with a matching indentation as the
    first line to close the conditional when you are inputting directly into the interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Line 1: (0 space indentation) The if condition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 2: (3 space indentation) The if body'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 3: (0 space indentation) The else if condition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 4: (3 space indentation) The else if body'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 5: (0 space indentation) The else'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 6: (3 space indentation) The else body'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 7: (0 space indentation) Empty Line closes the if block and invokes evaluation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 8: 4 is returned (the if case is skipped, the elif case is triggered,
    never reaches the else case)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that no return statement is used. That is because the conditional statement
    is outside of a procedure definition. Inside of a function body, you would expect
    “return 3” instead of “3” and so on, if that were the desired return value.
  prefs: []
  type: TYPE_NORMAL
- en: '**Homework Problem 3: Fizz Buzz**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a program that prints the integers from 1 to n (n is an argument to the
    procedure). But for multiples of three print "Fizz" instead of the number, and
    for the multiples of five print "Buzz". For numbers which are multiples of both
    three and five print "FizzBuzz".
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Loops and Range
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In python, loops are supported. Loop execute a block or line of code multiple
    times. Loops are useful for when you would like to progress through a sequence
    or repeat an operation---use a loop to iterate, instead of recursion. `for` loops
    control the number of iterations to correspond with the entries of a sequence
    to iterate over. `while` loops control the number of iterations with a predicate.
  prefs: []
  type: TYPE_NORMAL
- en: Certain control statements can be invoked within loops to stop and break out
    of the loop or to skip to the next iteration. `break` does the former and `continue`
    does the latter action. Consult online resources if you need an example of their
    use.
  prefs: []
  type: TYPE_NORMAL
- en: While loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While loops contain a predicate which is checked before the start of every iteration.
    If the predicate is not satisfied, the while loop stops. A while block uses a
    colon and indentation to indicate which line is the header and which are in the
    body
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Line 1: set up a variable x equals to zero'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 2: (0 spaces) While header with condition of x being less than 3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 3: (3 spaces) While body line calls print'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 4: (3 spaces) While body line increments x by 1 (x += 1 is the same as
    x = x + 1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 5: (0 spaces) Empty line closes While block and the block is evaluated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 6: hello is printed (for x = 0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 7: hello is printed (for x = 1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 8: hello is printed (for x = 2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 9: check the value of x'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 10: 3 is returned for the value of x (which is NOT less than 3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homework Problem 4: Snow White and the Seven Dwarves**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a program called `snow_white` that takes in two numbers as arguments,
    the first is the `num_chants`, the second is the `max_sing`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The program:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: prints "heigh" "ho" alternatingly
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: prints "its off to work we go" after `num_chants` of "heigh" or "ho"
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: stops printing after having "it's off to work we go" `max_sing` times
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'EXAMPLE: should print "it''s off to work we go" between every `5` alternating
    "hi"s and "ho"s, for a maximum of `2` times.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use a while loop (and possibly control statements) to accomplish this behavior.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Homework Problem 5: Push First Odd Back (taken from CS10)**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Write a function called `push_first_odd_back` that takes in a list as an argument
    This function should place the first odd number at the back of the input list.
    Do not return a new list - in fact this function shouldn''t return anything, it
    should only modify the input list. (Hint: use the while loop)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For loops contain a variable and a sequence (more on this later). With each
    iteration, the value of the variable changes to the next value in the sequence.
    As with other multiple line blocks, for loops are delimited by colons and indentation
    and are completed with an empty line. Within the body of the for loop, you can
    access the value of the variable being iterated over.
  prefs: []
  type: TYPE_NORMAL
- en: The `range` function creates a progression of numbers which can then be used
    in a `for` loop for control. Range takes in a start, end, and increment to create
    a sequence that includes the start and incremental entries up to, but excluding
    the end. Range will default start to zero and increment to one if not provided.
    For now, only use `range` in the context of a `for` loop, later in the lesson
    we'll go in depth on how `range` works.
  prefs: []
  type: TYPE_NORMAL
- en: 'TIP: if you want x iterations and don''t actually plan on using the iteration
    variable, use `range(x)`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can also use a string or a list in the place of range as a sequence to iterate
    over
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Homework Problem 6: Cats and Dogs**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a program that return True if the string "cat" and "dog" appear the same
    number of times in the given string.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
