- en: '[Map](data_mining_map.htm) > [Data Science](data_mining.htm) > [Predicting
    the Future](predicting_the_future.htm) > [Modeling](modeling.htm) > [Clustering](clustering.htm)
    > Self Organizing Map'
  prefs: []
  type: TYPE_NORMAL
- en: Self Organizing Map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Self organizing Map (SOM) is used for visualization and analysis of high-dimensional
    datasets. SOM facilitate presentation of high dimensional datasets into lower
    dimensional ones, usually 1-D, 2-D and 3-D. It is an unsupervised learning algorithm,
    and does not require a target vector since it learns to classify data without
    supervision. A SOM is formed from a grid of nodes or units to which the input
    data are presented. Every node is connected to the input, and there is no connection
    between the nodes. SOM is a topology preserving technique and keeps the neighborhood
    relations in its mapping presentation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b608c3d1654e6eb7af478d44eed475e2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Algorithm**1- Initialization of each node�s weights with a random number
    between 0 and 1'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/da7e56b23d7e09340683ebbd29f5f345.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 2- Choosing a random input vector from training dataset3- Calculating the Best
    Matching Unit (BMU). Each node is examined to find the one which its weights are
    most similar to the input vector. This unit is known as the Best Matching Unit
    (BMU) since its vector is most similar to the input vector. This selection is
    done by Euclidean distance formula, which is a measure of similarity between two
    datasets. The distance between the input vector and the weights of node is calculated
    in order to find the BMU.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c8c5ea41e1b5a11193c2cebbe85f6f67.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 4- Calculating the size of the neighborhood around the BMU.The size of the neighborhood
    around the BMU is decreasing with an exponential decay function. It shrinks on
    each iteration until reaching just the BMU.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d28b46dc22e8ac478bbbb5a1ecc9140b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 5- Modification of nodes� weights of the BMU and neighboring nodes, so that
    their weight gets more similar to the weight of input vector. The weight of every
    node within the neighborhood is adjusted, having greater change for neighbors
    closer to the BMU.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/092c8bd4648c89e54ef62bdb89624e08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The decay of learning rate is calculated for each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0338a13908af1710e65b43c1577b3af4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As training goes on, the neighborhood gradually shrinks. At the end of training,
    the neighborhoods have shrunk to zero size.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f68caf79a4cb8dfd2128d31fc12e6bed.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The influence rate shows amount of influence a node's distance from the BMU
    has on its learning. In the simplest form influence rate is equal to 1 for all
    the nodes close to the BMU and zero for others, but a Gaussian function is common
    too. Finally, from a random distribution of weights and through much iteration,
    SOM is able to arrive at a map of stable zones. At the end, interpretation of
    data is to be done by human but SOM is a great technique to present the invisible
    patterns in the data.
  prefs: []
  type: TYPE_NORMAL
- en: '| [Exercise](clustering_som_exercise.htm) | [![](../Images/a890baab528b0ca069f7f2599c0c5e39.jpg)](datasets/Som.txt)
    | [SOM Interactive](docs/SOM.zip) [![](../Images/c65352d3165999a5f059bb44118ad654.jpg)](http://www.codeproject.com/KB/recipes/aforge_neuro.aspx)
    |'
  prefs: []
  type: TYPE_TB
