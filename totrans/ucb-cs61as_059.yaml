- en: Project 2 - Turtle Graphics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目2 - 海龟图形
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: In Lesson 4, we explored how `cons` lets us build arbitrarily complicated list
    structures.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4课中，我们探讨了`cons`如何让我们构建任意复杂的列表结构。
- en: In this project, we'll create a simple **picture language** that will allow
    us to build arbitrarily complicated *drawings*, like the one shown below. Notice
    how the image is composed of repeated elements that are shifted and scaled.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将创建一种简单的**图形语言**，使我们能够构建任意复杂的*图形*，就像下面显示的那样。请注意，图像由重复的元素组成，这些元素被移动和缩放。
- en: '![](../static/squarelimit.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../static/squarelimit.png)'
- en: As we explore this picture language, we'll see how data abstractions and higher-order
    procedures can be combined to build simple elements into a complex system.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们探索这种图形语言时，我们将看到如何将数据抽象和高阶过程结合起来，将简单的元素构建成复杂的系统。
- en: 'To begin, copy the file `~cs61as/lib/picture.rkt` to your directory, or download
    it [here](http://inst.eecs.berkeley.edu/~cs61as/library/picture.rkt). You''ll
    also need to install the Racket package that will enable us to draw pictures.
    If you''re working on a lab computer, type the following into your terminal:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请将文件`~cs61as/lib/picture.rkt`复制到您的目录中，或者从[这里](http://inst.eecs.berkeley.edu/~cs61as/library/picture.rkt)下载。您还需要安装一个
    Racket 包，使我们能够绘制图片。如果您在实验室计算机上工作，请在终端中输入以下内容：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you want to install the picture-drawing package on your own computer, check
    out the first followup discussion to [this Piazza post](https://piazza.com/class/idnte7162cf4kk?cid=247).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在自己的计算机上安装图片绘制包，请查看[此 Piazza 帖子](https://piazza.com/class/idnte7162cf4kk?cid=247)的第一个跟进讨论。
- en: After completing installation, you should be able to type `(require graphics/turtles)`
    into Racket without errors.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 完成安装后，您应该能够在 Racket 中输入`(require graphics/turtles)`而不会出现错误。
- en: The Picture Language
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形语言
- en: When we began our study of programming in Lesson 1, we emphasized the importance
    of describing a language by focusing on the language's primitives, its means of
    combination, and its means of abstraction. We'll follow that framework here.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在第1课开始学习编程时，我们强调了通过关注语言的基本元素、组合手段和抽象手段来描述语言的重要性。我们将在这里遵循这个框架。
- en: Part of the elegance of this picture language is that there is only one kind
    of element, called a **painter**. A painter draws an image that is shifted and
    scaled to fit within a designated parallelogram-shaped **frame**. For example,
    there's a primitive painter we'll call `wave-painter` that makes a crude line
    drawing, as shown below. The actual shape of the drawing depends on the frame—all
    four images below are produced by the same `wave-painter`, but with respect to
    four different frames.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这种图形语言的优雅之处在于只有一种元素，称为**画家**。画家绘制一个被移动和缩放以适应指定的平行四边形**框架**内的图像。例如，有一个我们将称之为`wave-painter`的原始画家，它制作了一个粗糙的线条图，如下所示。绘图的实际形状取决于框架——下面的四个图像都是由相同的`wave-painter`产生的，但是相对于四个不同的框架。
- en: '![](../Images/661732ab66825094d91d21c2123ddac0.jpg) ![](../Images/582147fa0e734774f9e96a9590e37a43.jpg)
    ![](../Images/b31750ebad31dbad2ae8fa31e7ed6302.jpg) ![](../Images/d4a2b2b0476c852633a36bfe2c050c33.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/661732ab66825094d91d21c2123ddac0.jpg) ![](../Images/582147fa0e734774f9e96a9590e37a43.jpg)
    ![](../Images/b31750ebad31dbad2ae8fa31e7ed6302.jpg) ![](../Images/d4a2b2b0476c852633a36bfe2c050c33.jpg)'
- en: Combining Painters
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并画家
- en: To combine images, we use various operations that construct new painters from
    given painters. For example, the `beside` operation takes two painters and produces
    a new, compound painter that draws the first painter's image in the left half
    of the frame and the second painter's image in the right half of the frame. Similarly,
    `below` takes two painters and produces a compound painter that draws the first
    painter's image below the second painter's image.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要合并图像，我们使用各种操作从给定的画家中构建新的画家。例如，`beside`操作接受两个画家，并产生一个新的复合画家，在画面的左半部分绘制第一个画家的图像，在右半部分绘制第二个画家的图像。类似地，`below`接受两个画家，并产生一个复合画家，在第一个画家的图像下方绘制第二个画家的图像。
- en: Some operations transform a single painter to produce a new painter. For example,
    `flip-vert` takes a painter and produces a painter that draws its image upside-down,
    and `flip-horiz` produces a painter that draws the original painter's image left-to-right
    reversed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一些操作将单个画家转换为新的画家。例如，`flip-vert`接受一个画家，并产生一个将其图像倒置的画家，而`flip-horiz`产生一个从左到右翻转的原始画家图像的画家。
- en: 'Here''s how we can define a painter called `wave4` that is built up in two
    stages starting from `wave-painter`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何定义一个名为`wave4`的画家，它是从`wave-painter`开始分两个阶段构建的：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The resulting figures are shown below:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了生成的图形：
- en: '![](../Images/31ac0fe346b3103e5226236ee8555417.jpg) ![](../Images/b76123bf76cccb376ab2ef7545889e5e.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/31ac0fe346b3103e5226236ee8555417.jpg) ![](../Images/b76123bf76cccb376ab2ef7545889e5e.jpg)'
- en: Abstract Operations
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象操作
- en: 'Once we can combine painters, we would like to be able to abstract typical
    patterns of combining painters. We will implement the painter operations as Racket
    procedures. This means that we don''t need a special abstraction mechanism in
    the picture language: since the means of combination are ordinary Racket procedures,
    we automatically have the capability to do anything with painter operations that
    we can do with procedures. For example, we can abstract the pattern in `wave4`
    as'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们能够组合画家，我们希望能够抽象出典型的组合画家模式。我们将实现画家操作作为Racket过程。这意味着在图片语言中我们不需要特殊的抽象机制：由于组合方法是普通的Racket过程，我们自动具有可以对画家操作进行任何操作的能力。例如，我们可以将`wave4`中的模式抽象为
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and define `wave4` as an instance of this pattern:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 并将`wave4`定义为此模式的一个实例：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Recursive Operations
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 递归操作
- en: 'We can also define recursive operations. Here''s one called `right-split` that
    makes painters split and branch towards the right:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以定义递归操作。这里有一个称为`right-split`的操作，使画家向右分裂和分支：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s what the general template for `(right-split painter n)` looks like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`(right-split painter n)`的一般模板：
- en: '![](../Images/d0f667ac4a8321ebb6d6aeead73ba6ef.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d0f667ac4a8321ebb6d6aeead73ba6ef.jpg)'
- en: 'And here''s the result for `(right-split wave-painter 4)`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`(right-split wave-painter 4)`的结果：
- en: '![](../Images/4e071b7de6c6c6b8d8d05a365e9e9d0f.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4e071b7de6c6c6b8d8d05a365e9e9d0f.jpg)'
- en: 'We can produce balanced patterns by branching upwards as well as towards the
    right:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向上分支以及向右分支来产生平衡的模式：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s the general template for `(corner-split painter n)`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`(corner-split painter n)`的一般模板：
- en: '![](../Images/e7ddba43c98d4420bb0e0ce86cc144a1.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e7ddba43c98d4420bb0e0ce86cc144a1.jpg)'
- en: 'And here''s the result for `(corner-split wave-painter 4)`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`(corner-split wave-painter 4)`的结果：
- en: '![](../Images/6b1610baa861491a0c8ed1981a8db71e.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6b1610baa861491a0c8ed1981a8db71e.jpg)'
- en: 'By placing four copies of a `corner-split` appropriately, we obtain a pattern
    called `square-limit`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过适当放置四个`corner-split`的副本，我们获得了一个称为`square-limit`的模式：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The very first figure at the top of this page, reproduced below, is the visual
    output for `(square-limit wave-painter 5)`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面顶部的第一个图形，如下所示，是`(square-limit wave-painter 5)`的视觉输出：
- en: '![](../static/squarelimit.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../static/squarelimit.png)'
- en: Before Starting Exercise 1
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在开始练习1之前
- en: First of all, if you skimmed or skipped everything above because you wanted
    to jump directly to the first exercise, take a minute now to read everything above
    carefully. It's important!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果您因为想直接跳到第一个练习而略读或跳过上面的所有内容，请现在花一分钟仔细阅读上面的所有内容。这很重要！
- en: Also, note that you will *not* be able to test the visual output of any of your
    code until after Exercise 6\. The picture language we've been describing is incomplete—you'll
    have to fill in the gaps before we can begin using it!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，直到练习6之后，您将*无法*测试任何代码的视觉输出。我们描述的图片语言是不完整的—在我们开始使用它之前，您必须填补这些空白！
- en: 'Exercise 1: `up-split`'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1：`up-split`
- en: Define the procedure `up-split` used by `corner-split`. It is similar to `right-split`,
    except that it switches the roles of `below` and `beside`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 定义由`corner-split`使用的过程`up-split`。它类似于`right-split`，只是它交换了`below`和`beside`的角色。
- en: 'For your convenience, `right-split` is shown again here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了您的方便，`right-split`再次显示如下：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Higher-Order Operations
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高阶操作
- en: In addition to abstracting patterns of combining painters, we can work at a
    higher level, abstracting patterns of combining painter operations. That is, we
    can view the painter operations as elements to manipulate and can write means
    of combination for these elements—procedures that take painter operations as arguments
    and create new painter operations.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了抽象化组合画家的模式之外，我们还可以在更高的层次上工作，抽象化组合画家操作的模式。也就是说，我们可以将画家操作视为要操作的元素，并为这些元素编写组合方法——接受画家操作作为参数并创建新画家操作的过程。
- en: For example, `flipped-pairs` and `square-limit` each arrange four copies of
    a painter's image in a square pattern; they differ only in how they orient the
    copies. One way to abstract this pattern of painter combination is with the following
    procedure, which takes four one-argument painter operations and produces a painter
    operation that transforms a given painter with those four operations and arranges
    the results in a square. `tl`, `tr`, `bl`, and `br` are the transformations to
    apply to the top left copy, the top right copy, the bottom left copy, and the
    bottom right copy, respectively.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`flipped-pairs`和`square-limit`都将一个画家的图像排列成一个方形图案；它们之间的区别仅在于它们如何定位这些副本。抽象这种画家组合模式的一种方法是使用以下过程，它接受四个一元画家操作，并产生一个画家操作，用这四个操作来转换给定的画家，并将结果排列成一个方形。`tl`、`tr`、`bl`
    和 `br` 分别是要应用于左上副本、右上副本、左下副本和右下副本的变换。
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then `flipped-pairs` can be defined in terms of `square-of-four` as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`flipped-pairs`可以根据`square-of-four`定义如下：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similarly, `square-limit` can be expressed as:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`square-limit`可以表示为：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Exercise 2: `split`'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2：`split`
- en: '`right-split` and `up-split` can be expressed as instances of a general splitting
    operation. Define a procedure `split` with the property that evaluating'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`right-split`和`up-split`可以表示为通用分割操���的实例。定义一个具有以下属性的过程`split`，评估'
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: produces procedures `right-split` and `up-split` with the same behaviors as
    the ones already defined.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 生成了具有与已定义的相同行为的`right-split`和`up-split`过程。
- en: Frames
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 框架
- en: Before we can show how to implement painters and their means of combination,
    we must first consider frames. A frame can be described by three vectors—an origin
    vector and two edge vectors. The origin vector specifies the offset of the frame's
    origin from some absolute origin in the plane, and the edge vectors specify the
    offsets of the frame's corners from its origin. If the edges are perpendicular,
    the frame will be rectangular. Otherwise the frame will be a more general parallelogram.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们展示如何实现画家及其组合方式之前，我们必须首先考虑框架。一个框架可以由三个向量描述——一个原点向量和两个边缘向量。原点向量指定了框架原点相对于平面中某个绝对原点的偏移量，而边缘向量指定了框架角落相对于其原点的偏移量。如果边缘是垂直的，框架将是矩形的。否则，框架将是一个更一般的平行四边形。
- en: 'The figure below shows a frame and its associated vectors. In accordance with
    data abstraction, we need not be specific yet about how frames are represented
    in Racket, other than to say that there is a constructor `make-frame`, which takes
    three vectors and produces a frame, and three corresponding selectors: `origin-frame`,
    `edge1-frame`, and `edge2-frame`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了一个框架及其相关的向量。根据数据抽象，我们暂时不需要具体说明框架在 Racket 中是如何表示的，除了说有一个构造函数`make-frame`，它接受三个向量并生成一个框架，以及三个相应的选择器：`origin-frame`、`edge1-frame`
    和 `edge2-frame`
- en: '![](../Images/01b45899a66faec828d715df1076b2b8.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/01b45899a66faec828d715df1076b2b8.jpg)'
- en: We will use coordinates in the unit square to specify vectors; that is, we'll
    use the region of space where [mathjaxinline]0 \leq x,y \leq 1[/mathjaxinline].
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用单位正方形中的坐标来指定向量；也就是说，我们将使用空间区域，其中[mathjaxinline]0 \leq x,y \leq 1[/mathjaxinline]。
- en: Frame Coordinates (Optional)
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 框架坐标（可选）
- en: This optional subsection describes how frame coordinates are calculated.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可选的小节描述了如何计算框架坐标。
- en: With each frame, we associate a **coordinate map**, which is used to shift and
    scale images to fit the frame. The coordinate map transforms vectors in the unit
    square to vectors in the frame using the formula
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个框架，我们关联一个**坐标映射**，用于移动和缩放图像以适应框架。坐标映射使用以下公式将单位正方形中的向量转换为框架中的向量
- en: '![](../Images/8104d8f4a13ee8b7909e1ba09f01b921.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8104d8f4a13ee8b7909e1ba09f01b921.jpg)'
- en: where [mathjaxinline]x[/mathjaxinline] and [mathjaxinline]y[/mathjaxinline]
    are the components of the input vector.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 其中[mathjaxinline]x[/mathjaxinline]和[mathjaxinline]y[/mathjaxinline]是输入向量的分量。
- en: For example, the vector (0, 0) is mapped to the origin of the frame, (1, 1)
    to the vertex diagonally opposite the origin, and (0.5, 0.5) to the center of
    the frame.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，向量(0, 0)被映射到框架的原点，(1, 1)被映射到原点对角的顶点，(0.5, 0.5)被映射到框架的中心。
- en: 'In Racket, we can create a frame''s coordinate map with the following procedure:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Racket 中，我们可以使用以下过程创建一个框架的坐标映射：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Observe that applying `frame-coord-map` to a frame returns a procedure that,
    given a vector, returns a vector. If the argument vector is in the unit square,
    the result vector will be in the frame. For example,
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，将`frame-coord-map`应用于框架会返回一个过程，给定一个向量，它会返回一个向量。如果参数向量在单位正方形内，则结果向量将在框架内。例如，
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: returns the same vector as
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与相同向量
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: because the vector (0, 0) maps to the origin of the frame.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因为向量(0, 0)映射到框架的原点。
- en: 'Exercise 3: Representing Vectors'
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3：表示向量
- en: A two-dimensional vector [mathjaxinline]v[/mathjaxinline] running from the origin
    to a point can be represented as a pair consisting of an x-coordinate and a y-coordinate.
    Implement a data abstraction for vectors by giving a constructor `make-vect` and
    corresponding selectors `xcor-vect` and `ycor-vect`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从原点到点的二维向量[mathjaxinline]v[/mathjaxinline]可以表示为由x坐标和y坐标组成的一对。通过给出构造函数`make-vect`和相应的选择器`xcor-vect`和`ycor-vect`来为向量实现数据抽象。
- en: 'Then, in terms of your selectors and constructor, implement procedures `add-vect`,
    `sub-vect`, and `scale-vect` that perform vector addition, vector subtraction,
    and vector multiplication by a scalar:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，根据您的选择器和构造函数，实现执行向量加法、向量减法和向量乘以标量的过程`add-vect`、`sub-vect`和`scale-vect`：
- en: '[mathjax] \begin{align} (x_1, y_1) + (x_2, y_2) &= (x_1 + x_2, y_1 + y_2)\\
    (x_1, y_1) - (x_2, y_2) &= (x_1 - x_2, y_1 - y_2)\\ c \cdot (x, y) &= (cx, cy)
    \end{align} [/mathjax]'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[mathjax] \begin{align} (x_1, y_1) + (x_2, y_2) &= (x_1 + x_2, y_1 + y_2)\\
    (x_1, y_1) - (x_2, y_2) &= (x_1 - x_2, y_1 - y_2)\\ c \cdot (x, y) &= (cx, cy)
    \end{align} [/mathjax]'
- en: 'Exercise 4: Representing Frames'
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4：表示框架
- en: We will now implement frames as described above.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将按照上述描述实现框架。
- en: 'Here are two possible constructors for frames:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两种框架的可能构造函数：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For each constructor, supply the appropriate selectors.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个构造函数，提供适当的选择器。
- en: Representing Painters
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示画家
- en: A painter is represented as a procedure that, given a frame as an argument,
    draws a particular image shifted and scaled to fit the frame. That is to say,
    if `p` is a painter and `f` is a frame, we produce `p`'s image in `f` by calling
    `(p f)`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 画家表示为一个过程，给定一个框架作为参数，绘制一个特定的图像，经过平移和缩放以适应框架。也就是说，如果`p`是一个画家，`f`是一个框架，我们通过调用`(p
    f)`来在`f`中产生`p`的图像。
- en: 'The details of how primitive painters are implemented depend on the particular
    characteristics of the graphics system and the type of image to be drawn. For
    instance, suppose we have a procedure `draw-line` that draws a line on the screen
    between two specified points. Then we can create painters for line drawings, such
    as the wave painter, from lists of line segments as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 原始画家的实现细节取决于图形系统的特定特性和要绘制的图像类型。例如，假设我们有一个绘制线段在屏幕上连接两个指定点的过程`draw-line`。然后我们可以从线段列表创建线条绘制的画家，例如波浪画家，如下所示：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The line segments are given using coordinates with respect to the unit square.
    For each segment in the list, the painter transforms the segment endpoints with
    the frame coordinate map (see above) and draws a line between the transformed
    points.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 线段使用相对于单位正方形的坐标给出。对于列表中的每个线段，画家使用框架坐标映射（见上文）转换线段端点，并在转换点之间画一条线。
- en: Representing painters as procedures erects a powerful abstraction barrier in
    the picture language. We can create and intermix all sorts of primitive painters,
    based on a variety of graphics capabilities. The details of their implementation
    do not matter. Any procedure can serve as a painter, provided that it takes a
    frame as argument and draws something scaled to fit the frame.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将画家表示为过程在图片语言中建立了强大的抽象屏障。我们可以创建和混合各种基于各种图形功能的原始画家。它们的实现细节并不重要。任何过程都可以作为画家，只要它以框架作为参数并绘制适合框架的内容。
- en: 'Exercise 5: Representing Segments'
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 5：表示段
- en: A directed line segment in the plane can be represented as a pair of vectors—the
    vector running from the origin to the start-point of the segment, and the vector
    running from the origin to the end-point of the segment. Use your vector representation
    from above to define a representation for segments with constructor `make-segment`
    and selectors `start-segment` and `end-segment`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 平面上的有向线段可以表示为一对向量——从原点到线段起点的向量，以及从原点到线段终点的向量。使用上面的向量表示来定义具有构造函数`make-segment`和选择器`start-segment`和`end-segment`的段的表示。
- en: 'Exercise 6: Primitive Painters'
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 6：原始画家
- en: 'Use `segments->painter` to define the following primitive painters:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`segments->painter`来定义以下原始画家：
- en: '`x-painter`, which draws an "X" by connecting opposite corners of the frame.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x-painter`，通过连接框架的对角线绘制一个“X”。'
- en: '`outline-painter`, which draws the outline of the designated frame.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outline-painter`，绘制指定框架的轮廓。'
- en: '`diamond-painter`, which draws a diamond shape by connecting the midpoints
    of the sides of the frame.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diamond-painter`，通过连接帧边的中点绘制一个菱形。'
- en: '`wave-painter`, which draws the familiar "wave" figure shown [here](../static/wave.png).
    Your drawing does not have to be a perfect replica; just make sure it clearly
    resembles the original wave figure.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wave-painter`，绘制了[这里](../static/wave.png)所示的熟悉的"波浪"图案。你的绘图不必完全复制；只需确保它清晰地类似于原始的波浪图案。'
- en: To make sure you're on the right track, you should test your code immediately
    after defining `x-painter`. Instructions are below in the "Testing" section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保你走在正确的轨道上，你应该在定义`x-painter`之后立即测试你的代码。在"测试"部分中有说明。
- en: Important Hint
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Remember that `segments->painter` takes in a list of segments, each of which
    is comprised of vectors defined relative to the **unit square**. For example,
    your code might looks something like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`segments->painter`接受一个由相对于**单位正方形**定义的向量组成的线段列表。例如，你的代码可能看起来像这样：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This draws a single diagonal line from the upper left corner to the lower right
    corner (like [this](../static/diag.png)).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这会从左上角到右下角绘制一条对角线（类似于[这里](../static/diag.png)）。
- en: Testing
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: We can now begin testing our code. Note that the following commands will not
    work over SSH.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始测试我们的代码了。请注意，以下命令在SSH上不起作用。
- en: 'First load `picture.rkt` by typing in your terminal:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先通过在终端中输入以下内容加载`picture.rkt`：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now use the `cs` ("clear screen") procedure to open the drawing window:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用`cs`（"清屏"）过程打开绘图窗口：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You should see a window appear with a small triangle.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个窗口出现，里面有一个小三角形。
- en: 'You can now tell a painter to draw in the drawing window by using `full-frame`
    as the frame argument. For example, try this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过将`full-frame`作为帧参数来告诉画家在绘图窗口中绘制。例如，尝试这样做：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You should see an X appear in your drawing window. If nothing appears, or if
    you get errors, don't worry. Use the debugging skills you've learned so far to
    pinpoint the error and resolve it. If you need help, post on Piazza or contact
    a TA.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在绘图窗口中看到一个X出现。如果没有任何东西出现，或者出现错误，不要担心。使用你迄今为止学到的调试技巧来定位错误并解决它。如果需要帮助，请在Piazza上发布或联系助教。
- en: Note that the painter tranformations mentioned above (like `beside` and `square-of-four`)
    will *not* work at this point. You'll have to finish Exercise 8 before testing
    them. For now, if your four primitive painters work, move on to the next section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上面提到的画家转换（如`beside`和`square-of-four`）在这一点上*不会*起作用。在测试它们之前，你必须完成练习8。目前，如果你的四个原始画家工作正常，请继续下一节。
- en: Transforming and Combining painters
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换和组合画家
- en: 'An operation on painters (such as `flip-vert` or `beside`) works by creating
    a painter that invokes the original painters with respect to frames derived from
    the argument frame. Thus, for example, `flip-vert` doesn''t have to know how a
    painter works in order to flip it—it just has to know how to turn a frame upside
    down: the flipped painter just uses the original painter, but in the inverted
    frame.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对画家的操作（如`flip-vert`或`beside`）通过创建一个画家，根据参数帧派生的帧来调用原始画家。因此，例如，`flip-vert`不必知道画家如何工作才能翻转它——它只需要知道如何将一个帧颠倒过来：翻转后的画家只是使用原始画家，但在倒置的帧中。
- en: 'Painter operations are based on the procedure `transform-painter`, which takes
    as arguments a painter and information on how to transform a frame, and produces
    a new painter. The transformed painter, when called on a frame, transforms the
    frame and calls the original painter on the transformed frame. The arguments to
    `transform-painter` are points (represented as vectors) that specify the corners
    of the new frame: When mapped into the frame, the first point specifies the new
    frame''s origin and the other two specify the ends of its edge vectors. Thus,
    arguments within the unit square specify a frame contained within the original
    frame.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 画家操作基于`transform-painter`过程，它接受一个画家和关于如何转换帧的信息作为参数，并产生一个新的画家。转换后的画家在帧上调用时，会转换帧并在转换后的帧上调用原始画家。`transform-painter`的参数是点（表示为向量），指定新帧的角落：当映射到帧中时，第一个点指定新帧的原点，另外两个点指定其边缘向量的端点。因此，在单位正方形内的参数指定了一个包含在原始帧内的帧。
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here''s how to flip painter images vertically:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何垂直翻转画家图像的方法：
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Using `transform-painter`, we can easily define new transformations. For example,
    we can define a painter that shrinks its image to the upper-right quarter of the
    frame it is given:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`transform-painter`，我们可以轻松定义新的转换。例如，我们可以定义一个将其图像缩小到给定帧的右上角的画家：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Other transformations rotate images counterclockwise by 90 degrees...
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 其他变换将图像逆时针旋转90度...
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '...or squash images towards the center of the frame:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '...或将图像压缩至框架中心：'
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Frame transformation is also the key to defining means of combining two or
    more painters. The `beside` procedure, for example, takes two painters, transforms
    them to paint in the left and right halves of an argument frame respectively,
    and produces a new, compound painter. When the compound painter is given a frame,
    it calls the first transformed painter to paint in the left half of the frame
    and calls the second transformed painter to paint in the right half of the frame:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 框架变换也是定义合并两个或多个画家手段的关键。例如，`beside`过程接受两个画家，将它们转换为分别在参数框架的左半部分和右半部分绘制，并产生一个新的复合画家。当复合画家得到一个框架时，它调用第一个转换后的画家在框架的左半部分绘制，并调用第二个转换后的画家在框架的右半部分绘制：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Observe how the painter data abstraction, and in particular the representation
    of painters as procedures, makes `beside` easy to implement. The `beside` procedure
    need not know anything about the details of the component painters other than
    that each painter will draw something in its designated frame.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 观察画家数据抽象，特别是将画家表示为过程的表示，使得实现`beside`变得容易。`beside`过程不需要了解组件画家的任何细节，只需知道每个画家将在其指定的框架中绘制一些东西。
- en: 'Exercise 7: `flip-horiz` and Rotations'
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7：`flip-horiz`和旋转
- en: Define the transformation `flip-horiz`, which flips painters horizontally.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 定义变换`flip-horiz`，将画家水平翻转。
- en: Then define `rotate180` and `rotate270`, which rotate painters counterclockwise
    by 180 degrees and 270 degrees respectively.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后定义`rotate180`和`rotate270`，分别将画家逆时针旋转180度和270度。
- en: 'Exercise 8: `below`'
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习8：`below`
- en: Define the `below` operation for painters. `below` takes two painters as arguments.
    The resulting painter, given a frame, draws with the first painter in the bottom
    of the frame and with the second painter in the top. Define `below` in two different
    ways—first by writing a procedure that is analogous to the `beside` procedure
    given above, then in terms of `beside` and suitable rotation operations (from
    the exercise above).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为画家定义`below`操作。`below`接受两个画家作为参数。得到的画家在给定框架下，用第一个画家在框架底部绘制，用第二个画家在框架顶部绘制。以两种不同方式定义`below`—首先编写一个类似于上面给出的`beside`过程的过程，然后根据`beside`和适当的旋转操作（来自上面的练习）定义`below`。
- en: Levels of Language for Robust Design
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于稳健设计的语言层次
- en: Our picture language is now complete. Let's take a step back and evaluate.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的图形语言现在已经完成。让我们退后一步，评估一下。
- en: The picture language exercises some of the critical ideas we've introduced about
    abstraction with procedures and data. The fundamental data abstractions, painters,
    are implemented using procedural representations, which enables the language to
    handle different basic drawing capabilities in a uniform way. The means of combination
    are also procedures, and this permits us to easily build up complex designs. Finally,
    all the tools for abstracting procedures are available to us for abstracting means
    of combination for painters.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图形语言练习了我们介绍的关于过程和数据抽象的一些关键思想。基本数据抽象，画家，是使用过程表示实现的，这使得语言能够以统一的方式处理不同的基本绘图能力。组合手段也是过程，这使我们能够轻松构建复杂的设计。最后，所有用于抽象过程的工具都可以用于抽象画家的组合手段。
- en: We have also obtained a glimpse of another crucial idea about languages and
    program design. This is the approach of *stratified design*, the notion that a
    complex system should be structured as a sequence of levels that are described
    using a sequence of languages. Each level is constructed by combining parts that
    are regarded as primitive at that level, and the parts constructed at each level
    are used as primitives at the next level. The language used at each level of a
    stratified design has primitives, means of combination, and means of abstraction
    appropriate to that level of detail.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还了解了关于语言和程序设计的另一个关键思想。这就是*分层设计*的方法，即复杂系统应该被构造为使用一系列语言描述的一系列级别。每个级别通过组合在该级别被视为原始的部分来构建，而在每个级别构建的部分在下一个级别被用作原语。分层设计的每个级别使用适合该详细级别的原语、组合手段和抽象手段。
- en: Stratified design pervades the engineering of complex systems. For example,
    in computer engineering, resistors and transistors are combined (and described
    using a language of analog circuits) to produce parts such as and-gates and or-gates,
    which form the primitives of a language for digital-circuit design. These parts
    are combined to build processors, bus structures, and memory systems, which are
    in turn combined to form computers, using languages appropriate to computer architecture.
    Computers are combined to form distributed systems, using languages appropriate
    for describing network interconnections, and so on.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 分层设计渗透到复杂系统的工程中。例如，在计算机工程中，电阻器和晶体管被组合在一起（并使用模拟电路语言描述）以产生诸如与门和或门之类的部件，这些部件构成了数字电路设计语言的基本元素。这些部件被组合起来构建处理器、总线结构和存储系统，然后再使用适合计算机体系结构的语言将它们组合起来形成计算机。计算机被组合起来形成分布式系统，使用适合描述网络互连的语言，依此类推。
- en: Stratified design helps make programs robust—that is, it makes it likely that
    small changes in a specification will require correspondingly small changes in
    the program. For instance, suppose we wanted to alter the image based on `wave-painter`.
    We could work at the lowest level to change the detailed appearance of the `wave-painter`
    element; we could work at the middle level to change the way `corner-split` replicates
    the wave; or we could work at the highest level to change how `square-limit` arranges
    the four copies of the corner. In general, each level of a stratified design provides
    a different vocabulary for expressing the characteristics of the system, and a
    different kind of ability to change it.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 分层设计有助于使程序更加健壮——也就是说，这样做可以使规范中的微小变化很可能需要相应地对程序进行小的更改。例如，假设我们想要根据`wave-painter`修改图像。我们可以在最低级别上改变`wave-painter`元素的详细外观；我们可以在中间级别上改变`corner-split`复制波浪的方式；或者我们可以在最高级别上改变`square-limit`如何排列四个角的副本。一般来说，分层设计的每个级别都提供了一个不同的词汇表来表达系统的特征，并提供了不同类型的改变能力。
- en: 'Exercise 9: Square Limit'
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习9：正方形限制
- en: 'Alter the square limit of the wave painter by working at each of the levels
    described above. In particular:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在上述每个级别上进行工作来改变波浪绘图器的正方形限制。特别是：
- en: Add some segments to the primitive `wave-painter` from Exercise 6 (to add a
    smile, for example).
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向练习6中的原始`wave-painter`添加一些段（例如添加一个微笑）。
- en: Change the pattern constructed by `corner-split` (for example, by using only
    one copy of the `up-split` and `right-split` images instead of two).
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变由`corner-split`构建的模式（例如，只使用`up-split`和`right-split`图像的一个副本而不是两个）。
- en: Modify the version of `square-limit` that uses `square-of-four` so as to assemble
    the corners in a different pattern. (For example, you might make the wave figure
    look outward from each corner of the square.)
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改使用`square-of-four`的`square-limit`版本，以便以不同的模式组装角落。（例如，您可以使波浪图案从正方形的每个角落向外看。）
- en: Final Steps
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后步骤
- en: Following the instructions in the "Testing" section above, test the rest of
    your painters. Be sure to also test all of your painter transformation procedures.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循上面“测试”部分的说明，测试其余的绘图器。确保还测试所有的绘图器转换过程。
- en: To submit your project, navigate to your project directory in your terminal,
    then type
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要提交您的项目，请在终端中导航到您的项目目录，然后键入
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Just for Fun: Exporting Drawings'
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只是为了好玩：导出绘图
- en: 'Don''t want to lose your masterpiece? Eager to share your creation on Facebook
    or Instagram? You can now save your drawings as PNG files using the following
    command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 不想丢失您的杰作？渴望在Facebook或Instagram上分享您的作品？您现在可以使用以下命令将您的绘图保存为PNG文件：
- en: '[PRE28]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
