- en: When Programmers and Testers Collaborate
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Programmers and Testers Collaborate
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Something magical happens when testers and programmers start to collaborate.
    There is less time spent sending bugs back and forth through the defect tracking
    system. Less time is wasted trying to figure out whether something is really a
    bug or a new feature, and more time is spent developing good software to meet
    customer expectations. There are many opportunities for starting collaboration
    before coding even begins.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Testers can help customers write and automate acceptance tests using the language
    of their domain with tools such as Fit (Framework for Integrated Test). When these
    tests are given to the programmers before they coding begins, the team is practicing
    Acceptance Test Driven Development (ATDD). The programmers write the fixtures
    to run the tests, and then code to make the tests pass. These tests then become
    part of the regression suite. When this collaboration occurs, the functional tests
    are completed early allowing time for exploratory testing on edge conditions or
    through workflows of the bigger picture.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: We can take it one step further. As a tester, I can supply most of my testing
    ideas before the programmers start coding a new feature. When I ask the programmers
    if they have any suggestions, they almost always provide me with information that
    helps me with better test coverage, or helps me to avoid spending a lot of time
    on unnecessary tests. Often we have prevented defects because the tests clarify
    many of the initial ideas. For example, in one project I was on, the Fit tests
    I gave the programmers displayed the expected results of a query to respond to
    a wildcard search. The programmer had fully intended to code only complete word
    searches. We were able to talk to the customer and determine the correct interpretation
    before coding started. By collaborating, we prevented the defect, which saved
    us both a lot of wasted time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Programmers can collaborate with testers to create successful automation as
    well. They understand good coding practices and can help testers set up a robust
    test automation suite that works for the whole team. I have often seen test automation
    projects fail because the tests are poorly designed. The tests try to test too
    much or the testers haven't understood enough about the technology to be able
    to keep tests independent. The testers are often the bottleneck, so it makes sense
    for programmers to work with them on tasks like automation. Working with the testers
    to understand what can be tested early, perhaps by providing a simple tool, will
    give the programmers another cycle of feedback which will help them deliver better
    code in the long run.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: When testers stop thinking their only job is to break the software and find
    bugs in the programmers' code, programmers stop thinking that testers are 'out
    to get them,' and are more open to collaboration. When programmers start realizing
    they are responsible for building quality into their code, testability of the
    code is a natural by-product, and the team can automate more of the regression
    tests together. The magic of successful teamwork begins.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试人员不再认为他们的唯一工作是破坏软件并在程序员的代码中寻找错误时，程序员也不再认为测试人员是在‘针对他们’，而更愿意进行合作。当程序员开始意识到他们负责将质量融入他们的代码中时，代码的可测试性就是一个自然的副产品，团队可以一起自动化更多的回归测试。成功团队合作的魔力开始展现。
- en: By [Janet Gregory](http://programmer.97things.oreilly.com/wiki/index.php/Janet_Gregory)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Janet Gregory](http://programmer.97things.oreilly.com/wiki/index.php/Janet_Gregory)'
