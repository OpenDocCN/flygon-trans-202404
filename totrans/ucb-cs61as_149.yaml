- en: Lesson 13 Intro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This week’s big idea is logic programming or declarative programming.
  prefs: []
  type: TYPE_NORMAL
- en: It’s the biggest step we’ve taken away from expressing a computation in hardware
    terms. When we discovered streams, we saw how to express an algorithm in a way
    that’s independent of the order of evaluation. Now we are going to describe a
    computation in a way that has no (visible) algorithm at all!
  prefs: []
  type: TYPE_NORMAL
- en: We are using a logic programming language that A&S implemented in Scheme. Because
    of that, the notation is Scheme-like, i.e., full of lists. Standard logic languages
    like Prolog have different notations, but the idea is the same.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This lesson follows a very different paradigm than anything you've seen so far.
    As such, there are no prerequisites!
  prefs: []
  type: TYPE_NORMAL
- en: Readings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of this lesson is taken from [these notes](http://www-inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=102)
    and [SICP Sections 4.4.1-4.4.3](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-29.html#%_sec_4.4).
  prefs: []
  type: TYPE_NORMAL
- en: Logic Programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Logic programming excels in providing interfaces to data bases for information
    retrieval. The query language we shall use in this chapter is designed to be used
    in this way.
  prefs: []
  type: TYPE_NORMAL
- en: 'All we do is assert facts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'and ask questions about the facts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Although the assertions and the queries take the form of lists, and so they
    look a little like Scheme programs, they're not! There is no application of function
    to argument here; an assertion is just data.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is true even though, for various reasons, it''s traditional to put the
    verb (the relation) ﬁrst:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We'll use that convention hereafter, but that makes it even easier to fall into
    the trap of thinking there is a function called `likes`. Read on to learn how
    we program in this peculiar language!
  prefs: []
  type: TYPE_NORMAL
