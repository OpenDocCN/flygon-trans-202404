- en: Lesson 13 Intro
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13课介绍
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: This week’s big idea is logic programming or declarative programming.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本周的重要概念是逻辑编程或声明式编程。
- en: It’s the biggest step we’ve taken away from expressing a computation in hardware
    terms. When we discovered streams, we saw how to express an algorithm in a way
    that’s independent of the order of evaluation. Now we are going to describe a
    computation in a way that has no (visible) algorithm at all!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们远离以硬件术语表达计算的最大一步。当我们发现流时，我们看到如何以与评估顺序无关的方式表达算法。现在我们将描述一种没有（可见）算法的计算方式！
- en: We are using a logic programming language that A&S implemented in Scheme. Because
    of that, the notation is Scheme-like, i.e., full of lists. Standard logic languages
    like Prolog have different notations, but the idea is the same.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用A&S在Scheme中实现的逻辑编程语言。因此，表示法类似于Scheme，即充满了列表。标准逻辑语言如Prolog有不同的表示法，但思想是相同的。
- en: Prerequisites
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: This lesson follows a very different paradigm than anything you've seen so far.
    As such, there are no prerequisites!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这节课遵循的范式与你之前见过的任何内容都非常不同。因此，没有先决条件！
- en: Readings
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读材料
- en: Most of this lesson is taken from [these notes](http://www-inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=102)
    and [SICP Sections 4.4.1-4.4.3](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-29.html#%_sec_4.4).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分这节课内容取自[这些笔记](http://www-inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=102)和[SICP
    4.4.1-4.4.3节](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-29.html#%_sec_4.4)。
- en: Logic Programming
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑编程
- en: Logic programming excels in providing interfaces to data bases for information
    retrieval. The query language we shall use in this chapter is designed to be used
    in this way.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑编程在提供接口给数据库进行信息检索方面表现出色。我们将在本章中使用的查询语言是为了以这种方式使用而设计的。
- en: 'All we do is assert facts:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的一切只是断言事实：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and ask questions about the facts:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 并询问关于事实的问题：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Although the assertions and the queries take the form of lists, and so they
    look a little like Scheme programs, they're not! There is no application of function
    to argument here; an assertion is just data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管断言和查询采用列表形式，看起来有点像Scheme程序，但实际上不是！这里没有函数对参数的应用；一个断言只是数据。
- en: 'This is true even though, for various reasons, it''s traditional to put the
    verb (the relation) ﬁrst:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管出于各种原因，传统上将动词（关系）放在第一位，但这仍然是真实的：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We'll use that convention hereafter, but that makes it even easier to fall into
    the trap of thinking there is a function called `likes`. Read on to learn how
    we program in this peculiar language!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以后我们将遵循这个惯例，但这样做会更容易陷入认为有一个名为`likes`的函数的陷阱。继续阅读以了解我们如何在这种特殊的语言中编程！
