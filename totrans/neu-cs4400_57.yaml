- en: Implementing `rec` Using Cyclic StructuresTuesday, February 21st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用循环结构实现`rec`星期二，2月21日
- en: '[PLAI §10](plai.pdf#chapter.10 "Implementing Recursion")'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §10](plai.pdf#chapter.10 "实现递归")'
- en: Looking at the arrows in the environment diagrams, what we’re really looking
    for is a closure that has an environment pointer which is the same environment
    in which it was defined. This will make it possible for `fact` to be bound to
    a closure that can refer to *itself* since its environment is the same one in
    which it is defined. However, so far we have no tools that makes it possible to
    do this.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 查看环境图中的箭头，我们真正需要的是一个闭包，其环境指针与其定义所在的相同环境相同。这将使得`fact`可以绑定到一个闭包，该闭包可以引用*自身*，因为其环境与其定义所在的环境相同。然而，目前我们没有工具可以实现这一点。
- en: 'What we need is to create a “cycle of pointers”, and so far we do not have
    a way of achieving that: when we create a closure, we begin with an environment
    which is saved in the slot’s environment slot, but we want that closure to be
    the value of a binding in that same environment.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个“指针循环”，但目前我们还没有实现这一点：当我们创建一个闭包时，我们从保存在槽环境中的环境开始，但我们希望该闭包成为同一环境中绑定的值。
