["```\nlet rec sum (l : int list) : int =\n  match l with\n    [] -> 0\n  | x :: xs -> x + (sum xs)\n\n```", "```\nlet rec concat (l : string list) : string =\n  match l with\n    [] -> \"\"\n  | x :: xs -> x ^ (concat xs)\n\n```", "```\nlet rec sum' (acc : int) (l : int list) : int =\n  match l with\n    [] -> acc\n  | x :: xs -> sum' (acc + x) xs\n\n```", "```\nlet rec concat' (acc : string) (l : string list) : string =\n  match l with\n    [] -> acc\n  | x :: xs -> concat' (acc ^ x) xs\n\n```", "```\nlet rec fold_left (f : 'a -> 'b ->'a) (acc : 'a) (l : 'b list): 'a =\n  match l with\n    [] -> acc\n  | x :: xs -> fold_left f (f acc x) xs\n\n```", "```\nlet sum (l : int list) : int =\n  List.fold_left (fun acc x -> acc + x) 0 l\nlet concat (l : string list) : string =\n  List.fold_left (fun acc x -> acc ^ x) \"\" l\n\n```", "```\nlet rec fold_right (f : 'a -> 'b -> 'b) (l : 'a list) (acc : 'b) : 'b =\n  match l with\n    [] -> acc\n  | x :: xs -> f x (List.fold_right f xs acc)\n\n```", "```\nlet concat (l : string list) : string =\n  List.fold_right (fun x acc -> x ^ acc) l \"\"\n\n```", "```\nlet sum = List.fold_left (fun a x -> x + a) 0\nlet concat = List.fold_left (fun a x -> a ^ x) \"\"\n\n```", "```\nlet sum = List.fold_left (+) 0\nlet concat = List.fold_left (^) \"\"\n\n```", "```\nlet length l = List.fold_left (fun a _ -> a + 1) 0 l\nlet rev l = List.fold_left (fun a x -> x :: a) [] l\nlet map f l = List.fold_right (fun x a -> (f x) :: a) l []\nlet app f l = List.fold_left (fun _ x -> f x) () l\nlet filter f l =\n  List.fold_right (fun x a -> if f x then x :: a else a) l []\n\n```", "```\nlet map f l = List.fold_left (fun a x -> (f x) :: a) [] (List.rev l)\n\n```"]