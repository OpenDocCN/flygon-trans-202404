["```\n(job ?x (computer programmer)) \n```", "```\n(and (can-do-job ?x (computer programmer trainee))\n     (job ?person ?x)) \n```", "```\n(can-do-job ?x (computer programmer trainee)) \n```", "```\n(job ?person ?x) \n```", "```\n(not (job ?x (computer programmer))) \n```", "```\n(and (supervisor ?x ?y)\n     (not (job ?x (computer programmer)))) \n```", "```\n?x  =  (a ?y c)\n?x  =  (a b ?z) \n```", "```\n(a ?y c)  =  (a b ?z) \n```", "```\na  =  a, ?y  =  b, c  =  ?z, \n```", "```\n?x  =  (a b c) \n```", "```\n(lives-near ?x (Hacker Alyssa P)) \n```", "```\n(rule (lives-near ?person-1 ?person-2)\n      (and (address ?person-1 (?town . ?rest-1))\n           (address ?person-2 (?town . ?rest-2))\n           (not (same ?person-1 ?person-2)))) \n```", "```\n(assert! (job (Bitdiddle Ben) (computer wizard)))\n(assert! (rule (wheel ?person)\n               (and (supervisor ?middle-manager ?person)\n                    (supervisor ?x ?middle-manager)))) \n```", "```\n;;; Query input:\n(assert! (rule (append () ?y ?y)))\n\n;;; Query input:\n(assert! (rule (append (?u . ?v) ?y (?u . ?z))\n               (append ?v ?y ?z)))\n\n;;; Query input:\n(append ?a ?b (aa bb))\n\n(unify-match (append ?a ?b (aa bb))   ; MATCH ORIGINAL QUERY\n             (append () ?1y ?1y)      ; AGAINST BASE CASE RULE\n             ())                      ; WITH NO CONSTRAINTS\n\nRETURNS: ((?1y . (aa bb)) (?b . ?1y) (?a . ()))\nPRINTS: (append () (aa bb) (aa bb)) \n```", "```\n(unify-match (append ?a ?b (aa bb))               ; MATCH ORIGINAL QUERY\n             (append (?2u . ?2v) ?2y (?2u . ?2z)) ; AGAINST RECURSIVE RULE\n             ())                                  ; WITH NO CONSTRAINTS\n\nRETURNS: ((?2z . (bb)) (?2u . aa) (?b . ?2y) (?a . (?2u . ?2v)))\n         [call it F1] \n```", "```\n (unify-match (append ?2v ?2y ?2z)   ; MATCH BODY OF RECURSIVE RULE\n                 (append () ?3y ?3y)    ; AGAINST BASE CASE RULE\n                 F1)                    ; WITH CONSTRAINTS FROM F1\n\n    RETURNS: ((?3y . (bb)) (?2y . ?3y) (?2v . ()) [plus F1])\n    PRINTS: (append (aa) (bb) (aa bb))\n\n    (unify-match (append ?2v ?2y ?2z)                 ; MATCH SAME BODY\n                 (append (?4u . ?4v) ?4y (?4u . ?4z)) ; AGAINST RECURSIVE RULE\n                 F1)                                  ; WITH F1 CONSTRAINTS\n\n    RETURNS: ((?4z . ()) (?4u . bb) (?2y . ?4y) (?2v . (?4u . ?4v))\n             [plus F1]) [call it F2]\n\n        (unify-match (append ?4v ?4y ?4z) ; MATCH BODY FROM NEWFOUND MATCH\n                     (append () ?5y ?5y)  ; AGAINST BASE CASE RULE\n                     F2)                  ; WITH NEWFOUND CONSTRAINTS\n\n        RETURNS: ((?5y . ()) (?4y . ?5y) (?4v . ()) [plus F2])\n        PRINTS: (append (aa bb) () (aa bb))\n\n        (unify-match (append ?4v ?4y ?4z)                 ; MATCH SAME BODY\n                     (append (?6u . ?6v) ?6y (?6u . ?6z)) ; AGAINST RECURSIVE RULE\n                     F2)                                  ; SAME CONSTRAINTS\n\n        RETURNS: ()                                       ; BUT THIS FAILS \n```"]