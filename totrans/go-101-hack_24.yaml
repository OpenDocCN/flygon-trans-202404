- en: io.Reader interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: io.Reader interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`io.Reader` interface is a basic and very frequently-used interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For every type who satisfies the `io.Reader` interface, you can imagine it's
    a pipe. Someone writes contents into one end of the pipe, and you can use `Read()`
    method which the type has provided to read content from the other end of the pipe.
    No matter it is a common file, a network socket, and so on. Only if it is compatible
    with `io.Reader` interface, I can read content of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see after issuing a `read()` call, there are `3` scenarios need to
    be considered:'
  prefs: []
  type: TYPE_NORMAL
- en: '(1) `n > 0`: read valid contents; process it;'
  prefs: []
  type: TYPE_NORMAL
- en: '(2) `n == 0 && err != nil`: if `err` is `io.EOF`, it means all the content
    have been read, and there is nothing left; else something unexpected happened,
    need to do special operations;'
  prefs: []
  type: TYPE_NORMAL
- en: '(3) `n == 0 && err == nil`: according to [io package document](https://golang.org/pkg/io/#Reader),
    it means nothing happened, so no need to do anything.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `test.txt` file which only contains `5` bytes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the program, and the result is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[io package document](https://golang.org/pkg/io/#Reader).'
  prefs: []
  type: TYPE_NORMAL
