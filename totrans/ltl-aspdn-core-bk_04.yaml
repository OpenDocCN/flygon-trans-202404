- en: Use a database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据库
- en: Use a database
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据库
- en: Writing database code can be tricky. Unless you really know what you're doing,
    it's a bad idea to paste raw SQL query strings into your application code. An
    **object-relational mapper** (ORM) makes it easier to write code that interacts
    with a database by adding a layer of abstraction between your code and the database
    itself. Hibernate in Java and ActiveRecord in Ruby are two well-known ORMs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 编写数据库代码可能会很棘手。除非你真的知道你在做什么，否则将原始 SQL 查询字符串粘贴到应用程序代码中是一个坏主意。对象关系映射器（ORM）通过在你的代码和数据库本身之间添加一层抽象来使编写与数据库交互的代码变得更容易。Java
    中的 Hibernate 和 Ruby 中的 ActiveRecord 是两个知名的 ORM。
- en: 'There are a number of ORMs for .NET, including one built by Microsoft and included
    in ASP.NET Core by default: Entity Framework Core. Entity Framework Core makes
    it easy to connect to a number of different database types, and lets you use C#
    code to create database queries that are mapped back into C# models (POCOs).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 中有许多 ORM，包括由 Microsoft 构建并默认包含在 ASP.NET Core 中的一个：Entity Framework Core。Entity
    Framework Core 可以轻松连接到多种不同类型的数据库，并允许你使用 C# 代码创建映射回 C# 模型（POCOs）的数据库查询。
- en: Remember how creating a service interface decoupled the controller code from
    the actual service class? Entity Framework Core is like a big interface over your
    database, and you can swap out different providers depending on the underlying
    database technology.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还记得创建服务接口是如何将控制器代码与实际服务类解耦的吗？Entity Framework Core 就像是你的数据库上的一个大接口，你可以根据底层数据库技术来替换不同的提供者。
- en: Entity Framework Core can connect to SQL database like SQL Server and MySQL,
    and also works with NoSQL (document) databases like Mongo. You'll use a SQLite
    database for this project, but you can plug in a different database provider if
    you'd like.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Entity Framework Core 可以连接到 SQL Server 和 MySQL 等 SQL 数据库，也可以与 NoSQL（文档）数据库如
    Mongo 一起使用。你将在这个项目中使用 SQLite 数据库，但如果你愿意，你可以插入不同的数据库提供程序。
- en: Connect to a database
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: Connect to a database
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: 'There are a few things you need to use Entity Framework Core to connect to
    a database. Since you used `dotnet new` and the MVC + Individual Auth template
    to set your project, you''ve already got them:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Entity Framework Core 连接到数据库，有几件事情是必须的。由于你使用了 `dotnet new` 和 MVC + Individual
    Auth 模板来设置你的项目，你已经拥有了它们：
- en: '**The Entity Framework Core packages**. These are included by default in all
    ASP.NET Core projects.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Entity Framework Core 包**。这些默认包含在所有 ASP.NET Core 项目中。'
- en: '**A database** (naturally). The `app.db` file in the project root directory
    is a small SQLite database created for you by `dotnet new`. SQLite is a lightweight
    database engine that can run without requiring you to install any extra tools
    on your machine, so it''s easy and quick to use in development.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个数据库**（当然）。项目根目录中的 `app.db` 文件是由 `dotnet new` 为你创建的一个小型 SQLite 数据库。SQLite
    是一个轻量级的数据库引擎，可以在不需要在你的机器上���装任何额外工具的情况下运行，因此在开发中使用起来既简单又快速。'
- en: '**A database context class**. The database context is a C# class that provides
    an entry point into the database. It''s how your code will interact with the database
    to read and save items. A basic context class already exists in the `Data/ApplicationDbContext.cs`
    file.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库上下文类**。数据库上下文是一个提供进入数据库的 C# 类。这是你的代码将与数据库交互以读取和保存项目的方式。一个基本的上下文类已经存在于
    `Data/ApplicationDbContext.cs` 文件中。'
- en: '**A connection string**. Whether you are connecting to a local file database
    (like SQLite) or a database hosted elsewhere, you''ll define a string that contains
    the name or address of the database to connect to. This is already set up for
    you in the `appsettings.json` file: the connection string for the SQLite database
    is `DataSource=app.db`.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接字符串**。无论你是连接到本地文件数据库（如 SQLite）还是连接到其他地方托管的数据库，你都需要定义一个包含要连接的数据库名称或地址的字符串。这已经在
    `appsettings.json` 文件中为你设置好了：SQLite 数据库的连接字符串是 `DataSource=app.db`。'
- en: 'Entity Framework Core uses the database context, together with the connection
    string, to establish a connection to the database. You need to tell Entity Framework
    Core which context, connection string, and database provider to use in the `ConfigureServices`
    method of the `Startup` class. Here''s what''s defined for you, thanks to the
    template:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Entity Framework Core 使用数据库上下文和连接字符串，一起建立与数据库的连接。你需要告诉 Entity Framework Core
    在 `Startup` 类的 `ConfigureServices` 方法中使用哪个上下文、连接字符串和数据库提供程序。这是由模板为你定义的内容：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code adds the `ApplicationDbContext` to the service container, and tells
    Entity Framework Core to use the SQLite database provider, with the connection
    string from configuration (`appsettings.json`).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将 `ApplicationDbContext` 添加到服务容器中，并告诉 Entity Framework Core 使用来自配置的 SQLite
    数据库提供程序的连接字符串（`appsettings.json`）。
- en: As you can see, `dotnet new` creates a lot of stuff for you! The database is
    set up and ready to be used. However, it doesn't have any tables for storing to-do
    items. In order to store your `TodoItem` entities, you'll need to update the context
    and migrate the database.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`dotnet new` 为你创建了很多东西！数据库已经设置好，可以使用了。但是，它没有任何用于存储待办事项的表。为了存储你的 `TodoItem`
    实体，你需要更新上下文并迁移数据库。
- en: Update the context
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新上下文
- en: Update the context
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新上下文
- en: 'There''s not a whole lot going on in the database context yet:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库上下文中目前还没有太多内容：
- en: '**`Data/ApplicationDbContext.cs`**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Data/ApplicationDbContext.cs`**'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add a `DbSet` property to the `ApplicationDbContext`, right below the constructor:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数下面给 `ApplicationDbContext` 添加一个 `DbSet` 属性：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A `DbSet` represents a table or collection in the database. By creating a `DbSet<TodoItem>`
    property called `Items`, you're telling Entity Framework Core that you want to
    store `TodoItem` entities in a table called `Items`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`DbSet` 表示数据库中的表或集合。通过创建一个名为 `Items` 的 `DbSet<TodoItem>` 属性，你告诉 Entity Framework
    Core 你想要在名为 `Items` 的表中存储 `TodoItem` 实体。'
- en: 'You''ve updated the context class, but now there''s one small problem: the
    context and database are now out of sync, because there isn''t actually an `Items`
    table in the database. (Just updating the code of the context class doesn''t change
    the database itself.)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经更新了上下文类，但现在有一个小问题：上下文和数据库现在不同步了，因为实际上数据库中没有一个 `Items` 表。（只是更新上下文类的代码并不会改变数据库本身。）
- en: In order to update the database to reflect the change you just made to the context,
    you need to create a **migration**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使数据库反映你刚刚对上下文所做的更改，你需要创建一个**迁移**。
- en: If you already have an existing database, search the web for "scaffold-dbcontext
    existing database" and read Microsoft's documentation on using the `Scaffold-DbContext`
    tool to reverse-engineer your database structure into the proper `DbContext` and
    model classes automatically.
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你已经有了一个现有的数据库，请搜索“scaffold-dbcontext existing database”，并阅读微软关于使用 `Scaffold-DbContext`
    工具将你的数据库结构自动反向工程成正确的 `DbContext` 和模型类的文档。
- en: Create a migration
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个迁移
- en: Create a migration
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个迁移
- en: Migrations keep track of changes to the database structure over time. They make
    it possible to undo (roll back) a set of changes, or create a second database
    with the same structure as the first. With migrations, you have a full history
    of modifications like adding or removing columns (and entire tables).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移跟踪数据库结构随时间的变化。它们使得可以撤消（回滚）一组更改，或创建一个具有与第一个相同结构的第二个数据库。有了迁移，你就有了完整的修改历史记录，比如添加或删除列（以及整个表）。
- en: 'In the previous chapter, you added an `Items` set to the context. Since the
    context now includes a set (or table) that doesn''t exist in the database, you
    need to create a migration to update the database:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，你向上下文添加了一个 `Items` 集。由于上下文现在包含了一个在数据库中不存在的集合（或表），你需要创建一个迁移来更新数据库：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This creates a new migration called `AddItems` by examining any changes you've
    made to the context.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这会通过检查你对上下文所做的任何更改来创建一个名为 `AddItems` 的新迁移。
- en: If you get an error like `No executable found matching command "dotnet-ef"`,
    make sure you're in the right directory. These commands must be run from the project
    root directory (where the `Program.cs` file is).
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果出现 `No executable found matching command "dotnet-ef"` 这样的错误，请确保你在正确的目录中。这些命令必须从项目根目录（即
    `Program.cs` 文件所在的位置）运行。
- en: 'If you open up the `Data/Migrations` directory, you''ll see a few files:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开 `Data/Migrations` 目录，你会看到一些文件：
- en: '![Multiple migrations](migrations.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![多个迁移](migrations.png)'
- en: The first migration file (with a name like `00_CreateIdentitySchema.cs`) was
    created and applied for you way back when you ran `dotnet new`. Your new `AddItem`
    migration is prefixed with a timestamp when you create it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个迁移文件（类似于 `00_CreateIdentitySchema.cs` 的名称）是在你运行 `dotnet new` 时创建和应用的。当你创建时，你的新
    `AddItem` 迁移文件会带有时间戳前缀。
- en: You can see a list of migrations with `dotnet ef migrations list`.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以使用 `dotnet ef migrations list` 命令查看迁移列表。
- en: 'If you open your migration file, you''ll see two methods called `Up` and `Down`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开迁移文件，你会看到两个方法叫做 `Up` 和 `Down`：
- en: '**`Data/Migrations/<date>_AddItems.cs`**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Data/Migrations/<date>_AddItems.cs`**'
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `Up` method runs when you apply the migration to the database. Since you
    added a `DbSet<TodoItem>` to the database context, Entity Framework Core will
    create an `Items` table (with columns that match a `TodoItem`) when you apply
    the migration.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将迁移应用到数据库时，`Up`方法会运行。由于你向数据库上下文添加了一个`DbSet<TodoItem>`，当你应用迁移时，Entity Framework
    Core将创建一个`Items`表（其列与`TodoItem`匹配）。
- en: 'The `Down` method does the opposite: if you need to undo (roll back) the migration,
    the `Items` table will be dropped.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Down`方法执行相反的操作：如果需要撤消（回滚）迁移，`Items`表将被删除。'
- en: Workaround for SQLite limitations
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQLite限制的解决方法
- en: 'There are some limitations of SQLite that get in the way if you try to run
    the migration as-is. Until this problem is fixed, use this workaround:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试按原样运行迁移，SQLite存在一些限制会导致问题。在这个问题修复之前，使用这个解决方法：
- en: Comment out the `migrationBuilder.AddForeignKey` lines in the `Up` method.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Up`方法中注释掉`migrationBuilder.AddForeignKey`行。
- en: Comment out any `migrationBuilder.DropForeignKey` lines in the `Down` method.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Down`方法中注释掉任何`migrationBuilder.DropForeignKey`行。
- en: If you use a full-fledged SQL database, like SQL Server or MySQL, this won't
    be an issue and you won't need to do this (admittedly hackish) workaround.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用全功能的SQL数据库，比如SQL Server或MySQL，这不会是一个问题，你不需要执行这个（诚然有些巧妙的）解决方法。
- en: Apply the migration
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用迁移
- en: 'The final step after creating one (or more) migrations is to actually apply
    them to the database:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建一个（或多个）迁移后的最后一步是实际将它们应用到数据库中：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command will cause Entity Framework Core to create the `Items` table in
    the database.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将导致Entity Framework Core在数据库中创建`Items`表。
- en: 'If you want to roll back the database, you can provide the name of the *previous*
    migration: `dotnet ef database update CreateIdentitySchema` This will run the
    `Down` methods of any migrations newer than the migration you specify.'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你想回滚数据库，可以提供*之前*迁移的名称：`dotnet ef database update CreateIdentitySchema` 这将运行任何新于你指定的迁移的`Down`方法。
- en: ''
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you need to completely erase the database and start over, run `dotnet ef
    database drop` followed by `dotnet ef database update` to re-scaffold the database
    and bring it up to the current migration.
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你需要完全清除数据库并重新开始，运行`dotnet ef database drop`，然后运行`dotnet ef database update`来重新生成数据库并将其更新到当前迁移。
- en: That's it! Both the database and the context are ready to go. Next, you'll use
    the context in your service layer.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！数据库和上下文都准备就绪。接下来，你将在服务层中使用上下文。
- en: Create a new service class
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的服务类
- en: Create a new service class
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新的服务类
- en: Back in the *MVC basics* chapter, you created a `FakeTodoItemService` that contained
    hard-coded to-do items. Now that you have a database context, you can create a
    new service class that will use Entity Framework Core to get the real items from
    the database.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 回到*MVC基础*章节，你创建了一个`FakeTodoItemService`，其中包含硬编码的待办事项。现在你有了数据库上下文，可以创建一个新的服务类，该类将使用Entity
    Framework Core从数据库中获取真实的项目。
- en: 'Delete the `FakeTodoItemService.cs` file, and create a new file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 删除`FakeTodoItemService.cs`文件，并创建一个新文件：
- en: '**`Services/TodoItemService.cs`**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Services/TodoItemService.cs`**'
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You'll notice the same dependency injection pattern here that you saw in the
    MVC basics chapter, except this time it's the `ApplicationDbContext` that gets
    injected into the service. The `ApplicationDbContext` is already being added to
    the service container in the `ConfigureServices` method, so it's available for
    injection here.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到这里使用了与MVC基础章节中相同的依赖注入模式，只是这次注入的是`ApplicationDbContext`。`ApplicationDbContext`已经被添加到服务容器中的`ConfigureServices`方法中，因此可以在这里进行注入。
- en: 'Let''s take a closer look at the code of the `GetIncompleteItemsAsync` method.
    First, it uses the `Items` property of the context to access all the to-do items
    in the `DbSet`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下`GetIncompleteItemsAsync`方法的代码。首先，它使用上下文的`Items`属性来访问`DbSet`中的所有待办事项：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, the `Where` method is used to filter only the items that are not complete:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`Where`方法用于仅过滤未完成的项目：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `Where` method is a feature of C# called LINQ (**l**anguage **in**tegrated
    **q**uery), which takes cues from functional programming and makes it easy to
    express database queries in code. Under the hood, Entity Framework Core translates
    the method into a statement like `SELECT * FROM Items WHERE IsDone = 0`, or an
    equivalent query document in a NoSQL database.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`Where`方法是C#的一个特性，称为LINQ（**l**anguage **in**tegrated **q**uery），它借鉴了函数式编程的特点，使得在代码中表达数据库查询变得容易。在底层，Entity
    Framework Core将该方法转换为类似`SELECT * FROM Items WHERE IsDone = 0`的语句，或者在NoSQL数据库中等效的查询文档。'
- en: Finally, the `ToArrayAsync` method tells Entity Framework Core to get all the
    entities that matched the filter and return them as an array. The `ToArrayAsync`
    method is asynchronous (it returns a `Task`), so it must be `await`ed to get its
    value.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`ToArrayAsync`方法告诉Entity Framework Core获取与过滤器匹配的所有实体，并将它们作为数组返回。`ToArrayAsync`方法是异步的（它返回一个`Task`），因此必须`await`它以获取其值。
- en: 'To make the method a little shorter, you can remove the intermediate `items`
    variable and just return the result of the query directly (which does the same
    thing):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使方法变得更短一些，您可以删除中间的`items`变量，直接返回查询结果（这样做的效果是一样的）：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Update the service container
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新服务容器
- en: 'Because you deleted the `FakeTodoItemService` class, you''ll need to update
    the line in `ConfigureServices` that is wiring up the `ITodoItemService` interface:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因为您删除了`FakeTodoItemService`类，所以需要更新`ConfigureServices`中连接`ITodoItemService`接口的行：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`AddScoped` adds your service to the service container using the **scoped**
    lifecycle. This means that a new instance of the `TodoItemService` class will
    be created during each web request. This is required for service classes that
    interact with a database.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddScoped` 使用**scoped**生命周期将您的服务添加到服务容器中。这意味着在每个 web 请求期间将创建`TodoItemService`类的新实例。这对于与数据库交互的服务类是必需的。'
- en: Adding a service class that interacts with Entity Framework Core (and your database)
    with the singleton lifecycle (or other lifecycles) can cause problems, because
    of how Entity Framework Core manages database connections per request under the
    hood. To avoid that, always use the scoped lifecycle for services that interact
    with Entity Framework Core.
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 添加一个与Entity Framework Core（和您的数据库）交互的服务类，并使用单例生命周期（或其他生命周期）可能会导致问题，因为Entity
    Framework Core在幕后每个请求管理数据库连接。为了避免这种情况，始终对与Entity Framework Core交互的服务使用scoped生命周期。
- en: The `TodoController` that depends on `ITodoItemService` will be blissfully unaware
    of the change, but under the hood you'll be using Entity Framework Core and talking
    to a real database!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖于`ITodoItemService`的`TodoController`将对更改毫不知情，但在幕后，您将使用Entity Framework Core并与真实数据库交互！
- en: Test it out
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试一下
- en: Start up the application and navigate to `http://localhost:5000/todo`. The fake
    items are gone, and your application is making real queries to the database. There
    just doesn't happen to be any saved to-do items!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序并导航到`http://localhost:5000/todo`。虚拟项目已经消失，您的应用程序正在向数据库发出真实查询。只是偶然间没有保存待办事项！
- en: In the next chapter, you'll add more features to the application, starting with
    the ability to create new to-do items.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将为应用程序添加更多功能，从创建新的待办事项开始。
