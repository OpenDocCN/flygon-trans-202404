- en: A Reproducible R Notebook Using Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Reproducible R Notebook Using Docker
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Carl Boettiger
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: My name is [Carl Boettiger](http://carlboettiger.info). I'm a theoretical ecologist
    in [UC Berkeley ESPM](http://ourenvironment.ucberkeley.edu) working on problems
    of forecasting and decision-making in ecological systems. My work involves developing
    new computational and frequently data-intensive approaches to these problems.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: My workflow seeks to provide a way to capture & reproduce the day-to-day to
    workings of a computational ecologist using freely available platforms (e.g. GitHub,
    Travis CI, Docker Hub) and open source software (`R`, RStudio, `git`, `docker`,
    `jekyll`) in the format of an online, open lab notebook. I have tweaked and adapted
    this workflow over the past 5 years, often experimenting with new technology.
    Other researchers have frequently told me how they have adopted parts of this
    approach, but rarely in an identical way.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'My general approach to an open lab notebook has been described previously (Gewin,
    2013, Mascarelli (2014)), while I focus on documenting more details of the workflow
    here. When possible, I have sought to leverage general-purpose tools rather than
    custom solutions: for instance, I organize project directories using the R package
    format, as described in Gentleman & Temple Lang (2007) and [rrrpkg](https://github.com/ropensci/rrrpkg)
    project, rather than introduce my own custom structure. Nevertheless, my current
    system no doubt remains too complex, specialized, esoteric and even fragile to
    be easily adopted by others. Rather, I encourage the reader to focus on specific
    elements or modules that look most practical, as others have done.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Workflow
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Diagram](cboettig.png) A note to the reader: The following description is
    meant as a high level overview, which leans heavily on several powerful and well-developed
    tools and workflows including git/GitHub, docker/DockerHub, `.Rmd`/RStudio, and
    others. Table 1 provides a concise reference where a reader can learn more about
    these tools and their use.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 1: Tools used in workflow'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '| Tool | Description / purpose | Website |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
- en: '| git | Version control software | [https://git-scm.org](https://git-scm.org)
    |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
- en: '| GitHub | Online repository for sharing code managed with git | [https://github.com](https://github.com)
    |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
- en: '| docker | Containerization software for portable computational environments
    | [https://docker.com](https://docker.com) |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
- en: '| DockerHub | Central hub for building and distributing docker containers |
    [https://hub.docker.com](https://hub.docker.com) |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
- en: '| RStudio | IDE for editing R and Rmd files | [https://rstudio.com](https://rstudio.com)
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
- en: '| Rmd | Dynamic documentation format for R language | [http://rmarkdown.rstudio.com](http://rmarkdown.rstudio.com)
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: '| pandoc | convert between document formats | [http://pandoc.org](http://pandoc.org)
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
- en: '| servr | An R package for combining jekyll with Rmd | [http://yihui.name/knitr-jekyll/](http://yihui.name/knitr-jekyll/)
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '| jekyll | Static website generator closely integrated with GitHub | [https://jekyllrb.com](https://jekyllrb.com)
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| jekyll | 与 GitHub 紧密集成的静态网站生成器 | [https://jekyllrb.com](https://jekyllrb.com)
    |'
- en: '| Circle CI | Flexible continuous integration software for executing scripts
    pushed to GitHub | [https://circleci.com](https://circleci.com) |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| Circle CI | 灵活的持续集成软件，用于执行推送到 GitHub 的脚本 | [https://circleci.com](https://circleci.com)
    |'
- en: '| figshare | Permanent data archiving platform | [http://figshare.com](http://figshare.com)
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| figshare | 永久数据存档平台 | [http://figshare.com](http://figshare.com) |'
- en: '| zenodo | Permanent archiving platform (handles code/software well) | [http://zenodo.org](http://zenodo.org)
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| zenodo | 永久存档平台（很好地处理代码/软件） | [http://zenodo.org](http://zenodo.org) |'
- en: Interactive workflow
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 交互式工作流程
- en: My daily workflow on an active project simply involves opening a new `.Rmd`
    document with the day's date in my lab notebook. In this file, I write the code,
    text, equations, and other elements of my work (see diagram, top left).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我在进行活跃项目的日常工作流程中，简单地涉及在我的实验笔记本中打开一个带有当天日期的新`.Rmd`文档。在这个文件中，我写下代码、文本、方程式和我的工作的其他元素（见图表，左上角）。
- en: At the heart of my workflow is the dynamic documentation tool `knitr`. `knitr`
    is an R package that is tightly integrated into RStudio and R-markdown, or `.Rmd`
    format it supports for integrating code, documentation, equations, figures and
    other components of research into a single document. Its key feature is the ability
    to "knit" or "execute" the document, resulting in the code blocks being run and
    their output figures, tables, and so forth being displayed in the document. Text
    and code are written together in the popular, simple, and flexible markdown format,
    which is widely recognized by other tools (e.g. GitHub, a widely used code repository,
    and Jekyll, a ruby-based static website generator). Markdown is easily converted
    into other formats by `pandoc`, a conversion engine integrated into RStudio (and
    other popular platforms such as Jupyter) which can generate LaTeX, HTML, Microsoft
    Word and other document formats. This flexibility is useful later in turning my
    .Rmd files into either HTML pages for my laboratory notebook or into other formats
    suitable for traditional journal publication.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我的工作流程的核心是动态文档工具`knitr`。`knitr`是一个紧密集成到 RStudio 和 R-markdown 或`.Rmd`格式中的 R 包，支持将代码、文档、方程式、图表和研究的其他组件整合到一个文档中。它的关键特点是能够"编织"或"执行"文档，导致代码块被运行，它们的输出图表、表格等被显示在文档中。文本和代码以流行、简单、灵活的
    markdown 格式一起编写，这种格式被其他工具广泛认可（例如 GitHub，一个广泛使用的代码存储库，以及 Jekyll，一个基于 Ruby 的静态网站生成器）。Markdown
    可以很容易地通过`pandoc`转换为其他格式，`pandoc`是集成到 RStudio（以及其他流行平台如 Jupyter）中的转换引擎，可以生成 LaTeX、HTML、Microsoft
    Word 和其他文档格式。这种灵活性在将我的`.Rmd`文件转换为适合传统期刊出版的 HTML 页面或其他格式时非常有用。
- en: During active research, I often find it impractical to clearly separate out
    the stages of Data Input (Stage I), Data Processing (Stage II), and Data Analysis
    (Stage III). I merely strive to have all of these stages coded and explained in
    the .Rmd document.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行积极的研究时，我经常发现清晰地区分数据输入（阶段 I）、数据处理（阶段 II）和数据分析（阶段 III）是不切实际的。我只是努力让所有这些阶段的代码和解释都写在`.Rmd`文档中。
- en: I write / edit this `.Rmd` file inside an instance of RStudio which runs inside
    a Docker container, which in turn may be running on my laptop, an Amazon Web server,
    or even an NSF super-computing cluster depending my needs that day. RStudio is
    a popular integrated development environment for R users which can be run in server
    mode through a web browser. Docker is a popular containerization tool which allows
    one to create a portable image of one's entire software environment that can be
    easily moved around between different computers, regardless of architecture. I
    believe this has major implications for addressing common problems in reproducibility,
    as I have described more fully elsewhere (Boettiger, 2015). A Dockerfile in my
    notebook provides an executable recipe for building this computational environment
    on top of existing, general-purpose Docker images maintained by the [Rocker project](https://github.com/rocker-org).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我在一个运行在Docker容器内的RStudio实例中编写/编辑这个`.Rmd`文件，这个Docker容器可能是运行在我的笔记本电脑、亚马逊网络服务器，甚至是NSF超级计算集群上，取决于我当天的需求。
    RStudio是一个受欢迎的R用户集成开发环境，可以通过Web浏览器以服务器模式运行。 Docker是一个流行的容器化工具，允许创建一个整个软件环境的可移植镜像，可以在不同计算机之间轻松移动，而不受架构的限制。我相信这对解决再现性中的常见问题有重大影响，正如我在其他地方更详细地描述的那样（Boettiger，2015）。我的笔记本中的Dockerfile提供了一个可执行的配方，用于在[Rocker项目](https://github.com/rocker-org)维护的现有通用Docker镜像之上构建这个计算环境。
- en: Automated workflow
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自动化工作流程
- en: At regular intervals I "commit" my notebook in `git` and "push" this progress
    to GitHub, a widely used version control system and public repository for code
    and other digital material. This triggers the automated build portion of my workflow,
    illustrated in the center of the diagram. A Continuous Integration platform ([CircleCI](http://circleci.com)
    in my case, as the more widely used platform, [Travis](https://travis-ci.org/),
    did not support Docker execution until much more recently) detects this commit,
    and begins to execute and assemble my code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 定期我会在`git`中“提交”我的笔记本，并将这一进展“推送”到GitHub，这是一个广泛使用的版本控制系统和代码以及其他数字资料的公共存储库。这会触发我的工作流程的自动构建部分，如图中心所示。一个持续集成平台（[CircleCI](http://circleci.com)
    在我这里，作为更广泛使用的平台，[Travis](https://travis-ci.org/) 直到最近才支持Docker执行）检测到这个提交，并开始执行和组装我的代码。
- en: The CI platform begins by pulling down a public image of my computational environment,
    itself built automatically by Docker Hub from the Dockerfile in my repository.
    A separate Docker volume container can also be pulled from the Hub which contains
    results cached by knitr for any code too intensive to run on the (free, public)
    CI platform.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: CI平台首先下载我的计算环境的公共镜像，这个镜像是由Docker Hub自动构建的，Dockerfile在我的存储库中。还可以从Hub中拉取一个单独的Docker卷容器，其中包含由knitr缓存的结果，用于运行在（免费、公共）CI平台上运行的任何过于密集的代码。
- en: As the notebook is already organized as a Jekyll repository, just with `.Rmd`-formatted
    posts instead of plain `markdown`, existing tools (see `servr`, Table 1) can easily
    execute the R code and format it as a new post in the notebook. Jekyll templates
    make it easy to add semantic metadata to the post automatically including bibliographic
    information, links to version history, commit hash, modification date and so forth.
    At this time a given exploration might not have a particular project connected
    to it -- it might build from several existing projects, a paper I'm reading, or
    represent an entirely new exploration. I use categories and tags in the notebook
    to associate the post with relevant projects or themes, which makes it easier
    to come back to. (Figuring out appropriate tags is harder than it sounds!)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于笔记本已经组织成一个Jekyll存储库，只需使用`.Rmd`格式的帖子而不是普通的`markdown`，现有工具（参见`servr`，表1）可以轻松执行R代码并将其格式化为笔记本中的新帖子。
    Jekyll模板使得可以自动向帖子添加语义元数据，包括参考文献信息、版本历史链接、提交哈希、修改日期等等。此时，某个探索可能并没有特定的项目与之相关联--它可能是基于几个现有项目、我正在阅读的论文，或者代表一个全新的探索。我在笔记本中使用类别和标签将帖子与相关项目或主题关联起来，这样可以更容易地回顾。
    （找到合适的标签比听起来更难！）
- en: Each year I archive the GitHub repository that contains that year's notebook
    on figshare, adding the DOI badge to the repository's README.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每年，我会将包含当年笔记本的GitHub存储库存档在figshare上，并在存储库的README中添加DOI徽章。
- en: Project finalization / publication
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 项目最终化/发布
- en: Eventually multiple entries will relate to the same project. At this point,
    I frequently want to reuse code first developed in a previous entry. This is my
    signal that it is time to create a new project on GitHub. (Figuring this out is
    much harder than it sounds!) I create a new public GitHub repo using a name that
    matches a tag in the relevant notebook entries. In the `R/` directory I store
    functions that provide these reusable bits. For non-trivial functions, I try and
    develop unit tests (in the `/tests` directory) -- these usually come directly
    from the interactive tests I write in the notebook when first creating these functions.
    I also add minimal Roxygen documentation to the functions I create, usually just
    to remind me what the input and outputs are. Data goes in the `/data` directory;
    or more frequently, as R scripts that either simulate or download and clean the
    data from external sources.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Notebook pages do not load these functions as a single package -- as the package
    is constantly changing this is unlikely to continue to work anyway. Instead, they
    source in the script directly from the version-explicit links on GitHub. (I learned
    this the hard way). This avoids the burden of making sure the 'package' is always
    installable, it just serves as a convenient organizational skeleton.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: I continue to develop, test, and explore results in the pages of the notebook,
    adding and modifying functions as necessary. This usually involves plenty of mistakes
    and dead ends that are captured in the history of an individual page (when I modify
    an existing workflow to correct the results) or are left as dead (or incompletely
    explored) ends in the various pages of the notebook under that category.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Once the work has coalesced around a particular set of ideas and results appropriate
    for a single manuscript, I begin drafting the manuscript as a `.Rmd` file in the
    GitHub repository, often based on `.Rmd` files from the notebook. The `rticles`
    package from RStudio provides a template system which makes it easy to render
    `.Rmd` files into `pdf` articles for various journal formats.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: When preparing for submission, I upload a copy of the manuscript (in `tex` format,
    generated from the `Rmd`) to the [arXiv](http://arxiv.org) and configure the Zenodo
    permanent archive which connects automatically to GitHub, much like a Continuous
    Integration service. Zenodo then generates a permanent archive with a unique Digital
    Object Identifier (DOI) every time it detects a new 'release' on GitHub. GitHub
    releases are part of the `git` tag system and can be used to signal a new version
    of software or publication of a paper. A DOI badge from Zenodo is then displayed
    on the GitHub repository.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The reader is encouraged to view any of the real-world examples of this process
    in the repositories of my recent projects, such as [https://github.com/cboettig/nonparametric-bayes](https://github.com/cboettig/nonparametric-bayes),
    or in the pages of my online lab notebook at [http://carlboettiger.info/lab-notebook](http://carlboettiger.info/lab-notebook).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: The frequency of these steps is highly variable -- from many commits a day to
    gaps of months. See my GitHub commit history for a more realistic answer. In addition,
    although most of my research projects involve others, I am the only researcher
    committing to my lab notebook, just as we see in paper notebooks. The final research
    product will see more direct involvement by others.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Pain points
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Knowing when to refactor and how to avoid fragile and opaque design. A good
    reproducible workflow should be like good software: built from simple, easy-to-understand
    modules that do one task well. Most reproducible workflows, mine included, can
    too readily resemble most scientific spaghetti code: pieces tacked together over
    the years because they got the job done. The best way to make a workflow or code
    understandable is to *refactor* it after it works, breaking it into well-defined,
    well-tested modules with clear input and output. Pretending research can be written
    like this from the start is fiction, but just capturing all the messiness provides
    none of the abstraction that makes something more re-usable and reliable. I don''t
    have a good solution for how to do this though -- refactoring is demanding and
    offers few incentives.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Key benefits
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A key benefit of this approach is making my work portable and scalable. By making
    it easy to reproduce my computational environment and analyses, it suddenly becomes
    much easier to re-run an analysis on a cloud machine or cluster if it proves too
    large for my local system.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: A second benefit has been the ability to explore research ideas more easily.
    New ideas often build on old ones, and the dread of having to remember how some
    old stuff worked in the first place before tinkering with it to explore something
    new was often enough to make me turn to something easier.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Key tools
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I believe any of the tools mentioned in Table 1 could be of use to a broader
    audience. I have tried to place the more general near the top -- GitHub and Docker
    address very general issues in computational reproducibility, justifying their
    wide adoption. These tools can inserted into many common workflow patterns without
    requiring significant re-tooling.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: For R users, RStudio has made the Rmd format far more practical as an authoring
    environment, both for websites (e.g. with `servr` package) and journal articles
    (`rticles` package). However, these tools may require both a bigger shift from
    existing strategies and offer a smaller benefit.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: The particular pattern I have used to chain this together with CI, etc, is probably
    less generally applicable, and has a higher learning curve than the afore-mentioned
    tools.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What does "reproducibility" mean to you?
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Reproducibility in this context is ''computational reproducibility.'' It means
    a good-faith effort to make sure that the analysis can produce qualitatively identical
    results while running on comparable hardware. This means certain things do not
    need to be reproduced: e.g. how long the code takes to run may vary by hardware
    and operating system, but this is okay. Nor am I not concerned with bitwise identical
    results, nor with necessarily reproducing stochastic random draws -- rather, I
    expect conclusions from reproducible results to be robust to the details of stochastic
    seed or choice of random number generator.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: I am also concerned that reproducibility is modular -- that individual components
    of the analysis can be reproduced (and thus recombined or otherwise modified),
    and not merely provide a black box that can only replicate final outputs without
    variation or adjustment.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, I think it is important to identify *who* should be able to reproduce
    the analysis. Like the paper itself, the analysis requires a certain degree of
    expertise to understand, and I do not expect that individuals with no familiarity
    with programming, statistics, or scientific process can reproduce the analysis.
    However, I do expect that researchers with some scientific background in my area
    (e.g. the broadest readership of the journal in which it is published) and with
    minimal familiarity with the R language or similar computing langauage can reproduce
    the overall results after suitable investment of time and effort in reading the
    documentation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Why do you think that reproducibility in your domain is important?
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Reproducibility makes results more reliable, and more importantly, makes it
    easier to extend, test, and build upon existing results. Ultimately this makes
    it easier for an individual to build on their own work and the work of others,
    making for faster, better science.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: How or where did you learn about reproducibility?
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Independent study of examples, experimentation, and reading, and connecting
    with other researchers sharing similar interests through the internet and social
    media.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: What do you see as the major challenges to doing reproducible research in your
    domain, and do you have any suggestions?
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Not a standard practice. In the short-term it takes more time. It may also increase
    the probability of errors in your work being discovered.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: What do you view as the major incentives for doing reproducible research?
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Making research easier to do. Reproducible research facilitates collaboration,
    particularly with myself. It improves my confidence in my own results and helps
    me build more efficiently on work that I have already done.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Are there any best practices that you'd recommend for researchers in your field?
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Adopting tools that are widely used within my field (and others) for reproducibility.
    These include: GitHub, Docker, rmarkdown.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 采用在我的领域（以及其他领域）广泛使用的工具来实现可重复性。这些工具包括：GitHub，Docker，rmarkdown。
- en: Would you recommend any specific resources for learning more about reproducibility?
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 您会推荐学习更多关于可重复性的具体资源吗？
- en: 'The documentation linked in Table 1 would be a great place to start on any
    of the individual tools. Additionally, see the reproducible research workshop
    developed by NESCent: [https://github.com/Reproducible-Science-Curriculum](https://github.com/Reproducible-Science-Curriculum)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 表1中链接的文档将是开始学习任何单个工具的绝佳起点。此外，可以查看NESCent开发的可重复研究研讨会：[https://github.com/Reproducible-Science-Curriculum](https://github.com/Reproducible-Science-Curriculum)
- en: References
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考文献
- en: Boettiger, C. (2015). An introduction to Docker for reproducible research, with
    examples from the R environment. *ACM SIGOPS Operating Systems Review*, *49*(1),
    71–79\. [http://doi.org/10.1145/2723872.2723882](http://doi.org/10.1145/2723872.2723882)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Boettiger, C.（2015）。使用来自R环境的示例介绍Docker以实现可重复研究。*ACM SIGOPS操作系统评论*，*49*（1），71–79。[http://doi.org/10.1145/2723872.2723882](http://doi.org/10.1145/2723872.2723882)
- en: Gentleman, R., & Temple Lang, D. (2007). Statistical Analyses and Reproducible
    Research. *Journal of Computational and Graphical Statistics*, *16*(1), 1–23\.
    [http://doi.org/10.1198/106186007X178663](http://doi.org/10.1198/106186007X178663)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Gentleman, R.，& Temple Lang, D.（2007）。统计分析与可重复研究。*计算与图形统计杂志*，*16*（1），1–23。[http://doi.org/10.1198/106186007X178663](http://doi.org/10.1198/106186007X178663)
- en: 'Gewin, V. (2013). Turning point: Carl Boettiger. *Nature*, *493*(7434), 711–711\.
    [http://doi.org/10.1038/nj7434-711a](http://doi.org/10.1038/nj7434-711a)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Gewin, V.（2013）。转折点：Carl Boettiger。*自然*，*493*（7434），711–711。[http://doi.org/10.1038/nj7434-711a](http://doi.org/10.1038/nj7434-711a)
- en: 'Mascarelli, A. (2014). Research tools: Jump off the page. *Nature*, *507*(7493),
    523–525\. [http://doi.org/10.1038/nj7493-523a](http://doi.org/10.1038/nj7493-523a)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Mascarelli, A.（2014）。研究工具：跳出页面。*自然*，*507*（7493），523–525。[http://doi.org/10.1038/nj7493-523a](http://doi.org/10.1038/nj7493-523a)
