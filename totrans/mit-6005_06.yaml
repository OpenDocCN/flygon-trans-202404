- en: 'Reading 6: Specifications'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software in 6.005
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
- en: Objectives
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Understand preconditions and postconditions in method specifications, and be
    able to write correct specifications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be able to write tests against a specification
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Know the difference between checked and unchecked exceptions in Java
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand how to use exceptions for special results
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Specifications are the linchpin of teamwork. It’s impossible to delegate responsibility
    for implementing a method without a specification. The specification acts as a
    contract: the implementer is responsible for meeting the contract, and a client
    that uses the method can rely on the contract. In fact, we’ll see that like real
    legal contracts, specifications place demands on both parties: when the specification
    has a precondition, the client has responsibilities too.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: In this reading we’ll look at the role played by specifications of methods.
    We’ll discuss what preconditions and postconditions are, and what they mean for
    the implementor and the client of a method. We’ll also talk about how to use exceptions,
    an important language feature found in Java, Python, and many other modern languages,
    which allows us to make a method’s interface safer from bugs and easier to understand.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[Part 1: Specifications](specs/)'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Part 2: Exceptions](exceptions/)'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Summary
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we wrap up, check your understanding with one last example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: reading exercises
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Scrabble 1
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we’re working on the method below…
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Scrabble 2(missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: (missing answer)(missing answer)(missing answer)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: (missing explanation)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'A specification acts as a crucial firewall between the implementor of a procedure
    and its client. It makes separate development possible: the client is free to
    write code that uses the procedure without seeing its source code, and the implementor
    is free to write the code that implements the procedure without knowing how it
    will be used.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s review how specifications help with the main goals of this course:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '**Safe from bugs**. A good specification clearly documents the mutual assumptions
    that a client and implementor are relying on. Bugs often come from disagreements
    at the interfaces, and the presence of a specification reduces that. Using machine-checked
    language features in your spec, like static typing and exceptions rather than
    just a human-readable comment, can reduce bugs still more.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy to understand**. A short, simple spec is easier to understand than the
    implementation itself, and saves other people from having to read the code.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ready for change**. Specs establish contracts between different parts of
    your code, allowing those parts to change independently as long as they continue
    to satisfy the requirements of the contract.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准备好改变**。规范建立了代码中不同部分之间的契约，使得这些部分可以独立变化，只要它们继续满足契约的要求。'
