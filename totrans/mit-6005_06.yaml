- en: 'Reading 6: Specifications'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读 6：规范
- en: Software in 6.005
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.005 中的软件
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| 免受错误的影响 | 易于理解 | 为变化做好准备 |'
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 今天正确，未知的未来也正确。 | 与未来的程序员清晰沟通，包括未来的你。 | 设计以适应变化而无需重写。 |'
- en: Objectives
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目标
- en: Understand preconditions and postconditions in method specifications, and be
    able to write correct specifications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解方法规范中的先决条件和后置条件，并能够编写正确的规范
- en: Be able to write tests against a specification
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够根据规范编写测试
- en: Know the difference between checked and unchecked exceptions in Java
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Java 中已检查和未检查异常的区别
- en: Understand how to use exceptions for special results
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何使用异常获取特殊结果
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Specifications are the linchpin of teamwork. It’s impossible to delegate responsibility
    for implementing a method without a specification. The specification acts as a
    contract: the implementer is responsible for meeting the contract, and a client
    that uses the method can rely on the contract. In fact, we’ll see that like real
    legal contracts, specifications place demands on both parties: when the specification
    has a precondition, the client has responsibilities too.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 规范是团队合作的关键。没有规范，无法委派实现方法的责任。规范充当合同：实施者负责遵守合同，而使用该方法的客户可以依赖合同。事实上，我们会发现，就像真实的法律合同一样，规范对双方都提出了要求：当规范有先决条件时，客户也有责任。
- en: In this reading we’ll look at the role played by specifications of methods.
    We’ll discuss what preconditions and postconditions are, and what they mean for
    the implementor and the client of a method. We’ll also talk about how to use exceptions,
    an important language feature found in Java, Python, and many other modern languages,
    which allows us to make a method’s interface safer from bugs and easier to understand.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次阅读中，我们将研究方法规范的作用。我们将讨论先决条件和后置条件是什么，以及它们对方法的实施者和客户的意义。我们还将讨论如何使用异常，这是 Java、Python
    和许多其他现代语言中的一个重要语言特性，它使我们能够使方法的接口更安全，更易于理解。
- en: '[Part 1: Specifications](specs/)'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[第1部分：规范](specs/)'
- en: '[Part 2: Exceptions](exceptions/)'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[第2部分：异常](exceptions/)'
- en: Summary
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'Before we wrap up, check your understanding with one last example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束之前，用一个最后的例子检查一下你的理解：
- en: reading exercises
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Scrabble 1
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Scrabble 1
- en: Suppose we’re working on the method below…
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在处理下面的方法…
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）（缺少答案）（缺少答案）（缺少答案）
- en: (missing explanation)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）（缺少答案）（缺少答案）（缺少答案）
- en: (missing explanation)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: Scrabble 2(missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Scrabble 2（缺少答案）（缺少答案）（缺少答案）（缺少答案）
- en: (missing explanation)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: (missing answer)(missing answer)(missing answer)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）（缺少答案）（缺少答案）
- en: (missing explanation)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: 'A specification acts as a crucial firewall between the implementor of a procedure
    and its client. It makes separate development possible: the client is free to
    write code that uses the procedure without seeing its source code, and the implementor
    is free to write the code that implements the procedure without knowing how it
    will be used.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 规范充当程序实现者和其客户之间的重要防火墙。它使分离开发成为可能：客户可以自由编写使用该过程的代码，而无需看到其源代码，并且实施者可以自由编写实施该过程的代码，而不知道它将如何使用。
- en: 'Let’s review how specifications help with the main goals of this course:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下规范如何帮助实现这门课程的主要目标：
- en: '**Safe from bugs**. A good specification clearly documents the mutual assumptions
    that a client and implementor are relying on. Bugs often come from disagreements
    at the interfaces, and the presence of a specification reduces that. Using machine-checked
    language features in your spec, like static typing and exceptions rather than
    just a human-readable comment, can reduce bugs still more.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**免受错误的影响**。一个好的规范清楚地记录了客户和实施者依赖的共同假设。错误通常来自接口的分歧，而规范的存在可以减少这种情况。在规范中使用机器检查的语言特性，如静态类型和异常，而不仅仅是人类可读的注释，可以进一步减少错误。'
- en: '**Easy to understand**. A short, simple spec is easier to understand than the
    implementation itself, and saves other people from having to read the code.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于理解**。简短、简单的规范比实现本身更容易理解，并且节省了其他人阅读代码的时间。'
- en: '**Ready for change**. Specs establish contracts between different parts of
    your code, allowing those parts to change independently as long as they continue
    to satisfy the requirements of the contract.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准备好改变**。规范建立了代码中不同部分之间的契约，使得这些部分可以独立变化，只要它们继续满足契约的要求。'
