- en: Lecture 9 - Send/Receive/Reply
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pubilc Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due date for assignment 1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next week's classes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assignment 2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: due date
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: what you do
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Inter-task Communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: Message passing combines synchronization and communication in one set of primitives.
  prefs: []
  type: TYPE_NORMAL
- en: Send, Receive, Reply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: int Send( Tid tid, char *message, int mslen, char *reply, int rplen )
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: blocks until Reply occurs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: int Receive( Tid *tid, char *message, int mslen )
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: blocks until message is available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only one waiting sender is processed per Receive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hint. There might be tasks that are higher priority than the Receiver.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: int Reply( Tid tid, char *reply, int rplen )
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: does not block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unblocks task that called Send
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send and Reply become READY at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: How are They Used?
  prefs: []
  type: TYPE_NORMAL
- en: The Producer/Consumer Problem
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Producer Sends
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: producer sends and blocks (I have some XXX for you)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: consumer receives (Give me some XXX)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: consumer accepts XXX
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: consumer replies (I got the XXX)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: producer & consumer are simultaneously READY
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note. 1 & 2 could be run in the opposite order
  prefs: []
  type: TYPE_NORMAL
- en: Consumer Sends
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Consumer sends and blocks (`I am ready for some XXX.')
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Producer receives (`I have some XXX.')
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Producer replies (`Here is the XXX')
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consumer accepts XXX
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Producer and consumer are simultaneously READY
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note. 1 & 2 could be run in the opposite order
  prefs: []
  type: TYPE_NORMAL
- en: Multiple Producers
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Producers send; consumer receives in the order that producers send.
  prefs: []
  type: TYPE_NORMAL
- en: Notes.
  prefs: []
  type: TYPE_NORMAL
- en: Critical races can occur, which the application programmer must resolve.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two types of critical race
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ones internal to the application. For example, order of production changes in
    one producer because you add or remove a printf statement. These ones you can
    program out of existence by changing priorities, communication patterns, etc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ones external to the application. For example, one producer is forwarding bytes
    from the keyboard, the other from the train controller, and the order of production
    changes because the user types a little faster. These ones you cannot program
    out of existence, but must program so that the right thing happens regardless
    of the order of production.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple Consumers
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Consumers send; producer receives in the order that consumers send.
  prefs: []
  type: TYPE_NORMAL
- en: Note. Critical races can occur, which the application programmer must resolve.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple Consumers AND Multiple Producers
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Consumers send and producers send: who receives?'
  prefs: []
  type: TYPE_NORMAL
- en: 'A third task: you call it a FIFO or buffer; I call it a warehouse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Buffer receives two types of request
  prefs: []
  type: TYPE_NORMAL
- en: 'Producer: Here is some XXX'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Warehouse stores XXX, replies
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: If warehouse is full of XXX two strategies are possible
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Warehouse queues sender, who remains Reply_Blocked
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Warehouse replies with refusal
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Consumer: I want some YYY'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Warehouse provides YYY, replies
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: If warehouse is empty of YYY, two strategies are possible
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Warehouse queues sender, who remains Reply_Blocked
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Warehouse replies with refusal
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Only a receiver can accept two types of requests at once.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Sequence of States
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sender
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Active -> Receive_Blocked
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When Send is called
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Receive_Blocked -> Reply_Blocked
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: May happen right away
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When Receive is called with the Receiver's SendQ empty
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, when Receive is called
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reply_Blocked -> Ready
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When Reply is called
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiver
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Active -> Send_Blocked
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send_Blocked -> Ready
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: May happen right away
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: if the sendQ is not empty
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ready -> Active
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Active -> Ready
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When Reply is called
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two cases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Send before Receive
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Message copying occurs inside Receive and Reply.
  prefs: []
  type: TYPE_NORMAL
- en: Receive needs to have a list of current senders, the ReceiveQ
  prefs: []
  type: TYPE_NORMAL
- en: Receive before Send
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Message copying occurs inside Send and Reply.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Example of a Difficult Bug
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You notice that a Receiver is never on a readyQ when it is Send_Blocked
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You decide to use the next pointer in the TD for the head of the sendQ
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: probably to fit two TDs into a single cache line
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You test and test and test and nothing ever goes wrong
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One week before the demo, your kernel crashes under your application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What two things might have gone wrong?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You might have caught one while testing, not likely the other.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
