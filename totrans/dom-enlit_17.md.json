["```\n*//select in a document all li's in the first ul and get the innerHTML for the first li*\ndom('li','ul').html();\n\n*//create html structure using a document fragment and get the innerHTML of ul*\ndom('<ul><li>hi</li></ul>').html()\n```", "```\n(function(win){ \n\nvar global = win;\nvar doc = this.document;\n\n}}(window);\n```", "```\n(function(win){ \n\nvar global = win;\nvar doc = global.document;\n\nvar dom = function(params,context){\n\treturn new GetOrMakeDom(params,context);\n};\n\nvar GetOrMakeDom = function(params,context){\n\n}; *})(window);*\n```", "```\n(function(win){\n\nvar global = win;\nvar doc = global.document;\nvar dom = function(params,context){\n\treturn new GetOrMakeDom(params,context);\n};\n\nvar GetOrMakeDom = function(params,context){\n\n};\n\n*//expose dom to global scope*\nglobal.dom = dom;\n\n})(window);\n```", "```\n(function(win){\n\nvar global = win;\nvar doc = global.document;\nvar dom = function(params,context){\n\treturn new GetOrMakeDom(params,context);\n};\n\nvar GetOrMakeDom = function(params,context){\n\n};\n\n*//expose dom to global scope*\nglobal.dom = dom;\n\n*//short cut to prototype*\ndom.fn = GetOrMakeDom.prototype;\n\n})(window);\n```", "```\n(function(win){\n\nvar global = win;\nvar doc = global.document;\nvar dom = function(params,context){\n\treturn new GetOrMakeDom(params,context);\n};\n\nvar GetOrMakeDom = function(params,context){\n\n var currentContext = doc;\n\t\tif(context){\n\t\t\tif(context.nodeType){*//its either a document node or element node*\n\t\t\t\tcurrentContext = context;\n\t\t\t}else{ *//else its a string selector, use it to selector a node*\n\t\t\t\tcurrentContext = doc.querySelector(context);\n\t\t}\n\t}\n\n};\n\n*//expose dom to global scope*\nglobal.dom = dom;\n\n*//short cut to prototype*\ndom.fn = GetOrMakeDom.prototype;\n\n})(window);\n```", "```\n(function(win){\n\nvar global = win;\nvar doc = global.document;\nvar dom = function(params,context){\n\treturn new GetOrMakeDom(params,context);\n};\n\nvar regXContainsTag = /^\\s*<(\\w+|!)[^>]*>/;\n\nvar GetOrMakeDom = function(params,context){\n\n\tvar currentContext = doc;\n\tif(context){\n\t\tif(context.nodeType){\n\t\t\tcurrentContext = context;\n\t\t}else{\n\t\t\tcurrentContext = doc.querySelector(context);\n\t\t}\n\t}\n\n *//if no params, return empty dom() object*\n\tif(!params || params === '' || typeof params === 'string' && params.trim() === ''){\n\t\tthis.length = 0;\n\t\treturn this;\n\t}\n\n\t*//if HTML string, construct domfragment, fill object, then return object*\n\tif(typeof params === 'string' && regXContainsTag.test(params)){//yup its forsure html string\n\t\t*//create div & docfrag, append div to docfrag, then set its div's innerHTML to the string, then get first child*\n\t\tvar divElm = currentContext.createElement('div');\n\t\tdivElm.className = 'hippo-doc-frag-wrapper';\n\t\tvar docFrag = currentContext.createDocumentFragment();\n\t\tdocFrag.appendChild(divElm);\n\t\tvar queryDiv = docFrag.querySelector('div');\n\t\tqueryDiv.innerHTML = params;\n\t\tvar numberOfChildren = queryDiv.children.length;\n\t\t*//loop over nodelist and fill object, needs to be done because a string of html can be passed with siblings*\n\t\tfor (var z = 0; z < numberOfChildren; z++) {\n\t\t\tthis[z] = queryDiv.children[z];\n\t\t}\n\t\t*//give the object a length value*\n\t\tthis.length = numberOfChildren;\n\t *//return object*\n\t\treturn this; *//return e.g. {0:ELEMENT_NODE,1:ELEMENT_NODE,length:2}*\n\t}\n\n\t*//if a single node reference is passed, fill object, return object*\n\tif(typeof params === 'object' && params.nodeName){\n\t\tthis.length = 1;\n\t\tthis[0] = params;\n\t\treturn this;\n\t}\n\n\t*//if its an object but not a node assume nodelist or array, else its a string selector, so create nodelist*\n\tvar nodes;\n\tif(typeof params !== 'string'){*//nodelist or array*\n\t\tnodes = params;\n\t}else{*//ok string*\n\t\tnodes = currentContext.querySelectorAll(params.trim());\n\t}\n\t*//loop over array or nodelist created above and fill object*\n\tvar nodeLength = nodes.length;\n\tfor (var i = 0; i < nodeLength; i++) {\n\t\tthis[i] = nodes[i];\n\t}\n\t*//give the object a length value*\n\tthis.length = nodeLength;\n\t*//return  object*\n\treturn this; *//return e.g. {0:ELEMENT_NODE,1:ELEMENT_NODE,length:2}*\n\n};\n\n*//expose dom to global scope*\nglobal.dom = dom;\n\n*//short cut to prototype*\ndom.fn = GetOrMakeDom.prototype;\n\n})(window);\n\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n```", "```\ndom.fn.each = function (callback) {\n\tvar len = this.length; *//the specific instance create from getOrMakeDom() and returned by calling dom()*\n\tfor(var i = 0; i < len; i++){\n\t\t*//invoke the callback function setting the value of this to element node and passing it parameters*\n\t\tcallback.call(this[i], i, this[i]);\n\t}\n};\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n\n```", "```\ndom.fn.each = function (callback) {\n\tvar len = this.length;\n\tfor(var i = 0; i < len; i++){\n\t\tcallback.call(this[i], i, this[i]);\n\t} return this; *//make it chainable by returning e.g. {0:ELEMENT_NODE,1:ELEMENT_NODE,length:2}**};\u200b**\u200b\u200b**\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b* \n```", "```\ndom.fn.html = function(htmlString){\n\tif(htmlString){\n\t\treturn this.each(function(){ *//notice I return this so its chainable if called with param*\n\t\t\tthis.innerHTML = htmlString;\n\t\t});\n\t}else{\n\t\treturn this[0].innerHTML;\n\t}\n};\n\ndom.fn.text = function(textString){\n\tif(textString){\n\t\treturn this.each(function(){ *//notice I return this so its chainable if called with param*\n\t\t\tthis.textContent = textString;\n\t\t});\n\t}else{\n\t\treturn this[0].textContent.trim();\n\t}\n};\n```", "```\ndom.fn.append = function(stringOrObject){\n\treturn this.each(function(){\n\t\tif(typeof stringOrObject === 'string'){\n\t\t\tthis.insertAdjacentHTML('beforeend',stringOrObject);\n\t\t}else{\n\t\t\tvar that = this;\n\t\t\tdom(stringOrObject).each(function(name,value){\n\t\t\t\tthat.insertAdjacentHTML('beforeend',value.outerHTML);\n\t\t\t});\n\t\t}\n\t});\n};\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n<ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n\n<script src=\"https://raw.github.com/codylindley/domjs/master/builds/dom.js\"></script>\n<script>\n\n*//dom()*\nconsole.log(dom());\nconsole.log(dom(''));\nconsole.log(dom('body'));\nconsole.log(dom('<p>Hellow</p><p> World!</p>'));\nconsole.log(dom(document.body));\nconsole.log(dom([document.body,\u00a0document.body]));\nconsole.log(dom(document.body.children));\nconsole.log(dom(dom('body')));\n\n*//dom().html()*\nconsole.log(dom('ul li:first-child').html('one'));\nconsole.log(dom('ul li:first-child').html()\u00a0===\u00a0'one');\n\n*//dom().text()*\nconsole.log(dom('ul li:last-child').text('three'));\nconsole.log(dom('ul li:last-child').text()\u00a0===\u00a0'three');\n\n*//dom().append()*\ndom('ul').append('<li>4</li>');\ndom('ul').append(document.createElement('li'));\ndom('ul').append(dom('li:first-child'));\n\n</script> \n</body>\n</html>\n\n```"]