["```\npublic class Duration {\n    private final int mins;\n    private final int secs;\n    // rep invariant:\n    //    mins >= 0, secs >= 0\n    // abstraction function:\n    //    represents a span of time of mins minutes and secs seconds\n\n    /** Make a duration lasting for m minutes and s seconds. */\n    public Duration(int m, int s) {\n        mins = m; secs = s;\n    }\n    /** @return length of this duration in seconds */\n    public long getLength() {\n        return mins*60 + secs;\n    }\n}\n```", "```\nDuration d1 = new Duration (1, 2);\nDuration d2 = new Duration (1, 3);\nDuration d3 = new Duration (0, 62);\nDuration d4 = new Duration (1, 2);\n```", "```\npublic class Object {\n    ...\n    public boolean equals(Object that) {\n        return this == that;\n    }\n}\n```", "```\npublic class Duration {\n    ...   \n    // Problematic definition of equals()\n    public boolean equals(Duration that) {\n        return this.getLength() == that.getLength();        \n    }\n}\n```", "```\nDuration d1 = new Duration (1, 2);\nDuration d2 = new Duration (1, 2);\nObject o2 = d2;\nd1.equals(d2) \u2192 true\nd1.equals(o2) \u2192 false\n```", "```\npublic class Duration extends Object {\n    // explicit method that we declared:\n    public boolean equals (Duration that) {\n        return this.getLength() == that.getLength();\n    }\n    // implicit method inherited from Object:\n    public boolean equals (Object that) {\n        return this == that;\n    }\n}\n```", "```\n@Override\npublic boolean equals (Object thatObject) {\n    if (!(thatObject instanceof Duration)) return false;\n    Duration thatDuration = (Duration) thatObject;\n    return this.getLength() == thatDuration.getLength();\n}\n```", "```\nDuration d1 = new Duration(1, 2);\nDuration d2 = new Duration(1, 2);\nObject o2 = d2;\nd1.equals(d2) \u2192 true\nd1.equals(o2) \u2192 true\n```", "```\nprivate static final int CLOCK_SKEW = 5; // seconds\n\n@Override\npublic boolean equals (Object thatObject) {\n    if (!(thatObject instanceof Duration)) return false;\n    Duration thatDuration = (Duration) thatObject;\n    return Math.abs(this.getLength() - thatDuration.getLength()) <= CLOCK_SKEW;\n}\n```", "```\npublic class Duration {\n    private final int mins;\n    private final int secs;\n    // rep invariant:\n    //    mins >= 0, secs >= 0\n    // abstraction function:\n    //    represents a span of time of mins minutes and secs seconds\n\n    /** Make a duration lasting for m minutes and s seconds. */\n    public Duration(int m, int s) {\n        mins = m; secs = s;\n    }\n    /** @return length of this duration in seconds */\n    public long getLength() {\n        return mins*60 + secs;\n    }\n\n    private static final int CLOCK_SKEW = 5; // seconds\n\n    @Override\n    public boolean equals (Object thatObject) {\n        if (!(thatObject instanceof Duration)) return false;\n        Duration thatDuration = (Duration) thatObject;\n        return Math.abs(this.getLength() - thatDuration.getLength()) <= CLOCK_SKEW;\n    }\n}\n```", "```\nDuration d_0_60 = new Duration(0, 60);\nDuration d_1_00 = new Duration(1, 0);\nDuration d_0_57 = new Duration(0, 57);\nDuration d_1_03 = new Duration(1, 3);\n```", "```\npublic class Object {\n  ...\n  public boolean equals(Object that) { return this == that; }\n  public int hashCode() { return /* the memory address of this */; }\n}\n```", "```\nDuration d1 = new Duration(1, 2);\nDuration d2 = new Duration(1, 2);\nd1.equals(d2) \u2192 true\nd1.hashCode() \u2192 2392\nd2.hashCode() \u2192 4823\n```", "```\n@Override\npublic int hashCode() {\n    return (int) getLength();\n}\n```", "```\nclass Person {\n  private String firstName;\n  private String lastName;\n  ...\n\n  public boolean equals(Object obj) {\n      if (!(obj instanceof Person)) return false;\n      Person that = (Person) obj;\n      return this.lastName.toUpperCase().equals(that.lastName.toUpperCase());\n  }\n\n  public int hashCode() {\n      // TODO\n  }\n}\n```", "```\nList<String> list = new ArrayList<>();\nlist.add(\"a\");\n\nSet<List<String>> set = new HashSet<List<String>>();\nset.add(list);\n```", "```\nset.contains(list) \u2192 true\n```", "```\nlist.add(\"goodbye\");\n```", "```\nset.contains(list) \u2192 false!\n```", "```\nfor (List<String> l : set) { \n    set.contains(l) \u2192 false! \n}\n```", "```\n/** make an empty bag */\npublic Bag<E>()\n\n/** modify this bag by adding an occurrence of e, and return this bag */\npublic Bag<E> add(E e)\n\n/** modify this bag by removing an occurrence of e (if any), and return this bag */\npublic Bag<E> remove(E e)\n\n/** return number of times e occurs in this bag */\npublic int count(E e)\n```", "```\nBag<String> b1 = new Bag<>().add(\"a\").add(\"b\");\nBag<String> b2 = new Bag<>().add(\"a\").add(\"b\");\nBag<String> b3 = b1.remove(\"b\");\nBag<String> b4 = new Bag<>().add(\"b\").add(\"a\"); // swap!\n```", "```\nInteger x = new Integer(3);\nInteger y = new Integer(3);\nx.equals(y) \u2192 true\n```", "```\nx == y // returns false\n```", "```\n(int)x == (int)y // returns true\n```", "```\nMap<String, Integer> a = new HashMap(), b = new HashMap();\na.put(\"c\", 130); // put ints into the map\nb.put(\"c\", 130);\na.get(\"c\") == b.get(\"c\") \u2192 ?? // what do we get out of the map?\n```", "```\nMap<String, Integer> a = new HashMap<>(), b = new HashMap<>();\na.put(\"c\", 130); // put ints into the map\nb.put(\"c\", 130);\n```", "```\nMap<String, Integer> a = new HashMap<>(), b = new HashMap<>();\na.put(\"c\", 130); // put ints into the map\nb.put(\"c\", 130);\n```", "```\nint i = a.get(\"c\");\nint j = b.get(\"c\");\nboolean isEqual = (i == j);\n```"]