- en: 'Lecture 10: Functors'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十讲：函子
- en: In the previous lecture we considered abstraction and modular design, primarily
    through the use of the `module` mechanism in OCaml. Today we will consider another
    means of abstraction called *functors*, a construct that enables modules to be
    combined by parameterizing a module in terms of other modules.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一堂课中，我们通过OCaml中的`module`机制主要考虑了抽象和模块化设计。今天我们将考虑另一种抽象方法，称为*函子*，这是一种构造，使模块能够通过将模块参数化为其他模块来进行组合。
- en: 'Consider the `SET` data abstraction that we have looked at during the past
    few classes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑我们在过去几堂课中所看到的`SET`数据抽象：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: While this interface uses polymorphism to enable sets with different types of
    elements to be created, any implementation of this signature needs to use the
    built-in `=` function in testing whether an element is a member of such a set.
    Thus we cannot for example have a set of strings where comparison of the elements
    is done in a case-insensitive manner, or a set of integers where elements are
    considered equal when their magnitudes (absolute values) are equal. We could write
    two separate signatures, one for sets with string elements and one for sets with
    integer elements, and then in the implementation of each signature use an appropriate
    comparison function. However this would yield a lot of nearly duplicated code,
    both in the signatures and in the implementation. Such nearly duplicated code
    is more work to write and maintain and more importantly is often a source of bugs
    when things are changed in one place and not another.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个接口使用多态来使得能够创建具有不同类型元素的集合，但是这个签名的任何实现都需要使用内置的`=`函数来测试元素是否属于这样的集合。因此，我们例如不能拥有一个字符串集合，其中元素的比较以不区分大小写的方式进行，或者一个整数集合，其中元素在它们的大小（绝对值）相等时被视为相等。我们可以编写两个单独的签名，一个用于具有字符串元素的集合，一个用于具有整数元素的集合，然后在每个签名的实现中使用适当的比较函数。但是这将产生大量几乎重复的代码，无论是在签名中还是在实现中。这样几乎重复的代码编写和维护起来更费力，更重要的是，当一个地方改变而另一个地方没有改变时，往往是bug的源头。
- en: 'A *functor* is a mapping from modules to modules. It allows the construction
    of a module parameterized by one or more other modules. Functors allow us to create
    a set module that is parameterized by another module that does the equality testing,
    thereby allowing the same code to be used for different equality tests. To make
    this concrete, we will consider an example using the following signatures:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*函子*是从模块到模块的映射。它允许构建一个由一个或多个其他模块参数化的模块。函子使我们能够创建一个由另一个进行相等性测试的模块参数化的集合模块，从而允许相同的代码用于不同的相等性测试。为了具体化这一点，我们将考虑以下签名的示例：'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The signature `EQUAL` describes the input type for the functor. To implement
    `EQUAL`, a module need only specify a type `t` and a comparison function `equal
    : t -> t -> bool`, but these can be anything.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '签名`EQUAL`描述了函子的输入类型。要实现`EQUAL`，模块只需指定一个类型`t`和一个比较函数`equal: t -> t -> bool`，但这可以是任何东西。'
- en: The signature `SETFUNCTOR` describes the type of the functor. This differs from
    the `SET` interface in several respects. First, the keyword `functor` indicates
    that it is a functor accepting a parameter, which in this case is any module of
    type `EQUAL`. Note how the syntax is reminiscent of the notation for functions.
    The parameter is referenced by the name `Equal` in the body of `SETFUNCTOR`, but
    that does not have to be its actual name.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 签名`SETFUNCTOR`描述了函子的类型。这与`SET`接口在几个方面有所不同。首先，关键字`functor`表示它是一个接受参数的函子，在这种情况下，参数是任何类型为`EQUAL`的模块。注意语法如何让人想起函数的符号。参数在`SETFUNCTOR`的主体中通过名称`Equal`引用，但这不必是它的实际名称。
- en: The body of `SETFUNCTOR` describes the type of the module that will be produced.
    In the body, instead of the polymorphic `'a` of `SET`, the type of the elements
    is named `elt` and is defined to be the same as the type `t` of the module `Equal`,
    whatever that is. There is also a fixed but unspecified type `set`, along with
    some set operations of the appropriate types, specified in terms of `elt` and
    `set`. (We have omitted a few of the operations for simplicity of the presentation,
    although they could easily be added back in.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`SETFUNCTOR`的主体描述了将要生成的模块的类型。在主体中，与`SET`的多态`''a`不同，元素的类型被命名为`elt`，并被定义为与模块`t`相同的类型`Equal`，无论那是什么。还有一个固定但未指定的类型`set`，以及一些具有适当类型的集合操作，以`elt`和`set`为基础指定。（为了简化表达，我们省略了一些操作，尽管可以轻松地将它们添加回去。）'
- en: Now we are ready to define a functor implementing the `SETFUNCTOR` signature.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备定义一个实现 `SETFUNCTOR` 签名的函数子。
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, the header
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，头文件
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: indicates that we are defining an implementation named `MakeSet` of the functor
    type `SETFUNCTOR`. The second line
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 表示我们正在定义一个名为 `MakeSet` 的实现，类型为 `SETFUNCTOR` 的函数子。第二行
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: indicates that we are defining a functor with parameter `Equal` of type `EQUAL`.
    Again, the module implementing `EQUAL` is referenced by the name `Equal` in the
    body of `MakeSet`, but that does not have to be its actual name. In general there
    can be any number of parameter modules, each of which must be specified with a
    name and signature. Note that these parameters can only be modules, including
    other parameterized modules—they cannot be first-class objects of the language
    such as functions or other types.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 表明我们正在定义一个参数为 `EQUAL` 类型的函数子，模块实现了 `EQUAL` 的名称在 `MakeSet` 主体中被引用为 `Equal`，但这不一定是它的实际名称。一般来说，可以有任意数量的参数模块，每个模块必须用名称和签名来指定。请注意，这些参数只能是模块，包括其他参数化模块，它们不能是语言的一级对象，例如函数或其他类型。
- en: Finally, the body of `MakeSet` between `struct` and `end` describes the implementation
    of the output module. This module must satisfy the signature described in the
    body of `SETFUNCTOR`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`MakeSet` 在 `struct` 和 `end` 之间的主体描述了输出模块的实现。此模块必须满足 `SETFUNCTOR` 主体中描述的签名。
- en: The body of `MakeSet` is like the body of any other module. In this example
    the `open` directive is used so that the names `t` and `equal` can be used without
    qualifying them as `Equal.t` and `Equal.equal`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`MakeSet` 的主体就像任何其他模块的主体一样。在这个例子中，使用了 `open` 指令，以便可以在不将它们标记为 `Equal.t` 和 `Equal.equal`
    的情况下使用名称 `t` 和 `equal`。'
- en: 'It is also worth noting the partial evaluation of both `equal` and `List.exists`
    in:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是在以下代码中 `equal` 和 `List.exists` 的部分评估：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To write it out in full, we might have written
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要完整地写出来，我们可能会写成
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: but the shorter version is equivalent. In both cases, we are using the fact
    that `fun z -> f z` is equivalent to just `f`. For example, both `fun y -> equal
    x y` and `equal x` are functions that test whether a given element is equal to
    the value of `x`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但较短的版本是等效的。在两种情况下，我们都使用了 `fun z -> f z` 等价于 `f` 的事实。例如，`fun y -> equal x y`
    和 `equal x` 都是检查给定元素是否等于 `x` 值的函数。
- en: Now we show how to create modules using the functor `MakeSet`. To do this, we
    need an implementation of the `EQUAL` signature. Say, for example, we want to
    test equality of strings in a case-independent fashion. Here is a module that
    does this.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们展示如何使用函数子 `MakeSet` 创建模块。为此，我们需要一个实现 `EQUAL` 签名的模块。例如，假设我们想要以不区分大小写的方式测试字符串的相等性。下面是一个执行此操作的模块。
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we can use `MakeSet` to create a string set module with case-insensitive
    equality by applying it to `StringNoCase`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 `MakeSet` 将其应用于 `StringNoCase` 来创建一个具有不区分大小写相等性的字符串集合模块：
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Evaluating this expression, the interpreter prints out:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 评估这个表达式，解释器会打印出：
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That is, the `SSet` module defines the types `set` and `elt` and the function
    `mem`, `add`, and `size`, but the actual implementation is hidden.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，`SSet` 模块定义了类型 `set` 和 `elt`，以及函数 `mem`、`add` 和 `size`，但实际的实现是隐藏的。
- en: Now we can use this set abstraction to create and manipulate sets of strings
    with case-insensitive comparison.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用这个集合抽象来创建和操作具有不区分大小写比较的字符串集合。
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After doing this, creating a module for sets of integers using absolute value
    comparison involves almost no additional code. We only need to create another
    module implementing `EQUAL` and use it as the parameter to `MakeSet`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样做之后，使用绝对值比较创建整数集合模块几乎不需要额外的代码。我们只需要创建另一个实现 `EQUAL` 并将其用作 `MakeSet` 的参数的模块：
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we can use this set abstraction to create and manipulate sets of integers
    with absolute value comparison:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用这个集合抽象来创建和操作具有绝对值比较的整数集合：
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Caveats
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注意事项
- en: There are a few subtleties with functors that are worth mentioning. First, note
    that we did not specify the signature `EQUAL` when we defined `StringNoCase`.
    We might have written
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 函数子有一些值得注意的细微之处。首先，请注意在我们定义 `StringNoCase` 时我们没有指定签名 `EQUAL`。我们可以写成
- en: '[PRE14]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'but this would have been a bad idea:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是一个不好的主意：
- en: '[PRE15]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The issue here is that the signature `EQUAL` does not expose the type definition
    `type t = string` in the implementation `StringNoCase`, so the functor is not
    free to use that information. It may only deal with the module `StringNoCase`
    through its signature. This is consistent with the principle of information hiding
    through the use of signatures. Thus the module that is produced does not know
    that `StringNoCase.t` is really `string`. But if we omit the `EQUAL`, then the
    signature of `StringNoCase` is inferred from the implementation:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是签名`EQUAL`没有在实现`StringNoCase`中暴露类型定义`type t = string`，因此functor不能自由地使用该信息。它只能通过其签名处理模块`StringNoCase`。这与通过使用签名隐藏信息的原则一致。因此，生成的模块不知道`StringNoCase.t`实际上是`string`。但是如果我们省略了`EQUAL`，则`StringNoCase`的签名将从实现中推断出：
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: (formatting inserted by hand for clarity). You can see that here the type definition
    `type t = string` is exposed, and the functor may now use that information.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: （为了清晰起见手动插入格式）。你可以看到这里暴露了类型定义`type t = string`，而functor现在可以使用该信息。
- en: Contravariance
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逆变
- en: Another good reason for not specifying the signature is that modules can implement
    lots of different signatures and can be used in different ways. For example, if
    we had defined
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个不指定签名的好理由是模块可以实现许多不同的签名，并且可以以不同的方式使用。例如，如果我们定义了
- en: '[PRE17]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: then `StringNoCase` implements not only `EQUAL`, but also `Map.OrderedType`
    and `Set.OrderedType` from the OCaml library, so it can also be used as an argument
    to `Map.Make` and `Set.Make`. If we had specified `EQUAL`, then we would have
    precluded those uses.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 那么`StringNoCase`不仅实现了`EQUAL`，还实现了OCaml库中的`Map.OrderedType`和`Set.OrderedType`，因此它也可以作为`Map.Make`和`Set.Make`的参数使用。如果我们指定了`EQUAL`，那么我们将排除这些用途。
- en: 'We can always restrict it if we like:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们愿意，我们总是可以加以限制：
- en: '[PRE18]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The modules `StringNoCaseEq` and `StringNoCase` have the same implementation,
    but their signatures are different. This is very much like a type upcast in Java.
    It is an *upcast* because it is going from a more specific specification (fewer
    instances) to a more general specification (more instances), which means it can
    be used as the argument to fewer functors. This inverse relationship is known
    as *contravariance*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 模块`StringNoCaseEq`和`StringNoCase`具有相同的实现，但它们的签名不同。这非常类似于Java中的类型上转型。它是一个*上转型*，因为它从更具体的规范（更少的实例）转向更一般的规范（更多的实例），这意味着它可以作为较少functor的参数。这种反向关系称为*逆变*。
- en: '...with type...'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: …带有类型…
- en: For clarity, we may wish to define the result signature of a functor independently
    from the signature of the functor itself. So instead of the definition of `SETFUNCTOR`
    as given above, we may wish to write something like
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，我们可能希望独立于functor本身的签名定义functor的结果签名。因此，与上述`SETFUNCTOR`的定义相反，我们可能希望编写类似于以下内容的内容
- en: '[PRE19]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The difficulty here is that we need a way to equate the type `elt` of `SET`
    with `Equal.t`. We could do that in the previous definition of `SETFUNCTOR` by
    writing `type elt = Equal.t` in the body, but here there is no parameter module
    `Equal` around when we define `SET`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的困难在于我们需要一种方法将`SET`的类型`elt`与`Equal.t`相等。我们可以在先前的`SETFUNCTOR`定义中通过在主体中编写`type
    elt = Equal.t`来实现，但是在这里当我们定义`SET`时，周围没有参数模块`Equal`。
- en: To handle this, OCaml allows you to write
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这个问题，OCaml允许您写
- en: '[PRE20]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now it can link up the two types:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它可以链接起这两种类型：
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
