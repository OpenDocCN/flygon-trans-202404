- en: 'Chapter 7: Computation of Derivatives from their Definition'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We discuss ways to compute derivatives on a spreadsheet, with emphasis on repeating
    the symmetric approximation with exponentially decreasing d and extrapolating
    the results.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Topics
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '7.1  [Introduction: the Obvious Approximation: f''(x) ~ (f(x+d) - f(x))/d](section01.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 7.2  [Round off Errors and the Derivative](section02.html)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '7.3  [The Symmetric Approximation: f''(x) ~ (f(x+d) - f(x-d)/(2d)](section03.html)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 7.4  [Extrapolating the Sequence of Answers](section04.html)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '7.1 Introduction: the Obvious Approximation: f ''(x) ~ (f(x+d) - f(x)) / d'
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose we have a given function, f, and we seek its **derivative at argument
    x[0]**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: One way to estimate it is to evaluate f at two points, x[1] and x[2],�and examine
    the slope of the line from (x[1], f(x[1])) to (x[2], f(x[2])). But what should
    we use for x[1] and x[2] and what will we learn about f '(x[0])?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The choice that first occurs to people is to set x[1] = x[0], and x[2] = x[0]
    + d for some very small d. So one can compute
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/793c3c78de3c67d36d482f95fb2f0dce.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: This is not a horrible thing to do, but it is not very good, as we shall see.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '**What''s wrong with it?**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Well, if d is too big, the linear approximation won't be accurate and if d is
    too small, the inaccuracy of your calculation tools may screw up your answer.
    And the transition from being too big to too small may be difficult to find.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 7.2 Round off Errors and the Derivative
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**How can d being too small cause problems?**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Usually computations on a calculator or computer or by hand are not performed
    to perfect accuracy. There are very small errors. Normally, these very small errors
    (called **round off errors**) can be ignored because the "noise" they represent
    in your evaluation is extremely small compared to the signal, which consists of
    the value of f itself. (A notable exception occurs when your answer is 0; then
    the machine's answer will be only the error it has created.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: In general, if you take two very similar numbers, like f(x[0] + d) and f(x[0])
    and take their difference, that difference will be very much smaller than either
    term and the information in the signal represented by the difference will therefore
    be much smaller than the signal represented by either, while the noise level usually
    remains about the same for the terms and the difference.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Taking the result of the subtraction and dividing by a very small d (which is
    the same as multiplying by a huge ![](../Images/84022c37d90e8ab197207e722f94b5d9.jpg)),
    amplifies the signal and noise together. The net result is that you get the expected
    answer plus a large amount of noise, and the smaller you make d, the larger that
    noise will be, and the more this effect will make your computation inaccurate.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: If you make d smaller than the accuracy of your machine's computation, your
    answer will typically be off by more than 1, or your program will accuse you of
    dividing by 0 when you divide by d.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The spreadsheet allows you to perform a very large number of calculations of
    this kind for a wide choice of d values with essentially *no more work than is
    involved in one such calculation.* This usually gives you the power to look for
    yourself and see where round off error is causing significant error.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: You will then be troubled by this effect only when the answer you are computing
    is too far from the correct answer for d values at which this effect becomes noticeable.
    In consequence we try to make use of techniques that will allow us to get accurate
    estimates for as large d values as possible.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '**How?**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Set up a computation using one d value on one line of the spreadsheet, then
    on the next line set d = the old ![](../Images/5bed3bab8b6a256cff949af84df0e88d.jpg),
    and copy the results downward as far as you like. You will get your computation
    repeated with d replaced by ![](../Images/5bed3bab8b6a256cff949af84df0e88d.jpg),
    then ![](../Images/44dd85ce3c3ae17d41407ba36afd592a.jpg) then ,..., until the
    resulting value is so small your machine won't recognize it as other than 0.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: If your estimate of the derivative were to home in on a value and stay there,
    that would probably be the derivative you seek. Alas this does not always happen.
    The estimates tend to home in then start to move away again, as the effects of
    round off error make themselves felt.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: (Fortunately modern computers keep greater accuracy in their computations than
    they display on the screen, so that you can tolerate some amount of loss of accuracy
    due to round-off error, without even noticing it.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: However there is something much better that generally does home in on a value
    that is recognizable as the derivative you seek, and it takes no more work! Instead
    of computing ![](../Images/daf9b480149ce21283a0b5714f358bf6.jpg) Try this yourself.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '7.3 The Symmetric Approximation: f ''(x) ~ (f(x+d) - f(x-d)) / (2d)'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Using this formula for the "d-approximation" to the derivative is much more
    efficient than using the naïve formula ![](../Images/605702ab33c4882de2ce9d693026161f.jpg)**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '**Why is it better?**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: The answer is that the "symmetric formula" is exactly right if f is a quadratic
    function, which means that the error made by it is proportional to d² or less
    as d decreases. The naïve formula is wrong for quadratics and makes an error that
    is proportional to d.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: How come?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose f is a quadratic: f(x) = ax² + bx + c.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Then we get
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: f(x + d) = a(x + d)² + b(x + d) + x
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: and
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/df6882577e1fe02ade4d1d452c2dc7a2.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: On the other hand, we get
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b70f5a1a7eaf73d94c5185fda3430619.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: This means that the symmetric approximation is exact for any value of d for
    any quadratic; no need to make d small; and this is not true for the asymmetric
    formula.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: In general, if our function being differentiated, f(x + d), can be expanded
    in a power series in d, the first error in our symmetric formula comes from cubic
    terms, and will be proportional to d².
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: The reason this happens is that the d² term in f(x + d) - f(x - d) cancels itself
    out, being the same in both terms. The same things happens for all even power
    terms, by the way; the errors in this approximation to the derivative all come
    from odd power terms in the power series expansion of f about x.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 发生这种情况的原因是 f(x + d) - f(x - d) 中的 d² 项会相互抵消，因为两项相同。顺便说一句，所有偶数次幂项也是如此；这个对于 x
    处 f 的幂级数展开的近似中的误差都来自于奇数次幂项。
- en: Thus, if we replace d by ![](../Images/5bed3bab8b6a256cff949af84df0e88d.jpg),
    the error in the symmetric approximation will decline by a factor of 4, while
    the asymmetric formula has error which declines only by a factor of 2 when we
    divide d by 2.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们用 ![](../Images/5bed3bab8b6a256cff949af84df0e88d.jpg) 替换 d，对称近似的误差将按
    4 倍减少，而当我们将 d 除以 2 时，非对称公式的误差仅按 2 倍减少。
- en: And so, the symmetric formula approaches the true answer for the derivative
    much faster than the naïve asymmetric one does, as we decrease d.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，随着 d 的减小，对于导数的对称公式比天真的非对称公式更快地接近真实答案。
- en: '**Now we ask: can we get even faster convergence?**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在我们问：我们能否获得更快的收敛速度？**'
- en: 7.4 Extrapolating the Sequence of Answers
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.4 推断答案序列
- en: '**Yes!** By extrapolating it!'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的！** 通过推断它！'
- en: Extrapolation is a procedure for anticipating where a sequence is going based
    on a few terms, and creating a new sequence that consists at each stage of your
    best guess at the answer given the information in the terms of the sequence so
    far.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 推断是一种根据少数项来预测序列的发展方向，并创建一个新序列，每个阶段都是根据迄今为止序列项中的信息给出的最佳猜测答案。
- en: A nifty trick for doing this which can eliminate terms in a sequence that decline
    by a fixed factor from term to term is as follows. Suppose, for example, we have
    a sequence and want to eliminate from it terms which decline by a factor of 4
    from term to term in the sequence.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个巧妙的技巧可以消除一个序列中按固定因子从项到项减少的项，方法如下。例如，假设我们有一个序列，并且想要从中消除按 4 倍从项到项减少的项。
- en: Then if you take 4 times any particular term in the sequence, and subtract the
    previous term, any contribution which goes down by a factor of 4 from term to
    term will cancel out between the two; of course you will get the right answer
    4-1 or 3 times.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果你取序列中的任意一项的 4 倍，然后减去前一项，任何按 4 倍从项到项减少的贡献将在两者之间抵消；当然，你将得到正确答案 4-1 或 3 倍。
- en: Thus in a sequence s[1], s[2],... in each of which there are error terms which
    decrease by a factor of 4, the new sequence whose j-th term is![](../Images/436ea69366291dd399a5dbdb7efda7bf.jpg)
    will kill off the error term that decreases by a factor of 4\. (In the general
    case in which the leading error term in ![](../Images/b851390a95f8a4616dcbc35cb2442b56.jpg)
    declines by a factor of k, the analogous formula is ![](../Images/9614099743c6a90f17bf1ad0cc98a29d.jpg)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在一个序列 s[1], s[2],... 中，每个序列中都有误差项按 4 倍减少，新序列，其第 j 项为![](../Images/436ea69366291dd399a5dbdb7efda7bf.jpg)，将消除按
    4 倍减少的误差项。（在一般情况下，![](../Images/b851390a95f8a4616dcbc35cb2442b56.jpg) 中的主导误差项按
    k 减少，类似的公式是 ![](../Images/9614099743c6a90f17bf1ad0cc98a29d.jpg)
- en: In our case, we can do the following. Compute the symmetric approximation to
    the derivative, and let d decrease by a factor of two from row to row. Then the
    leading error in the symmetric approximation will decrease by a factor of 4 from
    row to row. If we apply the extrapolation formula above to the quadratic approximation,
    we eliminate that leading term, and the leading term that is left will go down
    by a factor of 16 (coming from the d⁵ term in f(x + d)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们可以这样做。计算对导数的对称近似，并让 d 每行减少一半。然后，对称近似中的主导误差将每行减少 4 倍。如果我们将上述的二次近似应用于推断公式，我们将消除那个主导项，并且剩下的主导项将减少
    16 倍（来自 f(x + d) 中的 d⁵ 项）。
- en: '**Is that the best we can do?**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是我们能做到的最好的吗？**'
- en: '**No!** We can use the k = 16 extrapolation formula to replace 16 here by 64,
    and then use the k = 64 extrapolation to do even better.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**不！** 我们可以使用 k = 16 的推断公式将这里的 16 替换为 64，然后使用 k = 64 的推断来做得更好。'
- en: A nice feature of this is that every step, from forming the symmetric approximation
    to producing the extrapolations indicated, is very easy to do on a spreadsheet,
    and need only be done in one row, and copied down into subsequent rows.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法的一个很好的特点是，每一步，从形成对称近似到产生所示的推断，都非常容易在电子表格上完成，并且只需要在一行中完成，然后复制到后续行中。
- en: Another nice feature is that if you set this up sensibly, you can change the
    argument at which you are differentiating by changing only one entry in the spreadsheet.
    You can change the function being differentiated by entering the new function
    exactly once, and copying it appropriately. Everything else including extrapolations
    need be performed only once and it will work for almost all standard functions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个好处是，如果你合理设置了这个，你可以通过只更改电子表格中的一个条目来改变微分的参数。你可以只输入新函数一次，并适当复制它来改变被微分的函数。其余所有事情，包括外推，只需要执行一次，几乎适用于所有标准函数。
- en: '**Exercises:**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**'
- en: '**7.1 Set up a a spreadsheet differentiator as described in the discussion
    above, that uses the symmetric form of difference with two levels of� extrapolation.**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**7.1 按照上面的讨论描述设置一个电子表格的微分器，使用两级外推的对称差分形式。**'
- en: '**7.2 What value of** **d do you need to get the computation as accurate as
    your machine will show in doing the derivative of (sin x)² at x = 2?**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**7.2 在对 (sin x)² 在 x = 2 处进行求导时，你需要设置什么值的 d 才能使计算达到你的计算机所能显示的精度？**'
- en: '**7.3 Make a spreadsheet that keeps** **d fixed (at say .001) and allows x
    to vary. Use it to plot both f and f '' vs x for f = sin x in the range -3.5 to
    3.5, using the xy chart feature of the spreadsheet.**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**7.3 制作一个电子表格，保持 d 不变（比如设为 .001），并允许 x 变化。使用电子表格的 xy 图表功能，在范围为 -3.5 到 3.5
    的区间内为 f 和 f'' 绘制图表，其中 f = sin x。**'
- en: '**7.4 Can you find a function for which this method fails? What and where?
    Can you fix it?**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**7.4 你能找到一个此方法失效的函数吗？是什么函数？在哪里？你能修复它吗？**'
