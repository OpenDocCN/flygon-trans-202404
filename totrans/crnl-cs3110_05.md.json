["```\nlet f x = e1 in e2\n\n```", "```\nlet x = 2\nand y = 3\nin x + y\n\n```", "```\nlet rec even x = x = 0 || odd (x-1)\n    and odd x = not (x = 0 || not (even (x-1)))\nin\n  odd 3110\n\n```", "```\n# String.length \"hi\";;\n*- : int = 2*\n# open String;;\n# length \"bye\";;\n*- : int = 3*\n\n```", "```\nlet plus (x, y) = x + y\n\n```", "```\nlet plus (z : int * int) = match z with (x, y) -> x + y\n\n```", "```\nlet plus = fun (z : int * int) -> match z with (x, y) -> x + y\n\n```", "```\nplus (2, 3)\n= (fun (z : int * int) -> match z with (x, y) -> x + y) (2, 3)\n= match (2, 3) with (x, y) -> x + y \n= 2 + 3\n= 5\n\n```", "```\nlet plus x y = x + y\n\n```", "```\nlet plus (x : int) (y : int) : int = x + y\n\n```", "```\nplus 2 3 = 2 + 3 = 5\n\n```", "```\nlet plus = function (x : int) -> function (y : int) -> x + y\n\n```", "```\nplus 2 3\n= ((function (x : int) -> function (y : int) -> x + y) 2) 3\n= (function (y : int) -> 2 + y) 3\n= 2 + 3\n= 5\n\n```", "```\n# (+);;\n- : int -> int -> int = <fun>\n# (+) 2 3;;\n- : int = 5\n# let next = (+) 1;;\nval next : int -> int = <fun>\n# next 7;;\n- : int = 8;\n\n```", "```\nmatch lst with\n    [] -> 0\n  | [x] -> 1\n  | _ -> 2\n\n```", "```\n(* Returns the length of lst *)\nlet rec length (lst : string list) : int =\n  match lst with\n    [] -> 0\n  | h :: t -> 1 + length t\n\n```", "```\n(* nth lst n returns the nth element of lst. *)\nlet rec nth (lst : string list) (n : int) : string =\n  match lst with\n    h :: t -> if n = 0 then h else nth t (n - 1)\n  | [] -> raise Not_found\n\n```"]