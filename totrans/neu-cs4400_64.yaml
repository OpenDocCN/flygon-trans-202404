- en: Implementing Objects with StateTuesday, February 28th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用状态实现对象
- en: 'We have already seen how several pieces of information can be encapsulate in
    a Racket closure that keeps them all; now we can do a little more — we can actually
    have mutable state, which leads to a natural way to implement objects. For example:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何将多个信息封装在一个 Racket 闭包中并保留它们所有；现在我们可以做更多 —— 我们实际上可以拥有可变状态，这导致了一种实现对象的自然方式。例如：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'implements a constructor for `point` objects which keep two values and can
    move one of them. Note that the messages act as a form of methods, and that the
    values themselves are hidden and are accessible only through the interface that
    these messages make. For example, if these points correspond to some graphic object
    on the screen, we can easily incorporate a necessary screen update:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了一个构造函数用于创建 `point` 对象，这些对象保持两个值并可以移动其中一个。请注意，这些消息充当一种方法形式，并且值本身是隐藏的，只能通过这些消息生成的接口访问。例如，如果这些点对应于屏幕上的某个图形对象，我们可以轻松地合并必要的屏幕更新：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: and be sure that this is always done when the value changes — since there is
    no way to change the value except through this interface.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 并确保当值发生变化时始终执行此操作 —— 因为除了通过此接口外没有改变值的方法。
- en: 'A more complete example would define functions that actually send these messages
    — here is a better implementation of a point object and the corresponding accessors
    and mutators:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 更完整的示例将定义实际发送这些消息的函数 —— 这是一个更好的点对象实现以及相应的访问器和修改器的实现：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And a quick imitation of inheritance can be achieved using delegation to an
    instance of the super-class:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 快速模拟继承可以通过委托给超类的实例来实现：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can see how all of these could come from some preprocessing of a more normal-looking
    class definition form, like:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到所有这些都可以来自更常见的类定义形式的某种预处理，例如：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
