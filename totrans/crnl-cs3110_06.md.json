["```\nlet double (x : int) : int = 2 * x\nlet square (x : int) : int = x * x\n\n```", "```\nlet quad (x : int) : int = double (double x)\n\n```", "```\nlet fourth (x : int) : int = square (square x)\n\n```", "```\nlet twice ((f : int -> int), (x : int)) : int = f (f x)\n\n```", "```\nlet quad (x : int) : int = twice (double, x)\nlet fourth (x : int) : int = twice (square, x)\n\n```", "```\nlet fourth (x : int) : int =\n  let square (y : int) : int = y * y in\n    twice (square, x)\n\n```", "```\nlet fourth = fun x ->\n  let square = fun y -> y * y in\n    twice (square, x)\n\n```", "```\n fourth 3\n   --> (fun x -> let square = fun y -> y * y in twice (square, x)) 3\n   --> let square = fun y -> y * y in twice (square, 3)\n   --> twice (fun y -> y * y, 3)\n   --> (fun y -> y * y) ((fun y -> y * y) 3)\n   --> (fun y -> y * y) (3 * 3)\n   --> (fun y -> y * y) 9\n   --> 9 * 9\n   --> 81\n\n```", "```\nlet fourth (x : int) : int = twice (fun (y : int) -> y * y, x)\n\n```", "```\nlet square : int -> int = fun (y : int) -> y * y\n\n```", "```\nlet square (y : int) : int = y * y\n\n```", "```\nlet twice (f : int -> int) =\n  fun (x : int) -> f (f x)\n\n```", "```\nlet fourth = twice (fun (x : int) -> x * x)\nlet quad = twice (fun (x : int) -> 2 * x)\n\n```", "```\nlet twice (f : int -> int) (x : int) : int = f (f x)\n\n```", "```\nlet compose ((f, g) : (int -> int) * (int -> int)) (x : int) : int =\n  f (g x)\n\n```", "```\nlet rec ntimes ((f, n) : (int -> int) * int) =\n  if n = 0\n  then (fun (x : int) -> x)\n  else compose (f, ntimes (f, n - 1))\n\n```", "```\nlet x = 3 in\n  let () = print_string (\"Value of x is \" ^ (string_of_int x)) in\n  x + 1\n\n```", "```\nlet x = 3 in\n  (print_string (\"Value of x is \" ^ (string_of_int x));\n   x + 1)\n\n```", "```\nexception Error\n\n```", "```\nlet sqrt1 (x : float) : float =\n  if x < 0 then raise Error\n  else sqrt x\n\n```", "```\nexception Failure of string\n\n```", "```\nraise (Failure \"Some error message\")\n\n```"]