["```\n# lab 9.XOR\nimport tensorflow as tf\nimport numpy as np\n\ntf.set_random_seed(777)  # for reproducibility\nlearning_rate = 0.1\n\nx_data = [[0, 0],\n          [0, 1],\n          [1, 0],\n          [1, 1]]\ny_data = [[0],\n          [1],\n          [1],\n          [0]]\nx_data = np.array(x_data, dtype=np.float32)\ny_data = np.array(y_data, dtype=np.float32)\n\nX = tf.placeholder(tf.float32, [None, 2])\nY = tf.placeholder(tf.float32, [None, 1])\n\nW = tf.Variable(tf.random_normal([2, 1]), name='weight')\nb = tf.Variable(tf.random_normal([1]), name='bias')\n\n# Hypothesis using sigmoid: tf.div(1., 1\\. + tf.exp(tf.matmul(X, W)))\nhypothesis = tf.sigmoid(tf.matmul(X, W) + b)\n\n# cost/loss function\ncost = -tf.reduce_mean(Y * tf.log(hypothesis) + (1 - Y) *\n                       tf.log(1 - hypothesis))\n\ntrain = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(cost)\n\n# Accuracy computation\n# True if hypothesis>0.5 else False\npredicted = tf.cast(hypothesis > 0.5, dtype=tf.float32)\naccuracy = tf.reduce_mean(tf.cast(tf.equal(predicted, Y), dtype=tf.float32))\n\n# Launch graph\nwith tf.Session() as sess:\n    # Initialize TensorFlow variables\n    sess.run(tf.global_variables_initializer())\n\n    for step in range(10001):\n        sess.run(train, feed_dict={X: x_data, Y: y_data})\n        if step % 100 == 0:\n            print(step, sess.run(cost, feed_dict={\n                  X: x_data, Y: y_data}), sess.run(W))\n\n    # Accuracy report\n    h, c, a = sess.run([hypothesis, predicted, accuracy],\n                       feed_dict={X: x_data, Y: y_data})\n    print(\"\\nHypothesis: \", h, \"\\nCorrect: \", c, \"\\nAccuracy: \", a)\n\n'''\nHypothesis:  [[ 0.5]\n [ 0.5]\n [ 0.5]\n [ 0.5]]\nCorrect:  [[ 0.]\n [ 0.]\n [ 0.]\n [ 0.]]\nAccuracy:  0.5\n''' \n```"]