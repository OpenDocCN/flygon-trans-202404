["```\n  import java.awt.image.BufferedImage\n\n  val img = BufferedImage(width, height, BufferedImage.TYPE_INT_RGB)\n\n```", "```\n  import javax.imageio.ImageIO\n\n  val photo1 = ImageIO.read(java.io.File(\"photo.jpg\"))\n\n```", "```\n  println(\"Photo size is ${photo1.width}, ${photo1.height}\")\n\n```", "```\n  ImageIO.write(photo1, \"jpg\", java.io.File(\"test.jpg\"))\n\n```", "```\n  ImageIO.write(photo1, \"png\", java.io.File(\"test.png\"))\n\n```", "```\nimport java.io.File\nimport javax.imageio.ImageIO\nimport java.awt.image.BufferedImage\n\nfun phototest(img: BufferedImage): BufferedImage {\n  // obtain width and height of image\n  val w = img.width\n  val h = img.height\n\n  // create new image of the same size\n  val out = BufferedImage(w, h, BufferedImage.TYPE_INT_RGB)\n\n  // copy pixels (mirror horizontally)\n  for (x in 0 until w)\n    for (y in 0 until h)\n      out.setRGB(x, y, img.getRGB(w - x - 1, y) and 0xffffff)\n\n  // draw red diagonal line\n  for (x in 0 until Math.min(h, w))\n    out.setRGB(x, x, 0xff0000)\n\n  return out\n}\n\nfun test() {\n  // read original image, and obtain width and height\n  val photo1 = ImageIO.read(File(\"photo.jpg\"))\n\n  val photo2 = phototest(photo1) \n\n  // save image to file \"test.jpg\"\n  ImageIO.write(photo2, \"jpg\", File(\"test.jpg\"))\n}\n\ntest()\n\n```", "```\n  tttt tttt rrrr rrrr gggg gggg bbbb bbbb\n\n```", "```\n  val color = (red * 65536) + (green * 256) + blue\n\n```", "```\n  val red = (color and 0xff0000) / 65536\n  val green = (color and 0xff00) / 256\n  val blue = (color and 0xff)\n\n```"]