- en: Defining Variables and Procedures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义变量和过程
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Imagine a language in which we cannot use names to refer to computational objects.
    As we write more and more complex programs, keeping track of the details of each
    step of computation would get increasingly difficult and inconvenient. Thus, we
    assign *values*, which are the computational object, to *variables*, identified
    by a name, by using `define`. This is Racket's simplest means of [abstraction](/textbook/intro-to-computer-science.html#sub1).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一种语言，我们无法使用名称来引用计算对象。随着我们编写越来越复杂的程序，跟踪每一步计算的细节将变得越来越困难和不便。因此，我们通过使用`define`将*值*（计算对象）分配给*变量*（通过名称标识）来实现[抽象](/textbook/intro-to-computer-science.html#sub1)。这是Racket最简单的抽象手段。
- en: Though you have seen various variable and procedure definitions scattered throughout
    the previous sections, we have not yet formally taught how to use `define`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你在前面的章节中看到了各种变量和过程定义，但我们还没有正式教过如何使用`define`。
- en: To start off, here are a few example expressions that use `define`. Try these
    out in the Racket interpreter to see what they do.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这里有几个使用`define`的示例表达式。在Racket解释器中尝试这些，看看它们的作用。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Defining Variables
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义变量
- en: 'The general form of a **variable definition** is as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量定义**的一般形式如下：'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `[name]` represents a **variable** to which **values** are assigned to.
    For example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`[name]`代表一个**变量**，其值被分配给。例如：'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`x` is a variable, and `5` is its value.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`x`是一个变量，`5`是它的值。'
- en: '`[value]` can be replaced with any type of value, even expressions. An important
    property of variable definitions is that **the value of the definition is completely
    evaluated before being assigned to its variable**.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`[value]`可以替换为任何类型的值，甚至是表达式。变量定义的一个重要特性是**在分配给变量之前，定义的值完全被评估**。'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Why is `x` not `(+ 5 5)`? Because when we define `x`, we must first evaluate
    the expression `(+ 5 5)` to its simplest form, `10`. We then assign `10` to `x`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么`x`不是`(+ 5 5)`？因为当我们定义`x`时，我们必须首先将表达式`(+ 5 5)`评估为其最简形式`10`。然后我们将`10`分配给`x`。
- en: '**Test Your Understanding**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: What happens when we call `(define x (/ 1 0))`?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用`(define x (/ 1 0))`时会发生什么？
- en: Defining Compound Procedures
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义复合过程
- en: '**Procedure definition** is an even more powerful abstraction technique than
    variable definition, in which we can give a name to a compound operation and consequently
    refer to it as a unit. Let''s start with a simple example by defining the `square`
    procedure:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**过程定义**是一种比变量定义更强大的抽象技术，我们可以给一个复合操作命名，因此可以将其作为一个单元引用。让我们从一个简单的例子开始，定义`square`过程：'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can understand this in the following way:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样理解：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The general form of a procedure definition is as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 过程定义的一般形式如下：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Notice how a significant difference this has from a variable definition is
    that the name and parameters are bound by parentheses. Recall that, besides quotes,
    **a set of parentheses represents a procedure call**. We can translate this by
    saying: When we call `[name]` with `[formal parameters]`, we will do `[body]`.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这与变量定义有一个显著的区别，即名称和参数由括号绑定。请记住，除了引号之外，**一组括号表示一个过程调用**。我们可以这样解释：当我们用`[name]`和`[formal
    parameters]`调用时，我们将执行`[body]`。
- en: '**Test Your Understanding**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: A compound procedure can have any non-negative number of formal parameters,
    even 0\. How do we correctly define a procedure named `foo` that takes in no arguments,
    and returns `5`?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 复合过程可以有任意非负数量的形式参数，甚至可以是0。我们如何正确定义一个名为`foo`的过程，它不接受任何参数，并返回`5`？
- en: An important property of procedure definitions is that **the body of the procedure
    is not evaluated until the procedure is called**. This means that when we define
    `square`, we do not yet know that we need to multiply `x` by itself. Only when
    we call `square` on some number, say `3`, do we know that we have to call `(*
    3 3)`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 过程定义的一个重要特性是**在调用过程之前不会评估过程的主体**。这意味着当我们定义`square`时，我们还不知道我们需要将`x`乘以自身。只有当我们对某个数字，比如`3`，调用`square`时，我们才知道我们必须调用`(*
    3 3)`。
- en: '**Test Your Understanding**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: What happens when we call `(define (x) (/ 1 0))`?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用`(define (x) (/ 1 0))`时会发生什么？
- en: Warning
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 警告
- en: 'One thing to pay attention to when creating compound procedures is naming.
    We need to be very careful when naming our procedures and formal parameters. Racket
    will not accept multiple definitions, which means that any procedure already defined
    cannot be used as the name of a compound procedure or a formal parameter. This
    is an example of a compound procedure definition that is NOT ALLOWED (try it in
    your interpreter to see why):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 创建复合过程时需要注意的一件事是命名。在命名我们的过程和形式参数时，我们需要非常小心。Racket不会接受多个定义，这意味着任何已经定义的过程不能用作复合过程或形式参数的名称。这是一个不允许的复合过程定义的示例（在您的解释器中尝试以查看原因）：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In both instances in the body, which `word` are we referring to, the parameter
    or the built-in procedure?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在主体中的两个实例中，我们指的是哪个`word`，是参数还是内置过程？
- en: Nesting Procedures
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌套过程
- en: 'Returning to the concept of nesting expressions, we can also nest procedures
    within other procedure definitions. As you did in Homework 0-1, we can define
    the procedure `sum-of-squares` by using the procedure `square` in its definition:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 回到嵌套表达式的概念，我们还可以在其他过程定义中嵌套过程。就像你在作业0-1中所做的那样，我们可以使用过程`square`来定义过程`sum-of-squares`：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This roughly translates to: When we call `sum-of-squares` on `x` and `y`, we
    will add the `square` of `x` to the `square` of `y`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 大致翻译为：当我们在`x`和`y`上调用`sum-of-squares`时，我们将`x`的`square`加到`y`的`square`上。
- en: A Summary
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: To clarify,
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清，
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is a variable definition.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个变量定义。
- en: '`foo` is the variable name.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`foo`是变量名。'
- en: '`10` is the value assigned to `foo`.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10`是分配给`foo`的值。'
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is a compound procedure definition.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个复合过程定义。
- en: '`square` is the procedure name.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`square`是过程名称。'
- en: '`x` is its only formal parameter.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`是它唯一的形式参数。'
- en: '`(* x x)` is its body.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(* x x)`是它的主体。'
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is an expression, and is also a procedure call.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个表达式，也是一个过程调用。
- en: '`square` is the procedure, and is the operator of this expression.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`square`是过程，是这个表达式的运算符。'
- en: '`3` is the argument to `square`, and is the operand of this expression.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3`是`square`的参数，并且是这个表达式的操作数。'
- en: '`9` is the return value.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`9`是返回值。'
- en: Takeaways
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: We learned that we can use `define` as a means of abstraction
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们学会了可以使用`define`作为抽象的手段。
- en: We also learned how to define variables and compound procedures
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还学会了如何定义变量和复合过程。
- en: The possibility of associating values and operations to symbols and later retrieving
    them means that the Racket interpreter must have some form of memory to keep track
    of these associative pairs. We call this memory the *environment*, which we will
    expand more on in Lesson 8.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 关联值和操作到符号并稍后检索它们的可能性意味着Racket解释器必须具有某种形式的记忆来跟踪这些关联对。我们称这个记忆为*环境*，我们将在第8课中详细展开。
