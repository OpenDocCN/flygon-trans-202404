- en: HOFs - Procedures as Returned Values
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HOFs - 作为返回值的过程
- en: We've seen how to write a procedure that takes another procedure as an argument.
    It turns out we can do the opposite as well - we can create a procedure that *returns*
    a procedure! Returning procedures is a great way to abstract even further. Instead
    of creating the procedure directly, we can have a program that creates the procedure
    for us! Depending on what arguments we give the program, it can create many different
    procedures.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何编写一个接受另一个过程作为参数的过程。事实证明，我们也可以做相反的事情 - 我们可以创建一个*返回*过程的过程！返回过程是进一步抽象的好方法。我们可以让程序为我们创建过程，而不是直接创建过程！根据我们给程序的参数，它可以创建许多不同的过程。
- en: 'Example: `make-power`'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子：`make-power`
- en: (We're not actually making power. That'd be powerplaying ;).)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: （我们实际上并没有制造幂。那将是滥用权力；)。）
- en: 'Let''s say we want to define a procedure `sum-powers` that takes the `n`th
    power of everything number between `a` and `b` and sums them together. We already
    have our `procedure`, reproduced below:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要定义一个过程`sum-powers`，它将计算`a`和`b`之间每个数字的第`n`次幂并将它们相加。我们已经有我们的`procedure`，如下所示：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'From what we learned so far, it''d look something like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们迄今所学到的，它看起来像这样：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'But what if we create a new function called `make-power`, that, given a power
    `n`, returns a *function* that takes a number `x` and returns its `n`th power?
    It looks like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们创建一个名为`make-power`的新函数，该函数根据给定的幂`n`返回一个*函数*，该函数接受一个数字`x`并返回其第`n`次幂？它看起来像这样：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As we noted earlier, lambdas return functions. This means that if we define
    the call to `make-power` as a lambda, it will return a function! We can now do
    this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前指出的，lambda函数返回函数。这意味着如果我们将对`make-power`的调用定义为lambda函数，它将返回一个函数！现在我们可以这样做：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And we can rewrite our sum-powers function like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以这样重写我们的sum-powers函数：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Note also how much we''ve progressed in abstraction. At the beginning of this
    lab, we defined a different procedure for each different type of sum: `sum-doubles`,
    `sum-squares`, and `sum-cubes`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们在抽象方面取得了多大进步。在这个实验室的开始，我们为每种不同类型的求和定义了不同的过程：`sum-doubles`，`sum-squares`和`sum-cubes`。
- en: But now, we have abstracted the summation itself, so that we can express any
    summation in a single clear line.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在，我们已经将求和本身抽象化，这样我们可以用一行清晰地表达任何求和。
