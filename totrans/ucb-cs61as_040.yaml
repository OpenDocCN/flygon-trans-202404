- en: HOFs - Procedures as Returned Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how to write a procedure that takes another procedure as an argument.
    It turns out we can do the opposite as well - we can create a procedure that *returns*
    a procedure! Returning procedures is a great way to abstract even further. Instead
    of creating the procedure directly, we can have a program that creates the procedure
    for us! Depending on what arguments we give the program, it can create many different
    procedures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: `make-power`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (We're not actually making power. That'd be powerplaying ;).)
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we want to define a procedure `sum-powers` that takes the `n`th
    power of everything number between `a` and `b` and sums them together. We already
    have our `procedure`, reproduced below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'From what we learned so far, it''d look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'But what if we create a new function called `make-power`, that, given a power
    `n`, returns a *function* that takes a number `x` and returns its `n`th power?
    It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As we noted earlier, lambdas return functions. This means that if we define
    the call to `make-power` as a lambda, it will return a function! We can now do
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And we can rewrite our sum-powers function like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Note also how much we''ve progressed in abstraction. At the beginning of this
    lab, we defined a different procedure for each different type of sum: `sum-doubles`,
    `sum-squares`, and `sum-cubes`.'
  prefs: []
  type: TYPE_NORMAL
- en: But now, we have abstracted the summation itself, so that we can express any
    summation in a single clear line.
  prefs: []
  type: TYPE_NORMAL
