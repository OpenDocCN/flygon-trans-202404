["```\nlet x = 1\nlet y = 2\nx + y;; \n```", "```\nopen System\nDateTime.Now.ToString(\"yyyy-MM-dd hh:mm\")  // \"2014-04-18 01:08\"\nDateTime.Now.ToString(\"yyyy-MM-dd HH:mm\")  // \"2014-04-18 13:09\" \n```", "```\n// TIP: sets the current directory to be same as the script directory\nSystem.IO.Directory.SetCurrentDirectory (__SOURCE_DIRECTORY__)\n\nopen System\n\n[<CLIMutable>] \ntype DateSerTest = {Local:DateTime;Utc:DateTime}\n\nlet ser = new System.Xml.Serialization.XmlSerializer(typeof<DateSerTest>)\n\nlet testSerialization (dt:DateSerTest) = \n    let filename = \"serialization.xml\"\n    use fs = new IO.FileStream(filename , IO.FileMode.Create)\n    ser.Serialize(fs, o=dt)\n    fs.Close()\n    IO.File.ReadAllText(filename) |> printfn \"%s\"\n\nlet d = { \n    Local = DateTime.SpecifyKind(new DateTime(2014,7,4), DateTimeKind.Local)\n    Utc = DateTime.SpecifyKind(new DateTime(2014,7,4), DateTimeKind.Utc)\n    }\n\ntestSerialization d \n```", "```\n<DateSerTest  >\n  <Local>2014-07-04T00:00:00+01:00</Local>\n  <Utc>2014-07-04T00:00:00Z</Utc>\n</DateSerTest> \n```", "```\nEnvironment.GetEnvironmentVariable \"ProgramFiles\" = \n    Environment.GetEnvironmentVariable \"PROGRAMFILES\"\n// answer => true \n```", "```\n // set the current directory to be same as the script directory\nSystem.IO.Directory.SetCurrentDirectory (__SOURCE_DIRECTORY__)\n\n// pass in the relative path to the DLL\n#r @\"bin\\debug\\myapp.dll\"\n\n// open the namespace\nopen MyApp\n\n// do something\nMyApp.DoSomething() \n```", "```\n// sets the current directory to be same as the script directory\nSystem.IO.Directory.SetCurrentDirectory (__SOURCE_DIRECTORY__)\n\n// assumes nuget install Microsoft.AspNet.WebApi.OwinSelfHost has been run \n// so that assemblies are available under the current directory\n#r @\"Packages\\Owin\\lib\\net40\\Owin.dll\"\n#r @\"Packages\\Microsoft.Owin\\lib\\net40\\Microsoft.Owin.dll\"\n#r @\"Packages\\Microsoft.Owin.Host.HttpListener\\lib\\net40\\Microsoft.Owin.Host.HttpListener.dll\"\n#r @\"Packages\\Microsoft.Owin.Hosting\\lib\\net40\\Microsoft.Owin.Hosting.dll\"\n#r @\"Packages\\Microsoft.AspNet.WebApi.Owin\\lib\\net45\\System.Web.Http.Owin.dll\"\n#r @\"Packages\\Microsoft.AspNet.WebApi.Core\\lib\\net45\\System.Web.Http.dll\"\n#r @\"Packages\\Microsoft.AspNet.WebApi.Client\\lib\\net45\\System.Net.Http.Formatting.dll\"\n#r @\"Packages\\Newtonsoft.Json\\lib\\net40\\Newtonsoft.Json.dll\"\n#r \"System.Net.Http.dll\"\n\nopen System\nopen Owin \nopen Microsoft.Owin\nopen System.Web.Http \nopen System.Web.Http.Dispatcher\nopen System.Net.Http.Formatting\n\nmodule OwinSelfhostSample =\n\n    /// a record to return\n    [<CLIMutable>]\n    type Greeting = { Text : string }\n\n    /// A simple Controller\n    type GreetingController() =\n        inherit ApiController()\n\n        // GET api/greeting\n        member this.Get()  =\n            {Text=\"Hello!\"}\n\n    /// Another Controller that parses URIs\n    type ValuesController() =\n        inherit ApiController()\n\n        // GET api/values \n        member this.Get()  =\n            [\"value1\";\"value2\"]\n\n        // GET api/values/5 \n        member this.Get id = \n            sprintf \"id is %i\" id \n\n        // POST api/values \n        member this.Post ([<FromBody>]value:string) = \n            ()\n\n        // PUT api/values/5 \n        member this.Put(id:int, [<FromBody>]value:string) =\n            ()\n\n        // DELETE api/values/5 \n        member this.Delete(id:int) =\n            () \n\n    /// A helper class to store routes, etc.\n    type ApiRoute = { id : RouteParameter }\n\n    /// IMPORTANT: When running interactively, the controllers will not be found with error:\n    /// \"No type was found that matches the controller named 'XXX'.\"\n    /// The fix is to override the ControllerResolver to use the current assembly\n    type ControllerResolver() =\n        inherit DefaultHttpControllerTypeResolver()\n\n        override this.GetControllerTypes (assembliesResolver:IAssembliesResolver) = \n            let t = typeof<System.Web.Http.Controllers.IHttpController>\n            System.Reflection.Assembly.GetExecutingAssembly().GetTypes()\n            |> Array.filter t.IsAssignableFrom\n            :> Collections.Generic.ICollection<Type>    \n\n    /// A class to manage the configuration\n    type MyHttpConfiguration() as this =\n        inherit HttpConfiguration()\n\n        let configureRoutes() = \n            this.Routes.MapHttpRoute(\n                name= \"DefaultApi\",\n                routeTemplate= \"api/{controller}/{id}\",\n                defaults= { id = RouteParameter.Optional }\n                ) |> ignore\n\n        let configureJsonSerialization() = \n            let jsonSettings = this.Formatters.JsonFormatter.SerializerSettings\n            jsonSettings.Formatting <- Newtonsoft.Json.Formatting.Indented\n            jsonSettings.ContractResolver <- \n                Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver()\n\n        // Here is where the controllers are resolved\n        let configureServices() = \n            this.Services.Replace(\n                typeof<IHttpControllerTypeResolver>, \n                new ControllerResolver())\n\n        do configureRoutes()\n        do configureJsonSerialization()\n        do configureServices()\n\n    /// Create a startup class using the configuration \n    type Startup() = \n\n        // This code configures Web API. The Startup class is specified as a type\n        // parameter in the WebApp.Start method.\n        member this.Configuration (appBuilder:IAppBuilder) = \n            // Configure Web API for self-host. \n            let config = new MyHttpConfiguration() \n            appBuilder.UseWebApi(config) |> ignore\n\n// Start OWIN host \ndo \n    // Create server\n    let baseAddress = \"http://localhost:9000/\" \n    use app = Microsoft.Owin.Hosting.WebApp.Start<OwinSelfhostSample.Startup>(url=baseAddress) \n\n    // Create client and make some requests to the api\n    use client = new System.Net.Http.HttpClient() \n\n    let showResponse query = \n        let response = client.GetAsync(baseAddress + query).Result \n        Console.WriteLine(response) \n        Console.WriteLine(response.Content.ReadAsStringAsync().Result) \n\n    showResponse \"api/greeting\"\n    showResponse \"api/values\"\n    showResponse \"api/values/42\"\n\n    // for standalone scripts, pause so that you can test via your browser as well\n    Console.ReadLine() |> ignore \n```", "```\nStatusCode: 200, ReasonPhrase: 'OK', Version: 1.1, Content: System.Net.Http.StreamContent, Headers:\n{\n  Date: Fri, 18 Apr 2014 22:29:04 GMT\n  Server: Microsoft-HTTPAPI/2.0\n  Content-Length: 24\n  Content-Type: application/json; charset=utf-8\n}\n{\n  \"text\": \"Hello!\"\n}\nStatusCode: 200, ReasonPhrase: 'OK', Version: 1.1, Content: System.Net.Http.StreamContent, Headers:\n{\n  Date: Fri, 18 Apr 2014 22:29:04 GMT\n  Server: Microsoft-HTTPAPI/2.0\n  Content-Length: 29\n  Content-Type: application/json; charset=utf-8\n}\n[\n  \"value1\",\n  \"value2\"\n]\nStatusCode: 200, ReasonPhrase: 'OK', Version: 1.1, Content: System.Net.Http.StreamContent, Headers:\n{\n  Date: Fri, 18 Apr 2014 22:29:04 GMT\n  Server: Microsoft-HTTPAPI/2.0\n  Content-Length: 10\n  Content-Type: application/json; charset=utf-8\n}\n\"id is 42\" \n```", "```\nopen System.Windows.Forms \nopen System.Drawing\n\nlet form = new Form(Width= 400, Height = 300, Visible = true, Text = \"Hello World\") \nform.TopMost <- true\nform.Click.Add (fun _ -> \n    form.Text <- sprintf \"form clicked at %i\" DateTime.Now.Ticks)\nform.Show() \n```", "```\nlet panel = new FlowLayoutPanel()\nform.Controls.Add(panel)\npanel.Dock = DockStyle.Fill \npanel.WrapContents <- false \n\nlet greenButton = new Button()\ngreenButton.Text <- \"Make the background color green\" \ngreenButton.Click.Add (fun _-> form.BackColor <- Color.LightGreen)\npanel.Controls.Add(greenButton) \n```", "```\ngreenButton.AutoSize <- true \n```", "```\nlet yellowButton = new Button()\nyellowButton.Text <- \"Make me yellow\" \nyellowButton.AutoSize <- true\nyellowButton.Click.Add (fun _-> form.BackColor <- Color.Yellow)\npanel.Controls.Add(yellowButton) \n```", "```\npanel.FlowDirection <- FlowDirection.TopDown \n```", "```\nyellowButton.Dock <- DockStyle.Fill \n```", "```\n// Include Fake lib\n// Assumes NuGet has been used to fetch the FAKE libraries\n#r \"packages/FAKE/tools/FakeLib.dll\"\nopen Fake\n\n// Properties\nlet buildDir = \"./build/\"\n\n// Targets\nTarget \"Clean\" (fun _ ->\n    CleanDir buildDir\n)\n\nTarget \"Default\" (fun _ ->\n    trace \"Hello World from FAKE\"\n)\n\n// Dependencies\n\"Clean\"\n  ==> \"Default\"\n\n// start build\nRunTargetOrDefault \"Default\" \n```", "```\n// Requires FSharp.Data under script directory \n//    nuget install FSharp.Data -o Packages -ExcludeVersion \n#r @\"Packages\\FSharp.Data\\lib\\net40\\FSharp.Data.dll\"\nopen FSharp.Data\n\nlet queryServer uri queryParams = \n    try\n        let response = Http.Request(uri, query=queryParams, silentHttpErrors = true)\n        Some response \n    with\n    | :? System.Net.WebException as ex -> None\n\nlet sendAlert uri message = \n    // send alert via email, say\n    printfn \"Error for %s. Message=%O\" uri message\n\nlet checkServer (uri,queryParams) = \n    match queryServer uri queryParams with\n    | Some response -> \n        printfn \"Response for %s is %O\" uri response.StatusCode \n        if (response.StatusCode <> 200) then\n            sendAlert uri response.StatusCode \n    | None -> \n        sendAlert uri \"No response\"\n\n// test the sites \nlet google = \"http://google.com\", [\"q\",\"fsharp\"]\nlet bad = \"http://example.bad\", []\n\n[google;bad]\n|> List.iter checkServer \n```", "```\nResponse for http://google.com is 200\nError for http://example.bad. Message=No response \n```", "```\n// sets the current directory to be same as the script directory\nSystem.IO.Directory.SetCurrentDirectory (__SOURCE_DIRECTORY__)\n\n// Requires FSharp.Data under script directory \n//    nuget install FSharp.Data -o Packages -ExcludeVersion \n#r @\"Packages\\FSharp.Data\\lib\\net40\\FSharp.Data.dll\"\n#r \"System.Xml.Linq.dll\"\nopen FSharp.Data\n\ntype Rss = XmlProvider<\"http://stackoverflow.com/feeds/tag/f%23\">\n\n// prepare a string for writing to CSV \nlet prepareStr obj =\n    obj.ToString()\n     .Replace(\"\\\"\",\"\\\"\\\"\") // replace single with double quotes\n     |> sprintf \"\\\"%s\\\"\"   // surround with quotes\n\n// convert a list of strings to a CSV\nlet listToCsv list =\n    let combine s1 s2 = s1 + \",\" + s2\n    list \n    |> Seq.map prepareStr \n    |> Seq.reduce combine \n\n// extract fields from Entry\nlet extractFields (entry:Rss.Entry) = \n    [entry.Title.Value; \n     entry.Author.Name; \n     entry.Published.ToShortDateString()]\n\n// write the lines to a file\ndo \n    use writer = new System.IO.StreamWriter(\"fsharp-questions.csv\")\n    let feed = Rss.GetSample()\n    feed.Entries\n    |> Seq.map (extractFields >> listToCsv)\n    |> Seq.iter writer.WriteLine\n    // writer will be closed automatically at the end of this scope \n```", "```\n\"Optimising F# answer for Euler #4\",\"DropTheTable\",\"18/04/2014\"\n\"How to execute a function, that creates a lot of objects, in parallel?\",\"Lawrence Woodman\",\"01/04/2014\"\n\"How to invoke a user defined function using R Type Provider\",\"Dave\",\"19/04/2014\"\n\"Two types that use themselves\",\"trn\",\"19/04/2014\"\n\"How does function [x] -> ... work\",\"egerhard\",\"19/04/2014\" \n```", "```\n// sets the current directory to be same as the script directory\nSystem.IO.Directory.SetCurrentDirectory (__SOURCE_DIRECTORY__)\n\n// Requires FSharp.Management under script directory \n//    nuget install FSharp.Management -o Packages -ExcludeVersion \n#r @\"System.Management.dll\"\n#r @\"Packages\\FSharp.Management\\lib\\net40\\FSharp.Management.dll\"\n#r @\"Packages\\FSharp.Management\\lib\\net40\\FSharp.Management.WMI.dll\"\n\nopen FSharp.Management\n\n// get data for the local machine\ntype Local = WmiProvider<\"localhost\">\nlet data = Local.GetDataContext()\n\n// get the time and timezone on the machine\nlet time = data.Win32_UTCTime |> Seq.head\nlet tz = data.Win32_TimeZone |> Seq.head\nprintfn \"Time=%O-%O-%O %O:%O:%O\" time.Year time.Month time.Day time.Hour time.Minute time.Second \nprintfn \"Timezone=%O\" tz.StandardName \n\n// find the \"explorer\" process\nlet explorerProc = \n    data.Win32_PerfFormattedData_PerfProc_Process\n    |> Seq.find (fun proc -> proc.Name.Contains(\"explorer\") )\n\n// get stats about it\nprintfn \"ElapsedTime=%O\" explorerProc.ElapsedTime\nprintfn \"ThreadCount=%O\" explorerProc.ThreadCount\nprintfn \"HandleCount=%O\" explorerProc.HandleCount\nprintfn \"WorkingSetPeak=%O\" explorerProc.WorkingSetPeak\nprintfn \"PageFileBytesPeak=%O\" explorerProc.PageFileBytesPeak \n```", "```\nTime=2014-4-20 14:2:35\nTimezone=GMT Standard Time\nElapsedTime=2761906\nThreadCount=67\nHandleCount=3700\nWorkingSetPeak=168607744\nPageFileBytesPeak=312565760 \n```", "```\nUploadBlob \"testcontainer\" \"testblob\" \"This is a test\" |> ignore \n```", "```\nAddMessage \"testqueue\" \"This is a test message\" |> ignore\n\nlet result = GetMessages \"testqueue\" 20 5\nfor m in result do\n    DeleteMessage \"testqueue\" m \n```", "```\n[<TestFixture>]\ntype TestClass() = \n\n    [<Test>]\n    member this.When2IsAddedTo2Expect4() = \n        Assert.AreEqual(4, 2+2) \n```", "```\n[<Test>]\nlet ``When 2 is added to 2 expect 4``() = \n    Assert.AreEqual(4, 2+2) \n```", "```\nTestClass.When2IsAddedTo2Expect4\nResult: Success \n```", "```\nMyUnitTests.When 2 is added to 2 expect 4\nResult: Success \n```", "```\nlet add1 x = x + 1\n\n// a simple test using any assertion framework:\n// Fuchu's own, Nunit, FsUnit, etc\nlet ``Assert that add1 is x+1`` x _notUsed = \n   NUnit.Framework.Assert.AreEqual(x+1, add1 x)\n\n// a single test case with one value\nlet simpleTest = \n   testCase \"Test with 42\" <| \n     ``Assert that add1 is x+1`` 42\n\n// a parameterized test case with one param\nlet parameterizedTest i = \n   testCase (sprintf \"Test with %i\" i) <| \n     ``Assert that add1 is x+1`` i \n```", "```\n// create a hierarchy of tests \n// mark it as the start point with the \"Tests\" attribute\n[<Fuchu.Tests>]\nlet tests = \n   testList \"Test group A\" [\n      simpleTest \n      testList \"Parameterized 1..10\" ([1..10] |> List.map parameterizedTest) \n      testList \"Parameterized 11..20\" ([11..20] |> List.map parameterizedTest) \n   ] \n```", "```\n[<EntryPoint>]\nlet main args = \n    let exitCode = defaultMainThisAssembly args\n\n    Console.WriteLine(\"Press any key\")\n    Console.ReadLine() |> ignore\n\n    // return the exit code\n    exitCode \n```", "```\n// sets the current directory to be same as the script directory\nSystem.IO.Directory.SetCurrentDirectory (__SOURCE_DIRECTORY__)\n\n// Requires Nunit.Runners under script directory \n//    nuget install NUnit.Runners -o Packages -ExcludeVersion \n\n#r @\"Packages\\NUnit.Runners\\tools\\lib\\nunit.core.dll\"\n#r @\"Packages\\NUnit.Runners\\tools\\lib\\nunit.core.interfaces.dll\"\n\nopen System\nopen NUnit.Core\n\nmodule Setup = \n    open System.Reflection\n    open NUnit.Core\n    open System.Diagnostics.Tracing\n\n    let configureTestRunner path (runner:TestRunner) = \n        let package = TestPackage(\"MyPackage\")\n        package.Assemblies.Add(path) |> ignore\n        runner.Load(package) |> ignore\n\n    let createListener logger =\n\n        let replaceNewline (s:string) = \n            s.Replace(Environment.NewLine, \"\")\n\n        // This is an example of F#'s \"object expression\" syntax.\n        // You don't need to create a class to implement an interface\n        {new NUnit.Core.EventListener\n            with\n\n            member this.RunStarted(name:string, testCount:int) =\n                logger \"Run started \"\n\n            member this.RunFinished(result:TestResult ) = \n                logger \"\"\n                logger \"-------------------------------\"\n                result.ResultState\n                |> sprintf \"Overall result: %O\" \n                |> logger \n\n            member this.RunFinished(ex:Exception) = \n                ex.StackTrace \n                |> replaceNewline \n                |> sprintf \"Exception occurred: %s\" \n                |> logger \n\n            member this.SuiteFinished(result:TestResult) = ()\n            member this.SuiteStarted(testName:TestName) = ()\n\n            member this.TestFinished(result:TestResult)=\n                result.ResultState\n                |> sprintf \"Result: %O\" \n                |> logger \n\n            member this.TestOutput(testOutput:TestOutput) = \n                testOutput.Text \n                |> replaceNewline \n                |> logger \n\n            member this.TestStarted(testName:TestName) = \n                logger \"\"\n\n                testName.FullName \n                |> replaceNewline \n                |> logger \n\n            member this.UnhandledException(ex:Exception) = \n                ex.StackTrace \n                |> replaceNewline \n                |> sprintf \"Unhandled exception occurred: %s\"\n                |> logger \n            }\n\n// run all the tests in the DLL\ndo \n    let dllPath = @\".\\bin\\MyUnitTests.dll\"\n\n    CoreExtensions.Host.InitializeService();\n\n    use runner = new NUnit.Core.SimpleTestRunner()\n    Setup.configureTestRunner dllPath runner\n    let logger = printfn \"%s\"\n    let listener = Setup.createListener logger\n    let result = runner.Run(listener, TestFilter.Empty, true, LoggingThreshold.All)\n\n    // if running from the command line, wait for user input\n    Console.ReadLine() |> ignore\n\n    // if running from the interactive session, reset session before recompiling MyUnitTests.dll \n```", "```\nopen NUnit.Framework\nopen FsUnit\n\nlet inline add x y = x + y\n\n[<Test>]\nlet ``When 2 is added to 2 expect 4``() = \n    add 2 2 |> should equal 4\n\n[<Test>]\nlet ``When 2.0 is added to 2.0 expect 4.01``() = \n    add 2.0 2.0 |> should (equalWithin 0.1) 4.01\n\n[<Test>]\nlet ``When ToLower(), expect lowercase letters``() = \n    \"FSHARP\".ToLower() |> should startWith \"fs\" \n```", "```\n[<Test>]\nlet ``When 2 is added to 2 expect 4``() = \n    test <@ 2 + 2 = 4 @> \n```", "```\n[<Test>]\nlet ``2 + 2 is 4``() = \n   let result = 2 + 2\n   result =? 4\n\n[<Test>]\nlet ``2 + 2 is bigger than 5``() = \n   let result = 2 + 2\n   result >? 5 \n```", "```\n[<Test>]\nlet ``Test that 497 is CDXCVII``() = \n    arabicToRoman 497 |> should equal \"CDXCVII\" \n```", "```\nlet maxRepetitionProperty ch count (input:string) = \n    let find = String.replicate (count+1) ch\n    input.Contains find |> not\n\n// a property that holds for all roman numerals\nlet ``has max rep of one V`` roman = \n    maxRepetitionProperty \"V\" 1 roman \n\n// a property that holds for all roman numerals\nlet ``has max rep of three Xs`` roman = \n    maxRepetitionProperty \"X\" 3 roman \n```", "```\n[<Test>]\nlet ``Test that roman numerals have no more than one V``() = \n    let property num = \n        // convert the number to roman and check the property\n        arabicToRoman num |> ``has max rep of one V``\n\n    Check.QuickThrowOnFailure (testWithRange property)\n\n[<Test>]\nlet ``Test that roman numerals have no more than three Xs``() = \n    let property num = \n        // convert the number to roman and check the property\n        arabicToRoman num |> ``has max rep of three Xs``\n\n    Check.QuickThrowOnFailure (testWithRange property) \n```", "```\nTest that roman numerals have no more than one V\n   Ok, passed 100 tests.\n\nTest that roman numerals have no more than three Xs\n   Ok, passed 100 tests. \n```", "```\nFalsifiable, after 33 tests \n\n30 \n```", "```\n// domain objects\ntype EmailAddress = EmailAddress of string\ntype PhoneNumber = PhoneNumber of string\ntype Customer = {\n    name: string\n    email: EmailAddress\n    phone: PhoneNumber\n    birthdate: DateTime\n    }\n\n// a list of names to sample\nlet possibleNames = [\n    \"Georgianne Stephan\"\n    \"Sharolyn Galban\"\n    \"Beatriz Applewhite\"\n    \"Merissa Cornwall\"\n    \"Kenneth Abdulla\"\n    \"Zora Feliz\"\n    \"Janeen Strunk\"\n    \"Oren Curlee\"\n    ]\n\n// generate a random name by picking from the list at random\nlet generateName() = \n    FsCheck.Gen.elements possibleNames \n\n// generate a random EmailAddress by combining random users and domains\nlet generateEmail() = \n    let userGen = FsCheck.Gen.elements [\"a\"; \"b\"; \"c\"; \"d\"; \"e\"; \"f\"]\n    let domainGen = FsCheck.Gen.elements [\"gmail.com\"; \"example.com\"; \"outlook.com\"]\n    let makeEmail u d = sprintf \"%s@%s\" u d |> EmailAddress\n    FsCheck.Gen.map2 makeEmail userGen domainGen \n\n// generate a random PhoneNumber \nlet generatePhone() = \n    let areaGen = FsCheck.Gen.choose(100,999)\n    let n1Gen = FsCheck.Gen.choose(1,999)\n    let n2Gen = FsCheck.Gen.choose(1,9999)\n    let makeNumber area n1 n2 = sprintf \"(%03i)%03i-%04i\" area n1 n2 |> PhoneNumber\n    FsCheck.Gen.map3 makeNumber areaGen n1Gen n2Gen \n\n// generate a random birthdate\nlet generateDate() = \n    let minDate = DateTime(1920,1,1).ToOADate() |> int\n    let maxDate = DateTime(2014,1,1).ToOADate() |> int\n    let oaDateGen = FsCheck.Gen.choose(minDate,maxDate)\n    let makeDate oaDate = float oaDate |> DateTime.FromOADate \n    FsCheck.Gen.map makeDate oaDateGen\n\n// a function to create a customer\nlet createCustomer name email phone birthdate =\n    {name=name; email=email; phone=phone; birthdate=birthdate}\n\n// use applicatives to create a customer generator\nlet generateCustomer = \n    createCustomer \n    <!> generateName() \n    <*> generateEmail() \n    <*> generatePhone() \n    <*> generateDate() \n\n[<Test>]\nlet printRandomCustomers() =\n    let size = 0\n    let count = 10\n    let data = FsCheck.Gen.sample size count generateCustomer\n\n    // print it\n    data |> List.iter (printfn \"%A\") \n```", "```\n{name = \"Georgianne Stephan\";\n email = EmailAddress \"d@outlook.com\";\n phone = PhoneNumber \"(420)330-2080\";\n birthdate = 11/02/1976 00:00:00;}\n\n{name = \"Sharolyn Galban\";\n email = EmailAddress \"e@outlook.com\";\n phone = PhoneNumber \"(579)781-9435\";\n birthdate = 01/04/2011 00:00:00;}\n\n{name = \"Janeen Strunk\";\n email = EmailAddress \"b@gmail.com\";\n phone = PhoneNumber \"(265)405-6619\";\n birthdate = 21/07/1955 00:00:00;} \n```", "```\n// Moq Method\nvar mock = new Mock<IFoo>();\nmock.Setup(foo => foo.DoSomething(\"ping\")).Returns(true);\nvar instance = mock.Object;\n\n// Moq Matching Arguments:\nmock.Setup(foo => foo.DoSomething(It.IsAny<string>())).Returns(true);\n\n// Moq Property\nmock.Setup(foo => foo.Name ).Returns(\"bar\"); \n```", "```\n// Foq Method\nlet mock = \n    Mock<IFoo>()\n        .Setup(fun foo -> <@ foo.DoSomething(\"ping\") @>).Returns(true)\n        .Create()\n\n// Foq Matching Arguments\nmock.Setup(fun foo -> <@ foo.DoSomething(any()) @>).Returns(true)\n\n// Foq Property\nmock.Setup(fun foo -> <@ foo.Name @>).Returns(\"bar\") \n```", "```\n//start an instance of the firefox browser\nstart firefox\n\n//this is how you define a test\n\"taking canopy for a spin\" &&& fun _ ->\n    //go to url\n    url \"http://lefthandedgoat.github.io/canopy/testpages/\"\n\n    //assert that the element with an id of 'welcome' has\n    //the text 'Welcome'\n    \"#welcome\" == \"Welcome\"\n\n    //assert that the element with an id of 'firstName' has the value 'John'\n    \"#firstName\" == \"John\"\n\n    //change the value of element with\n    //an id of 'firstName' to 'Something Else'\n    \"#firstName\" << \"Something Else\"\n\n    //verify another element's value, click a button,\n    //verify the element is updated\n    \"#button_clicked\" == \"button not clicked\"\n    click \"#button\"\n    \"#button_clicked\" == \"button clicked\"\n\n//run all tests\nrun() \n```", "```\nFeature: Refunded or replaced items should be returned to stock\n\nScenario 1: Refunded items should be returned to stock\n    Given a customer buys a black jumper\n    And I have 3 black jumpers left in stock \n    When they return the jumper for a refund \n    Then I should have 4 black jumpers in stock \n```", "```\ntype StockItem = { Count : int }\n\nlet mutable stockItem = { Count = 0 }\n\nlet [<Given>] ``a customer buys a black jumper`` () = \n    ()\n\nlet [<Given>] ``I have (.*) black jumpers left in stock`` (n:int) =  \n    stockItem <- { stockItem with Count = n }\n\nlet [<When>] ``they return the jumper for a refund`` () =  \n    stockItem <- { stockItem with Count = stockItem.Count + 1 }\n\nlet [<Then>] ``I should have (.*) black jumpers in stock`` (n:int) =     \n    let passed = (stockItem.Count = n)\n    Assert.True(passed) \n```", "```\n[Given(@\"a customer buys a black jumper\")]\npublic void GivenACustomerBuysABlackJumper() {\n   // code\n}\n\n[Given(@\"I have (.*) black jumpers left in stock\")]\npublic void GivenIHaveNBlackJumpersLeftInStock(int n) {\n   // code\n} \n```", "```\n[<Literal>]\nlet connectionString = \"Data Source=localhost; Initial Catalog=SqlInFsharp; Integrated Security=True;\"\n\ntype Sql = SqlDataConnection<connectionString>\nlet db = Sql.GetDataContext()\n\n// find the number of customers with a gmail domain\nquery {\n    for c in db.Customer do\n    where (c.Email.EndsWith(\"gmail.com\"))\n    select c\n    count\n    } \n```", "```\n// optional, turn logging on\ndb.DataContext.Log <- Console.Out \n```", "```\nSELECT COUNT(*) AS [value]\nFROM [dbo].[Customer] AS [t0]\nWHERE [t0].[Email] LIKE @p0\n-- @p0: Input VarChar (Size = 8000; Prec = 0; Scale = 0) [%gmail.com] \n```", "```\n// Find students who have signed up at least one course.\nquery {\n    for student in db.Student do\n    where (query { for courseSelection in db.CourseSelection do\n                   exists (courseSelection.StudentID = student.StudentID) })\n    select student\n} \n```", "```\n// find the most popular domain for people born in each decade\nlet getDomain email =\n    Regex.Match(email,\".*@(.*)\").Groups.[1].Value\n\nlet getDecade (birthdate:Nullable<DateTime>) =\n    if birthdate.HasValue then\n        birthdate.Value.Year / 10  * 10 |> Some\n    else\n        None\n\nlet topDomain list = \n    list\n    |> Seq.distinct\n    |> Seq.head\n    |> snd\n\ndb.Customer\n|> Seq.map (fun c -> getDecade c.Birthdate, getDomain c.Email)\n|> Seq.groupBy fst\n|> Seq.sortBy fst\n|> Seq.map (fun (decade, group) -> (decade,topDomain group))\n|> Seq.iter (printfn \"%A\") \n```", "```\nmodule DbLib\n\n[<Literal>]\nlet connectionString = \"Data Source=localhost; Initial Catalog=SqlInFsharp;Integrated Security=True;\"\ntype Sql = SqlDataConnection<connectionString>\n\nlet removeExistingData (db:DbContext) = \n    let truncateTable name = \n        sprintf \"TRUNCATE TABLE %s\" name\n        |> db.DataContext.ExecuteCommand \n        |> ignore\n\n    [\"Customer\"; \"CustomerImport\"]\n    |> List.iter truncateTable\n\nlet insertReferenceData (db:DbContext) = \n    [ \"US\",\"United States\";\n      \"GB\",\"United Kingdom\" ]\n    |> List.iter (fun (code,name) -> \n        let c = new Sql.ServiceTypes.Country()\n        c.IsoCode <- code;  c.CountryName <- name\n        db.Country.InsertOnSubmit c\n        )\n    db.DataContext.SubmitChanges()\n\n// removes all data and restores db to known starting point\nlet resetDatabase() =\n    use db = Sql.GetDataContext()\n    removeExistingData db\n    insertReferenceData db \n```", "```\n[<Test>]\nlet ``When upsert customer called with null id, expect customer created with new id``() = \n    DbLib.resetDatabase() \n    use db = DbLib.Sql.GetDataContext()\n\n    // create customer\n    let newId = db.Up_Customer_Upsert(Nullable(),\"Alice\",\"x@example.com\",Nullable()) \n\n    // check new id \n    Assert.Greater(newId,0)\n\n    // check one customer exists\n    let customerCount = db.Customer |> Seq.length\n    Assert.AreEqual(1,customerCount) \n```", "```\n[<Test>]\nlet ``When upsert customer called with existing id, expect customer updated``() = \n    DbLib.resetDatabase() \n    use db = DbLib.Sql.GetDataContext()\n\n    // create customer\n    let custId = db.Up_Customer_Upsert(Nullable(),\"Alice\",\"x@example.com\",Nullable()) \n\n    // update customer\n    let newId = db.Up_Customer_Upsert(Nullable custId,\"Bob\",\"y@example.com\",Nullable()) \n\n    // check id hasnt changed\n    Assert.AreEqual(custId,newId)\n\n    // check still only one customer\n    let customerCount = db.Customer |> Seq.length\n    Assert.AreEqual(1,customerCount)\n\n    // check customer columns are updated\n    let customer = db.Customer |> Seq.head\n    Assert.AreEqual(\"Bob\",customer.Name) \n```", "```\n[<Test>]\nlet ``When upsert customer called with blank name, expect validation error``() = \n    DbLib.resetDatabase() \n    use db = DbLib.Sql.GetDataContext()\n\n    try\n        // try to create customer will a blank name\n        db.Up_Customer_Upsert(Nullable(),\"\",\"x@example.com\",Nullable()) |> ignore\n        Assert.Fail(\"expecting a SqlException\")\n    with\n    | :? System.Data.SqlClient.SqlException as ex ->\n        Assert.That(ex.Message,Is.StringContaining(\"@Name\"))\n        Assert.That(ex.Message,Is.StringContaining(\"blank\")) \n```", "```\nCREATE TABLE dbo.CustomerImport (\n    CustomerId int NOT NULL IDENTITY(1,1)\n    ,FirstName varchar(50) NOT NULL \n    ,LastName varchar(50) NOT NULL \n    ,EmailAddress varchar(50) NOT NULL \n    ,Age int NULL \n\n    CONSTRAINT PK_CustomerImport PRIMARY KEY CLUSTERED (CustomerId)\n    ) \n```", "```\n[<Literal>]\nlet connectionString = \"Data Source=localhost; Initial Catalog=SqlInFsharp; Integrated Security=True;\"\n\ntype Sql = SqlDataConnection<connectionString>\n\n// a list of names to sample\nlet possibleFirstNames = \n    [\"Merissa\";\"Kenneth\";\"Zora\";\"Oren\"]\nlet possibleLastNames = \n    [\"Applewhite\";\"Feliz\";\"Abdulla\";\"Strunk\"]\n\n// generate a random name by picking from the list at random\nlet generateFirstName() = \n    FsCheck.Gen.elements possibleFirstNames \n\nlet generateLastName() = \n    FsCheck.Gen.elements possibleLastNames\n\n// generate a random email address by combining random users and domains\nlet generateEmail() = \n    let userGen = FsCheck.Gen.elements [\"a\"; \"b\"; \"c\"; \"d\"; \"e\"; \"f\"]\n    let domainGen = FsCheck.Gen.elements [\"gmail.com\"; \"example.com\"; \"outlook.com\"]\n    let makeEmail u d = sprintf \"%s@%s\" u d \n    FsCheck.Gen.map2 makeEmail userGen domainGen \n```", "```\n// Generate a random nullable age.\n// Note that because age is nullable, \n// the compiler forces us to take that into account\nlet generateAge() = \n    let nonNullAgeGenerator = \n        FsCheck.Gen.choose(1,99) \n        |> FsCheck.Gen.map (fun age -> Nullable age)\n    let nullAgeGenerator = \n        FsCheck.Gen.constant (Nullable())\n\n    // 19 out of 20 times choose a non null age\n    FsCheck.Gen.frequency [ \n        (19,nonNullAgeGenerator) \n        (1,nullAgeGenerator)\n        ] \n```", "```\n// a function to create a customer\nlet createCustomerImport first last email age =\n    let c = new Sql.ServiceTypes.CustomerImport()\n    c.FirstName <- first\n    c.LastName <- last\n    c.EmailAddress <- email\n    c.Age <- age\n    c //return new record\n\n// use applicatives to create a customer generator\nlet generateCustomerImport = \n    createCustomerImport \n    <!> generateFirstName() \n    <*> generateLastName() \n    <*> generateEmail() \n    <*> generateAge() \n```", "```\nlet insertAll() =\n    use db = Sql.GetDataContext()\n\n    // optional, turn logging on or off\n    // db.DataContext.Log <- Console.Out\n    // db.DataContext.Log <- null\n\n    let insertOne counter customer =\n        db.CustomerImport.InsertOnSubmit customer\n        // do in batches of 1000\n        if counter % 1000 = 0 then\n            db.DataContext.SubmitChanges()\n\n    // generate the records\n    let count = 10000\n    let generator = FsCheck.Gen.sample 0 count generateCustomerImport\n\n    // insert the records\n    generator |> List.iteri insertOne\n    db.DataContext.SubmitChanges() // commit any remaining \n```", "```\n#time\ninsertAll() \n#time \n```", "```\nCREATE TABLE dbo.Customer (\n    CustomerId int NOT NULL IDENTITY(1,1)\n    ,Name varchar(50) NOT NULL \n    ,Email varchar(50) NOT NULL \n    ,Birthdate datetime NULL \n    ) \n```", "```\nCREATE TABLE dbo.CustomerImport (\n    CustomerId int NOT NULL IDENTITY(1,1)\n    ,FirstName varchar(50) NOT NULL \n    ,LastName varchar(50) NOT NULL \n    ,EmailAddress varchar(50) NOT NULL \n    ,Age int NULL \n    ) \n```", "```\n[<Literal>]\nlet sourceConnectionString = \n    \"Data Source=localhost; Initial Catalog=SqlInFsharp; Integrated Security=True;\"\n\n[<Literal>]\nlet targetConnectionString = \n    \"Data Source=localhost; Initial Catalog=SqlInFsharp; Integrated Security=True;\"\n\ntype SourceSql = SqlDataConnection<sourceConnectionString>\ntype TargetSql = SqlDataConnection<targetConnectionString>\n\nlet makeName first last = \n    sprintf \"%s %s\" first last \n\nlet makeBirthdate (age:Nullable<int>) = \n    if age.HasValue then\n        Nullable (DateTime.Today.AddYears(-age.Value))\n    else\n        Nullable()\n\nlet makeTargetCustomer (sourceCustomer:SourceSql.ServiceTypes.CustomerImport) = \n    let targetCustomer = new TargetSql.ServiceTypes.Customer()\n    targetCustomer.Name <- makeName sourceCustomer.FirstName sourceCustomer.LastName\n    targetCustomer.Email <- sourceCustomer.EmailAddress\n    targetCustomer.Birthdate <- makeBirthdate sourceCustomer.Age\n    targetCustomer // return it \n```", "```\nlet transferAll() =\n    use sourceDb = SourceSql.GetDataContext()\n    use targetDb = TargetSql.GetDataContext()\n\n    let insertOne counter customer =\n        targetDb.Customer.InsertOnSubmit customer\n        // do in batches of 1000\n        if counter % 1000 = 0 then\n            targetDb.DataContext.SubmitChanges()\n            printfn \"...%i records transferred\" counter \n\n    // get the sequence of source records\n    sourceDb.CustomerImport\n    // transform to a target record\n    |>  Seq.map makeTargetCustomer \n    // and insert\n    |>  Seq.iteri insertOne\n\n    targetDb.DataContext.SubmitChanges() // commit any remaining\n    printfn \"Done\" \n```", "```\n#time\ntransferAll() \n#time \n```", "```\nlet thisDir = __SOURCE_DIRECTORY__\nSystem.IO.Directory.SetCurrentDirectory (thisDir)\n\n#load @\"..\\..\\SqlAgentLibrary.Lib.fsx\"\n\nmodule MySqlAgentJob = \n\n    open SqlAgentLibrary.Lib.SqlAgentLibrary\n\n    let PackageFolder = @\"\\shared\\etl\\MyJob\"\n\n    let step1 = Package {\n        Name = \"An SSIS package\"\n        Package = \"AnSsisPackage.dtsx\"\n        Variables = \n            [\n            \"EtlServer\", \"EtlServer\"\n            \"EtlDatabase\", \"EtlDatabase\"\n            \"SsisLogServer\", \"SsisLogServer\"\n            \"SsisLogDatabase\", \"SsisLogDatabase\"\n            ]\n        }\n\n    let step2 = Package {\n        Name = \"Another SSIS package\"\n        Package = \"AnotherSsisPackage.dtsx\"\n        Variables = \n            [\n            \"EtlServer\", \"EtlServer2\"\n            \"EtlDatabase\", \"EtlDatabase2\"\n            \"SsisLogServer\", \"SsisLogServer2\"\n            \"SsisLogDatabase\", \"SsisLogDatabase2\"\n            ]\n        }\n\n    let jobInfo = {\n        JobName = \"My SqlAgent Job\"\n        JobDescription = \"Copy data from one place to another\"\n        JobCategory = \"ETL\"\n        Steps = \n            [\n            step1\n            step2\n            ]\n        StepsThatContinueOnFailure = []\n        JobSchedule = None\n        JobAlert = None\n        JobNotification = None\n        }            \n\n    let generate globals = \n        writeAgentScript globals jobInfo \n\nmodule DevEnvironment = \n\n    let globals = \n        [\n        // global\n        \"Environment\", \"DEV\"\n        \"PackageFolder\", @\"\\shared\\etl\\MyJob\"\n        \"JobServer\", \"(local)\"\n\n        // General variables\n        \"JobName\", \"Some packages\"\n        \"SetStartFlag\", \"2\"\n        \"SetEndFlag\", \"0\"\n\n        // databases\n        \"Database\", \"mydatabase\"\n        \"Server\",  \"localhost\"\n        \"EtlServer\", \"localhost\"\n        \"EtlDatabase\", \"etl_config\"\n\n        \"SsisLogServer\", \"localhost\"\n        \"SsisLogDatabase\", \"etl_config\"\n        ] |> Map.ofList\n\n    let generateJob() = \n        MySqlAgentJob.generate globals    \n\nDevEnvironment.generateJob() \n```", "```\nUSE [msdb]\nGO\n\n-- =====================================================\n-- Script that deletes and recreates the SQL Agent job 'My SqlAgent Job'\n-- \n-- The job steps are:\n-- 1) An SSIS package\n     -- {Continue on error=false} \n-- 2) Another SSIS package\n     -- {Continue on error=false} \n\n-- =====================================================\n\n-- =====================================================\n-- Environment is DEV\n-- \n-- The other global variables are:\n-- Database = mydatabase\n-- EtlDatabase = etl_config\n-- EtlServer = localhost\n-- JobName = My SqlAgent Job\n-- JobServer = (local)\n-- PackageFolder = \\\\shared\\etl\\MyJob\\\n-- Server = localhost\n-- SetEndFlag = 0\n-- SetStartFlag = 2\n-- SsisLogDatabase = etl_config\n-- SsisLogServer = localhost\n\n-- =====================================================\n\n-- =====================================================\n-- Create job\n-- =====================================================\n\n-- ---------------------------------------------\n-- Delete Job if it exists\n-- ---------------------------------------------\nIF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = 'My SqlAgent Job') \nBEGIN\n    PRINT 'Deleting job \"My SqlAgent Job\"'\n    EXEC msdb.dbo.sp_delete_job @job_name='My SqlAgent Job', @delete_unused_schedule=0\nEND    \n\n-- ---------------------------------------------\n-- Create Job\n-- ---------------------------------------------\n\nBEGIN TRANSACTION\nDECLARE @ReturnCode INT\nSELECT @ReturnCode = 0\n\n-- ---------------------------------------------\n-- Create Category if needed\n-- ---------------------------------------------\nIF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name='ETL' AND category_class=1)\nBEGIN\n    PRINT 'Creating category \"ETL\"'\n    EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name='ETL'\n    IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback\nEND\n\n-- ---------------------------------------------\n-- Create Job \n-- ---------------------------------------------\n\nDECLARE @jobId BINARY(16)\nPRINT 'Creating job \"My SqlAgent Job\"'\nEXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name='My SqlAgent Job', \n        @enabled=1, \n        @category_name='ETL', \n        @owner_login_name=N'sa', \n        @description='Copy data from one place to another',\n        @job_id = @jobId OUTPUT\n\nIF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback\n\nPRINT '-- ---------------------------------------------'\nPRINT 'Create step 1: \"An SSIS package\"'\nPRINT '-- ---------------------------------------------'\nDECLARE @Step1_Name nvarchar(50) = 'An SSIS package'\nDECLARE @Step1_Package nvarchar(170) = 'AnSsisPackage.dtsx'\nDECLARE @Step1_Command nvarchar(1700) = \n    '/FILE \"\\\\shared\\etl\\MyJob\\AnSsisPackage.dtsx\"' + \n    ' /CHECKPOINTING OFF' + \n    ' /SET \"\\Package.Variables[User::SetFlag].Value\";\"2\"' + \n    ' /SET \"\\Package.Variables[User::JobName].Value\";\"\"' + \n    ' /SET \"\\Package.Variables[User::SourceServer].Value\";\"localhost\"' + \n    ' /SET \"\\Package.Variables[User::SourceDatabaseName].Value\";\"etl_config\"' + \n\n    ' /REPORTING E'\n\nEXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=@Step1_Name, \n        @step_id=1, \n        @on_success_action=3, \n        @on_fail_action=2,\n        @subsystem=N'SSIS', \n        @command=@Step1_Command\n\n        IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback\n\nPRINT '-- ---------------------------------------------'\nPRINT 'Create step 2: \"Another SSIS Package\"'\nPRINT '-- ---------------------------------------------'\nDECLARE @Step2_Name nvarchar(50) = 'Another SSIS Package'\nDECLARE @Step2_Package nvarchar(170) = 'AnotherSsisPackage.dtsx'\nDECLARE @Step2_Command nvarchar(1700) = \n    '/FILE \"\\\\shared\\etl\\MyJob\\AnotherSsisPackage.dtsx.dtsx\"' + \n    ' /CHECKPOINTING OFF' + \n    ' /SET \"\\Package.Variables[User::EtlServer].Value\";\"localhost\"' + \n    ' /SET \"\\Package.Variables[User::EtlDatabase].Value\";\"etl_config\"' + \n    ' /SET \"\\Package.Variables[User::SsisLogServer].Value\";\"localhost\"' + \n    ' /SET \"\\Package.Variables[User::SsisLogDatabase].Value\";\"etl_config\"' + \n\n    ' /REPORTING E'\n\nEXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=@Step2_Name, \n        @step_id=2, \n        @on_success_action=3, \n        @on_fail_action=2,\n        @subsystem=N'SSIS', \n        @command=@Step2_Command\n\n        IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback\n\n    -- ---------------------------------------------\n-- Job Schedule\n-- ---------------------------------------------\n\n-- ----------------------------------------------\n-- Job Alert\n-- ----------------------------------------------\n\n-- ---------------------------------------------\n-- Set start step\n-- ---------------------------------------------\n\nEXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1\nIF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback\n\n-- ---------------------------------------------\n-- Set server\n-- ---------------------------------------------\n\nEXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = '(local)'\nIF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback\n\nPRINT 'Done!'\n\nCOMMIT TRANSACTION\nGOTO EndSave\nQuitWithRollback:\n    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION\nEndSave:\nGO \n```", "```\n// sets the current directory to be same as the script directory\nSystem.IO.Directory.SetCurrentDirectory (__SOURCE_DIRECTORY__)\n\n// Requires FSharp.Data under script directory \n//    nuget install FSharp.Data -o Packages -ExcludeVersion \n#r @\"Packages\\FSharp.Data\\lib\\net40\\FSharp.Data.dll\"\nopen FSharp.Data\n\n// without a key\nlet data = FreebaseData.GetDataContext()\n\n// with a key\n(*\n[<Literal>]\nlet FreebaseApiKey = \"<enter your freebase-enabled google API key here>\"\ntype FreebaseDataWithKey = FreebaseDataProvider<Key=FreebaseApiKey>\nlet data = FreebaseDataWithKey.GetDataContext()\n*) \n```", "```\ndata.Society.Government.``US Presidents``\n|> Seq.map (fun p ->  p.``President number`` |> Seq.head, p.Name)\n|> Seq.sortBy fst\n|> Seq.iter (fun (n,name) -> printfn \"%s was number %i\" name n ) \n```", "```\nGeorge Washington was number 1\nJohn Adams was number 2\nThomas Jefferson was number 3\nJames Madison was number 4\nJames Monroe was number 5\nJohn Quincy Adams was number 6\n...\nRonald Reagan was number 40\nGeorge H. W. Bush was number 41\nBill Clinton was number 42\nGeorge W. Bush was number 43\nBarack Obama was number 44 \n```", "```\ndata.``Arts and Entertainment``.Film.Films.IndividualsAZ.C.Casablanca.``Awards Won``\n|> Seq.map (fun award -> award.Year, award.``Award category``.Name)\n|> Seq.sortBy fst\n|> Seq.iter (fun (year,name) -> printfn \"%s -- %s\" year name) \n```", "```\n1943 -- Academy Award for Best Director\n1943 -- Academy Award for Best Picture\n1943 -- Academy Award for Best Screenplay \n```", "```\nlet randomElement =\n    let random = new System.Random()\n    fun (arr:string array) -> arr.[random.Next(arr.Length)]\n\nlet surnames = \n    FreebaseData.GetDataContext().Society.People.``Family names``\n    |> Seq.truncate 1000\n    |> Seq.map (fun name -> name.Name)\n    |> Array.ofSeq\n\nlet firstnames = \n    FreebaseData.GetDataContext().Society.Celebrities.Celebrities\n    |> Seq.truncate 1000\n    |> Seq.map (fun celeb -> celeb.Name.Split([|' '|]).[0])\n    |> Array.ofSeq\n\n// generate ten random people and print\ntype Person = {Forename:string; Surname:string}\nSeq.init 10 ( fun _ -> \n    {Forename = (randomElement firstnames); \n     Surname = (randomElement surnames) }\n     )\n|> Seq.iter (printfn \"%A\") \n```", "```\n{Forename = \"Kelly\"; Surname = \"Deasy\";}\n{Forename = \"Bam\"; Surname = \"Br?z?\";}\n{Forename = \"Claire\"; Surname = \"Sludden\";}\n{Forename = \"Kenneth\"; Surname = \"Kl?tz\";}\n{Forename = \"?tienne\"; Surname = \"Defendi\";}\n{Forename = \"Billy\"; Surname = \"Paleti\";}\n{Forename = \"Alix\"; Surname = \"Nuin\";}\n{Forename = \"Katherine\"; Surname = \"Desporte\";}\n{Forename = \"Jasmine\";  Surname = \"Belousov\";}\n{Forename = \"Josh\";  Surname = \"Kramarsic\";}\n\n```", "```\n// sets the current directory to be same as the script directory\nSystem.IO.Directory.SetCurrentDirectory (__SOURCE_DIRECTORY__)\n\n// Requires FSharp.Data under script directory \n//    nuget install FSharp.Data -o Packages -ExcludeVersion \n#r @\"Packages\\FSharp.Data\\lib\\net40\\FSharp.Data.dll\"\nopen FSharp.Data\n\nlet data = WorldBankData.GetDataContext() \n```", "```\n// Create a list of countries to process\nlet groups = \n [| data.Countries.``Low income``\n    data.Countries.``High income``\n    |]\n\n// get data from an indicator for particular year\nlet getYearValue (year:int) (ind:Runtime.WorldBank.Indicator) =\n    ind.Name,year,ind.Item year\n\n// get data\n[ for c in groups -> \n    c.Name,\n    c.Indicators.``Malnutrition prevalence, weight for age (% of children under 5)`` |> getYearValue 2010\n] \n// print the data\n|> Seq.iter (\n    fun (group,(indName, indYear, indValue)) -> \n       printfn \"%s -- %s %i %0.2f%% \" group indName indYear indValue) \n```", "```\nLow income -- Malnutrition prevalence, weight for age (% of children under 5) 2010 23.19% \nHigh income -- Malnutrition prevalence, weight for age (% of children under 5) 2010 1.36% \n```", "```\n// Create a list of countries to process\nlet countries = \n [| data.Countries.``European Union``\n    data.Countries.``United Kingdom``\n    data.Countries.``United States`` |]\n\n/ get data\n[ for c in countries  -> \n    c.Name,\n    c.Indicators.``Maternal mortality ratio (modeled estimate, per 100,000 live births)`` |> getYearValue 2010\n] \n// print the data\n|> Seq.iter (\n    fun (group,(indName, indYear, indValue)) -> \n       printfn \"%s -- %s %i %0.1f\" group indName indYear indValue) \n```", "```\nEuropean Union -- Maternal mortality ratio (modeled estimate, per 100,000 live births) 2010 9.0 \nUnited Kingdom -- Maternal mortality ratio (modeled estimate, per 100,000 live births) 2010 12.0 \nUnited States -- Maternal mortality ratio (modeled estimate, per 100,000 live births) 2010 21.0 \n```"]