- en: 9Recursive Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归数据
- en: '|  |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: 'Sometimes, a data definition has a piece that refers back to itself. For example,
    a linked list of numbers:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，数据定义有一个指向自身的部分。例如，一个数字的链表：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Moving on to defining examples, we can talk about empty lists:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 继续定义示例，我们可以谈论空列表：
- en: The nl- stands for NumList. This avoids clashing with Pyret’s empty.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: nl-代表NumList。这样避免了与Pyret的empty冲突。
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can represent short lists, like a sequence of two 4’s:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以表示短列表，比如两个4的序列：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since these are created with constructors from data, we can use cases with
    them:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些是由数据的构造函数创建的，我们可以使用cases与它们：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This style of data definition permits us to create data that are unbounded
    or arbitrarily-sized. Given a NumList, there is an easy way to make a new, larger
    one: just use nl-link. So, we need to consider larger lists:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这种数据定义风格允许我们创建无界或任意大小的数据。给定一个NumList，有一种简单的方法来制作一个新的、更大的列表：只需使用nl-link。所以，我们需要考虑更大的列表：
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let’s try to write a function contains-3, which returns true if the NumList
    contains the value 3, and false otherwise.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试编写一个名为contains-3的函数，如果NumList包含值3，则返回true，否则返回false。
- en: 'First, our header:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们的标题：
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, some tests:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，一些测试：
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we need to fill in the body with the template for a function over NumLists.
    We can start with the analogous template using cases we had before:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要用一个对NumLists的函数的模板来填充体部。我们可以从之前使用cases的类似模板开始：
- en: '[PRE8]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'An empty list doesn’t contain the number 3, surely, so the answer must be false
    in the nl-empty case. In the nl-link case, if the first element is 3, we’ve successfully
    answered the question. That only leaves the case where the argument is an nl-link
    and the first element does not equal 3:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 空列表肯定不包含数字3，所以在nl-empty情况下答案必须是false。在nl-link情况下，如果第一个元素是3，我们已经成功地回答了问题。这只留下了参数是nl-link且第一个元素不等于3的情况：
- en: '[PRE9]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Since we know rest is a NumList (based on the data definition), we can use
    a cases expression to work with it. This is sort of like filling in a part of
    the template again:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道rest是一个NumList（基于数据定义），我们可以使用cases表达式与它一起工作。这有点像再次填写模板的一部分：
- en: '[PRE10]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If the rest was empty, then we haven’t found 3 (just like when we checked the
    original argument, nl). If the rest was a nl-link, then we need to check if the
    first thing in the rest of the list is 3 or not:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果rest为空，则我们没有找到3（就像我们检查原始参数nl时一样）。如果rest是一个nl-link，那么我们需要检查列表的剩余部分中的第一个元素是否为3：
- en: '[PRE11]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Since rest-of-rest is a NumList, we can fill in a cases for it again:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于rest-of-rest是一个NumList，我们可以再次为其填写cases：
- en: '[PRE12]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See where this is going? Not anywhere good. We can copy this cases expression
    as many times as we want, but we can never answer the question for a list that
    is just one element longer than the number of times we copy the code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 看到这里了吗？没有任何好的方向。我们可以将此cases表达式复制任意次数，但我们永远无法回答仅比我们复制代码次数多一个元素的列表的问题。
- en: So what to do? We tried this approach of using another copy of cases based on
    the observation that rest is a NumList, and cases provides a meaningful way to
    break apart a NumList; in fact, it’s what the recipe seems to lead to naturally.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 那么该怎么办？我们尝试过使用另一个基于观察到rest是NumList的cases的副本的方法，而cases提供了一种有意义地将NumList分解的方法；实际上，这似乎是自然而然地导致的。
- en: 'Let’s go back to the step where the problem began, after filling in the template
    with the first check for 3:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到问题开始的步骤，即在使用第一个检查3的模板之后：
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We need a way to compute whether or not the value 3 is contained in rest. Looking
    back at the data definition, we see that rest is a perfectly valid NumList, simply
    by the definition of nl-link. And we have a function (or, most of one) whose job
    is to figure out if a NumList contains 3 or not: contains-3. That ought to be
    something we can call with rest as an argument, and get back the value we want:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种方法来计算值3是否包含在rest中。回顾数据定义，我们可以看到rest是一个完全有效的NumList，仅仅是根据nl-link的定义。而且，我们有一个函数（或者说大部分函数）的工作是确定一个NumList是否包含3：contains-3。这应该是我们可以用rest作为参数调用的东西，并且得到我们想要的值：
- en: '[PRE14]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And lo and behold, all of the tests defined above pass. It’s useful to step
    through what’s happening when this function is called. Let’s look at an example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 看哪，所有上面定义的测试都通过了。当调用此函数时，逐步了解发生了什么是有用的。让我们看一个例子：
- en: '[PRE15]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: First, we substitute the argument value in place of nl everywhere it appears;
    that’s just the usual rule for function calls.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在所有出现nl的地方用参数值代替nl；这只是函数调用的通常规则。
- en: '[PRE16]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Next, we find the case that matches the constructor nl-link, and substitute
    the corresponding pieces of the nl-link value for the first and rest identifiers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们找到与构造函数 nl-link 匹配的情况，并将 nl-link 值的相应部分替换为第一个和 rest 标识符。
- en: '[PRE17]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Since 1 isn’t 3, the comparison evaluates to false, and this whole expression
    evaluates to the contents of the else branch.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 1 不是 3，比较结果为 false，整个表达式评估为 else 分支的内容。
- en: '[PRE18]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is another function call, so we substitute the value nl-link(3, nl-empty),
    which was the rest field of the original input, into the body of contains-3 this
    time.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个函数调用，所以这次我们将原始输入的 rest 字段 nl-link(3, nl-empty) 替换到 contains-3 的主体中。
- en: '[PRE19]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Again, we substitute into the nl-link branch.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 再次将值替换到 nl-link 分支中。
- en: '[PRE20]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This time, since 3 is 3, we take the first branch of the if expression, and
    the whole original call evaluates to true.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，由于 3 是 3，我们选择了 if 表达式的第一个分支，整个原始调用评估为 true。
- en: '[PRE21]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: An interesting feature of this trace through the evaluation is that we reached
    the expression contains-3(nl-link(3, nl-empty)), which is a normal call to contains-3;
    it could even be a test case on its own. The implementation works by doing something
    (checking for equality with 3) with the non-recursive parts of the datum, and
    combining that result with the result of the same operation (contains-3) on the
    recursive part of the datum. This idea of doing recursion with the same function
    on self-recursive parts of the datatype lets us extend our template to handle
    recursive positions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个跟踪评估的有趣特点是，我们到达了包含-3(nl-link(3, nl-empty)) 表达式，这是对 contains-3 的正常调用；它甚至可以作为一个独立的测试用例。该实现通过对数据的非递归部分执行某些操作（检查是否等于
    3），并将该结果与对数据的递归部分执行相同操作（contains-3）的结果结合起来。这种使用相同函数对自递归数据类型的递归的想法让我们扩展了模板以处理递归位置。
- en: 'The simple design recipe dictated this as the template:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的设计方案规定了这个模板：
- en: '[PRE22]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'However, this template doesn’t give much guidance with what to do with the
    rest field. We will extend the template with the following rule: each self-recursive
    position in the data definition becomes a self-recursive function call in the
    template. So the new template looks like:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个模板并没有给出如何处理 rest 字段的指导。我们将使用以下规则扩展模板：数据定义中的每个自递归位置在模板中变为自递归函数调用。因此，新模板如下所示：
- en: '[PRE23]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: To handle recursive data, the design recipe just needs to be modified to have
    this extended template. When you see a recursive data definition (of which there
    will be many when programming in Pyret), you should naturally start thinking about
    what the recursive calls will return and how to combine their results with the
    other, non-recursive pieces of the datatype.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理递归数据，设计方案只需要修改为具有这个扩展模板。当你看到一个递归数据定义（在 Pyret 编程中会有很多），你应该自然而然地开始思考递归调用将返回什么以及如何将它们的结果与数据类型的其他非递归部分结合起来。
- en: Exercise
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use the design recipe to write a function contains-n that takes a NumList and
    a Number, and returns whether that number is in the NumList.
  id: totrans-57
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用设计方案编写一个函数 contains-n，它接受一个 NumList 和一个数字，并返回该数字是否在 NumList 中。
- en: Exercise
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use the design recipe to write a function sum that takes a NumList, and returns
    the sum of all the numbers in it. The sum of the empty list is 0.
  id: totrans-60
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用设计方案编写一个函数 sum，它接受一个 NumList，并返回其中所有数字的总和。空列表的总和为 0。
- en: Exercise
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use the design recipe to write a function remove-3 that takes a NumList, and
    returns a new NumList with any 3’s removed. The remaining elements should all
    be in the list in the same order they were in the input.
  id: totrans-63
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用设计方案编写一个函数 remove-3，它接受一个 NumList，并返回一个删除任何 3 的新 NumList。剩余的元素应该按照它们在输入中的顺序在列表中。
- en: Exercise
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a data definition called NumListList that represents a list of NumLists,
    and use the design recipe to write a function sum-of-lists that takes a NumListList
    and produces a NumList containing the sums of the sub-lists.
  id: totrans-66
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编写一个名为 NumListList 的数据定义，表示 NumLists 的列表，并使用设计方案编写一个函数 sum-of-lists，它接受一个 NumListList
    并生成一个包含子列表和的 NumList。
