["```\n>>> val m1 = mapOf(Pair(\"A\", 3), Pair(\"B\", 7))\n>>> m1\n{A=3, B=7}\n\n```", "```\n>>> 23 to 19\n(23, 19)\n>>> \"CS109\" to \"Otfried\"\n(CS109, Otfried)\n>>> val m = mapOf(\"A\" to 7, \"B\" to 13)\n>>> m\n{A=7, B=13}\n\n```", "```\n>>> m[\"A\"]\n7\n>>> m[\"B\"]\n13\n>>> m[\"C\"]\nnull\n\n```", "```\n>>> m[\"B\"] + 7\nerror: infix call corresponds to a dot-qualified call 'm[\"B\"].plus(7)'\nwhich is not allowed on a nullable receiver 'm[\"B\"]'. Use ?.-qualified\ncall instead\n\n```", "```\n>>> m.getOrElse(\"B\") { 99 }\n13\n>>> m.getOrElse(\"C\") { 99 }\n99\n>>> m.getOrElse(\"B\") { 99 } + 7\n20\n>>> m.getOrElse(\"C\") { 99 } + 7\n106\n\n```", "```\n>>> \"C\" in m\nfalse\n>>> \"A\" in m\ntrue\n\n```", "```\n>>> val m = mapOf(\"A\" to 7, \"B\" to 13)\n>>> m.size\n2\n>>> for ((k, v) in m)\n...   println(\"$k -> $v\")\nA -> 7\nB -> 13\n\n```", "```\n>>> val m = mutableMapOf(\"A\" to 7, \"B\" to 13)\n>>> m\n{A=7, B=13}\n>>> m[\"C\"] = 13\n>>> m\n{A=7, B=13, C=13}\n>>> m.remove(\"A\")\n7\n>>> m\n{B=13, C=13}\n>>> m[\"B\"] = 42\n>>> m\n{B=42, C=13}\n\n```", "```\n>>> m.getOrPut(\"B\") { 99 }\n42\n>>> m\n{B=42, C=13}\n>>> m.getOrPut(\"D\") { 99 }\n99\n>>> m\n{B=42, C=13, D=99}\n\n```", "```\nfun histogram(fname: String): Map<String, Int> {\n  val file = java.io.File(fname)\n  val hist = mutableMapOf<String, Int>()\n\n  file.forEachLine {\n    if (it != \"\") {\n      val words = it.split(Regex(\"[ ,:;.?!<>()-]+\"))\n      for (word in words) {\n      \tif (word == \"\") continue\n\tval upword = word.toUpperCase()\n\thist[upword] = hist.getOrElse(upword) { 0 } + 1\n      }\n    }\n  }\n  return hist\n}\n\nif (args.size != 1) {\n  println(\"Usage: kotlinc -script histogram1.kts <file name>\")\n  kotlin.system.exitProcess(1)\n}\n\nval fname = args[0]\nval hist = histogram(fname)\nprintln(hist)\n\n```", "```\n$ kts histogram1.kts text.txt {WHEN=2, I=3, STARTED=1,\n    PROGRAMMING=1, THERE=1, WERE=2, NO=1, GRAPHICAL=2, DISPLAYS=2,\n    ALL=1, COMPUTER=7, INPUT=1, AND=2, OUTPUT=2, WAS=5, DONE=1,\n    USING=1, TEXT=1, A=9, SHARED=1, BY=4, MANY=1, USERS=2, EACH=1,\n    USER=2, CONNECTED=1, TO=3, THE=14, FROM=2, TERMINAL=3, WHICH=1,\n    IS=2, CALLED=1, THIS=1, WAY=1, BECAUSE=1, IT=1, ENDPOINT=1, OF=4,\n    CONNECTION=1, EARLIEST=1, TERMINALS=1, LOOKED=1, LIKE=1,\n    COMBINATION=1, PRINTER=1, WITH=4, KEYBOARD=2, IN=1, MIDDLE=1,\n    SCHOOL=1, SOMETIMES=1, ALLOWED=1, PLAY=1, THAT=2, USED=1, SUCH=1,\n    PRINTING=2, PRINTERS=1, LATER=1, REPLACED=1, CRT=1, COULD=1,\n    TYPICALLY=1, DISPLAY=1, MATRIX=1, 25X80=1, CHARACTERS=2, ASCII=1,\n    ALPHABET=1, LETTERS=1, DIGITS=1, SOME=1, SPECIAL=1, INTERACTED=1,\n    TYPING=1, COMMAND=2, ON=2, RESPONDED=1}\n\n```", "```\nfun printHistogram(h: Map<String, Int>) {\n  for ((word, count) in h)\n    println(\"%20s: %d\".format(word, count))\n}\n\n```", "```\n$ kts histogram2.kts text.txt \n                WHEN: 2\n                   I: 3\n             STARTED: 1\n         PROGRAMMING: 1\n               THERE: 1\n                WERE: 2\n                  NO: 1\n           GRAPHICAL: 2\n            DISPLAYS: 2\n                 ALL: 1\n            COMPUTER: 7\n               INPUT: 1\n                 AND: 2\n              OUTPUT: 2\n                 WAS: 5\n                DONE: 1\n               USING: 1\n                TEXT: 1\n                   A: 9\n              SHARED: 1\n                  BY: 4\n                MANY: 1\n               USERS: 2\n                EACH: 1\n                USER: 2\n           CONNECTED: 1\n                  TO: 3\n                 THE: 14\n                FROM: 2\n            TERMINAL: 3\n               WHICH: 1\n                  IS: 2\n              CALLED: 1\n                THIS: 1\n                 WAY: 1\n             BECAUSE: 1\n                  IT: 1\n            ENDPOINT: 1\n                  OF: 4\n          CONNECTION: 1\n            EARLIEST: 1\n           TERMINALS: 1\n              LOOKED: 1\n                LIKE: 1\n         COMBINATION: 1\n             PRINTER: 1\n                WITH: 4\n            KEYBOARD: 2\n                  IN: 1\n              MIDDLE: 1\n              SCHOOL: 1\n           SOMETIMES: 1\n             ALLOWED: 1\n                PLAY: 1\n                THAT: 2\n                USED: 1\n                SUCH: 1\n            PRINTING: 2\n            PRINTERS: 1\n               LATER: 1\n            REPLACED: 1\n                 CRT: 1\n               COULD: 1\n           TYPICALLY: 1\n             DISPLAY: 1\n              MATRIX: 1\n               25X80: 1\n          CHARACTERS: 2\n               ASCII: 1\n            ALPHABET: 1\n             LETTERS: 1\n              DIGITS: 1\n                SOME: 1\n             SPECIAL: 1\n          INTERACTED: 1\n              TYPING: 1\n             COMMAND: 2\n                  ON: 2\n           RESPONDED: 1\n\n```", "```\nfun printHistogram(h: Map<String, Int>) {\n  val s = h.toSortedMap()\n  for ((word, count) in s)\n    println(\"%20s: %d\".format(word, count))\n}\n\n```", "```\n$ kts histogram3.kts text.txt \n               25X80: 1\n                   A: 9\n                 ALL: 1\n             ALLOWED: 1\n            ALPHABET: 1\n                 AND: 2\n               ASCII: 1\n             BECAUSE: 1\n                  BY: 4\n              CALLED: 1\n          CHARACTERS: 2\n         COMBINATION: 1\n             COMMAND: 2\n            COMPUTER: 7\n           CONNECTED: 1\n          CONNECTION: 1\n               COULD: 1\n                 CRT: 1\n              DIGITS: 1\n             DISPLAY: 1\n            DISPLAYS: 2\n                DONE: 1\n                EACH: 1\n            EARLIEST: 1\n            ENDPOINT: 1\n                FROM: 2\n           GRAPHICAL: 2\n                   I: 3\n                  IN: 1\n               INPUT: 1\n          INTERACTED: 1\n                  IS: 2\n                  IT: 1\n            KEYBOARD: 2\n               LATER: 1\n             LETTERS: 1\n                LIKE: 1\n              LOOKED: 1\n                MANY: 1\n              MATRIX: 1\n              MIDDLE: 1\n                  NO: 1\n                  OF: 4\n                  ON: 2\n              OUTPUT: 2\n                PLAY: 1\n             PRINTER: 1\n            PRINTERS: 1\n            PRINTING: 2\n         PROGRAMMING: 1\n            REPLACED: 1\n           RESPONDED: 1\n              SCHOOL: 1\n              SHARED: 1\n                SOME: 1\n           SOMETIMES: 1\n             SPECIAL: 1\n             STARTED: 1\n                SUCH: 1\n            TERMINAL: 3\n           TERMINALS: 1\n                TEXT: 1\n                THAT: 2\n                 THE: 14\n               THERE: 1\n                THIS: 1\n                  TO: 3\n           TYPICALLY: 1\n              TYPING: 1\n                USED: 1\n                USER: 2\n               USERS: 2\n               USING: 1\n                 WAS: 5\n                 WAY: 1\n                WERE: 2\n                WHEN: 2\n               WHICH: 1\n                WITH: 4\n\n```", "```\n## Date: 9-7-94\n##\n...\nADHERES AH0 D HH IH1 R Z\nADHERING AH0 D HH IH1 R IH0 NG\nADHESIVE AE0 D HH IY1 S IH0 V\nADHESIVE(2) AH0 D HH IY1 S IH0 V\n...\n\n```", "```\nMINUTE  M IH1 N AH0 T\nMINUTE(2)  M AY0 N UW1 T\nMINUTE(3)  M AY0 N Y UW1 T\n\n```", "```\nfun readPronounciations(): Map<String,String> {\n  val file = java.io.File(\"cmudict.txt\")\n  var m = mutableMapOf<String, String>()\n  file.forEachLine {\n    l ->\n      if (l[0].isLetter()) {\n        val p = l.trim().split(Regex(\"\\\\s+\"), 2)\n        val word = p[0].toLowerCase()\n        if (!(\"(\" in word))\n\t  m[word] = p[1]\n      }\n  }\n  return m\n}\n\n```", "```\n>>> val m = readPronounciations()\n>>> m[\"minute\"]\nM IH1 N AH0 T\n>>> m[\"knight\"]\nN AY1 T\n>>> m[\"night\"]\nN AY1 T\n>>> m[\"weird\"]\nW IH1 R D\n\n```", "```\nfun reverseMap(m: Map<String, String>): Map<String,Set<String>> {\n  var r = mutableMapOf<String,MutableSet<String>>()\n  for ((word, pro) in m) {\n    val s = r.getOrElse(pro) { mutableSetOf<String>() }\n    s.add(word)\n    r[pro] = s\n  }\n  return r\n}\n\n```", "```\n>>> val r = reverseMap(m)\n>>> r[m[\"knight\"]]\n[knight, night, nite]\n>>> r[m[\"weird\"]]\n[weird]\n>>> r[m[\"minute\"]]\n[minot, minott, minute, mynatt]\n>>> r[m[\"be\"]]\n[b, b., be, bea, bee]\n\n```", "```\nfun showHomophones(k: Int) {\n  val m = readPronounciations()\n  var r = reverseMap(m)\n  for ((pro, words) in r) {\n    if (words.size >= k) {\n      print(\"$pro (${words.size} words):\")\n      println(\"  \" + words.joinToString(separator=\" \"))\n    }\n  }\n}\n\n```", "```\n>>> showHomophones(10)\nOW1 (10 words):  au aux eau eaux o o' o. oh ow owe\nS IY1 (10 words):  c c. cea cie sci sea see si sie sieh\nS IY1 Z (11 words):  c.'s c.s cees saez sea's seas sease sees seese seize sies\nK EH1 R IY0 (10 words):  carey carie carrie cary cheri kairey kari kary kerrey kerry\nF R IY1 Z (10 words):  freas frease frees freese freeze freis frese friese frieze friis\nSH UW1 (11 words):  hsu schoo schou schue schuh shew shiu shoe shoo shu shue\nL AO1 R IY0 (11 words):  laurie laury lawrie lawry lorey lori lorie lorrie lorry lory lowrie\nM EY1 Z (10 words):  mae's maes mais maize mase may's mayes mays mayse maze\nR OW1 (10 words):  reaux rheault rho ro roe roh rohe row rowe wroe\n\n```", "```\nfun findWords() {\n  val m = readPronounciations()\n  for ((word, pro) in m) {\n    val ord = word.substring(1)\n    if (pro == m[ord])\n      println(word)\n  }\n}\n\n```", "```\n>>> findWords()\nai\nailes\naisle\naisles\nar\neau\neaux\nee\neerie\neide\neiden\neike\neiler\neiseman\neisenberg\nel\nem\nen\neng\nes\neudy\neula\neury\nex\nextra\ngnats\ngnu\nherb\nhmong\nhour\nhours\nhwan\nhwang\nknab\nknabb\nknack\nknapp\nknapper\nknauer\nknaus\nknauss\nknave\nkneale\nknebel\nknee\nkneece\nkneed\nkneel\nkneer\nknees\nknell\nkneller\nkness\nknew\nknicely\nknick\nknicks\nknies\nkniess\nknight\nknight's\nknightly\nknights\nknill\nknipp\nknipper\nknipple\nknit\nknobbe\nknoble\nknock\nknode\nknoell\nknoles\nknoll\nknope\nknot\nknoth\nknots\nknott\nknuckles\nknut\nknuts\nllama\nllana\nllanes\nllano\nllewellyn\nlloyd\nmme\nmmonoxide\nngo\nourso\npfahl\npfarr\npfeffer\npfister\npfizer\npfohl\npfund\npsalter\npsalters\npty\nscent\nscents\nschau\nwhole\nwhorton\nwrack\nwracked\nwracking\nwrage\nwrap\nwrapped\nwrappers\nwrath\nwrather\nwray\nwreck\nwrecker\nwren\nwrench\nwrenn\nwrest\nwresting\nwriggle\nwright\nwright's\nwrights\nwring\nwringer\nwringing\nwrisley\nwrist\nwriston\nwrite\nwriter\nwrites\nwrobel\nwroe\nwrona\nwrote\nwroten\nwrought\nwrubel\nwruck\nwrung\nwrye\nyu\n\n```"]