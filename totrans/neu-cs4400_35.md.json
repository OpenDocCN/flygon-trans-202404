["```\n(run \"{with {x 3}\u00a0 \u00a0 \u00a0 \u00a0 {with {f {fun {y} {+ x y}}}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {with {x 5}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {call f 4}}}}\")\n```", "```\n(let ((x 3))\u00a0 (let ((f (lambda (y) (+ x y))))\u00a0 \u00a0 (let ((x 5))\u00a0 \u00a0 \u00a0 (f 4))))\n```", "```\n(let ((x 3))\u00a0 (let ((f (lambda (y) (+ x y))))\u00a0 \u00a0 (let ((x 5))\u00a0 \u00a0 \u00a0 (funcall f 4))))\n```", "```\n(defun blah (func val)\u00a0 (funcall func val))(let ((x 3))\u00a0 (let ((f (lambda (y) (+ x y))))\u00a0 \u00a0 (let ((x 5))\u00a0 \u00a0 \u00a0 (blah f 4))))\n```", "```\n(defun blah (func x)\u00a0 (funcall func x))(let ((x 3))\u00a0 (let ((f (lambda (y) (+ x y))))\u00a0 \u00a0 (let ((x 5))\u00a0 \u00a0 \u00a0 (blah f 4))))\n```", "```\n(defun return-x ()\u00a0 x)\n```", "```\n(return-x)\n```", "```\n(let ((x 5)) (return-x))\n```", "```\n(defun foo (x)\u00a0 (return-x))(foo 5)\n```", "```\n#lang pl dynamic(define x 123)(define (getx) x)(define (bar1 x) (getx))(define (bar2 y) (getx))(test (getx) => 123)(test (let ([x 456]) (getx)) => 456)(test (getx) => 123)(test (bar1 999) => 999)(test (bar2 999) => 123)(define (foo x) (define (helper) (+ x 1)) helper)(test ((foo 0)) => 124);; and *much* worse:(define (add x y) (+ x y))(test (let ([+ *]) (add 6 7)) => 42)\n```", "```\n#lang pl dynamic(define tax% 6.5)(define (with-tax n)\u00a0 (+ n (* n (/ tax% 100))))(with-tax 10) ; how much do we pay?(let ([tax% 18.0]) (with-tax 10)) ; how much would we pay in Israel?;; make that into a function(define il-tax% 18.0)(define (us-over-il-saving n)\u00a0 (- (let ([tax% il-tax%]) (with-tax n))\u00a0 \u00a0  (with-tax n)))(us-over-il-saving 10);; can even control that: how much would we save if;; the tax in israel went down one percent?(let ([il-tax% (- il-tax% 1)]) (us-over-il-saving 10))\n```", "```\n#lang racket(define tax% (make-parameter 6.5))\u00a0 ; create the dynamic container(define (with-tax n)\u00a0 (+ n (* n (/ (tax%) 100))))\u00a0 \u00a0 \u00a0  ; note how its value is accessed(with-tax 10) ; how much do we pay?(parameterize ([tax% 18.0]) (with-tax 10)) ; not a `let';; make that into a function(define il-tax% (make-parameter 18.0))(define (us-over-il-saving n)\u00a0 (- (parameterize ([tax% (il-tax%)]) (with-tax n))\u00a0 \u00a0  (with-tax n)))(us-over-il-saving 10)(parameterize ([il-tax% (- (il-tax%) 1)]) (us-over-il-saving 10))\n```"]