- en: '23Processing Programs: Parsing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 23处理程序：解析
- en: '|     [23.1 Understanding Languages by Writing Programs About Them](#%28part._.Understanding_.Languages_by_.Writing_.Programs_.About_.Them%29)
    |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|     [23.1 通过编写关于它们的程序来理解语言](#%28part._.Understanding_.Languages_by_.Writing_.Programs_.About_.Them%29)
    |'
- en: '|     [23.2 Everything (We Will Say) About Parsing](#%28part._.Everything__.We_.Will_.Say__.About_.Parsing%29)
    |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|     [23.2 解析（我们将谈论的内容）](#%28part._.Everything__.We_.Will_.Say__.About_.Parsing%29)
    |'
- en: '|       [23.2.1 A Lightweight, Built-In First Half of a Parser](#%28part._.A_.Lightweight__.Built-.In_.First_.Half_of_a_.Parser%29)
    |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '|       [23.2.1 解析器的轻量级内置前半部分](#%28part._.A_.Lightweight__.Built-.In_.First_.Half_of_a_.Parser%29)
    |'
- en: '|       [23.2.2 Completing the Parser](#%28part._first-parser%29) |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|       [23.2.2 完成解析器](#%28part._first-parser%29) |'
- en: '|       [23.2.3 Coda](#%28part._.Coda%29) |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|       [23.2.3 Coda](#%28part._.Coda%29) |'
- en: 23.1Understanding Languages by Writing Programs About Them
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 23.1通过编写关于它们的程序来理解语言
- en: 'We will understand the nature of languages by writing programs about them.
    These programs will implement many interesting features of languages from different
    perspectives, embodied in different actions:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写与它们相关的程序来理解语言的本质。这些程序将从不同的角度实现语言的许多有趣特性，体现在不同的行为中：
- en: An interpreter will consume programs in a language and produce the answers they
    are expected to produce.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个解释器会接受某种语言的程序，并产生它们应该产生的答案。
- en: A type checker will consume programs in a language and produce either true or
    false, depending on whether the program has consistent type annotations.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型检查器会接受某种语言的程序，并根据程序是否具有一致的类型注释而产生真或假。
- en: A pretty-printer will consume programs in a language and print them, prettified
    in some way.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个漂亮的打印程序会接受某种语言的程序并打印它们，以某种方式美化它们。
- en: A verifier will consume programs in a language and check whether they satisfy
    some stated property.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个验证器会接受某种语言的程序，并检查它们是否满足某种规定的属性。
- en: A transformer will consume programs in a language and produce related but different
    programs in the same language.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个变换器会接受某种语言的程序，并产生相关但不同的程序，语言相同。
- en: A transformer’s first cousin, a compiler, will consume programs in a language
    and produce related programs in a different language (which in turn can be interpreted,
    type-checked, pretty-printed, verified, transformed, even compiled...).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个变换器的表兄弟，一个编译器，会接受某种语言的程序，并产生不同语言中的相关程序（然后可以被解释，类型检查，漂亮打印，验证，转换，甚至编译...）。
- en: Observe that in each of these cases, we have to begin by consuming (the representation
    of) a program. We will briefly discuss how we do this quickly and easily, so that
    in the rest of our study we can focus on the remainder of each of these actions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这些情况下，我们都必须首先接受（表示）一个程序。我们将简要讨论如何快速轻松地做到这一点，以便在我们的学习的其余部分中，我们可以专注于每个这些操作的其余部分。
- en: 23.2Everything (We Will Say) About Parsing
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 23.2关于解析的一切（我们将要说的）
- en: '[☛ Parsing](glossary.html#%28elem._glossary-parsing%29) is a very general actvity
    whose difficulty depends both on how complex or ambiguous the input might be,
    and how much stucture we expect of the parser’s output. For our purposes, we would
    like the parser to be maximally helpful by providing later stages as much structure
    as possible. This forces us to either write a very complex parser or limit the
    forms of legal input. We will choose the latter.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[☛ 解析](glossary.html#%28elem._glossary-parsing%29) 是一种非常普遍的活动，其难度取决于输入的复杂性或模糊性，以及我们期望解析器输出的结构。对于我们的目的，我们希望解析器尽可能地提供后续阶段所需的结构。这迫使我们要么编写一个非常复杂的解析器，要么限制合法输入的形式。我们将选择后者。'
- en: 'A key problem of parsing is the management of ambiguity: when a given expression
    can be parsed in multiple different ways. For instance, the input'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 解析的一个关键问题是管理歧义：当给定表达式可以以多种不同的方式解析时。例如，输入
- en: '| 23 + 5 * 6 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 23 + 5 * 6 |'
- en: 'could parse in two different ways: either the multiplication should be done
    first followed by addition, or vice versa. Though simple disambiguation rules
    (that you probably remember from middle school) disambigiuate arithmetic, the
    problem is much harder for full-fledged programming languages.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过两种不同的方式解析：乘法应该首先执行，然后是加法，或者反之。虽然简单的消歧规则（你可能记得从中学）可以消除算术中的歧义，但对于全功能的编程语言来说，这个问题要困难得多。
- en: 'Ultimately, we would like to get rid of ambiguity once-and-for-all at the very
    beginning of processing the program, rather than deal with it repeatedly in each
    of the ways we might want to process it. Thus, if we follow the standard rules
    of arithmetic, we would want the above program to turn into a tree that has a
    (representation of) addition at its root, a (representation of) 23 as its left
    child, multiplication as its right child, and so on. This is called an abstract
    syntax tree: it is “abstract” because it represents the intent of the program
    rather than its literal syntactic structure (spaces, indentation, etc.); it is
    “syntax” because it represents the program that was given; and it is usually a
    “tree” but not always.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们希望在处理程序的最开始就彻底消除歧义，而不是在每种处理方式中重复处理它。因此，如果我们遵循标准的算术规则，我们希望上述程序变成一个树，它的根部有一个（表示的）加法，它的左子树有一个（表示的）23，乘法作为它的右子树，等等。这被称为抽象语法树：它是“抽象的”，因为它代表了程序的意图，而不是其字面的语法结构（空格、缩进等）；它是“语法的”，因为它表示了给定的程序；它通常是一个“树”，但不总是。
- en: 'As we have said, we could push the problem of disambiguation onto a parser.
    This is what most real languages do. Because parsing is not our concern, we are
    instead going to ask the program’s author to use an unambiguous syntax. Indeed,
    we can exploit the decades of work that has been invested into [☛ wire format](glossary.html#%28elem._glossary-wire._format%29)
    to represent programs. For instance, the above expression might be written—<wbr>avoiding
    the ambiguity induced by not properly parenthesizing the program—<wbr>as:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，我们可以将消除歧义的问题推给解析器。这就是大多数真实语言所做的。因为解析不是我们的关注点，所以我们将要求程序的作者使用一个明确的语法。事实上，我们可以利用已经投入到[☛
    wire format](glossary.html#%28elem._glossary-wire._format%29)中的几十年工作来表示程序。例如，上面的表达式可能被写成——<wbr>避免由于不正确地给程序加上括号而引起的歧义——如下所示：
- en: '| <plus> |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| <plus> |'
- en: '|   <args> |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|   <args> |'
- en: '|     <arg position="1"> |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|     <arg position="1"> |'
- en: '|       <number value="23"/> |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|       <number value="23"/> |'
- en: '|     </arg> |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|     </arg> |'
- en: '|     <arg position="2"> |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|     <arg position="2"> |'
- en: '|       <mult> |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '|       <mult> |'
- en: '|         <args> |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|         <args> |'
- en: '|           <arg position="1"> |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|           <arg position="1"> |'
- en: '|             <number value="5"/> |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|             <number value="5"/> |'
- en: '|           </arg> |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|           </arg> |'
- en: '|           <arg position="2"> |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|           <arg position="2"> |'
- en: '|             <number value="6"/> |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|             <number value="6"/> |'
- en: '|           </arg> |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|           </arg> |'
- en: '|         </args> |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|         </args> |'
- en: '|       </mult> |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|       </mult> |'
- en: '|     </arg> |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|     </arg> |'
- en: '|   <args> |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|   <args> |'
- en: '| </plus> |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| </plus> |'
- en: in XML, or as
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在XML中，或者作为
- en: '| {plus: |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| {plus: |'
- en: '|   [{number: "23"}, |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '|   [{number: "23"}, |'
- en: '|    {mult: |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '|    {mult: |'
- en: '|      [{number: "5"}, |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '|      [{number: "5"}, |'
- en: '|       {number: "6"}]}]} |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '|       {number: "6"}]}]} |'
- en: in JSON.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在JSON中。
- en: 23.2.1A Lightweight, Built-In First Half of a Parser
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.2.1 解析器的轻量级内置前半部分
- en: These are both worthy notations. Instead, we will use a related, and arguably
    even simpler, wire format known as the s-expression:The name comes from Lisp.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种都是值得注意的符号。但我们将使用一种相关的、甚至可以说更简单的格式，称为s表达式：这个名字来自于Lisp。
- en: '| (+ 23 (* 5 6)) |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| (+ 23 (* 5 6)) |'
- en: Pyret has built-in support for processing s-expressions, so you can use this
    syntax and get support from the language to process it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Pyret内置支持处理s表达式，因此您可以使用这种语法，并从语言中获得支持来处理它。
- en: Do Now!
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在动手！
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Load the s-expression library with
  id: totrans-54
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用以下命令加载s表达式库
- en: ''
  id: totrans-55
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-56
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'and then try the following:'
  id: totrans-58
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 然后尝试以下内容：
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-60
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Make sure you understand the output it produced and why it produced that.
  id: totrans-62
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 确保你理解它产生的输出以及它为什么产生了那样的输出。
- en: 'You should have seen the following output:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经看到了以下输出：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this book we will use s-expressions to represent concrete syntax. This is
    helpful because the syntax is so different from that of Pyret, we will virtually
    never be confused as to what language we are reading. Since we will be writing
    programs to process programs, it is especially helpful to keep apart the program
    being processed and that doing the processing. For us, the former will be written
    in s-expressions and the latter in Pyret.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用s表达式来表示具体的语法。这是有帮助的，因为语法与Pyret的语法非常不同，我们几乎不会混淆我们正在阅读的语言。由于我们将编写用于处理程序的程序，因此将被处理的程序与进行处理的程序分开是特别有帮助的。对于我们来说，前者将用s表达式编写，后者将用Pyret编写。
- en: 23.2.2Completing the Parser
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.2.2 完成解析器
- en: 'In principle, we can think of read-s-exp as a complete parser. However, its
    output is generic: it represents the token structure without offering any comment
    on its intent. We would instead prefer to have a representation that tells us
    something about the intended meaning of the terms in our language, just as we
    wrote at the very beginning: “(representation of) multiplication”, and so on.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，我们可以将read-s-exp视为完整的解析器。但是，它的输出是通用的：它表示了令牌结构，而没有对其意图提供任何评论。相反，我们更希望有一个表示，告诉我们有关我们语言中术语意图的东西，就像我们在一开始写的那样：“（表示）乘法”，等等。
- en: 'To do this, first let’s import the necessary libraries:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，首先让我们导入必要的库：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now down to business. We must first introduce a datatype that captures this
    representation. We will separately discuss ([Representing Arithmetic](first-interp.html#%28part._dt-for-arith%29))
    how and why we obtained this datatype, but for now let’s say it’s given to us:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始正题。我们必须首先引入一个捕获此表示的数据类型。我们将分别讨论（[表示算术](first-interp.html#%28part._dt-for-arith%29)）如何以及为什么获得了此数据类型，但现在让我们假设它是给定的：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We then need a function that will convert s-expressions into instances of this
    datatype. This is the other half of our parser:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要一个函数，它将s表达式转换为此数据类型的实例。这是我们解析器的另一半：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This obeys the following tests:Note the use of a helper function inside the
    block of tests.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这遵循以下测试：注意在测试块内部使用了一个辅助函数。
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Congratulations! You have just completed your first representation of a program.
    From now on we can focus entirely on programs represented as recursive trees,
    ignoring the vagaries of surface syntax and how to get them into the tree form
    (though in practice, we will continue to use the s-expression notation because
    it’s easier to type than all those constructors). We’re finally ready to start
    studying programming languages!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你刚刚完成了你的第一个程序表示。从现在开始，我们可以完全专注于以递归树形式表示的程序，不再关注表面语法的变化以及如何将它们转换成树形式（尽管在实践中，我们将继续使用s表达式符号，因为它比所有这些构造器更容易输入）。我们终于准备好开始学习编程语言了！
- en: Exercise
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If the test
  id: totrans-79
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果测试
- en: ''
  id: totrans-80
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-81
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ''
  id: totrans-82
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: is instead written as
  id: totrans-83
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 而是写成
- en: ''
  id: totrans-84
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-85
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
- en: ''
  id: totrans-86
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: what happens? Why?
  id: totrans-87
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 发生了什么？为什么？
- en: 23.2.3Coda
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.2.3结语
- en: 'The s-expression syntax dates back to 1960.“Recursive functions of symbolic
    expressions and their computation by machine, Part I” by John McCarthy in Communications
    of the ACM. This syntax is often controversial amongst programmers. Observe, however,
    something deeply valuable that it gives us. While parsing traditional languages
    can be very complex, parsing this syntax is virtually trivial. Given a sequence
    of tokens corresponding to the input, it is absolutely straightforward to turn
    parenthesized sequences into s-expressions; it is equally straightforward (as
    we see above) to turn s-expressions into proper syntax trees. I like to call such
    two-level languages bicameral, in loose analogy to government legislative houses:
    the lower-level does rudimentary well-formedness checking, while the upper-level
    does deeper validity checking. (We haven’t done any of the latter yet, but we
    will [REF].)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: s表达式语法可以追溯到1960年。约翰·麦卡锡在ACM通讯中发表的“递归符号表达式及其机器计算，第I部分”。这种语法在程序员中经常引起争议。然而，请注意它为我们提供的一些深层次的宝贵东西。尽管解析传统语言可能非常复杂，但解析此语法几乎是微不足道的。给定与输入相对应的一系列标记，将带括号的序列转换为s表达式绝对是直截了当的；同样直截了当（正如我们上面看到的），将s表达式转换为适当的语法树也是直截了当的。我喜欢将这种两级语言称为双院制，这与政府立法机构的松散类比相似：低层级执行基本的格式检查，而上层级执行更深入的有效性检查。（我们还没有做任何后者，但我们会[REF]。）
- en: The virtues of this syntax are thus manifold. The amount of code it requires
    is small, and can easily be embedded in many contexts. By integrating the syntax
    into the language, it becomes easy for programs to manipulate representations
    of programs (as we will see more of in [REF]). It’s therefore no surprise that
    even though many Lisp-based languages—<wbr>from Lisp 1.5 to Common Lisp to Scheme
    to Racket to Clojure and more—<wbr>have had wildly different semantics, they all
    share this syntactic legacy.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这种语法的优点是多方面的。它所需的代码量很小，并且可以轻松嵌入到许多上下文中。通过将语法集成到语言中，程序可以轻松地操作程序的表示（正如我们将在[REF]中看到的那样）。因此，毫不奇怪，即使许多基于Lisp的语言——从Lisp
    1.5到Common Lisp再到Scheme再到Racket再到Clojure等——具有完全不同的语义，它们都共享这种语法遗产。
- en: Of course, we could just use XML instead. That might be much nicer. Or JSON.
    Because that wouldn’t be anything like an s-expression at all.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们也可以使用XML。那可能会更好。或者JSON。因为那根本不像s表达式。
