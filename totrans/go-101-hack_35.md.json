["```\nfile, err := os.Open(\"file.go\") // For read access.\nif err != nil {\n    log.Fatal(err)\n} \ndefer file.Close() \n```", "```\ntype error interface {\n    Error() string\n} \n```", "```\npackage errors\n\nfunc New(text string) error {\n    return &errorString{text}\n}\n\ntype errorString struct {\n    s string\n}\n\nfunc (e *errorString) Error() string {\n    return e.s\n} \n```", "```\npackage main\n\nimport (\n    \"errors\"\n    \"fmt\"\n)\n\nfunc maxElem(s []int) (int, error) {\n    if len(s) == 0 {\n        return 0, errors.New(\"The slice must be non-empty!\")\n    }\n\n    max := s[0]\n    for _, v := range s[1:] {\n        if v > max {\n            max = v\n        }\n    }\n    return max, nil\n}\n\nfunc main() {\n    s := []int{}\n    _, err := maxElem(s)\n    if err != nil {\n        fmt.Println(err)\n    }\n} \n```", "```\nThe slice must be non-empty! \n```", "```\nfunc maxElem(s []int) (int, error) {\n    ......\n    if len(s) == 0 {\n        return 0, fmt.Errorf(\"The slice must be non-empty!\")\n    }\n    ......\n} \n```"]