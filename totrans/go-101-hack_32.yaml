- en: Goroutine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Goroutine
- en: Goroutine
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Goroutine
- en: 'A running `Go` program is composed of one or more goroutines, and each goroutine
    can be considered as an independent task. Goroutine and thread have many commonalities,
    such as: every goroutine(thread) has its private stack and registers; if the main
    goroutine(thread) exits, the program will exit, and so on. But on modern Operating
    System (E.g., `Linux`), the actual execution and scheduled unit is thread, so
    if a goroutine wants to become running, it must "attach" to a thread. Let''s see
    an example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 运行中的`Go`程序由一个或多个goroutine组成，每个goroutine都可以被视为一个独立的任务。 Goroutine和线程有许多共同点，例如：每个goroutine（线程）都有其私有的堆栈和寄存器；如果主goroutine（线程）退出，则程序将退出，等等。但是在现代操作系统（例如，`Linux`）上，实际执行和调度的单位是线程，因此如果goroutine希望变为运行状态，它必须“附加”到一个线程。让我们看一个例子：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'What the program does is just sleeping for a while, not does anything useful.
    After launching it on `Linux`, use `Delve` to attach the running process and observe
    the details of it:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的作用只是睡一会儿，不做任何有用的事情。在`Linux`上启动它，使用`Delve`附加到正在运行的进程并观察其详细信息：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can see there are `5` threads of this process, let''s confirm it by checking
    `/proc/1040/task/` directory:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到该进程有`5`个线程，请通过检查`/proc/1040/task/`目录来确认：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Yeah, the thread information of `Delve` is right! Check the particulars of
    goroutines:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，`Delve`的线程信息是正确的！检查goroutine的细节：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There is only one `main` goroutine, what the hell of the other `3` goroutines?
    Actually, the other `3` goroutines are system goroutines, and you can refer related
    info [here](https://github.com/derekparker/delve/issues/553). The number of `main`
    goroutine is `1`, and you can inspect it:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一个`main` goroutine，其他`3`个goroutine到底是什么鬼？实际上，其他`3`个goroutine是系统goroutine，你可以参考相关信息[这里](https://github.com/derekparker/delve/issues/553)。`main`
    goroutine的数量是`1`，你可以检查它：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Using `go` keyword can create and start a goroutine, see another case:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`go`关键字可以创建并启动一个goroutine，看另一个案例：
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `go func` statement spawns another goroutine which works as a producer;
    while the `main` goroutine behaves as a consumer. And the output should be:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`go func`语句生成另一个作为生产者的goroutine；而`main` goroutine则作为消费者。输出应该是：'
- en: '[PRE6]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Use `Delve` to check the goroutine aspects:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Delve`检查goroutine方面：
- en: '[PRE7]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The number of `main` goroutine is `1`, whilst `func` is `5`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`main` goroutine的数量是`1`，而`func`是`5`。'
- en: Another caveat you should pay attention to is the switch point among goroutines.
    It can be blocking system call, channel operations, etc.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个你应该注意的警告是goroutine之间的切换点。它可以是阻塞的系统调用、通道操作等。
- en: 'Reference:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '参考:'
- en: '[Effective Go](https://golang.org/doc/effective_go.html#goroutines);'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[Effective Go](https://golang.org/doc/effective_go.html#goroutines);'
- en: '[Performance without the event loop](http://dave.cheney.net/2015/08/08/performance-without-the-event-loop);'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[没有事件循环的性能](http://dave.cheney.net/2015/08/08/performance-without-the-event-loop);'
- en: '[How Goroutines Work](http://blog.nindalf.com/how-goroutines-work/).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[Goroutines如何工作](http://blog.nindalf.com/how-goroutines-work/)。'
