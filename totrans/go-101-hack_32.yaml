- en: Goroutine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Goroutine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A running `Go` program is composed of one or more goroutines, and each goroutine
    can be considered as an independent task. Goroutine and thread have many commonalities,
    such as: every goroutine(thread) has its private stack and registers; if the main
    goroutine(thread) exits, the program will exit, and so on. But on modern Operating
    System (E.g., `Linux`), the actual execution and scheduled unit is thread, so
    if a goroutine wants to become running, it must "attach" to a thread. Let''s see
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'What the program does is just sleeping for a while, not does anything useful.
    After launching it on `Linux`, use `Delve` to attach the running process and observe
    the details of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see there are `5` threads of this process, let''s confirm it by checking
    `/proc/1040/task/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Yeah, the thread information of `Delve` is right! Check the particulars of
    goroutines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There is only one `main` goroutine, what the hell of the other `3` goroutines?
    Actually, the other `3` goroutines are system goroutines, and you can refer related
    info [here](https://github.com/derekparker/delve/issues/553). The number of `main`
    goroutine is `1`, and you can inspect it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `go` keyword can create and start a goroutine, see another case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `go func` statement spawns another goroutine which works as a producer;
    while the `main` goroutine behaves as a consumer. And the output should be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `Delve` to check the goroutine aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The number of `main` goroutine is `1`, whilst `func` is `5`.
  prefs: []
  type: TYPE_NORMAL
- en: Another caveat you should pay attention to is the switch point among goroutines.
    It can be blocking system call, channel operations, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Effective Go](https://golang.org/doc/effective_go.html#goroutines);'
  prefs: []
  type: TYPE_NORMAL
- en: '[Performance without the event loop](http://dave.cheney.net/2015/08/08/performance-without-the-event-loop);'
  prefs: []
  type: TYPE_NORMAL
- en: '[How Goroutines Work](http://blog.nindalf.com/how-goroutines-work/).'
  prefs: []
  type: TYPE_NORMAL
