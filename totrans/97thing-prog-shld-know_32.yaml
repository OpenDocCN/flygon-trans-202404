- en: Encapsulate Behavior, not Just State
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 封装行为，而不仅仅是状态
- en: Encapsulate Behavior, not Just State
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 封装行为，而不仅仅是状态
- en: In systems theory, containment is one of the most useful constructs when dealing
    with large and complex system structures. In the software industry the value of
    containment or encapsulation is well understood. Containment is supported by programming
    language constructs such as subroutines and functions, modules and packages, classes,
    and so on.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统理论中，封装是处理大型和复杂系统结构时最有用的构造之一。在软件行业中，封装的价值是被充分理解的。封装得到编程语言构造的支持，如子程序和函数、模块和包、类等。
- en: Modules and packages address the larger scale needs for encapsulation, while
    classes, subroutines, and functions address the more fine-grained aspects of the
    matter. Over the years I have discovered that classes seem to be one of the hardest
    encapsulation constructs for developers to get right. It's not uncommon to find
    a class with a single 3000-line main method, or a class with only *set* and *get*
    methods for its primitive attributes. These examples demonstrate that the developers
    involved have not fully understood object-oriented thinking, having failed to
    take advantage of the power of objects as modeling constructs. For developers
    familiar with the terms POJO (Plain Old Java Object) and POCO (Plain Old C# Object
    or Plain Old CLR Object), this was the intent in going back to the basics of OO
    as a modeling paradigm — the objects are plain and simple, but not dumb.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 模块和包解决了封装的更大规模需求，而类、子程序和函数解决了更细粒度的问题。多年来，我发现类似是开发人员最难正确使用的封装构造之一。发现一个只有一个3000行主方法的类，或者一个只有*set*和*get*方法用于其基本属性的类并不罕见。这些例子表明，涉及的开发人员并没有完全理解面向对象思维，未能充分利用对象作为建模构造的力量。对于熟悉POJO（Plain
    Old Java Object）和POCO（Plain Old C# Object或Plain Old CLR Object）术语的开发人员来说，这是回归面向对象作为建模范式的初衷——对象是朴素而简单的，但并不愚蠢。
- en: 'An object encapsulates both state and behavior, where the behavior is defined
    by the actual state. Consider a door object. It has four states: closed, open,
    closing, opening. It provides two operations: open and close. Depending on the
    state, the open and close operations will behave differently. This inherent property
    of an object makes the design process conceptually simple. It boils down to two
    simple tasks: allocation and delegation of responsibility to the different objects
    including the inter-object interaction protocols.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一个对象封装了状态和行为，其中行为由实际状态定义。考虑一个门对象。它有四种状态：关闭、打开、关闭中、打开中。它提供两个操作：打开和关闭。根据状态，打开和关闭操作将有不同的行为。对象的这种固有属性使得设计过程在概念上变得简单。它归结为两个简单的任务：分配和委托责任给不同的对象，包括对象间的交互协议。
- en: 'How this works in practice is best illustrated with an example. Let''s say
    we have three classes: Customer, Order, and Item. A Customer object is the natural
    placeholder for the credit limit and credit validation rules. An Order object
    knows about its associated Customer, and its addItem operation delegates the actual
    credit check by calling `customer.validateCredit(item.price())`. If the postcondition
    for the method fails, an exception can be thrown and the purchase aborted.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这在实践中如何运作最好通过一个例子来说明。假设我们有三个类：Customer、Order和Item。Customer对象是信用额度和信用验证规则的自然占位符。Order对象知道其关联的Customer，并且其addItem操作通过调用`customer.validateCredit(item.price())`来委托实际的信用检查。如果方法的后置条件失败，可以抛出异常并中止购买。
- en: Less experienced object oriented developers might decide to wrap all the business
    rules into an object very often referred to as `OrderManager` or `OrderService`.
    In these designs, `Order`, `Customer`, and `Item` are treated as little more than
    record types. All logic is factored out of the classes and tied together in one
    large, procedural method with a lot of internal *if-then-else* constructs. These
    methods are easily broken and are almost impossible to maintain. The reason? The
    encapsulation is broken.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 经验不足的面向对象开发人员可能会决定将所有业务规则封装到一个经常被称为`OrderManager`或`OrderService`的对象中。在这些设计中，`Order`、`Customer`和`Item`被视为几乎只是记录类型。所有逻辑都被分解出类，并在一个大型的过程方法中用许多内部*if-then-else*结构绑定在一起。这些方法很容易被破坏，几乎不可能维护。原因是？封装被破坏了。
- en: So in the end, don't break the encapsulation, and use the power of your programming
    language to maintain it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最终，不要破坏封装，并利用编程语言的力量来维护它。
- en: By [Einar Landre](http://programmer.97things.oreilly.com/wiki/index.php/Einar_Landre)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Einar Landre](http://programmer.97things.oreilly.com/wiki/index.php/Einar_Landre)提供
