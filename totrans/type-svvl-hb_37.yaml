- en: オブジェクトで受け、オブジェクトを返す (RORO)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接收对象并返回对象（RORO）
- en: 原文：[https://typescriptbook.jp/tips/receive-an-object-return-an-object](https://typescriptbook.jp/tips/receive-an-object-return-an-object)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/tips/receive-an-object-return-an-object](https://typescriptbook.jp/tips/receive-an-object-return-an-object)
- en: 関数やメソッドでオブジェクトひとつを引数として受け、戻り値もオブジェクトひとつとする RORO という考え方があります。RORO は **Receive
    an Object, Return an Object** の略です。この考えは JavaScript ならびに TypeScript では大きな恩恵をもたらします。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种思想叫做 RORO，即在函数或方法中接收一个对象作为参数，并返回一个对象。RORO 是 **Receive an Object, Return an
    Object** 的缩写。这种思想在 JavaScript 和 TypeScript 中都有很大的好处。
- en: いままでの関数[​](#いままでの関数 "いままでの関数 への直接リンク")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以前的函数[​](#いままでの関数 "いままでの関数 への直接リンク")
- en: JavaScript に限らず、駆け出しの頃の関数はこのような姿形をしています。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅是 JavaScript，初学者时期的函数通常具有这种形式。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 好きなパラメータで検索できるようにか、引数自体を省略可能にして検索できるようにしています。とはいえ次の問題が立ちはだかります。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能���搜索喜欢的参数��我们使参数本身也是可选的。然而，接下来会遇到一个问题。
- en: 引数が追加されたとき[​](#引数が追加されたとき "引数が追加されたとき への直接リンク")
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当参数被添加时[​](#引数が追加されたとき "引数が追加されたとき への直接リンク")
- en: 居住地と国籍は違う！とパラメータとして国籍(`nationality`)が追加されたとします。このとき国籍はどこに追加されるでしょうか?`isVip`の次が安全ですが人によってはその位置を嫌うかもしれません。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设居住地和国籍不同！并且作为参数添加了国籍(`nationality`)。在这种情况下，国籍应该添加在哪里？在`isVip`之后是安全的，但有些人可能不喜欢这个位置。
- en: また、今回は`findUser()`という関数に限定しての話にしていますが、同じような引数をとる`~~~User()`のメソッドがあれば何箇所も同時に修正が必要になるでしょう。これは面倒です。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虽然我们只讨论了`findUser()`函数，但如果存在类似参数的`~~~User()`方法，那么可能需要同时修改多个地方。这很麻烦。
- en: 省略可能でない引数がある他の関数の場合[​](#省略可能でない引数がある他の関数の場合 "省略可能でない引数がある他の関数の場合 への直接リンク")
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于其他函数存在不可省略参数的情况[​](#省略可能でない引数がある他の関数の場合 "省略可能でない引数がある他の関数の場合 への直接リンク")
- en: 引数のうち、省略可能であるものは右側 (後ろ) に詰めて書かなければいけません。今回は検索ですべての引数を省略可能にしていますが、ものによっては国 (`country`)
    のみは必須入力とする関数を作るとなれば、それだけは関数の第 1 引数にせざるを得ません。このような問題が生じれば引数が追加されたときと同じように引数の並びで混乱を生むでしょう。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可选参数必须放在右侧（后面）。在这种情况下，我们使所有参数都是可选的，但有些情况下，如果要创建一个只有国家 (`country`) 是必填的函数，那么它必须成为函数的第一个参数。这种情况会导致与添加参数时相同的混乱。
- en: このような問題を解決するものとしてオブジェクトに必要な情報をひとつに詰めて引数に送るROROという考えがあります。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为解决这个问题的方法，有一个叫做 RORO 的概念，它将对象中必要的信息打包到一个参数中传递。
- en: RORO (Receive an Object, Return an Object)[​](#roro-receive-an-object-return-an-object
    "RORO (Receive an Object, Return an Object) への直接リンク")
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RORO (Receive an Object, Return an Object)[​](#roro-receive-an-object-return-an-object
    "RORO (Receive an Object, Return an Object) への直接リンク")
- en: 上記ユーザーであればデータクラスのような (ただのデータだけ入った可視性 public のクラス) を作れば問題は回避できます。 TypeScript
    でその型を`UserInfo`とすれば`UserInfo`は次になります。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上述用户，如果创建一个类似数据类（只包含公共数据的类）就可以避免这个问题。在 TypeScript 中将其类型命名为`UserInfo`，`UserInfo`将如下所示。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 今回は律儀に`Optional`の`?`をつけましたが`Partial<T>`でも代用可です。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`Optional`的`?`是很正式的，但也可以使用`Partial<T>`来代替。
- en: このようにしてこの型のオブジェクトを引数の型としてひとつ受けるようにします。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您可以将此类型的对象作为参数类型接收一个。
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: これでは JavaScript ならびに TypeScript で使える便利な Tip というよりは、ただの Tip です。ではこれはなぜ JavaScript,
    TypeScript で重用されるのかというと、分割代入が関係しています。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅仅是 JavaScript 和 TypeScript 中有用的技巧，而是一个简单的技巧。为什么这在 JavaScript 和 TypeScript
    中如此重要呢？这与解构赋值有关。
- en: 分割代入を使うと関数はオブジェクトのキーを引数に指定するだけでその値にアクセスできます。たとえば`findUserByName()`と名前 (`name`)
    しか必要のない関数で`UserInfo`をすべて受けるのではなく分割代入を使うとこのようになります。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用解构赋值，函数只需指定对象的键作为参数即可访问其值。例如，在只需要名称 (`name`) 的函数`findUserByName()`中，而不是接收整个`UserInfo`，使用解构赋值如下所示。
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 分割代入について再度知識が必要な方は次のページをご参照ください。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要再次了解有关解构赋值的知识，请参考下一页。
- en: '[## 📄️ オブジェクトの分割代入'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ 对象的解构赋值'
- en: JavaScriptには、オブジェクトの分割代入(destructuring assignment)という便利な構文があります。分割代入は、オブジェクトからプロパティを取り出す機能です。](/reference/values-types-variables/object/destructuring-assignment-from-objects)  [##
    📄️ 分割代入引数
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中有一种方便的语法叫做对象解构赋值。解构赋值是从对象中提取属性的功能。](/reference/values-types-variables/object/destructuring-assignment-from-objects)  [##
    📄️ 解构赋值参数
- en: JavaScriptでは分割代入構文は関数の引数でも使えます。引数がオブジェクトや配列の場合、そのオブジェクトや配列の一部だけを関数で利用したい場合に、分割代入引数が便利です。](/reference/functions/destructuring-assignment-parameters)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，解构赋值语法也可以用于函数参数。当参数是对象或数组时，如果只想在函数中使用部分对象或数组，解构赋值参数就很方便。](/reference/functions/destructuring-assignment-parameters)
- en: 分割代入はこの関数を使う側としても引数の順番を気にする必要がなくなるとともに、ありがたいことに今後の機能拡張によって`UserInfo`が成長したとしても毎回引数を追加する必要はなく`UserInfo`を書き換え使用したい関数でそのキーにアクセスをするだけですみます。上記例のように国籍
    (`nationality`) が増えれば好きなところに加えるだけです。順番は呼び出しに影響を与えません。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 解构赋值不仅使得调用函数的一方不必担心参数的顺序，而且如果`UserInfo`在未来发生变化，也不需要每次都添加参数，只需在希望使用的函数中访问该键即可。如果像上面的例子中增加了国籍
    (`nationality`)，只需将其添加到任意位置即可。顺序不会影响调用。
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: これだけで`nationality`を (`byName`で国籍を使っている問題は置いておくとして) 簡単に呼び出せます。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: これだけで`nationality`を (`byName`で国籍を使っている問題は置いておくとして) 簡単に呼び出せます。
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 関数の説明でもあったとおりですが、分割代入にも初期値を使うことができます。たとえば`findUser()`では通常引退済みのユーザーを検索しないのであれば`UserInfo`と関数は次のように書き換えるだけです。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在函数说明中所述，您也可以在解构赋值中使用默认值。例如，如果在`findUser()`中不搜索已退休用户，则只需将`UserInfo`和函数更改为以下内容。
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
