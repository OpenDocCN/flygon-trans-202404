- en: オブジェクトで受け、オブジェクトを返す (RORO)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://typescriptbook.jp/tips/receive-an-object-return-an-object](https://typescriptbook.jp/tips/receive-an-object-return-an-object)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 関数やメソッドでオブジェクトひとつを引数として受け、戻り値もオブジェクトひとつとする RORO という考え方があります。RORO は **Receive
    an Object, Return an Object** の略です。この考えは JavaScript ならびに TypeScript では大きな恩恵をもたらします。
  prefs: []
  type: TYPE_NORMAL
- en: いままでの関数[​](#いままでの関数 "いままでの関数 への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript に限らず、駆け出しの頃の関数はこのような姿形をしています。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 好きなパラメータで検索できるようにか、引数自体を省略可能にして検索できるようにしています。とはいえ次の問題が立ちはだかります。
  prefs: []
  type: TYPE_NORMAL
- en: 引数が追加されたとき[​](#引数が追加されたとき "引数が追加されたとき への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 居住地と国籍は違う！とパラメータとして国籍(`nationality`)が追加されたとします。このとき国籍はどこに追加されるでしょうか?`isVip`の次が安全ですが人によってはその位置を嫌うかもしれません。
  prefs: []
  type: TYPE_NORMAL
- en: また、今回は`findUser()`という関数に限定しての話にしていますが、同じような引数をとる`~~~User()`のメソッドがあれば何箇所も同時に修正が必要になるでしょう。これは面倒です。
  prefs: []
  type: TYPE_NORMAL
- en: 省略可能でない引数がある他の関数の場合[​](#省略可能でない引数がある他の関数の場合 "省略可能でない引数がある他の関数の場合 への直接リンク")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 引数のうち、省略可能であるものは右側 (後ろ) に詰めて書かなければいけません。今回は検索ですべての引数を省略可能にしていますが、ものによっては国 (`country`)
    のみは必須入力とする関数を作るとなれば、それだけは関数の第 1 引数にせざるを得ません。このような問題が生じれば引数が追加されたときと同じように引数の並びで混乱を生むでしょう。
  prefs: []
  type: TYPE_NORMAL
- en: このような問題を解決するものとしてオブジェクトに必要な情報をひとつに詰めて引数に送るROROという考えがあります。
  prefs: []
  type: TYPE_NORMAL
- en: RORO (Receive an Object, Return an Object)[​](#roro-receive-an-object-return-an-object
    "RORO (Receive an Object, Return an Object) への直接リンク")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 上記ユーザーであればデータクラスのような (ただのデータだけ入った可視性 public のクラス) を作れば問題は回避できます。 TypeScript
    でその型を`UserInfo`とすれば`UserInfo`は次になります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 今回は律儀に`Optional`の`?`をつけましたが`Partial<T>`でも代用可です。
  prefs: []
  type: TYPE_NORMAL
- en: このようにしてこの型のオブジェクトを引数の型としてひとつ受けるようにします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: これでは JavaScript ならびに TypeScript で使える便利な Tip というよりは、ただの Tip です。ではこれはなぜ JavaScript,
    TypeScript で重用されるのかというと、分割代入が関係しています。
  prefs: []
  type: TYPE_NORMAL
- en: 分割代入を使うと関数はオブジェクトのキーを引数に指定するだけでその値にアクセスできます。たとえば`findUserByName()`と名前 (`name`)
    しか必要のない関数で`UserInfo`をすべて受けるのではなく分割代入を使うとこのようになります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 分割代入について再度知識が必要な方は次のページをご参照ください。
  prefs: []
  type: TYPE_NORMAL
- en: '[## 📄️ オブジェクトの分割代入'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptには、オブジェクトの分割代入(destructuring assignment)という便利な構文があります。分割代入は、オブジェクトからプロパティを取り出す機能です。](/reference/values-types-variables/object/destructuring-assignment-from-objects)  [##
    📄️ 分割代入引数
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptでは分割代入構文は関数の引数でも使えます。引数がオブジェクトや配列の場合、そのオブジェクトや配列の一部だけを関数で利用したい場合に、分割代入引数が便利です。](/reference/functions/destructuring-assignment-parameters)
  prefs: []
  type: TYPE_NORMAL
- en: 分割代入はこの関数を使う側としても引数の順番を気にする必要がなくなるとともに、ありがたいことに今後の機能拡張によって`UserInfo`が成長したとしても毎回引数を追加する必要はなく`UserInfo`を書き換え使用したい関数でそのキーにアクセスをするだけですみます。上記例のように国籍
    (`nationality`) が増えれば好きなところに加えるだけです。順番は呼び出しに影響を与えません。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: これだけで`nationality`を (`byName`で国籍を使っている問題は置いておくとして) 簡単に呼び出せます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 関数の説明でもあったとおりですが、分割代入にも初期値を使うことができます。たとえば`findUser()`では通常引退済みのユーザーを検索しないのであれば`UserInfo`と関数は次のように書き換えるだけです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
