- en: Bitcoin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '6.824 2015 Lecture 23: Bitcoin'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Note:** These lecture notes were slightly modified from the ones posted on
    the 6.824 [course website](http://nil.csail.mit.edu/6.824/2015/schedule.html)
    from Spring 2015.'
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: an electronic currency system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: has a technical side and a financial, economic, social side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'maybe the 1st thing to ask: is it trying to do something better? is there a
    problem it solves for us?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: online payments use credit cards, why not just use them?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pluses:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: They work online
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hard for people to steal my credit card (there are laws about how credit card
    companies work so that if your number is stolen, you are protected)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Good/Bad:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Customer service # on the back allows you to reverse charges'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: this can prevent or create fraud
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: tied to some country's currency
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Minuses
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No way for me as a customer or a merchant to independently verify anything
    about a credit card transaction: do you have money, is the CC # valid?'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: it can be good if you don't want people finding out how much money you have
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'relies on 3rd parties: great way to charge fees on everything'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 3% fees
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: settling time is quite long (merchants are not sure they are getting their money
    until after one month)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: pretty hard to become a credit card merchant
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: credit card companies take a lot of risk by sending money to merchants who might
    not send products to customers, resulting in the credit card company having to
    refund customers
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For Bitcoin:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: no 3rd parties are needed (well, not really true anymore)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: fees are much smaller than 3%
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the settling time is maybe 10 minutes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: anyone can become a merchant
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin makes the sequence of transactions verifiable by everyone and agree
    on it `=>` no need to rely on 3rd parties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OneBit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: simple electronic money system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: it has one server called OneBank
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: each user owns some coins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Design:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'onebit xction:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: public key of new owner
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: a hash of the last transfer record of this coin
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: a signature done over this record by the private key of last owner
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: bank keeps the list of transactions for each coin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x` transfer the coin to `y`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[T7: from=x, to=y; hash=h(prev tx); sig_x(this)]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y` transfers the coin to `z`, gets a hamburger from McDonalds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[T8: from y, to=z; hash=h(T7); sig_y(this)]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: what can go wrong?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'if someone transfers a coin to `z` it seems very unlikely that anyone else
    other than `z` can spend that coin: because no one else can sign a new transaction
    with that coin since they don''t have `z`''s private key'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: we have to trust one bank to not let users double spend money
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y` can also buy a milkshake from Burger King with that same coin if the bank
    helps him'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[T8'': from y, to=q''; hash=h(T7); sig_y(this)]`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the bank can show T8 to McDonalds and T8' to Burget King
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: (I love free food!)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: as long as McDonalds and Burger King don't talk to each other and verify the
    transaction chain, they won't detect it
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoin block chain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: bitcoin has a single block chain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'many server: more or less replicas, have copy of entire block chain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'each block in the block chain looks like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hash of previous block
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: set of transactions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: nonce
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: current time
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xactions have two stages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: first it is created and sent out to the network
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: then the transaction is incorporated into the block chain
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How are blocks created? Mining
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All of the peers in the bitcoin network try to create the next block:'
  prefs: []
  type: TYPE_NORMAL
- en: each peer takes all transactions that have arrived since the previous block
    was created and try to append a new block with them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'the rules say that a hash of a block has to be less than a certain number (i.e.
    it has a # of leading of zeros, making it hard to find)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'each of the bitcoin peers adjust the `nonce` field in the block until they
    get a hash with a certain # of leading zeros'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the point of this is to make it expensive to create new blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for a single computer it might take months to find such a nonce
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'the # of leading zeros is adjusted so that on average it takes 10 minutes for
    a new block to be added'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'clients monitor the `currentTime` field in the last 5 transactions or so and
    if they took to little time, they add another zero to # of target zeros'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'everyone obeys the protocol because if they don''t the others will either reject
    their block (say if it has the wrong # of zeros or a wrong timestamp)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The empty block chain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '"In the beginning there was nothing, and then Satoshi created the first block."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"And then people started mining additional blocks, with no transactions."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"And then they got mining reward for each mined block."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"And that''s how users got Bitcoins."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"And then they started doing transactions."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"And then there was light."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What does it take to double spend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If a tx is in the block chain, can the system double spend its coins?
  prefs: []
  type: TYPE_NORMAL
- en: forking the block chain is the only way to do this
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: can the forks be hidden for long?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if forks happens, miners will pick either one and continue mining
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when a fork gets longer, everyone switches to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if they stay on the shorter fork, they are likely to be outmined by the others
    and waste work, so they will have incentive to go on the longer one
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the tx's on the shorter fork get incorporated in the longer one
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: committed tx's can get undone => people usually wait for a few extra blocks
    to be created after a tx's block
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'this is where the 51% rule comes in: if 51% of the computing power is honest
    the protocol works correctly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if more than 51% are dishonest, then they'll likely succeed in mining anything
    they want
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'probably the most clever thing about bitcoin: as long as you believe than more
    than half the computing power is not cheating, you can be sure there''s no double
    spending'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good and bad parts of design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: (+) publicly verifiable log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (-) tied to a new currency and it is very volatile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lots of people don't use it for this reason
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: (+/-) mining-decentralized trust
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hard to say what will happen:'
  prefs: []
  type: TYPE_NORMAL
- en: we could be all using it in 30 years
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: or, banks could catch up, and come up with their own verifiable log design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
