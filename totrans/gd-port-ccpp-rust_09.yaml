- en: Compiling and Linking in More Detail
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译和链接更详细
- en: Compiling and Linking in More Detail
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译和链接更详细
- en: Your main() entry point
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您的main()入口点
- en: Rust has a main function just like C/C++ which is usually called `main()`. ^([1](#fn_1))
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Rust有一个类似于C/C++的main函数，通常称为`main()`。^（[1](#fn_1)）
- en: It doesn’t take any arguments and it doesn’t return anything unlike C/C++. Let's
    see how we might do those things.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 它不带任何参数，也不像C/C++那样返回任何内容。让我们看看如何做这些事情。
- en: Processing command-line arguments
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理命令行参数
- en: In C/C++, the entry point takes argc, and argv arguments. Argc is the number
    of arguments and argv is an array of char * pointers that specify those arguments.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在C/C++中，入口点接受argc和argv参数。Argc是参数的数量，argv是指定这些参数的char *指针数组。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Processing arguments can become inordinately complex (and buggy) so most software
    will use a function like `getopt()` or `getopt_long()` to simplify the process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 处理参数可能变得异常复杂（和有错误），因此大多数软件将使用诸如`getopt()`或`getopt_long()`之类的函数来简化该过程。
- en: Note that `getopt()` is not a standard C function and is not portable, e.g.
    to Windows. So immediately we see an example of problem that C/C++ forces us to
    solve.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`getopt()`不是标准的C函数，也不是可移植的，例如到Windows。因此，我们立即看到了C/C++强制我们解决的问题的一个例子。
- en: Rust doesn't process arguments this way. Instead you access the command-line
    parameters from `std::env::args()` from anywhere in the code. That is to say,
    there is a function called `args()` under the namespace `std::env` that returns
    the strings on the command-line.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Rust不会以这种方式处理参数。相反，您可以从代码的任何地方访问`std::env::args()`中的命令行参数。也就是说，有一个名为`args()`的函数位于`std::env`命名空间下，它返回命令行上的字符串。
- en: 'The function `args()` returns the parameters in a string array. As with C++,
    the first element of the array at index 0 is the command itself:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`args()`返回一个字符串数组中的参数。与C++类似，数组的第一个元素在索引0处是命令本身：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Alternatively, since `args()` returns a type called `Args` that implements
    the `Iterator` trait you can collect the arguments up into your own collection
    and process that:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，由于`args()`返回一个实现了`Iterator` trait的类型`Args`，您可以将参数收集到您自己的集合中并处理它：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can see some clear advantages to how Rust supplies args:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到Rust提供参数的一些明显优势：
- en: You don't need a separate argc, parameter. You have an array that defines its
    own length.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不需要一个独立的argc参数。您有一个定义自己长度的数组。
- en: You can access arguments from anywhere in your program, not just from the `main()`.
    In C++ you would have to pass your args around from one place to another. In Rust
    you can simply ask for them from anywhere.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以从程序的任何地方访问参数，而不仅仅是从`main()`中。在C++中，您必须将参数从一个地方传递到另一个地方。在Rust中，您可以从任何地方简单地请求它们。
- en: Use a crate - easy command-line processing
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用crate - 简单的命令行处理
- en: Rust has a number of crates for processing arguments. The most popular crate
    for processing arguments is [clap](https://crates.io/crates/clap).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Rust有许多用于处理参数的crate。用于处理参数的最流行的crate是[clap](https://crates.io/crates/clap)。
- en: It provides a very descriptive, declarative way of adding rules for processing
    arguments into the code. It is especially useful if your program takes a lot of
    arguments, including parameters and validation rules.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了一种非常描述性的、声明式的方式将处理参数的规则添加到代码中。如果您的程序接受大量参数，包括参数和验证规则，那么它尤其有用。
- en: 'For example we add this to `Cargo.toml`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将这个添加到`Cargo.toml`中：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And in our `main.rs`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`main.rs`中。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code will process arguments for `-T` or `--timetowait` and ensure the value
    is one of 3 accepted. And if the user doesn't supply a value, it defaults to `10`.
    And if the user doesn't supply a valid integer it will terminate the application
    with a useful error.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将处理`-T`或`--timetowait`的参数，并确保值是3个接受的值之一。如果用户没有提供值，则默认为`10`。如果用户没有提供有效的整数，它将用有用的错误终止应用程序。
- en: The user can also provide `--help` as an argument and it will print out the
    usage.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以提供`--help`作为参数，它将打印出用法。
- en: Exit code
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 退出代码
- en: 'If you want to exit with a code, you set it explicitly:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要退出并返回代码，则需显式设置它：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When `main()` drops out, the runtime cleans up and returns the code to the environment.
    Again there is no reason the status code has to be set in `main()`, you could
    set it somewhere else and `panic!()` to cause the application to exit.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当`main()`退出时，运行时会清理并将代码返回给环境。再次强调，状态码没有必要在`main()`中设置，您可以将其设置在其他地方，并通过`panic!()`导致应用程序退出。
- en: Optimized compilation
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化编译
- en: In a typical edit / compile / debug cycle there is no need to optimize code
    and so Rust doesn't optimize unless you ask it to.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的编辑/编译/调试循环中，没有必要优化代码，因此除非您要求，否则Rust不会进行优化。
- en: Optimization takes longer to happen and can reorder the code so that backtraces
    and debugging may not point at the proper lines of code in the source.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 优化需要更长的时间，并且可能重新排列代码，以至于回溯和调试可能不会指向源代码中的正确行。
- en: 'If you want to optimize your code, add a -O argument to rustc:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想优化您的代码，请向rustc添加一个-O参数：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The act of optimization will cause Rust to invoke the LLVM optimizer prior to
    linking. This will produce faster executable code at the expense of compile time.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 优化的行为将导致Rust在链接之前调用LLVM优化器。这将产生更快的可执行代码，但会增加编译时间。
- en: Incremental compilation
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增量编译
- en: Incremental compilation is also important for edit / compile / debug cycles.
    Incremental compilation only rebuilds those parts of the code which have changed
    through modification to minimize the amount of time it takes to rebuild the product.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 增量编译对于编辑/编译/调试循环也很重要。增量编译只重新构建那些通过修改而发生变化的代码部分，以最小化重建产品所需的时间。
- en: Rust has a different incremental compilation model to C++.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Rust具有与C++不同的增量编译模型。
- en: C++ doesn't support incremental compilation per se. That function is left to
    the make / project / solution tool. Most builders will track a list of project
    files and which file depends on other files. So if file foo.h changes then the
    builder knows what other files depend on it and ensures they are rebuilt before
    relinking the target executable.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++本身不支持增量编译。这个功能留给了make/project/solution工具。大多数构建工具将跟踪一个项目文件列表以及哪个文件依赖于其他文件。因此，如果文件foo.h发生变化，那么构建工具知道依赖于它的其他文件，并确保在重新链接目标可执行文件之前重新构建它们。
- en: In Rust incremental compilation is at the crate level - that if any file in
    a crate changes then the crate as a whole has to be rebuilt. Thus larger code
    bases tend to be split up into crates to reduce the incremental build time.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Rust中，增量编译是在crate级别进行的 - 如果一个crate中的任何文件发生变化，则整个crate都必须重新构建。因此，较大的代码库往往会被拆分成crates以减少增量构建时间。
- en: There is a recognition in the Rust community that the crate-level model can
    suck for large crates so the Rust compiler is getting [incremental per-file compilation
    support](https://blog.rust-lang.org/2016/09/08/incremental.html) in addition to
    per-crate.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Rust社区认识到crate级别模型对于大型crate来说可能不太好，因此Rust编译器正在获得[每个文件增量编译支持](https://blog.rust-lang.org/2016/09/08/incremental.html)，除了每个crate。
- en: At the time of writing this support is experimental because it is tied to refactoring
    the compiler for other reasons to improve performance and optimization but will
    eventually be enabled and supported by rustc and cargo.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，此支持是实验性的，因为它与重构编译器以改进性能和优化的其他原因相关联���但最终将由rustc和cargo启用和支持。
- en: Managing a project
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理一个项目
- en: In C++ we would use a `makefile` or a solution file of some kind to manage a
    real world project and build it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，我们会使用一个`makefile`或某种解决方案文件来管理一个真实世界的项目并构建它。
- en: For small programs we might run a script or invoke a compiler directly but as
    our program grows and takes longer to build, we would have to use a `makefile`
    to maintain our sanity.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小程序，我们可能会运行一个脚本或直接调用编译器，但随着程序的增长和构建时间的延长，我们将不得不使用一个`makefile`来保持我们的理智。
- en: A typical `makefile` has rules that say what files are our sources, how each
    source depends on other sources (like headers), what our final executable is and
    a bunch of other mess about compile and link flags that must be maintained.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的`makefile`包含规则，说明哪些文件是我们的源文件，每个源文件如何依赖其他源文件（如头文件），我们的最终可执行文件是什么，以及一堆关于必须维护的编译和链接标志的其他混乱内容。
- en: 'There are lots of different makefile solutions which have cropped up over the
    years but a simple gmake might look like one:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来出现了许多不同的makefile解决方案，但一个简单的gmake可能看起来像这样：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When you invoke `make`, the software will check all the dependencies of your
    target, looking at their filestamps and determine which rules need to be invoked
    and which order to rebuild your code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用`make`时，软件将检查目标的所有依赖项，查看它们的文件时间戳，并确定需要调用哪些规则以及以何种顺序重建您的代码。
- en: Rust makes things a lot easier – there is no makefile! The source code is the
    makefile. Each file says what other files it uses via depencies on other crates,
    and on other modules.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Rust使事情变得更容易 - 没有makefile！源代码就是makefile。每个文件通过对其他crate和其他模块的依赖来说明它使用了哪些其他文件。
- en: 'Consider this main.rs for a pacman game:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个pacman游戏的main.rs：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If we save this file and type `rustc main.rs` the compiler will notice the reference
    to `mod pacman` and will search for a `pacman.rs` (or `pacman/mod.rs`) and compile
    that too. It will continue doing this with any other modules referenced along
    the way.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保存了这个文件并键入`rustc main.rs`，编译器将注意到对`mod pacman`的引用，并且将搜索`pacman.rs`（或`pacman/mod.rs`）并编译它。它将继续处理沿途引用的任何其他模块。
- en: In other words you could have a project with 1000 files and compile it as simply
    as `rustc main.rs`. Anything referenced is automatically compiled and linked.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，您可以拥有一个包含1000个文件的项目，并且只需简单地编译`rustc main.rs`。任何被引用的内容都会自动编译和链接。
- en: Okay, so we can call `rustc`, but what happens if our code has dependencies
    on other projects. Or if our project is meant to be exported so other projects
    can use it?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们可以调用`rustc`，但是如果我们的代码有其他项目的依赖关系会发生什么？或者我们的项目是为了被导出，以便其他项目可以使用它？
- en: Cargo
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cargo
- en: Cargo is a package manager build tool rolled into one. Cargo can fetch dependencies,
    build them, build and link your code, run unit tests, install binaries, produce
    documentation and upload versions of your project to a repository.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo是一个集成了包管理器和构建工具的工具。Cargo可以获取依赖项，构建它们，构建和链接您的代码，运行单元测试，安装二进制文件，生成文档，并将项目的版本上传到存储库。
- en: The easiest way to create a new project in Rust is to use the `cargo` command
    to do it
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rust中创建新项目的最简单方法是使用`cargo`命令来完成
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Creates this
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Building the project is then simply a matter of this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 构建项目只是这样的一个简单过程：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you want to build for release you add a --release argument. This will invokes
    the rust compiler with optimizations enabled:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要构建发布版本，可以添加一个--release参数。这将调用rust编译器启用优化：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If we wanted to build and run unit tests in our code we could write
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要在代码中构建和运行单元测试，我们可以编写
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Crates and external dependencies
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 箱子和外部依赖项
- en: Cargo doesn't just take care of building our code, it also ensures that anything
    our code depends on is also downloaded and built. These external dependencies
    are defined in a `Cargo.toml` in our project root.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo不仅负责构建我们的代码，还确保我们的代码所依赖的任何内容也被下载和构建。这些外部依赖项在我们项目根目录中的`Cargo.toml`中定义。
- en: 'We can edit that file to say we have a dependency on an external "crate" such
    as the `time` crate:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编辑该文件以表示我们对外部"箱子"（如`time`箱子）有一个依赖关系：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now when we run `cargo build`, it will fetch "time" from crates.io and also
    any dependencies that "time" has itself. Then it will build each crate in turn
    automatically. It does this efficiently so iterative builds do not incur a penalty.
    External crates are download and built in your .cargo home directory.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们运行`cargo build`时，它将从crates.io获取"time"，以及"time"本身所具有的任何依赖项。然后它会自动按顺序构建每个箱子。它会高效地执行此操作，因此迭代构建不会产生任何惩罚。外部箱子会下载并构建在您的.cargo主目录中。
- en: To use our external crate we declare it in the main.rs of our code, e.g.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用我们的外部箱子，我们在我们代码的main.rs中声明它，例如。
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'So the change to the `Cargo.toml` and a reference in the source is sufficient
    to:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对`Cargo.toml`的更改和源代码中的引用就足够了：
- en: Fetch the crate (and any dependencies)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取箱子（以及任何依赖项）
- en: Build the crate (and any dependencies)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建箱子（以及任何依赖项）
- en: Compile and link to the crate and dependencies
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并链接到箱子和依赖项
- en: All that happened with a line in `Cargo.toml` and a line in our code to reference
    the crate. We didn't have to mess around figuring how to build the other library,
    or maintain multiple makefiles, or getting our compiler / linker flags right.
    It just happened.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都只是在`Cargo.toml`中加一行，在我们的代码中加一行来引用箱子。我们不必费心弄清楚如何构建其他库，或者维护多个makefile，或者正确设置我们的编译器/链接器标志。这一切都是自动完成的。
- en: Cargo.lock
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Cargo.lock
- en: Also note that once we build, cargo creates a `Cargo.lock` file in our root
    directory.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，一旦我们构建，cargo会在我们的根目录下创建一个`Cargo.lock`文件。
- en: This file is made so that if `cargo build` is invoked again it has an exact
    list of what packages need to be pulled and compiled. It stops situations where
    the code under our feet (so to speak) moves and suddenly our project no longer
    builds. So if the lock file exists, the same dependency configuration can be reproduced
    even from a clean. If you want to force the cargo to rebuild a new lock file,
    e.g. after changing `Cargo.toml`, you can type `cargo update`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件是这样制作的，以便如果再次调用`cargo build`，它就会有一个确切的列表，需要拉取和编译哪些包。它避免了代码（可以这么说）在我们脚下移动并突然我们的项目无法构建的情况。因此，如果锁定文件存在，则甚至可以从干净的状态重现相同的依赖配置。如果要强制cargo重新构建一个新的锁定文件，例如在更改了`Cargo.toml`后，可以输入`cargo
    update`。
- en: ¹. You can change the main entry point using a special `#[start]` directive
    if you want on another function but the default is main() [↩](#reffn_1 "Jump back
    to footnote [1] in the text.")
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. 如果你想要改变主入口点，可以使用特殊的`#[start]`指令指定另一个函数，但默认是`main()`。 [↩](#reffn_1 "跳回文中的脚注
    [1]")
