- en: Deadlock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lecture Notes for CS 140
  prefs: []
  type: TYPE_NORMAL
- en: Spring 2014
  prefs: []
  type: TYPE_NORMAL
- en: John Ousterhout
  prefs: []
  type: TYPE_NORMAL
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    Sections 6.1-6.2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The deadlock problem:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threads often need to hold multiple locks at the same time.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Simple example:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Deadlock definition:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A collection of threads are all blocked.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each thread is waiting for a resource owned by one of the other threads.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Since all threads are blocked, none can release their resources.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Four conditions for deadlock:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Limited access: resources cannot be shared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No preemption. Once given, a resource cannot be taken away.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multiple independent requests: threads don''t ask for resources all at once
    (hold resources while waiting).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A circularity in the graph of requests and ownership.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Complexities:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deadlock can occur over anything that causes waiting:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Locks
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Network messages
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Disk drive
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory space exhausted
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deadlock can occur over distinct resources (e.g. locks) or pieces of a single
    resource (pages of memory).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, don't know in advance which resources a thread will need.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution #1: deadlock detection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine when system is deadlocked
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Break the deadlock by terminating one of the threads
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually not practical in operating systems, but often used in database systems
    where a transaction can be retried
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution #2: deadlock prevention: eliminate one of the necessary conditions
    for deadlock'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't allow exclusive access? Not reasonable for most applications.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create enough resources so that they never run out? May work for things like
    disk space, but locks for synchronization are intentionally limited in number.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow preemption? Works for some resources but not others (e.g., can't preempt
    a lock).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Require threads to request all resources at the same time; either get them all
    or wait for them all.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tricky to implement: must wait for several things without locking any of them.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Inconvenient for thread: hard to predict needs in advance. May require thread
    to over-allocate just to be safe.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Break the circularity: all threads request resources in the same order (e.g.,
    always lock l1 before l2). This is the most common approach used in operating
    systems.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
