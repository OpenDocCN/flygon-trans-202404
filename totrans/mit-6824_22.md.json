["```\n ---        ---\n| W |      | T |\n ---        ---\n/\\         /\\\n| click on /  .torrent file\n\\         /\n ---/----        ---  \n| C |  <------> | C |\n ---             --- \n```", "```\n10 -> 20\n\n12, 18 join\n\n10 -> 20, 12->20, 18->20, 20->18\n\n10 -> 18, 18->10, 18->20, 20->18, 12 ->18\n\n10 -> 18,18->20, 20->18, 12 ->18, 18->12\n\n10 -> 12, 12->10 12->18, 18->12, 18->20, 20->18 \n```", "```\nLecture outline:\n  peer-to-peer (P2P)\n  BitTorrent\n  DHTs\n  Chord\n\nPeer-to-peer\n  [user computers, files, direct xfers]\n  users computers talk directly to each other to implement service\n    in contrast to user computers talking to central servers\n  could be closed or open\n  examples:\n    skype, video and music players, file sharing\n\nWhy might P2P be a win?\n  spreads network/caching costs over users\n  absence of server may mean:\n    easier to deploy\n    less chance of overload\n    single failure won't wreck the whole system\n    harder to attack\n\nWhy don't all Internet services use P2P?\n  can be hard to find data items over millions of users\n  user computers not as reliable than managed servers\n  if open, can be attacked via evil participants\n\nThe result is that P2P has some successful niches:\n  Client-client video/music, where serving costs are high\n  Chat (user to user anyway; privacy and control)\n  Popular data but owning organization has no money\n  No natural single owner or controller (Bitcoin)\n  Illegal file sharing\n\nExample: classic BitTorrent\n  a cooperative download system, very popular!\n  user clicks on download link for e.g. latest Linux kernel distribution\n    gets torrent file w/ content hash and IP address of tracker\n  user's BT client talks to tracker\n    tracker tells it list of other user clients w/ downloaded file\n  user't BT client talks to one or more client's w/ the file\n  user's BT client tells tracker it has a copy now too\n  user's BT client serves the file to others for a while\n  the point:\n    provides huge download b/w w/o expensive server/link\n\nBitTorrent can also use a DHT instead of / as well as a tracker\n  this is the topic of today's readings\n  BT clients cooperatively implement a giant key/value store\n  \"distributed hash table\"\n  the key is the file content hash (\"infohash\")\n  the value is the IP address of a client willing to serve the file\n    Kademlia can store multiple values for a key\n  client does get(infohash) to find other clients willing to serve\n    and put(infohash, self) to register itself as willing to serve\n  client also joins the DHT to help implement it\n\nWhy might the DHT be a win for BitTorrent?\n  single giant tracker, less fragmented than many trackers\n    so clients more likely to find each other\n  maybe a classic tracker too exposed to legal &c attacks\n  it's not clear that BitTorrent depends heavily on the DHT\n    mostly a backup for classic trackers?\n\nHow do DHTs work?\n\nScalable DHT lookup:\n  Key/value store spread over millions of nodes\n  Typical DHT interface:\n    put(key, value)\n    get(key) -> value\n  loose consistency; likely that get(k) sees put(k), but no guarantee\n  loose guarantees about keeping data alive\n\nWhy is it hard?\n  Millions of participating nodes\n  Could broadcast/flood request -- but too many messages\n  Every node could know about every other node\n    Then hashing is easy\n    But keeping a million-node table up to date is hard\n  We want modest state, and modest number of messages/lookup\n\nBasic idea\n  Impose a data structure (e.g. tree) over the nodes\n    Each node has references to only a few other nodes\n  Lookups traverse the data structure -- \"routing\"\n    I.e. hop from node to node\n  DHT should route get() to same node as previous put()\n\nExample: The \"Chord\" peer-to-peer lookup system\n  By Stoica, Morris, Karger, Kaashoek and Balakrishnan; 2001\n\nChord's ID-space topology\n  Ring: All IDs are 160-bit numbers, viewed in a ring.\n  Each node has an ID, randomly chosen\n\nAssignment of key IDs to node IDs?\n  Key stored on first node whose ID is equal to or greater than key ID.\n    Closeness is defined as the \"clockwise distance\"\n  If node and key IDs are uniform, we get reasonable load balance.\n  So keys IDs should be hashes (e.g. bittorrent infohash)\n\nBasic routing -- correct but slow\n  Query is at some node.\n  Node needs to forward the query to a node \"closer\" to key.\n    If we keep moving query closer, eventually we'll win.\n  Each node knows its \"successor\" on the ring.\n    n.lookup(k):\n      if n < k <= n.successor\n        return n.successor\n      else\n        forward to n.successor\n  I.e. forward query in a clockwise direction until done\n  n.successor must be correct!\n    otherwise we may skip over the responsible node\n    and get(k) won't see data inserted by put(k)\n\nForwarding through successor is slow\n  Data structure is a linked list: O(n)\n  Can we make it more like a binary search?\n    Need to be able to halve the distance at each step.\n\nlog(n) \"finger table\" routing:\n  Keep track of nodes exponentially further away:\n    New state: f[i] contains successor of n + 2^i\n    n.lookup(k):\n      if n < k <= n.successor:\n        return successor\n      else:\n        n' = closest_preceding_node(k) -- in f[]\n        forward to n'\n\nfor a six-bit system, maybe node 8's looks like this:\n  0: 14\n  1: 14\n  2: 14\n  3: 21\n  4: 32\n  5: 42\n\nWhy do lookups now take log(n) hops?\n  One of the fingers must take you roughly half-way to target\n\nThere's a binary lookup tree rooted at every node\n  Threaded through other nodes' finger tables\n  This is *better* than simply arranging the nodes in a single tree\n    Every node acts as a root, so there's no root hotspot\n    But a lot more state in total\n\nIs log(n) fast or slow?\n  For a million nodes it's 20 hops.\n  If each hop takes 50 ms, lookups take a second.\n  If each hop has 10% chance of failure, it's a couple of timeouts.\n  So in practice log(n) is better than O(n) but not great.\n\nHow does a new node acquire correct tables?\n  General approach:\n    Assume system starts out w/ correct routing tables.\n    Use routing tables to help the new node find information.\n    Add new node in a way that maintains correctness.\n  New node m:\n    Sends a lookup for its own key, to any existing node.\n      This yields m.successor\n    m asks its successor for its entire finger table.\n  At this point the new node can forward queries correctly\n  Tweaks its own finger table in background\n    By looking up each m + 2^i\n\nDoes routing *to* new node m now work?\n  If m doesn't do anything,\n    lookup will go to where it would have gone before m joined.\n    I.e. to m's predecessor.\n    Which will return its n.successor -- which is not m.\n  So, for correctness, m's predecessor needs to set successor to m.\n    Each node keeps track of its current predecessor.\n    When m joins, tells its successor that its predecessor has changed.\n    Periodically ask your successor who its predecessor is:\n      If that node is closer to you, switch to that guy.\n    So if we have x m y\n      x.successor will be y (now incorrect)\n      y.predecessor will be m\n      x will ask its x.successor for predecessor\n        x learns about m\n        sets x.successor to m\n        tells m \"x is your predecessor\"\n        called \"stabilization\"\n  Correct successors are sufficient for correct lookups!\n\nWhat about concurrent joins?\n  Two new nodes with very close ids, might have same successor.\n  Example:\n    Initially 40 then 70\n    50 and 60 join concurrently\n    at first 40, 50, and 60 think their successor is 70!\n    which means lookups for e.g. 45 will yield 70, not 50\n    after one stabilization, 40 and 50 will learn about 60\n    then 40 will learn about 50\n\nTo maintain log(n) lookups as nodes join,\n  Every one periodically looks up each finger (each n + 2^i)\n\nChord's routing is conceptually similar to Kademlia's\n  Finger table similar to bucket levels\n    Both halve the metric distance for each step\n    Both are about speed and can be imprecise\n  n.successor similar to Kademlia's requirement that\n    each node know of all the nodes that are very close in xor-space\n    in both cases care is needed to ensure that different lookups\n      for same key converge on exactly the same node\n\nWhat about node failures?\n  Assume nodes fail w/o warning. Strictly harder than graceful departure.\n  Two issues:\n    Other nodes' routing tables refer to dead node.\n    Dead node's predecessor has no successor.\n  If you try to route via dead node, detect timeout, treat as empty table entry.\n    I.e. route to numerically closer entry instead.\n  For dead successor\n    Failed node might have been just before key ID!\n      So we need to know what its n.successor was\n    Maintain a _list_ of successors: r successors.\n    Lookup answer is first live successor >= key\n      or forward to *any* successor < key\n\nKademlia has a faster plan for this\n  send alpha (or k) lookup RPCs in parallel, to different nodes\n  send more lookups as previous ones return info about nodes closer to key\n  single non-responsive node won't cause lookup to suffer a timeout\n\nDealing with unreachable nodes during routing is extremely important\n  \"Churn\" is very high in open p2p networks\n  People close their laptops, move WiFi APs, &c pretty often\n  Measurement of Bittorrent/Kademlia suggest lookups are not very fast\n\nGeographical/network locality -- reducing lookup time\n  Lookup takes log(n) messages.\n    But they are to random nodes on the Internet!\n    Will often be very far away.\n  Can we route through nodes close to us on underlying network?\n  This boils down to whether we have choices:\n    If multiple correct next hops, we can try to choose closest.\n\nIdea:\n  to fill a finger table entry, collect multiple nodes near n+2^i on ring\n  perhaps by asking successor to n+2^i for its r successors\n  use lowest-ping one as i'th finger table entry\n\nWhat's the effect?\n  Individual hops are lower latency.\n  But less and less choice (lower node density) as you get close in ID space.\n  So last few hops likely to be very long. \n  Though if you are reading, and any replica will do,\n    you still have choice even at the end.\n\nWhat about security?\n  Self-authenticating data, e.g. key = SHA1(value)\n    So DHT node can't forge data\n    Of course it's annoying to have immutable data...\n  Can someone cause millions of made-up hosts to join?\n    They don't exist, so routing will break?\n    Don't believe new node unless it responds to ping, w/ random token.\n  Can a DHT node claim that data doesn't exist?\n    Yes, though perhaps you can check other replicas\n  Can a host join w/ IDs chosen to sit under every replica?\n    Or \"join\" many times, so it is most of the DHT nodes?\n    Maybe you can require (and check) that node ID = SHA1(IP address)\n\nWhy not just keep complete routing tables?\n  So you can always route in one hop?\n  Danger in large systems: timeouts or cost of keeping tables up to date.\n\nHow to manage data?\n  Here is the most popular plan.\n  DHT doesn't guarantee durable storage\n    So whoever inserted must re-insert periodically if they care\n    May want to automatically expire if data goes stale (bittorrent)\n  DHT does replicate each key/value item\n    On the nodes with IDs closest to the key, where looks will find them\n    Replication can help spread lookup load as well as tolerate faults\n  When a node joins:\n    successor moves some keys to it\n  When a node fails:\n    successor probably already has a replica\n    but r'th successor now needs a copy\n\nRetrospective\n  DHTs seem very promising for finding data in large p2p systems\n    Decentralization seems good for load, fault tolerance\n  But: the security problems are difficult\n  But: churn is a serious problem, particularly if log(n) is big\n  So DHTs have not had the impact that many hoped for \n```"]