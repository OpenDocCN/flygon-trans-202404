["```\n\"\"\"\n\u4e00\u4e2a\u6700\u7b80\u5355\u7684 doctest \u5199\u6cd5\uff0c\u6211\u8fd9\u79cd\u7f29\u8fdb\u662f\u4e3a\u4e86\u7167\u987e Sphinx \u6587\u6863\u81ea\u52a8\u751f\u6210\u5de5\u5177::\n\n    >>> factorial(5)\n    120\n\"\"\"\n\ndef factorial(n):\n    \"\"\"\u4f9d\u65e7\u662f doctest\uff0c\u4e0d\u8fc7\u66f4\u52a0\u590d\u6742::\n\n        >>> [factorial(n) for n in range(6)]\n        [1, 1, 2, 6, 24, 120]\n        >>> [factorial(long(n)) for n in range(6)]\n        [1, 1, 2, 6, 24, 120]\n        >>> factorial(30)\n        265252859812191058636308480000000L\n        >>> factorial(30L)\n        265252859812191058636308480000000L\n        >>> factorial(-1)\n        Traceback (most recent call last):\n            ...\n        ValueError: n must be >= 0\n\n        Factorials of floats are OK, but the float must be an exact integer:\n        >>> factorial(30.1)\n        Traceback (most recent call last):\n            ...\n        ValueError: n must be exact integer\n        >>> factorial(30.0)\n        265252859812191058636308480000000L\n\n        It must also not be ridiculously large:\n        >>> factorial(1e100)\n        Traceback (most recent call last):\n            ...\n        OverflowError: n too large\n    \"\"\"\n    import math\n\n    if not n >= 0:\n        raise ValueError(\"n must be >= 0\")\n    if math.floor(n) != n:\n        raise ValueError(\"n must be exact integer\")\n    if n+1 == n:  # catch a value like 1e300\n        raise OverflowError(\"n too large\")\n    result = 1\n    factor = 2\n    while factor <= n:\n        result *= factor\n        factor += 1\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod() \n```", "```\nimport unittest\nfrom selenium import webdriver\n\nclass TestOne(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()          # \u521d\u59cb\u5316\u6d4f\u89c8\u5668\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9 Chrome \u6216\u8005 PhanatomJS\n        self.driver.set_window_size(1280, 550)\n\n    def test_url(self):\n        self.driver.get(\"http://duckduckgo.com/\")\n        self.driver.find_element_by_id(\n            'search_form_input_homepage').send_keys(\"realpython\")\n        self.driver.find_element_by_id(\"search_button_homepage\").click()\n        self.assertIn(\n            \"https://duckduckgo.com/?q=realpython\", self.driver.current_url\n        )\n\n    def tearDown(self):\n        self.driver.quit()\n\nif __name__ == '__main__':\n    unittest.main() \n```", "```\n# \u6587\u4ef6 tox.ini \u7684\u5185\u5bb9\uff0c\u9700\u8981\u548c setup.py \u7f6e\u4e8e\u540c\u4e00\u76ee\u5f55\n[tox]\nenvlist = py26,py27\n[testenv]\ndeps=               # \u6d4b\u8bd5\u4f9d\u8d56\ncommands=make test         # \u6267\u884c\u6d4b\u8bd5\u7684\u547d\u4ee4 \n```", "```\n    CELERY_ALWAYS_EAGER = True\n    CELERY_EAGER_PROPAGATES_EXCEPTIONS = True\n    BROKER_BACKEND = 'memory' \n    ```", "```\nINSTALLED_APPS = (\n    ...\n    'django_nose',\n)\nTEST_RUNNER = 'django_nose.NoseTestSuiteRunner'\nNOSE_ARGS = ['--with-doctest'] \n```", "```\npython manage.py testserver fixtures_dir/filename.yaml \n```", "```\nfrom django.test import TestCase\nfrom django.contrib.auth import authenticate\n\nclass LoginTest(TestCase):\n    fixtures = ['mysite.yaml']\n\n    def setUp(self):\n        # \u5bfc\u5165 fixture \u4e2d\u7528\u6237\u6570\u636e\uff0c\u7701\u53bb\u521b\u5efa\u7528\u6237\u7684\u6d41\u7a0b\uff0c\u4e5f\u514d\u53bb\u4e86\u6e05\u9664\u7528\u6237\u6570\u636e\u7684\u6d41\u7a0b\u3002\n\n    def test_has_user(self):\n        # \u5982\u679c\u5df2\u5bfc\u5165 fixture \u4e2d\u6570\u636e\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u5176\u4e2d\u7684\u8d26\u53f7\u767b\u5f55\u3002\n        self.assertIsNotNone(authenticate(username='windrunner', password='password')) \n```", "```\nimport unittest\nfrom django.test.client import Client\n\nclass PageTest(unittest.TestCase):\n    def setUp(self):\n        self.client = Client()\n\n    def test_home(self):\n        res = self.client.get('/')\n        self.assertEqual(200, res.status_code)\n\n    def test_login(self):\n        \"\"\"\u666e\u901a\u6d4b\u8bd5\u3002client \u5b9e\u4f8b\u4f1a\u81ea\u52a8\u89e3\u51b3 csrf \u95ee\u9898\u3002\"\"\"\n        res = self.client.get('/login/')\n\n        self.assertEqual(200, res.status_code)\n        self.assertIn('Username', res.content)\n\n        res_post = self.client.post('/login/', {'username': 'windrunner', 'password': 'password', })\n\n        self.assertEqual(200, res_post.status_code)\n        self.assertIn('windrunner', res_post.content)\n\n    def test_login_csrf(self):\n        \"\"\"\u5f3a\u5236 csrf \u68c0\u67e5\"\"\"\n        self.client = Client(enforce_csrf_checks=True)          # \u4f7f\u7528\u68c0\u67e5 CSRF \u7684 Client \u793a\u4f8b\u4ee3\u66ff\u9ed8\u8ba4\u5b9e\u4f8b\n        res = self.client.get('/login/')\n        csrf_token = '%s' % res.context['csrf_token']             # \u83b7\u53d6 csrf_token\n\n        res_fail = self.client.post('/login/', {'user': 'windrunner', 'pass': 'password', })\n        self.assertEqual(403, res_fail.status_code)             # \u6ca1\u6709\u5904\u7406 CSRF token \u4f1a\u8fd4\u56de 403 \u9519\u8bef\u4ee3\u7801\n\n        res_csrf = self.client.post('/login/', {'user': 'windrunner', 'pass': 'password', 'csrfmiddlewaretoken': csrf_token, })\n        self.assertIn('windrunner', res_csrf.content)\n\n    def test_logout(self):\n        res = self.client.post('/logout/')\n        self.assertEqual(302, res.status_code) \n```", "```\npython manage.py testserver --addrport 7000 fixture1 fixture2 \n```", "```\nimport unittest\nfrom selenium import webdriver\nfrom django.contrib.auth import get_user_model, authenticate\n\nclass LoginTest(unittest.TestCase):\n    def setUp(self):\n        self.browser = webdriver.Firefox()          # \u521d\u59cb\u5316\u6d4f\u89c8\u5668\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9 Chrome \u6216\u8005 PhanatomJS\n\n    def tearDown(self):\n        self.browser.quit()                         # \u6d4b\u8bd5\u7ed3\u675f\u540e\u5173\u95ed\u6d4f\u89c8\u5668\n\n    def _login(self):\n        # \u8fd9\u4e2a\u65b9\u6cd5\u6ca1\u6709\u4ee5 ``test`` \u5f00\u59cb\uff0c\u56e0\u6b64\u5e76\u4e0d\u4f1a\u5355\u72ec\u88ab\u6267\u884c\u3002\n        self.browser.get('http://localhost:8000/login')         # \u53d1\u9001 GET \u8bf7\u6c42\u5e76\u6253\u5f00\u9875\u9762\n\n        # \u4f7f\u7528\u6d4f\u89c8\u5668\u7684\u9009\u62e9\u6743\u9009\u4e2d HTML \u5143\u7d20\uff0c\u5e76\u53d1\u9001\u6d4f\u89c8\u5668\u4e8b\u4ef6\uff0c\u590d\u6742\u7684\u5143\u7d20\u9009\u62e9\u53ef\u4ee5\u501f\u52a9 XPath\n        self.browser.find_element_by_id('username').send_keys('windrunner')\n        self.browser.find_element_by_id('password').send_keys('password')\n        self.browser.find_element_by_id('submit').click()   # \u89e6\u53d1\u70b9\u51fb\u4e8b\u4ef6\n\n    def test_login(self):\n        self._login()\n        self.assertIn('windrunner', self.browser.page_source)   # \u65ad\u8a00\u767b\u5f55\u540e\u7684\u9875\u9762\u5185\u5bb9\n\n    def test_logout(self):\n        self._login()\n        self.assertIn('windrunner', self.browser.page_source)\n        self.browser.get('http://localhost:8000/logout')\n        self.assertIn('nobody', self.browser.page_source)\n        self.assertNotIn('windrunner', self.browser.page_source) \n```", "```\n        >>> attrs = {'method.return_value': 3, 'other.side_effect': KeyError}\n        >>> mock.configure_mock(**attrs) \n        ```", "```\n@patch.object(SomeClass, 'attribute', sentinel.attribute)\ndef test():\n    assert SomeClass.attribute == sentinel.attribute \n```", "```\nwith patch('__builtin__.open', mock):\n    handle = open('filename', 'r') \n```", "```\npatch.object = _patch_object\npatch.dict = _patch_dict\npatch.multiple = _patch_multiple\npatch.stopall = _patch_stopall\npatch.TEST_PREFIX = 'test' \n```"]