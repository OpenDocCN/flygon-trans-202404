["```\n(define (count-leaves x)\n    (cond ((null? x) 0) ;; is the tree is empty?\n          ((not (pair? x)) 1) ;;is the tree a single element?\n          (else (+ (count-leaves (car x)) ;; else, call count-leaves on the car\n                   (count-leaves (cdr x))))) ;; and cdr of x and add them up. \n```", "```\n> (scale-tree (list 1 (list 2 (list 3 4) 5) (list 6 7)) 10)\n(10 (20 (30 40) 50) (60 70)) \n```", "```\n(define (scale-tree tree factor)\n  (cond ;;Your answer here.\n        (else \n          (cons (scale-tree (car tree) factor) \n                (scale-tree (cdr tree) factor))))) \n```", "```\n> (define x (list (list 1 2) (list 3 4)))\n((1 2) (3 4))\n\n> (deep-reverse x)\n((4 3) (2 1)) \n```", "```\n(define (deep-reverse d-l)\n  (cond ((null? d-l) null)\n        ;;Your answer here.\n  )) \n```"]