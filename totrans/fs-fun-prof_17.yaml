- en: The "Porting from C#" Series
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “从 C# 迁移”系列
- en: Do you want to port C# code to F#? In this series of posts we'll look at various
    approaches to this, and the design decisions and trade-offs involved.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 想要将 C# 代码转换为 F# 吗？在这一系列的帖子中，我们将研究各种方法，并涉及其中的设计决策和权衡。
- en: '[Porting from C# to F#: Introduction](porting-to-csharp-intro.html). Three
    approaches to porting existing C# code to F#.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从 C# 到 F# 的移植介绍](porting-to-csharp-intro.html)。 将现有的 C# 代码转换为 F# 的三种方法。'
- en: '[Getting started with direct porting](porting-to-csharp-getting-started.html).
    F# equivalents to C#.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始直接移植](porting-to-csharp-getting-started.html)。 C# 的 F# 等效项。'
- en: 'Porting from C# to F#: Introduction'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '从 C# 转换到 F#: 介绍'
- en: 'Porting from C# to F#: Introduction'
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '从 C# 转换到 F#: 介绍'
- en: '*NOTE: Before reading this series, I suggest that you read the following series
    as a prerequisite: ["thinking functionally"](thinking-functionally.html), ["expressions
    and syntax"](expressions-and-syntax.html), and ["understanding F# types"](understanding-fsharp-types.html).*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：在阅读本系列之前，我建议您作为先决条件阅读以下系列：["思考函数化"](thinking-functionally.html)、["表达式和语法"](expressions-and-syntax.html)以及["理解
    F# 类型"](understanding-fsharp-types.html)。*'
- en: For many developers, the next step after learning a new language might be to
    port some existing code over to it, so that they can get a good feel for the differences
    between the two languages.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多开发人员来说，学习一种新语言后的下一步可能是将一些现有代码移植过去，以便他们可以深入了解两种语言之间的差异。
- en: As we pointed out earlier, functional languages are very different from imperative
    languages, and so trying to do a direct port of imperative code to a functional
    language is often not possible, and even if a crude port is done successfully,
    the ported code will probably not be using the functional model to its best advantage.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所指出的，函数式语言与命令式语言非常不同，因此尝试将命令式代码直接移植到函数式语言通常是不可能的，即使成功地进行了粗略移植，移植后的代码也可能没有充分利用函数模型。
- en: Of course, F# is a multi-paradigm language, and includes support for object-oriented
    and imperative techniques, but even so, a direct port will generally not be the
    best way to write the corresponding F# code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，F# 是一种多范式语言，包括对面向对象和命令式技术的支持，但即使如此，直接移植通常不会是编写相应的 F# 代码的最佳方式。
- en: So, in this series, we'll look at various approaches to porting existing C#
    code to F#.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本系列中，我们将研究将现有的 C# 代码转换为 F# 的各种方法。
- en: Levels of porting sophistication
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移植的复杂程度
- en: If you recall the diagram from an [earlier post](key-concepts), there are four
    key concepts that differentiate F# from C#.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您回想一下[早期帖子](key-concepts)中的图表，您会发现有四个关键概念区分了 F# 和 C#。
- en: Function-oriented rather than object-oriented
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以函数为导向而不是对象为导向
- en: Expressions rather than statements
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式而不是语句
- en: Algebraic types for creating domain models
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于创建领域模型的代数类型
- en: Pattern matching for flow of control
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制流的模式匹配
- en: '![four key concepts](four-concepts2.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![四个关键概念](four-concepts2.png)'
- en: And, as explained in that post and its sequels, these aspects are not just academic,
    but offer concrete benefits to you as a developer.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，正如在那篇帖子及其后续帖子中解释的那样，这些方面不仅是学术上的，而且对您作为开发人员提供了具体的好处。
- en: So I have divided the porting process into three levels of sophistication (for
    lack of a better term), which represent how well the ported code exploits these
    benefits.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我将移植过程分为三个复杂程度的级别（暂且这样称呼），这些级别代表了移植代码利用这些优势的程度。
- en: 'Basic Level: Direct port'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本水平：直接移植
- en: At this first level, the F# code is a direct port (where possible) of the C#
    code. Classes and methods are used instead of modules and functions, and values
    are frequently mutated.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一级别，F# 代码是 C# 代码的直接移植（如果可能的话）。 类和方法被用于模块和函数，值经常被改变。
- en: 'Intermediate Level: Functional code'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中级水平：功能代码
- en: At the next level, the F# code has been refactored to be fully functional.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个级别，F# 代码已被重构为完全函数式的。
- en: Classes and methods have been replaced by modules and functions, and values
    are generally immutable.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类和方法已被模块和函数取代，值通常是不可变的。
- en: Higher order functions are used to replace interfaces and inheritance.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高阶函数用于替代接口和继承。
- en: Pattern matching is used extensively for control flow.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式匹配被广泛用于控制流。
- en: Loops have been replaced with list functions such as "map" or recursion.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环已被替换为列表函数，如“map”或递归。
- en: There are two different paths that can get you to this level.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有两条不同的路径可以使您达到这个水平。
- en: The first path is to do a basic direct port to F#, and then refactor the F#
    code.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一条路径是直接将代码移植到 F#，然后重构 F# 代码。
- en: The second path is to convert the existing imperative code to functional code
    while staying in C#, and only then port the functional C# code to functional F#
    code!
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种方法是将现有的命令式代码转换为函数代码，同时保持在C#中，并且只有在将函数式C#代码转换为函数式F#代码之后才进行转换！
- en: The second option might seem clumsy, but for real code it will probably be both
    faster and more comfortable. Faster because you can use a tool such as Resharper
    to do the refactoring, and more comfortable because you are working in C# until
    the final port. This approach also makes it clear that the hard part is not the
    actual port from C# to F#, but the conversion of imperative code to functional
    code!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种选择可能看起来很笨拙，但对于实际代码来说，这可能会更快，更舒适。 更快，因为您可以使用诸如Resharper之类的工具来进行重构，更舒适，因为您在最终端口之前是在C#中工作的。
    这种方法还清楚地表明，困难的部分不是从C#到F#的实际端口，而是将命令式代码转换为函数代码！
- en: 'Advanced Level: Types represent the domain'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级水平：类型代表域
- en: At this final level, not only is the code functional, but the design itself
    has been changed to exploit the power of algebraic data types (especially union
    types).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一级，不仅代码是函数式的，而且设计本身已经改变，以利用代数数据类型（特别是联合类型）的强大功能。
- en: The domain will have been [encoded into types](designing-with-types-single-case-dus.html)
    such that [illegal states are not even representable](designing-with-types-making-illegal-states-unrepresentable.html),
    and [correctness is enforced at compile time](correctness-type-checking.html).
    For a concrete demonstration of the power of this approach, see the [shopping
    cart example](designing-for-correctness) in the ["why use F#" series](why-use-fsharp.html)
    and the whole ["Designing with types" series](designing-with-types.html).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该域将已经被[编码为类型](designing-with-types-single-case-dus.html)，使得[不合法状态甚至不可表示](designing-with-types-making-illegal-states-unrepresentable.html)，并且[正确性在编译时强制执行](correctness-type-checking.html)。
    关于此方法的具体演示，请参见["为什么使用F#系列中的[购物车示例](designing-for-correctness)和整个["使用类型设计"系列](designing-with-types.html)。
- en: This level can only be done in F#, and is not really practical in C#.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此级别只能在F#中完成，而在C#中实际上并不实用。
- en: Porting diagram
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 端口图
- en: Here is a diagram to help you visualize the various porting paths described
    above.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个图表，可帮助您可视化上述各种端口路径。
- en: '![four key concepts](porting-paths.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![四个关键概念](porting-paths.png)'
- en: The approach for this series
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本系列的方法
- en: 'To see how these three levels work in practice, we''ll apply them to some worked
    examples:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这三个级别在实践中的运作方式，我们将它们应用于一些示例：
- en: The first example is a simple system for creating and scoring a ten-pin bowling
    game, based on the code from the well known "bowling game kata" described by "Uncle"
    Bob Martin. The original C# code has only one class and about 70 lines of code,
    but even so, it demonstrates a number of important principles.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个示例是一个简单的十柱保龄球游戏创建和计分系统，基于"叔叔"Bob Martin描述的著名的"保龄球游戏卡塔"的代码。 原始的C#代码只有一个类和大约70行代码，但即便如此，它也演示了一些重要的原则。
- en: Next, we'll look at some shopping cart code, based on [this example](designing-for-correctness.html).
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们将查看一些购物车代码，基于[此示例](designing-for-correctness.html)。
- en: The final example is code that represents states for a subway turnstile system,
    also based on an example from Bob Martin. This example demonstrates how the union
    types in F# can represent a state transition model more easily than the OO approach.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个示例是代表地铁闸机系统状态的代码，也是基于Bob Martin的一个示例。 该示例演示了F#中的联合类型如何比OO方法更容易地表示状态转换模型。
- en: But first, before we get started on the detailed examples, we'll go back to
    basics and do some simple porting of some code snippets. That will be the topic
    of the next post.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，在我们开始详细的示例之前，我们将回到基础知识，并对一些代码片段进行简单的端口转换。 这将是下一篇文章的主题。
- en: Getting started with direct porting
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始直接转换
- en: Getting started with direct porting
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始直接转换
- en: Before we get started on the detailed examples, we'll go back to basics and
    do some simple porting of trivial examples.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始详细的示例之前，我们将回到基础知识，并对一些简单的例子进行简单的端口转换。
- en: In this post and the next, we'll look at the nearest F# equivalents to common
    C# statements and keywords, to guide you when doing direct ports.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章和下一篇文章中，我们将查看常见的C#语句和关键字的最近的F#等效项，以指导您进行直接端口转换。
- en: Basic syntax conversion guidelines
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本语法转换指南
- en: Before starting a port, you need to understand how F# syntax is different from
    C# syntax. This section presents some general guidelines for converting from one
    to another. (For a quick overview of F# syntax as a whole, see ["F# syntax in
    60 seconds"](fsharp-in-60-seconds.html))
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始移植之前，您需要了解 F# 语法与 C# 语法的不同之处。本节介绍了一些从一种语言转换到另一种语言的一般准则。（要快速了解整个 F# 语法，请参阅["60秒内了解
    F# 语法"](fsharp-in-60-seconds.html)）
- en: Curly braces and indentation
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大括号和缩进
- en: C# uses curly braces to indicate the start and end of a block of code. F# generally
    just uses indentation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: C# 使用大括号表示代码块的开始和结束。F# 通常只使用缩进。
- en: 'Curly braces are used in F#, but not for blocks of code. Instead, you will
    see them used:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: F# 中使用大括号，但不用于代码块。相反，您会看到它们用于：
- en: For definitions and usage of "record" types.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关"record"类型的定义和用法。
- en: In conjunction with computation expressions, such as `seq` and `async`. In general,
    you will not be using these expressions for basic ports anyway.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与计算表达式一起使用，例如 `seq` 和 `async`。一般来说，您不会在基本移植中使用这些表达式。
- en: For details on the indentation rules, [see this post](fsharp-syntax).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有关缩进规则的详细信息，请参阅[此文章](fsharp-syntax)。
- en: Semicolons
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分号
- en: Unlike C#'s semicolon, F# does not require any kind of line or statement terminator.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与 C# 的分号不同，F# 不需要任何形式的行或语句终止符。
- en: Commas
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逗号
- en: F# does not use commas for separating parameters or list elements, so remember
    not to use commas when porting!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: F# 不使用逗号分隔参数或列表元素，因此在移植时请记得不要使用逗号！
- en: '*For separating list elements, use semicolons rather than commas.*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*用分号而不是逗号分隔列表元素。*'
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*For separating parameters for native F# functions, use white space.*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*用空格分隔原生 F# 函数的参数。*'
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Commas are generally only used for tuples, or for separating parameters when
    calling .NET library functions. (See [this post](defining-functions.html#tuples)
    for more on tuples vs multiple parameters)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 逗号通常仅用于元组，或者在调用 .NET 库函数时分隔参数。（有关元组与多个参数的更多信息，请参阅[此文章](defining-functions.html#tuples)）
- en: Defining variables, functions and types
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义变量、函数和类型
- en: 'In F#, definitions of both variables and functions use the form:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 F# 中，变量和函数的定义都采用以下形式：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Definitions for all types (classes, structures, interfaces, etc.) use the form:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所有类型（类、结构、接口等）的定义形式为：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The use of the `=` sign is an important difference between F# and C#. Where
    C# uses curly braces, F# uses the `=` and then the following block of code must
    be indented.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `=` 符号是 F# 和 C# 之间的一个重要区别。C# 使用大括号，而 F# 使用 `=`，然后后面的代码块必须缩进。
- en: Mutable values
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可变值
- en: In F#, values are immutable by default. If you are doing a direct imperative
    port, you probably need to make some of the values mutable, using the `mutable`
    keyword. Then to assign to the values, use the `<-` operator, not the equals sign.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 F# 中，默认情况下值是不可变的。如果您正在进行直接的命令式移植，可能需要将某些值设为可变，使用 `mutable` 关键字。然后为了给值赋值，使用
    `<-` 运算符，而不是等号。
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Assignment vs. testing for equality
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 赋值与测试相等性
- en: In C#, the equals sign is used for assignment, and the double equals `==` is
    used for testing equality.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C# 中，等号用于赋值，双等号 `==` 用于测试相等性。
- en: However in F#, the equals sign is used for testing equality, and is also used
    to initially bind values to other values when declared,
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然而在 F# 中，等号用于测试相等性，并且在声明时也用于最初将值绑定到其他值，
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To test for inequality, use SQL-style `<>` rather than `!=`
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试不相等性，请使用 SQL 风格的 `<>` 而不是 `!=`
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you accidentally use `!=` you will probably get an [error FS0020](index5.html#FS0020).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您意外使用 `!=`，可能会收到 [错误 FS0020](index5.html#FS0020)。
- en: 'Conversion example #1'
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '转换示例 #1'
- en: With these basic guidelines in place, let's look at some real code examples,
    and do a direct port for them.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些基本准则，让我们看一些真实的代码示例，并为它们进行直接移植。
- en: This first example has some very simple code, which we will port line by line.
    Here's the C# code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第一个例子有一些非常简单的代码，我们将逐行移植。以下是 C# 代码。
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Converting "using" and "namespace"
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换 "using" 和 "namespace"
- en: 'These keywords are straightforward:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些关键字很简单：
- en: '`using` becomes `open`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`using` 变成 `open`'
- en: '`namespace` with curly braces becomes just `namespace`.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有大括号的 `namespace` 变成了简单的 `namespace`。
- en: Unlike C#, F# files do not generally declare namespaces unless they need to
    interop with other .NET code. The filename itself acts as a default namespace.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 与 C# 不同，F# 文件通常不声明命名空间，除非需要与其他 .NET 代码进行交互。文件名本身就充当默认命名空间。
- en: Note that the namespace, if used, must come before anything else, such as "open".
    This the opposite order from most C# code.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，命名空间（如果使用）必须放在任何其他内容之前，例如 “open”。这与大多数 C# 代码的相反顺序。
- en: Converting the class
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换类
- en: 'To declare a simple class, use:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明一个简单的类，请使用：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that there are parentheses after the class name. These are required for
    class definitions.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，类名后面有括号。这些是类定义所必需的。
- en: More complicated class definitions will be shown in the next example, and you
    read the [complete discussion of classes](classes.html).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的类定义将在下一个示例中展示，并且您可以阅读[完整的类讨论](classes.html)。
- en: Converting function/method signatures
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换函数/方法签名
- en: 'For function/method signatures:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于函数/方法签名：
- en: Parentheses are not needed around the parameter list
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数列表周围不需要括号
- en: Whitespace is used to separate the parameters, not commas
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用空格分隔参数，而不是逗号
- en: Rather than curly braces, an equals sign signals the start of the function body
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 而不是花括号，等号表示函数体的开始
- en: 'The parameters don''t normally need types but if you do need them:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数通常不需要类型，但如果需要：
- en: The type name comes after the value or parameter
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型名称位于值或参数之后
- en: The parameter name and type are separated by colons
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数名和类型由冒号分隔
- en: When specifying types for parameters, you should probably wrap the pair in parentheses
    to avoid unexpected behavior.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在指定参数类型时，您可能应该将一对括号括起来，以避免意外行为。
- en: The return type for the function as a whole is prefixed by a colon, and comes
    after all the other parameters
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数作为整体的返回类型前面加上冒号，位于所有其他参数之后
- en: 'Here''s a C# function signature:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 C# 函数签名：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'and here''s the corresponding F# function signature with explicit types:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是具有显式类型的相应 F# 函数签名：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: However, because F# can normally infer the parameter and return types, you rarely
    need to specify them explicitly.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于 F# 通常可以推断出参数和返回类型，所以很少需要显式指定它们。
- en: 'Here''s a more typical F# signature, with inferred types:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更典型的 F# 签名，具有推断类型：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: void
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: void
- en: The `void` keyword in C# is generally not needed, but if required, would be
    converted to `unit`
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C# 中，`void` 关键字通常不需要，但如果需要，则会转换为 `unit`
- en: 'So the C# code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，C# 代码：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'could be converted to the F# code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 可以转换为 F# 代码：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'but again, the specific types are rarely needed, and so the F# version is just:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 但再次指出，很少需要具体的类型，因此 F# 版本只是：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Converting function/method bodies
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换函数/方法体
- en: 'In a function body, you are likely to have a combination of:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数体中，您可能会有一系列组合：
- en: Variable declarations and assignments
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量声明和赋值
- en: Function calls
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数调用
- en: Control flow statements
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制流语句
- en: Return values
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回值
- en: We'll have a quick look at porting each of these in turn, except for control
    flow, which we'll discuss later.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将依次快速查看每个端口，但不包括控制流，我们稍后会讨论。
- en: Converting variable declarations
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换变量声明
- en: 'Almost always, you can use `let` on its own, just like `var` in C#:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎总是可以单独使用 `let`，就像在 C# 中使用 `var` 一样：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Unlike C#, you must always assign ("bind") something to an F# value as part
    of its declaration.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 与 C# 不同，您必须始终将某些内容分配（“绑定”）给 F# 值作为其声明的一部分。
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As noted above, if you need to change the value after its declaration, you must
    use the "mutable" keyword.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，如果需要在其声明之后更改值，则必须使用 “mutable” 关键字。
- en: If you need to specify a type for a value, the type name comes after the value
    or parameter, preceded by a colon.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要为值指定类型，则类型名称位于值或参数之后，前面加上冒号。
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Converting function calls
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换函数调用
- en: When calling a native F# function, there is no need for parentheses or commas.
    In other words, the same rules apply for calling a function as when defining it.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用本机 F# 函数时，不需要括号或逗号。换句话说，调用函数与定义函数时使用的规则相同。
- en: 'Here''s C# code for defining a function, then calling it:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是定义函数然后调用它的 C# 代码：
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'However, because F# can normally infer the parameter and return types, you
    rarely need to specify them explicitly So here''s typical F# code for defining
    a function and then calling it:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于 F# 通常可以推断出参数和返回类型，所以很少需要显式指定它们。因此，这是定义函数然后调用它的典型 F# 代码：
- en: '[PRE25]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Return values
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: In C#, you use the `return` keyword. But in F#, the last value in the block
    is automatically the "return" value.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C# 中，您使用 `return` 关键字。但在 F# 中，块中的最后一个值会自动成为“返回”值。
- en: Here's the C# code returning the `result` variable.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是返回 `result` 变量的 C# 代码。
- en: '[PRE26]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: And here's the F# equivalent.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 F# 的等效方式。
- en: '[PRE27]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This is because F# is expression-based. Everything is an expression, and the
    value of a block expression as a whole is just the value of the last expression
    in the block.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 F# 是基于表达式的。一切都是表达式，块表达式的值就是块中最后一个表达式的值。
- en: For more details on expression-oriented code, see ["expressions vs statements"](expressions-vs-statements.html).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于表达式导向代码的细节，请参见["表达式 vs 语句"](expressions-vs-statements.html)。
- en: Printing to the console
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打印到控制台
- en: To print output in C#, you generally use `Console.WriteLine` or similar. In
    F#, you generally use `printf` or similar, which is typesafe. ([More details on
    using "printf" family](printf)).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C# 中打印输出，通常使用 `Console.WriteLine` 或类似的方法。在 F# 中，通常使用 `printf` 或类似的方法，这是类型安全的。([更多关于使用
    "printf" 系列的细节](printf))。
- en: 'The complete port of example #1'
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '示例 #1 的完整移植'
- en: 'Putting it all together, here is the complete direct port of example #1 to
    F#.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '将所有内容整合在一起，这里是将示例 #1 直接移植到 F# 的完整代码。'
- en: 'The C# code again:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: C# 代码如下：
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And the equivalent F# code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的 F# 代码如下：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
