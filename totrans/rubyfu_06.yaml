- en: Module 0x6 | Forensic Kung Fu
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Module 0x6 | Forensic Kung Fu
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firefox Investigation
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find Firefox profile databases in
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Windows
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In above directories, there are many SQLite database files, so let's to import
    these databases and see what we get
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: More about [Firefox forensic](http://www.forensicswiki.org/wiki/Mozilla_Firefox_3_History_File_Format)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Google Chrome Investigation
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Windows
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: More about [Chrome forensic](http://www.forensicswiki.org/wiki/Google_Chrome)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Windows Forensic
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Forensic
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Registry
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](win-foren__winreg1.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Enumeration
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note: `KEY_ALL_ACCESS` enables you to write and deleted. The default access
    is `KEY_READ` if you specify nothing.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Android Forensic
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Forensic
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Parsing APK file
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our example will be on DIVA (Damn insecure and vulnerable App) APK file. You
    can download the file from [here](http://www.payatu.com/wp-content/uploads/2016/01/diva-beta.tar.gz).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Some methods may not return the expected output because the missing information
    in the apk, e.g. the suggested apk doesn''t have icon and signs but you can download
    some known apk like twitter apk or so and test it, it works.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: We'll use ruby_apk gem to do that
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Install ruby_apk gem
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, lets start parsing
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Memory Forensic
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Memory Forensic
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux memory
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dump Linux memory
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To dump Linux memory for a specific process to disk, we need the follwoing:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '**Get process id (PID):** `/proc/\[PID\]/cmdline`'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*cmdline* is file holds the complete command line for the process.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get PID maps:** `/proc/\[PID\]/maps`'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*maps* is file containing the currently mapped memory regions and their access
    permissions.'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get processs memory pages:** `/proc/\[PID\]/mem`'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*mem* is a file can be used to access the pages of a process''s memory through'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Case study
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let's assume we want to dump `gnome-keyring-daemon` process's memory to our
    disk in order to extract the logged-in user(s) password(s) since its stored in
    as a plan text in memory. Moreover, we know that it comes after "libgck-1" or
    "libgcrypt" strings in memory. We'll brack that a parts then put it together.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '**Get process id (PID)**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Get PID maps:**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Get processs memory pages:**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Network Traffic Analysis
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network Traffic Analysis
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basic PCAP File Parsing
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Download [packets.pcap](https://github.com/rubyfu/RubyFu/blob/master/files/module06/packets.pcap)
    file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Find FTP Credentials
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Returns
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Download [ftp.pcap](https://github.com/rubyfu/RubyFu/blob/master/files/module06/ftp.pcap)
    file
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Capturing and building PCAP file
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometime we don't have the time or option to install external libraries on our
    environment. Let's work capture all packets on all interfaces then see how to
    build a [**pcap**](https://wiki.wireshark.org/Development/LibpcapFileFormat) file
    to write in it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: <!--
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.behindthefirewalls.com/2014/01/extracting-files-from-network-traffic-pcap.html](http://www.behindthefirewalls.com/2014/01/extracting-files-from-network-traffic-pcap.html)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[http://jarmoc.com/blog/2013/05/22/bsjtf-ctf-writeup-what-in-the-name-of-zeus/](http://jarmoc.com/blog/2013/05/22/bsjtf-ctf-writeup-what-in-the-name-of-zeus/)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://jarmoc.com/blog/2013/05/22/bsjtf-ctf-writeup-what-in-the-name-of-zeus/](http://jarmoc.com/blog/2013/05/22/bsjtf-ctf-writeup-what-in-the-name-of-zeus/)'
- en: '[http://hamsa.cs.northwestern.edu/readings/password-cracking2/](http://hamsa.cs.northwestern.edu/readings/password-cracking2/)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://hamsa.cs.northwestern.edu/readings/password-cracking2/](http://hamsa.cs.northwestern.edu/readings/password-cracking2/)'
- en: -->
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: <!--
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <!--
- en: '!/usr/bin/env ruby'
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '!/usr/bin/env ruby'
- en: '#'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '#'
- en: '[https://www.youtube.com/watch?v=owsr3X453Z4](https://www.youtube.com/watch?v=owsr3X453Z4)'
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/watch?v=owsr3X453Z4](https://www.youtube.com/watch?v=owsr3X453Z4)'
- en: require 'packetfu'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: require 'packetfu'
- en: require 'pp'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: require 'pp'
- en: capture = PacketFu::Capture.new :iface => 'mon0', :promisc => true, :start =>
    true
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: capture = PacketFu::Capture.new :iface => 'mon0', :promisc => true, :start =>
    true
- en: capture.stream.each do |p|
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: capture.stream.each do |p|
- en: pkt = PacketFu::Packet.parse p
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: pkt = PacketFu::Packet.parse p
- en: pp pkt
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: pp pkt
- en: end
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: \
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: \
- en: array 56
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组 56
- en: include PacketFu
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 包括PacketFu
- en: packets = PcapFile.file_to_array '/home/KING/wireless.pcap'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: packets = PcapFile.file_to_array '/home/KING/wireless.pcap'
- en: packets.each*with_index do |packet , ref|
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: packets.each*with_index do |packet , ref|
- en: puts "*" *75
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: puts "*" *75
- en: 'puts "Reference: #{ref}"'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: puts "参考：#{ref}"
- en: puts "\*" _ 75
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: puts "\*" _ 75
- en: pkt = Packet.parse(packet)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: pkt = Packet.parse(packet)
- en: puts pkt.dissect
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: puts pkt.dissect
- en: sleep 2
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: sleep 2
- en: end
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: \
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: \
- en: packets = PcapFile.read_packets '/home/KING/wireless.pcap'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: packets = PcapFile.read_packets '/home/KING/wireless.pcap'
- en: packet = packets[56]
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: packet = packets[56]
- en: pkt = Packet.parse(packet)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: pkt = Packet.parse(packet)
- en: puts pkt.inspect_hex
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: puts pkt.inspect_hex
- en: =begin
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: =begin
- en: '1876'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '1876'
- en: '1551'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '1551'
- en: '1550'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '1550'
- en: '1339'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '1339'
- en: '1324'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '1324'
- en: '459'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '459'
- en: '458'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '458'
- en: =end
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: =end
- en: '--->'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '--->'
- en: Parsing Log Files
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析日志文件
- en: Parsing Log Files
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析日志文件
- en: Apache Log File
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apache日志文件
- en: Let's first list the important information that we may need from the Apache
    logs
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先列出我们可能需要从Apache日志中获取的重要信息
- en: IP address
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP地址
- en: Time stamp
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间戳
- en: HTTP method
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP方法
- en: URI path
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URI路径
- en: Response code
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应代码
- en: User agent
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户代理
- en: To read a log file, I prefer to read it as lines
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了读取日志文件，我更喜欢按行读取
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: I was looking for a simple regular expression for Apache logs. I found one [here](http://stackoverflow.com/questions/4846394/how-to-efficiently-parse-large-text-files-in-ruby)
    with small tweak.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在寻找Apache日志的简单正则表达式。我在[这里](http://stackoverflow.com/questions/4846394/how-to-efficiently-parse-large-text-files-in-ruby)找到了一个，稍作调整。
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: So I came up with this small method which parses and converts Apache "access.log"
    file to an array contains a list of hashes with our needed information.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我想出了这个小方法，它解析并将Apache的"access.log"文件转换为包含我们所需信息的哈希列表的数组。
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Returns
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Note: The Apache LogFormat is configured as `LogFormat "%h %l %u %t \"%r\"
    %>s %b \"%{Referer}i\" \"%{User-agent}i\"" combined` which is the default configurations.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：Apache LogFormat 配置为 `LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\"
    \"%{User-agent}i\"" combined`，这是默认配置。
- en: '%h is the remote host (i.e. the client IP address)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '%h 是远程主机（即客户端IP地址）'
- en: '%l is the identity of the user determined by identd (not usually used since
    not reliable)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '%l 是由identd确定的用户标识（通常不使用，因为不可靠）'
- en: '%u is the user name determined by HTTP authentication'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '%u 是由HTTP身份验证确定的用户名'
- en: '%t is the time the request was received.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '%t 是接收到请求的时间。'
- en: '%r is the request line from the client. ("GET / HTTP/1.0")'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '%r 是来自客户端的请求行。("GET / HTTP/1.0")'
- en: '%>s is the status code sent from the server to the client (200, 404 etc.)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '%>s 是服务器发送给客户端的状态代码（200、404等）'
- en: '%b is the size of the response to the client (in bytes)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '%b 是发送给客户端的响应大小（以字节为单位）'
- en: Referer is the page that linked to this URL.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用者是链接到此URL的页面。
- en: User-agent is the browser identification string.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户代理是浏览器识别字符串。
- en: IIS Log File
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IIS日志文件
- en: Here is a basic IIS log regular expression
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本的IIS日志正则表达式
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
