- en: '| [![The circular staircase leading up to the Vatican museums.  It was designed
    by Giuseppe Momo in 1932](../Images/3fbcbc9d7a597ec2fc38bb6f90044200.jpg)](/http://philip.greenspun.com/images/pcd0800/vatican-museum-staircase-4.tcl)
    |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| [![通往梵蒂冈博物馆的圆形楼梯。由乔治·莫莫于1932年设计](../Images/3fbcbc9d7a597ec2fc38bb6f90044200.jpg)](/http://philip.greenspun.com/images/pcd0800/vatican-museum-staircase-4.tcl)
    |'
- en: Data Warehousing
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据仓库
- en: part of [SQL for Web Nerds](index.html) by [Philip Greenspun](http://philip.greenspun.com/)
    |
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL for Web Nerds](index.html) 的一部分，作者是[Philip Greenspun](http://philip.greenspun.com/)。'
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[![Tom Huntington in waterfall.  Grand Canyon National Park.](../Images/1cc22b005cd8e7bee2940417de5fca3c.jpg)](/http://philip.greenspun.com/images/pcd2899/tom-in-waterfall-41.tcl)
    In the preceding chapters, you''ve been unwittingly immersed in the world of on-line
    transaction processing (OLTP). This world carries with it some assumptions:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[![汤姆·亨廷顿在瀑布中。大峡谷国家公园。](../Images/1cc22b005cd8e7bee2940417de5fca3c.jpg)](/http://philip.greenspun.com/images/pcd2899/tom-in-waterfall-41.tcl)
    在前面的章节中，你已经不知不觉地沉浸在在线事务处理（OLTP）的世界中。这个世界带有一些假设：'
- en: Only store a piece of information once. If there are N copies of something in
    the database and you need to change it, you might forget to change it in all N
    places. Note that only storing information in one spot also enables updates to
    be fast.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只存储一条信息。如果数据库中有 N 个副本，而你需要更改它，你可能会忘记在所有 N 个地方更改。请注意，只在一个地方存储信息还可以使更新变得快速。
- en: It is okay if queries are complex because they are authored infrequently and
    by professional programmers.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果查询复杂也没关系，因为它们很少由专业程序员撰写。
- en: Never sequentially scan large tables; reread [the tuning chapter](tuning.html)
    if Oracle takes more than one second to perform any operation.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绝不要顺序扫描大表；如果 Oracle 执行任何操作需要超过一秒钟的时间，请重新阅读[调优章节](tuning.html)。
- en: These are wonderful rules to live by if one is booking orders, adding user comments
    to pages, recording a clickthrough, or seeing if someone is authorized to download
    a file.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要预订订单、向页面添加用户评论、记录点击次数或查看某人是否有权限下载文件，这些都是可以遵循的绝妙规则。
- en: You can probably continue to live by these rules if you want some answers from
    your data. Write down a list of questions that are important and build some report
    pages. You might need [materialized views](views.html#materialized) to make these
    reports fast and your queries might be complex, but you don't need to leave the
    OLTP world simply because business dictates that you answer a bunch of questions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想从数据中获得一些答案，你可能会继续遵循这些规则。写下一份重要的问题清单并构建一些报告页面。你可能需要[物化视图](views.html#materialized)来加快这些报告的速度，你的查询可能会很复杂，但你不需要因为业务要求回答一堆问题而离开
    OLTP 世界。
- en: Why would anyone leave the OLTP world? Data warehousing is useful when you don't
    know what questions to ask.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么有人会离开 OLTP 世界？当你不知道要问什么问题时，数据仓库是有用的。
- en: What it means to facilitate exploration
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 促进探索的含义
- en: '[![Reenactment of Powell''s trip.  Lava Falls.  Grand Canyon National Park.  August
    1999.](../Images/17b7699b1e0448581b0dbe14c40581a3.jpg)](/http://philip.greenspun.com/images/pcd2882/grand-canyon-powell-reenactment-38.tcl)
    Data exploration is only useful when non-techies are able to explore. That means
    people with very weak skills will be either authoring queries or specifying queries
    with menus. You can''t ask a marketing executive to look at a 600-table data model
    and pick and choose the relevant columns. You can''t ask a salesman to pull the
    answer to "is this a repeat customer or not?" out of a combination of the `customers`
    and `orders` tables.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[![鲍威尔之行的再现。熔岩瀑布。大峡谷国家公园。1999年8月。](../Images/17b7699b1e0448581b0dbe14c40581a3.jpg)](/http://philip.greenspun.com/images/pcd2882/grand-canyon-powell-reenactment-38.tcl)
    只有当非技术人员能够进行数据探索时，数据探索才有用。这意味着技能很弱的人要么撰写查询，要么通过菜单指定查询。你不能让市场执行官查看一个包含 600 个表的数据模型并挑选相关列。你不能让销售员从`customers`和`orders`表的组合中找出“这是一个重复客户还是新客户？”的答案。'
- en: 'If a data exploration environment is to be useful it must fulfill the following
    criteria:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据探索环境要有用，它必须满足以下标准：
- en: complex questions can be asked with a simple SQL query
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂的问题可以通过简单的 SQL 查询来解决
- en: different questions imply very similar SQL query structure
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的问题意味着非常相似的 SQL 查询结构
- en: very different questions require very similar processing time to answer
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常不同的问题需要非常相似的处理时间来回答
- en: exploration can be done from any computer anywhere
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索可以在任何地方的任何计算机上进行
- en: The goal is that a business expert can sit down at a Web browser, use a sequence
    of forms to specify a query, and get a result back in an amount of time that seems
    reasonable.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是让业务专家坐在网络浏览器前，使用一系列表单指定查询，并在合理的时间内获得结果。
- en: It will be impossible to achieve this with our standard OLTP data models. Answering
    a particular question may require JOINing in four or five extra tables, which
    could result in a 10,000-fold increase in processing time. Even if a novice user
    could be guided to specifying a 7-way JOIN from among 600 tables, that person
    would have no way of understanding or predicting query processing time. Finally
    there is the question of whether you want novices querying your OLTP tables. If
    they are only typing SELECTs they might not be doing too much long-term harm but
    the short-term processing load might result in a system that feels crippled.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们标准的 OLTP 数据模型将无法实现这一点。回答一个特定问题可能需要在四五个额外的表中进行连接，这可能导致处理时间增加 10,000 倍。即使一个新手用户可以被引导从
    600 个表中选择 7 路连接，但他们无法理解或预测查询处理时间。最后还有一个问题，你是否希望新手查询你的 OLTP 表。如果他们只是输入 SELECT，他们可能不会造成太大的长期伤害，但短期的处理负荷可能导致系统感觉受损。
- en: It is time to study *data warehousing*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候学习*数据仓库*了。
- en: Classical Retail Data Warehousing
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 经典零售数据仓库
- en: '"Another segment of society that has constructed a language of its own is business.
    ... [The businessman] is speaking a language that is familiar to him and dear
    to him. Its portentous nouns and verbs invest ordinary events with high adventure;
    the executive walks among ink erasers caparisoned like a knight. This we should
    be tolerant of--every man of spirit wants to ride a white horse. ... A good many
    of the special words of business seem designed more to express the user''s dreams
    than to express his precise meaning."'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"另一个构建自己语言的社会群体是商界。... [商人] 正在说着一种对他来说熟悉而珍贵的语言。它的重要名词和动词赋予普通事件高度冒险性；高管们在墨水橡皮擦中穿行，像骑士一样装饰华丽。我们应该宽容——每个有精神的人都想骑着白马。...
    商业中许多专业术语似乎更多地设计用来表达使用者的梦想，而不是表达他的确切含义。"'
- en: -- last chapter of [The Elements of Style](http://www.amazon.com/exec/obidos/ASIN/020530902X/pgreenspun-20),
    Strunk and White
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [《风格要素》](http://www.amazon.com/exec/obidos/ASIN/020530902X/pgreenspun-20)
    最后一章，斯特朗克和怀特
- en: Let's imagine a conversation between the Chief Information Officer of WalMart
    and a sales guy from Sybase. We've picked these companies for concreteness but
    they stand for "big Management Information System (MIS) user" and "big relational
    database management system (RDBMS) vendor".
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一场沃尔玛的首席信息官和来自赛贝斯的销售人员之间的对话。我们选择这些公司是为了具体性，但它们代表着“大型管理信息系统（MIS）用户”和“大型关系数据库管理系统（RDBMS）供应商”。
- en: 'Walmart: "I want to keep track of sales in all of my stores simultaneously."'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 沃尔玛：“我想同时跟踪所有商店的销售情况。”
- en: 'Sybase: "You need our wonderful RDBMS software. You can stuff data in as sales
    are rung up at cash registers and simultaneously query data out right here in
    your office. That''s the beauty of concurrency control."'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 赛贝斯：“您需要我们出色的 RDBMS 软件。您可以在收银机结账时将���据存入，同时可以在办公室立即查询数据。这就是并发控制的美妙之处。”
- en: 'So Walmart buys a $1 million Sun E10000 multi-CPU server and a $500,000 Sybase
    license. They buy [Database Design for Smarties](http://www.amazon.com/exec/obidos/ASIN/1558605150/pgreenspun-20)
    and build themselves a normalized SQL data model:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，沃尔玛购买了一台价值 100 万美元的 Sun E10000 多 CPU 服务器和一份价值 50 万美元的赛贝斯许可证。他们购买了[《智者的数据库设计》](http://www.amazon.com/exec/obidos/ASIN/1558605150/pgreenspun-20)
    并建立了一个规范化的 SQL 数据模型：
- en: '[PRE0]'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What do we have now?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有什么？
- en: SALES table
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 销售表
- en: '| product id | store id | quantity sold | date/time of sale |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 产品 ID | 商店 ID | 销售数量 | 销售日期/时间 |'
- en: '| 567 | 17 | 1 | 1997-10-22 09:35:14 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 567 | 17 | 1 | 1997-10-22 09:35:14 |'
- en: '| 219 | 16 | 4 | 1997-10-22 09:35:14 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 219 | 16 | 4 | 1997-10-22 09:35:14 |'
- en: '| 219 | 17 | 1 | 1997-10-22 09:35:17 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 219 | 17 | 1 | 1997-10-22 09:35:17 |'
- en: '| ... |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| ... |'
- en: PRODUCTS table
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 产品表
- en: '| product id | product name | product category | manufacturer id |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 产品 ID | 产品名称 | 产品类别 | 制造商 ID |'
- en: '| 567 | Colgate Gel Pump 6.4 oz. | 1 | 68 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 567 | 高露洁凝胶泵 6.4 盎司 | 1 | 68 |'
- en: '| 219 | Diet Coke 12 oz. can | 2 | 5 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 219 | 健怡可乐 12 盎司罐装 | 2 | 5 |'
- en: '| ... |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| ... |'
- en: PRODUCT_CATEGORIES table
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 产品类别表
- en: '| product category id | product category name |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 产品类别 ID | 产品类别名称 |'
- en: '| 1 | toothpaste |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 牙膏 |'
- en: '| 2 | soda |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 苏打 |'
- en: '| ... |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| ... |'
- en: MANUFACTURERS table
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 制造商表
- en: '| manufacturer id | manufacturer name |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 制造商 ID | 制造商名称 |'
- en: '| 68 | Colgate |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 68 | 高露洁 |'
- en: '| 5 | Coca Cola |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 可口可乐 |'
- en: '| ... |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| ... |'
- en: STORES table
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 商店表
- en: '| store id | city id | store location | phone number |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 店铺ID | 城市ID | 店铺位置 | 电话号码 |'
- en: '| 16 | 34 | 510 Main Street | 415-555-1212 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 16 | 34 | 主街510号 | 415-555-1212 |'
- en: '| 17 | 58 | 13 Maple Avenue | 914-555-1212 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 17 | 58 | 枫树大道13号 | 914-555-1212 |'
- en: '| ... |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| ... |'
- en: CITIES table
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 城市表
- en: '| city id | city name | state | population |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 城市ID | 城市名称 | 州 | 人口 |'
- en: '| 34 | San Francisco | California | 700,000 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 34 | 旧金山 | 加利福尼亚 | 700,000 |'
- en: '| 58 | East Fishkill | New York | 30,000 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 58 | 伊斯特菲什基尔 | 纽约 | 30,000 |'
- en: '| ... |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| ... |'
- en: After a few months of stuffing data into these tables, a WalMart executive,
    call her Jennifer Amolucre asks "I noticed that there was a Colgate promotion
    recently, directed at people who live in small towns. How much Colgate toothpaste
    did we sell in those towns yesterday? And how much on the same day a month ago?"
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 几个月后，一位WalMart高管，我们称她为Jennifer Amolucre，问道：“我注意到最近有一次高露洁促销活动，针对的是居住在小镇的人群。昨天我们在这些小镇上销售了多少高露洁牙膏？一个月前的同一天又销售了多少？”
- en: At this point, reflect that because the data model is normalized, this information
    can't be obtained from scanning one table. A normalized data model is one in which
    all the information in a row depends only on the primary key. For example, the
    city population is not contained in the `stores` table. That information is stored
    once per city in the `cities` table and only `city_id` is kept in the `stores`
    table. This ensures efficiency for transaction processing. If Walmart has to update
    a city's population, only one record on disk need be touched. As computers get
    faster, what is more interesting is the consistency of this approach. With the
    city population kept only in one place, there is no risk that updates will be
    applied to some records and not to others. If there are multiple stores in the
    same city, the population will be pulled out of the same slot for all the stores
    all the time.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，请反思一下，由于数据模型是规范化的，这些信息无法从扫描一个表中获取。规范化的数据模型是指行中的所有信息仅依赖于主键。例如，城市人口不包含在`stores`表中。这些信息仅在`cities`表中每个城市存储一次，而`stores`表中仅保留`city_id`。这确保了事务处理的效率。如果Walmart需要更新一个城市的人口，只需触及磁盘上的一个记录。随着计算机变得更快，更有趣的是这种方法的一致性。只有将城市人口保存在一个地方，就不会有更新应用于某些记录而不应用于其他记录的风险。如果同一城市有多家商店，那么所有商店的人口将始终从同一个位置提取。
- en: Ms. Amolucre's query will look something like this...
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Amolucre女士的查询将类似于这样...
- en: '[PRE1]'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This query would be tough for a novice to read and, being a 6-way JOIN of some
    fairly large tables, might take quite a while to execute. Moreover, these tables
    are being updated as Ms. Amolucre's query is executed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个新手来说，这个查询可能很难阅读，并且由于是对一些相当大的表进行6路连接，执行起来可能需要相当长的时间。此外，这些表在执行Amolucre女士的查询时正在更新。
- en: Soon after the establishment of Jennifer Amolucre's quest for marketing information,
    store employees notice that there are times during the day when it is impossible
    to ring up customers. Any attempt to update the database results in the computer
    freezing up for 20 minutes. Eventually the database administrators realize that
    the system collapses every time Ms. Amolucre's toothpaste query gets run. They
    complain to Sybase tech support.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就在Jennifer Amolucre寻求市场信息的任务建立之后，店铺员工注意到一天中有时无法为顾客结账。任何尝试更新数据库都会导致计算机在20分钟内冻结。最终，数据库管理员意识到每次运行Amolucre女士的牙膏查询时系统都会崩溃。他们向Sybase技术支持投诉。
- en: 'Walmart: "We type in the toothpaste query and our system wedges."'
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Walmart：“我们输入牙膏查询，我们的系统卡住了。”
- en: 'Sybase: "Of course it does! You built an on-line transaction processing (OLTP)
    system. You can''t feed it a decision support system (DSS) query and expect things
    to work!"'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Sybase：“当然会！你建立了一个在线事务处理（OLTP）系统。你不能输入一个决策支持系统（DSS）查询然后期望一切正常运行！”
- en: 'Walmart: "But I thought the whole point of SQL and your RDBMS was that users
    could query and insert simultaneously."'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Walmart：“但我以为SQL和你们的关系型数据库管理系统的整个重点是用户可以同时查询和插入。”
- en: 'Sybase: "Uh, not exactly. If you''re reading from the database, nobody can
    write to the database. If you''re writing to the database, nobody can read from
    the database. So if you''ve got a query that takes 20 minutes to run and don''t
    specify special locking instructions, nobody can update those tables for 20 minutes."'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Sybase：“嗯，并不完全是这样。如果你从数据库中读取数据，那么没有人可以向数据库写入数据。如果你向数据库写入数据，那么没有人可以从数据库中读取数据。因此，如果你有一个需要运行20分钟的查询，并且没有指定特殊的锁定指令，那么在这20分钟���没有人可以更新这些表。”
- en: 'Walmart: "That sounds like a bug."'
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Walmart：“听起来像是一个bug。”
- en: 'Sybase: "Actually it is a feature. We call it *pessimistic locking*."'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Sybase：“实际上这是一个特性。我们称之为*悲观锁定*。”
- en: 'Walmart: "Can you fix your system so that it doesn''t lock up?"'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Walmart：“你能修复你的系统，使其不会锁死吗？”
- en: 'Sybase: "No. But we made this great loader tool so that you can copy everything
    from your OLTP system into a separate DSS system at 100 GB/hour."'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Sybase：“不行。但我们制作了这个很棒的加载工具，让你可以以每小时 100 GB 的速度将所有数据从你的 OLTP 系统复制到一个单独的 DSS 系统。”
- en: Since you are reading this book, you are probably using Oracle, which is one
    of the few database management systems that achieves consistency among concurrent
    users via versioning rather than locking (the other notable example is the free
    open-source PostgreSQL RDBMS). However, even if you are using Oracle, where readers
    never wait for writers and writers never wait for readers, you still might not
    want the transaction processing operation to slow down in the event of a marketing
    person entering an expensive query.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你正在阅读这本书，你可能正在使用 Oracle，这是少数几个通过版本控制而不是锁定实现并发用户一致性的数据库管理系统之一（另一个显著的例子是免费开源的
    PostgreSQL RDBMS）。然而，即使你正在使用 Oracle，在那里读者永远不用等待写入者，写入者也永远不用等待读者，你可能仍然不希望在市场人员输入昂贵查询时使事务处理操作变慢。
- en: Basically what IT vendors want Walmart to do is set up another RDBMS installation
    on a separate computer. Walmart needs to buy another $1 million of computer hardware.
    They need to buy another RDBMS license. They also need to hire programmers to
    make sure that the OLTP data is copied out nightly and stuffed into the DSS system--*data
    extraction*. Walmart is now building the *data warehouse*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上 IT 供应商希望 Walmart 建立另一个 RDBMS 安装在另一台计算机上。Walmart 需要购买另外 100 万美元的计算机硬件。他们需要购买另一个
    RDBMS 许可证。他们还需要雇佣程序员确保每晚将 OLTP 数据复制并填充到 DSS 系统中——*数据提取*。Walmart 现在正在建立*数据仓库*。
- en: Insight 1
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 洞察 1
- en: A data warehouse is a separate RDBMS installation that contains copies of data
    from on-line systems. A physically separate data warehouse is not absolutely necessary
    if you have a lot of extra computing horsepower. With a DBMS that uses optimistic
    locking you might even be able to get away with keeping only one copy of your
    data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 数据仓库是一个单独的 RDBMS 安装，其中包含来自在线系统的数据副本。如果你有大量额外的计算能力，物理上分离的数据仓库并不是绝对必要的。使用乐观锁定的数据库管理系统，你甚至可能只需保留一份数据副本。
- en: As long as we're copying...
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 只要我们在复制……
- en: As long as you're copying data from the OLTP system into the DSS system ("data
    warehouse"), you might as well think about organizing and indexing it for faster
    retrieval. Extra indices on production tables are bad because they slow down inserts
    and updates. Every time you add or modify a row to a table, the RDBMS has to update
    the indices to keep them consistent. But in a data warehouse, the data are static.
    You build indices once and they take up space and sometimes make queries faster
    and that's it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你从 OLTP 系统复制数据到 DSS 系统（“数据仓库”），你可以考虑为更快的检索组织和索引数据。在生产表上添加额外的索引是不好的，因为它们会减慢插入和更新速度。每次向表中添加或修改一行时，关系数据库管理系统都必须更新索引以保持一致。但在数据仓库中，数据是静态的。你只需构建一次索引，它们占用空间，有时会加快查询速度，就是这样。
- en: If you know that Jennifer Amolucre is going to do the toothpaste query every
    day, you can denormalize the data model for her. If you add a `town_population`
    column to the `stores` table and copy in data from the `cities` table, for example,
    you sacrifice some cleanliness of data model but now Ms. Amolucre's query only
    requires a 5-way JOIN. If you add `manufacturer` and `product_category` columns
    to the `sales` table, you don't need to JOIN in the `products` table.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道 Jennifer Amolucre 每天都会执行牙膏查询，你可以为她冗余化数据模型。例如，如果你向 `stores` 表添加一个 `town_population`
    列，并从 `cities` 表复制数据，你会牺牲一些数据模型的清洁度，但现在 Amolucre 女士的查询只需要进行 5 次连接。如果你向 `sales`
    表添加 `manufacturer` 和 `product_category` 列，你就不需要在 `products` 表中进行连接。
- en: Where does denormalization end?
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 冗余化何时结束？
- en: Once you give up the notion that the data model in the data warehouse need bear
    some resemblance to the data model in the OLTP system, you begin to think about
    reorganizing the data model further. Remember that we're trying to make sure that
    new questions can be asked by people with limited SQL experience, i.e., many different
    questions can be answered with morphologically similar SQL. Ideally the task of
    constructing SQL queries can be simplified enough to be doable from a menu system.
    Also, we are trying to delivery predictable response time. A minor change in a
    question should not result in a thousand-fold increase in system response time.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你放弃了数据仓库中的数据模型需要与 OLTP 系统中的数据模型有些相似的观念，你就开始考虑进一步重新组织数据模型的问题。记住，我们试图确保具有有限
    SQL 经验的人可以提出新问题，即许多不同的问题可以用形态上相似的 SQL 来回答。理想情况下，构建 SQL 查询的任务应该被简化到可以从菜单系统中完成。此外，我们正在努力提供可预测的响应时间。对问题进行轻微修改不应该导致系统响应时间增加千倍。
- en: The irreducible problem with the OLTP data model is that it is tough for novices
    to construct queries. Given that computer systems are not infinitely fast, a practical
    problem is inevitably that the response times of a query into the OLTP tables
    will vary in a way that is unpredictable to the novice.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: OLTP 数据模型的不可简化问题在于对新手来说构建查询很困难。鉴于计算机系统并非无限快速，一个实际的问题是，对 OLTP 表的查询响应时间会以新手无法预测的方式变化。
- en: 'Suppose, for example, that Bill Novice wants to look at sales on holidays versus
    non-holidays with the OLTP model. Bill will need to go look at the data model,
    which on a production system will contain hundreds of tables, to find out if any
    of them contain information on whether or not a date is a holiday. Then he will
    need to use it in a query, something that isn''t obvious given the peculiar nature
    of the Oracle `date` data type:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，Bill Novice 想要查看 OLTP 模型上的节假日与非节假日的销售情况。Bill 需要去查看数据模型，而在一个生产系统上，数据模型会包含数百个表，以找出其中是否有任何表包含日期是否是节假日的信息。然后他需要在查询中使用它，这对于
    Oracle `date` 数据类型的特殊性来说并不明显：
- en: '[PRE2]'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That one was pretty simple because JOINing to the `holiday_map` table knocks
    out sales on days that aren''t holidays. To compare to sales on non-holidays,
    he will need to come up with a different query strategy, one that knocks out sales
    on days that *are* holidays. Here is one way:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 那个问题相当简单，因为 JOIN 到 `holiday_map` 表会剔除不是节假日的日期的销售。要与非节假日的销售进行比较，他将需要想出一个不同的查询策略，一个剔除了节假日销售的策略。以下是一种方式：
- en: '[PRE3]'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that the morphology (structure) of this query is completely different from
    the one asking for sales on holidays.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个查询的形态（结构）与询问节假日销售的完全不同。
- en: 'Suppose now that Bill is interested in unit sales just at those stores where
    the unit sales tended to be high overall. First Bill has to experiment to find
    a way to ask the database for the big-selling stores. Probably this will involve
    grouping the `sales` table by the `store_id` column:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设 Bill 感兴趣的是那些总体销售额 tended to be high 的商店的单位销售量。首先，Bill 必须试验一种方法来询问数据库中的大卖店。可能这将涉及到按
    `store_id` 列对 `sales` 表进行分组：
- en: '[PRE4]'
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we know how to find stores that have sold more than 1000 units total, so
    we can add this as a subquery:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何找到总销售量超过 1000 个单位的商店，所以我们可以将此作为子查询添加：
- en: '[PRE5]'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Morphologically this doesn't look very different from the preceding non-holiday
    query. Bill has had to figure out how to use the GROUP BY and HAVING constructs
    but otherwise it is a single table query with a subquery. Think about the time
    to execute, however. The `sales` table may contain millions of rows. The `holiday_map`
    table probably only contains 50 or 100 rows, depending on how long the OLTP system
    has been in place. The most obvious way to execute these subqueries will be to
    perform the subquery for each row examined by the main query. In the case of the
    "big stores" query, the subquery requires scanning and sorting the entire `sales`
    table. So the time to execute this query might be 10,000 times longer than the
    time to execute the "non-holiday sales" query. Should Bill Novice expect this
    behavior? Should he have to think about it? Should the OLTP system grind to a
    halt because he didn't think about it hard enough?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从形态学上看，这与前面的非假日查询并没有太大的不同。比尔不得不弄清楚如何使用GROUP BY和HAVING结构，但除此之外，这是一个带有子查询的单表查询。然而，请考虑执行时间。`sales`表可能包含数百万行。`holiday_map`表可能只包含50或100行，这取决于OLTP系统运行了多长时间。执行这些子查询最明显的方法将是对主查询检查的每一行执行子查询。在“大商店”查询的情况下，子查询需要扫描和排序整个`sales`表。因此，执行此查询的时间可能比执行“非假日销售”查询的时间长10,000倍。比尔·新手应该期望这种行为吗？他是否应该考虑这个问题？OLTP系统是否会因为他没有认真考虑而停滞不前？
- en: Virtually all the organizations that start by trying to increase similarity
    and predictability among decision support queries end up with a *dimensional data
    warehouse*. This necessitates a new data model that shares little with the OLTP
    data model.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有试图增加决策支持查询之间相似性和可预测性的组织最终都会拥有一个*维度数据仓库*。这需要一个与OLTP数据模型几乎没有关联的新数据模型。
- en: 'Dimensional Data Modeling: First Steps'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 维度数据建模：第一步
- en: Dimensional data modeling starts with a *fact table*. This is where we record
    what happened, e.g., someone bought a Diet Coke in East Fishkill. What you want
    in the fact table are facts about the sale, ideally ones that are numeric, continuously
    valued, and additive. The last two properties are important because typical fact
    tables grow to a billion rows or more. People will be much happier looking at
    sums or averages than detail. An important decision to make is the granularity
    of the fact table. If Walmart doesn't care about whether or not a Diet Coke was
    sold at 10:31 AM or 10:33 AM, recording each sale individually in the fact table
    is too granular. CPU time, disk bandwidth, and disk space will be needlessly consumed.
    Let's aggregate all the sales of any particular product in one store on a per-day
    basis. So we will only have one row in the fact table recording that 200 cans
    of Diet Coke were sold in East Fishkill on November 30, even if those 200 cans
    were sold at 113 different times to 113 different customers.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 维度数据建模始于一个*事实表*。这是我们记录发生了什么的地方，例如，有人在East Fishkill购买了一罐Diet Coke。在事实表中，我们想要的是关于销售的事实，理想情况下是数值的、连续值的和可加的。最后两个属性很重要，因为典型的事实表会增长到十亿行或更多。人们看到总和或平均值会比看细节更开心。一个重要的决定是确定事实表的粒度。如果沃尔玛不在乎Diet
    Coke是在上午10:31还是上午10:33卖出的，那么在事实表中单独记录每次销售就太细粒度了。CPU时间、磁盘带宽和磁盘空间将被不必要地消耗。让我们按照每天在一个商店中销售任何特定产品的方式进行聚合。因此，我们只会在事实表中记录一行，记录在11月30日在East
    Fishkill销售了200罐Diet Coke，即使这200罐是在113个不同的时间卖给113个不同的顾客。
- en: '[PRE6]'
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So far so good, we can pull together this table with a query JOINing the `sales`,
    `products`, and `product_prices` (to fill the `dollar_sales` column) tables. This
    JOIN will group by `product_id`, `store_id`, and the truncated `date_time_of_sale`.
    Constructing this query will require a professional programmer but keep in mind
    that this work only need be done once. The marketing experts who will be using
    the data warehouse will be querying from the `sales_fact` table.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们可以通过查询将`sales`、`products`和`product_prices`（用于填充`dollar_sales`列）表JOIN在一起，从而组合出这个表格。这个JOIN将按照`product_id`、`store_id`和截断的`date_time_of_sale`进行分组。构建这个查询将需要一名专业的程序员，但请记住，这项工作只需要做一次。将使用数据仓库的营销专家将从`sales_fact`表中查询。
- en: 'In building just this one table, we''ve already made life easier for marketing.
    Suppose they want total dollar sales by product. In the OLTP data model this would
    have required tangling with the `product_prices` table and its different prices
    for the same product on different days. With the sales fact table, the query is
    simple:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 仅构建这个表，我们已经让市场营销变得更容易。假设他们想要按产品总销售额。在 OLTP 数据模型中，这将需要与`product_prices`表以及不同日期相同产品的不同价格纠缠。有了销售事实表，查询很简单：
- en: '[PRE7]'
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We have a *fact table*. In a dimensional data warehouse there will always be
    just one of these. All of the other tables will define the *dimensions*. Each
    dimension contains extra information about the facts, usually in a human-readable
    text string that can go directly into a report. For example, let us define the
    time dimension:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个*事实表*。在维度数据仓库中，总是只有一个这样的表。所有其他表都定义了*维度*。每个维度包含有关事实的额外信息，通常是可以直接放入报告的人类可读的文本字符串。例如，让我们定义时间维度：
- en: '[PRE8]'
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Why is it useful to define a time dimension? If we keep the date of the sales
    fact as an Oracle date column, it is still just about as painful as ever to ask
    for holiday versus non-holiday sales. We need to know about the existence of the
    `holiday_map` table and how to use it. Suppose we redefine the fact table as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么定义时间维度很有用？如果我们将销售事实的日期保留为 Oracle 日期列，要询问节假日与非节假日销售情况仍然很痛苦。我们需要了解`holiday_map`表的存在以及如何使用它。假设我们重新定义事实表如下：
- en: '[PRE9]'
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Instead of storing an Oracle date in the fact table, we''re keeping an integer
    key pointing to an entry in the time dimension. The time dimension stores, for
    each day, the following information:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 不再在事实表中存储 Oracle 日期，而是保留一个指向时间维度条目的整数键。时间维度存储每天的以下信息：
- en: whether or not the day was a holiday
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这一天是否是假日
- en: into which fiscal period this day fell
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这一天属于哪个财政期间
- en: whether or not the day was part of the "Christmas season" or not
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这一天是否属于"圣诞季节"或不属于
- en: 'If we want a report of sales by season, the query is straightforward:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要按季节报告销售情况，查询很简单：
- en: '[PRE10]'
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we want to get a report of sales by fiscal quarter or sales by day of week,
    the SQL is structurally identical to the above. If we want to get a report of
    sales by manufacturer, however, we realize that we need another dimension: *product*.
    Instead of storing the `product_id` that references the OLTP `products` table,
    much better to use a synthetic product key that references a product dimension
    where data from the OLTP `products`, `product_categories`, and `manufacturers`
    tables are aggregated.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要按财季报告销售额或按星期几报告销售额，SQL 结构与上述相同。然而，如果我们想要按制造商报告销售额，我们意识到我们需要另一个维度：*产品*。不要存储引用
    OLTP `products`表的`product_id`，最好使用引用产品维度的合成产品键，其中来自 OLTP `products`、`product_categories`和`manufacturers`表的数据被聚合。
- en: 'Since we are Walmart, a multi-store chain, we will want a *stores* dimension.
    This table will aggregate information from the `stores` and `cities` tables in
    the OLTP system. Here is how we would define the stores dimension in an Oracle
    table:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们是沃尔玛，一个多店铺连锁店，我们会想要一个*商店*维度。这个表将从 OLTP 系统中的`stores`和`cities`表中聚合信息。以下是我们如何在
    Oracle 表中定义商店维度：
- en: '[PRE11]'
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This new dimension gives us the opportunity to compare sales for large versus
    small stores, for new and old ones, and for stores in different regions. We can
    aggregate sales by geographical region, starting at the state level and drilling
    down to county, city, or ZIP code. Here is how we''d query for sales by city:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新维度让我们有机会比较大型商店与小型商店、新旧商店以及不同地区商店的销售情况。我们可以按地理区域聚合销售额，从州一级开始，逐渐深入到县、城市或邮政编码。以下是我们如何按城市查询销售额：
- en: '[PRE12]'
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Dimensions can be combined. To report sales by city on a quarter-by-quarter
    basis, we would use the following query:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 维度可以组合。要按季度报告城市销售情况，我们将使用以下查询：
- en: '[PRE13]'
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE13]'
- en: (extra SQL compared to previous query shown in bold).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: （与上一个查询相比额外的 SQL 显示为粗体）。
- en: The final dimension in a generic Walmart-style data warehouse is *promotion*.
    The marketing folks will want to know how much a price reduction boosted sales,
    how much of that boost was permanent, and to what extent the promoted product
    cannibalized sales from other products sold at the same store. Columns in the
    promotion dimension table would include a promotion type (coupon or sale price),
    full information on advertising (type of ad, name of publication, type of publication),
    full information on in-store display, the cost of the promotion, etc.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通用沃尔玛式数据仓库中的最终维度是*促销*。营销人员希望知道降价提高了销售额多少，提高了多少销售额是永久的，以及促销产品在同一商店销售的其他产品中占据了多少份额。促销维度表中的列将包括促销类型（优惠券或销售价格）、广告的全面信息（广告类型、出版物名称、出版物类型）、店内展示的全面信息、促销成本等。
- en: At this point it is worth stepping back from the details to notice that the
    data warehouse contains less information than the OLTP system but it can be more
    useful in practice because queries are easier to construct and faster to execute.
    Most of the art of designing a good data warehouse is in defining the dimensions.
    Which aspects of the day-to-day business may be condensed and treated in blocks?
    Which aspects of the business are interesting?
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此时值得退一步看看，注意到数据仓库包含的信息比OLTP系统少，但实际上更有用，因为查询更容易构建且执行速度更快。设计一个好的数据仓库的大部分艺术在于定义维度。日常业务的哪些方面可以压缩和以块的形式处理？业务的哪些方面是有趣的？
- en: 'Real World Example: A Data Warehouse for Levis Strauss'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 真实案例：Levis Strauss 的数据仓库
- en: In 1998, ArsDigita Corporation built a Web service as a front end to an experimental
    custom clothing factory operated by Levi Strauss. Users would visit our site to
    choose a style of khaki pants, enter their waist, inseam, height, weight, and
    shoe size, and finally check out with their credit card. Our server would attempt
    to authorize a charge on the credit card through CyberCash. The factory IT system
    would poll our server's Oracle database periodically so that it could start cutting
    pants within 10 minutes of a successfully authorized order.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 1998年，ArsDigita公司建立了一个网络服务，作为Levi Strauss经营的一个实验性定制服装工厂的前端。用户会访问我们的网站，选择一种卡其裤的款式，输入腰围、内长、身高、体重和鞋码，最后用信用卡结账。我们的服务器将尝试通过CyberCash对信用卡进行授权。工厂IT系统会定期轮询我们服务器的Oracle数据库，以便在成功授权订单后的10分钟内开始裁剪裤子。
- en: The whole purpose of the factory and Web service was to test and analyze consumer
    reaction to this method of buying clothing. Therefore, a data warehouse was built
    into the project almost from the start.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂和网络服务的整个目的是测试和分析消费者对这种购买服装方式的反应。因此，几乎从一开始就将数据仓库建立到项目中。
- en: We did not buy any additional hardware or software to support the data warehouse.
    The public Web site was supported by a mid-range Hewlett-Packard Unix server that
    had ample leftover capacity to run the data warehouse. We created a new "dw" Oracle
    user, GRANTed SELECT on the OLTP tables to the "dw" user, and wrote procedures
    to copy all the data from the OLTP system into a star schema of tables owned by
    the "dw" user. For queries, we added an IP address to the machine and ran a Web
    server program bound to that second IP address.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有购买任何额外的硬件或软件来支持数据仓库。公共网站由一台中档的惠普Unix服务器支持，该服务器有足够的剩余容量来运行数据仓库。我们创建了一个新的“dw”Oracle用户，将OLTP表上的SELECT授权给“dw”用户，并编写了程序将所有数据从OLTP系统复制到由“dw”用户拥有的星型模式表中。对于查询，我们向机器添加了一个IP地址，并运行了绑定到该第二IP地址的Web服务器程序。
- en: 'Here is how we explained our engineering decisions to our customer (Levi Strauss):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们向客户（Levi Strauss）解释我们的工程决策的方式：
- en: '[PRE14]'
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After some discussions with Levi''s executives, we designed in the following
    dimension tables:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在与Levi's高管进行一些讨论后，我们设计了以下维度表：
- en: '**time**'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间**'
- en: for queries comparing sales by season, quarter, or holiday
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于比较销售按季节、季度或假日
- en: '**product**'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品**'
- en: for queries comparing sales by color or style
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于比较销售按颜色或风格
- en: '**ship to**'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运送至**'
- en: for queries comparing sales by region or state
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于比较按区域或州销售的查询
- en: '**promotion**'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**促销**'
- en: for queries aimed at determining the relationship between discounts and sales
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于确定折扣与销售之间关系的查询
- en: '**consumer**'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者**'
- en: for queries comparing sales by first-time and repeat buyers
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于比较首次购买和重复购买者的销售查询
- en: '**user experience**'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户体验**'
- en: for queries looking at returned versus exchanged versus accepted items (most
    useful when combined with other dimensions, e.g., was a particular color more
    likely to lead to an exchange request)
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于查询返回、交换和接受商品的情况（与其他维度结合使用时最有用，例如，特定颜色更可能导致交换请求）
- en: These dimensions allow us to answer questions such as
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这些维度使我们能够回答诸如
- en: In what regions of the country are pleated pants most popular? (fact table joined
    with the product and ship-to dimensions)
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在国家的哪些地区，褶皱裤最受欢迎？（事实表与产品和收货维度连接）
- en: What percentage of pants were bought with coupons and how has that varied from
    quarter to quarter? (fact table joined with the promotion and time dimensions)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多少裤子是用优惠券购买的，这种情况每个季度如何变化？（事实表与促销和时间维度连接）
- en: How many pants were sold on holidays versus non-holidays? (fact table joined
    with the time dimension)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假日和非假日分别销售了多少裤子？（事实表与时间维度连接）
- en: The Dimension Tables
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 维度表
- en: The `time_dimension` table is identical to the example given above.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`time_dimension`表与上面给出的示例相同。'
- en: '[PRE15]'
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We populated the `time_dimension` table with a single INSERT statement. The
    core work is done by Oracle date formatting functions. A helper table, `integers`,
    is used to supply a series of numbers to add to a starting date (we picked July
    1, 1998, a few days before our first real order).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用单个INSERT语句填充了`time_dimension`表。核心工作由Oracle日期格式化函数完成。一个辅助表`integers`用于提供一系列数字，以添加到起始日期（我们选择了1998年7月1日，比我们的第一个真实订单早几天）。
- en: '[PRE16]'
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Remember the Oracle date minutia that you learned in the chapter on dates. If
    you add a number to an Oracle date, you get another Oracle date. So adding 3 to
    "1998-07-01" will yield "1998-07-04".
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 记住你在日期章节学到的Oracle日期细节。如果您向Oracle日期添加一个数字，您将得到另一个Oracle日期。因此，将3添加到“1998-07-01”将得到“1998-07-04”。
- en: 'There are several fields left to be populated that we cannot derive using Oracle
    date functions: season, fiscal period, holiday flag, season, event. Fiscal period
    depended on Levi''s choice of fiscal year. The `event` column was set aside for
    arbitrary blocks of time that were particularly interesting to the Levi''s marketing
    team, e.g., a sale period. In practice, it was not used.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 还有几个字段需要填充，我们无法使用Oracle日期函数推导出来：季节、财政期、假日标志、事件。财政期取决于李维斯选择的财政年度。`event`列被保留用于李维斯营销团队特别感兴趣的任意时间段，例如，促销期。实际上，它没有被使用。
- en: To update the `holiday_flag` field, we used two helper tables, one for "fixed"
    holidays (those which occur on the same day each year), and one for "floating"
    holidays (those which move around).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新`holiday_flag`字段，我们使用了两个辅助表，一个用于“固定”假日（每年同一天发生的假日），另一个用于“浮动”假日（日期会变动的假日）。
- en: '[PRE17]'
  id: totrans-153
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Some example holidays:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一些例假日：
- en: '[PRE18]'
  id: totrans-155
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'An extremely clever person who''d recently read [SQL for Smarties](http://www.amazon.com/exec/obidos/ASIN/1558605762/pgreenspun-20)
    would probably be able to come up with an SQL statement to update the `holiday_flag`
    in the `time_dimension` rows. However, there is no need to work your brain that
    hard. Recall that Oracle includes two procedural languages, Java and PL/SQL. You
    can implement the following pseudocode in the procedural language of your choice:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一个极其聪明的人，最近阅读了[SQL for Smarties](http://www.amazon.com/exec/obidos/ASIN/1558605762/pgreenspun-20)，可能能够想出一个SQL语句来更新`time_dimension`行中的`holiday_flag`。然而，没有必要让你的大脑如此努力工作。请记住，Oracle包含两种过程语言，Java和PL/SQL。您可以在您选择的过程语言中实现以下伪代码：
- en: '[PRE19]'
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The product dimension The product dimension contains one row for each unique
    combination of color, style, cuffs, pleats, etc.
  id: totrans-158
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 产品维度产品维度包含每种颜色、款式、袖口、褶皱等唯一组合的一行。
- en: '[PRE20]'
  id: totrans-159
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To populate this dimension, we created a one-column table for each field in
    the dimension table and use a multi-table join without a WHERE clause. This generates
    the cartesian product of all the possible values for each field:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了填充这个维度，我们为维度表中的每个字段创建了一个单列表，并使用没有WHERE子句的多表连接。这会生成每个字段所有可能值的笛卡尔积：
- en: '[PRE21]'
  id: totrans-161
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Notice that an Oracle sequence, `product_key_sequence`, is used to generate
    unique integer keys for each row as it is inserted into the dimension.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Oracle序列`product_key_sequence`用于为每行生成唯一的整数键，当它被插入维度时。
- en: The promotion dimension The art of building the promotion dimension is dividing
    the world of coupons into a broad categories, e.g., "between 10 and 20 dollars".
    This categorization depended on the learning that the marketing executives did
    not care about the difference between a $3.50 and a $3.75 coupon.
  id: totrans-163
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 促销维度 促销维度的构建艺术是将优惠券的世界划分为广泛的类别，例如，“10到20美元之间”。这种分类取决于市场执行人员并不在乎3.50美元和3.75美元优惠券之间的差异的学习。
- en: '[PRE22]'
  id: totrans-164
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The separate `coupon_state` and `coupon_range` columns allow for reporting of
    sales figures broken down into fullprice/discounted or into a bunch of rows, one
    for each range of coupon size.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的`coupon_state`和`coupon_range`列允许将销售数据报告分解为全价/折扣或一堆行，每行代表一个优惠券大小范围。
- en: The consumer dimension We did not have access to a lot of demographic data about
    our customers. We did not have a lot of history since this was a new service.
    Consequently, our consumer dimension is extremely simple. It is used to record
    whether or not a sale in the fact table was to a new or a repeat customer.
  id: totrans-166
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 消费者维度 我们对客户的人口统计数据没有太多访问权限。由于这是一个新服务，我们没有太多历史。因此，我们的消费者维度非常简单。它用于记录事实表中的销售是向新客户还是向重复客户。
- en: '[PRE23]'
  id: totrans-167
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The user experience dimension If we are interested in building a report of the
    average amount of time spent contemplating a purchase versus whether the purchase
    was ultimately kept, the `user_experience_dimension` table will help.
  id: totrans-168
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 用户体验维度 如果我们有兴趣构建一个关于考虑购买的平均时间与最终是否保留购买的报告，`user_experience_dimension`表将有所帮助。
- en: '[PRE24]'
  id: totrans-169
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The ship-to dimension Classically one of the most powerful dimensions in a data
    warehouse, our `ship_to_dimension` table allows us to group sales by region or
    state.
  id: totrans-170
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 收货维度 在数据仓库中经典的最强大的维度之一，我们的`ship_to_dimension`表允许我们按地区或州分组销售。
- en: '[PRE25]'
  id: totrans-171
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Notice that we've thrown out an awful lot of detail here. Had this been a full-scale
    product for Levi Strauss, they would probably have wanted at least extra columns
    for county, city, and zip code. These columns would allow a regional sales manager
    to look at sales within a state.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在这里抛弃了大量细节。如果这是一款针对Levi Strauss的全面产品，他们可能会希望至少为县、城市和邮政编码添加额外的列。这些列将允许区域销售经理查看州内的销售情况。
- en: (In a data warehouse for a manufacturing wholesaler, the ship-to dimension would
    contain columns for the customer's company name, the division of the customer's
    company that received the items, the sales district of the salesperson who sold
    the order, etc.)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: （在制造批发商的数据仓库中，收货维度将包含客户公司名称、接收物品的客户公司的部门、销售订单的销售人员的销售区等列。）
- en: The Fact Table
  id: totrans-174
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 事实表
- en: The granularity of our fact table is one order. This is finer-grained than the
    canonical Walmart-style data warehouse as presented above, where a fact is the
    quantity of a particular SKU sold in one store on one day (i.e., all orders in
    one day for the same item are aggregated). We decided that we could afford this
    because the conventional wisdom in the data warehousing business in 1998 was that
    up to billion-row fact tables were manageable. Our retail price was $40 and it
    was tough to foresee a time when the factory could make more than 1,000 pants
    per day. So it did not seem extravagant to budget one row per order.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们事实表的粒度是一个订单。这比上面介绍的经典的沃尔玛风格数据仓库更精细，那里的事实是在一天内在一个商店销售的特定SKU的数量（即，同一物品在一天内的所有订单被聚合）。我们决定这样做是因为1998年数据仓库业务中的常识是，高达十亿行的事实表是可以管理的。我们的零售价格是40美元，很难预见工厂一天能生产超过1000条裤子。因此，每个订单预算一行似乎并不奢侈。
- en: 'Given the experimental nature of this project we did not delude ourselves into
    thinking that we would get it right the first time. Since we were recording one
    row per order we were able to cheat by including pointers from the data warehouse
    back into the OLTP database: `order_id` and `consumer_id`. We never had to use
    these but it was nice to know that if we couldn''t get a needed answer for the
    marketing executives the price would have been some custom SQL coding rather than
    rebuilding the entire data warehouse.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这个项目的实验性质，我们没有自欺欺人地认为我们第一次就能做对。由于我们记录了每个订单一行，我们能够通过在数据仓库中包含指向OLTP数据库的指针：`order_id`和`consumer_id`来作弊。我们从未使用过这些，但知道如果我们无法为市场执行人员提供所需的答案，代价将是一些定制的SQL编码，而不是重建整个数据仓库。
- en: '[PRE26]'
  id: totrans-177
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'After defining the fact table, we populated it with a single insert statement:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了事实表后，我们用一个单独的插入语句填充了它：
- en: '[PRE27]'
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As noted in the comment at top, most of the work here is done by PL/SQL procedures
    such as `find_product` that dig up the right row in a dimension table for this
    particular order.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 正如顶部的注释所指出的，这里的大部分工作是由PL/SQL过程完成的，比如`find_product`，它会在维度表中找到适合这个特定订单的正确行。
- en: The preceding insert will load an empty data warehouse from the on-line transaction
    processing system's tables. Keeping the data warehouse up to date with what is
    happening in OLTP land requires a similar INSERT with an extra restriction WHERE
    clause limiting orders to only those order ID is larger than the maximum of the
    order IDs currently in the warehouse. This is a safe transaction to execute as
    many times per day as necessary--even two simultaneous INSERTs would not corrupt
    the data warehouse with duplicate rows because of the primary key constraint on
    `order_id`. A daily update is traditional in the data warehousing world so we
    scheduled one every 24 hours using the Oracle `dbms_job` package ([http://www.oradoc.com/ora816/server.816/a76956/jobq.htm#750](http://www.oradoc.com/ora816/server.816/a76956/jobq.htm#750)).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的插入将从在线事务处理系统的表中加载一个空的数据仓库。保持数据仓库与OLTP领域中发生的事情保持同步需要类似的带有额外限制WHERE子句的INSERT，限制订单仅为那些订单ID大于当前数据仓库中订单ID的最大值的订单。这是一个安全的事务，可以根据需要每天执行多次--即使同时进行两个INSERT也不会因为`order_id`上的主键约束而使数据仓库出现重复行。在数据仓库世界中，每天更新一次是传统的，所以我们使用Oracle的`dbms_job`包安排了每24小时进行一次更新（[http://www.oradoc.com/ora816/server.816/a76956/jobq.htm#750](http://www.oradoc.com/ora816/server.816/a76956/jobq.htm#750)）。
- en: Sample Queries
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例查询
- en: 'We have (1) defined a star schema, (2) populated the dimension tables, (3)
    loaded the fact table, and (4) arranged for periodic updating of the fact table.
    Now we can proceed to the interesting part of our data warehouse: getting information
    back out.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经（1）定义了星型模式，（2）填充了维度表，（3）加载了事实表，并（4）安排了定期更新事实表。现在我们可以继续进行数据仓库的有趣部分：获取信息。
- en: Using only the `sales_fact` table, we can ask for
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用`sales_fact`表，我们可以询问
- en: 'the total number of orders, total revenue to date, tax paid, shipping costs
    to date, the average price paid for each item sold, and the average number of
    days to ship:'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单总数，迄今为止的总收入，已支付的税款，迄今为止的运输成本，每个售出物品的平均售价，以及平均发货天数：
- en: '[PRE28]'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'the average number of minutes from login to order (we exclude user sessions
    longer than 30 minutes to avoid skewing the results from people who interrupted
    their shopping session to go out to lunch or sleep for a few hours):'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从登录到订单的平均分钟数（我们排除了持续时间超过30分钟的用户会话，以避免由于中断购物会话去吃午餐或睡几个小时而使结果产生偏差）：
- en: '[PRE29]'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'the average number of days from first being invited to the site by email to
    the first order (excluding periods longer than 2 weeks to remove outliers):'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从首次通过电子邮件被邀请到网站到第一笔订单的平均天数（排除超过2周的时间段以消除异常值）：
- en: '[PRE30]'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Joining against the `ship_to_dimension` table lets us ask how many pants were
    shipped to each region of the United States:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ship_to_dimension`表连接，让我们询问有多少裤子被运送到美国各地区：
- en: '[PRE31]'
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '| Region | Pants Sold |'
  id: totrans-193
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 地区 | 售出裤子数 |'
- en: '| New England Region |   612 |'
  id: totrans-194
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 新英格兰地区 |   612 |'
- en: '| NY and NJ Region |   321 |'
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 纽约和新泽西地区 |   321 |'
- en: '| Mid Atlantic Region |   318 |'
  id: totrans-196
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 中大西洋地区 |   318 |'
- en: '| Western Region |   288 |'
  id: totrans-197
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 西部地区 |   288 |'
- en: '| Southeast Region |   282 |'
  id: totrans-198
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 东南地区 |   282 |'
- en: '| Southern Region |   193 |'
  id: totrans-199
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 南部地区 |   193 |'
- en: '| Great Lakes Region |   177 |'
  id: totrans-200
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 大湖地区 |   177 |'
- en: '| Northwestern Region |   159 |'
  id: totrans-201
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 西北地区 |   159 |'
- en: '| Central Region |   134 |'
  id: totrans-202
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 中部地区 |   134 |'
- en: '| North Central Region |   121 |'
  id: totrans-203
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 北中部地区 |   121 |'
- en: 'Note: these data are based on a random subset of orders from the Levi''s site
    and we have also made manual changes to the report values. The numbers are here
    to give you an idea of what these queries do, not to provide insight into the
    Levi''s custom clothing business.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：这些数据基于来自Levi's网站的随机订单子集，并且我们还对报告数值进行了手动更改。这些数字在这里是为了让您了解这些查询的作用，而不是为了深入了解Levi's定制服装业务。
- en: 'Joining against the `time_dimension`, we can ask how many pants were sold for
    each day of the week:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过与`time_dimension`连接，我们可以询问每周每天售出多少裤子：
- en: '[PRE32]'
  id: totrans-206
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '| Day of Week | Pants Sold |'
  id: totrans-207
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 星期几 | 售出裤子数 |'
- en: '| Thursday |   3428 |'
  id: totrans-208
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 星期四 |   3428 |'
- en: '| Wednesday |   2823 |'
  id: totrans-209
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 星期三 |   2823 |'
- en: '| Tuesday |   2780 |'
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 星期二 |   2780 |'
- en: '| Monday |   2571 |'
  id: totrans-211
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 星期一 |   2571 |'
- en: '| Friday |   2499 |'
  id: totrans-212
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 星期五 |   2499 |'
- en: '| Saturday |   1165 |'
  id: totrans-213
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 星期六 |   1165 |'
- en: '| Sunday |   814 |'
  id: totrans-214
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 星期日 |   814 |'
- en: 'We were able to make pants with either a "dressy" or "casual" fabric. Joining
    against the `product_dimension` table can tell us how popular each option was
    as a function of color:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用"时尚"或"休闲"面料制作裤子。与`product_dimension`表连接可以告诉我们每种选项在颜色方面的受欢迎程度：
- en: '[PRE33]'
  id: totrans-216
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '| Color | Pants Sold |   % Dressy |'
  id: totrans-217
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 颜色 | 售出裤子 |   % 时尚 |'
- en: '| dark tan |   486 |   100 |'
  id: totrans-218
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 深黄褐 |   486 |   100 |'
- en: '| light tan |   305 |   49 |'
  id: totrans-219
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 浅黄褐 |   305 |   49 |'
- en: '| dark grey |   243 |   100 |'
  id: totrans-220
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 深灰 |   243 |   100 |'
- en: '| black |   225 |   97 |'
  id: totrans-221
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 黑色 |   225 |   97 |'
- en: '| navy blue |   218 |   61 |'
  id: totrans-222
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 海军蓝 |   218 |   61 |'
- en: '| medium tan |   209 |   0 |'
  id: totrans-223
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 中黄褐 |   209 |   0 |'
- en: '| olive green |   179 |   63 |'
  id: totrans-224
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 橄榄绿 |   179 |   63 |'
- en: 'Note: 100% and 0% indicate that those colors were available only in one fabric.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 注：100%和0%表示这些颜色只有一种面料可用。
- en: Here is a good case of how the data warehouse may lead to a practical result.
    If these were the real numbers from the Levi's warehouse, what would pop out at
    the manufacturing guys is that 97% of the black pants sold were in one fabric
    style. It might not make sense to keep an inventory of casual black fabric if
    there is so little consumer demand for it.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这是数据仓库如何导致实际结果的一个很好案例。如果这些是来自Levi's仓库的真实数字，那么制造人员会发现，97%的黑色裤子销售量都是同一种面料风格。如果消费者对休闲黑色面料的需求如此之少，保留这种库存可能就没有意义。
- en: 'Query Generation: The Commercial Closed-Source Route'
  id: totrans-227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查询生成：商业闭源路线
- en: The promise of a data warehouse is not fulfilled if all users must learn SQL
    syntax and how to run SQL*PLUS. From being exposed to 10 years of advertising
    for query tools, we decided that the state of forms-based query tools must be
    truly advanced. We thus suggested to Levi Strauss that they use Seagate Crystal
    Reports and Crystal Info to analyze their data. These packaged tools, however,
    ended up not fitting very well with what Levi's wanted to accomplish. First, constructing
    queries was not semantically simpler than coding SQL. The Crystal Reports consultant
    that we brought in said that most of his clients ended up having a programmer
    set up the report queries and the business people would simply run the report
    every day against new data. If professional programmers had to construct queries,
    it seemed just as easy just to write more admin pages using our standard Web development
    tools, which required about 15 minutes per page. Second, it was impossible to
    ensure availability of data warehouse queries to authorized users anywhere on
    the Internet. Finally there were security and social issues associated with allowing
    a SQL*Net connection from a Windows machine running Crystal Reports out through
    the Levi's firewall to our Oracle data warehouse on the Web.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有用户都必须学习SQL语法和如何运行SQL*PLUS，那么数据仓库的承诺就无法实现。在接受了10年的查询工具广告后，我们决定，基于表单的查询工具的状态必须真正先进。因此，我们建议Levi
    Strauss使用Seagate Crystal Reports和Crystal Info来分析他们的数据。然而，这些打包工具最终并没有很好地符合Levi's想要实现的目标。首先，构建查询并不比编写SQL语句语义上更简单。我们请来的Crystal
    Reports顾问说，他的大多数客户最终都让程序员设置报表查询，业务人员每天只需针对新数据运行报表。如果专业程序员必须构建查询，那么使用我们的标准Web开发工具编写更多管理页面就同样容易，每页大约需要15分钟。其次，无法确保数据仓库查询在互联网上的任何地方对授权用户可用。最后，允许从运行Crystal
    Reports的Windows机器通过Levi's防火墙到我们在Web上的Oracle数据仓库的SQL*Net连接存在安全和社会问题。
- en: Not knowing if any other commercial product would work better and not wanting
    to disappoint our customer, we extended the ArsDigita Community System with a
    data warehouse query module that runs as a Web-only tool. This is a free open-source
    system and comes with the standard ACS package that you can download from [http://www.arsdigita.com/download/](http://www.arsdigita.com/download/).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不确定其他商业产品是否更好，也不想让客户失望，我们扩展了ArsDigita社区系统，增加了一个仅作为Web工具运行的数据仓库查询模块。这是一个免费的开源系统，随标准ACS软件包一起提供，您可以从[http://www.arsdigita.com/download/](http://www.arsdigita.com/download/)下载。
- en: 'Query Generation: The Open-Source ACS Route'
  id: totrans-230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查询生成：开源ACS路线
- en: 'The "dw" module in the ArsDigita Community System is designed with the following
    goals:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: ArsDigita社区系统中的"dw"模块旨在实现以下目标：
- en: naive users can build simple queries by themselves
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 天真的用户可以自己构建简单的查询
- en: professional programmers can step in to help out the naive users
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 专业程序员可以帮助那些天真的用户
- en: a user with no skill can re-execute a saved query
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有技能的用户可以重新执行保存的查询
- en: 'We keep one row per query in the `queries` table:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`queries`表中每个查询保留一行：
- en: '[PRE34]'
  id: totrans-236
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Unless the `query_sql` column is populated with a hand-edited query, the query
    will be built up by looking at several rows in the `query_columns` table:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 除非 `query_sql` 列填充了手工编辑的查询，否则查询将通过查看 `query_columns` 表中的多行来构建：
- en: '[PRE35]'
  id: totrans-238
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `query_columns` definition appears strange at first. It specifies the name
    of a column but not a table. This module is predicated on the simplifying assumption
    that we have one enormous view, `ad_hoc_query_view`, that contains all the dimension
    tables' columns alongside the fact table's columns.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，`query_columns` 的定义看起来很奇怪。它指定了列的名称但没有表。该模块是基于一个简化假设的，即我们有一个巨大的视图 `ad_hoc_query_view`，其中包含了所有维度表的列以及事实表的列。
- en: 'Here is how we create the view for the Levi''s data warehouse:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们为 Levi's 数据仓库创建视图的方法：
- en: '[PRE36]'
  id: totrans-241
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE36]'
- en: At first glance, this looks like a passport to sluggish Oracle performance.
    We'll be doing a seven-way JOIN for every data warehouse query, regardless of
    whether we need information from some of the dimension tables or not.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这似乎是导致 Oracle 性能下降的通行证。对于每个数据仓库查询，我们都将进行七路连接，无论我们是否需要一些维度表中的信息。
- en: 'We can test this assumption as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式测试这一假设：
- en: '[PRE37]'
  id: totrans-244
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Oracle will return the query results first...
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 将首先返回查询结果...
- en: '| ship_to_region | color | count(pants_id) |'
  id: totrans-246
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ship_to_region | 颜色 | count(pants_id) |'
- en: '| Central Region | black | 46 |'
  id: totrans-247
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 中部地区 | 黑色 | 46 |'
- en: '| Central Region | dark grey | 23 |'
  id: totrans-248
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 中部地区 | 深灰 | 23 |'
- en: '| Central Region | dark tan | 39 |'
  id: totrans-249
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 中部地区 | 深棕 | 39 |'
- en: '| .. |'
  id: totrans-250
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| .. |'
- en: '| Western Region | medium tan | 223 |'
  id: totrans-251
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 西部地区 | 中棕 | 223 |'
- en: '| Western Region | navy blue | 245 |'
  id: totrans-252
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 西部地区 | 深蓝 | 245 |'
- en: '| Western Region | olive green | 212 |'
  id: totrans-253
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 西部地区 | 橄榄绿 | 212 |'
- en: '... and then explain how those results were obtained:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '... 然后解释这些结果是如何得到的：'
- en: '[PRE38]'
  id: totrans-255
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'As you can see from the table names in bold face, Oracle was smart enough to
    examine only tables relevant to our query: `product_dimension`, because we asked
    about color; `ship_to_dimension`, because we asked about region; `sales_fact`,
    because we asked for a count of pants sold. Bottom line: Oracle did a 3-way JOIN
    instead of the 7-way JOIN specified by the view.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从加粗的表名中看到的那样，Oracle 足够聪明，仅检查与我们的查询相关的表：`product_dimension`，因为我们询问了颜色；`ship_to_dimension`，因为我们询问了地区；`sales_fact`，因为我们要求计算出售的裤子数量。底线：Oracle
    进行了三路连接，而不是视图指定的七路连接。
- en: 'To generate a SQL query into `ad_hoc_query_view` from the information stored
    in `query_columns` is most easily done with a function in a procedural language
    such as Java, PL/SQL, Perl, or Tcl (here is pseudocode):'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 从存储在 `query_columns` 中的信息生成到 `ad_hoc_query_view` 的 SQL 查询最容易通过诸如 Java、PL/SQL、Perl
    或 Tcl（这里是伪代码）等过程化语言的函数来完成：
- en: '[PRE39]'
  id: totrans-258
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'How well does this work in practice? Suppose that we were going to run regional
    advertisements. Should the models be pictured where pleated or plain front pants?
    We need to look at recent sales by region. With the ACS query tool, a user can
    use HTML forms to specify the following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这在实践中效果如何？假设我们要进行区域性广告活动。模特应该穿褶皱还是平纹裤子？我们需要查看最近按地区销售情况。使用 ACS 查询工具，用户可以使用 HTML
    表单指定以下内容：
- en: 'pants_id : select and aggregate using count'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pants_id ：选择并使用计数进行聚合
- en: 'ship_to_region : select and group by'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ship_to_region ：选择并按组进行
- en: 'pleat_state : select and group by'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pleat_state ：选择并按组进行
- en: The preceding pseudocode turns that into
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 前述伪代码将其转换为
- en: '[PRE40]'
  id: totrans-264
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE40]'
- en: which is going to report sales going back to the dawn of time. If we weren't
    clever enough to anticipate the need for time windowing in our forms-based interface,
    the "hand edit the SQL" option will save us. A professional programmer can be
    grabbed for a few minutes to add
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这将报告追溯到时间之初的销售情况。如果我们没有足够聪明地预见到我们的基于表单的界面需要时间窗口，那么“手动编辑 SQL”选项将为我们节省时间。专业程序员可以花几分钟来添加
- en: '[PRE41]'
  id: totrans-266
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now we''re limiting results to the last 45 days:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将结果限制为最近 45 天：
- en: '| ship_to_region | pleat_state | count(pants_id) |'
  id: totrans-268
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ship_to_region | pleat_state | count(pants_id) |'
- en: '| Central Region | plain front | 8 |'
  id: totrans-269
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 中部地区 | 平纹 | 8 |'
- en: '| Central Region | pleated | 26 |'
  id: totrans-270
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 中部地区 | 褶皱 | 26 |'
- en: '| Great Lakes Region | plain front | 14 |'
  id: totrans-271
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 大湖地区 | 平纹 | 14 |'
- en: '| Great Lakes Region | pleated | 63 |'
  id: totrans-272
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 大湖地区 | 褶皱 | 63 |'
- en: '| Mid Atlantic Region | plain front | 56 |'
  id: totrans-273
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 中大西洋地区 | 平纹 | 56 |'
- en: '| Mid Atlantic Region | pleated | 162 |'
  id: totrans-274
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 中大西洋地区 | 褶皱 | 162 |'
- en: '| NY and NJ Region | plain front | 62 |'
  id: totrans-275
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 纽约和新泽西地区 | 平纹 | 62 |'
- en: '| NY and NJ Region | pleated | 159 |'
  id: totrans-276
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 纽约和新泽西地区 | 褶皱 | 159 |'
- en: '| New England Region | plain front | 173 |'
  id: totrans-277
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 新英格兰地区 | 平纹 | 173 |'
- en: '| New England Region | pleated | 339 |'
  id: totrans-278
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 新英格兰地区 | 褶皱 | 339 |'
- en: '| North Central Region | plain front | 7 |'
  id: totrans-279
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 北中部地区 | 纯色 | 7 |'
- en: '| North Central Region | pleated | 14 |'
  id: totrans-280
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 中北部地区 | 折褶 | 14 |'
- en: '| Northwestern Region | plain front | 20 |'
  id: totrans-281
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 西北地区 | 平面前 | 20 |'
- en: '| Northwestern Region | pleated | 39 |'
  id: totrans-282
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 西北地区 | 折褶 | 39 |'
- en: '| Southeast Region | plain front | 51 |'
  id: totrans-283
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 东南部地区 | 平面前 | 51 |'
- en: '| Southeast Region | pleated | 131 |'
  id: totrans-284
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 东南部地区 | 折褶 | 131 |'
- en: '| Southern Region | plain front | 13 |'
  id: totrans-285
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 南部地区 | 平面前 | 13 |'
- en: '| Southern Region | pleated | 80 |'
  id: totrans-286
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 南部地区 | 折褶 | 80 |'
- en: '| Western Region | plain front | 68 |'
  id: totrans-287
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 西部地区 | 平面前 | 68 |'
- en: '| Western Region | pleated | 120 |'
  id: totrans-288
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 西部地区 | 折褶 | 120 |'
- en: 'If we strain our eyes and brains a bit, we can see that plain front pants are
    very unpopular in the Great Lakes and South but more popular in New England and
    the West. It would be nicer to see percentages within region, but standard SQL
    does not make it possible to combine results to values in surrounding rows. We
    will need to refer to [the "SQL for Analysis" chapter](http://oradoc.photo.net/ora816/server.816/a76994/analysis.htm#1020)
    in the Oracle data warehousing documents to read up on extensions to SQL that
    makes this possible:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们稍微费点眼力和脑力，我们就会发现在五大湖和南部，平面前的裤子非常不受欢迎，但在新英格兰和西部更受欢迎。在地区内看到百分比会更好，但是标准 SQL
    不允许将结果与周围行的值相结合。我们需要参考[“用于分析的 SQL”章节](http://oradoc.photo.net/ora816/server.816/a76994/analysis.htm#1020)中的
    Oracle 数据仓库文档，了解使此成为可能的 SQL 扩展：
- en: '[PRE42]'
  id: totrans-290
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We''re asked Oracle to window the results ("partition by ship_to_region") and
    compare the number of pants in each row to the sum across all the rows within
    a regional group. Here''s the result:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要求 Oracle 对结果进行窗口化（“partition by ship_to_region”）并将每行的裤子数量与区域组内所有行的总和进行比较。这是结果：
- en: '| ship_to_region | pleat_state | count(pants_id) | percent_in_region |'
  id: totrans-292
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ship_to_region | 折褶状态 | 计数(裤子编号) | 区域内百分比 |'
- en: '| ... |'
  id: totrans-293
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ... |'
- en: '| Great Lakes Region | plain front | 14 | .181818182 |'
  id: totrans-294
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 五大湖地区 | 平面前 | 14 | .181818182 |'
- en: '| Great Lakes Region | pleated | 63 | .818181818 |'
  id: totrans-295
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 五大湖地区 | 折褶 | 63 | .818181818 |'
- en: '| ... |'
  id: totrans-296
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ... |'
- en: '| New England Region | plain front | 173 | .337890625 |'
  id: totrans-297
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 新英格兰地区 | 平面前 | 173 | .337890625 |'
- en: '| New England Region | pleated | 339 | .662109375 |'
  id: totrans-298
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 新英格兰地区 | 折褶 | 339 | .662109375 |'
- en: '| ... |'
  id: totrans-299
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ... |'
- en: 'This isn''t quite what we want. The "percents" are fractions of 1 and reported
    with far too much precision. We tried inserting the Oracle built-in `round` function
    in various places of this SQL statement but all we got for our troubles was "ERROR
    at line 5: ORA-30484: missing window specification for this function". We had
    to add an extra layer of SELECT, a view-on-the-fly, to get the report that we
    wanted:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '这并不是我们想要的。这些“百分比”是1的分数，并且精度远远超出了我们想要的范围。我们尝试在这个 SQL 语句的各个地方插入 Oracle 内置的 `round`
    函数，但是我们所有的努力都只换来了一句报错：“ERROR at line 5: ORA-30484: missing window specification
    for this function”。我们不得不添加额外的 SELECT 层，即时视图，才能获得我们想要的报告：'
- en: '[PRE43]'
  id: totrans-301
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE43]'
- en: returns
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '| ship_to_region | pleat_state | count(pants_id) | percent_in_region |'
  id: totrans-303
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ship_to_region | 折褶状态 | 计数(裤子编号) | 区域内百分比 |'
- en: '| ... |'
  id: totrans-304
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ... |'
- en: '| Great Lakes Region | plain front | 14 | 18 |'
  id: totrans-305
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 五大湖地区 | 平面前 | 14 | 18 |'
- en: '| Great Lakes Region | pleated | 63 | 82 |'
  id: totrans-306
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 五大湖地区 | 折褶 | 63 | 82 |'
- en: '| ... |'
  id: totrans-307
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ... |'
- en: '| New England Region | plain front | 173 | 34 |'
  id: totrans-308
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 新英格兰地区 | 平面前 | 173 | 34 |'
- en: '| New England Region | pleated | 339 | 66 |'
  id: totrans-309
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 新英格兰地区 | 折褶 | 339 | 66 |'
- en: '| ... |'
  id: totrans-310
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ... |'
- en: What if you're in charge of the project?
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果你负责这个项目呢？
- en: If you are in charge of a data warehousing project, you need to assemble the
    necessary tools. Do not be daunted by this prospect. The entire Levi Strauss system
    described above was implemented in three days by two programmers.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你负责一个数据仓储项目，你需要准备好必要的工具。不要因此感到畏缩。上面描述的整个 Levi Strauss 系统是由两名程序员在三天内实现的。
- en: The first tool that you need is intelligence and thought. If you pick the right
    dimensions and put the required data into them, your data warehouse will be useful.
    If you don't get your dimensions right, you won't even be able to ask the interesting
    questions. If you're not smart or thoughtful, probably the best thing to do is
    find a boutique consulting firm with expertise in building data warehouses for
    your industry. Get them to lay out the initial star schema. They won't get it
    right but it should be close enough to live with for a few months. If you can't
    find an expert, [The Data Warehouse Toolkit](http://www.amazon.com/exec/obidos/ASIN/0471153370/pgreenspun-20)
    (Ralph Kimball 1996) contains example schemata for 10 different kinds of businesses.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要的第一个工具是智慧和思考。如果你选择了正确的维度并将所需数据放入其中，那么你的数据仓库将会很有用。如果你的维度选错了，你甚至都不能问出有趣的问题。如果你不够聪明或思考不够深入，那么最好的做法可能是找到一家在你行业建立数据仓库方面有专业知识的精品咨询公司。让他们布置初始的星型模式。他们可能不会做得完全正确，但足够接受一段时间。如果找不到专家，《数据仓库工具包》（Ralph
    Kimball 1996）中包含了 10 种不同类型企业的示例模式。
- en: You will need some place to store your data and query parts back out. Since
    you are using SQL your only choice is a relational database management system.
    There are specialty vendors that have historically made RDBMSes with enhanced
    features for data warehousing, such as the ability to compute a value based on
    information from the current row compared to information from a previously output
    row of the report. This gets away from the strict unordered set-theoretic way
    of looking at the world that E.F. Codd sketched in 1970 but has proven to be useful.
    Starting with version 8.1.6, Oracle has added most of the useful third-party features
    into their standard product. Thus all but the very smallest and very largest modern
    data warehouses tend to be built using Oracle (see [the "SQL for Analysis" chapter](http://oradoc.photo.net/ora816/server.816/a76994/analysis.htm#1020)
    in the [Oracle8i Data Warehousing Guide](http://oradoc.photo.net/ora816/server.816/a76994/toc.htm)
    volume of the Oracle documentation).
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一些地方来存储你的数据并查询出其中的部分。由于你在使用 SQL，你唯一的选择就是关系数据库管理系统。有一些专业厂商历史上制作了增强型数据仓库的关系数据库管理系统，例如能够基于当前行的信息和以前输出行的信息来计算值的能力。这种方式摆脱了
    E.F. Codd 在 1970 年勾勒出的严格的无序集合论世界观，但已被证明是有用的。从 8.1.6 版本开始，Oracle 将大多数有用的第三方功能加入到了他们的标准产品中。因此，现代数据仓库中除了最小和最大的之外，几乎都是使用
    Oracle 构建的（参见[“SQL for Analysis”章节](http://oradoc.photo.net/ora816/server.816/a76994/analysis.htm#1020)以及[Oracle8i
    数据仓库指南](http://oradoc.photo.net/ora816/server.816/a76994/toc.htm)中的卷 Oracle 文档）。
- en: Oracle contains two features that may enable you to construct and use your data
    warehouse without investing in separate hardware. First is the optimistic locking
    system that Oracle has employed since the late 1980s. If someone is doing a complex
    query it will not affect transactions that need to update the same tables. Essentially
    each query runs in its own snapshot of the database as it existed when the query
    was started. The second Oracle feature is *materialized views* or *summaries*.
    It is possible to instruct the database to keep a summary of sales by quarter,
    for example. If someone asks for a query involving quarterly sales, the small
    summary table will be consulted instead of the comprehensive sales table. This
    could be 100 to 1000 times faster.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 包含了两个功能，可以让您构建和使用数据仓库而不需要投资于单独的硬件。第一个是自 1980 年代末以来 Oracle 采用的乐观锁定系统。如果有人在进行复杂的查询，它不会影响需要更新相同表的事务。基本上，每个查询都在其启动查询时数据库的快照中运行。第二个
    Oracle 功能是*物化视图*或*摘要*。可以指示数据库保留按季度销售的摘要，例如。如果有人请求涉及季度销售的查询，将查询小的摘要表而不是全面的销售表。这可能会快
    100 到 1000 倍。
- en: One typical goal of a data warehousing project is to provide a unified view
    of a company's disparate information systems. The only way to do this is to extract
    data from all of these information systems and clean up those data for consistency
    and accuracy. This is purportedly a challenging task when RDBMSes from different
    vendors are involved, though it might not seem so on the surface. After all, every
    RDBMS comes with a C library. You could write a C program to perform queries on
    the Brand X database and do inserts on the Brand Y database. Perl and Tcl have
    convenient facilities for transforming text strings and there are db connectivity
    interfaces from these scripting languages to DBMS C libraries. So you could write
    a Perl script. Most databases within a firm are accessible via the Web, at least
    within a company's internal network. Oracle includes a Java virtual machine and
    Java libraries to fetch Web pages and parse XML. So you could write a Java or
    PL/SQL program running inside your data warehouse Oracle installation to grab
    the foreign information and bring it back (see the chapter on foreign and legacy
    data).
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 数据仓库项目的一个典型目标是提供公司不同信息系统的统一视图。唯一的方法是从所有这些信息系统中提取数据，并清理这些数据以确保一致性和准确性。当涉及来自不同供应商的关系数据库管理系统（RDBMS）时，这被认为是一项具有挑战性的任务，尽管表面上看起来可能并不是这样。毕竟，每个RDBMS都附带一个C库。你可以编写一个C程序在X品牌数据库上执行查询，并在Y品牌数据库上执行插入操作。Perl和Tcl具有方便的功能来转换文本字符串，并且这些脚本语言与DBMS
    C库之间有数据库连接接口。因此，你可以编写一个Perl脚本。公司内的大多数数据库都可以通过网络访问，至少在公司内部网络中是这样。Oracle包括一个Java虚拟机和Java库，用于获取网页并解析XML。因此，你可以编写一个在数据仓库Oracle安装中运行的Java或PL/SQL程序来获取外部信息并将其带回（请参阅有关外部和遗留数据的章节）。
- en: If you don't like to program or have a particularly knotty connectivity problem
    involving an old mainframe, various companies make software that can help. For
    high-end mainframe stuff, Oracle Corporation itself offers some useful layered
    products. For low-end "more-convenient-than-Perl" stuff, Data Junction ([www.datajunction.com](http://www.datajunction.com))
    is useful.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不喜欢编程或者遇到一个涉及旧主机的棘手连接问题，有一些公司提供可以帮助的软件。对于高端主机产品，Oracle公司本身提供一些有用的分层产品。对于低端“比Perl更方便”的产品，Data
    Junction ([www.datajunction.com](http://www.datajunction.com)) 是有用的。
- en: Given an already-built data warehouse, there are a variety of useful query tools.
    The theory is that if you've organized your data model well enough, a non-technical
    user will be able to navigate around via a graphic user interface or a Web browser.
    The best known query tool is Crystal Reports ([www.seagatesoftware.com](http://www.seagatesoftware.com)),
    which we tried to use in the Levi Strauss example. See [http://www.arsdigita.com/doc/dw](http://www.arsdigita.com/doc/dw)
    for details on the free open-source ArsDigita Community System data warehouse
    query module.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在已建立的数据仓库中，有各种有用的查询工具。理论上，如果你的数据模型组织得足够好，非技术用户将能够通过图形用户界面或Web浏览器进行导航。最知名的查询工具是Crystal
    Reports ([www.seagatesoftware.com](http://www.seagatesoftware.com))，我们曾试图在Levi
    Strauss示例中使用它。请参阅[http://www.arsdigita.com/doc/dw](http://www.arsdigita.com/doc/dw)
    了解免费开源ArsDigita社区系统数据仓库查询模块的详细信息。
- en: Is there a bottom line to all of this? If you can think sufficiently clearly
    about your organization and its business to construct the correct dimensions and
    program SQL reasonably well, you will be successful with the raw RDBMS alone.
    Extra software tools can potentially make the project a bit less painful or a
    bit shorter but they won't be of critical importance.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些有一个底线吗？如果你能够清晰地思考你的组织及其业务，构建正确的维度并合理地编写SQL程序，你将可以仅通过原始RDBMS取得成功。额外的软件工具可能会使项目变得稍微不那么痛苦或稍微缩短时间，但它们并不是至关重要的。
- en: More Information
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多信息
- en: The construction of data warehouses is a guild-like activity. Most of the expert
    knowledge is contained within firms that specialize not in data warehousing but
    in data warehousing for a particular kind of company. For example, there are firms
    that do nothing but build data warehouses for supermarkets. There are firms that
    do nothing but build data warehouses for department stores. Part of what keeps
    this a tight guild is the poor quality of textbooks and journal articles on the
    subject. Most of the books on data warehousing are written by and for people who
    do not know SQL. The books focus on (1) stuff that you can buy from a vendor,
    (2) stuff that you can do from a graphical user interface after the data warehouse
    is complete, and (3) how to navigate around a large organization to get all the
    other suits to agree to give you their data, their money, and a luxurious schedule.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 数据仓库的构建是一种类似行会的活动。大部分专家知识都包含在专门从事某种类型公司数据仓库构建的公司中。例如，有些公司专门为超市建立数据仓库，有些公司专门为百货商店建立数据仓库。使这个行会保持紧密的一部分原因是关于这个主题的教科书和期刊文章的质量较差。大部分关于数据仓库的书籍是由不懂SQL的人编写的，也是为这样的人编写的。这些书籍关注于（1）你可以从供应商那里购买的东西，（2）在数据仓库完成后你可以通过图形用户界面做的事情，以及（3）如何在大型组织中导航，以便说服其他人同意提供数据、资金和宽松的时间表。
- en: 'The only worthwhile introductory book that we''ve found on data warehousing
    in general is Ralph Kimball''s [The Data Warehouse Toolkit](http://www.amazon.com/exec/obidos/ASIN/0471153370/pgreenspun-20).
    Kimball is also the author of an inspiring book on clickstream data warehousing:
    [The Data Webhouse Toolkit](http://www.amazon.com/exec/obidos/ASIN/0471376809/pgreenspun-20).
    The latter book is good if you are interested in applying classical dimensional
    data warehousing techniques to user activity analysis.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现的唯一值得一读的关于数据仓库的入门书籍是Ralph Kimball的[数据仓库工具包](http://www.amazon.com/exec/obidos/ASIN/0471153370/pgreenspun-20)。Kimball还是一本关于点击流数据仓库的鼓舞人心的书籍的作者：[数据Webhouse工具包](http://www.amazon.com/exec/obidos/ASIN/0471376809/pgreenspun-20)。如果你对将经典的维度数据仓库技术应用于用户活动分析感兴趣，后一本书很不错。
- en: It isn't exactly a book and it isn't great for beginners but the [Oracle8i Data
    Warehousing Guide](http://oradoc.photo.net/ora816/server.816/a76994/toc.htm) volume
    of the official Oracle server documentation is extremely useful.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是一本书，也不适合初学者，但是官方Oracle服务器文档中的[Oracle8i数据仓库指南](http://oradoc.photo.net/ora816/server.816/a76994/toc.htm)对于数据仓库的构建非常有用。
- en: Data on consumer purchasing behavior are available from A.C. Nielsen ([www.acnielsen.com](http://www.acnielsen.com/)),
    Information Resources Incorporated (IRI; [www.infores.com](http://www.infores.com)),
    and a bunch of other companies listed in [http://dir.yahoo.com/Business_and_Economy/Business_to_Business/Marketing_and_Advertising/Market_Research/](http://dir.yahoo.com/Business_and_Economy/Business_to_Business/Marketing_and_Advertising/Market_Research/).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 消费者购买行为数据可从A.C. Nielsen ([www.acnielsen.com](http://www.acnielsen.com/))、Information
    Resources Incorporated (IRI; [www.infores.com](http://www.infores.com))以及[http://dir.yahoo.com/Business_and_Economy/Business_to_Business/Marketing_and_Advertising/Market_Research/](http://dir.yahoo.com/Business_and_Economy/Business_to_Business/Marketing_and_Advertising/Market_Research/)中列出的其他公司获取。
- en: Reference
  id: totrans-325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考
- en: '[Oracle8i Data Warehousing Guide](http://oradoc.photo.net/ora816/server.816/a76994/toc.htm),
    particularly the [the "SQL for Analysis" chapter](http://oradoc.photo.net/ora816/server.816/a76994/analysis.htm#1020)'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Oracle8i数据仓库指南](http://oradoc.photo.net/ora816/server.816/a76994/toc.htm)，特别是[“分析用SQL”章节](http://oradoc.photo.net/ora816/server.816/a76994/analysis.htm#1020)'
- en: 'ROLLUP examples from the Oracle Application Developer''s Guide: [http://www.oradoc.com/keyword/rollup](http://www.oradoc.com/keyword/rollup)'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle应用开发人员指南中的ROLLUP示例：[http://www.oradoc.com/keyword/rollup](http://www.oradoc.com/keyword/rollup)
- en: 'Next: [Foreign and Legacy Data](foreign-and-legacy-data.html)'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步：[外部和遗留数据](foreign-and-legacy-data.html)
- en: '* * *'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[philg@mit.edu](http://philip.greenspun.com/)'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '[philg@mit.edu](http://philip.greenspun.com/)'
- en: Reader's Comments
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读者评论
- en: I really like that Walmart/Sybase example, because Walmart is actually running
    the largest commercial data warehouse in the world including 2 years of detail
    data with tens of billions of detail rows. Of course, it's not using an OLTP system
    like Sybase/Oracle, it's a decision support database, Teradata.
  id: totrans-332
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我真的很喜欢沃尔玛/Sybase的例子，因为沃尔玛实际上运行着世界上最大的商业数据仓库，包括两年的详细数据，数十亿行的详细数据。当然，它不是使用像Sybase/Oracle这样的OLTP系统，而是一个决策支持数据库，Teradata。
- en: ''
  id: totrans-333
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [Dieter Noeth](/shared/community-member?user_id=243422), May 14, 2003
  id: totrans-334
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [Dieter Noeth](/shared/community-member?user_id=243422)，2003年5月14日
- en: 'I would dispute that: http://www.wintercorp.com/vldb/2003_TopTen_Survey/TopTenWinners.asp
    Shows that France Telecom has the largest DSS system in Oracle. Walmart is not
    in the top-ten list, and surprise, surprise, the squashed competitor Kmart is.'
  id: totrans-335
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我要争辩一下：http://www.wintercorp.com/vldb/2003_TopTen_Survey/TopTenWinners.asp 显示法国电信拥有最大的
    Oracle DSS 系统。沃尔玛不在前十名中，而令人惊讶的是，被挤压的竞争对手 Kmart 却在其中。
- en: ''
  id: totrans-336
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [what ever](/shared/community-member?user_id=257822), January 7, 2004
  id: totrans-337
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [无论如何](/shared/community-member?user_id=257822)，2004年1月7日
- en: Your comments about Sybase are naive and incorrect. Perhaps you had a bad run
    dealing with Sybase support, not sure if I can influence it otherwise. Sybase
    IQ for years now has been the bane some of the World's Largest data warehouses.
    Query performance and scalability are notably the highlights of all Sybase IQ
    implementations. Sybase customer, comScore Networks, received the Grand Prize
    in the 2003 Winter Corporation TopTen Program for Largest Database Size and Most
    Rows/Records for Microsoft Windows-based systems using Sybase IQ, the highly scalable
    analytics engine. Other Winter Corporation TopTen award-winning Sybase customers
    in UNIX categories include Nielsen Media Research and Korean-based customers Health
    Insurance Review Agency (HIRA), LG Card, Samsung Card and Chohung Bank. http://www.sybase.be/belgium/press/20031111-ipg-IQwintercorp.jsp
    I appreciate that you have given an opportunity to comment on this page.
  id: totrans-338
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你对 Sybase 的评论是幼稚且不正确的。也许你在与 Sybase 支持打交道时遇到了困难，我不确定我能否改变这种情况。多年来，Sybase IQ 一直是世界上一些最大数据仓库的祸根。查询性能和可伸缩性显然是所有
    Sybase IQ 实施的亮点。Sybase 客户 comScore Networks 在 2003 年冬季公司十佳计划中获得了最大数据库大小和最多行/记录的大奖，该奖项是针对使用
    Sybase IQ 这一高度可扩展的分析引擎的基于 Microsoft Windows 的系统。在 UNIX 类别中，其他获得 Winter Corporation
    十佳奖的 Sybase 客户包括 Nielsen Media Research 和韩国客户健康保险审查机构（HIRA）、LG Card、三星卡和韩国初亨银行。http://www.sybase.be/belgium/press/20031111-ipg-IQwintercorp.jsp
    我感谢你给了我在这个页面上发表评论的机会。
- en: ''
  id: totrans-339
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [Subraya Pai](/shared/community-member?user_id=260919), May 9, 2004
  id: totrans-340
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [Subraya Pai](/shared/community-member?user_id=260919)，2004年5月9日
- en: Crystal Reports is not the reporting tool usually choosen for ad-hoc querying
    of datawarehouses, so maybe that's the reason your end customers weren't very
    happy about it. Tools better suited to this task are BusinessObjects (who also
    aquired CrystalReports a couple of month ago), Brio (aquired by Hyperion about
    1 year ago), Microstrategy, Oracle Discoverer and Cognos. All of them allow you
    to build metadata about the datamodel of the datawarehouse and present the end
    user with the world in terms known to them (no criptic database table column names,
    predefined filter conditions and so on). For the end-user it's really only a matter
    of dragging and dropping the "objects" in their report and "pressing" a button.
    The tool will the generate the proper SQL, query the database (some of them even
    rewrite the query if you have aggregate tables, allow you to "join" in the report
    query results from different queries and databases or take a stored procedure
    as the data source) allow you to do simple computations (excel-like) on the result
    set etc.
  id: totrans-341
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Crystal Reports 不是通常用于数据仓库的自由查询报表工具，所以也许这就是你的最终客户对它不太满意的原因。更适合这项任务的工具包括 BusinessObjects（几个月前也收购了
    CrystalReports）、Brio（大约一年前被 Hyperion 收购）、Microstrategy、Oracle Discoverer 和 Cognos。所有这些工具都允许您构建关于数据仓库数据模型的元数据，并以用户熟悉的术语呈现给最终用户（没有晦涩的数据库表列名，预定义的过滤条件等）。对于最终用户来说，只需将“对象”拖放到其报表中并“按下”按钮即可。该工具将生成适当的
    SQL，查询数据库（其中一些甚至会重新编写查询，如果您有聚合表，允许您在报表查询结果中“连接”不同查询和数据库或将存储过程作为数据源），允许您对结果集进行简单计算（类似于
    Excel）等等。
- en: ''
  id: totrans-342
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Regards, Georg
  id: totrans-343
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 致敬，乔治
- en: ''
  id: totrans-344
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [Georg Breazu](/shared/community-member?user_id=262174), November 15, 2004
  id: totrans-345
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [乔治·布雷亚祖](/shared/community-member?user_id=262174)，2004年11月15日
- en: this article considered as a good article in data warehousing.
  id: totrans-346
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这篇文章被认为是数据仓库领域的一篇好文章。
- en: ''
  id: totrans-347
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I want to say that there is a query language called multidimensional Expression
    MDX .It is now the standard query language for OLAP.it is like Sql but with more
    capabilities in Grouping and more functions to facilitate OLAP operations.The
    most common function are ROLLUP and CUBE>>>>>>>>>>>>>>>>>>>>>>>>>>>etc. thanks
    to all.....
  id: totrans-348
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我想说有一种查询语言叫做多维表达式 MDX。它现在是 OLAP 的标准查询语言。它类似于 Sql，但在分组和更多函数方面具有更多功能，以便简化 OLAP
    操作。最常见的函数是 ROLLUP 和 CUBE>>>>>>>>>>>>>>>>>>>>>>>>>>>等等。感谢大家......
- en: ''
  id: totrans-349
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [drtech dr](/shared/community-member?user_id=301615), December 22, 2008
  id: totrans-350
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [drtech dr](/shared/community-member?user_id=301615)，2008年12月22日
- en: good n useful article..tnx for sharing..
  id: totrans-351
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 很好且有用的文章..感谢分享..
- en: ''
  id: totrans-352
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [mitesh trivedi](/shared/community-member?user_id=320535), February 9, 2010
  id: totrans-353
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [mitesh trivedi](/shared/community-member?user_id=320535)，2010年2月9日
- en: '[Add a comment](/comments/add?page_id=3594)'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加评论](/comments/add?page_id=3594)'
- en: Related Links
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关链接
- en: '[Optimize Data Warehouse](http://www.dwoptimize.com/2007/06/components-of-data-warehouse.html)-
    Optimize performance and usability of large data warehouses using parallelism,
    partitions, and aggregate summaries across the complete application stack comprising
    of ETL, databases, and reporting.   (contributed by [Jag Singh](/shared/community-member?user_id=282093))'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化数据仓库](http://www.dwoptimize.com/2007/06/components-of-data-warehouse.html)-
    使用并行性、分区和跨整个应用程序堆栈的聚合摘要来优化大型数据仓库的性能和可用性，包括ETL、数据库和报告。 （由[Jag Singh](/shared/community-member?user_id=282093)贡献）'
- en: '[DBMS 2 on data warehousing](http://www.dbms2.com/category/analytics-technologies/data-warehouse/)-
    Data warehouse technology, developments, and trends, from what is now the industry-leading
    source of database management news and analysis.   (contributed by [Curt Monash](/shared/community-member?user_id=333315))'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DBMS 2关于数据仓库](http://www.dbms2.com/category/analytics-technologies/data-warehouse)-
    数据仓库技术、发展和趋势，来自现在是数据库管理新闻和分析的行业领先来源。 （由[Curt Monash](/shared/community-member?user_id=333315)贡献）'
- en: '[Add a link](/links/add?page_id=3594)'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加链接](/links/add?page_id=3594)'
