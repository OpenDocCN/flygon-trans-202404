["```\n(define (make-rational numer denom)\n  (if (= 0 denom)\n      (error \"Divisor cannot be 0!\")\n      (cons numer denom))) \n```", "```\n(define (numerator rat)\n  (car rat))\n\n(define (denominator rat)\n  (cdr rat)) \n```", "```\n-> (define x (make-rational 3 4))\nx\n-> (numerator x)\n3\n-> (denominator x)\n4 \n```", "```\n(define (make-point x y) (cons x y))\n(define (x-coord point) (car point))\n(define (y-coord point) (cdr point))\n```", "```\n-> (define (print-rat rat)\n    (word (numerator rat) '/ (denominator rat)))\n-> (define x (make-rational 3 4))\nx\n-> (print-rat x)\n3/4 \n```", "```\n(define (add-rat rat1 rat2)\n  (make-rational (+ (* (numerator rat1) (denominator rat2))\n                    (* (numerator rat2) (denominator rat1)))\n                 (* (denominator rat1) (denominator rat2))))\n\n(define (sub-rat rat1 rat2)\n  (make-rational (- (* (numerator rat1) (denominator rat2))\n                    (* (numerator rat2) (denominator rat1)))\n                 (* (denominator rat1) (denominator rat2)))))\n\n(define (mul-rat rat1 rat2)\n  (make-rational (* (numerator rat1) (numerator rat2))\n                 (* (denominator rat1) (denominator rat2))))\n\n(define (div-rat rat1 rat2)\n  (make-rational (* (numerator rat1) (denominator rat2))\n                 (* (denominator rat1) (numerator rat2)))))\n\n(define (equal-rat? rat1 rat2)\n  (= (* (numerator rat1) (denominator rat2))\n     (* (numerator rat2) (denominator rat1)))) \n```"]