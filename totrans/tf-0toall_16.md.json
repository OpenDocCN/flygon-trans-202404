["```\n# Lab 6 Softmax Classifier\nimport tensorflow as tf\nimport numpy as np\ntf.set_random_seed(777)  # for reproducibility\n\n# Predicting animal type based on various features\nxy = np.loadtxt('data-04-zoo.csv', delimiter=',', dtype=np.float32)\nx_data = xy[:, 0:-1]\ny_data = xy[:, [-1]]\n\nprint(x_data.shape, y_data.shape)\n\nnb_classes = 7  # 0 ~ 6\n\nX = tf.placeholder(tf.float32, [None, 16])\nY = tf.placeholder(tf.int32, [None, 1])  # 0 ~ 6\nY_one_hot = tf.one_hot(Y, nb_classes)  # one hot\nprint(\"one_hot\", Y_one_hot)\nY_one_hot = tf.reshape(Y_one_hot, [-1, nb_classes])\nprint(\"reshape\", Y_one_hot)\n\nW = tf.Variable(tf.random_normal([16, nb_classes]), name='weight')\nb = tf.Variable(tf.random_normal([nb_classes]), name='bias')\n\n# tf.nn.softmax computes softmax activations\n# softmax = exp(logits) / reduce_sum(exp(logits), dim)\nlogits = tf.matmul(X, W) + b\nhypothesis = tf.nn.softmax(logits)\n\n# Cross entropy cost/loss\ncost_i = tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits,\n                                                 labels=tf.stop_gradient([Y_one_hot]))\ncost = tf.reduce_mean(cost_i)\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)\n\nprediction = tf.argmax(hypothesis, 1)\ncorrect_prediction = tf.equal(prediction, tf.argmax(Y_one_hot, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n# Launch graph\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    for step in range(2000):\n        sess.run(optimizer, feed_dict={X: x_data, Y: y_data})\n        if step % 100 == 0:\n            loss, acc = sess.run([cost, accuracy], feed_dict={\n                                 X: x_data, Y: y_data})\n            print(\"Step: {:5}\\tLoss: {:.3f}\\tAcc: {:.2%}\".format(\n                step, loss, acc))\n\n    # Let's see if we can predict\n    pred = sess.run(prediction, feed_dict={X: x_data})\n    # y_data: (N,1) = flatten => (N, ) matches pred.shape\n    for p, y in zip(pred, y_data.flatten()):\n        print(\"[{}] Prediction: {} True Y: {}\".format(p == int(y), p, int(y)))\n\n'''\nStep:     0 Loss: 5.106 Acc: 37.62%\nStep:   100 Loss: 0.800 Acc: 79.21%\nStep:   200 Loss: 0.486 Acc: 88.12%\nStep:   300 Loss: 0.349 Acc: 90.10%\nStep:   400 Loss: 0.272 Acc: 94.06%\nStep:   500 Loss: 0.222 Acc: 95.05%\nStep:   600 Loss: 0.187 Acc: 97.03%\nStep:   700 Loss: 0.161 Acc: 97.03%\nStep:   800 Loss: 0.140 Acc: 97.03%\nStep:   900 Loss: 0.124 Acc: 97.03%\nStep:  1000 Loss: 0.111 Acc: 97.03%\nStep:  1100 Loss: 0.101 Acc: 99.01%\nStep:  1200 Loss: 0.092 Acc: 100.00%\nStep:  1300 Loss: 0.084 Acc: 100.00%\n...\n[True] Prediction: 0 True Y: 0\n[True] Prediction: 0 True Y: 0\n[True] Prediction: 3 True Y: 3\n[True] Prediction: 0 True Y: 0\n[True] Prediction: 0 True Y: 0\n[True] Prediction: 0 True Y: 0\n[True] Prediction: 0 True Y: 0\n[True] Prediction: 3 True Y: 3\n[True] Prediction: 3 True Y: 3\n[True] Prediction: 0 True Y: 0\n''' \n```"]