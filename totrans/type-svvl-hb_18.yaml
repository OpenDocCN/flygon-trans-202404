- en: Next.jsで猫画像ジェネレーターを作ろう
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Next.js创建猫图片生成器
- en: 原文：[https://typescriptbook.jp/tutorials/nextjs](https://typescriptbook.jp/tutorials/nextjs)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/tutorials/nextjs](https://typescriptbook.jp/tutorials/nextjs)
- en: Next.jsの概要[​](#nextjsの概要 "Next.jsの概要 への直接リンク")
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Next.js概述[​](#nextjs概述 "Next.js概述 への直接リンク")
- en: '[Next.js](https://nextjs.org/)は、オープンソースのUIライブラリReactをベースにしたフロントエンドフレームワークです。'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[Next.js](https://nextjs.org/)是基于开源UI库React的前端框架。'
- en: Reactで開発する場合、webpackのようなバンドラーを用いるのが普通です。webpackの設定ファイルを記述するには、一定の知識が必要です。特に、チャンク分割やCSSモジュールの設定は複雑だったりと、設定ファイルのメンテナンスが大変です。Next.jsは、webpackの設定があらかじめなされた状態で開発が始められるようになっています。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在React开发中，通常会使用类似webpack的打包工具。编写webpack配置文件需要一定的知识。特别是，代码分割和CSS模块的配置可能很复杂，维护配置文件可能会很困难。Next.js已经预先配置了webpack，使得可以立即开始开发。
- en: Next.jsはルーティング時のプリフェッチや画像の最適化などのパフォーマンス最適化をフレームワーク内で内包しており、ゼロコンフィグで簡単にパフォーマンスの高いアプリケーションを構築することができます。ページ単位のサーバーサイドレンダリング(SSR)や静的サイト生成(SSG)の機能も提供しており、用途に合わせて柔軟にアーキテクチャを選択できるのも特徴です。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js内置了路由时的预取和图像优化等性能优化功能，使得可以轻松构建高性能的应用程序。它还提供了页面级的服务器端渲染(SSR)和静态站点生成(SSG)功能，可以根据需要灵活选择架构。
- en: Next.jsはVercel社が開発しています。同社は[Vercel](https://vercel.com/)というホスティングサービスを提供しているので、Next.jsで構築したアプリケーションは簡単に公開できます。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js由Vercel公司开发。该公司提供名为[Vercel](https://vercel.com/)的托管服务，因此使用Next.js构建的应用程序可以轻松发布。
- en: これから作るもの[​](#これから作るもの "これから作るもの への直接リンク")
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 即将创建的内容[​](#即将创建的内容 "即将创建的内容 への直接リンク")
- en: このチュートリアルでは、題して「猫画像ジェネレーター」です。どんなものかというと、ボタンを押したら、猫画像のAPIから画像のURLを取得し、ランダムに可愛い猫画像を表示するシンプルなウェブアプリケーションです。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的主题是“猫图片生成器”。当您点击按钮时，它会从猫图片的API获取图片URL，并显示随机可爱的猫图片，这是一个简单的Web应用程序。
- en: </tutorials/nextjs/demo.mp4>
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: </tutorials/nextjs/demo.mp4>
- en: 最終的な成果物は[デモサイト](https://random-cat.typescriptbook.jp/)で確認できます。チュートリアルを開始する前に事前に触ってみることで、各ステップでどんな実装をしているかのイメージが掴みやすくなります。また、完成形のソースコードは[GitHub](https://github.com/yytypescript/random-cat)で確認することができます。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最终成果物可在[演示站点](https://random-cat.typescriptbook.jp/)上查看。在开始教程之前，通过提前尝试，可以更容易地理解每个步骤的实现。此外，完成形的源代码可在[GitHub](https://github.com/yytypescript/random-cat)上查看。
- en: このチュートリアルに必要なもの[​](#このチュートリアルに必要なもの "このチュートリアルに必要なもの への直接リンク")
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本教程所需的内容[​](#本教程所需的内容 "本教程所需的内容 への直接リンク")
- en: このチュートリアルで必要なものは次のとおりです。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程所需的内容如下。
- en: Node.js v16以上
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js v16或更高版本
- en: Yarn v1系 (このチュートリアルはv1.22.19で動作確認しています)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yarn v1系列（本教程已在v1.22.19上进行了测试）
- en: ブラウザ (このチュートリアルではGoogle Chromeを想定しています)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器（本教程假定使用Google Chrome）
- en: Node.jsの導入については、[開発環境の準備](/tutorials/setup)をご覧ください。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Node.js的安装，请参阅[设置开发环境](/tutorials/setup)。
- en: パッケージ管理ツールとしてYarnを利用します。最初にインストールをしておきましょう。すでにインストール済みの方はここのステップはスキップして大丈夫です。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Yarn作为包管理工具。首先安装它。如果您已经安装了，请跳过这一步。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next.jsをセットアップする[​](#nextjsをセットアップする "Next.jsをセットアップする への直接リンク")
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Next.js[​](#设置Next.js "设置Next.js への直接リンク")
- en: 最初に`yarn create next-app`コマンドでプロジェクトを作成します。TypeScriptをベースにしたプロジェクトを作成するために `--example
    with-typescript` を指定します。`random-cat` はリポジトリ名となる部分です。この部分は好きな名前でも構いませんが、本チュートリアルでは`random-cat`として話を進めます。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先使用`yarn create next-app`命令创建项目。为了创建基于TypeScript的项目，请指定 `--example with-typescript`。`random-cat`是仓库名称的一部分。您可以使用任何名称，但在本教程中将继续使用`random-cat`。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: このコマンドを実行すると、`random-cat`ディレクトリが作成されるので、そのディレクトリに移動してください。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，将创建`random-cat`目录，请转到该目录。
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: プロジェクトのファイル構成が次のようになっているか確認してください。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请确认项目文件结构如下。
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 開発サーバーを起動する[​](#開発サーバーを起動する "開発サーバーを起動する への直接リンク")
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动开发服务器[​](#启动开发服务器 "启动开发服务器 への直接リンク")
- en: 次のコマンドを実行して、開発サーバーを起動してください。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令启动开发服务器。
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 開発サーバーが起動したら、ターミナルに表示されているURLにブラウザでアクセスしてください。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发服务器启动后，请在浏览器中访问终端中显示的URL。
- en: 不要なファイルを消す[​](#不要なファイルを消す "不要なファイルを消す への直接リンク")
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除不必要的文件[​](#删除不必要的文件 "删除不必要的文件 への直接リンク")
- en: チュートリアルを進める前に、ここでは使わないファイルを削除します。プロジェクトをシンプルな状態にして、作業を進めやすくしましょう。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续教程之前，删除不需要的文件。将项目保持简单，以便更轻松地进行工作。
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: ページコンポーネントディレクトリを作る[​](#ページコンポーネントディレクトリを作る "ページコンポーネントディレクトリを作る への直接リンク")
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建页面组件目录[​](#创建页面组件目录 "创建页面组件目录 への直接リンク")
- en: Next.jsでは、`pages`ディレクトリ配下のディレクトリ構造がページのルーティングに対応します。たとえば、pages/users.tsxとファイルを作成すると、`/users`へアクセスしたとき、それが実行されます。pages/index.tsxの場合は、`/`
    へアクセスしたときに実行されます。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Next.js中，`pages`目录下的目录结构对应页面的路由。例如，创建`pages/users.tsx`文件，当访问`/users`时，将执行该文件。对于`pages/index.tsx`，当访问`/`时将执行该文件。
- en: この`pages`ディレクトリに置かれたコンポーネントのことを、Next.jsの用語でページコンポーネント(page component)と呼びます。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pages`目录中放置的组件在Next.js术语中称为页面组件(page component)。
- en: 次のコマンドを実行してページコンポーネントを置くためのディレクトリを作成してください。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令创建用于放置页面组件的目录。
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: トップページのページコンポーネントを作る[​](#トップページのページコンポーネントを作る "トップページのページコンポーネントを作る への直接リンク")
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建首页页面组件[​](#创建首页页面组件 "创建首页页面组件 への直接リンク")
- en: 次のコマンドを実行して、トップページのページコンポーネントを作成してください。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令创建首页页面组件。
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ページコンポーネントの内容は、次のようにします。この`IndexPage`関数がページコンポーネントです。これは「猫画像予定地」が表示されるだけの単純なものです。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 页面组件的内容如下。`IndexPage`函数是页面组件。这只是一个简单的显示“猫图片占位符”的组件。
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Next.jsでは、1ファイルにつき1ページコンポーネントを作成します。Next.jsは`pages`ディレクトリの各`tsx`ファイルを読み込み、デフォルトエクスポートされた関数をページコンポーネントとして認識します。上のコードで`IndexPage`関数を`export
    default`にしているのは、Next.jsにページコンポーネントと認識させるためです。`NextPage`はページコンポーネントを表す型です。この型を注釈しておくと、関数の実装がページコンポーネントの要件を満たしているかがチェックできます。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Next.js中，每个文件对应一个页面组件。Next.js会读取`pages`目录下的每个`tsx`文件，并将默认导出的函数识别为页面组件。在上面的代码中，将`IndexPage`函数导出为`default`，以便Next.js识别为页面组件。`NextPage`是表示页面组件的类型。通过对此类型进行注释，可以检查函数的实现是否符合页面组件的要求。
- en: コンポーネントを実装したら、ブラウザをリロードして画面に「猫画像予定地」と表示されているか確認してください。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 实现组件后，请重新加载浏览器，确保屏幕上显示“猫图片占位符”。
- en: Next.jsではアロー関数を使うべきですか？
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Next.js中应该使用箭头函数吗？
- en: JavaScriptで関数を作るには、大きく分けて[アロー関数と関数宣言を使った方法の2種類](/reference/functions/function-expression-vs-arrow-functions)があります。上で書いた`IndexPage`関数はアロー関数です。これを関数宣言に書き換えると次のようになります。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScriptで関数を作るには、大きく分けて[アロー関数と関数宣言を使った方法の2種類](/reference/functions/function-expression-vs-arrow-functions)があります。上で書いた`IndexPage`関数はアロー関数です。これを関数宣言に書き換えると次のようになります。
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Next.jsでは、アロー関数と関数宣言のどちらで書いても構いません。このチュートリアルでアロー関数を採用しているのは、ページコンポーネントに`NextPage`型の型注釈をつけるのが、アロー関数のほうがやりやすいためです。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Next.jsでは、アロー関数と関数宣言のどちらで書いても構いません。このチュートリアルでアロー関数を採用しているのは、ページコンポーネントに`NextPage`型の型注釈をつけるのが、アロー関数のほうがやりやすいためです。
- en: The Cat API[​](#the-cat-api "The Cat API への直接リンク")
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[猫API](#the-cat-api "The Cat API への直接リンク")'
- en: このチュートリアルでは猫の画像をランダムに表示するにあたり[The Cat API](https://thecatapi.com/)を利用します。このAPIは特定の条件で猫の画像を取得したり、品種ごとの猫の情報を取得することができます。今回のチュートリアルでは[APIドキュメント](https://docs.thecatapi.com/)のQuickstartに記載されている`/v1/images/search`へリクエストを投げてランダムな猫の画像を取得します。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: このチュートリアルでは猫の画像をランダムに表示するにあたり[猫API](https://thecatapi.com/)を利用します。このAPIは特定の条件で猫の画像を取得したり、品種ごとの猫の情報を取得することができます。今回のチュートリアルでは[APIドキュメント](https://docs.thecatapi.com/)のQuickstartに記載されている`/v1/images/search`へリクエストを投げてランダムな猫の画像を取得します。
- en: 試しにブラウザで[https://api.thecatapi.com/v1/images/search](https://api.thecatapi.com/v1/images/search)へアクセスしてみてください。ランダムな結果が返ってくるので値は少し違いますが、次のような構造のデータがレスポンスとして取得できます。レスポンスのデータ構造が配列になっている点に注意してください。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 試しにブラウザで[https://api.thecatapi.com/v1/images/search](https://api.thecatapi.com/v1/images/search)へアクセスしてみてください。ランダムな結果が返ってくるので値は少し違いますが、次のような構造のデータがレスポンスとして取得できます。レスポンスのデータ構造が配列になっている点に注意してください。
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: レスポンスにある`url`が猫画像のURLです。この値を取得して猫の画像をランダムに表示します。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: レスポンスにある`url`が猫画像のURLです。この値を取得して猫の画像をランダムに表示します。
- en: 画像を取得する関数を実装する[​](#画像を取得する関数を実装する "画像を取得する関数を実装する への直接リンク")
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 画像を取得する関数を実装する[​](#画像を取得する関数を実装する "画像を取得する関数を実装する への直接リンク")
- en: このステップでは、The Cat APIにリクエストし猫画像を取得する関数を実装します。次の実装をした`fetchImage`関数を`export default
    IndexPage`の後ろに追加してください。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: このステップでは、猫APIにリクエストし猫画像を取得する関数を実装します。次の実装をした`fetchImage`関数を`export default IndexPage`の後ろに追加してください。
- en: '[PRE22]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`fetch`はHTTPリクエストでリソースを取得するブラウザ標準のAPIです。戻り値として[Response](https://developer.mozilla.org/ja/docs/Web/API/Response)オブジェクトを返します。Responseオブジェクトの`json()`メソッドを実行することで、レスポンスのボディーをJSONとしてパースし、JavaScriptのオブジェクトとして取得できます。'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetch`はHTTPリクエストでリソースを取得するブラウザ標準のAPIです。戻り値として[Response](https://developer.mozilla.org/ja/docs/Web/API/Response)オブジェクトを返します。Responseオブジェクトの`json()`メソッドを実行することで、レスポンスのボディーをJSONとしてパースし、JavaScriptのオブジェクトとして取得できます。'
- en: '`fetchImage`関数についている[`async`キーワード](/reference/asynchronous/async)は、この関数が非同期処理を行うことを示すものです。`fetch`と`res.json`は非同期関数で、これらの処理を待つために、それぞれに[`await`キーワード](/reference/asynchronous/await)がついています。'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetchImage`関数についている[`async`キーワード](/reference/asynchronous/async)は、この関数が非同期処理を行うことを示すものです。`fetch`と`res.json`は非同期関数で、これらの処理を待つために、それぞれに[`await`キーワード](/reference/asynchronous/await)がついています。'
- en: '`fetchImage`関数がAPIを呼び出せているかテストするために、これを呼び出す処理を`fetchImage`関数の後ろに追加してください。'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetchImage`関数がAPIを呼び出せているかテストするために、これを呼び出す処理を`fetchImage`関数の後ろに追加してください。'
- en: '[PRE24]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Chromeの開発者ツールを開いてからページをリロードしてください。「コンソール」タブで次のようなテキストが表示されていたら成功です。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Chromeの開発者ツールを開いてからページをリロードしてください。「コンソール」タブで次のようなテキストが表示されていたら成功です。
- en: '![](../Images/55489e605dca6f8087b8a304e59025ce.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/55489e605dca6f8087b8a304e59025ce.png)'
- en: '`fetchImage`関数の動作確認が済んだら、この関数の呼び出しは不要になるので消してください。'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetchImage`関数の動作確認が済んだら、この関数の呼び出しは不要になるので消してください。'
- en: 関数の戻り値に型をつける[​](#関数の戻り値に型をつける "関数の戻り値に型をつける への直接リンク")
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 関数の戻り値に型をつける[​](#関数の戻り値に型をつける "関数の戻り値に型をつける への直接リンク")
- en: 上で作った`fetchImage`関数の戻り値の型は`any`型です。そのため、呼び出し側で存在しないプロパティを参照しても気づけずにバグが発生する危険性があります。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上で作った`fetchImage`関数の戻り値の型は`any`型です。そのため、呼び出し側で存在しないプロパティを参照しても気づけずにバグが発生する危険性があります。
- en: '[PRE26]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'ts`const <data-lsp lsp="const fetchImage: () => Promise<any>" style="border-bottom:solid
    2px lightgrey">fetchImage</data-lsp> =  async () => {` `const fetchImage: () =>
    Promise<any>  const  <data-lsp lsp="const res: Response">res</data-lsp>  =  await
    <data-lsp lsp="function fetch(input: RequestInfo | URL, init?: RequestInit | undefined):
    Promise<Response>">fetch</data-lsp>("https://api.thecatapi.com/v1/images/search");  const  <data-lsp
    lsp="const images: any">images</data-lsp>  =  await  <data-lsp lsp="const res:
    Response">res</data-lsp>.<data-lsp lsp="(method) Body.json(): Promise<any>">json</data-lsp>();  <data-lsp
    lsp="namespace console'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`const <data-lsp lsp="const fetchImage: () => Promise<any>" style="border-bottom:solid
    2px lightgrey">fetchImage</data-lsp> =  async () => {` `const fetchImage: () =>
    Promise<any>  const  <data-lsp lsp="const res: Response">res</data-lsp>  =  await
    <data-lsp lsp="function fetch(input: RequestInfo | URL, init?: RequestInit | undefined):
    Promise<Response>">fetch</data-lsp>("https://api.thecatapi.com/v1/images/search");  const  <data-lsp
    lsp="const images: any">images</data-lsp>  =  await  <data-lsp lsp="const res:
    Response">res</data-lsp>.<data-lsp lsp="(method) Body.json(): Promise<any>">json</data-lsp>();  <data-lsp
    lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    images: any">images</data-lsp>);  return <data-lsp lsp="const images: any">images</data-lsp>[0];};<data-lsp
    lsp="const fetchImage: () => Promise<any>">fetchImage</data-lsp>().<data-lsp lsp="(method)
    Promise<any>.then<void, never>(onfulfilled?: ((value: any) => void | PromiseLike<void>)
    | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>) | null
    | undefined): Promise<...>">then</data-lsp>((<data-lsp lsp="(parameter) image:
    any" style="border-bottom:solid 2px lightgrey">image</data-lsp>) => {` `(parameter)
    image: any  <data-lsp lsp="namespace console'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="const
    images: any">images</data-lsp>);  return <data-lsp lsp="const images: any">images</data-lsp>[0];};<data-lsp
    lsp="const fetchImage: () => Promise<any>">fetchImage</data-lsp>().<data-lsp lsp="(method)
    Promise<any>.then<void, never>(onfulfilled?: ((value: any) => void | PromiseLike<void>)
    | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>) | null
    | undefined): Promise<...>">then</data-lsp>((<data-lsp lsp="(parameter) image:
    any" style="border-bottom:solid 2px lightgrey">image</data-lsp>) => {` `(parameter)
    image: any  <data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="(parameter)
    image: any">image</data-lsp>.<data-lsp lsp="any">alt</data-lsp>); // 存在しないプロパティを参照している});`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="(parameter)
    image: any">image</data-lsp>.<data-lsp lsp="any">alt</data-lsp>); // 存在しないプロパティを参照している});`'
- en: '`image`には`alt`プロパティがありませんが、`image`が`any`型なので、上のような誤ったコードを書いても、コンパイル時に誤りに気づけません。'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`image`并没有`alt`属性，但由于`image`是`any`类型，因此即使编写类似上面错误的代码，也不会在编译时发现错误。'
- en: APIレスポンスの取り扱いはフロントエンドでバグが混在しやすい箇所なので、型を指定することで安全にAPIレスポンスを扱えるようにしていきます。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 处理API响应是前端中容易混入错误的地方，通过指定类型可以安全地处理API响应。
- en: レスポンスに含まれる画像情報の型を`Image`として定義します。そして、`fetchImage`関数の戻り値を`Promise<Image>`として型注釈します。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将包含在响应中的图像信息定义为`Image`类型。然后，将`fetchImage`函数的返回值注释为`Promise<Image>`。
- en: '[PRE27]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: APIレスポンスには`url`以外のプロパティも含まれていますが、このアプリケーションで必要な情報は`url`だけなので、他のプロパティの型の定義は省略しています。もし、他のプロパティも必要になった場合でも、`Image`にプロパティの定義を追加していけばよいです。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: API响应中除了`url`之外还包含其他属性，但在这个应用程序中只需要`url`这些信息，所以省略了其他属性的定义。如果将来需要其他属性，只需在`Image`中添加属性定义即可。
- en: '`fetchImage`関数の戻り値が正しく型注釈がされていると、万が一APIレスポンスに存在しないプロパティを参照するコードを書いてしまっても、コンパイルエラーが発生することで問題に気がつけるようになります。'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`fetchImage`函数的返回值正确地注释了类型，即使不小心编写了引用API响应中不存在的属性的代码，也会通过编译错误发现问题。
- en: '[PRE29]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'ts`<data-lsp lsp="const fetchImage: () => Promise<Image>">fetchImage</data-lsp>().<data-lsp
    lsp="(method) Promise<Image>.then<void, never>(onfulfilled?: ((value: Image) =>
    void | PromiseLike<void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>)
    | null | undefined): Promise<...>">then</data-lsp>((<data-lsp lsp="(parameter)
    image: Image" style="border-bottom:solid 2px lightgrey">image</data-lsp>) => {`
    `(parameter) image: Image  <data-lsp lsp="namespace console'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`<data-lsp lsp="const fetchImage: () => Promise<Image>">fetchImage</data-lsp>().<data-lsp
    lsp="(method) Promise<Image>.then<void, never>(onfulfilled?: ((value: Image) =>
    void | PromiseLike<void>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<never>)
    | null | undefined): Promise<...>">then</data-lsp>((<data-lsp lsp="(parameter)
    image: Image" style="border-bottom:solid 2px lightgrey">image</data-lsp>) => {`
    `(parameter) image: Image  <data-lsp lsp="namespace console'
- en: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="(parameter)
    image: Image">image</data-lsp>.<data-err><data-lsp lsp="any">alt</data-lsp></data-err>);
    // 存在しないプロパティを参照しているProperty ''alt'' does not exist on type ''Image''.2339Property
    ''alt'' does not exist on type ''Image''.});`厳密なレスポンスのチェック'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'var console: Console">console</data-lsp>.<data-lsp lsp="(method) Console.log(message?:
    any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp>(<data-lsp lsp="(parameter)
    image: Image">image</data-lsp>.<data-err><data-lsp lsp="any">alt</data-lsp></data-err>);
    // 存在しないプロパティを参照しているProperty ''alt'' does not exist on type ''Image''.2339Property
    ''alt'' does not exist on type ''Image''.});`严格的响应检查'
- en: 上のコードは、サーバーサイドを100%信頼するコードになっています。クライアントサイドが期待するデータ構造を、サーバーサイドが必ず返すことを前提としたコードなのです。しかし、サーバーサイドは本当に期待するデータ構造を返してくれているでしょうか？
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码是对服务器端百分之百信任的代码。这是基于服务器端一定会返回客户端期望的数据结构。但是，服务器端真的会返回期望的数据结构吗？
- en: より防衛的にするなら、クライアントサイドではサーバーのレスポンスをチェックするほうが望ましいでしょう。チェックの一例として次のような実装も考えられます。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 更加防御性的做法是在客户端检查服务器响应。作为检查的一个示例，可以考虑以下实现。
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: このチェック処理では、型が不明な値を安全に型付けする[unknown型](/reference/statements/unknown)や、値の型をチェックしながら型付する[型ガード関数](/reference/functions/type-guard-functions)などのTypeScriptのテクニックも用いています。これらについては、ここでは理解する必要はありませんが、興味のある方はチュートリアルを終えてから解説をご覧ください。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个检查过程中，使用了TypeScript的技巧，如安全地对未知值进行类型化[unknown type](/reference/statements/unknown)和在检查值类型的同时进行类型化的[类型守卫函数](/reference/functions/type-guard-functions)。虽然在这里不需要理解这些，但如果感兴趣，可以在完成教程后查看解释。
- en: このチュートリアルでは厳密さよりもシンプルさに重心を置くため、上のようなチェック処理はあえて追加せずに話を進めます。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们更注重简单性而不是严谨性，因此不会故意添加上述检查处理。
- en: ページを表示したときに画像を表示する[​](#ページを表示したときに画像を表示する "ページを表示したときに画像を表示する への直接リンク")
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当页面加载时显示图片[​](#ページを表示したときに画像を表示する "直接链接到显示图片的页面")
- en: ページを表示したときに`fetchImage`を呼び出して、猫の画像を表示する処理を書いています。`IndexPage`関数の中身を次のように変更してください。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在页面显示时调用`fetchImage`，以显示猫的图片。请修改`IndexPage`函数如下。
- en: '[PRE32]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 変更内容をひとつひとつ見ていきましょう。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 逐个查看变更内容。
- en: ❶ まず、Reactの`useState`関数を使い、`imageUrl`と`loading`の2つの状態を定義します。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 首先，使用React的`useState`函数定义`imageUrl`和`loading`两个状态。
- en: '[PRE34]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`imageUrl`は画像のURLが代入される変数です。初期値は空文字列です。`loading`はAPIを呼び出し中かどうかを管理する変数です。初期値は呼び出し中を意味する`true`です。'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`imageUrl`是存储图片URL的变量。初始值为空字符串。`loading`是用于管理API调用状态的变量。初始值为`true`，表示调用中。'
- en: ❷ 次に、コンポーネントがマウントされたときに、APIから猫の画像情報を取得する処理を定義します。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 接下来，在组件挂载时定义从API获取猫图片信息的处理逻辑。
- en: '[PRE36]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Reactの`useEffect`関数を使用します。`useEffect`は2つの引数を指定しています。第1引数は処理内容、第2引数はどのタイミングで処理内容を実行するかの指定です。第2引数は空の配列`[]`になっています。空配列であるため一見すると不要そうに見えますが、これには「コンポーネントがマウントされたときのみ実行する」という重要な役割があるので省略しないでください。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React的`useEffect`函数。`useEffect`有两个参数。第一个参数是处理内容，第二个参数是指定何时执行处理内容的指定。第二个参数为空数组`[]`。虽然看起来似乎不需要，但这是非常重要的，因为它表示“仅在组件挂载时执行”。
- en: '`useEffect`関数の第1引数となる関数の処理を見てみましょう。`fetchImage`関数は非同期処理です。非同期処理が完了したタイミングで、`imageUrl`に画像URLをセットするために`setImageUrl`関数を呼び出します。同時に、ローディング状態を`false`に更新するために`setLoading`関数も呼び出します。'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下`useEffect`函数的第一个参数函数的处理逻辑。`fetchImage`函数是一个异步处理函数。在异步处理完成后，调用`setImageUrl`函数将图片URL设置到`imageUrl`中。同时，调用`setLoading`函数将加载状态更新为`false`。
- en: <mdxadmonitiontitle>`useEffect`には非同期関数は渡せない</mdxadmonitiontitle>
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: <mdxadmonitiontitle>`useEffect`无法传递异步函数</mdxadmonitiontitle>
- en: '`useEffect`に渡している関数は非同期処理をしているのに、`async`キーワードを使わずに`then`を使って記述していることに気がついた方もいるかもしれません。その方の中には、次のように非同期関数を渡す書き方にして、コードが読みやすくしたいと思う方もいるでしょう。'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`useEffect`传递的函数是异步处理的，但可能有人注意到没有使用`async`关键字，而是使用`then`来编写。有些人可能希望以传递异步函数的方式编写代码，以使代码更易读。
- en: '[PRE38]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: しかし、`useEffect`には非同期関数を直接渡すことはできません。渡そうとすると、コンパイルエラーになります。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，`useEffect`无法直接传递异步函数。如果尝试传递，将导致编译错误。
- en: '[PRE40]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: ❸ 最後に画像を表示するロジックです。`||`は論理和演算子で、`loading`が`false`のときに`<img>`要素を表示します。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ 最后是显示图片的逻辑。`||`是逻辑或运算符，当`loading`为`false`时显示`<img>`元素。
- en: '[PRE42]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: JSXには文が書けない
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: JSX中无法写语句
- en: 上の条件分岐を見て「なぜ素直にif文を使わないのか？」と疑問の思ったかもしれません。これには理由があります。JSXの`{}`で囲った部分には、JavaScriptの式だけが書けます。ifは文であるため使うことができません。もし使おうとすると次の例のようにコンパイルエラーになります。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 看到上面的条件分支可能会想：“为什么不直接使用if语句？”这是有原因的。在JSX的`{}`中，只能写JavaScript表达式，而if是语句，因此无法使用。如果尝试使用，会导致编译错误。
- en: '[PRE44]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: したがって、JSXの式で条件分岐するには論理演算子や三項演算子を使う必要があります。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要在JSX表达式中进行条件分支，需要使用逻辑运算符或三元运算符。
- en: '[PRE46]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 変更内容の詳細は以上です。`IndexPage`の変更が済んだら、猫の画像が表示されているか確認してみてください。画像がちゃんと表示されているでしょうか。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以上是变更的详细内容。完成`IndexPage`的更改后，请确保猫的图片是否正确显示。
- en: '![猫の画像がuseEffectによって表示されるようになった様子](../Images/d01813c0b259c844ff206882c3d9e569.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![猫的图片通过useEffect显示的情况](../Images/d01813c0b259c844ff206882c3d9e569.png)'
- en: ボタンをクリックしたときに画像が更新されるようにする[​](#ボタンをクリックしたときに画像が更新されるようにする "ボタンをクリックしたときに画像が更新されるようにする
    への直接リンク")
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使按钮点击后图片更新[​](#使按钮点击后图片更新 "直接链接到使按钮点击后图片更新")
- en: ここではボタンをクリックしたときに、APIから新しい画像情報を取得し、表示中の画像を新しい画像に置き換える機能を作ります。次のように`IndexPage`コンポーネントに、`handleClick`関数とボタンを追加してください。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为按钮添加一个功能，当点击按钮时，从API获取新的图片信息并将当前显示的图片替换为新图片。请在`IndexPage`组件中添加`handleClick`函数和按钮。
- en: '[PRE48]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: これでクリックしたら画像が更新されるようになります。うまく動いているかブラウザで確認してみてください。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击后应该可以更新图片了。请在浏览器中检查是否正常运行。
- en: </tutorials/nextjs/cat-image-is-changed-when-click-the-button.mp4>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: </tutorials/nextjs/cat-image-is-changed-when-click-the-button.mp4>
- en: Next.jsのSSRとデータフェッチAPI[​](#nextjsのssrとデータフェッチapi "Next.jsのSSRとデータフェッチAPI への直接リンク")
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Next.js的SSR和数据获取API[​](#nextjs的ssr和数据获取api "直接链接到Next.js的SSR和数据获取API")
- en: Reactはクライアントサイドでのレンダリングに特化していますが、Next.jsはサーバーサイドレンダリング(server-side rendering;
    SSR)をサポートしています。これにより、初回読み込みの速度を向上させることができ、SEOやパフォーマンスにもよい影響を与えます。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: React专注于客户端渲染，但Next.js支持服务器端渲染（SSR）。这可以提高首次加载速度，对SEO和性能也有好处。
- en: SSRはウェブアプリケーションのレンダリングをサーバーサイドで行う技術のことです。通常、クライアントサイドレンダリング(client-side rendering;
    CSR)では、ブラウザがHTML、CSS、JavaScriptファイルをダウンロードして、JavaScriptを使用してページをレンダリングします。これに対して、SSRではサーバーがHTMLを生成し、ブラウザに送信します。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: SSR是在服务器端进行网页应用程序渲染的技术。通常，客户端渲染（CSR）中，浏览器下载HTML、CSS、JavaScript文件，并使用JavaScript渲染页面。相比之下，SSR是服务器生成HTML并发送给浏览器。
- en: Next.jsでSSRを行うには、次のデータフェッチAPIの関数を使います。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Next.js中进行SSR，使用以下数据获取API函数。
- en: '`getServerSideProps`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getServerSideProps`'
- en: '`getStaticProps`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getStaticProps`'
- en: '`getInitialProps`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getInitialProps`'
- en: これらの関数を使うことで、Next.jsで簡単にSSRを実装できます。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些函数可以轻松实现Next.js中的SSR。
- en: getServerSideProps[​](#getserversideprops "getServerSideProps への直接リンク")
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[获取服务器端生成页面数据](#getserversideprops "直接链接到获取服务器端生成页面数据")'
- en: '`getServerSideProps`は、ページがリクエストされるたびにサーバーサイドで実行され、ページのプロパティを返す関数です。この関数を使用すると、リクエストごとにページのデータを取得できます。また、クライアントサイドでルーティングが発生した場合も、この関数がサーバーサイドで実行されます。'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`getServerSideProps`是一个在每次页面被请求时在服务器端执行并返回页面属性的函数。使用此函数可以在每个请求时获取页面数据。此外，即使在客户端发生路由更改时，此函数也会在服务器端执行。'
- en: サーバーサイドでのみ実行されるため、`getServerSideProps`内でのみ利用しているモジュールや関数は、クライアントのコードにバンドルされません。これは、配信するファイルサイズを削減することにも繋がります。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于仅在服务器端执行，仅在`getServerSideProps`内使用的模块或函数不会捆绑到客户端代码中。这有助于减少要传送的文件大小。
- en: サーバーサイドで実行されるため、データベースなどウェブに公開していないミドルウェアから直接データを取得するような処理も記述できます。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在服务器端执行，可以编写直接从未公开在网络上的中间件（如数据库）获取数据的处理逻辑。
- en: getStaticProps[​](#getstaticprops "getStaticProps への直接リンク")
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[获取静态生成页面数据](#getstaticprops "直接链接到获取静态生成页面数据")'
- en: '`getStaticProps`は、静的生成するページのデータを取得するための関数で、ビルド時に実行されます。この関数を使用すると、ビルド時にページのデータを取得しておき、クライアントからのリクエスト時にはそのキャッシュからデータを返すようになります。この関数は、リクエスト時や描画時にはデータ取得が実行されないことに注意が必要です。ユーザーログインが不要なランディングページや、内容のリアルタイムさが不要なブログなどの静的なページを構築するときに利用します。'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`getStaticProps`是一个用于获取静态生成页面数据的函数，在构建时执行。使用这个函数可以在构建时获取页面数据，并在客户端请求时从缓存中返回数据。需要注意的是，这个函数不会在请求或渲染时执行数据获取。适用于构建不需要用户登录或实时内容的静态页面，比如落地页或不需要实时更新的博客等。'
- en: getInitialProps[​](#getinitialprops "getInitialProps への直接リンク")
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[获取初始数据](#getinitialprops "直接链接到获取初始数据")'
- en: '`getInitialProps`は、SSR時にサーバーサイドでデータ取得の処理が実行されます。また、クライアントサイドでルーティングが発生した場合は、クライアント側でもデータの取得が実行されます。このAPIはサーバーとクライアントの両方で実行されるため、両方の環境で動作するように実装する必要があります。'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`getInitialProps`在服务器端渲染时会执行数据获取操作。此外，如果发生客户端路由更改，客户端也会执行数据获取操作。这个API会在服务器端和客户端都执行，因此必须在两个环境中实现。'
- en: '`getInitialProps`は、Next.js 9までのバージョンで使われていた古い方法です。現在でもサポートされていますが、Next.js 10以降では、代わりに
    `getServerSideProps`や`getStaticProps`の使用を推奨しています。'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`getInitialProps`是旧版本Next.js 9中使用的方法。虽然目前仍然支持，但是从Next.js 10开始，建议改用`getServerSideProps`或`getStaticProps`。'
- en: データフェッチAPIを使ってリクエスト時に初期画像を取得する[​](#データフェッチapiを使ってリクエスト時に初期画像を取得する "データフェッチAPIを使ってリクエスト時に初期画像を取得する
    への直接リンク")
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数据获取API在请求时获取初始图片[​](#使用数据获取api在请求时获取初始图片 "直接链接到使用数据获取API在请求时获取初始图片")
- en: これまでに作ってきた`IndexPage`コンポーネントには、クライアントサイドで最初の画像を取得し表示していました。ここでは、データフェッチAPIの`getServerSideProps`を使って、サーバーサイドで初期画像を取得するように変更します。先に完成形のコードを示すと、次のようになります。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 之前创建的`IndexPage`组件在客户端获取并显示了初始图片。现在我们将使用数据获取API的`getServerSideProps`来在服务器端获取初始图片。下面是修改后的代码：
- en: '[PRE50]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 上で行った変更をひとつひとつ見ていきましょう。まず、`getServerSideProps`関数を追加しました。この関数は、サーバーサイドで実行する処理を書きます。上のコードは画像情報を取得する処理になっています。`getServerSideProps`関数は、`IndexPage`コンポーネントが引数として受け取る`prop`を戻り値に含めます。`getServerSideProps`関数は、Next.jsに認識させるために`export`しておく必要があります。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个查看上面所做的更改。首先，我们添加了`getServerSideProps`函数。这个函数用于在服务器端执行的逻辑。上面的代码是获取图片信息的逻辑。`getServerSideProps`函数将在函数中传入的`prop`作为返回值。为了让Next.js识别，`getServerSideProps`函数必须被`export`。
- en: 次に、`IndexPage`関数は`getServerSideProps`が返す`props`を受け取れるように引数を追加してあります。`props`の`initialImageUrl`には初期画像のURLが入っていて、この値を`image`の初期値となるように、`useState`の引数に渡します。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 次に、`IndexPage`函数被添加了一个参数，以接收`getServerSideProps`返回的`props`。`props`中的`initialImageUrl`包含了初始图片的URL，在调用`useState`时将其作为`image`的初始值传入。
- en: 初期画像はサーバーサイドで取得するようにしたので、クライアントサイドで初期画像を取得していた`useEffect`の部分は不要になります。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于初始图片是在服务器端获取的，因此不再需要在客户端获取初始图片的`useEffect`部分。
- en: これで、ページをリクエストするタイミングで、サーバーサイドで画像情報が取得され、ランダムに猫画像が表示されるようになります。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在请求页面时，将会在服务器端获取图片信息，并随机显示猫图片。
- en: ビジュアルを作り込む[​](#ビジュアルを作り込む "ビジュアルを作り込む への直接リンク")
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[​](#ビジュアルを作り込む "直接链接到视觉设计")'
- en: 機能面が完成したので、最後にビジュアルデザインを作り込んでいきましょう。まず、スタイルシートを作成します。スタイルシートの内容は長くなるので、次のURLからスタイルシートをダウンロードしてください。ダウンロードしたら、`pages`ディレクトリに`index.module.css`として保存してください。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 功能已完成，现在让我们来完善视觉设计。首先创建样式表。由于样式表内容较长，请从以下URL下载样式表。下载后，请将其保存为`index.module.css`并放入`pages`目录中。
- en: '[https://raw.githubusercontent.com/yytypescript/random-cat/main/pages/index.module.css](https://raw.githubusercontent.com/yytypescript/random-cat/main/pages/index.module.css)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://raw.githubusercontent.com/yytypescript/random-cat/main/pages/index.module.css](https://raw.githubusercontent.com/yytypescript/random-cat/main/pages/index.module.css)'
- en: このスタイルを`IndexPage`コンポーネントに当てます。まず、`index.module.css`をインポートします。`.module.css`で終わるファイルはCSSモジュール(CSS
    Modules)と言うもので、CSSファイル内で定義したクラス名をTypeScriptからオブジェクトとして参照できるようになります。次に、各要素に`className`属性でクラス名を指定してください。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些样式应用于`IndexPage`组件。首先导入`index.module.css`。以`.module.css`结尾的文件是CSS模块，它允许您从CSS文件中定义的类名在TypeScript中以对象的形式引用。然后，在每个元素上使用`className`属性指定类名。
- en: '[PRE52]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 以上でNext.jsを使った猫画像ジェネレーターの開発は完了です。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Next.js创建猫图生成器的开发已经完成。
- en: プロダクションビルドと実行[​](#プロダクションビルドと実行 "プロダクションビルドと実行 への直接リンク")
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[​](#プロダクションビルドと実行 "直接链接到生产构建和执行")'
- en: Next.jsでは`next build`を実行することで最適化されたプロダクション用のコードを生成でき、`next start`で生成されたプロダクションコードを実行できます。このチュートリアルではボイラテンプレートを利用しているので、package.jsonにbuildコマンドとstartコマンドがすでに用意されています。`yarn
    build`と`yarn start`を実行して本番用のアプリケーションを実行してみましょう。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行`next build`，Next.js可以生成优化后的生产环境代码，然后通过`next start`来执行生成的生产环境代码。由于本教程使用了模板，所以`package.json`中已经提供了`build`命令和`start`命令。执行`yarn
    build`和`yarn start`来运行生产环境应用程序。
- en: '[PRE54]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: アプリケーション起動後に[http://localhost:3000](http://localhost:3000)へブラウザでアクセスをすることで、本番用のアプリケーションの実行を確認できます。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在浏览器中访问[http://localhost:3000](http://localhost:3000)，您可以确认生产环境应用程序的运行。
- en: '[PRE56]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
