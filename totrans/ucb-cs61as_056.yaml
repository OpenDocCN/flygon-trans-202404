- en: Example - Playing Cards
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例子 - 扑克牌
- en: How cool would it be if we could represent a card game using abstract data types?
    Let's create a more complex interface than rational numbers that will allow us
    to represent cards, hands, and decks. With these abstractions, we will be able
    to play some simple card games!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能够使用抽象数据类型来表示一款纸牌游戏，那将是多么酷啊？让我们创建一个比有理数更复杂的接口，允许我们表示卡片、手牌和牌堆。通过这些抽象，我们将能够玩一些简单的纸牌游戏！
- en: Creating the Card
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建卡片
- en: 'When you look at any card, the two properties that identify it as a playing
    card are its rank and its suit. Sure, you can observe other properties, such as
    it''s rectangular shape or its plastic-y surface, but those aren''t the important
    qualities that you can use to identify the card. Thus, here we have our `make-card`
    constructor, which takes in a `rank` and a `suit`:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看任何一张卡片时，将其识别为扑克牌的两个属性是其等级和花色。当然，你可以观察其他属性，比如它的矩形形状或它的塑料表面，但这些不是你用来识别卡片的重要特性。因此，这里有我们的`make-card`构造函数，它接受一个`rank`和一个`suit`：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And here are its selectors:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是它的选择器：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And so we can create a card and extract its properties with the following calls:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以创建一张卡片并使用以下调用提取其属性：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We've just created the king of hearts card.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了红心王牌。
- en: Creating a Hand
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建手牌
- en: 'Just like how a hand of cards is a collection of cards in real life, in our
    abstraction, a hand will be a **list** of cards. We''ve defined the constructor
    and selectors below:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像现实生活中一副牌是卡片的集合一样，在我们的抽象中，一副牌将是一组卡片的**列表**。我们下面定义了构造函数和选择器：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Notice how we defined `make-hand` as a **variable** assigned to the procedure
    `list`. This is because we don''t want to specify how many arguments `make-hand`
    should take in - we can create a hand of any length. All we want `make-hand` to
    do is take in an arbitrary number of cards and store them into a list. Here are
    some example calls to our ADT:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们将`make-hand`定义为**变量**分配给过程`list`。这是因为我们不想指定`make-hand`应该接受多少个参数 - 我们可以创建任意长度的手牌。我们只希望`make-hand`接受任意数量的卡片并将它们存储到列表中。以下是我们
    ADT 的一些示例调用：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using Our Implementation
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用我们的实现
- en: That's all we'll need to represent cards! You have cards, and you have a collection
    of cards. Everything else can be defined in terms these two objects. For example,
    a deck is just a hand with a card for every combination of rank and suit (plus
    two jokers, but we'll omit that for now).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们表示卡片所需的全部！你有卡片，你有一组卡片。其他一切都可以根据这两个对象来定义。例如，一副牌只是一手牌，其中包含每一种等级和花色的卡片（加上两张王牌，但我们现在先忽略它）。
- en: Now it's time to write some procedures with our implementation. For most card
    games, the rank of the cards represent its *value*. Let's write a procedure that
    finds the total value of your hand. `total` takes in a hand and returns the sum
    of all the values of your cards.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候使用我们的实现编写一些程序了。对于大多数纸牌游戏，卡片的等级代表着其*价值*。让我们编写一个找到你手中所有卡片总价值的程序。`total`接受一手牌并返回你卡片价值的总和。
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s an example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Changing the Implementation
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改实现方式
- en: What would happen if we changed the way we represented cards? Would our code
    for `total` still work?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们改变了表示卡片的方式会发生什么？我们的`total`代码仍然有效吗？
- en: 'The answer is yes, `total` will work because there is a layer of *abstraction*
    that separates it from the way cards or hands are implemented. As long as we keep
    the same names for our constructors and selectors, all the procedures we built
    off of it will continue to work. Let''s say we changed the way we represent cards
    to this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是肯定的，`total`会正常工作，因为有一层*抽象*将其与牌或手牌的实现方式分隔开来。只要我们保持构造函数和选择器的名称不变，我们构建的所有程序都将继续工作。假设我们将表示卡片的方式更改为这样：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Our `total` procedure will still work with this implementation too. Try it out
    on the Racket interpreter!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`total`程序在这种实现方式下仍然适用。在 Racket 解释器上试试吧！
- en: With this style of programming, we can create even bigger programs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种编程风格，我们可以创建更大的程序。
