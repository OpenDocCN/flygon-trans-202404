- en: Read Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读代码
- en: Read Code
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读代码
- en: We programmers are weird creatures. We love writing code. But when it comes
    to reading it we usually shy away. After all, writing code is so much more fun,
    and reading code is hard — sometimes almost impossible. Reading other people's
    code is particularly hard. Not necessarily because other people's code is bad,
    but because they probably think and solve problems in a different way to you.
    But did you ever consider that reading someone else's code could improve your
    own?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们程序员是奇怪的生物。我们喜欢编写代码。但是当涉及到阅读代码时，我们通常会退缩。毕竟，编写代码要有更多的乐趣，而阅读代码很难——有时几乎是不可能的。阅读别人的代码尤其困难。不一定是因为别人的代码不好，而是因为他们可能以与你不同的方式思考和解决问题。但你是否曾考虑过阅读别人的代码可能会提高你自己的能力呢？
- en: The next time you read some code, stop and think for a moment. Is the code easy
    or hard to read? If it is hard to read, why is that? Is the formatting poor? Is
    naming inconsistent or illogical? Are several concerns mixed together in the same
    piece of code? Perhaps the choice of language prohibits the code from being readable?
    Try to learn from other people's mistakes, so that your code won't contain the
    same ones. You may receive a few surprises. For example, dependency-breaking techniques
    may be good for low coupling, but they can sometimes also make code harder to
    read. And what some people call *elegant code*, others call *unreadable*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 下次当你阅读一些代码时，请停下来思考一下。这段代码是易读还是难读？如果它难以阅读，是什么原因？是格式不佳吗？命名是否不一致或不合逻辑？代码中是否将几个关注点混合在一起？也许语言选择限制了代码的可读性？试着从别人的错误中学习，这样你的代码就不会包含相同的错误。你可能会有一些意外收获。例如，打破依赖关系的技术可能对低耦合有利，但有时也会使代码变得更难读。有些人称之为*优雅代码*，而其他人则称之为*难以阅读*。
- en: If the code is easy to read, stop to see if there is something useful you can
    learn from it. Maybe there's a design pattern in use that you don't know about,
    or had previously struggled to implement. Perhaps the methods are shorter and
    their names more expressive than yours. Some open source projects are full of
    good examples of how to write brilliant, readable code — while others serve as
    examples of the exact opposite! Check out some of their code and take a look.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码很容易阅读，请停下来看看是否有一些有用的东西可以学到。也许其中使用了你不了解的设计模式，或者以前曾经为之努力实现。也许方法更简短，名称更具表现力。一些开源项目充满了编写出色、易读代码的好例子——而另一些则是相反的例子！看看其中一些代码，看看它们是怎么写的。
- en: Reading your own old code, from a project you are not currently working on,
    can also be an enlightening experience. Start with some of your oldest code and
    work your way forward to the present. You will probably find that it is not at
    all as easy to read as when you wrote it. Your early code may also have a certain
    embarrassing entertainment value, kind of in the same way as being reminded of
    all the things you said when you were drinking in the pub last night. Look at
    how you have developed your skills over the years — it can be truly motivating.
    Observe what areas of the code are hard to read, and consider whether you are
    still writing code in the same way today.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读你自己的旧代码，来自你当前未参与的项目，也可能是一种启发性的经历。从你最早的代码开始，逐渐往前推进到现在。你可能会发现，它读起来并不像你写的时候那么容易。你早期的代码可能还具有一定尴尬的娱乐价值，有点像昨晚在酒吧里喝酒时被提醒的所有事情。看看你这些年来如何发展你的技能——这可能会真正激励你。观察代码中哪些区域很难阅读，并考虑你今天是否仍然以同样的方式编写代码。
- en: So the next time you feel the need to improve your programming skills, don't
    read another book. Read code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以下次当你感觉需要提高编程技能时，不要再读另一本书了。读代码吧。
- en: by [Karianne Berg](http://programmer.97things.oreilly.com/wiki/index.php/Karianne_Berg)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[Karianne Berg](http://programmer.97things.oreilly.com/wiki/index.php/Karianne_Berg)
