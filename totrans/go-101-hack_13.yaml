- en: Pass slice as a function argument
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pass slice as a function argument
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Go`, the function parameters are passed by value. With respect to use slice
    as a function argument, that means the function will get the copies of the slice:
    a pointer which points to the starting address of the underlying array, accompanied
    by the length and capacity of the slice. Oh boy! Since you know the address of
    the memory which is used to store the data, you can tweak the slice now. Let''s
    see the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can see, after running `modifyValue` function, the content of slice `s`
    is changed. Although the `modifyValue` function just gets a copy of the memory
    address of slice's underlying array, it is enough!
  prefs: []
  type: TYPE_NORMAL
- en: 'See another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This time, the `addValue` function doesn't take effect on the `s` slice in `main`
    function. That's because it just manipulate the copy of the `s`, not the "real"
    `s`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So if you really want the function to change the content of a slice, you can
    pass the address of the slice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
