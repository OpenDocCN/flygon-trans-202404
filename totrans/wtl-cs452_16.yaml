- en: Lecture 16 - Serial I/O Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Assignment 4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Exam: 9.00, August 8'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performance measurements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Send First - Receive First: off,0--100,4,0,0 -- on,2--0,10,6,3'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: usec/byte -- off,0--4,4,8,1.4 -- on,2--0.1,0.1,0.2,0.0,0.0
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: off/on -- 16,9,9,10,30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 0/2 -- 10%,10%,6%,3%
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: best -- 7,20,16,15,12
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Real-time Programs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RedBoot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The memory contents are not wiped by reset. Some of the most difficult errors
    can be detected only by using the contents of memory after a reset. Produce more
    useful results by inserting
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: and the like into your code and, with the assistance of a load map, finding
    out where you were in whose code when the problem occurred.
  prefs: []
  type: TYPE_NORMAL
- en: Stack Trace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In single-threaded programs this is often the most useful tool.
  prefs: []
  type: TYPE_NORMAL
- en: Anything that terminates execution abnormally prints the set of active stack
    frames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimal version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: name of calling function
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: line number of call
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Extreme version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: values of arguments
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: values of local variables
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the equivalent of a stack trace in a real-time multi-tasking environment?
  prefs: []
  type: TYPE_NORMAL
- en: How would you implement it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two basic questions to answer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When is it produced?
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What should be in it?
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you make it readable?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breakpoint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What does it do?
  prefs: []
  type: TYPE_NORMAL
- en: snapshot of the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that computation, including respose to interrupts, must stop, or
    it isn't a snapshot.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: provides interactive tools for examining kernel data structures, such as
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: task descriptors
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: lists and queues
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: stacks, including the program counter and local variables, of individual tasks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: restart system immediately afterwards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to continue where processing stopped you must make certain that
    all state is saved when you enter Beakpoint and restored when you leave it. What
    about pending interrupts? You can't stop the entire universe!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise you can re-enter RedBoot.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you get it started?
  prefs: []
  type: TYPE_NORMAL
- en: function call, which you insert in your code when compiling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The easiest and fastest form to implement.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Having the call as part of ASSERT is common.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Has to exit to RedBoot. (Jump to x00.)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: system call instead of function call, which respects the kernel/user distinction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an exception triggered externally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: at initialization
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up the system so that the external event will generate an exception
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: E.g. attach a button to PDIO on the third connector, set up ICU.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: at run-time
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Trigger the interrupt
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to Breakpoint in the event handler
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Either exit to RedBoot,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Or clean up pending interrupts and resume execution.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Breakpoint is a special case of a particular sort of tool that is very common.
  prefs: []
  type: TYPE_NORMAL
- en: condition occurs => information is made available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: breakpoint provides the information interactively (`interactively' means `on
    the time scale of the user')
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breakpoint can stop the system completely. How?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: but it has limited ability to stop the real world
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: i.e., it hides some bugs
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Breakpoint operating on the corpse of an execution terminated by reset or an
    ASSERT is called Autopsy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting information closer to real-time.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Symptoms of bugs often occur a while after the bug itself. Thus we often want
    to know what happened in the time immediately previous to the observation of bug
    symptoms. (Most often 'bug symptom' is no more than a fancy way of saying 'crash'.)
  prefs: []
  type: TYPE_NORMAL
- en: Use bits
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Set aside a block of memory and assign each bit to an event that occurs during
    execution of the program. Set the bit when the event occurs. Then you can see
    what has, or has not occurred prior to the bug becoming visible.
  prefs: []
  type: TYPE_NORMAL
- en: Gossip
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A special task maintains a circular buffer. Any task can send a message to the
    task with a string that will be inserted in the circular buffer.
  prefs: []
  type: TYPE_NORMAL
- en: Execution Visualization
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Most important is the necessity of accommodating the fast time scale of the
    computer to the slow time scale of the human.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Train Properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A locomotive travels on the track at a given speed following the path created
    by directions of turn outs.
  prefs: []
  type: TYPE_NORMAL
- en: As it travels it triggers sensors that give you feedback as to where it is.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actually, not quite where it is. There is a time lag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Train triggers sensor at t: x(t) = Sn + 0 cm'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Report of sensor is recorded (time-stamped) at t + dt. dt includes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: interval between time of triggering and next sensor query
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: time for train controller to process query and return the result
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: time in your application between receiving bytes from train controller and packaging
    bytes into a time stamped event
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You should be able to estimate each of these time intervals
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At t + dt: x(t + dt) = Sn + dx'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: dx = \int_t^(t+dt) v(t') dt' ~= v(t) dt
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the event time-stamped at t + dt the train appears to be at Sn, but it is
    actually at Sn + v(t) dt
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Does this matter?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How fast do trains go? Estimate 20 cm/sec.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If dt is 100 msec you are off by 2 cm.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you know where the locomotive is?
  prefs: []
  type: TYPE_NORMAL
- en: intermittently, at a sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: between sensors, dead reckoning, which means you need to know the train's velocity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Velocity is controlled by changing the train's speed, BUT, the mapping between
    speed and velocity is complex.
  prefs: []
  type: TYPE_NORMAL
- en: Velocity changes are not instantaneous.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the speed is changed the train speeds up and slows down gradually.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tricks'' that make the train stop instantly are not acceptable because they
    wear out the trains.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The velocity decreases when travelling over turn outs or around curves.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The smaller the radius of curvature the slower the velocity.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Different locomotives travel at different velocities when set to the same speed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Velocity of a given locomotive decreases over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the track gets dirty.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As the time since the locomotive's last lubrication increases
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As the locomotive gradually wears out
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Important**. Some of these effects matter; some don''t. It''s part of your
    task to find out which is which.'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, things can go wrong, such as
  prefs: []
  type: TYPE_NORMAL
- en: A turn-out switches while a locomotive is on top of it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to estimate where the train will be when the turn-out switches in order
    to know if it is safe to execute a switch command
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Locomotives run off the ends of sidings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to know how far a train will travel between when you give the stop
    command and when the train stops.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Locomotives stall because they pass over difficult parts of the track too slowly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why? Friction increases when a train is on curved track.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensors fail to trigger, or trigger in the absence of a locomotive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to know when you expect the sensor to be triggered if you are to know
    that it has not been triggered.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding such failures, or responding sensibly to them, is possible only if
    you have a `good enough' velocity calibration. (You get a perfect calibration
    only in the limit t->infinity, and train you are calibrating is dead long before
    that.) Failures like these also pollute your attempt to acquire reliable data
    for your calibration.
  prefs: []
  type: TYPE_NORMAL
- en: Factors that *might* effect a calibration.
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In general the velocity of a locomotive may be a function of many variables
  prefs: []
  type: TYPE_NORMAL
- en: which locomotive it is
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: which speed is set
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: time since the last speed change
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the velocity at which it was travelling before the last speed change
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: where it is on the track
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: possibly on what type of track it is on
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: how long since the track was cleaned
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: how long since the locomotive was lubricated
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Important**. Some of these effects are matter; some don''t. It''s part of
    your task to find out which is which.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
