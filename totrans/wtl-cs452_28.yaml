- en: Lecture 28 - Demos, Reservations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public Service Annoucements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Final exam date: 9.00 August 7 to 11.30 August 9'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Pathologies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we go down this list both pathology detection and the length of the edit-compile-test
    cycle grow without bound.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Deadlock
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One or more tasks will never run again. For example
  prefs: []
  type: TYPE_NORMAL
- en: 'Task sends to itself (local: rest of system keeps running, task itself will
    never run)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Every task does Receive( ) (global: nothing is running)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Cycle of tasks sending around the cycle (local: other tasks keep running)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kernel can detect such things
  prefs: []
  type: TYPE_NORMAL
- en: What does it do?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential deadlock can be detected at compile time
  prefs: []
  type: TYPE_NORMAL
- en: cycle in the send graph of all sends that could happen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: remember implicit sends
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: doesn't necessarily occur at run-time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: that is, it's a necessary but not sufficient condition.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It's worse,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn't happen when tests are short
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It appears near the end when tests run for longer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in a critical race can make a potential deadlock reveal itself.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Solutions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Gating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most common example is initialization, where the send/receive pattern may be
    different than FOREVER
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Gate the end of initialization
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Define four types of task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Administatrer (A), including servers of all kinds: only receives'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Worker (W), including notifiers: only sends'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Client (C): only sends'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Notifier (N): only sends to its administrator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two A tasks cannot communicate directly; two W/C tasks cannot communicate directly.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For W/C/N tasks`Send` appears in two flavours
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: C tasks
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: W tasks
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: N tasks
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The Receives corresponding to W, C & N tasks are normally the same.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: N is effectively a W task
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The important difference is that while W & C tasks are lower priority than the
    A task, N tasks are higher priority.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: C, W & N requests and results must have compatible data types.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The request might be effectively a union
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The payload is interpreted differently at run-time,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: using different cases of the switch on message type.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A courier is W-type to one A-task, C-type to the other
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Occasionally, but not often, two A-tasks, are synchronized in a way that makes
    it possible to communicate in two directions through one server.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then two couriers are used
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 2\. Livelock (Deadly Embrace)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Definition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Two or more tasks are READY. For each task, the state of the other tasks prevents
    progress being made regardless of which task is ACTIVE.
  prefs: []
  type: TYPE_NORMAL
- en: A higher level of coordination is required.
  prefs: []
  type: TYPE_NORMAL
- en: Two types of livelock exist
  prefs: []
  type: TYPE_NORMAL
- en: Ones that are the result of bad coding
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find bug and remove it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ones that are inherent in the application definition
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Detect livelock and work around it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking for solutions we prefer ones that avoid a central planner. Why?
  prefs: []
  type: TYPE_NORMAL
- en: In the twentieth century there were a collection of political systems relying
    on central planners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most no longer exist
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Livelock usually occurs in the context of resource contention
  prefs: []
  type: TYPE_NORMAL
- en: Livelock that's Really Deadlock
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: client1 needs resource1 & resource2;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: obtains resource1 from proprietor1;
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: asks proprietor2 for resource2
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: client2 needs resource1 & resource2;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: obtains resource2 from proprietor2;
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: asks proprietor1 for resource1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: possible code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client 1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Client 2
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Proprietor
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'state:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'client1, client2: REPLY-BLOCKED - can''t release resources'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'proprietor1, proprietor2: SEND-BLOCKED - waiting for release'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: this is a true deadlock -- none of the four tasks will ever run again -- even
    though there are no cycles in the call graph.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The dependencies lie elsewhere. Where?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: (You can find on the internet arguments about terminology just as intense as
    anything you will ever see in vi vs emacs or Apple vs Microsoft.)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Solutions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Make a single compound resourse, BUT
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: all clients may not need both
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: some resources simply cannot be compounded
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Impose a global order on resource requests that all clients must follow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: unsafe against malicious or incompetent programmers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: some resources don't admit strong enough ordering, e.g. pieces of track in the
    train set
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a mega-server that handles all resource requests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: clients request all at once, mega-server provides an optimal solution to resource
    use in the presence of hundreds of deadlines.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: client might not know that A is needed until processing with B is well-advanced
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Real Livelock
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Proprietor1 & proprietor2 fail the requests
  prefs: []
  type: TYPE_NORMAL
- en: Proprietor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Polling is the most likely result. Typical client code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And the problem is that this code usually works as long as the tests are relatively
    short
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Livelock that's Really a Critical Race
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We could try to make the clients a little more considerate
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Inherent Livelock
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember the example where two trains come face to face, each waiting for the
    other to move. They will wait facing each other until the demo is over, probably
    polling.
  prefs: []
  type: TYPE_NORMAL
- en: What's hard about solving this problem?
  prefs: []
  type: TYPE_NORMAL
- en: Neither driver knows what the other driver is trying to do.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In real life,
  prefs: []
  type: TYPE_NORMAL
- en: the drivers would communicate, but
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in your software that's neither easy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many different `conversations' might need to be available?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: nor desirable
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What is the effect on other trains of the two drivers' special arrangement?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What's most easy for you to do is to programme each driver with
  prefs: []
  type: TYPE_NORMAL
- en: detection, e.g.,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delay a random time
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Request again
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If turned down, work around
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: work around, e.g.,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Recommence working on goal as though track is blocked.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 3\. Critical Races
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Two tasks, A & B, at the same priority
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A is doing a lot of debugging IO
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B always reserves a section of track before A, and all is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debugging IO is removed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A reserves the section before B can get it, and execution collapses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lower priority of A to the same level as C.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now C executes faster and gets a resource before D .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You shuffle priorities forever, eventually reverting, to put back in the debugging
    IO.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Definition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The order in which computation is done is an important factor in determining
    whether or not it is successful.
  prefs: []
  type: TYPE_NORMAL
- en: Critical races, like Livelock can be
  prefs: []
  type: TYPE_NORMAL
- en: internal to the program, like the one above, or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: external to the program but inherent in the application domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symptoms
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Small changes in priorities change execution unpredictably, and drastically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debugging output changes execution drastically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changes in train speeds change execution drastically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Example from several terms ago
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Drastically'' usually means chaos in both senses of the term'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sense one: a small change in the initial conditions produces an exponentially
    growing divergence in the execution.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Sense two: exercise for the reader.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Solutions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Explicit synchronization
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: but you then have to know the orders in which things are permitted to occur
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: e.g. Try listing all the orders in which events can occur in your system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: and then notice that just arriving in the same order is often not enough
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Gating is a technique of global synchronization
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: which can be provided by a detective/coordinator
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 4\. Performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changes in performance of one task with respect to another often give rise to
    critical races
  prefs: []
  type: TYPE_NORMAL
- en: The hardest problem to solve
  prefs: []
  type: TYPE_NORMAL
- en: You just don't know what is possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ask a question like:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is my kernel code at the limit of what is possible in terms of performance?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We can compare the performance on message passing, etc., because two kernels
    are pretty much the same.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare a lot of kernels and you should be able to find a lower limit
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can't do the same thing for train applications
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In practice, how do you know you have performance problems? Problems I have
    seen
  prefs: []
  type: TYPE_NORMAL
- en: Priority
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The hardest thing to get right
  prefs: []
  type: TYPE_NORMAL
- en: NP-hard for the human brain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practical method starts with all priorities the same, then adjusts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: symptoms of good priority assignment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The higher the priority, the more likely the ready queue is to be empty
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The shorter the run time in practice the higher the priority
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Problems with priority
  prefs: []
  type: TYPE_NORMAL
- en: Priority inversion
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One resource, many clients
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tasks try to do too much
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congestion
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Too many tasks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: blocked tasks don't count,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: lowest priority tasks almost don't count
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Layered abstraction are costly
  prefs: []
  type: TYPE_NORMAL
- en: e.g. Notifier -> SerialServer -> InputAccumulater -> Parser -> TrackServer
  prefs: []
  type: TYPE_NORMAL
- en: Output
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Too much terminal output interferes with train controller communication
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't redraw the entire screen
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requests to poll the sensors get backed up in the serial server, or whoever
    provides output buffering.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hardware
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Turn on optimization, but be careful
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are places where you have done register allocation by hand
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn on caches
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: locking is possible
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Size & align calibration tables by size & alignment of cache lines
  prefs: []
  type: TYPE_NORMAL
- en: linker command script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I think that this is stretching it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bill Cowan''s home page](../../../../index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
