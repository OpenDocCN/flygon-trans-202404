- en: TypesType Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型系统
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Require Import Coq.Arith.Arith.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 Coq.Arith.Arith。
- en: Require Import Maps.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 Maps。
- en: Require Import Imp.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 Imp。
- en: Require Import Smallstep.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 Smallstep。
- en: Hint Constructors multi.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 提示 构造子 multi。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Syntax
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语法
- en: 'Here is the syntax, informally:'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是语法，非正式地：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Inductive tm : Type :='
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳 tm：Type :=
- en: '| ttrue : tm'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '| ttrue : tm'
- en: '| tfalse : tm'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '| tfalse : tm'
- en: '| tif : tm → tm → tm → tm'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '| tif : tm → tm → tm → tm'
- en: '| tzero : tm'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '| tzero : tm'
- en: '| tsucc : tm → tm'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '| tsucc : tm → tm'
- en: '| tpred : tm → tm'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '| tpred : tm → tm'
- en: '| tiszero : tm → tm.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '| tiszero : tm → tm。'
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Inductive bvalue : tm → Prop :='
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳 bvalue：tm → Prop :=
- en: '| bv_true : bvalue ttrue'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '| bv_true : bvalue ttrue'
- en: '| bv_false : bvalue tfalse.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '| bv_false : bvalue tfalse。'
- en: 'Inductive nvalue : tm → Prop :='
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳 nvalue：tm → Prop :=
- en: '| nv_zero : nvalue tzero'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '| nv_zero : nvalue tzero'
- en: '| nv_succ : ∀t, nvalue t → nvalue (tsucc t).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '| nv_succ : ∀t, nvalue t → nvalue (tsucc t).'
- en: Definition value (t:tm) := bvalue t ∨ nvalue t.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 值（t:tm）:= bvalue t ∨ nvalue t。
- en: Hint Constructors bvalue nvalue.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 提示 构造子 bvalue nvalue。
- en: Hint Unfold value.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 提示 展开值。
- en: Hint Unfold update.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 提示 展开更新。
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Reserved Notation "t1 '⇒' t2" (at level 40).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 保留符号 "t1 '⇒' t2"（在级别 40）。
- en: 'Inductive step : tm → tm → Prop :='
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳步骤：tm → tm → Prop :=
- en: '| ST_IfTrue : ∀t[1] t[2],'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '| ST_IfTrue : ∀t[1] t[2],'
- en: (tif ttrue t[1] t[2]) ⇒ t[1]
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: (tif ttrue t[1] t[2]) ⇒ t[1]
- en: '| ST_IfFalse : ∀t[1] t[2],'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '| ST_IfFalse : ∀t[1] t[2],'
- en: (tif tfalse t[1] t[2]) ⇒ t[2]
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: (tif tfalse t[1] t[2]) ⇒ t[2]
- en: '| ST_If : ∀t[1] t[1]'' t[2] t[3],'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '| ST_If : ∀t[1] t[1]'' t[2] t[3],'
- en: t[1] ⇒ t[1]' →
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: t[1] ⇒ t[1]' →
- en: (tif t[1] t[2] t[3]) ⇒ (tif t[1]' t[2] t[3])
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: (tif t[1] t[2] t[3]) ⇒ (tif t[1]' t[2] t[3])
- en: '| ST_Succ : ∀t[1] t[1]'','
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '| ST_Succ : ∀t[1] t[1]'','
- en: t[1] ⇒ t[1]' →
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: t[1] ⇒ t[1]' →
- en: (tsucc t[1]) ⇒ (tsucc t[1]')
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: (tsucc t[1]) ⇒ (tsucc t[1]')
- en: '| ST_PredZero :'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '| ST_PredZero：'
- en: (tpred tzero) ⇒ tzero
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: (tpred tzero) ⇒ tzero
- en: '| ST_PredSucc : ∀t[1],'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '| ST_PredSucc : ∀t[1],'
- en: nvalue t[1] →
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: nvalue t[1] →
- en: (tpred (tsucc t[1])) ⇒ t[1]
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: (tpred (tsucc t[1])) ⇒ t[1]
- en: '| ST_Pred : ∀t[1] t[1]'','
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '| ST_Pred : ∀t[1] t[1]'','
- en: t[1] ⇒ t[1]' →
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: t[1] ⇒ t[1]' →
- en: (tpred t[1]) ⇒ (tpred t[1]')
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: (tpred t[1]) ⇒ (tpred t[1]')
- en: '| ST_IszeroZero :'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '| ST_IszeroZero：'
- en: (tiszero tzero) ⇒ ttrue
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: (tiszero tzero) ⇒ ttrue
- en: '| ST_IszeroSucc : ∀t[1],'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '| ST_IszeroSucc : ∀t[1],'
- en: nvalue t[1] →
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: nvalue t[1] →
- en: (tiszero (tsucc t[1])) ⇒ tfalse
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: (tiszero (tsucc t[1])) ⇒ tfalse
- en: '| ST_Iszero : ∀t[1] t[1]'','
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '| ST_Iszero : ∀t[1] t[1]'','
- en: t[1] ⇒ t[1]' →
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: t[1] ⇒ t[1]' →
- en: (tiszero t[1]) ⇒ (tiszero t[1]')
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: (tiszero t[1]) ⇒ (tiszero t[1]')
- en: where "t1 '⇒' t2" := (step t[1] t[2]).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 其中“t1 '⇒' t2” := (step t[1] t[2])。
- en: Hint Constructors step.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 提示 构造子 step。
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: succ (if true then true else true)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: succ (if true then true else true)
- en: can take a step (once, before becoming stuck).
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以进行一步（一次，然后卡住）。
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notation step_normal_form := (normal_form step).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正常形式步骤 := (normal_form step)。
- en: 'Definition stuck (t:tm) : Prop :='
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 卡住（t:tm）：Prop :=
- en: step_normal_form t ∧ ¬ value t.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤正常形式 t ∧ ¬ 值 t。
- en: Hint Unfold stuck.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 提示 展开卡住。
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Example some_term_is_stuck :'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如 某些项卡住：
- en: ∃t, stuck t.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ∃t，卡住 t。
- en: Proof.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 证明
- en: (* FILL IN HERE *) Admitted.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写*) 已承认。
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Lemma value_is_nf : ∀t,'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '引理 value_is_nf : ∀t,'
- en: value t → step_normal_form t.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 值 t → 步骤正常形式 t。
- en: Proof.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写*) 已承认。
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Theorem step_deterministic:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '定理 step_deterministic:'
- en: deterministic step.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 确定性步骤。
- en: Proof with eauto.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 证明 使用 eauto。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写*) 已承认。
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Typing
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型
- en: The next critical observation is that, although this
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一个关键观察是，尽管这样
- en: language has stuck terms, they are always nonsensical, mixing
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语言有卡住的项，它们总是毫无意义，混合
- en: booleans and numbers in a way that we don't even *want* to have a
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值和数字的方式，我们甚至 *不想* 有一个
- en: meaning.  We can easily exclude such ill-typed terms by defining a
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 意义。我们可以通过定义一个轻松排除这种类型不正确的项
- en: '*typing relation* that relates terms to the types (either numeric'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*类型关系* 将项与类型（数字或布尔值）相关联'
- en: or boolean) of their final results.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或布尔值）的最终结果。
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In informal notation, the typing relation is often written
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在非正式表示中，类型关系通常写作
- en: ⊢ t ∈ T and pronounced "t has type T."  The ⊢ symbol
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ⊢ t ∈ T 并发音为 "t 的类型为 T。" 符号 ⊢
- en: is called a "turnstile."  Below, we're going to see richer typing
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 被称为“转角线”。下面，我们将看到更丰富的类型
- en: relations where one or more additional "context" arguments are
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有一个或多个额外的“上下文”参数的关系
- en: written to the left of the turnstile.  For the moment, the context
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 写在转角线的左边。目前，上下文
- en: is always empty.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总是空的。
- en: '|'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_True)
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (T_True)
- en: '|'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: ⊢ true ∈ Bool
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ⊢ true ∈ Bool
- en: '|'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_False)
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (T_False)
- en: '|'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: ⊢ false ∈ Bool
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ⊢ false ∈ Bool
- en: '|'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: ⊢ t[1] ∈ Bool    ⊢ t[2] ∈ T    ⊢ t[3] ∈ T
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ⊢ t[1] ∈ Bool    ⊢ t[2] ∈ T    ⊢ t[3] ∈ T
- en: '|'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_If)
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (T_If)
- en: '|'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: ⊢ if t[1] then t[2] else t[3] ∈ T
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ⊢ if t[1] then t[2] else t[3] ∈ T
- en: '|'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_Zero)
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (T_Zero)
- en: '|'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: ⊢ 0 ∈ Nat
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ⊢ 0 ∈ Nat
- en: '|'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: ⊢ t[1] ∈ Nat
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ⊢ t[1] ∈ Nat
- en: '|'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_Succ)
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (T_Succ)
- en: '|'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: ⊢ succ t[1] ∈ Nat
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ⊢ succ t[1] ∈ Nat
- en: '|'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: ⊢ t[1] ∈ Nat
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ⊢ t[1] ∈ Nat
- en: '|'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_Pred)
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (T_Pred)
- en: '|'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: ⊢ pred t[1] ∈ Nat
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ⊢ pred t[1] ∈ Nat
- en: '|'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: ⊢ t[1] ∈ Nat
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ⊢ t[1] ∈ Nat
- en: '|'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_IsZero)
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (T_IsZero)
- en: '|'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: ⊢ iszero t[1] ∈ Bool
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ⊢ iszero t[1] ∈ Bool
- en: '|'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE12]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: (Since we've included all the constructors of the typing relation
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （因为我们已经包含了类型关系的所有构造函数
- en: in the hint database, the auto tactic can actually find this
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在提示数据库中，auto 策略实际上可以找到这个
- en: proof automatically.)
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自动证明。）
- en: It's important to realize that the typing relation is a
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要的是要意识到类型关系是一个
- en: '*conservative* (or *static*) approximation: it does not consider'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*保守*（或*静态*）逼近：它不考虑'
- en: what happens when the term is reduced — in particular, it does
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当项被减少时会发生什么 — 特别是，它不
- en: not calculate the type of its normal form.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不计算其正常形式的类型。
- en: '[PRE13]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Exercise: 1 star, optional (succ_hastype_nat__hastype_nat)'
  id: totrans-168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：1星，可选（succ_hastype_nat__hastype_nat）
- en: '[PRE14]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: ☐
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: '[PRE15]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Lemma bool_canonical : ∀t,'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 bool_canonical：∀t，
- en: ⊢ t ∈ TBool → value t → bvalue t.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ⊢ t ∈ TBool → value t → bvalue t.
- en: Proof.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明。
- en: intros t HT HV.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: intros t HT HV。
- en: inversion HV; auto.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: inversion HV; auto.
- en: induction H; inversion HT; auto.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: induction H; inversion HT; auto。
- en: Qed.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成。
- en: 'Lemma nat_canonical : ∀t,'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 nat_canonical：∀t，
- en: ⊢ t ∈ TNat → value t → nvalue t.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ⊢ t ∈ TNat → value t → nvalue t。
- en: Proof.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明。
- en: intros t HT HV.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: intros t HT HV。
- en: inversion HV.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: inversion HV。
- en: inversion H; subst; inversion HT.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: inversion H; subst; inversion HT。
- en: auto.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: auto。
- en: Qed.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成。
- en: '[PRE16]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Theorem progress : ∀t T,'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 定理进展：∀t T，
- en: ⊢ t ∈ T →
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: ⊢ t ∈ T →
- en: value t ∨ ∃t', t ⇒ t'.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: value t ∨ ∃t'，t ⇒ t'。
- en: '[PRE17]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Proof with auto.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明与 auto。
- en: intros t T HT.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: intros t T HT。
- en: induction HT...
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 归纳 HT...
- en: (* The cases that were obviously values, like T_True and      T_False, were eliminated immediately by auto *)
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: （*显然是值的情况，如 T_True 和 T_False，立即被 auto 消除*）
- en: '- (* T_If *)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: -（* T_If *）
- en: right. inversion IHHT1; clear IHHT1.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: right. inversion IHHT1; clear IHHT1.
- en: + (* t[1] is a value *)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: +（* t[1] 是一个值*）
- en: apply ([bool_canonical](Types.html#bool_canonical) t[1] HT[1]) in H.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: apply ([bool_canonical](Types.html#bool_canonical) t[1] HT[1]) in H.
- en: inversion H; subst; clear H.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: inversion H; subst; clear H.
- en: ∃t[2]...
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: ∃t[2]...
- en: ∃t[3]...
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: ∃t[3]...
- en: + (* t[1] can take a step *)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: +（* t[1] 可以进行一步*）
- en: inversion H as [t[1]' H[1]].
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: inversion H as [t[1]' H[1]]。
- en: ∃([tif](Types.html#tif) t[1]' t[2] t[3])...
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: ∃([tif](Types.html#tif) t[1]' t[2] t[3])...
- en: (* FILL IN HERE *) Admitted.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: （*在这里填写*）已承认。
- en: '[PRE18]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Type Preservation
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型保持
- en: The second critical property of typing is that, when a well-typed
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型的第二个关键属性是，当一个良好类型的
- en: term takes a step, the result is also a well-typed term.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 项进行一步，结果也是一个良好类型的项。
- en: 'Exercise: 2 stars (finish_preservation)'
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2星（finish_preservation）
- en: '[PRE19]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Complete the formal proof of the preservation property.  (Again,
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成保持性质的形式证明。（再次，
- en: make sure you understand the informal proof fragment in the
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保你理解了上面的非正式证明片段
- en: following exercise first.)
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先完成以下练习。）
- en: '[PRE20]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: ☐
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 3 stars, advancedM (finish_preservation_informal)'
  id: totrans-218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：3星，高级M（finish_preservation_informal）
- en: 'Complete the following informal proof:'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成以下非正式证明：
- en: '*Theorem*: If ⊢ t ∈ T and t ⇒ t'', then ⊢ t'' ∈ T.'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*定理*：如果 ⊢ t ∈ T 并且 t ⇒ t''，那么 ⊢ t'' ∈ T。'
- en: '*Proof*: By induction on a derivation of ⊢ t ∈ T.'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*证明*：通过 ⊢ t ∈ T 的推导归纳。'
- en: If the last rule in the derivation is T_If, then t = if t[1] then t[2] else
    t[3], with ⊢ t[1] ∈ Bool, ⊢ t[2] ∈ T and ⊢ t[3] ∈ T.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果推导中的最后一条规则是 T_If，则 t = if t[1] then t[2] else t[3]，其中 ⊢ t[1] ∈ Bool，⊢ t[2]
    ∈ T，⊢ t[3] ∈ T。
- en: Inspecting the rules for the small-step reduction relation and remembering that
    t has the form if ..., we see that the only ones that could have been used to
    prove t ⇒ t' are ST_IfTrue, ST_IfFalse, or ST_If.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检查小步减少关系的规则，并记住 t 的形式是 if ...，我们看到可以用来证明 t ⇒ t' 的唯一规则是 ST_IfTrue、ST_IfFalse
    或 ST_If。
- en: If the last rule was ST_IfTrue, then t' = t[2]. But we know that ⊢ t[2] ∈ T,
    so we are done.
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果最后一条规则是 ST_IfTrue，则 t' = t[2]。但我们知道 ⊢ t[2] ∈ T，所以我们完成了。
- en: If the last rule was ST_IfFalse, then t' = t[3]. But we know that ⊢ t[3] ∈ T,
    so we are done.
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果最后一条规则是 ST_IfFalse，则 t' = t[3]。但我们知道 ⊢ t[3] ∈ T，所以我们完成了。
- en: If the last rule was ST_If, then t' = if t[1]' then t[2] else t[3], where t[1]
    ⇒ t[1]'. We know ⊢ t[1] ∈ Bool so, by the IH, ⊢ t[1]' ∈ Bool. The T_If rule then
    gives us ⊢ if t[1]' then t[2] else t[3] ∈ T, as required.
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果最后一条规则是 ST_If，则 t' = if t[1]' then t[2] else t[3]，其中 t[1] ⇒ t[1]'。我们知道 ⊢ t[1]
    ∈ Bool，所��根据 IH，⊢ t[1]' ∈ Bool。然后 T_If 规则给出 ⊢ if t[1]' then t[2] else t[3] ∈ T，符合要求。
- en: (* FILL IN HERE *)
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （*在这里填写*）
- en: ☐
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 3 stars (preservation_alternate_proof)'
  id: totrans-229
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：3星（preservation_alternate_proof）
- en: Now prove the same property again by induction on the
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在通过对
- en: '*evaluation* derivation instead of on the typing derivation.'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*评估*推导而不是类型推导的归纳。'
- en: Begin by carefully reading and thinking about the first few
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从仔细阅读和思考前几行开始
- en: lines of the above proofs to make sure you understand what
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述证明的行，确保你理解了什么
- en: each one is doing.  The set-up for this proof is similar, but
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个人都在做什么。这个证明的设置类似，但是
- en: not exactly the same.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不完全相同。
- en: '[PRE21]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: ☐
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: The preservation theorem is often called *subject reduction*,
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保持定理通常被称为*主题约简*，
- en: because it tells us what happens when the "subject" of the typing
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: relation is reduced.  This terminology comes from thinking of
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: typing statements as sentences, where the term is the subject and
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: the type is the predicate.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Definition multistep := (multi step).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Notation "t1 '⇒*' t2" := (multistep t[1] t[2]) (at level 40).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'Corollary soundness : ∀t t'' T,'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: ⊢ t ∈ T →
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: t ⇒* t' →
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: ~(stuck t').
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Proof.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: intros t t' T HT P. induction P; intros [R S].
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: destruct ([progress](Types.html#progress) x T HT); auto.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: apply IHP. apply ([preservation](Types.html#preservation) x y T HT H).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: unfold [stuck](Types.html#stuck). split; auto. Qed.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Module NormalizePlayground.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Import Smallstep.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'Example step_example1 :'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: (P (C 3) (P (C 3) (C 4)))
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: ⇒* (C 10).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Proof.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: apply multi_step with (P (C 3) (C 7)).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: apply ST_Plus2.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: apply v_const.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: apply ST_PlusConstConst.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: apply multi_step with (C 10).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: apply ST_PlusConstConst.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: apply multi_refl.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Hint Constructors step value.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'Example step_example1'' :'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: (P (C 3) (P (C 3) (C 4)))
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: ⇒* (C 10).
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Proof.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: eapply multi_step. auto. simpl.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: eapply multi_step. auto. simpl.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: apply multi_refl.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tactic Notation "print_goal" :=
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?x ⇒ idtac x end.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "normalize" :=
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: repeat (print_goal; eapply multi_step ;
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '[ (eauto 10; fail) | (instantiate; simpl)]);'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: apply multi_refl.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'Example step_example1'''' :'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: (P (C 3) (P (C 3) (C 4)))
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: ⇒* (C 10).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Proof.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: normalize.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: (* The print_goal in the normalize tactic shows      a trace of how the expression reduced...
             (P (C 3) (P (C 3) (C 4)) ==>* C 10)          (P (C 3) (C 7) ==>* C 10)
             (C 10 ==>* C 10)                         *)
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Example step_example1'''''' : ∃e'','
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: (P (C 3) (P (C 3) (C 4)))
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: ⇒* e'.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Proof.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: eapply ex_intro. normalize.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '(* This time, the trace is:        (P (C 3) (P (C 3) (C 4)) ==>* ?e'')        (P (C 3) (C 7) ==>* ?e'')
           (C 10 ==>* ?e'')    where ?e'' is the variable ``guessed'''' by eapply. *)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Qed.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Theorem normalize_ex : ∃e'','
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: (P (C 3) (P (C 2) (C 1)))
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: ⇒* e'.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Proof.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Theorem normalize_ex'' : ∃e'','
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: (P (C 3) (P (C 2) (C 1)))
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: ⇒* e'.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: Proof.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: (* FILL IN HERE *) Admitted.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: End NormalizePlayground.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "print_goal" :=
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: match goal with ⊢ ?x ⇒ idtac x end.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Tactic Notation "normalize" :=
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: repeat (print_goal; eapply multi_step ;
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '[ (eauto 10; fail) | (instantiate; simpl)]);'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: apply multi_refl.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '| T_SuccBool : ∀t,'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: ⊢ t ∈ TBool →
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: ⊢ tsucc t ∈ TBool
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following properties remain true in the presence of
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: this rule?  For each one, write either "remains true" or
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: else "becomes false." If a property becomes false, give a
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: counterexample.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Determinism of step
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Progress
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preservation
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ☐
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Exercise: 2 starsM (variation2)'
  id: totrans-334
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Suppose, instead, that we add this new rule to the step relation:'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '| ST_Funny2 : ∀t[1] t[2] t[2]'' t[3],'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: t[2] ⇒ t[2]' →
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: (tif t[1] t[2] t[3]) ⇒ (tif t[1] t[2]' t[3])
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: Which of the above properties become false in the presence of
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: this rule?  For each one that does, give a counter-example.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: ☐
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Exercise: 2 stars, optional (variation4)'
  id: totrans-343
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Suppose instead that we add this rule:'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设我们添加这条规则：
- en: '[PRE32]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '| T_Funny4 :'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '| T_Funny4 :'
- en: ⊢ tzero ∈ TBool
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: ⊢ tzero ∈ TBool
- en: Which of the above properties become false in the presence of
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这条规则存在的情况下，上述哪些属性变为假？
- en: this rule?  For each one that does, give a counter-example.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一个变为假的属性，给出一个反例。
- en: ☐
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 2 stars, optional (variation6)'
  id: totrans-351
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2星，可选（变体6）
- en: 'Suppose instead that we add this rule:'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设我们添加这条规则：
- en: '[PRE33]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
