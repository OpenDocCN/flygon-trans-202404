- en: 'Chapter 33: Second Order Differential Equations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Such equations arise naturally in physics since Newton's equations of motion
    involve acceleration which is a second derivative.
  prefs: []
  type: TYPE_NORMAL
- en: 'We make some brief comments about such equations, show how they can be solved
    numerically with a spreadsheet, and discuss two specific examples: the forced
    harmonic oscillator (which also describes the behavior of an R L C circuit) and
    planetary motion.'
  prefs: []
  type: TYPE_NORMAL
- en: Topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 33.1  [General Comments](section01.html)
  prefs: []
  type: TYPE_NORMAL
- en: 33.2  [Solving Second Order Differential Equations](section02.html)
  prefs: []
  type: TYPE_NORMAL
- en: 33.3  [The Forced and Damped Oscillator](section03.html)
  prefs: []
  type: TYPE_NORMAL
- en: 33.4  [Planetary Motion](section04.html)
  prefs: []
  type: TYPE_NORMAL
- en: 33.1 General Comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will consider equations in which there are one or more dependent variables,
    and a single independent variable, and we have expressions for the second derivative
    of the dependent variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples are:'
  prefs: []
  type: TYPE_NORMAL
- en: The forced damped harmonic oscillator
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/108a27134f54f06ea0a015b0c1d1fd8a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A circuit equation
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b5b4eb4530e8cc3af87d90820a6455af.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Planetary motion
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bebb34b780af4f1fc675028476d90da4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: (The second terms are the effects of another planet whose position will obey
    similar equations.)
  prefs: []
  type: TYPE_NORMAL
- en: The pendulum
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/86c0e1677beedb0cc667d24db2872219.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first two of these are linear equations in that each term is linear in the
    dependent variable or independent of it.
  prefs: []
  type: TYPE_NORMAL
- en: Physicists tend attack equations of this kind (when they can) by finding combinations
    of the variables and first derivatives that have vanishing time derivative. These
    are called integrals or constants of the motion. Energy, angular momentum and
    momentum are among the entities that are often conserved. The constancy of such
    quantities provides equations that can then be used to help determine the motion.
  prefs: []
  type: TYPE_NORMAL
- en: There are all sorts of methods that have been deployed to solve linear differential
    equations, including power series expansions, and "transformations" on function
    spaces.
  prefs: []
  type: TYPE_NORMAL
- en: We confine ourselves here to indicating how to solve differential equations
    on a spreadsheet. There is a whole course devoted to their study.
  prefs: []
  type: TYPE_NORMAL
- en: 33.2 Solving Second Order Differential Equations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We suppose that we have a second order differential equation with dependent
    variable u and independent variable t. The harmonic oscillator or pendulum are
    good examples. We suppose, further, that we are given initial values of u and
    u', as well as a formula for u" in terms of u, u' and t
  prefs: []
  type: TYPE_NORMAL
- en: u" = f(u, u', t)
  prefs: []
  type: TYPE_NORMAL
- en: If f does not involve u or u' we could integrate both sides of the equation
    once to find u', and again to find u, with a linear function ct + d that must
    be determined from the initial values.
  prefs: []
  type: TYPE_NORMAL
- en: Thus the problem we face is not unlike that of performing a double integral.
    However, it is surprisingly easy to do, on a spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: We will use an approximation technique that has the order of accuracy of the
    trapezoid rule; improvements can be obtained by extrapolating as with most numerical
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: We begin by describing the basic approach.
  prefs: []
  type: TYPE_NORMAL
- en: We will use a column to represent each the variables t, u, u' and u". The first
    three of these will start at the given initial values of these variables; and
    the initial value of u" can be computed from them.
  prefs: []
  type: TYPE_NORMAL
- en: In each successive row, t will increase by a constant amount, d. (You can later
    choose to make d smaller than your initial choice when variables change too much
    in one d interval.)
  prefs: []
  type: TYPE_NORMAL
- en: We will set
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c7267054a8deceb78cdd5cfe84f1f835.jpg)'
  prefs: []
  type: TYPE_IMG
- en: (Which are generic statements, independent of the equation itself.)
  prefs: []
  type: TYPE_NORMAL
- en: Finally we provide an expression for u"(t + d). In doing so we cannot use u(t
    + d) or u'(t + d) or else our definitions would be circular. On the other hand
    we would like to use something which averages the second derivative at the ends
    of the time interval between t and t + d (at least to some order), just as the
    is done above for u and u'. For the value of u" at t we use f(t, u(t), u'(t)).
    For the value of u" at t + d we use
  prefs: []
  type: TYPE_NORMAL
- en: '**u"(t + d) = f(t + d, u(t) + d * u''(t), u''(t) + d * f(t, u(t), u''(t)))**'
  prefs: []
  type: TYPE_NORMAL
- en: Thus we use the linear approximation to u and u' in f(t + d, u, u') defined
    at t and evaluated at t + d. We could do slightly better by using a quadratic
    approximation
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f950dbfbdc6c7698ba328185391f0ac6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: which would be correct to second order, but the trapezoid rule is already in
    error in second order, so this will not do much good, usually.
  prefs: []
  type: TYPE_NORMAL
- en: You can observe the behavior of u and u' as a function of t by plotting the
    first three columns (using the "charting" capability of the spreadsheet program
    with xy scatter plots). You can observe the "phase plane" behavior of the solution
    by plotting the second and third columns, namely u' vs. u.
  prefs: []
  type: TYPE_NORMAL
- en: If you do things right you can change d or parameters in f in one keystroke,
    and watch how the solutions change as you change them.
  prefs: []
  type: TYPE_NORMAL
- en: You can handle equations with several dependent variables, like those of planetary
    motion, by the same approach; with motion in the xy plane you can have a column
    for t, x, y, x', y', x" and y", and can observe trajectories and look at behavior
    in the xy plane as you change parameters.
  prefs: []
  type: TYPE_NORMAL
- en: By changing d, and observing how much the solution you obtain changes, you can
    get a pretty good idea of its accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: <applet code="SecondOrderODE" codebase="../applets/" archive="secondOrderODE.jar,mk_lib.jar,parser_math.jar,jcbwt363.jar"
    width="760" height="450"></applet>
  prefs: []
  type: TYPE_NORMAL
- en: 33.3 The Forced and Damped Oscillator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This system obeys the equation
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/33117c44ecaf0bcec9b90c57a2b967f0.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To set this up on a spreadsheet, I leave a place to enter the constants and
    initial conditions in the first few rows; these are t[0], x(t[0]), x'(t[0]), m,
    k, f, c and w.
  prefs: []
  type: TYPE_NORMAL
- en: Then I would devote a column to each of t, x, x' and x", first entering the
    initial conditions and then using the formulae above to obtain each new value
    from the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: I like to set the second t value to t[0] + d, and then all subsequent ones to
    twice the previous value minus the value two before ![](../Images/d721ba2f60a16215cfd7ec7422f7435d.jpg)which
    means that the intervals in t all have the same size.
  prefs: []
  type: TYPE_NORMAL
- en: The following chart shows how the setup might look on a spreadsheet
  prefs: []
  type: TYPE_NORMAL
- en: '| Column A | Column B | Column C |'
  prefs: []
  type: TYPE_TB
- en: '| M= | 1 |   |'
  prefs: []
  type: TYPE_TB
- en: '| k= | 1 | x0= |'
  prefs: []
  type: TYPE_TB
- en: '| f= | 0.3 | u0= |'
  prefs: []
  type: TYPE_TB
- en: '| d= | 0.01 | u''0= |'
  prefs: []
  type: TYPE_TB
- en: '| c= | 1 |   |'
  prefs: []
  type: TYPE_TB
- en: '| w= | 1.5 |   |'
  prefs: []
  type: TYPE_TB
- en: '|   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| x | U | u'' |'
  prefs: []
  type: TYPE_TB
- en: '| =D3 | =D4 | =D5 |'
  prefs: []
  type: TYPE_TB
- en: '| =A10+B5 | =B10+(A11-A10)*(C10+C11)/2 | =C10+(A11-A10)*(D10+D11)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A11-A10 | =B11+(A12-A11)*(C11+C12)/2 | =C11+(A12-A11)*(D11+D12)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A12-A11 | =B12+(A13-A12)*(C12+C13)/2 | =C12+(A13-A12)*(D12+D13)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A13-A12 | =B13+(A14-A13)*(C13+C14)/2 | =C13+(A14-A13)*(D13+D14)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A14-A13 | =B14+(A15-A14)*(C14+C15)/2 | =C14+(A15-A14)*(D14+D15)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A15-A14 | =B15+(A16-A15)*(C15+C16)/2 | =C15+(A16-A15)*(D15+D16)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A16-A15 | =B16+(A17-A16)*(C16+C17)/2 | =C16+(A17-A16)*(D16+D17)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A17-A16 | =B17+(A18-A17)*(C17+C18)/2 | =C17+(A18-A17)*(D17+D18)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A18-A17 | =B18+(A19-A18)*(C18+C19)/2 | =C18+(A19-A18)*(D18+D19)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A19-A18 | =B19+(A20-A19)*(C19+C20)/2 | =C19+(A20-A19)*(D19+D20)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A20-A19 | =B20+(A21-A20)*(C20+C21)/2 | =C20+(A21-A20)*(D20+D21)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A21-A20 | =B21+(A22-A21)*(C21+C22)/2 | =C21+(A22-A21)*(D21+D22)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A22-A21 | =B22+(A23-A22)*(C22+C23)/2 | =C22+(A23-A22)*(D22+D23)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A23-A22 | =B23+(A24-A23)*(C23+C24)/2 | =C23+(A24-A23)*(D23+D24)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A24-A23 | =B24+(A25-A24)*(C24+C25)/2 | =C24+(A25-A24)*(D24+D25)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A25-A24 | =B25+(A26-A25)*(C25+C26)/2 | =C25+(A26-A25)*(D25+D26)/2 |'
  prefs: []
  type: TYPE_TB
- en: '| =2*A26-A25 | =B26+(A27-A26)*(C26+C27)/2 | =C26+(A27-A26)*(D26+D27)/2 |'
  prefs: []
  type: TYPE_TB
- en: Column D is here
  prefs: []
  type: TYPE_NORMAL
- en: '| Column D |'
  prefs: []
  type: TYPE_TB
- en: '| 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 |'
  prefs: []
  type: TYPE_TB
- en: '|   |'
  prefs: []
  type: TYPE_TB
- en: '| =MIN(B1000:B2000) |'
  prefs: []
  type: TYPE_TB
- en: '|   |'
  prefs: []
  type: TYPE_TB
- en: '| u" |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*B10-$B$4*C10+$B$6*SIN($B$7*A10))/$B$2 |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B10+(A11-A10)*C10)-$B$4*(C10+(A11-A10)*D10)-$B$6*SIN($B$7*A11))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B11+(A12-A11)*C11)-$B$4*(C11+(A12-A11)*D11)-$B$6*SIN($B$7*A12))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B12+(A13-A12)*C12)-$B$4*(C12+(A13-A12)*D12)-$B$6*SIN($B$7*A13))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B13+(A14-A13)*C13)-$B$4*(C13+(A14-A13)*D13)-$B$6*SIN($B$7*A14))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B14+(A15-A14)*C14)-$B$4*(C14+(A15-A14)*D14)-$B$6*SIN($B$7*A15))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B15+(A16-A15)*C15)-$B$4*(C15+(A16-A15)*D15)-$B$6*SIN($B$7*A16))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B16+(A17-A16)*C16)-$B$4*(C16+(A17-A16)*D16)-$B$6*SIN($B$7*A17))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B17+(A18-A17)*C17)-$B$4*(C17+(A18-A17)*D17)-$B$6*SIN($B$7*A18))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B18+(A19-A18)*C18)-$B$4*(C18+(A19-A18)*D18)-$B$6*SIN($B$7*A19))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B19+(A20-A19)*C19)-$B$4*(C19+(A20-A19)*D19)-$B$6*SIN($B$7*A20))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B20+(A21-A20)*C20)-$B$4*(C20+(A21-A20)*D20)-$B$6*SIN($B$7*A21))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B21+(A22-A21)*C21)-$B$4*(C21+(A22-A21)*D21)-$B$6*SIN($B$7*A22))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B22+(A23-A22)*C22)-$B$4*(C22+(A23-A22)*D22)-$B$6*SIN($B$7*A23))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B23+(A24-A23)*C23)-$B$4*(C23+(A24-A23)*D23)-$B$6*SIN($B$7*A24))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B24+(A25-A24)*C24)-$B$4*(C24+(A25-A24)*D24)-$B$6*SIN($B$7*A25))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B25+(A26-A25)*C25)-$B$4*(C25+(A26-A25)*D25)-$B$6*SIN($B$7*A26))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B26+(A27-A26)*C26)-$B$4*(C26+(A27-A26)*D26)-$B$6*SIN($B$7*A27))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B27+(A28-A27)*C27)-$B$4*(C27+(A28-A27)*D27)-$B$6*SIN($B$7*A28))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B28+(A29-A28)*C28)-$B$4*(C28+(A29-A28)*D28)-$B$6*SIN($B$7*A29))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: '| =(-$B$3*(B29+(A30-A29)*C29)-$B$4*(C29+(A30-A29)*D29)-$B$6*SIN($B$7*A30))/$B$2
    |'
  prefs: []
  type: TYPE_TB
- en: The results look like this
  prefs: []
  type: TYPE_NORMAL
- en: '| mu" = -ku-fu'' -c sin wx |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| m= | 1 |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| k= | 1 | x0= | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| f= | 0.3 | u0= | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| d= | 0.02 | u''0= | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| c= | 1 |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| w= | 1.5 | min u in st state | -0.769651461 |'
  prefs: []
  type: TYPE_TB
- en: '|   | 1 | � |   |'
  prefs: []
  type: TYPE_TB
- en: '| x | u | u'' | u" |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 1 | 0 | -1 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.02 | 0.9997976 | -0.020239955 | -1.0239955 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.04 | 0.999185688 | -0.040951318 | -1.047140848 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.06 | 0.99815498 | -0.062119497 | -1.06967697 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.08 | 0.996696465 | -0.083731975 | -1.091570886 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.1 | 0.994801389 | -0.105775593 | -1.11279094 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.12 | 0.992461268 | -0.128236563 | -1.133306027 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.14 | 0.989667897 | -0.15110048 | -1.153085631 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.16 | 0.986413369 | -0.174352335 | -1.172099856 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.18 | 0.98269008 | -0.197976528 | -1.190319459 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.2 | 0.978490746 | -0.221956881 | -1.207715881 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.22 | 0.973808411 | -0.246276653 | -1.224261277 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.24 | 0.968636459 | -0.270918551 | -1.239928548 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.26 | 0.962968626 | -0.29586475 | -1.254691366 |'
  prefs: []
  type: TYPE_TB
- en: Using Excel we can exhibit graphs by choosing xy scatter plots of the first
    three columns and of the second and third columns.
  prefs: []
  type: TYPE_NORMAL
- en: Realize that you can watch what happens as it happens when you vary parameters
    if you do this.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 33.1 With k = m = 1 and c non-zero, locate the frequency w at which
    the periodic steady state u amplitude is greatest for f = 0.1\. (Home in on it
    by divide and conquer means.)'
  prefs: []
  type: TYPE_NORMAL
- en: Do the same for k = 2, m = 1.**
  prefs: []
  type: TYPE_NORMAL
- en: 33.4 Planetary Motion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The gravitational interaction between a planet and the sun is described by the
    inverse square central force law.
  prefs: []
  type: TYPE_NORMAL
- en: We assume that the planet is much lighter than the sun and so we can imagine
    that the sun is fixed in the center of the system, and the planet moves about
    it. Actually we can avoid this assumption by looking at motion relative to the
    Center of Mass of the system, but will not bother to do so.
  prefs: []
  type: TYPE_NORMAL
- en: We therefore consider the sun to be at the origin, with coordinates (0, 0, 0).
  prefs: []
  type: TYPE_NORMAL
- en: We choose our coordinates so that **the planet is at the position (1, 0, 0)
    at initial time t[0],** and that its motion at that time is in the xy plane, by
    which we mean the plane obeying **z = 0.**
  prefs: []
  type: TYPE_NORMAL
- en: Because the acceleration that the planet experiences always points toward the
    sun (origin) the planet will never leave that plane and we can ignore the z component
    of everything entirely.
  prefs: []
  type: TYPE_NORMAL
- en: It is an empirical fact that all the planets move to a first approximation in
    the same plane, so that even taking the effects of attractions from other planets
    into consideration can be described in two dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Physicists attack this problem by defining conserved quantities (energy, momentum
    and angular momentum), and using the values and properties of these to characterize
    the motion.
  prefs: []
  type: TYPE_NORMAL
- en: Our approach would have been considered an impossible brute force approach to
    the problem in the past, but now it is quite easy to implement, and provides a
    refreshing supplement to the standard treatment of the subject about which we
    recommend any standard text on mechanics and motion under gravity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The actual behavior of planets was carefully observed by astronomers over centuries
    and was crisply summarized in Kepler''s three laws, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. **The motion of planets and other bodies subject to the same force is in
    orbits that are "conic sections": ellipses or hyperbolae or in very special circumstances
    parabolas (all with the sun as a focus), or straight lines.**'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. **The area swept out per unit time in any orbit is constant.**
  prefs: []
  type: TYPE_NORMAL
- en: 3\. There is a certain specific relation between the period of an elliptical
    orbit and a measure of its radius, which relation we will not discuss further.
  prefs: []
  type: TYPE_NORMAL
- en: '[On Conic Sections, Conservation of Angular momentum and Kepler''s Second Law](supplement01.html)'
  prefs: []
  type: TYPE_NORMAL
- en: We will confine ourselves here to showing how to integrate the equations of
    motion numerically on a spreadsheet for this problem, and how to chart the results.
    By doing so you can look at x or y or r as a function of time or at the orbit
    of the system.
  prefs: []
  type: TYPE_NORMAL
- en: We shall see that it is not significantly more difficult than handling a single
    first order differential equation. It differs from same in that it is a second
    order equation, and we have two dependent variables, x and y that will be functions
    of time t.
  prefs: []
  type: TYPE_NORMAL
- en: The differential equation that we will solve is
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aae0aa359bb971b6682db7cc4c3dba56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: subject to initial conditions **r**(0) = (1, 0, 0) and ![](../Images/97d81c7816119154722075a51a2a15d4.jpg)
    where you choose p and q.
  prefs: []
  type: TYPE_NORMAL
- en: We use units for which MG is 1, for convenience, but you need not do this, nor
    need you start at (1, 0, 0).
  prefs: []
  type: TYPE_NORMAL
- en: To solve it we will devote column A to the variable t, B to x, C to y,![](../Images/84b993d83bf65c77a308d1e743c52c11.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: All we have to do is to insert initial conditions and conditions for change
    once in each of these and copy down and we will have our solution.
  prefs: []
  type: TYPE_NORMAL
- en: What then do we put in the various columns?
  prefs: []
  type: TYPE_NORMAL
- en: I would start the action in row 11 leaving the first 10 rows for notes, constants
    (which you can change later) initial conditions and your basic time interval d.
  prefs: []
  type: TYPE_NORMAL
- en: The initial conditions for each variable can then be entered into row 11 in
    the appropriate columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'We begin by giving the simplest way to do all this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Column A: the time column a11 = t[0], a12 = a11+b2\. a13 = 2*a12-a11, copy
    a13 down.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Column B: the x column b11 = x[0], b12 = b11 + e11*($b$2), copy this down and
    into column C.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Column C: the y column c11 = y[0], the rest comes from column B.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Column D: the r column d11 =sqrt(b11*bb11+c11*c11), copy it down.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Column E: the x dot column: e11 = dx/dt(t[0]), e12 = e11 + ($b$2)*g11, copy
    down and into column F.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Column F: the y dot column: f11 = dy/dt(t[0]), the rest comes from column E.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Column G: the x double dot column g11 = - b11*($d11^3), copy down and into
    column H.'
  prefs: []
  type: TYPE_NORMAL
- en: And that is it.
  prefs: []
  type: TYPE_NORMAL
- en: To see the orbit chart highlight columns B and C and do an xy scatter chart
    on them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 33.2 Do this for different initial conditions and look at the orbit
    you get (make each column as long as you can. Vary d to get different accuracy).**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Is greater accuracy possible?**'
  prefs: []
  type: TYPE_NORMAL
- en: The procedure described above is like a left hand rule, and is similarly inaccurate.
    With only slightly more effort you can get trapezoid quality accuracy. (And of
    course extrapolation is possible if you really want it.)
  prefs: []
  type: TYPE_NORMAL
- en: '**How?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Change the entries in columns B and C by changing b12 to**'
  prefs: []
  type: TYPE_NORMAL
- en: b12 = b11 + (e11+e12)*($b$2)/2
  prefs: []
  type: TYPE_NORMAL
- en: and copying it down and to the right into C.
  prefs: []
  type: TYPE_NORMAL
- en: '**Similarly change E and F by changing e13 to**'
  prefs: []
  type: TYPE_NORMAL
- en: e13 = e12 + ($b$2)*(2*g12-g11)
  prefs: []
  type: TYPE_NORMAL
- en: and copying it down and to the right into F.
  prefs: []
  type: TYPE_NORMAL
- en: You can do even better by making more complex changes.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more you should study numerical methods.
  prefs: []
  type: TYPE_NORMAL
- en: '**Can this method fail?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Yes it will.**'
  prefs: []
  type: TYPE_NORMAL
- en: When the planet gets too close to the sun, the second derivative will get so
    large that the various changes in a single time interval will be very badly approximated.
    This will cause a big change in energy and the planet will jump to a very different
    orbit.
  prefs: []
  type: TYPE_NORMAL
- en: Use of a smaller time interval can alleviate this problem.
  prefs: []
  type: TYPE_NORMAL
- en: Review Exercises 1 - 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**1\. Given the following five vectors: A = (1, 2, 3); B = (2, -3, 5); C =
    (x, y, z); D = (cos t, sin t, t²); E = (-2, 1, 0).**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Do each of the following:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'a) Form the sum: **A** + **B** + **C**.'
  prefs: []
  type: TYPE_NORMAL
- en: b) Compute **A**![](../Images/c5d30b3704588cfce44e6ae2999a74ef.jpg)**B**.
  prefs: []
  type: TYPE_NORMAL
- en: c) Compute **A**![](../Images/cbc48b165ffc7d905f0787089f2e4559.jpg)(**B**+**C**).
  prefs: []
  type: TYPE_NORMAL
- en: d) Find values for x, y and z for which **C**![](../Images/c5d30b3704588cfce44e6ae2999a74ef.jpg)**A**
    = 0 and **C**![](../Images/c5d30b3704588cfce44e6ae2999a74ef.jpg)**B** = 0.
  prefs: []
  type: TYPE_NORMAL
- en: e) Find the cosine of the angle between **A** and **B**. Between **B** and **D**
    (the answer will be a function of t).
  prefs: []
  type: TYPE_NORMAL
- en: f) Find the projection of **E** on **B**.
  prefs: []
  type: TYPE_NORMAL
- en: g) Find the determinant whose columns are **A, B** and **E**; also find the
    determinant whose columns are **A, B** and **C**.
  prefs: []
  type: TYPE_NORMAL
- en: h) Suppose the point P has coordinates x = 1, y = 2, z = 3\. What are its spherical
    coordinates ![](../Images/563d89ad6a6ef452ec796fb4424a367c.jpg), ![](../Images/124bc85547cd10bf62179817d56c7fe4.jpg)and
    ![](../Images/9de8416918b50aa525261d878027edcf.jpg)?
  prefs: []
  type: TYPE_NORMAL
- en: i) What is the volume of the parallelepiped with edges **A, B** and **E**?
  prefs: []
  type: TYPE_NORMAL
- en: j) Find the projection of **D** into the xy plane. What is its length?
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Consider the line containing the points A and B above**.'
  prefs: []
  type: TYPE_NORMAL
- en: a) Give a parametric representation of the points on that line.
  prefs: []
  type: TYPE_NORMAL
- en: b) Find a unit length "tangent vector" that points in the direction of the line.
  prefs: []
  type: TYPE_NORMAL
- en: c) Find two directions normal to that vector.
  prefs: []
  type: TYPE_NORMAL
- en: 'd) e) and f) consider the plane containing the points **A, B** and **E**:'
  prefs: []
  type: TYPE_NORMAL
- en: Find a (two parameter) parametric representation of the plane.
  prefs: []
  type: TYPE_NORMAL
- en: Find a normal to the plane.
  prefs: []
  type: TYPE_NORMAL
- en: Find an equation that points on the plane all obey.
  prefs: []
  type: TYPE_NORMAL
- en: g) Suppose we have a new and different product of vectors **V**@**W** that has
    the property **V**@**V** = **0** for all **V** and @ is linear in each argument
    so that you can apply the distributive law.
  prefs: []
  type: TYPE_NORMAL
- en: Deduce something about **V**@**W** + **W**@**V** by applying same to (**V**
    + **W**)@(**V** + **W**).
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Differentiate the following functions with respect to the indicated variables:**'
  prefs: []
  type: TYPE_NORMAL
- en: a) sin (2^x).
  prefs: []
  type: TYPE_NORMAL
- en: b) (sin xy)e^(x+y) with respect to x for fixed y.
  prefs: []
  type: TYPE_NORMAL
- en: c) x² + y² - 3xy with respect to y for fixed x.
  prefs: []
  type: TYPE_NORMAL
- en: d) (sin (y + s sin t))e^(-(x+s cos t)) with respect to s everything else fixed.
  prefs: []
  type: TYPE_NORMAL
- en: e) Find the gradient of (sin y)e^(-x).
  prefs: []
  type: TYPE_NORMAL
- en: f) Find the directional derivative of this function in the direction whose unit
    vector is (cos t, sin t).
  prefs: []
  type: TYPE_NORMAL
- en: g) Find the linear approximation to sin (e^x) at x = 0.
  prefs: []
  type: TYPE_NORMAL
- en: h) Evaluate the derivative with respect to t of (**r**![](../Images/cbc48b165ffc7d905f0787089f2e4559.jpg)**v**)
    where **v** is ![](../Images/242ecc99e821a0ed490513ea9d2db3c6.jpg); suppose that
    ![](../Images/1f209b39270d24c464ac994e3a8829af.jpg) is in the direction of **r**.
    What then is the answer?
  prefs: []
  type: TYPE_NORMAL
- en: i) Where is ![](../Images/96b84871c802fc5d4184d5dda602cdc8.jpg) not differentiable?
    Where is tan x not differentiable? Where is ![](../Images/de0112db2eec3c907909158aa2cb8cce.jpg)
    not differentiable?
  prefs: []
  type: TYPE_NORMAL
- en: j) Find the derivative of an inverse function to sin (e^x) (to define an inverse
    function completely you have to specify a range; ignore that here).
  prefs: []
  type: TYPE_NORMAL
- en: '**4.**'
  prefs: []
  type: TYPE_NORMAL
- en: a) Find the gradient of the function ![](../Images/73a314a851a773371f5208af8c9880c1.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: b) Find the gradient of ![](../Images/476e6a5a91142ab668f93609a475c291.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: c) Find the gradients of cos ![](../Images/124bc85547cd10bf62179817d56c7fe4.jpg)and
    of ![](../Images/124bc85547cd10bf62179817d56c7fe4.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: d) Find the curl of (y, z, x).
  prefs: []
  type: TYPE_NORMAL
- en: e) Find the divergence of ![](../Images/2bcb3fd90c5d6453153fdc77ddc4fc6e.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: f) Find the curl of same.
  prefs: []
  type: TYPE_NORMAL
- en: '**5.** a) Find the quadratic approximation to sin xy at x = 1, y = 2 (radians).'
  prefs: []
  type: TYPE_NORMAL
- en: b) Where does this function have critical points (both partial derivatives are
    0).
  prefs: []
  type: TYPE_NORMAL
- en: c) Find at least one saddle point.
  prefs: []
  type: TYPE_NORMAL
- en: d) Evaluate (**a**![](../Images/cbc48b165ffc7d905f0787089f2e4559.jpg)**b**)![](../Images/c5d30b3704588cfce44e6ae2999a74ef.jpg)(**a**![](../Images/cbc48b165ffc7d905f0787089f2e4559.jpg)**b**)
    by switching a dot and cross product and expressing the triple cross product according
    the rule for doing same, to get an alternate expression for the same thing entirely
    in terms of dot products.
  prefs: []
  type: TYPE_NORMAL
- en: e) Which of the following functions can be defined at x = 0? ![](../Images/f30d4a8148b828e0605a6e6cddc8ec54.jpg)
  prefs: []
  type: TYPE_NORMAL
