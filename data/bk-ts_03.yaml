- en: 'Chapter 3: Using TypeScript - A Practical Overview'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章：使用 TypeScript - 实用概述
- en: Using TypeScript - A Practical Overview
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TypeScript - 实用概述
- en: TypeScript shares something in common with virtually every other computer language
    - a TypeScript program is just a text file. Computers can't run it without first
    transforming that text to machine language. That process is named *compilation*,
    of course, and it isn't exactly a new thing under the sun^([1](#fn_1)).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 与几乎所有其他计算机语言都有一些共同之处 - 一个 TypeScript 程序只是一个文本文件。计算机不能在将该文本转换为机器语言之前运行它。当然，这个过程被称为*编译*，并不是太阳下的新鲜事^([1](#fn_1))。
- en: '![](scoffing.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](scoffing.jpg)'
- en: Me, foolishly scoffing at Microsoft when they first announced .NET.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当微软首次宣布 .NET 时，我愚蠢地嘲笑他们。
- en: These days, many popular languages don't even compile down to machine language.
    Java compiles down to bytecode. A virtual machine interprets that bytecode and
    executes your application. C# and other .NET languages compile down to bytecode
    as well, albeit a different format. They run in a different virtual environment,
    the compile language runtime or CLR)^([2](#fn_2)). If you squint your eyes, even
    web browsers act as virtual machines^([3](#fn_3)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，许多流行的语言甚至不再编译成机器语言。Java 编译成字节码。一个虚拟机解释该字节码并执行您的应用程序。C# 和其他 .NET 语言也编译成字节码，尽管格式不同。它们在不同的虚拟环境中运行，即编译语言运行时或
    CLR)^([2](#fn_2))。如果你眯起眼睛看，甚至浏览器也可以看作是虚拟机^([3](#fn_3))。
- en: All modern web browsers know how to run JavaScript. They don't necessarily all
    agree upon the finer points of the DOM. They may vary their behavior with things
    like the console object. This and that bit of CSS acts different across different
    vendors' browsers (and by versions within the same vendor's browsers^([4](#fn_4))).
    Despite their differences, however, they agree more than they disagree^([5](#fn_5)).
    In most cases the JavaScript I write today runs on every browser on the planet,
    or at least the browsers I care about :).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现代所有的网络浏览器都知道如何运行 JavaScript。它们不一定在 DOM 的一些细节上完全一致。它们可能会根据诸如控制台对象之类的东西而变化其行为。在不同供应商的浏览器中，这些
    CSS 的这一小段行为可能会有所不同（甚至在同一供应商的不同版本中也有可能如此^([4](#fn_4))）。然而，尽管存在差异，它们更多地是一致的而不是不一致的^([5](#fn_5))。在大多数情况下，我今天写的
    JavaScript 可以在地球上的任何浏览器上运行，或者至少是我关心的浏览器 :).
- en: TypeScript isn't JavaScript, of course. It looks a lot like JavaScript and as
    you'll see, you can write valid TypeScript that is literally identical to pure
    JavaScript. However, no major web browser today can execute TypeScript. There's
    a gap here. Transpilation bridges the gap between TypeScript and JavaScript by
    converting TypeScript to JavaScript.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，TypeScript 并不是 JavaScript。它看起来很像 JavaScript，正如你将会看到的，您可以编写与纯 JavaScript 完全相同的有效
    TypeScript。然而，今天没有任何主要的网络浏览器能够执行 TypeScript。这里存在一种差距。转译通过将 TypeScript 转换为 JavaScript
    来弥合 TypeScript 和 JavaScript 之间的差距。
- en: 'Here''s one way to look at it:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个看待它的方式：
- en: '![High Level TypeScript Transpilation Process](ch03_transpilation.PNG)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![高级 TypeScript 转译流程](ch03_transpilation.PNG)'
- en: 'Figure: High Level TypeScript Transpilation Process'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图：高级 TypeScript 转译流程
- en: As a practical matter, it's no different from the kind of compilation process
    we go through with Java, .NET, Rust and other languages. However, it's usually
    referred to as a transpilation process rather than a compilation process. I'll
    tend to use both words in the book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，这与我们在 Java、.NET、Rust 和其他语言中进行的编译过程没有什么不同。然而，它通常被称为转译过程而不是编译过程。在本书中，我会倾向于同时使用这两个词。
- en: You don't need to own Visual Studio or use VS Community Edition to write TypeScript
    code. Many popular IDEs provide a first-class TypeScript experience, including
    Sublime, WebStorm and Visual Studio's younger sibling, Visual Studio Code. The
    JS community has largely embraced VS Code so it's a safe and easy bet. I have
    used VS Code to write all of the examples in this book (and indeed, the book itself)
    and many of the screen captures show VS Code in the background. That said, the
    book is not about VS Code or any other Integrated Development Environment (IDE).
    Pick whichever your prefer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您无需拥有 Visual Studio 或使用 VS Community Edition 来编写 TypeScript 代码。许多流行的 IDE 都提供了一流的
    TypeScript 体验，包括 Sublime、WebStorm 和 Visual Studio 的年轻兄弟，Visual Studio Code。JS
    社区在很大程度上接受了 VS Code，所以这是一个安全且容易的选择。我已经使用 VS Code 来编写本书中的所有示例（确实，包括本书本身），许多屏幕截图显示的是
    VS Code 的后台。也就是说，本书不是关于 VS Code 或任何其他集成开发环境（IDE）的。选择你喜欢的。
- en: 'Today''s market provides us with one TypeScript compiler. Microsoft created
    it, they maintain it and it''s open source. As you''d expect, it''s well-integrated
    with Visual Studio and interestingly, works even better with VS Code. However,
    it is actually a stand-alone independent application in its own right. Download
    and install from here: [https://www.typescriptlang.org/](https://www.typescriptlang.org/
    "Visit the TypeScript Language site").'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当今市场上为我们提供了一个TypeScript编译器。微软创建了它，他们在维护它，它是开源的。正如您所期望的那样，它与Visual Studio的集成良好，有趣的是，与VS
    Code一起使用效果更佳。但是，它实际上是一个独立的独立应用程序。从这里下载并安装：[https://www.typescriptlang.org/](https://www.typescriptlang.org/
    "访问TypeScript语言站点")。
- en: '**A Brief Note on Task Runners**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**任务运行器简要说明**'
- en: When you use a task runner, you define individual tasks and you usually "define"
    them by writing them in JavaScript. This means that you can write your tasks in
    TypeScript too.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用任务运行器时，您会定义单独的任务，通常您会通过JavaScript来“定义”它们。这意味着您也可以用TypeScript编写您的任务。
- en: An IDE plus the TypeScript compiler gets you most of the way - but not necessarily
    all the way - you want to go. Depending on your IDE, you may also need a task
    runner. Task runners execute ... tasks :). At a bare minimum, you want your task
    runner to invoke the TypeScript compiler as you edit and save changes to your
    TypeScript files. Visual Studio and Visual Studio Code come with integrated task
    runners (MSBuild in the former and an integrated runner in VSCode). You will probably
    outgrow the integrated task runners, however. When this time arrives, have a look
    at gulp, grunt or similar tools. At the time of this writing, [gulp](http://gulpjs.com/)
    and [Webpack 2](https://webpack.js.org/) seem to have the most mind share.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IDE加上TypeScript编译器可以实现大部分需求，但不一定是您想要的全部。根据您的IDE，您可能还需要一个任务运行器。任务运行器执行……任务
    :）。至少，您希望您的任务运行器在您编辑并保存TypeScript文件时调用TypeScript编译器。Visual Studio和Visual Studio
    Code都配备了集成的任务运行器（前者为MSBuild，后者为集成的运行器）。但是，您可能会逐渐发现集成的任务运行器不够用。当这个时机到来时，看看gulp、grunt或类似的工具。在撰写本文时，[gulp](http://gulpjs.com/)和[Webpack
    2](https://webpack.js.org/)似乎是最受关注的。
- en: From here on out, I assume that you have selected an IDE and that your IDE is
    connected to a task runner that automatically compiles your TypeScript whenever
    you make a change and save.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我假设您已经选择了一个IDE，并且您的IDE连接到一个任务运行器，每当您进行更改并保存时，它会自动编译您的TypeScript。
- en: Debugging
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试
- en: When I first started wondering about TypeScript, one of my very first thoughts
    was - how do I debug it? It turns out to be a very simple and natural process.
    There can be some quirks with web server config because they aren't configured
    to serve up map files the right way. These kinds of problems are all solvable.
    I can't emphasize how much of a nothingburger debugging concerns become once I
    understood the process.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次开始思考TypeScript时，我最先想到的一个问题是 - 我怎样调试它呢？结果证明这是一个非常简单和自然的过程。由于它们没有配置为正确提供映射文件，因此Web服务器配置可能会有一些怪癖。这些问题都是可以解决的。我无法强调一下，一旦我了解了这个过程，调试问题就变得多么不值一提。
- en: 'Web browsers such as Chrome, Internet Explorer and Firefox provide great debugging
    tools. These tools work with plain JavaScript. Here''s a video showing some code
    that iterates over a collection of objects and the Chrome debugger experience:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome、Internet Explorer和Firefox等Web浏览器提供了出色的调试工具。这些工具适用于纯JavaScript。这里有一个视频展示了一些代码，该代码对对象集合进行迭代，以及Chrome调试器的体验：
- en: '[https://www.youtube.com/embed/MFwfodjYFoo](https://www.youtube.com/embed/MFwfodjYFoo)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/MFwfodjYFoo](https://www.youtube.com/embed/MFwfodjYFoo)'
- en: '(If you can''t see this video, [try clicking here](https://youtu.be/MFwfodjYFoo)
    or type this URL into your web browser: [https://youtu.be/MFwfodjYFoo](https://youtu.be/MFwfodjYFoo).)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: （如果您无法观看此视频，请[尝试点击此处](https://youtu.be/MFwfodjYFoo)或在您的网络浏览器中输入此网址：[https://youtu.be/MFwfodjYFoo](https://youtu.be/MFwfodjYFoo)。）
- en: That looks all well and fine but how does it work with TypeScript?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来一切都很顺利，但是它与TypeScript的工作原理是怎样的呢？
- en: First, the TypeScript compiler aims to generate human-readable JavaScript. As
    a result that transpiled code is often easy to reason about if it's all you have
    in the debugger. Let's do a quick video demo.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，TypeScript编译器旨在生成易于阅读的JavaScript。因此，如果调试器中只有转译代码，通常很容易推理出其作用。让我们进行一个快速的视频演示。
- en: '[https://www.youtube.com/embed/Xb6zREHBGV8](https://www.youtube.com/embed/Xb6zREHBGV8)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/Xb6zREHBGV8](https://www.youtube.com/embed/Xb6zREHBGV8)'
- en: '(If you can''t see this video, [try clicking here](https://youtu.be/Xb6zREHBGV8)
    or type this URL into your web browser: [https://youtu.be/Xb6zREHBGV8](https://youtu.be/Xb6zREHBGV8)).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: (如果你无法看到这个视频，[尝试点击这里](https://youtu.be/Xb6zREHBGV8) 或在你的网络浏览器中输入这个网址：[https://youtu.be/Xb6zREHBGV8](https://youtu.be/Xb6zREHBGV8))。
- en: As you can see, the generated JavaScript is similar to first plain JS adder
    from above. However, it is quite different from the actual TypeScript code. It's
    not so different that it's impossible to reason about, but it definitely creates
    some unnecessary friction. Thankfully, the TypeScript compiler will generate map
    files for us. These provide a connection between the actual JavaScript the browser
    is running and its associated TypeScript source code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，生成的 JavaScript 与上述第一个普通 JS 加法器类似。然而，它与实际的 TypeScript 代码有很大不同。它并不是完全不同以至于无法理解，但确实会产生一些不必要的摩擦。幸运的是，TypeScript
    编译器会为我们生成地图文件。这些文件提供了浏览器正在运行的实际 JavaScript 与其关联的 TypeScript 源代码之间的连接。
- en: Map files are pretty interesting things in and of themselves. They don't just
    work for TypeScript, they work more generally with any JavaScript related source.
    For instance, in development situations, you'll often minimize your JavaScript
    but provide a map file that maps the minimized source back to its unminified state.
    Other languages, like ClosureScript, also use map files. The point here is that
    map files weren't invented for TypeScript, TypeScript simply leverages this existing
    capability. [Here's an ancient article](https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/)
    that describes source maps when they were first introduced back in 2012\. For
    you historians [this article has also aged well](http://blog.teamtreehouse.com/introduction-source-maps).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 地图文件本身非常有趣。它们不仅适用于 TypeScript，还更普遍地适用于与任何 JavaScript 相关的源代码。例如，在开发情况下，你经常会将你的
    JavaScript 进行最小化，但提供一个地图文件，将最小化的源代码映射回其未最小化的状态。其他语言，如 ClosureScript，也使用地图文件。这里的重点是，地图文件不是为
    TypeScript 发明的，TypeScript 只是利用了这个现有的能力。[这是一篇古老的文章](https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/)，介绍了
    2012 年首次引入源码映射时的源码映射。对于历史学家来说，[这篇文章也非常有价值](http://blog.teamtreehouse.com/introduction-source-maps)。
- en: 'Here''s the same experience, but this time using a map file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是同样的体验，但这次使用了地图文件：
- en: '[https://www.youtube.com/embed/RQEUdV84WJg](https://www.youtube.com/embed/RQEUdV84WJg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/RQEUdV84WJg](https://www.youtube.com/embed/RQEUdV84WJg)'
- en: '(If you can''t see this video, [try clicking here] or type this URL into your
    web browser: [https://youtu.be/RQEUdV84WJg](https://youtu.be/RQEUdV84WJg).)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: (如果你无法看到这个视频，[尝试点击这里] 或在你的网络浏览器中输入这个网址：[https://youtu.be/RQEUdV84WJg](https://youtu.be/RQEUdV84WJg)。)
- en: See, debugging TypeScript really is a nothingburger :).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可见，调试 TypeScript 真的没什么大不了的：)。
- en: Further Reading
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You may find the following articles helpful:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现以下文章有所帮助：
- en: 'Light introduction to setting up and using the TypeScript compiler: [http://david-barreto.com/introduction-to-the-typescript-transpiler/](http://david-barreto.com/introduction-to-the-typescript-transpiler/)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Gulp 自动化 TypeScript 构建的轻松入门：[http://david-barreto.com/introduction-to-the-typescript-transpiler/](http://david-barreto.com/introduction-to-the-typescript-transpiler/)
- en: 'Using Gulp to automate TypeScript builds: [https://wipdeveloper.com/2015/12/12/typescript-compile-with-gulp/?utm_content=buffer15f75&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer](https://wipdeveloper.com/2015/12/12/typescript-compile-with-gulp/?utm_content=buffer15f75&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Gulp 自动化 TypeScript 构建：[https://wipdeveloper.com/2015/12/12/typescript-compile-with-gulp/?utm_content=buffer15f75&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer](https://wipdeveloper.com/2015/12/12/typescript-compile-with-gulp/?utm_content=buffer15f75&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)
- en: 'Setting up VS Code to work with TypeScript: [http://blog.mannsoftware.com/?p=1951](http://blog.mannsoftware.com/?p=1951)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 VS Code 以使用 TypeScript：[http://blog.mannsoftware.com/?p=1951](http://blog.mannsoftware.com/?p=1951)
- en: Summary
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We write our TypeScript source using our favorite text editor which itself is
    usually part of our favorite IDE. The TypeScript compiler generates plain JavaScript
    based off our TypeScript source. This is a good thing, since web browsers know
    how to run JavaScript.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用我们喜欢的文本编辑器编写 TypeScript 源代码，这个编辑器通常是我们喜欢的集成开发环境的一部分。TypeScript 编译器根据我们的
    TypeScript 源代码生成普通的 JavaScript。这是件好事，因为网页浏览器知道如何运行 JavaScript。
- en: That generated source is, for the most part, human readable. That gives us a
    tolerable debugging experience. However, we get a first class debugging experience
    by using map files.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的源代码在很大程度上是人类可读的。这给了我们一个可以容忍的调试体验。然而，通过使用地图文件，我们可以获得一流的调试体验。
- en: That's enough big picture background information. It's now finally time introduce
    static types, starting with the next chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 足够提供大局背景信息了。现在终于是介绍静态类型的时候了，下一章开始。
- en: '* * *'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ¹. The name of this book itself pays homage to YACC, a compilation tool whose
    full name is "Yet Another Compiler Compiler." If you've ever been interested in
    writing a compiler (and really, who hasn't heard that siren call?) then YACC could
    be the first string you pull from that ball of fun. [You can start here](https://en.wikipedia.org/wiki/Yacc).
    [↩](#reffn_1 "Jump back to footnote [1] in the text.")
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. 这本书的名称本身就是对YACC的致敬，YACC是一个编译工具，其全名为“Yet Another Compiler Compiler”。如果你曾经对编写编译器感兴趣（实际上，谁没有听过这个诱人的呼唤呢？），那么YACC可能是你从这个有趣球中解开的第一根线。[你可以从这里开始](https://en.wikipedia.org/wiki/Yacc)。[↩](#reffn_1
    "跳回文本中的脚注[1]")
- en: ². You maybe interested in a bit of historical context. When Microsoft first
    came out and announced .NET and this concept of a common language runtime, quite
    a few people (including me, sad to say) scoffed at the idea. Back then, there
    was no C#, or it was in its infancy. Borland C++ and things like Delphi had a
    lot of mind share, if not market share. It's been quite a journey and fascinating
    thing to look back and realize how far we've come as an industry. [↩](#reffn_2
    "Jump back to footnote [2] in the text.")
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ². 也许你对一点历史背景感兴趣。当微软首次推出并宣布了.NET和这个共同语言运行时的概念时，相当多的人（包括我在内，不幸地说）嘲笑了这个想法。当时，还没有C#，或者它还处于起步阶段。Borland
    C++和Delphi之类的东西占据了很多人的心智，即使没有市场份额。回顾这一路走来，意识到我们作为一个行业已经取得了多大的进步，这真是一段相当迷人的旅程。[↩](#reffn_2
    "跳回文本中的脚注[2]")
- en: ³. Web browsers are not, strictly speaking, virtual machines. However, since
    we're merely trying to be practical in this chapter, it's close enough. [↩](#reffn_3
    "Jump back to footnote [3] in the text.")
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ³. 严格来说，Web浏览器不是虚拟机。然而，由于我们在本章仅仅是尝试着实用，这已经足够接近了。[↩](#reffn_3 "跳回文本中的脚注[3]")
- en: ⁴. Internet explorer, in particular, has plagued me over the years. It plagues
    me today. [↩](#reffn_4 "Jump back to footnote [4] in the text.")
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ⁴. 特别是Internet Explorer，多年来一直困扰着我。它今天还在困扰着我。[↩](#reffn_4 "跳回文本中的脚注[4]")
- en: '⁵. This handy web site helps identify how different browsers implement html
    markup, CSS and JavaScript: [https://caniuse.com/](https://caniuse.com/). [↩](#reffn_5
    "Jump back to footnote [5] in the text.")'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ⁵. 这个方便的网站帮助识别不同的浏览器如何实现HTML标记、CSS和JavaScript：[https://caniuse.com/](https://caniuse.com/)。[↩](#reffn_5
    "跳回文本中的脚注[5]")
