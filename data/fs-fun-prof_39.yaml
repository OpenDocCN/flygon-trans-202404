- en: Swapping type-safety for high performance using compiler directives
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用编译器指令交换类型安全性以获得高性能
- en: Swapping type-safety for high performance using compiler directives
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用编译器指令交换类型安全性以获得高性能
- en: '*TL;DR; An experiment: you can use lots of domain modelling types at development
    time and swap them out for a more performant implementation later using compiler
    directives.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*简而言之：一个实验：您可以在开发时使用大量领域建模类型，并使用编译器指令稍后将其替换为性能更高的实现。*'
- en: Domain Modelling vs. Performance
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 领域建模与性能
- en: I am a big fan of using [types for domain modelling](http://fsharpforfunandprofit.com/ddd/)
    -- lots and lots and *lots* of types!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常喜欢使用[用于领域建模的类型](http://fsharpforfunandprofit.com/ddd/)--非常非常*多*的类型！
- en: These types act both as documentation and as a compile time constraint to ensure
    that only valid data is used.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型既作为文档，又作为编译时约束，以确保只使用有效数据。
- en: 'For example, if I have two types `CustomerId` and `OrderId`, I can represent
    them as separate types:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我有两种类型`CustomerId`和`OrderId`，我可以将它们表示为不同的类型：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: and by doing this, I guarantee that I can't use an `OrderId` where I need an
    `CustomerId`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我保证不能在需要`CustomerId`的地方使用`OrderId`。
- en: 'The problem is that adding a layer of indirection like this can affect performance:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，添加这样一层间接引用可能会影响性能：
- en: the extra indirection can cause data access to be much slower.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外的间接引用可能导致数据访问速度大大降低。
- en: the wrapper class needs extra memory, creating memory pressure.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包装类需要额外的内存，会造成内存压力。
- en: this in turn triggers the garbage collector more often, which can often be the
    cause of performance problems in managed code.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这反过来又会更频繁地触发垃圾回收器，这经常是托管代码性能问题的原因。
- en: In general, I don't generally worry about micro-performance like this at design-time.
    Many many things will have a *much* bigger impact on performance, including any
    kind of I/O, and the algorithms you choose.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我通常不会在设计时过分担心微小的性能问题。许多事情将对性能产生*更大*的影响，包括任何类型的I/O和您选择的算法。
- en: As a result, I am very much *against* doing micro-benchmarks out of context.
    You should always profile a real app in a real context, rather than worrying too
    much over things that might not be important.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我非常*反对*在上下文之外进行微型基准测试。您应该始终在实际上下文中对真实应用程序进行分析，而不是过分担心可能不重要的事情。
- en: Having said that, I am now going to do some micro-benchmarks!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我现在打算做一些微型基准测试！
- en: Micro-benchmarking a wrapper type
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 微型基准测试包装类型
- en: 'Let''s see how a wrapper type fares when used in large numbers. Let''s say
    we want to:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 看看当大量使用包装类型时它的表现如何。假设我们想要：
- en: create ten million customer ids
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一千万个客户ID
- en: then, map over them twice
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，再对它们进行两次映射
- en: then, filter them
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，对它们进行过滤
- en: Admittedly, it's a bit silly adding 1 to a customer id -- we'll look at a better
    example later.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，将1添加到客户ID有点愚蠢--我们稍后会看一个更好的例子。
- en: 'Anyway, here''s the code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，这里是代码：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*The code sample above is [available on GitHub](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86#file-typesafe-performance-with-compiler-directives-1-fsx)*.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*上面的代码示例可以在GitHub上[找到](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86#file-typesafe-performance-with-compiler-directives-1-fsx)*。'
- en: '*(Again, let me stress that this is a terrible way to profile code!)*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*(再次强调，这是一种糟糕的编码分析方式！)*'
- en: 'A typical timed result looks like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的计时结果如下：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That is, it takes about 0.3 seconds to do those steps, and it creates quite
    a bit of garbage, triggering four gen1 collections. If you are not sure what "gen0",
    "gen1", and "gen2" mean, then [this is a good place to start](https://msdn.microsoft.com/en-us/library/ms973837.aspx).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，执行这些步骤大约需要0.3秒，并且会创建相当多的垃圾，触发四次gen1收集。如果您不确定“gen0”、“gen1”和“gen2”是什么意思，那么[这是一个好的起点](https://msdn.microsoft.com/en-us/library/ms973837.aspx)。
- en: '*DISCLAIMER: I''m going to be doing all my benchmarking in F# interactive.
    Compiled code with optimizations might have a completely different performance
    profile. Past performance is no guarantee of future results. Draw conclusions
    at your own risk. Etc., etc.*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*免责声明：我将在F#互动环境中进行所有基准测试。经过优化的编译代码可能具有完全不同的性能特征。过去的表现不能保证未来的结果。请自行推断。等等，等等。*'
- en: 'If we increase the array size to 10 million, we get a more than 10x slower
    result:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将数组大小增加到1000万，我们会得到一个超过10倍的更慢结果：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That is, it takes about 3.5 seconds to do those steps, and it creates *a lot*
    of garbage, including a few gen2 GC's, which are really bad. In fact, you might
    even get an "out of memory" exception, in which case, you'll have to restart F#
    Interactive!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，执行这些步骤大约需要3.5秒，并且创建了*很多*垃圾，包括一些非常糟糕的 gen2 GC。实际上，你甚至可能会遇到“内存不足”的异常，这种情况下，你将不得不重新启动
    F# 交互！
- en: 'So what are the alternatives to using a wrapper? There are two common approaches:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 那么使用包装的替代方法有哪些？有两种常见的方法：
- en: Using type aliases
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类型别名
- en: Using units of measure
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单位量
- en: Let's start with type aliases.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从类型别名开始。
- en: Using type aliases
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用类型别名
- en: In the type alias approach, I would simply dispense with the wrapper, but keep
    the type around as documentation.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在类型别名方法中，我将简单地放弃包装，但保留类型作为文档。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If I want to use the type as documentation, I must then annotate the functions
    appropriately.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想要将类型用作文档，那么必须适当地注释函数。
- en: For example, in the `add1ToCustomerId` below both the parameter and the return
    value have been annotated so that it has the type `CustomerId -> CustomerId` rather
    than `int -> int`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在下面的`add1ToCustomerId`中，参数和返回值都已经注释，所以它的类型是`CustomerId -> CustomerId`而不是`int
    -> int`。
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Micro-benchmarking a type alias
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对类型别名进行微型基准测试
- en: 'Let''s create another micro-benchmark:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建另一个微型基准：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*The code sample above is [available on GitHub](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86#file-typesafe-performance-with-compiler-directives-2-fsx)*.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*上面的代码示例可在 [GitHub](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86#file-typesafe-performance-with-compiler-directives-2-fsx)
    上找到*。'
- en: The results are spectacularly better!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 结果真是太棒了！
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It takes about 17 milliseconds to do those steps, and more importantly, very
    little garbage was generated.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些步骤大约需要17毫秒，更重要的是，几乎没有产生垃圾。
- en: 'If we increase the array size to 10 million, we get a 10x slower result, but
    still no garbage:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将数组大小增加到1000万，我们会得到一个慢了10倍的结果，但仍然没有垃圾：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Compared with the earlier version at over three seconds, that's excellent.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的版本相比超过三秒，这是非常好的。
- en: Problems with type aliases
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型别名的问题
- en: Alas, the problem with type aliases is that we have completely lost type safety
    now!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，类型别名的问题是，我们现在完全失去了类型安全性！
- en: 'To demonstrate, here''s some code that creates a `CustomerId` and an `OrderId`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，这里是一些创建 `CustomerId` 和 `OrderId` 的代码：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And sadly, the two ids compare equal, and we can pass an `OrderId` to function
    expecting a `CustomerId` without any complaint from the compiler.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 令人遗憾的是，这两个标识符相等，并且我们可以将 `OrderId` 传递给期望 `CustomerId` 的函数，而编译器不会有任何投诉。
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Ok, so that doesn't look promising! What next?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这看起来不太乐观！接下来怎么办？
- en: Using units of measure
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用单位量
- en: 'The other common option is to use units of measure to distinguish the two types,
    like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见的选项是使用单位量来区分两种类型，像这样：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`CustomerId` and `OrderId` are still two different types, but the unit of measure
    is erased, so by the time the JIT sees it the type looks like an primitive int.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`CustomerId` 和 `OrderId` 仍然是两种不同的类型，但是单位量被擦除了，所以当 JIT 看到它时，该类型看起来像一个原始的 int。'
- en: 'We can see that this is true when we time the same steps as before:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到当我们计时相同的步骤时，这是正确的：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*The code sample above is [available on GitHub](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86#file-typesafe-performance-with-compiler-directives-3-fsx)*.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*上面的代码示例可在 [GitHub](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86#file-typesafe-performance-with-compiler-directives-3-fsx)
    上找到*。'
- en: 'A typical timed result looks like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的计时结果如下：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Again, the code is very fast (22 milliseconds), and just as importantly, very
    little garbage was generated again.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，代码非常快（22 毫秒），同样重要的是，几乎没有产生垃圾。
- en: 'If we increase the array size to 10 million, we maintain the high performance
    (just as with the type alias approach) and still no garbage:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将数组大小增加到1000万，我们仍然保持高性能（与类型别名方法一样），而且仍然没有垃圾：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Problems with units of measure
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单位量的问题
- en: The advantage of units of measure is that the `CustomerId` and `OrderId` types
    are incompatible, so we get the type safety that we want.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单位量的优势在于，`CustomerId` 和 `OrderId` 类型是不兼容的，因此我们得到了想要的类型安全性。
- en: But I find them unsatisfactory from an esthetic point of view. I like my wrapper
    types!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我觉得它们从审美的角度来看不令人满意。我喜欢我的包装类型！
- en: 'And also, units of measure are really meant to be used with numeric values.
    For example, I can create a customer id and order id:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，单位量确实是用于数值值的。例如，我可以创建一个客户 ID 和订单 ID：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: and then I can divide CustomerId(12) by OrderId(4) to get three...
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我可以将 CustomerId(12) 除以 OrderId(4) 来得到三...
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Three what though? Three customer ids per order id? What does that even mean?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 三个什么？每个订单ID三个客户ID？这到底是什么意思？
- en: Yes, surely this will never happen in practice, but still it bothers me!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，当然这在实践中永远不会发生，但是我还是很烦！
- en: Using compiler directives to get the best of both worlds
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用编译器指令来兼顾两全其美
- en: Did I mention that I really like wrapper types? I really like them up until
    I get a call saying that production systems are having performance hiccups because
    of too many big GCs.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到过我真的很喜欢包装类型吗？直到我接到电话说生产系统由于太多大的GC而出现性能问题之前，我真的很喜欢它们。
- en: So, can we get the best of both worlds? Type-safe wrapper types AND fast performance?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们能否两全其美？类型安全的包装类型和快速性能？
- en: I think so, if you are willing to put up with some extra work during development
    and build.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为可以，如果你愿意在开发和构建过程中进行一些额外的工作。
- en: The trick is to have *both* the "wrapper type" implemention and the "type alias"
    implementation available to you, and then switch between them based on a compiler
    directive.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是同时拥有“包装类型”实现和“类型别名”实现，并根据编译器指令在它们之间进行切换。
- en: 'For this to work:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此工作正常：
- en: you will need to tweak your code to not access the type directly, but only via
    functions and pattern matching.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将需要调整你的代码，不要直接访问类型，而是通过函数和模式匹配。
- en: you will need to create a "type alias" implementation that implements a "constructor",
    various "getters" and for pattern matching, active patterns.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将需要创建一个“类型别名”实现，其中包括一个“构造函数”，各种“获取器”和用于模式匹配的主动模式。
- en: Here's an example, using the `COMPILED` and `INTERACTIVE` directives so that
    you can play with it interactively. Obviously, in real code, you would use your
    own directive such as `FASTTYPES` or similar.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个例子，使用`COMPILED`和`INTERACTIVE`指令，这样你就可以交互式地进行操作。显然，在实际代码中，你会使用自己的指令，比如`FASTTYPES`或类似的指令。
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can see that for both versions I've created a constructor `createCustomerId`
    and a getter `customerIdValue` and, for the type alias version, an active pattern
    that looks just like `CustomerId`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，对于两个版本，我都创建了一个构造函数`createCustomerId`和一个获取器`customerIdValue`，对于类型别名版本，还有一个看起来就像`CustomerId`的主动模式。
- en: 'With this code in place, we can use `CustomerId` without caring about the implementation:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这段代码，我们可以使用`CustomerId`而不用担心具体的实现：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And now we can run the *same* micro-benchmark with both implementations:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用*相同的*微基准测试来运行两种实现：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*The code sample above is [available on GitHub](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86#file-typesafe-performance-with-compiler-directives-4-fsx)*.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*上面的代码示例可在[GitHub](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86#file-typesafe-performance-with-compiler-directives-4-fsx)上找到*。'
- en: 'The results are similar to the previous examples. The aliased version is much
    faster and does not create GC pressure:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 结果与之前的例子类似。别名版本更快，不会产生GC压力：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'and for the 10 million element version:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一千万个元素的版本：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: A more complex example
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更复杂的示例
- en: In practice, we might want something more complex than a simple wrapper.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，我们可能需要比简单包装类型更复杂的东西。
- en: For example, here is an `EmailAddress` (a simple wrapper type, but constrained
    to be non-empty and containing a "@") and some sort of `Activity` record that
    stores an email and the number of visits, say.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里有一个`EmailAddress`（一个简单的包装类型，但受限于非空且包含“@”）和某种类型的`Activity`记录，其中存储了一个电子邮件和访问次数。
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As before, for each type there is a constructor and a getter for each field.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，对于每种类型，都有一个构造函数和每个字段的获取器。
- en: '*NOTE: Normally I would define a type outside a module, but because the real
    constructor needs to be private, I''ve put the type inside the module and given
    the module and the type the same name. If this is too awkward, you can rename
    the module to be different from the type, or use the OCaml convention of calling
    the main type in a module just "T", so you get `EmailAddress.T` as the type name.*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：通常情况下，我会在模块外定义一个类型，但是由于真正的构造函数需要是私有的，我将类型放在了模块内，并给了模块和类型相同的名称。如果这太麻烦了，你可以将模块重命名为与类型不同的名称，或者使用OCaml约定，将模块中的主要类型命名为“T”，这样你就会得到`EmailAddress.T`作为类型名称。*'
- en: 'To make a more performant version, we replace `EmailAddress` with a type alias,
    and `Activity` with a struct, like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建更高性能的版本，我们将`EmailAddress`替换为类型别名，并将`Activity`替换为结构体，就像这样：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This version reimplements the constructor and a getter for each field. I could
    have made the field names for `ActivityHistory` be the same in both cases too,
    but. in the struct case, type inference would not work. By making them different,
    the user is forced to use the getter functions rather than dotting in.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本重新实现了构造函数和每个字段的getter。我也可以使`ActivityHistory`的字段名称在两种情况下相同，但是在结构体情况下，类型推断将无法工作。通过使它们不同，用户被迫使用getter函数而不是点操作。
- en: 'Both implementations have the same "API", so we can create code that works
    with both:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 两种实现具有相同的“API”，因此我们可以创建适用于两者的代码：
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Pros and cons of this approach
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这种方法的利弊
- en: One nice thing about this approach is that it is self-correcting -- it forces
    you to use the "API" properly.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的一个好处是它是自我纠正的--它强迫你正确使用“API”。
- en: For example, if I started accessing fields directly by dotting into the `ActivityHistory`
    record, then that code would break when the compiler directive was turned on and
    the struct implementation was used.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我开始直接通过点操作访问`ActivityHistory`记录中的字段，那么当编译器指令打开并且使用结构实现时，该代码将会出错。
- en: Of course, you could also create a signature file to enforce the API.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以创建一个签名文件来强制执行API。
- en: On the negative side, we do lose some of the nice syntax such as `{rec with
    ...}`. But you should really only be using this technique with small records (2-3
    fields), so not having `with` is not a big burden.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 不足之处在于，我们失去了一些优雅的语法，比如`{rec with ...}`。但你真的只应该在小记录（2-3个字段）上使用这种技术，所以没有`with`并不是一个大负担。
- en: Timing the two implementations
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计时两种实现方式
- en: Rather than using `#time`, this time I wrote a custom timer that runs a function
    10 times and prints out the GC and memory used on each run.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是使用`#time`，这次我编写了一个自定义计时器，运行一个函数10次，并打印出每次运行时使用的GC和内存。
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '*The code sample above is [available on GitHub](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86#file-typesafe-performance-with-compiler-directives-5-fsx)*.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*上面的代码示例可以在[GitHub上找到](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86#file-typesafe-performance-with-compiler-directives-5-fsx)*。'
- en: 'Let''s now run `mapAndFilter` with a million records in the array:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在数组中运行`mapAndFilter`，其中包含一百万条记录：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The results are shown below:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now this code no longer consists of only value types, so the profiling is getting
    muddier now! The `mapAndFilter` function uses `createCustomerWithRandomActivity`
    which in turn uses `Option`, a reference type, so there will be a large number
    of reference types being allocated. Just as in real life, it's hard to keep things
    pure!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这段代码不再只由值类型组成，所以性能分析现在变得更加混乱！`mapAndFilter`函数使用`createCustomerWithRandomActivity`，后者又使用`Option`，一个引用类型，因此将会分配大量引用类型。就像在现实生活中一样，保持事情纯粹是很困难的！
- en: Even so, you can see that the wrapped version is slower than the aliased version
    (approx 800ms vs. 150ms) and creates more garbage on each iteration (approx 72Mb
    vs 24Mb) and most importantly has two big GC pauses (in the 5th and 9th iterations),
    while the aliased version never even does a gen1 GC, let alone a gen2.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 即使如此，你可以看到封装版本比别名版本慢（大约800ms对150ms），并且在每次迭代中产生更多的垃圾（大约72Mb对24Mb），最重要的是在第5次和第9次迭代中有两次大的GC暂停，而别名版本甚至从未进行过gen1
    GC，更不用说gen2了。
- en: '*NOTE: The fact that aliased version is using up memory and yet there are no
    gen1s makes me a bit suspicious of these figures. I think they might be different
    if run outside of F# interactive.*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：别名版本正在使用内存，但没有gen1，这让我对这些数字有些怀疑。我认为如果在F#交互环境之外运行，结果可能会有所不同。*'
- en: What about non-record types?
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么非记录类型呢？
- en: What if the type we want to optimise is a discriminated union rather than a
    record?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ���果我们要优化的类型是一个判别联合而不是记录呢？
- en: My suggestion is to turn the DU into a struct with a tag for each case, and
    fields for all possible data.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我的建议是将DU转换为一个带有每种情况标签和所有可能数据字段的结构。
- en: 'For example, let''s say that we have DU that classifies an `Activity` into
    `Active` and `Inactive`, and for the `Active` case we store the email and visits
    and for the inactive case we only store the email:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个DU，将`Activity`分类为`Active`和`Inactive`，对于`Active`情况，我们存储电子邮件和访问次数，而对于`Inactive`情况，我们只存储电子邮件：
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To turn this into a struct, I would do something like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其转换为结构体，我会这样做：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note that `Visits` is not used in the `Inactive` case, so is set to a default
    value.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`Visits`在`Inactive`情况下没有使用，因此设置为默认值。
- en: Now let's create a function that classifies the activity history, creates a
    `Classification` and then filters and extracts the email only for active customers.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个函数，对活动历史进行分类，创建一个`Classification`，然后仅为活跃客户过滤和提取电子邮件。
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '*The code sample above is [available on GitHub](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86#file-typesafe-performance-with-compiler-directives-5-fsx)*.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*上面的代码示例可以在[GitHub上找到](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86#file-typesafe-performance-with-compiler-directives-5-fsx)*。'
- en: 'The results of profiling this function with the two different implementations
    are shown below:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两种不同实现对这个函数进行性能分析的结果如下：
- en: '[PRE31]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As before, the aliased/struct version is more performant, being faster and generating
    less garbage (although there was a GC pause at the end, oh dear).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，别名/结构体版本更具性能，更快，生成的垃圾更少（尽管最后有一个GC暂停，哦，天哪）。
- en: Questions
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Isn't this a lot of work, creating two implementations?
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这不是很多工作吗，创建两种实现？
- en: Yes! *I don't think you should do this in general.* This is just an experiment
    on my part.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！*我认为一般情况下你不应该这样做。*这只是我的一个实验。
- en: I suggest that turning records and DUs into structs is a last resort, only done
    after you have eliminated all other bottlenecks first.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议将记录和DUs转换为结构体是最后的选择，只有在消除所有其他瓶颈之后才这样做。
- en: However, there may be a few special cases where speed and memory are critical,
    and then, perhaps, it might be worth doing something like this.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可能有一些特殊情况，速度和内存是至关重要的，那么，也许值得做一些类似的事情。
- en: What are the downsides?
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有什么不足之处吗？
- en: In addition to all the extra work and maintenance, you mean?
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 除了所有额外的工作和维护，你是这个意思吗？
- en: Well, because the types are essentially private, we do lose some of the nice
    syntax available when you have access to the internals of the type, such as `{rec
    with ...}`, but as I said, you should really only be using this technique with
    small records anyway.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，因为这些类型本质上是私有的，我们失去了一些在访问类型内部时可用的漂亮语法，比如`{rec with ...}`，但正如我所说，你应该只在小记录中使用这种技术。
- en: More importantly, value types like structs are not a silver bullet. They have
    their own problems.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，像结构体这样的值类型并不是万能的。它们有自己的问题。
- en: For example, they can be slower when passed as arguments (because of copy-by-value)
    and you must be careful not to [box them implicitly](http://theburningmonk.com/2015/07/beware-of-implicit-boxing-of-value-types/),
    otherwise you end up doing allocations and creating garbage. Microsoft has [guidelines
    on using classes vs structs](https://msdn.microsoft.com/en-us/library/ms229017.aspx),
    but see also [this commentary on breaking these guidelines](http://stackoverflow.com/a/6973171/1136133)
    and [these rules](http://stackoverflow.com/a/598268/1136133).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当作为参数传递时可能会更慢（因为按值复制），你必须小心不要[隐式装箱它们](http://theburningmonk.com/2015/07/beware-of-implicit-boxing-of-value-types/)，否则你最终会进行分配并创建垃圾。微软有关于使用类
    vs 结构体的[指南](https://msdn.microsoft.com/en-us/library/ms229017.aspx)，但也请参考[这篇关于打破这些指南的评论](http://stackoverflow.com/a/6973171/1136133)和[这些规则](http://stackoverflow.com/a/598268/1136133)。
- en: What about using shadowing?
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 考虑使用阴影吗？
- en: Shadowing is used when the client wants to use a different implementation. For
    example, you can switch from unchecked to checked arithmetic by opening the [Checked
    module](https://msdn.microsoft.com/en-us/library/ee340296.aspx). [More details
    here](http://theburningmonk.com/2012/01/checked-context-in-c-and-f/).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户想要使用不同的实现时，就会使用阴影。例如，你可以通过打开[Checked module](https://msdn.microsoft.com/en-us/library/ee340296.aspx)来从无检查切换到有检查的算术。[更多细节请看这里](http://theburningmonk.com/2012/01/checked-context-in-c-and-f/)。
- en: But that would not work here -- I don't want each client to decide which version
    of the type they will use. That would lead to all sorts of incompatibility problems.
    Also, it's not a per-module decision, it's a decision based on deployment context.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 但这在这里行不通——我不希望每个客户端决定他们将使用哪个版本的类型。这将导致各种不兼容问题。而且，这不是一个模块决策，而是基于部署上下文的决策。
- en: What about more performant collection types?
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于更高性能的��合类型呢？
- en: I am using `array` everywhere as the collection type. If you want other high
    performing collections, check out [FSharpx.Collections](https://fsprojects.github.io/FSharpx.Collections/)
    or [Funq collections](https://github.com/GregRos/Funq).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我到处都在使用`array`作为集合类型。如果你想要其他高性能的集合，请查看[FSharpx.Collections](https://fsprojects.github.io/FSharpx.Collections/)或[Funq
    collections](https://github.com/GregRos/Funq)。
- en: You've mixed up allocations, mapping, filtering. What about a more fine-grained
    analysis?
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你混淆了分配、映射、过滤。需要更细致的分析吗？
- en: I'm trying to keep some semblage of dignity after I said that micro-benchmarking
    was bad!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我试图在说微基准测试不好之后保持一些尊严！
- en: So, yes, I deliberately created a case with mixed usage and measured it as a
    whole rather than benchmarking each part separately. Your usage scenarios will
    obviously be different, so I don't think there's any need to go deeper.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，是的，我故意创建了一个混合使用的案例，并将其作为一个整体进行测量，而不是分别对每个部分进行基准测试。你的使用场景显然会有所不同，所以我认为没有必要深入研究。
- en: Also, I'm doing all my benchmarking in F# interactive. Compiled code with optimizations
    might have a completely different performance profile.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我所有的基准测试都是在 F# 交互式环境中进行的。带有优化的编译代码可能具有完全不同的性能特征。
- en: What other ways are there to increase performance?
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有哪些方法可以提高性能？
- en: 'Since F# is a .NET language, the performance tips for C# work for F# as well,
    standard stuff like:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 F# 是一种.NET语言，C# 的性能提示同样适用于 F#，像标准的东西：
- en: Make all I/O async. Use streaming IO over random access IO if possible. Batch
    up your requests.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有 I/O 都应该是异步的。如果可能的话，使用流式 I/O 而不是随机访问 I/O。批量处理你的请求。
- en: Check your algorithms. Anything worse than O(n log(n)) should be looked at.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查你的算法。任何比 O(n log(n)) 更糟糕的算法都应该被审视。
- en: Don't do things twice. Cache as needed.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要重复做同样的事情。根据需要进行缓存。
- en: Keep things in the CPU cache by keeping objects in contiguous memory and avoiding
    too many deep reference (pointer) chains. Things that help with this are using
    arrays instead of lists, value types instead of reference types, etc.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将对象保持在连续内存中并避免过多的深度引用（指针）链，将事物保持在 CPU 缓存中。有助于此的事物包括使用数组而不是列表，值类型而不是引用类型等。
- en: Avoid pressure on the garbage collector by minimizing allocations. Avoid creating
    long-lived objects that survive gen0 collections.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过减少分配来避免对垃圾收集器的压力。避免创建在 gen0 收集中幸存的长寿命对象。
- en: To be clear, I don't claim to be an expert on .NET performance and garbage collection.
    In fact, if you see something wrong with this analysis, please let me know!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 明确一点，我并不自称是.NET性能和垃圾收集方面的专家。实际上，如果你发现这个分析有什么问题，请告诉我！
- en: 'Here are some sources that helped me:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些帮助我的资源：
- en: The book [Writing High-Performance .NET Code](http://www.writinghighperf.net/)
    by Ben Watson.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书 [编写高性能.NET代码](http://www.writinghighperf.net/) 由本·沃森编写。
- en: Martin Thompson has a great [blog](http://mechanical-sympathy.blogspot.jp/2012/08/memory-access-patterns-are-important.html)
    on performance and some excellent videos, such as [Top 10 Performance Folklore](http://www.infoq.com/presentations/top-10-performance-myths).
    ([Good summary here](http://weronikalabaj.com/performance-myths-and-facts/).)
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 马丁·汤普森在性能方面有一个很棒的[博客](http://mechanical-sympathy.blogspot.jp/2012/08/memory-access-patterns-are-important.html)，还有一些优秀的视频，比如[前10个性能迷思](http://www.infoq.com/presentations/top-10-performance-myths)。（[这里有一个很好的总结](http://weronikalabaj.com/performance-myths-and-facts/)。）
- en: '[Understanding Latency](https://www.youtube.com/watch?v=9MKY4KypBzg), a video
    by Gil Tene.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解延迟](https://www.youtube.com/watch?v=9MKY4KypBzg)，由吉尔·特纳制作的视频。'
- en: '[Essential Truths Everyone Should Know about Performance in a Large Managed
    Codebase](https://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/DEV-B333),
    a video by Dustin Cambell at Microsoft.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个人都应该了解的大型托管代码库性能的基本真相](https://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/DEV-B333)，由微软的达斯汀·坎贝尔制作的视频。'
- en: 'For F# in particular:'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特别是对于 F#：
- en: Yan Cui has some blog posts on [records vs structs](http://theburningmonk.com/2011/10/fsharp-performance-test-structs-vs-records/)
    and [memory layout](http://theburningmonk.com/2015/07/smallest-net-ref-type-is-12-bytes-or-why-you-should-consider-using-value-types).
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yan Cui 在 [记录 vs 结构](http://theburningmonk.com/2011/10/fsharp-performance-test-structs-vs-records/)
    和 [内存布局](http://theburningmonk.com/2015/07/smallest-net-ref-type-is-12-bytes-or-why-you-should-consider-using-value-types)
    上有一些博客文章。
- en: Jon Harrop has a number of good articles such as [this one](http://flyingfrogblog.blogspot.co.uk/2012/06/are-functional-languages-inherently.html)
    but some of it is behind a paywall.
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乔恩·哈罗普有很多好文章，比如[这篇](http://flyingfrogblog.blogspot.co.uk/2012/06/are-functional-languages-inherently.html)，但其中一些内容是付费的。
- en: 'Video: [High Performance F# in .NET and on the GPU](https://vimeo.com/33699102)
    with Jack Pappas. The sound is bad, but the slides and discussion are good!'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频：[在.NET和GPU上进行高性能F#编程](https://vimeo.com/33699102)，由杰克·帕帕斯制作。声音很糟糕，但幻灯片和讨论很好！
- en: '[Resources for Math and Statistics](http://fsharp.org/guides/math-and-statistics/)
    on fsharp.org'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数学和统计资源](http://fsharp.org/guides/math-and-statistics/) 在 fsharp.org 上'
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: '"Keep it clean; keep it simple; aim to be elegant." -- *Martin Thompson*'
  id: totrans-180
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"保持干净；保持简单；力求优雅。" -- *马丁·汤普森*'
- en: This was a little experiment to see if I could have my cake and eat it too.
    Domain modelling using lots of types, but with the ability to get performance
    when needed in an elegant way.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个小实验，看看我是否能两全其美。使用大量类型进行领域建模，但在需要时以一种优雅的方式获得性能。
- en: I think that this is quite a nice solution, but as I said earlier, this optimization
    (and uglification) should only ever be needed for a small number of heavily used
    core types that are allocated many millions of times.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这是一个相当不错的解决方案，但正如我之前所说，这种优化（和丑化）应该只在一小部分被大量使用的核心类型上需要，这些类型被分配了很多次。
- en: Finally, I have not used this approach myself in a large production system (I've
    never needed to), so I would be interested in getting feedback from people in
    the trenches on what they do.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我自己在一个大型生产系统中没有使用过这种方法（我从未需要过），所以我很想听听战壕中的人们对他们的做法有什么反馈。
- en: '*The code samples used in this post are [available on GitHub](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86)*.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文中使用的代码示例可以在[GitHub上找到](https://gist.github.com/swlaschin/348b6b9e64d4b150cf86)*。'
