- en: 'Recitation 4: Datatypes review'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四次课：数据类型复习
- en: Datatype constructors, binding and use occurrences
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类型构造函数，绑定和使用出现
- en: By convention, data constructors (`Penny`, `Nickel`, etc. in the example below)
    start with capital letters. There are a few exceptions, such as `true` and `false`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，数据构造函数（在下面的示例中为`Penny`、`Nickel`等）以大写字母开头。有几个例外，比如`true`和`false`。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By convention, variables (`value` and `c` in the example) start with lower case
    letters.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，变量（在示例中为`value`和`c`）以小写字母开头。
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The example above is a typical `match` expression. But consider the following
    variant. It looks like it should be the same, but when we compile this function,
    OCaml complains about redundant patterns.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的例子是一个典型的`match`表达式。但考虑以下变体。看起来应该是相同的，但当我们编译此函数时，OCaml会抱怨有多余的模式。
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Why? After all, isn't this equivalent to the following?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？毕竟，这不就相当于以下内容吗？
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: No! Actually, it's more like
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不！实际上，更像是
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: or even
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 或者甚至
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In a match expression, if there is a data constructor *C* on the left-hand side
    of the `->` in one of the patterns, then we are comparing to see if the value
    of the expression *e* we are trying to match is *C*. But if it is a variable name,
    then we're declaring a new, fresh instance of the variable and binding it to the
    value of *e*. So any patterns below this are redundant, because this match will
    never fail.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在匹配表达式中，如果在一个模式的`->`的左侧有一个数据构造函数*C*，那么我们正在比较要匹配的表达式*e*的值是否为*C*。但如果它是一个变量名，那么我们正在声明一个新的、新鲜的变量实例，并将其绑定到*e*的值。因此，下面的任何模式都是多余的，因为这个匹配永远不会失败。
- en: 'An occurrence of an identifier in an expression can be either a *binding* occurrence
    or a *use* occurrence. For example, the following are all examples of binding
    occurrences of the identifier `id`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式中标识符的出现可以是*绑定*出现或*使用*出现。例如，以下是标识符`id`的所有绑定出现的示例：
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In contrast, just about anything else, for example
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，几乎任何其他东西，例如
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: is a use occurrence of `id`. In these occurrences, `id` is evaluated, and its
    value is the value that was bound to it in the nearest binding occurrence of `id`,
    be it as a function argument, function declaration, value declaration, or pattern
    match.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 是对`id`的使用发生。在这些出现中，`id`被评估，并且其值是在最近的`id`绑定出现中绑定给它的值，无论是作为函数参数、函数声明、值声明还是模式匹配。
- en: In the example
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: in the first pattern of the match, OCaml does not look to see that `penny` was
    previously bound to `Penny`. The occurrence of `penny` in the match expression
    is also a binding occurrence. The match will succeed, and it will bind `penny`
    anew to the value of `c`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在匹配的第一个模式中，OCaml不会查看`penny`之前是否绑定到`Penny`。在匹配表达式中，`penny`的出现也是一个绑定出现。匹配将成功，并且将`penny`重新绑定到`c`的值。
- en: Why do things this way? The most important reason is that binding identifiers
    in patterns is an extremely useful device that allows concise, elegant code. It
    is possible to simultaneously bind several identifiers in one pattern. For example,
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这样做？最重要的原因是在模式中绑定标识符是一种非常有用的设备，可以使代码简洁、优雅。可以同时在一个模式中绑定几个标识符。例如，
- en: '[PRE9]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: simultaneously binds the three identifiers `x`, `y`, and `t`, which can then
    be used in the expression on the right-hand side. If you do not need a value,
    use the wildcard `_` in the pattern, which matches anything. For example,
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 同时绑定三个标识符`x`、`y`和`t`，然后可以在右侧的表达式中使用它们。如果不需要值，请在模式中使用通配符`_`，它匹配任何内容。例如，
- en: '[PRE10]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If we wanted to allow use occurrences of identifiers in patterns, we would need
    a way to distinguish them from binding occurrences. Currently there is no way
    to do this in OCaml.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要在模式中允许标识符的使用出现，我们将需要一种方法来区分它们与绑定出现。目前在OCaml中没有办法做到这一点。
- en: Here is a puzzle to illustrate the difference between binding and use occurrences.
    What is the value of the following expression?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个谜题来说明绑定和使用出现之间的区别。以下表达式的值是多少？
- en: '[PRE11]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Figuring this out isn't easy, but here's how to think about it. Let's refer
    to the values bound to the different binding occurrences of the variables by their
    line numbers. So *x*[1] means the value bound to `x` in line 1.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 搞清楚这并不容易，但是下面是如何思考的。让我们按照它们在不同绑定出现的行中绑定的值来引用变量。因此，*x*[1]表示`x`在第1行绑定的值。
- en: Line 1 binds three identifiers `f`, `x`, and `y`. The identifiers `x`, and `y`
    are bound to the arguments to `f` supplied in line 8\. So *x*[1] = 2 and *y*[1]
    = 3\. The identifier `f` is bound to the function whose body is given in lines
    2–7.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 1 行绑定了三个标识符`f`，`x`和`y`。标识符`x`和`y`绑定到第 8 行提供的`f`的参数。所以 *x*[1] = 2，*y*[1] =
    3。标识符`f`绑定到其主体在第 2-7 行给出的函数。
- en: Line 2 contains a binding occurrence of `x` and a use occurrence of `y`. So
    *x*[2] = *y*[1] = 3.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 2 行包含了`x`的绑定出现和`y`的使用出现。所以 *x*[2] = *y*[1] = 3。
- en: Line 3 contains a binding occurrence of `y` and a use occurrence of `x`. The
    closest binding of `x` is in line 2\. So *y*[3] = *x*[2] = 3.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 3 行包含了`y`的绑定出现和`x`的使用出现。`x`最接近的绑定在第 2 行。所以 *y*[3] = *x*[2] = 3。
- en: Line 4 contains binding occurrences of `x` and `y` to the left of the `=` and
    use occurrences of both identifiers to the right of the `=`. The use occurrences
    take their values from the most recent previous bindings. So *y*[4] = *x*[2] =
    3 and *x*[4] = *y*[3] * *y*[3] = 9.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 4 行包含了`x`和`y`的绑定出现在`=`的左边，并且在`=`的右边使用了这两个标识符。使用出现从最近的前一个绑定中获取它们的值。所以 *y*[4]
    = *x*[2] = 3，而 *x*[4] = *y*[3] * *y*[3] = 9。
- en: Line 5 contains only use occurrences of `x` and `y`. The values are *x*[4] =
    9 and *y*[4] = 3, respectively. It initiates a pattern match on the tuple (*y*[4],
    *x*[4]) = (3, 9).
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 5 行只包含`x`和`y`的使用出现。值分别为 *x*[4] = 9 和 *y*[4] = 3。它初始化了元组（*y*[4]，*x*[4]）= (3,
    9) 的模式匹配。
- en: Line 6 binds *x*[6] to *y*[4] = 3 and attempts to match (3, 9) with (3, 1).
    The match fails, so we proceed to the next pattern.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 6 行将 *x*[6] 绑定到 *y*[4] = 3，并尝试将 (3, 9) 与 (3, 1) 进行匹配。匹配失败，所以我们继续下一个模式。
- en: Line 7 binds *x*[7] to *y*[4] = 3 and *y*[7] to *x*[4] = 9 and attempts to match
    (3, 9) with (3, 9). The match succeeds, and the value on the right-hand side of
    the `->` is *x*[7] = 3, which is also the value of the whole expression.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 7 行将 *x*[7] 绑定到 *y*[4] = 3，并将 *y*[7] 绑定到 *x*[4] = 9，并尝试将 (3, 9) 与 (3, 9) 进行匹配。匹配成功，`->`
    右侧的值是 *x*[7] = 3，这也是整个表达式的值。
- en: '* * *'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Using Polymorphism
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多态性
- en: The list type
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表类型
- en: 'Because lists are so useful, OCaml provides a builtin parameterized list type
    called `list`. It acts just like the `List` type that we defined in lecture except
    that the names of the constructors are changed. The constructor `[]` makes an
    empty list (compare to `Nil`) and the constructor `::` builds a new list by prepending
    a first element to another list (compare to `Cons`). It is as if `list` were declared
    as:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于列表非常有用，OCaml提供了一个内置的参数化列表类型称为`list`。它的行为就像我们在讲座中定义的`List`类型一样，只是构造函数的名称已更改。构造函数`[]`生成一个空列表（与`Nil`相比较），构造函数`::`通过在另一个列表之前添加第一个元素来构建一个新列表（与`Cons`相比较）。就好像`list`被声明为：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '(although we can''t really do this because of OCaml naming conventions). The
    constructor `::` is an infix operator, which is notationally convenient. The OCaml
    interpreter knows how to print out lists nicely as well. The empty list is printed
    as `[]`, and nonempty lists are printed using brackets with semicolon-separated
    items. These forms may be used to write lists as well. Note that `[]` is a polymorphic
    value of type `''a list`; it serves as the empty list for all types `T list`.
    Here are some examples that show how lists work:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: （尽管由于OCaml的命名惯例，我们实际上不能这样做）。构造函数`::`是一个中缀操作符，这在表示上非常方便。OCaml解释器也知道如何很好地打印列表。空列表打印为`[]`，非空列表使用分号分隔的项目在括号内打印。这些形式也可用于编写列表。注意，`[]`是类型为`'a
    list`的多态值；它对于所有类型`T list`都充当空列表。以下是一些展示列表工作原理的示例：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Just like with types, we have to make sure that we write exhaustive patterns
    in `match` expressions:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 就像类型一样，我们必须确保在`match`表达式中编写全面的模式：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Built-in lists come with [lots of useful predefined OCaml library functions](http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html),
    such as the following and many more:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 内置列表带有[许多有用的预定义OCaml库函数](http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html)，例如以下等等：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Of course, all of these functions could also be easily implemented for the `List`
    type that we defined ourselves.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，所有这些函数也可以轻松地为我们自己定义的`List`类型实现。
- en: Multiple type parameters
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多个类型参数
- en: 'We saw two related features of OCaml in class:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在课堂上看到了OCaml的两个相关特性：
- en: the ability to produce polymorphic values whose type mentions a type variable,
    and
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够生成类型提及类型变量的多态值，以及
- en: the ability to parameterize types with respect to an arbitrary type variable.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够相对于任意类型变量对类型进行参数化。
- en: 'Polymorphic values are typically function values, but other polymorphic values
    exist, such as `[]` (and also `Nil`, as we defined it). Datatypes can actually
    be parameterized with respect to multiple type parameters. For example, the following
    type, `ortype`, is a type-level function that accepts a pair of types and yields
    a new type:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 多态值通常是函数值，但也存在其他多态值，比如 `[]`（以及我们定义的 `Nil`）。实际上，数据类型可以根据多个类型参数进行参数化。例如，以下类型 `ortype`
    是一个类型级函数，接受一对类型并产生一个新类型：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note that the values `Left 2` and `Right "hello"` are still polymorphic with
    respect to one type. OCaml always starts counting type variables from `''a`, hence
    the `*- : (int, ''a) ortype*` rather than `*- : (int, ''b) ortype*` in the match
    for `Left 2` above.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '注意值 `Left 2` 和 `Right "hello"` 在一种类型上仍然是多态的。OCaml 总是从 `''a` 开始计算类型变量，因此上面 `Left
    2` 匹配中的 `*- : (int, ''a) ortype*` 而不是 `*- : (int, ''b) ortype*`。'
- en: The option parameterized type
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数化类型选项
- en: 'Another important standard parameterized type is `option`, which represents
    the *possible* presence of a value. It is defined as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的标准参数化类型是`option`，它表示值的*可能*存在性。其定义如下：
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Options are commonly used when no useful value of a particular type makes sense.
    This corresponds to some uses of the value `null` in Java (`None` acts like `null`).
    The difference is that the use of `option` is type-safe. There is no danger of
    a runtime null pointer exception as long as you use pattern-matching with `option`,
    because the type system forces you to account for the possibility of `None`. Pattern
    matching should be used to check for and extract the value. [A more detailed description
    of option](http://ocaml-lib.sourceforge.net/doc/Option.html) is available in the
    OCaml Library documentation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 选项在某种类型的有用值没有意义时通常被使用。这对应于 Java 中 `null` 的一些用法（`None`的行为类似于`null`）。不同之处在于，使用
    `option` 是类型安全的。只要你使用模式匹配与 `option`，就不会出现运行时空指针异常的危险，因为类型系统强制你考虑到`None`的可能性。应该使用模式匹配来检查并提取值。[更详细的选项描述](http://ocaml-lib.sourceforge.net/doc/Option.html)在
    OCaml 库文档中可用。
