- en: Dynamic and Lexical ScopesTuesday, February 7th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态和词法作用域
- en: This seems like it should work, and it even worked on a few examples, except
    for one which was hard to follow. Seems like we have a bug…
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来应该可以，甚至在一些例子中运行正常，除了一个很难理解的。似乎我们有一个 bug...
- en: 'Now we get to a tricky issue that managed to be a problem for *lots* of language
    implementors, including the first version of Lisp. Lets try to run the following
    expression — try to figure out what it will evaluate to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们遇到了一个棘手的问题，它成功地成为了*很多*语言实现者的问题，包括 Lisp 的第一个版本。让我们尝试运行以下表达式 - 试着弄清楚它将求值为什么：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We expect it to return `7` (at least I do!), but we get `9` instead… The question
    is — *should* it return `9`?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期望它返回`7`（至少我是这样认为的！），但我们得到了`9`... 问题是 - *它应该*返回`9`吗？
- en: What we have arrived to is called *dynamic scope*. Scope is determined by the
    dynamic run-time environment (which is represented by our substitution cache).
    This is *almost always* undesirable, as I hope to convince you.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们到达的是所谓的*动态作用域*。作用域由动态运行时环境确定（由我们的替换缓存表示）。这 *几乎总是* 不可取的，我希望能说服你。
- en: 'Before we start, we define two options for a programming language:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们为编程语言定义了两个选项：
- en: 'Static Scope (also called Lexical Scope): In a language with static scope,
    each identifier gets its value from the scope of its definition, not its use.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态作用域（也称为词法作用域）：在一个具有静态作用域的语言中，每个标识符都从其定义的作用域获取其值，而不是其使用的作用域。
- en: 'Dynamic Scope: In a language with dynamic scope, each identifier gets its value
    from the scope of its use, not its definition.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态作用域：在具有动态作用域的语言中，每个标识符都从其使用的作用域获取其值，而不是其定义的作用域。
- en: Racket uses lexical scope, our new evaluator uses dynamic, the old substitution-based
    evaluator was static etc.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Racket 使用词法作用域，我们的新求值器使用动态作用域，旧的基于替换的求值器是静态的等等。
- en: 'As a side-remark, Lisp began its life as a dynamically-scoped language. The
    artifacts of this were (sort-of) dismissed as an implementation bug. When Scheme
    was introduced, it was the first Lisp dialect that used strictly lexical scoping,
    and Racket is obviously doing the same. (Some Lisp implementations used dynamic
    scope for interpreted code and lexical scope for compiled code!) In fact, Emacs
    Lisp is the only *live* dialects of Lisp that is still dynamically scoped by default.
    Too see this, compare a version of the above code in Racket:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个旁注，Lisp 开始其生命为一个动态作用域的语言。这些遗留的问题被（某种程度上）视为一个实现 bug。当 Scheme 被引入时，它是第一个使用严格词法作用域的
    Lisp 方言，而 Racket 显然也是这样做的。（一些 Lisp 实现对解释代码使用动态作用域，对编译代码使用词法作用域！）事实上，Emacs Lisp
    是唯一 *活跃* 的 Lisp 方言，默认情况下仍然具有动态作用域。要看到这一点，可以将以上代码的版本与 Racket 中的版本进行比较：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'and the Emacs Lisp version (which looks almost the same):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 和 Emacs Lisp 版本（看起来几乎相同）：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'which also happens when we use another function on the way:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在路径上使用另一个函数时也会发生这种情况：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'and note that renaming identifiers can lead to different code — change that
    `val` to `x`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，重命名标识符可能会导致不同的代码 - 将`val`改为`x`：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: and you get `8` because the argument name changed the `x` that the internal
    function sees!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你得到了`8`，因为参数名改变了内部函数所见的`x`！
- en: 'Consider also this Emacs Lisp function:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 还考虑一下这个 Emacs Lisp 函数：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: which has no meaning by itself (`x` is unbound),
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它本身没有意义（`x`未绑定），
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'but can be given a dynamic meaning using a `let`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但可以使用`let`给出一个动态含义：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'or a function application:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 或者一个函数应用：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There is also a dynamically-scoped language in the course languages:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 课程语言中还有一种动态作用域语言：
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note how bad the last example gets: you basically cannot call any function
    and know in advance what it will do.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意最后一个例子有多糟糕：你基本上不能调用任何函数并预先知道它会做什么。
- en: 'There are some cases where dynamic scope can be useful in that it allows you
    to “remotely” customize any piece of code. A good example of where this is taken
    to an extreme is Emacs: originally, it was based on an ancient Lisp dialect that
    was still dynamically scoped, but it retained this feature even when practically
    all Lisp dialects moved on to having lexical scope by default. The reason for
    this is that the danger of dynamic scope is also a way to make a very open system
    where almost anything can be customized by changing it “remotely”. Here’s a concrete
    example for a similar kind of dynamic scope usage that makes a very hackable and
    open system:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些情况下，动态作用域可能会很有用，因为它允许你“远程”定制任何代码片段。一个典型的例子就是 Emacs：最初，它是基于一种古老的 Lisp 方言，该方言仍然具有动态作用域，但即使几乎所有的
    Lisp 方言都默认采用词法作用域，Emacs 仍保留了这一特性。原因是动态作用域的危险也是使系统非常开放的一种方式，几乎任何东西都可以通过“远程”更改来定制。下面是一个类似动态作用域用法的具体示例，它使系统非常易于修改和开放：
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Obviously, this power to customize everything is also the main source of problems
    with getting no guarantees for code. A common way to get the best of both worlds
    is to have *controllable* dynamic scope. For example, Common Lisp also has lexical
    scope everywhere by default, but some variables can be declared as *special*,
    which means that they are dynamically scoped. The main problem with that is that
    you can’t tell when a variable is special by just looking at the code that uses
    it, so a more popular approach is the one that is used in Racket: all bindings
    are always lexically scoped, but there are *parameters* which are a kind of dynamically
    scoped value containers — but they are bound to plain (lexically scoped) identifiers.
    Here’s the same code as above, translated to Racket with parameters:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这种定制一切的能力也是代码没有任何保证的主要问题的根源。在这两种世界中找到最佳解决方案的常见方法是拥有*可控*的动态作用域。例如，Common Lisp
    默认情况下在所有地方都具有词法作用域，但一些变量可以声明为*special*，这意味着它们是动态作用域的。主要问题在于，你无法通过查看使用它的代码来确定变量是否是
    special，因此更流行的方法是 Racket 中使用的方法：所有绑定始终具有词法作用域，但有*parameters*，它们是一种动态作用域的值容器 ——
    但它们绑定到纯粹（词法作用域）的标识符上。下面是将上述代码翻译为 Racket 并使用参数的相同代码：
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The main point here is that the points where a dynamically scoped value is used
    are under the programmer’s control — you cannot “customize” what `-` is doing,
    for example. This gives us back the guarantees that we like to have (= that code
    works), but of course these points are pre-determined, unlike an environment where
    everything can be customized including things that are unexpectedly useful.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要观点是动态作用域值被使用的地方在程序员的控制之下 —— 例如，你无法“定制” `-` 在做什么。这给了我们我们喜欢拥有的保证（= 代码能够正常工作），但当然这些点是预先确定的，不像一个可以定制一切的环境，包括那些意外有用的东西。
- en: As a side-note, after many decades of debating this, Emacs has finally added
    lexical scope in its core language, but this is still determined by a flag — a
    global `lexical-binding` variable.
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 顺带一提，在经过几十年的辩论之后，Emacs 最终在其核心语言中添加了词法作用域，但这仍然由一个标志来确定 —— 一个全局的 `lexical-binding`
    变量。
