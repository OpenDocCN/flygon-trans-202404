- en: More EncodingsTuesday, February 21st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多编码星期二，二月二十一日
- en: 'Our choice of encoding numbers makes sense — the idea is that the main feature
    of a natural number is repeating something a number of times. For booleans, the
    main property we’re looking for is choosing between two values. So we can encode
    true and false by functions of two arguments that return either the first or the
    second argument:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择编码数字的方式是有意义的 — 主要特征是一个自然数重复某事多少次。对于布尔值，我们正在寻找的主要属性是在两个值之间进行选择。因此，我们可以通过返回两个参数的函数来编码true和false，这些函数返回第一个参数或第二个参数：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that this encoding of `#f` is really the same as the encoding of `0`,
    so we have to know what type to expect an use the proper operations (this is similar
    to C, where everything is just integers). Now that we have these two, we can define
    `if`:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`#f`的这种编码实际上与`0`的编码相同，因此我们必须知道期望的类型并使用适当的操作（这类似于C，其中一切都只是整数）。现在我们有了这两个，我们可以定义`if`：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'it expects a boolean which is a function of two arguments, and passes it the
    two expressions. The `#t` boolean will simply return the first, and the `#f` boolean
    will return the second. Strictly speaking, we don’t really need this definition,
    since instead of writing `(if c t e)`, we can simply write `(c t e)`. In any case,
    we need the language to be lazy for this to work. To demonstrate this, we’ll intentionally
    use the quote back-door to use a non-functional value, using this will normally
    result in an error:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 它期望一个布尔值，这是一个两个参数的函数，并将这两个表达式传递给它。`#t`布尔值将简单地返回第一个，而`#f`布尔值将返回第二个。严格来说，我们实际上不需要这个定义，因为我们可以简单地写`(c
    t e)`而不是写`(if c t e)`。无论如何，我们需要语言是惰性的才能使其工作。为了证明这一点，我们故意使用引号后门使用非函数值，通常会导致错误：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But testing our `if` definition, things work just fine:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但测试我们的`if`定义，一切都很顺利：
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'and we see that DrRacket leaves the second addition expression in red, which
    indicates that it was not executed. We can also make sure that even when it is
    defined as a function, it is still working fine because the language is lazy:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到DrRacket将第二个加法表达式标记为红色，这表明它没有被执行。我们还可以确保即使它被定义为一个函数，它仍然正常工作，因为这种语言是惰性的：
- en: '[PRE4]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'How about `and` and `or`? Simple, `or` takes two arguments, and returns either
    true or false if one of the inputs is true:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`and`和`or`呢？简单，`or`接受两个参数，如果其中一个输入为真，则返回true或false：'
- en: '[PRE5]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'but `(if b #t #f)` is really the same as just `b` because it’s a boolean:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '但`(if b #t #f)`实际上与`b`是一样的，因为它是一个布尔值：'
- en: '[PRE6]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'also, if `a` is true, we want to return `#t`, but that is exactly the value
    of `a`, so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果`a`为真，我们希望返回`#t`，但那恰好是`a`的值，所以：
- en: '[PRE7]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'and finally, we can get rid of the `if` (which is actually breaking the `if`
    abstraction, if we encode booleans in some other way):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以摆脱`if`（实际上是破坏了`if`的抽象，如果我们以其他方式编码布尔值）：
- en: '[PRE8]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Similarly, convince yourself that the definition of `and` is:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，让自己相信`and`的定义是：
- en: '[PRE9]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Schlac has to-Racket conversion forms for booleans too:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Schlac也有布尔值的to-Racket转换形式：
- en: '[PRE10]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: and
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE11]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A `not` function is quite simple — one alternative is to choose from true and
    false in the usual way:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`not`函数很简单 — 一种选择是按照通常的方式从真和假中选择：'
- en: '[PRE12]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'and another is to return a function that switches the inputs to an input boolean:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个是返回一个将输入切换为输入布尔值的函数：
- en: '[PRE13]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: which is the same as
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这与
- en: '[PRE14]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can now put numbers and booleans together: we define a `zero?` function.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将数字和布尔值结合起来：我们定义一个`zero?`函数。
- en: '[PRE15]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '(Good question: is this fast?)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: （好问题：这个快吗？）
- en: (Note that it is better to test that the value is explicitly `#t`, if we just
    use `(test (->bool ...))` then the test will work even if the expression in question
    evaluated to some bogus value.)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意，最好测试该值是否明确为`#t`，如果我们只使用`(test (->bool ...))`，那么即使所讨论的表达式评估为某些虚假值，测试也会成功。）
- en: 'The idea is simple — if `n` is the encoding of zero, it will return it’s second
    argument which is `#t`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法很简单 — 如果`n`是零的编码，它将返回它的第二个参数，即`#t`：
- en: '[PRE16]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'if `n` is an encoding of a bigger number, then it is a self-composition, and
    the function that we give it is one that always returns `#f`, no matter how many
    times it is self-composed. Try `2` for example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`n`是一个更大数字的编码，那么它是一个自我组合，我们给它的函数是一个无论自我组合多少次都会始终返回`#f`的函数。例如尝试`2`：
- en: '[PRE17]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, how about an encoding for compound values? A minimal approach is what
    we use in Racket — a way to generate pairs (`cons`), and encode lists as chains
    of pairs with a special value at the end (`null`). There is a natural encoding
    for pairs that we have previously seen — a pair is a function that expects a selector,
    and will apply that on the two values:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如何对复合值进行编码呢？我们在 Racket 中使用的是一种最小化的方法 —— 一种生成对（`cons`）的方法，并将列表编码为具有特殊值的对链（`null`
    结束）。我们之前见过对的自然编码 —— 一对是一个期望选择器的函数，并且将其应用于两个值：
- en: '[PRE18]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Or, equivalently:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，等价地：
- en: '[PRE19]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To extract the two values from a pair, we need to pass a selector that consumes
    two values and returns one of them. In our framework, this is exactly what the
    two boolean values do, so we get:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要从一对中提取两个值，我们需要传递一个选择器，该选择器消耗两个值并返回其中一个。在我们的框架中，这正是两个布尔值所做的，所以我们得到了：
- en: '[PRE20]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can even do this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以这样做：
- en: '[PRE21]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'or write a `list-ref` function:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 或者写一个 `list-ref` 函数：
- en: '[PRE22]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Note that we don’t need a recursive function for this: our encoding of natural
    numbers makes it easy to “iterate N times”. What we get with this encoding is
    essentially free natural-number recursion.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们不需要递归函数来实现这一点：我们对自然数的编码使得“迭代 N 次”变得容易。使用这种编码，我们得到的本质上是免费的自然数递归。
- en: 'We now need a special `null` value to mark list ends. This value should have
    the same number of arguments as a `cons` value (one: a selector/boolean function),
    and it should be possible to distinguish it from other values. We choose'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一个特殊的 `null` 值来标记列表的结束。这个值应该具有与 `cons` 值相同数量的参数（一个：选择器/布尔函数），并且应该能够将它与其他值区分开。我们选择
- en: '[PRE23]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Testing the list encoding:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 测试列表编码：
- en: '[PRE24]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And as with natural numbers and booleans, Schlac has built-in facility to convert
    encoded lists to Racket values, except that this requires specifying the type
    of values in a list so it’s a higher-order function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，与自然数和布尔值一样，Schlac 还具有将编码列表转换为 Racket 值的内置功能，只是这需要指定列表中值的类型，因此它是一个高阶函数：
- en: '[PRE25]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: which (“as usual”) can be written as
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以（“像往常一样”）写成
- en: '[PRE26]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can even do this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以这样做：
- en: '[PRE27]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Defining `null?` is now relatively easy (and it’s actually already used by the
    above `->listof` conversion). The following definition
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 `null?` 现在相对容易了（实际上它已经被上面的 `->listof` 转换所使用）。以下是定义：
- en: '[PRE28]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'works because if `x` is null, then it simply ignores its argument and returns
    `#t`, and if it’s a pair, then it uses the input selector, which always returns
    `#f` in its turn. Using some arbitrary `A` and `B`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工作是因为如果 `x` 是空的，那么它简单地忽略它的参数并返回 `#t`，如果它是一对，那么它就使用输入选择器，该选择器在其轮次中始终返回 `#f`。使用一些任意的
    `A` 和 `B`：
- en: '[PRE29]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We can use the Y combinator to create recursive functions — we can even use
    the rewrite rules facility that Schlac contains (the same one that we have previously
    seen):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Y 组合子创建递归函数 —— 我们甚至可以使用 Schlac 包含的重写规则功能（我们之前见过的那个）：
- en: '[PRE30]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'and using it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用它：
- en: '[PRE31]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'And to complete this, um, journey — we’re still missing subtraction. There
    are many ways to solve the problem of subtraction, and for a challenge try to
    come up with a solution yourself. One of the clearer solutions uses a simple idea
    — begin with a pair of two zeroes `<0,0>`, and repeat this transformation `n`
    times: `<a,b>` -> `<b,b+1>`. After `n` steps, we will have `<n-1,n>` — so we get:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个，嗯，旅程 — 我们还缺少减法。解决减法问题的方法有很多种，如果你想挑战自己，可以试着自己想出一个解决方案。其中一个较为清晰的解决方案使用了一个简单的思想
    — 从一对零 `<0,0>` 开始，并重复这个转换 `n` 次： `<a,b>` -> `<b,b+1>`。经过 `n` 步，我们会得到 `<n-1,n>`
    — 所以我们得到了：
- en: '[PRE32]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'And from this the road is short to general subtraction, `m`-`n` is simply `n`
    applications of `sub1` on `m`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里到一般的减法的道路很短，`m`-`n` 简单地是在 `m` 上应用 `sub1` `n` 次：
- en: '[PRE33]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We now have a normal-looking language, and we’re ready to do anything we want.
    Here are two popular examples:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个看起来很正常的语言，我们可以做任何我们想做的事情。以下是两个流行的例子：
- en: '[PRE34]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To get generalized arithmetic capability, Schlac has yet another built-in facility
    for translating Racket natural numbers into Church numerals:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得广义算术能力，Schlac 还有另一个内置设施，用于将 Racket 自然数转换为 Church 数：
- en: '[PRE35]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: … and to get to that frightening expression in the beginning, all you need to
    do is replace all definitions in the `fib` definition over and over again until
    you’re left with nothing but lambda expressions and applications, then reformat
    the result into some cute shape. For extra fun, you can look for immediate applications
    of lambda expressions and reduce them manually.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: … 要得到开头那可怕的表达式，你只需要一遍又一遍地替换`fib`定义中的所有定义，直到剩下的只有λ表达式和应用，然后将结果重新格式化成一些可爱的形状。为了增加乐趣，你可以寻找λ表达式的直接应用，并手动减少它们。
- en: 'All of this is in the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都在下面的代码中：
- en: '[PRE36]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
