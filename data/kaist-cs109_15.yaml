- en: Higher-order methods of collections
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合的高阶方法
- en: 'When working with collections, such as arrays or lists, we often use for-loops
    to perform some operation on all the elements of the collection:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理集合（如数组或列表）时，我们经常使用for循环对集合的所有元素执行某些操作：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The interesting part of this loop is the print statement. Modern programming
    languages make it possible to write code that concentrates on this part, not on
    the loop.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此循环的有趣部分是打印语句。现代编程语言使得可以编写集中在这部分而不是循环上的代码。
- en: Instead of writing a for-loop, we can use the forEach method of the collection.
    This is a higher-order method, that is, it takes a function object as its argument.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用集合的forEach方法而不是编写for循环。这是一个高阶方法，即它将函数对象作为其参数。
- en: 'The loop above is changed to this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的循环改为：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we learnt in the previous section, this can be simplified a bit, because
    the Scala compiler knows that the argument of forEach has to be a function object
    of type (String) -> Unit. Therefore we are allowed to omit the type of the argument.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中学到的，这可以简化一些，因为Scala编译器知道forEach的参数必须是类型为（String）-> Unit的函数对象。因此，我们可以省略参数的类型。
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Furthermore, there is only a single parameter, so we can replace it by the magic
    parameter name it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，只有一个参数，因此我们可以用魔术参数名 it 替换它。
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is another example where we use forEach to compute the sum of the elements
    of a collection:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个示例，我们使用forEach来计算集合元素的总和：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Again we used the shortcut syntax we used for the function literal x: Int ->
    sum += x.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用了我们用于函数字面值x：Int -> sum += x的快捷语法。
- en: Any, all, count, and find
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 任何，所有，计数和查找
- en: 'Often one goes through the elements of a collection to determine one of the
    following properties:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 经常需要遍历集合的元素以确定以下属性之一：
- en: Does the collection contain an element with a certain property?
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合是否包含具有某种属性的元素？
- en: Do all the elements have the property?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有元素都具有该属性吗？
- en: How many of the elements have the property?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多少元素具有该属性？
- en: Find an element with the property.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到具有该属性的元素。
- en: This can be done nicely using the higher-order methods any, all, count, and
    find. They all require a function object that maps the elements to Boolean.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以很好地使用高阶方法any，all，count和find来完成。它们都需要将元素映射到布尔值的函数对象。
- en: 'Here are some examples:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Filtering a collection
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 过滤集合
- en: Often we want to pick a subset of a collection consisting of all the elements
    that satisfy a certain condition. The higher-order methods filter and filterNot
    can do this. Again, they take as argument a function object that maps an element
    to a Boolean.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常希望从集合中挑选出满足特定条件的所有元素组成的子集。高阶方法filter和filterNot可以做到这一点。同样，它们的参数是将元素映射到布尔值的函数对象。
- en: 'Here are some basic examples, using the list from above:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些基本示例，使用上面的列表：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that filterNot does the same as filter, but reverses the sense of the condition.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，filterNot与filter执行相同的操作，但颠倒了条件的意义。
- en: 'Here are some interesting filters using our file of 113809 English words:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些使用我们的113809个英语单词文件的有趣过滤器：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Filtering is the essence of the Sieve of Erathosthenes, so it is natural that
    we can write it concisely using filter ([primes.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/40-lambda/primes.kts)):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤是埃拉托斯特尼筛法的本质，因此很自然地我们可以使用filter来简洁地编写它（[primes.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/40-lambda/primes.kts)）：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Transforming a collection
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 转换集合
- en: Another common operation is to create a new collection by somehow transforming
    every element of the existing collection.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的操作是通过某种方式转换现有集合的每个元素来创建新集合。
- en: 'This can be done using the higher-order function map. Its argument is a function
    object that maps the elements of the collection to its transformed value. The
    new collection can have the same or a different type:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以使用高阶函数map来完成。它的参数是将集合的元素映射到其转换值的函数对象。新集合可以具有相同或不同的类型：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Sorting a collection
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 对集合进行排序
- en: We have already seen that we can sort a list by using its sorted method. This
    always sorts the elements using the natural ordering of the element type.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，可以使用其sorted方法对列表进行排序。这总是使用元素类型的自然排序来对元素进行排序。
- en: If we want to sort with a different ordering, we can use the higher-order methods
    sortedWith (which returns a new list) or sortWith (which sorts the given mutable
    list). They take as an argument a java.util.Comparator object to handle the comparison
    between elements of the list.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要使用不同的排序方式进行排序，我们可以使用高阶方法sortedWith（返回一个新列表）或sortWith（对给定的可变列表进行排序）。它们接受一个java.util.Comparator对象作为参数，用于处理列表元素之间的比较。
- en: We can create a Comparator object from a function object that maps two elements
    \(a\) and \(b\) to an Int. The function should return a negative integer if element
    \(a\) should appear before element \(b\) in the desired sorted order, a positive
    integer if \(a\) should appear after \(b\), and zero if \(a\) and \(b\) are considered
    equal in the sorted order.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从将两个元素\(a\)和\(b\)映射到一个Int的函数对象中创建一个Comparator对象。如果元素\(a\)应该在所需的排序顺序中出现在元素\(b\)之前，则函数应返回负整数，如果\(a\)应该在\(b\)之后出现，则返回正整数，如果在排序顺序中认为\(a\)和\(b\)相等，则返回零。
- en: 'Here is an example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It sorts the elements of the words list in order of decreasing length (and then
    we display only the first 10 elements).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它按照单词列表中元素的长度降序排列（然后我们只显示前10个元素）。
- en: 'Note that every comparable type already has a method compareTo(a, b), which
    returns a positive integer if \(a > b\), a negative integer if \(a < b\), and
    zero if \(a = b\):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个可比较类型已经有一个compareTo(a, b)方法，如果\(a > b\)，则返回正整数，如果\(a < b\)，则返回负整数，如果\(a
    = b\)，则返回零：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can make use of this when building our own Comparator objects, for instance
    like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建我们自己的Comparator对象时，我们可以利用这一点，例如像这样：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Actually, we can do this even easier: There are methods sortedBy and sortBy
    that take a function object that maps the elements of the list to some other,
    comparable type R. The list is then sorted by the order on R:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们甚至可以更简单地做到这一点：有sortedBy和sortBy方法，它们接受一个将列表元素映射到另一个可比较类型R的函数对象。然后按照R上的顺序对列表进行排序：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We have sorted the words by their negative length, so the longest word comes
    first. If you find the negation a bit unlogical, you can instead write it like
    this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经按照它们的负长度对单词进行了排序，因此最长的单词排在第一位。如果您觉得否定有点不合逻辑，您可以像这样写：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is actually longer, but perhaps easier to understand.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个更长，但可能更容易理解。
- en: More higher-order methods
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更多高阶方法
- en: 'Kotlin collections have many more higher-order methods. Here are few examples:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin集合有许多更高阶的方法。以下是一些示例：
- en: 'findLast finds the last element in a list satisfying the given property (remember
    that find would find the first element):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: findLast找到满足给定属性的列表中的最后一个元素（请记住find会找到第一个元素）：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'retainAll is like filter, but it modifies the MutableList itself, throwing
    away all elements that do not satisfy the property (while filter always returns
    a new list):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: retainAll类似于filter，但它修改了MutableList本身，丢弃所有不满足属性的元素（而filter总是返回一个新列表）：
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'takeWhile and takeLastWhile return a new list with the elements from the beginning
    (or the end) of the given list that satisfy a property. Similary, dropWhile and
    dropLastWhile return the remaining elements:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: takeWhile和takeLastWhile返回一个新列表，其中包含满足属性的给定列表的元素的开头（或结尾）。类似地，dropWhile和dropLastWhile返回剩余的元素：
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'groupBy is a useful operation: It applies a function object to every element
    of the collection to obtain a "key" for that element. It then returns a map that
    maps these keys to lists of the original elements:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: groupBy是一个有用的操作：它将一个函数对象应用于集合的每个元素，以获得该元素的“键”。然后返回一个将这些键映射到原始元素列表的映射：
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'flatMap is a very powerful operation: It applies a given function object to
    every element of the collection. The result of the function object should be a
    list (or set, or array). The result of flatMap is a list combining all these lists
    in the order of the original list.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: flatMap是一个非常强大的操作：它将给定的函数对象应用于集合的每个元素。函数对象的结果应该是一个列表（或集合，或数组）。flatMap的结果是将所有这些列表按照原始列表的顺序组合成一个列表。
- en: fold and reduce or other powerful operations that go a bit beyond the scope
    of this section. Learn about them later!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: fold和reduce或其他一些强大的操作略微超出了本节的范围。稍后再了解它们！
