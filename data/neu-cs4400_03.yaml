- en: Intro to RacketTuesday, January 10th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Racket简介周二，1月10日
- en: 'General layout of the parts of Racket:'
  id: totrans-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Racket的各个部分的一般布局：
- en: The Racket language is (mostly) in the Scheme family, or more generally in the
    Lisp family;
  id: totrans-2
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Racket语言（大部分）属于Scheme家族，或更广泛地属于Lisp家族；
- en: 'Racket: the core language implementation (language and runtime), written in
    C;'
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Racket：核心语言实现（语言和运行时），用C编写；
- en: The actual language(s) that are available in Racket have lots of additional
    parts that are implemented in Racket itself;
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Racket中可用的实际语言有很多额外部分是用Racket本身实现的；
- en: 'GRacket: a portable Racket GUI extension, written in Racket too;'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GRacket：一个便携式的Racket GUI扩展，也是用Racket编写的；
- en: 'DrRacket: a GRacket application (also written in Racket);'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DrRacket：一个GRacket应用程序（也是用Racket编写的）；
- en: Our language(s)…
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的语言……
- en: 'Documentation: the Racket documentation is your friend (But beware that some
    things are provided in different forms from different places).'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档：Racket文档是你的朋友（但要注意，有些内容在不同的地方以不同的形式提供）。
- en: 'Side-note: “Goto Statement Considered Harmful”Tuesday, January 10th'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旁注：“Goto语句被认为有害”周二，1月10日
- en: A review of “Goto Statement Considered Harmful”, by E.W. DIJKSTRA
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对“Goto语句被认为有害”的评论，作者是E.W. 迪克斯特拉
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This paper tries to convince us that the well-known goto statement should be
    eliminated from our programming languages or, at least (since I don’t think that
    it will ever be eliminated), that programmers should not use it. It is not clear
    what should replace it. The paper doesn’t explain to us what would be the use
    of the `if` statement without a `goto` to redirect the flow of execution: Should
    all our postconditions consist of a single statement, or should we only use the
    arithmetic `if`, which doesn’t contain the offensive `goto`?'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本文试图说服我们，众所周知的`goto`语句应该从我们的编程语言中删除，或者至少（因为我认为它永远不会被删除），程序员不应该使用它。不清楚应该用什么来替代它。本文没有解释没有了`goto`如何使用`if`语句来重定向执行流的用途：我们的所有后置条件应该由一个单独的语句组成吗，或者我们应该只使用算术`if`，它不包含令人反感的`goto`？
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And how will one deal with the case in which, having reached the end of an alternative,
    the program needs to continue the execution somewhere else?
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果在执行完一个分支后，程序需要在其他地方继续执行，那么应该如何处理？
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The author is a proponent of the so-called “structured programming” style,
    in which, if I get it right, gotos are replaced by indentation. Structured programming
    is a nice academic exercise, which works well for small examples, but I doubt
    that any real-world program will ever be written in such a style. More than 10
    years of industrial experience with Fortran have proved conclusively to everybody
    concerned that, in the real world, the goto is useful and necessary: its presence
    might cause some inconveniences in debugging, but it is a de facto standard and
    we must live with it. It will take more than the academic elucubrations of a purist
    to remove it from our languages.'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作者是所谓的“结构化编程”风格的支持者，如果我理解正确，`goto`被缩进代替。结构化编程是一个很好的学术练习，在小例子中效果很好，但我怀疑任何真实世界的程序都会以这种方式编写。超过10年的Fortran工业经验已经明确向所有相关方证明，在现实世界中，`goto`是有用且必要的：它的存在可能会在调试中造成一些不便，但它是事实上的标准，我们必须接受它。要从我们的语言中删除它，需要更多比纯粹主义者的学术研究更多的东西。
- en: ''
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Publishing this would waste valuable paper: Should it be published, I am as
    sure it will go uncited and unnoticed as I am confident that, 30 years from now,
    the goto will still be alive and well and used as widely as it is today.'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 发布这篇文章会浪费宝贵的纸张：如果要发布，我确信它会被无人引用和注意到，就像我确信，30年后，`goto`语句仍然会活跃在编程中，并且像今天一样被广泛使用。
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Confidential comments to the editor: The author should withdraw the paper and
    submit it someplace where it will not be peer reviewed. A letter to the editor
    would be a perfect choice: Nobody will notice it there!'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对编辑的机密评论：作者应该撤回这篇文章，并将其提交到不会进行同行评审的地方。写一封给编辑的信将是一个完美的选择：在那里没有人会注意到它！
