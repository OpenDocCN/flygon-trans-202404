- en: Automated testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试
- en: Automated testing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试
- en: Writing tests is an important part of building any application. Testing your
    code helps you spot and avoid bugs, and makes it easier to refactor your code
    later without breaking functionality or introducing new problems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 编写测试是构建任何应用程序的重要部分。测试代码可以帮助您发现和避免错误，并使以后重构代码时更容易，而不会破坏功能或引入新问题。
- en: In this chapter you'll learn how to write both **unit tests** and **integration
    tests** that exercise your ASP.NET Core application. Unit tests are small tests
    that make sure a single method or a few lines of code are working properly. Integration
    tests (sometimes called **functional** tests) are larger tests that simulate real-world
    scenarios and exercise multiple layers or parts of your application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何编写既包括**单元测试**又包括**集成测试**的 ASP.NET Core 应用程序。单元测试是小型测试，用于确保单个方法或几行代码正常工作。集成测试（有时称为**功能**测试）是更大的测试，模拟真实场景并测试应用程序的多个层或部分。
- en: Unit testing
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit testing
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit tests are small, quick tests that check the behavior of a single method
    or chunk of logic. Instead of testing a whole group of classes, or the entire
    system (as integration tests do), unit tests rely on **mocking** or replacing
    the objects the method-under-test depends on.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是小型、快速的测试，用于检查单个方法或逻辑块的行为。与测试整个类组或整个系统（如集成测试所做的）不同，单元测试依赖于**模拟**或替换方法所依赖的对象。
- en: 'For example, the `TodoController` has two dependencies: an `ITodoItemService`
    and the `UserManager`. The `TodoItemService`, in turn, depends on the `ApplicationDbContext`.
    (The idea that you can draw a line from `TodoController` -> `TodoItemService`
    -> `ApplicationDbContext` is called a *dependency graph*).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`TodoController`有两个依赖项：`ITodoItemService`和`UserManager`。而`TodoItemService`又依赖于`ApplicationDbContext`。（你可以从`TodoController`
    -> `TodoItemService` -> `ApplicationDbContext`画一条线的概念被称为*依赖图*）。
- en: When the application runs normally, the ASP.NET Core dependency injection system
    injects each of those objects into the dependency graph when the `TodoController`
    or the `TodoItemService` is created.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序正常运行时，ASP.NET Core 依赖注入系统会在创建`TodoController`或`TodoItemService`时将这些对象注入到依赖图中。
- en: When you write a unit test, on the other hand, you'll manually inject mock or
    test-only versions of those dependencies. This means you can isolate just the
    logic in the class or method you are testing. (If you're testing a service, you
    don't want to also be accidentally writing to your database!)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，当您编写单元测试时，您将手动注入模拟或仅供测试使用的这些依赖项。这意味着您可以仅隔离您正在测试的类或方法中的逻辑。（如果您正在测试一个服务，您不希望意外地写入数据库！）
- en: Create a test project
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个测试项目
- en: It's a common practice to create a separate project for your tests, to keep
    things clean and organized. The new test project should live in a directory that's
    next to (not inside) your main project's directory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持项目的整洁和有序，将测试单独创建一个项目是一种常见做法。新的测试项目应该位于与主项目目录相邻（而非内部）的目录中。
- en: 'If you''re currently in your project directory, `cd` up one level. (This directory
    will also be called `AspNetCoreTodo`). Then use these commands to scaffold a new
    test project:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您当前在项目目录中，向上`cd`一级。（此目录也将被称为`AspNetCoreTodo`）。然后使用以下命令创建一个新的测试项目：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: xUnit.NET is a popular test framework for .NET code that can be used to write
    both unit and integration tests. Like everything else, it's a set of NuGet packages
    that can be installed in any project. The `dotnet new xunit` template already
    includes everything you need.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: xUnit.NET 是用于 .NET 代码的流行测试框架，可用于编写单元测试和集成测试。与其他一切一样，它是一组可以安装在任何项目中的 NuGet 包。`dotnet
    new xunit`模板已经包含了您所需的一切。
- en: 'Your directory structure should now look like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的目录结构应该如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Since the test project will use the classes defined in your main project, you''ll
    need to add a reference to the main project:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于测试项目将使用主项目中定义的类，因此您需要向主项目添加引用：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Delete the `UnitTest1.cs` file that's automatically created. You're ready to
    write your first test.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 删除自动创建的`UnitTest1.cs`文件。您已准备好编写第一个测试了。
- en: Write a service test
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写一个服务测试
- en: 'Take a look at the logic in the `AddItemAsync` method of the `TodoItemService`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`TodoItemService`的`AddItemAsync`方法中的逻辑：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This method makes a number of decisions or assumptions about the new item before
    it actually saves it to the database:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在将新项目保存到数据库之前，此方法会对新项目做出一些决定或假设：
- en: The `OwnerId` property should be set to the user's ID
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OwnerId`属性应设置为用户的ID'
- en: New items should always be incomplete (`IsDone = false`)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新项目应始终为未完成状态（`IsDone = false`）
- en: The title of the new item should be copied from `newItem.Title`
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新项目的标题应从`newItem.Title`复制
- en: New items should always be due 3 days from now
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新项目应始终在3天后到期
- en: These types of decisions made by your code are called *business logic*, because
    it's logic that relates to the purpose or "business" of your application. Other
    examples of business logic include things like calculating a total cost based
    on product prices and tax rates, or checking whether a player has enough points
    to level up in a game.
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你的代码所做出的这些决定被称为*业务逻辑*，因为它与你的应用程序的目的或"业务"有关的逻辑。业务逻辑的其他示例包括根据产品价格和税率计算总费用，或检查玩家是否有足够的点数在游戏中升级。
- en: These decisions make sense, and it also makes sense to have a test that ensures
    that this logic doesn't change down the road. (Imagine if you or someone else
    refactored the `AddItemAsync` method and forgot about one of these assumptions.
    It might be unlikely when your services are simple, but it becomes important to
    have automated checks as your application becomes more complicated.)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些决定是有意义的，而且也有必要编写一个测试以确保这个逻辑在未来不会改变。（想象一下，如果你或其他人重构了`AddItemAsync`方法，并且忘记了其中一个假设。当你的服务很简单时可能不太可能，但是当你的应用程序变得更加复杂时，拥有自动化检查变得非常重要。）
- en: 'To write a unit test that will verify the logic in the `TodoItemService`, create
    a new class in your test project:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写一个单元测试来验证`TodoItemService`中的逻辑，可以在测试项目中创建一个新类：
- en: '**`AspNetCoreTodo.UnitTests/TodoItemServiceShould.cs`**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**`AspNetCoreTodo.UnitTests/TodoItemServiceShould.cs`**'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `[Fact]` attribute comes from the xUnit.NET package, and it marks this method
    as a test method.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`[Fact]`属性来自xUnit.NET包，它标记了这个方法作为一个测试方法。'
- en: There are many different ways of naming and organizing tests, all with different
    pros and cons. I like postfixing my test classes with `Should` to create a readable
    sentence with the test method name, but feel free to use your own style!
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有许多不同的测试命名和组织方式，各有利弊。我喜欢在我的测试类中加上`Should`后缀，以创建一个可读的句子与测试方法名，但请随意使用你自己的风格！
- en: The `TodoItemService` requires an `ApplicationDbContext`, which is normally
    connected to your development or live database. You won't want to use that for
    tests. Instead, you can use Entity Framework Core's in-memory database provider
    in your test code. Since the entire database exists in memory, it's wiped out
    every time the test is restarted. And, since it's a proper Entity Framework Core
    provider, the `TodoItemService` won't know the difference!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`TodoItemService`需要一个`ApplicationDbContext`，通常连接到你的开发或生产数据库。你不希望在测试中使用它。相反，你可以在测试代码中使用Entity
    Framework Core的内存数据库提供程序。由于整个数据库存在于内存中，每次重新启动测试时都会被清除。而且，由于它是一个合适的Entity Framework
    Core提供程序，`TodoItemService`不会知道区别！'
- en: 'Use a `DbContextOptionsBuilder` to configure the in-memory database provider,
    and then make a call to `AddItem`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`DbContextOptionsBuilder`配置内存数据库提供程序，然后调用`AddItem`：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The last line creates a new to-do item called `Testing?`, and tells the service
    to save it to the (in-memory) database. To verify that the business logic ran
    correctly, retrieve the item:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行创建了一个名为`Testing?`的新待办事项，并告诉服务将其保存到（内存中的）数据库。为了验证业务逻辑是否正确运行，检索该项：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The first verification step is a sanity check: there should never be more than
    one item saved to the in-memory database. Assuming that''s true, the test retrieves
    the saved item with `FirstAsync` and then asserts that the properties are set
    to the expected values.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个验证步骤是一个健全性检查：不应该有多个项目保存到内存数据库中。假设这是真的，测试使用`FirstAsync`检索保存的项目，然后断言属性设置为预期值。
- en: Asserting a datetime value is a little tricky, since comparing two dates for
    equality will fail if even the millisecond components are different. Instead,
    the test checks that the `DueAt` value is less than a second away from the expected
    value.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 断言datetime值有点棘手，因为即使毫秒组件不同，比较两个日期是否相等也会失败。相反，测试检查`DueAt`值是否与预期值相差不到一秒。
- en: 'Both unit and integration tests typically follow the AAA (Arrange-Act-Assert)
    pattern: objects and data are set up first, then some action is performed, and
    finally the test checks (asserts) that the expected behavior occurred.'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 单元测试和集成测试通常遵循AAA（安排-执行-断言）模式：首先设置对象和数据，然后执行某些操作，最后测试检查（断言）预期的行为是否发生。
- en: 'Here''s the final version of the `AddNewItem` test:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`AddNewItem`测试的最终版本：
- en: '**`AspNetCoreTodo.UnitTests/TodoItemServiceShould.cs`**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**`AspNetCoreTodo.UnitTests/TodoItemServiceShould.cs`**'
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Run the test
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'On the terminal, run this command (make sure you''re still in the `AspNetCoreTodo.UnitTests`
    directory):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端上，运行这个命令（确保你仍在`AspNetCoreTodo.UnitTests`目录中）：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `test` command scans the current project for tests (marked with `[Fact]`
    attributes in this case), and runs all the tests it finds. You''ll see an output
    similar to:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`test`命令会扫描当前项目中的测试（在这种情况下标记为`[Fact]`属性），并运行找到的所有测试。你会看到类似于以下输出：'
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You now have one test providing test coverage of the `TodoItemService`. As
    an extra-credit challenge, try writing unit tests that ensure:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有一个测试覆盖`TodoItemService`。作为额外挑战，尝试编写确保的单元测试：
- en: '`MarkDoneAsync` returns false if it''s passed an ID that doesn''t exist'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果传递一个不存在的ID，`MarkDoneAsync`会返回false
- en: '`MarkDoneAsync` returns true when it makes a valid item as complete'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使一个有效项目完成时，`MarkDoneAsync`会返回true
- en: '`GetIncompleteItemsAsync` returns only the items owned by a particular user'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetIncompleteItemsAsync`仅返回特定用户拥有的项目'
- en: Integration testing
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: Integration testing
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成测试
- en: Compared to unit tests, integration tests exercise the whole application stack
    (routing, controllers, services, database). Instead of isolating one class or
    component, integration tests ensure that all of the components of your application
    are working together properly.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与单元测试相比，集成测试涵盖整个应用程序堆栈（路由、控制器、服务、数据库）。集成测试不是隔离一个类或组件，而是确保应用程序的所有组件正常协同工作。
- en: Integration tests are slower and more involved than unit tests, so it's common
    for a project to have lots of unit tests but only a handful of integration tests.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试比单元测试更慢、更复杂，因此一个项目通常会有很多单元测试，但只有少数几个集成测试。
- en: In order to test the whole stack (including controller routing), integration
    tests typically make HTTP calls to your application just like a web browser would.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试整个堆栈（包括控制器路由），集成测试通常会像网页浏览器一样向应用程序发出HTTP调用。
- en: 'To write integration tests that make HTTP requests, you could manually start
    your application run tests that make requests to `http://localhost:5000` (and
    hope the app is still running). ASP.NET Core provides a nicer way to host your
    application for testing, however: using the `TestServer` class. `TestServer` can
    host your application for the duration of the test, and then stop it automatically
    when the test is complete.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写进行HTTP请求的集成测试，你可以手动启动应用程序运行请求到`http://localhost:5000`的测试（希望应用程序仍在运行）。然而，ASP.NET
    Core提供了一个更好的方法来为测试托管你的应用程序：使用`TestServer`类。`TestServer`可以在测试期间托管你的应用程序，然后在测试完成时自动停止它。
- en: Create a test project
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个测试项目
- en: You could keep your unit tests and integration tests in the same project (feel
    free to do so), but for the sake of completeness, I'll show you how to create
    a separate project for your integration tests.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将单元测试和集成测试放在同一个项目中（随意这样做），但为了完整起见，我将向你展示如何为集成测试创建一个单独的项目。
- en: 'If you''re currently in your project directory, `cd` up one level to the base
    `AspNetCoreTodo` directory. Use these commands to scaffold a new test project:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你当前在项目目录中，`cd`到基本的`AspNetCoreTodo`目录。使用以下命令创建一个新的测试项目：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Your directory structure should now look like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的目录结构应该是这样的：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Since the test project will use the classes defined in your main project, you''ll
    need to add a reference to the main project:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于测试项目将使用主项目中定义的类，所以你需要向主项目添加一个引用：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You''ll also need to add the `Microsoft.AspNetCore.TestHost` NuGet package:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要添加`Microsoft.AspNetCore.TestHost` NuGet包：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Delete the `UnitTest1.cs` file that's created by `dotnet new`. You're ready
    to write an integration test.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 删除由`dotnet new`创建的`UnitTest1.cs`文件。你已经准备好编写集成测试了。
- en: Write an integration test
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写一个集成测试
- en: 'There are a few things that need to be configured on the test server before
    each test. Instead of cluttering the test with this setup code, you can factor
    out this setup to a separate class. Create a new class called `TestFixture`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个测试之前，测试服务器需要配置一些东西。你可以将这些设置代码提取到一个单独的类中，而不是在测试中混杂这些设置代码。创建一个名为`TestFixture`的新类：
- en: '**`AspNetCoreTodo.IntegrationTests/TestFixture.cs`**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**`AspNetCoreTodo.IntegrationTests/TestFixture.cs`**'
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This class takes care of setting up a `TestServer`, and will help keep the tests
    themselves clean and tidy.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类负责设置一个`TestServer`，并有助于保持测试本身的整洁。
- en: If you configured Facebook login in the *Security and identity* chapter., it's
    necessary to add fake values for the Facebook app ID and secret (in the `ConfigureAppConfiguration`
    block above). This is because the test server doesn't have access to the values
    in the Secrets Manager. Adding some fake values in this fixture class will prevent
    an error when the test server starts up.
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你在*安全和身份*章节中配置了Facebook登录，那么有必要为Facebook应用程序的ID和密钥添加假值（在上面的`ConfigureAppConfiguration`块中）。这是因为测试服务器无法访问Secrets
    Manager中的值。在这个Fixture类中添加一些假值将防止测试服务器启动时出错。
- en: 'Now you''re (really) ready to write an integration test. Create a new class
    called `TodoRouteShould`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你（真的）准备好写一个集成测试了。创建一个名为`TodoRouteShould`的新类：
- en: '**`AspNetCoreTodo.IntegrationTests/TodoRouteShould.cs`**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**`AspNetCoreTodo.IntegrationTests/TodoRouteShould.cs`**'
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This test makes an anonymous (not-logged-in) request to the `/todo` route and
    verifies that the browser is redirected to the login page.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试发出一个匿名（未登录）请求到`/todo`路由，并验证浏览器是否被重定向到登录页面。
- en: 'This scenario is a good candidate for an integration test, because it involves
    multiple components of the application: the routing system, the controller, the
    fact that the controller is marked with `[Authorize]`, and so on. It''s also a
    good test because it ensures you won''t ever accidentally remove the `[Authorize]`
    attribute and make the to-do view accessible to everyone.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情景非常适合作为一个集成测试的候选项，因为它涉及到应用程序的多个组件：路由系统、控制器、控制器标记为`[Authorize]`等等。这也是一个很好的测试，因为它确保你永远不会意外地移除`[Authorize]`属性，使得待办事项视图对所有人都可访问。
- en: 'Run the test in the terminal with `dotnet test`. If everything''s working right,
    you''ll see a success message:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中使用`dotnet test`运行测试。如果一切正常，你将会看到一个成功的消息：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Wrap up
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Testing is a broad topic, and there's much more to learn. This chapter doesn't
    touch on UI testing or testing frontend (JavaScript) code, which probably deserve
    entire books of their own. You should, however, have the skills and base knowledge
    you need to practice and learn more about writing tests for your own applications.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是一个广泛的话题，还有很多东西可以学习。本章没有涉及UI测试或测试前端（JavaScript）代码，这可能值得单独写一整本书。不过，你应该具备练习和学习为自己的应用程序编写测试的技能和基础知识。
- en: As always, the ASP.NET Core documentation ([https://docs.asp.net](https://docs.asp.net))
    and StackOverflow are good resources for learning more and finding answers when
    you get stuck.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，ASP.NET Core文档([https://docs.asp.net](https://docs.asp.net))和StackOverflow都是学习更多知识和在遇到困难时寻找答案的好资源。
