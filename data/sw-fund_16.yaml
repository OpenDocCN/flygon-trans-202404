- en: ExtractionExtracting ML from Coq
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Coq中提取ML
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: (* DROP *)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: (* DROP *)
- en: '[PRE1]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Extraction Language Ocaml.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 提取语言Ocaml。
- en: '[PRE2]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Require Import Coq.Arith.Arith.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Require Import Coq.Arith.Arith.
- en: Require Import Coq.Arith.EqNat.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Require Import Coq.Arith.EqNat.
- en: Require Import ImpCEvalFun.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Require Import ImpCEvalFun.
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Extraction "imp1.ml" ceval_step.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Extraction "imp1.ml" ceval_step.
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Controlling Extraction of Specific Types
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制特定类型的提取
- en: We can tell Coq to extract certain Inductive definitions to
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以告诉Coq将某些归纳定义提取到
- en: specific OCaml types.  For each one, we must say
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定的OCaml类型。对于每一个，我们必须说明
- en: how the Coq type itself should be represented in OCaml, and
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Coq类型本身在OCaml中应该如何表示，以及
- en: how each constructor should be translated.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个构造函数应如何翻译。
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Also, for non-enumeration types (where the constructors take
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，对于非枚举类型（其中构造函数采用
- en: arguments), we give an OCaml expression that can be used as a
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数），我们给出一个可以用作
- en: '"recursor" over elements of the type.  (Think Church numerals.)'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对类型的元素进行“递归器”。（想想教堂数。）
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can also extract defined constants to specific OCaml terms or
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还可以将定义的常量提取为特定的OCaml术语或
- en: operators.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运算符。
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Important: It is entirely *your responsibility* to make sure that'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示：完全是*你的责任*确保
- en: the translations you're proving make sense.  For example, it might
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您正在证明的翻译是否有意义。例如，可能
- en: be tempting to include this one
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诱人的是包括这一个
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Extraction "imp2.ml" ceval_step.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Extraction "imp2.ml" ceval_step.
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A Complete Example
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个完整的例子
- en: To use our extracted evaluator to run Imp programs, all we need to
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用我们提取的评估器运行Imp程序，我们只需要
- en: add is a tiny driver program that calls the evaluator and prints
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: add是一个调用评估器并打印的小型驱动程序
- en: out the result.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果。
- en: For simplicity, we'll print results by dumping out the first four
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了简单起见，我们将通过倾倒出前四个
- en: memory locations in the final state.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终状态中的内存位置。
- en: Also, to make it easier to type in examples, let's extract a
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，为了更容易输入示例，让我们提取一个
- en: parser from the ImpParser Coq module.  To do this, we need a few
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从ImpParser Coq模块中提取解析器。为此，我们需要一些
- en: magic declarations to set up the right correspondence between Coq
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置Coq之间正确对应的魔术声明
- en: strings and lists of OCaml characters.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: OCaml字符的字符串和列表。
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We also need one more variant of booleans.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还需要另一种布尔值的变体。
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The extraction is the same as always.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提取与往常一样。
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now let's run our generated Imp evaluator.  First, have a look at
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在让我们运行生成的Imp评估器。首先，看一看
- en: impdriver.ml.  (This was written by hand, not extracted.)
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: impdriver.ml。（这是手写的，而不是提取的。）
- en: Next, compile the driver together with the extracted code and
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，将驱动程序与提取的代码一起编译并
- en: execute it, as follows.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行它，如下所示。
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: (The -w flags to ocamlc are just there to suppress a few
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （ocamlc的-w标志只是为了抑制一些
- en: spurious warnings.)
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不必要的警告。）
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: (* /DROP *)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: (* /DROP *)
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
