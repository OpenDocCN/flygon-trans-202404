- en: Automate Your Coding Standard
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化你的编码标准
- en: Automate Your Coding Standard
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化你的编码标准
- en: You've probably been there too. At the beginning of a project, everybody has
    lots of good intentions — call them "new project's resolutions." Quite often,
    many of these resolutions are written down in documents. The ones about code end
    up in the project's coding standard. During the kick-off meeting, the lead developer
    goes through the document and, in the best case, everybody agrees that they will
    try to follow them. Once the project gets underway, though, these good intentions
    are abandoned, one at a time. When the project is finally delivered the code looks
    like a mess, and nobody seems to know how it came to be this way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也有过这种经历。在项目开始时，每个人都有很多良好的意图——把它们称为“新项目的决议”。很多时候，这些决议会被记录在文件中。关于代码的决议最终会出现在项目的编码标准中。在启动会议上，主要开发人员会浏览文档，最好的情况是，每个人都同意他们将尽量遵循这些决议。然而，一旦项目启动，这些良好的意图就会一个接一个地被抛弃。当项目最终交付时，代码看起来一团糟，似乎没有人知道它是怎么变成这样的。
- en: When did things go wrong? Probably already at the kick-off meeting. Some of
    the project members didn't pay attention. Others didn't understand the point.
    Worse, some disagreed and were already planning their coding standard rebellion.
    Finally, some got the point and agreed but, when the pressure in the project got
    too high, they had to let something go. Well-formatted code doesn't earn you points
    with a customer that wants more functionality. Furthermore, following a coding
    standard can be quite a boring task if it isn't automated. Just try to indent
    a messy class by hand to find out for yourself.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 事情什么时候开始出错了？可能是在启动会议上就已经出错了。一些项目成员没有注意到。其他人不理解其中的要点。更糟糕的是，一些人不同意并已经在计划他们的编码标准叛乱。最后，一些人理解了并同意了，但是当项目压力过大时，他们不得不放弃一些东西。格式良好的代码不会给希望获得更多功能的客户赢得分数。此外，如果没有自动化，遵循编码标准可能会是一项相当无聊的任务。试着手动缩进一个凌乱的类，看看吧。
- en: But if it's such a problem, why is that we want to have a coding standard in
    the first place? One reason to format the code in a uniform way is so that nobody
    can "own" a piece of code just by formatting it in his or her private way. We
    may want to prevent developers using certain anti-patterns, in order to avoid
    some common bugs. In all, a coding standard should make it easier to work in the
    project, and maintain development speed from the beginning to the end. It follows
    then that everybody should agree on the coding standard too — it does not help
    if one developer uses three spaces to indent code, and another one four.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果这是一个问题，为什么我们首先要有编码标准呢？统一格式化代码的一个原因是为了没有人可以通过以自己的私人方式格式化代码来“拥有”代码的一部分。我们可能希望防止开发人员使用某些反模式，以避免一些常见的错误。总之，编码标准应该使项目中的工作更加容易，并从开始到结束保持开发速度。因此，每个人都应该对编码标准达成一致意见——如果一个开发人员使用三个空格来缩进代码，另一个开发人员使用四个空格，那就没有帮助了。
- en: 'There exists a wealth of tools that can be used to produce code quality reports
    and to document and maintain the coding standard, but that isn''t the whole solution.
    It should be automated and enforced where possible. Here are a few examples:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 存在大量工具可用于生成代码质量报告，并记录和维护编码标准，但这并不是全部解决方案。应尽可能自动化并强制执行。以下是一些示例：
- en: Make sure code formatting is part of the build process, so that everybody runs
    it automatically every time they compile the code.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保代码格式化是构建过程的一部分，这样每次编译代码时都会自动运行它。
- en: Use static code analysis tools to scan the code for unwanted anti-patterns.
    If any are found, break the build.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态代码分析工具扫描代码中的不良反模式。如果发现任何问题，就中断构建过程。
- en: Learn to configure those tools so that you can scan for your own, project-specific
    anti-patterns.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会配置这些工具，这样你就可以扫描自己的、特定于项目的反模式。
- en: Do not only measure test coverage, but automatically check the results too.
    Again, break the build if test coverage is too low.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不仅要测量测试覆盖率，还要自动检查结果。同样地，如果测试覆盖率太低，就中断构建过程。
- en: Try to do this for everything that you consider important. You won't be able
    to automate everything you really care about. As for the things that you can't
    automatically flag or fix, consider them to be a set of guidelines supplementary
    to the coding standard that is automated, but accept that you and your colleagues
    may not follow them as diligently.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量对你认为重要的每一项都这样做。你无法自动化你真正关心的一切。至于那些无法自动标记或修复的事情，把它们视为自动化的编码标准的一套补充准则，但接受你和你的同事可能不会如此认真地遵守它们。
- en: Finally, the coding standard should be dynamic rather than static. As the project
    evolves, the needs of the project change, and what may have seemed smart in the
    beginning, isn't necessarily smart a few months later.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，编码标准应该是动态的，而不是静态的。随着项目的发展，项目的需求也会发生变化，开始时看起来聪明的东西，几个月后不一定还是聪明的。
- en: By [Filip van Laenen](http://programmer.97things.oreilly.com/wiki/index.php/Filip_van_Laenen)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Filip van Laenen](http://programmer.97things.oreilly.com/wiki/index.php/Filip_van_Laenen)提供。
