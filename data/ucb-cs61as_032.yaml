- en: Procedures as Black-Box Abstractions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过程作为黑盒抽象
- en: Procedures as Abstractions
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过程作为抽象
- en: So far we have defined functions that do a single computation by themselves
    (such as `square`, `fib,` and `factorial`). You can create a much more complex
    function by combining different functions, each handling a subproblem of the original
    problem. We will build on an example of such function in this section and explore
    the idea of 'functions as [abstractions](https://edge.edx.org/courses/uc-berkeley/cs61as-1x/SICP/wiki
    /cs61as-1x/abstraction/)'.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经定义了单独执行单个计算的函数（例如`square`，`fib`和`factorial`）。通过组合不同的函数，每个函数处理原始问题的一个子问题，您可以创建一个更复杂的函数。我们将在本节中构建一个此类函数的示例，并探讨“函数作为[抽象](https://edge.edx.org/courses/uc-berkeley/cs61as-1x/SICP/wiki/cs61as-1x/abstraction/)”的概念。
- en: 'Extended Example: Largest Square'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展示例：最大正方形
- en: Charlie has a large amount of block (not bar) chocolates, and he wants to show
    it off to his friends by organizing those blocks in the largest possible square
    arrangement! So let's say that Charlie has 13 blocks of chocolate. Then the largest
    square arrangement is a 3x3 = 9 (shown left), with 4 leftovers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 查理有大量的方块（而不是条形）巧克力，他想通过将这些方块组织成尽可能大的正方形排列来向朋友展示！所以假设查理有 13 块巧克力。然后最大的正方形排列是
    3x3 = 9（左图所示），剩下 4 块。
- en: '![chocolate square](../Images/d4f23e4eb6e1b9f02a069308c23da42f.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![chocolate square](../Images/d4f23e4eb6e1b9f02a069308c23da42f.jpg)'
- en: 'Charlie wonders ''how big can the side of my square be given a certain amount
    of chocolate blocks?'' We can represent this question as a function, `(largest-square
    total guess)`. The function `largest-square` takes two arguments: `total`, which
    represents how many chocolate blocks Charlie has (in the example above, `total`
    is 13), and `guess`, which represents your initial guess on what''s the largest
    side you can have. This function will output the largest side your chocolate square
    can have (in this case, 3). We will break this function into subproblems, and
    put all the pieces together in the rest of this section.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 查理想知道“在给定一定数量的巧克力块的情况下，我的正方形的边可以有多大？”我们可以将这个问题表示为一个函数，`(largest-square total
    guess)`。函数`largest-square`接受两个参数：`total`，表示查理有多少块巧克力（在上面的示例中，`total`为13），以及`guess`，表示您对最大边长的初始猜测。此函数将输出您的巧克力正方形可以拥有的最大边长（在本例中为3）。我们将把这个函数分解为子问题，并在本节的其余部分组合所有这些部分。
- en: 'Largest Square: Overview'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最大正方形：概述
- en: 'One thing that may seem odd is the redundant argument `guess`. You can write
    a function that does the same thing with just the `total`argument. We included
    `guess` to add an extra layer of complexity to the question. . Consider `guess`
    to be Charlie''s estimate on how large he thinks his side can be. In our original
    example of 13 blocks of chocolate, suppose Charlie takes a `guess` that the maximum
    side is 2:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可能看起来奇怪的一件事是多余的参数`guess`。您可以编写一个只使用`total`参数完成相同工作的函数。我们包含了`guess`以增加问题的复杂性。将`guess`视为查理对他认为自己的边可以有多大的估计。在我们的原始示例中，有
    13 块巧克力，假设查理认为最大边长为 2：
- en: '| guess | leftover | next guess |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| guess | leftover | next guess |'
- en: '| 2 | 13-4= 9 | 2+1= 3 |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 13-4= 9 | 2+1= 3 |'
- en: '| 3 | 13-9= 4 | 3+1= 4 |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 13-9= 4 | 3+1= 4 |'
- en: '| 4 | 13-16= -3 | 4+1= 5 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 13-16= -3 | 4+1= 5 |'
- en: For each function call on `largest-square` like `(largest-square 13 2)`, we
    are going to check if the current guess (in this case 2) is good enough. How do
    we check if our guess is good enough? It is good enough if our next guess uses
    more chocolate blocks than we have available. If we can guess better, then we
    use the next guess and call `largest-square` recursively.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每次对`largest-square`的函数调用，如`(largest-square 13 2)`，我们将检查当前的猜测（在本例中为2）是否足够好。我们如何检查我们的猜测是否足够好？如果我们的下一个猜测使用的巧克力块多于我们有的可用的数量，则猜测足够好。如果我们可以做出更好的猜测，那么我们将使用下一个猜测并递归调用`largest-square`。
- en: 'Largest Square: Skeleton Code'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最大正方形：骨架代码
- en: Given our intuition in the last page, we can formalize our function definition.
    If your `guess` is good enough, return your `guess`. If you can have a better
    `guess`, call `largest-square` with a better `guess`
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们在上一页的直觉，我们可以规范化我们的函数定义。如果您的`guess`足够好，请返回您的`guess`。如果您可以有更好的`guess`，请使用更好的`guess`调用`largest-square`
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you type the above definition as is (without defining 'good-enough?' and
    'improve-guess', what will happen?If afterwards you type (largest-square 13 2),
    what will happen?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按原样输入上述定义（没有定义'good-enough?'和'improve-guess'），会发生什么？如果之后您键入（largest-square
    13 2），会发生什么？
- en: '*"Wait wait, you just defined a function, but it calls other functions that
    aren''t defined yet! We haven''t defined ''good-enough?'' or ''improve-guess''!
    "*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*"等等，你刚刚定义了一个函数，但它调用了其他尚未定义的函数！我们还没有定义''good-enough?''或''improve-guess''！"*'
- en: Yup, the definitions of the functions inside are incomplete, but notice that
    we (the programmers) can **understand** what the function is doing! We have broken
    down the problem of finding 'largest-square' into some small problems like 'is
    it close enough?' and 'improve our guess'. We could've broken the code in a different
    way, like in every 3 lines, every 5 lines but then each subproblem will not have
    an *identifiable* task. Breaking them to a coherent, identifiable task is crucial.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，内部函数的定义是不完整的，但请注意，我们（程序员）可以**理解**函数在做什么！我们已经将找到'largest-square'的问题分解为一些小问题，比如'足够接近吗？'和'改进我们的猜测'。我们可以以不同的方式分解代码，比如每3行，每5行，但是每个子问题将没有一个*可识别*的任务。将它们分解为一个连贯的、可识别的任务是至关重要的。
- en: This will be a key idea that we will visit again in the end, but first let's
    finish the definition.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我们最后会再次讨论的一个关键思想，但首先让我们完成定义。
- en: 'Largest Squares: Subproblems'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最大方块：子问题
- en: Time to do the neccessary work to make the function work!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候做必要的工作让函数正常工作了！
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'QUESTION:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：
- en: We want to define the function `good-enough?` that accepts two inputs, `total`,
    the total number of chocolate blocks you have, and `guess` which represents your
    current guess. It should report either `#t` or `#f` depending on whether the next
    integer will be larger than `total`
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要定义接受两个输入`total`（你拥有的巧克力块的总数）和`guess`（代表你当前的猜测）的函数`good-enough?`。它应该根据下一个整数是否大于`total`来报告`#t`或`#f`
- en: '`(good-enough? 13 3)` Should return `#t`. The next guess is 3+1=4 and will
    take 16 squares which is above 13, the total'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`(good-enough? 13 3)` 应返回 `#t`。下一个猜测是3+1=4，需要16个方块，超过了13，总数'
- en: '`(good-enough? 13 2)` Should return `#f`. The next guess is 2+1=3 and will
    take 9 squares which is still below 13, the total'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`(good-enough? 13 2)` 应返回 `#f`。下一个猜测是2+1=3，需要9个方块，仍然低于13，总数'
- en: '`(good-enough? 100 11)` Should return `#t`. The next guess is 11+1=12 and will
    take 144 squares which is above 100, the total'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`(good-enough? 100 11)` 应返回 `#t`。下一个猜测��11+1=12，需要144个方块，超过了100，总数'
- en: '`(good-enough? 100 10)` Should return `#t`. The next guess is 10+1=11 and will
    take 121 squares which is above 100, the total'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`(good-enough? 100 10)` 应返回 `#t`。下一个猜测是10+1=11，需要121个方块，超过了100，总数'
- en: '`(good-enough? 100 9)` Should return `#f`. The next guess is 9+1=10 and will
    take 100 squares which is equal to 100, the total'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`(good-enough? 100 9)` 应返回 `#f`。下一个猜测是9+1=10，需要100个方块，总共是100'
- en: 'Choose what code should fill in the blank:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 选择应填入空白处的代码：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <ans text="(< total (next-guess guess))" explanation="We have to square the
    next guess."></ans>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <ans text="(< total (next-guess guess))" explanation="我们必须对下一个猜测进行平方。"></ans>
- en: Next, we the function next-guess that accepts your current guess, and returns
    a new number to try next
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义接受你当前猜测的函数`next-guess`，并返回一个新的数字以供尝试下一个。
- en: '`(next-guess 1)` ;;Should return 2'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`(next-guess 1)` ;;应返回2'
- en: '`(next-guess 3)` ;;Should return 4'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`(next-guess 3)` ;;应返回4'
- en: 'Choose what code should fill in the blank:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 选择应填入空白处的代码：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Functions as Abstractions
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数作为抽象
- en: What can we learn from the square chocolate example? Remember that when we first
    *only* define `largest-square`, we can understand what the procedure is doing,
    without actually needing to know how `good-enough?` or `next-guess` is implemented.
    We can consider these functions to be abstracted for us; we know what it will
    output but we don't care ** how ** it is implemented. As long as they do the right
    thing, we are happy!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从方形巧克力的例子中可以学到什么？记住，当我们*仅仅*定义`largest-square`时，我们可以理解过程在做什么，而不需要知道`good-enough?`或`next-guess`是如何实现的。我们可以将这些函数视为抽象；我们知道它们会输出什么，但我们不关心**如何**实现。只要它们做正确的事情，我们就满意！
- en: You can also apply this in real life. When we turn on the TV, we never consider
    "Oh the TV works because we shoot electron across the screen which are guided
    by electromagnets which allows us to view stuff!". We usually think more along
    the lines of "If I press this button, I can watch movies". We don't need to know
    how the TV works to use it; its implementation is abstracted away for us
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将这种方法应用到现实生活中。当我们打开电视时，我们从不考虑"哦，电视之所以工作是因为我们将电子射到屏幕上，这些电子由电磁铁引导，这样我们就可以观看东西！"。我们通常更多地考虑"如果我按这个按钮，我就可以看电影"。我们不需要知道电视是如何工作的才能使用它；它的实现对我们来说是抽象的
- en: Internal Definitions
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内部定义
- en: We have defined a relatively complex procedure which depends on other procedures.
    Now we will see if we can improve the organization of the code!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经定义了一个相对复杂的过程，它依赖于其他过程。现在我们将看看是否可以改进代码的组织！
- en: Notice that our definition of `good-enough?` and `next-guess` are very specific
    to the `largest-square` problem; we can hardly find any other functions that may
    use these functions. Also, when Charlie wants to find what the largest square
    is, he will call the `largest-square` function and not touch the two helper functions
    directly. In such cases, it would be preffered to organize our code such that
    only `largest-square` has access to those two helper functions
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们对`good-enough?`和`next-guess`的定义非常特定于`largest-square`问题；我们几乎找不到其他可能使用这些函数的函数。此外，当查理想要找到最大的正方形时，他将调用`largest-square`函数，而不会直接操作这两个辅助函数。在这种情况下，最好组织我们的代码，以便只有`largest-square`可以访问这两个辅助函数
- en: 'How can we do that? We can define the functions inside the body of `largest-
    square` as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如何做到这一点？我们可以在`largest-square`的主体内定义函数如下：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Given that you defined only the procedure above, what will happen when we call
    `(next-guess 4)`?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你只定义了上面的过程，当我们调用`(next-guess 4)`时会发生什么？
- en: Scope of Variables
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量的作用域
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Previously we mentioned that the functions `good-enough?` and `next-guess`
    are defined only inside the function `largest-square.` Now that those functions
    are inside `largest-square`, we can take other redundant parts out of the function.
    Notice that `next-guess` and `good-enough?` accepts the same `total` and `guess`
    that is passed in to larger-square. Removing the redunant arguments in the two
    helper functions results in:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们提到`good-enough?`和`next-guess`函数仅在函数`largest-square`内定义。现在这些函数在`largest-square`内部，我们可以将其他多余的部分从函数中取出。请注意，`next-guess`和`good-enough?`接受传递给`larger-square`的相同`total`和`guess`。去除两个辅助函数中的多余参数结果为：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How do you keep track of what is available to a function and what is not? We
    will spend a lot of time on this in Unit 3\. When a function defined inside another
    function, the one inside has access to variables and parameters of the outer function.
    Because `next-guess` is defined inside `largest-square`, `next-guess` has access
    to `largest-square`'s parameters, `total` and `guess`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如何跟踪函数可以访问什么，而不能访问什么？我们将在第3单元中花费大量时间来解决这个问题。当一个函数在另一个函数内定义时，内部函数可以访问外部函数的变量和参数。因为`next-guess`是在`largest-square`内定义的，所以`next-guess`可以访问`largest-square`的参数`total`和`guess`。
- en: If you find a mnemonic helpful, consider the outer function as a parent and
    the inner function as a baby. A parent may lend the baby their stuff (such as
    a cellphone) but the baby won't let the parents to take away his toys
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得记忆提示有用，请将外部函数视为父母，将内部函数视为孩子。父母可以借给孩子他们的东西（比如手机），但孩子不会让父母拿走他的玩具。
- en: '![](http://4.bp.blogspot.com/-yfy4u4_1Wb4/TxbQrWKytMI/AAAAAAAAIxs/Hi9b9LWDPGY/
    s400/cute-baby-playing-handphone-448x336.jpg) ![](http://kidsbesttoys.net/wp-
    content/images/lamaze-tug-and-play-knot-block-baby-toy-3.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](http://4.bp.blogspot.com/-yfy4u4_1Wb4/TxbQrWKytMI/AAAAAAAAIxs/Hi9b9LWDPGY/
    s400/cute-baby-playing-handphone-448x336.jpg) ![](http://kidsbesttoys.net/wp-
    content/images/lamaze-tug-and-play-knot-block-baby-toy-3.jpg)'
