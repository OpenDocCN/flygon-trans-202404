- en: Date
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日期
- en: 原文：[https://jsprimer.net/basic/date/](https://jsprimer.net/basic/date/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/basic/date/](https://jsprimer.net/basic/date/)
- en: この章では、JavaScriptで日付や時刻を扱うための[Date](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date)について学びます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将学习如何在JavaScript中处理日期和时间的[Date](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date)。
- en: '[](#date-object)*Dateオブジェクト*'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#date-object)*日期对象*'
- en: '*`Date`オブジェクトは`String`や`Array`などと同じく、ECMAScriptで定義されたビルトインオブジェクトです。'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Date`对象与`String`、`Array`等一样，是在ECMAScript中定义的内置对象。'
- en: '`Date`オブジェクトをインスタンス化することで、ある特定の時刻を表すオブジェクトが得られます。 `Date`における「時刻」は、UTC（協定世界時）の1970年1月1日0時0分0秒を基準とした相対的なミリ秒として保持されます。
    このミリ秒の値のことを、本章では「時刻値」と呼びます。 `Date`オブジェクトのインスタンスはそれぞれがひとつの時刻値を持ち、その時刻値を元に日付や時・分などを扱うメソッドを提供します。'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实例化`Date`对象，可以获得表示特定时间的对象。 在`Date`中，“时间”以相对毫秒形式保留，以UTC（协调世界时）的1970年1月1日0时0分0秒为基准。
    本章将这个毫秒值称为“时间值”。 `Date`对象的实例各自具有一个时间值，并提供用于处理日期、小时和分钟等的方法。
- en: '[](#create-instance)*インスタンスの作成*'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#create-instance)*创建实例*'
- en: '*`Date`オブジェクトのインスタンスは、常にnew演算子を使って作成します。 `Date`オブジェクトのインスタンス作成には、大きく分けて2つの種類があります。
    1つは現在の時刻をインスタンス化するもの、もう1つは任意の時刻をインスタンス化するものです。'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Date`对象的实例始终使用new运算符创建。 创建`Date`对象的实例有两种主要方法。 一种是实例化当前时间，另一种是实例化任意时间。'
- en: '[](#instance-current-time)*現在の時刻をインスタンス化する*'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[](#instance-current-time)*实例化当前时间*'
- en: '*`Date`をnewするときにコンストラクタ引数を何も渡さない場合、作成されるインスタンスは現在の時刻を表すものになります。 `Date`オブジェクトのインスタンスではなく現在の時刻の時刻値だけが欲しい場合には、`Date.now`メソッドの返り値を使います。
    作成したインスタンスが持つ時刻値は、`getTime`メソッドで取得できます。 また、`toISOString`メソッドを使うと、その時刻をUTCにおける[ISO
    8601](https://ja.wikipedia.org/wiki/ISO_8601)形式の文字列に変換できます。 ISO 8601とは国際規格となっている文字列の形式で、`2006-01-02T15:04:05.999+09:00`のように時刻とタイムゾーン情報を表現します。
    人間が見てもわかりやすい文字列であるため、広く利用されています。'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果在new时不传递构造函数参数，则创建的实例将表示当前时间。 如果只需要当前时间的时间值而不是`Date`对象的实例，则可以使用`Date.now`方法的返回值。
    创建的实例的时间值可以通过`getTime`方法获取。 此外，使用`toISOString`方法可以将时间转换为UTC的[ISO 8601](https://ja.wikipedia.org/wiki/ISO_8601)格式的字符串��
    ISO 8601是一种国际标准的字符串格式，表示时间和时区信息，例如`2006-01-02T15:04:05.999+09:00`。 由于这种格式易于理解，因此被广泛使用。'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[](#instance-any-time)*任意の時刻をインスタンス化する*'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[](#instance-any-time)*实例化任意时间*'
- en: '*コンストラクタ引数を渡すことで、任意の時刻を表すインスタンスを作成できます。 `Date`のコンストラクタ関数は渡すデータ型や引数によって時刻の指定方法が変わります。
    `Date`は次の3種類を引数としてサポートしています。'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*通过传递构造函数参数，可以创建表示任意时间的实例。 `Date`的构造函数根据传递的数据类型和参数来确定时间的指定方法。 `Date`支持以下3种参数。'
- en: 時刻値を渡すもの
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递时间值
- en: 時刻を示す文字列を渡すもの
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递表示时间的字符串
- en: 時刻の部分（年・月・日など）をそれぞれ数値で渡すもの
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过数字分别传递时间部分（年、月、日等）
- en: 1つめは、コンストラクタ関数にミリ秒を表す数値型の引数を渡したときに適用されます。 渡した数値をUTCの1970年1月1日0時0分0秒を基準とした時刻値として扱います。
    この方法は基準となる時刻とタイムゾーンが固定されているため、実行環境のタイムゾーンによる違いが起きないので安全です。 そのため、他の2つの方法と違ってタイムゾーンを考慮する必要がありません。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是在构造函数中传递表示毫秒的数字类型参数时应用。 将传递的数字视为相对于UTC的1970年1月1日0时0分0秒的时间值。 由于此方法的基准时间和时区是固定的，因此不会受执行环境时区的影响，因此很安全。
    因此，与其他两种方法不同，不需要考虑时区。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 2つめは、文字列型の引数を渡したときに適用されます。 [RFC2822](https://www.rfc-editor.org/rfc/rfc2822#section-3.3)や[ISO
    8601](https://ja.wikipedia.org/wiki/ISO_8601)の形式に従った文字列を渡すと、 その文字列をパースして得られる時刻値を使って、`Date`のインスタンスを作成します。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是在传递字符串类型的参数时应用。 当传递符合[RFC2822](https://www.rfc-editor.org/rfc/rfc2822#section-3.3)或[ISO
    8601](https://ja.wikipedia.org/wiki/ISO_8601)格式的字符串时，将解析该字符串并使用得到的时间值创建`Date`的实例。
- en: 次のコードでは、ISO 8601形式の文字列を渡して`Date`のインスタンスを作成します。 タイムゾーンを含む文字列の場合は、そのタイムゾーンにおける時刻として時刻値を計算します。
    文字列からタイムゾーンが読み取れない場合は、実行環境のタイムゾーンによって時刻値を計算するため注意が必要です。 また、ISO 8601形式以外の文字列のパースは、ブラウザごとに異なる結果を返す可能性があるため注意しましょう。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码将传递ISO 8601格式的字符串以创建`Date`的实例。 如果字符串包含时区，则将计算该时区的时间值。 如果无法从字符串中读取时区，则需要注意根据执行环境的时区计算时间值。
    此外，由于不同的浏览器可能返回不同的结果，因此要注意ISO 8601格式以外的字符串解析。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 3つめは、時刻を次のように、年・月・日などの部分ごとの数値で指定する方法です。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方法是逐个指定时间，例如年、月、日等的部分数字。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: コンストラクタ関数に2つ以上の引数を渡すと、この方法で`Date`インスタンスが作成されます。 月内の日を表す第三引数（`day`）から後ろの引数は省略可能です。
    省略した場合のそれぞれの引数の初期値は`0`ですが、日（`day`）を表す第三引数だけは`1`がデフォルト値となります。 また、月（`month`）を表す第二引数は`0`が1月に対応し、`0`から`11`までの数値で月を指定することにも注意しましょう。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当向构造函数传递两个以上的参数时，将使用此方法创建`Date`实例。 表示月内日期的第三个参数（`day`）及其后的参数是可选的。 如果省略这些参数，每个参数的默认值为`0`，但是表示日期（`day`）的第三个参数的默认值为`1`。
    此外，要注意月份（`month`）的第二个参数对应于1月的`0`，并且月份是以`0`到`11`的数字指定的。
- en: 先述した2つの方法と違い、この方法はタイムゾーンを指定できません。 渡した数値は常にローカルのタイムゾーンにおける時刻とみなされます。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与前述的两种方法不同，此方法无法指定时区。 传递的数字始终被视为本地时区的时间。
- en: 結果が実行環境に依存してしまうため、基本的にこの方法は使うべきではありません。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于结果取决于执行环境，基本上不应该使用这种方法。
- en: 時刻を部分ごとに指定したい場合は、[Date.UTC](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC)メソッドを使うとよいでしょう。
    渡す引数の形式は同じですが、`Date.UTC`メソッドは渡された数値をUTCにおける時刻として扱い、その時刻値を返します。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要逐个指定时间，则最好使用[Date.UTC](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC)方法。
    参数的格式相同，但`Date.UTC`方法将传递的数字视为UTC时间，并返回该时间值。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: なお、どのオーバーロードにも当てはまらない引数や、時刻としてパースできない文字列を渡した際にも、`Date`のインスタンスは作成されます。 ただし、このインスタンスが持つ時刻は不正であるため、`getTime`メソッドは`NaN`を返し、`toString`メソッドは`Invalid
    Date`という文字列を返します。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果传递的参数不符合任何重载，或者传递的字符串无法解析为时间，则将创建`Date`的实例。 但是，由于该实例的时间是无效的，因此`getTime`方法将返回`NaN`，`toString`方法将返回`Invalid
    Date`字符串。
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[](#instance-method)*Dateのインスタンスメソッド*'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#instance-method)*Date实例方法*'
- en: '*`Date`オブジェクトのインスタンスは多くのメソッドを持っていますが、 ほとんどは`getHours`と`setHours`のような、時刻の各部分を取得・更新するためのメソッドです。'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Date`对象的实例具有许多方法，但大多数是用于获取和更新时间各部分的方法，如`getHours`和`setHours`。'
- en: 次のコードは、日付を決まった形式の文字列に変換しています。 `getMonth`メソッドや`setMonth`メソッドのように月を数値で扱うメソッドは、0から11の数値で指定することに注意しましょう。ある`Date`のインスタンスの時刻が何月かを表示するには、`getMonth`メソッドの返り値に1を足す必要があります。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码将日期转换为特定格式的字符串。 要注意像`getMonth`和`setMonth`这样以数字表示月份的方法，需要注意月份是从0到11的数字。
    要显示`Date`实例的时间是哪个月，需要将`getMonth`方法的返回值加1。
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`getTimezoneOffset`メソッドは、実行環境のタイムゾーンのUTC**からの**オフセット値を**分**単位の数値で返します。 たとえばAsia/TokyoタイムゾーンはUTC+9時間なのでオフセット値は-9時間となり、`getTimezoneOffset`メソッドの返り値は`-540`です。'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`getTimezoneOffset`メソッドは、実行環境のタイムゾーンのUTC**からの**オフセット値を**分**単位の数値で返します。 たとえばAsia/TokyoタイムゾーンはUTC+9時間なのでオフセット値は-9時間となり、`getTimezoneOffset`メソッドの返り値は`-540`です。'
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[](#usecase)*現実のユースケースとDate*'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#usecase)*現実のユースケースとDate*'
- en: '*ここまで`Date`オブジェクトとインスタンスメソッドについて述べましたが、 多くのユースケースにおいては機能が不十分です。 たとえば次のような場合に、`Date`では直感的に記述できません。'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*ここまで`Date`オブジェクトとインスタンスメソッドについて述べましたが、 多くのユースケースにおいては機能が不十分です。 たとえば次のような場合に、`Date`では直感的に記述できません。'
- en: 任意の書式の文字列から時刻に変換するメソッドがない
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意の書式の文字列から時刻に変換するメソッドがない
- en: 「時刻を1時間進める」のように時刻を前後にずらす操作を提供するメソッドがない
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 「時刻を1時間進める」のように時刻を前後にずらす操作を提供するメソッドがない
- en: 任意のタイムゾーンにおける時刻を計算するメソッドがない
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意のタイムゾーンにおける時刻を計算するメソッドがない
- en: '`YYYY/MM/DD HH:mm`のようなフォーマットに基づいた文字列への変換を提供するメソッドがない'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YYYY/MM/DD HH:mm`のよ��なフォーマットに��づいた文字列への変換を提供するメソッドがない'
- en: そのため、JavaScriptにおける日付・時刻の処理は、標準のDateではなくライブラリを使うことが一般的になっています。 代表的なライブラリとしては、[Day.js](https://day.js.org/)、[date-fns](https://date-fns.org/)、[js-joda](https://github.com/js-joda/js-joda)、[moment.js](https://momentjs.com/)の後継である[Luxon](https://github.com/moment/luxon/)などがあります。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: そのため、JavaScriptにおける日付・時刻の処理は、標準のDateではなくライブラリを使うことが一般的になっています。 代表的なライブラリとしては、[Day.js](https://day.js.org/)、[date-fns](https://date-fns.org/)、[js-joda](https://github.com/js-joda/js-joda)、[moment.js](https://momentjs.com/)の後継である[Luxon](https://github.com/moment/luxon/)などがあります。
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[](#conclusion)*まとめ*'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)*まとめ*'
- en: '*この章では、Dateオブジェクトについて学びました。'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*この章では、Dateオブジェクトについて学びました。'
- en: '`Date`オブジェクトのインスタンスはある特定の時刻を表すビルトインオブジェクト'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Date`オブジェクトのインスタンスはある特定の時刻を表すビルトインオブジェクト'
- en: '`Date`における「時刻」は、UTC（協定世界時）の1970年1月1日0時0分0秒を基準とした相対的なミリ秒として保持されている'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Date`における「時刻」は、UTC（協定世界時）の1970年1月1日0時0分0秒を基準とした相対的なミリ秒として保持されている'
- en: '`Date`コンストラクタで任意の時間を表す`Date`インスタンスを作成できる'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Date`コンストラクタで任意の時間を表す`Date`インスタンスを作成できる'
- en: '`Date`インスタンスメソッドにはさまざまなものがあるが、現実のユースケースでは機能が不十分になりやすい'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Date`インスタンスメソッドにはさまざまなものがあるが、現実のユースケースでは機能が不十分になりやすい'
- en: ビルトインオブジェクトの`Date`のみではなく、ライブラリも合わせて利用するのが一般的*******
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ビルトインオブジェクトの`Date`のみではなく、ライブラリも合わせて利用するのが一般的*******
