- en: Arrays and two-dimensional arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组和二维数组
- en: Arrays are the most fundamental data type to store many elements, and are implemented
    directly by the virtual machine (by contrast, (mutable) lists are implemented
    in a library, using an array to store the elements).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是存储许多元素的最基本数据类型，并且直接由虚拟机实现（相比之下，（可变）列表是在库中实现的，使用数组来存储元素）。
- en: You can think of an array as a mutable list of fixed size—that is, you cannot
    add or remove elements. Once created, the size of an array stays the same.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将数组看作是一个固定大小的可变列表，即你无法添加或删除元素。一旦创建，数组的大小保持不变。
- en: 'Like lists, arrays can be created by listing the elements:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 像列表一样，数组可以通过列出元素来创建：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'They support most of the methods available for mutable lists:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 它们支持大多数可用于可变列表的方法：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that printing an array directly does not list the elements nicely as happens
    for List or MutableList.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，直接打印一个数组不会像列表或可变列表那样漂亮地列出元素。
- en: 'When you want to create a large array, or an array whose size you have somehow
    computed, you cannot list the initial elements. Instead, you provide the number
    of elements, and a piece of code that computes the value of the element. This
    piece of code can make use of the magic variable it which gives the index of the
    element:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要创建一个大数组，或者一个大小你已经计算过的数组时，你无法列出初始元素。相反，你提供元素的数量，以及一个计算元素值的代码片段。这段代码可以使用魔术变量it，它给出元素的索引：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There is usually no good reason to use an array instead of a (mutable) list.
    However, the args variable that provides the command line arguments to a Kotlin
    script, is actually an array, of type Array<String>.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常没有充分的理由使用数组而不是（可变）列表。然而，提供Kotlin脚本的命令行参数的args变量实际上是一个数组，类型为Array<String>。
- en: Two-dimensional arrays
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 二维数组
- en: Another opportunity to use arrays is when you need a two-dimensional storage
    area, for instance to represent a board in a game. A two-dimensional array uses
    two indices, often called row and column, to acces \(m \times n\) elements. It
    is implemented by making one array for each row (these arrays are indexed by the
    column number), and then one array (indexed by the row number) to store the rows.
    (One could do the same with lists, but that would waste quite a bit of storage.)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个使用数组的机会是当你需要一个二维存储区域时，比如在游戏中表示一个棋盘。一个二维数组使用两个索引，通常称为行和列，来访问\(m \times n\)个元素。它通过为每一行创建一个数组（这些数组由列号索引），然后创建一个数组（由行号索引）来存储行来实现。（你也可以用列表做同样的事情，但会浪费相当多的存储空间。）
- en: 'The following example creates a two-dimensional array with 5 rows and 8 columns,
    filled with zeroes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例创建了一个有5行8列的二维数组，填充为零：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The type of b is Array<Array<Int>>. We access its elements using row and column
    number:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: b的类型是Array<Array<Int>>。我们使用行号和列号访问它的元素：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Since b itself is the array storing the rows, we can get the number of rows
    as b.size. The number of columns is the length of each element of b, for instance
    b[0].size:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于b本身是存储行的数组，我们可以通过b.size获得行数。列数是b的每个元素的长度，比如b[0].size：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will need to write a function to display the board nicely. For debugging,
    something like the following will be good enough:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要编写一个函数来漂亮地显示棋盘。对于调试，类似以下的内容已经足够好了：
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
