- en: Recursion, Recursion, RecursionTuesday, February 14th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归，递归，递归星期二，二月十四日
- en: '[PLAI §9](plai.pdf#chapter.9 "Understanding Recursion")'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §9](plai.pdf#chapter.9 "理解递归")'
- en: 'There is one major feature that is still missing from our language: we have
    no way to perform recursion (therefore no kind of loops). So far, we could only
    use recursion when we had *names*. In FLANG, the only way we can have names is
    through `with` which not good enough for recursion.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的语言中仍然缺少一个重要特性：我们没有办法执行递归（因此没有任何类型的循环）。到目前为止，我们只能在有*名称*时使用递归。在 FLANG 中，我们唯一能够拥有名称的方式是通过
    `with`，这对于递归来说是不够的。
- en: 'To discuss the issue of recursion, we switch to a “broken” version of (untyped)
    Racket — one where a `define` has a different scoping rules: the scope of the
    defined name does *not* cover the defined expression. Specifically, in this language,
    this doesn’t work:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要讨论递归问题，我们切换到一个“破坏”的（无类型的）Racket 版本 —— 其中 `define` 有不同的作用域规则：定义的名称的作用域*不*覆盖定义的表达式。具体来说，在这种语言中，这是行不通的：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In our language, this translation would also not work (assuming we have `if`
    etc):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的语言中，这种转换也不起作用（假设我们有 `if` 等）：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And similarly, in plain Racket this won’t work if `let` is the only tool you
    use to create bindings:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在普通的 Racket 中，如果 `let` 是你用来创建绑定的唯一工具，这也不起作用：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the broken-scope language, the `define` form is more similar to a mathematical
    definition. For example, when we write:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在破坏作用域的语言中，`define` 形式更类似于数学定义。例如，当我们写：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: it is actually shorthand for
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它实际上是一个简写，表示为
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'we can then replace defined names with their definitions:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以用它们的定义替换定义的名称：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'and this can go on, until we get to the actual code that we wrote:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 而且这可以一直进行下去，直到我们到达实际编写的代码为止：
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This means that the above `fact` definition is similar to writing:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着上面的 `fact` 定义类似于写：
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: which is not a well-formed definition — it is *meaningless* (this is a formal
    use of the word “meaningless”). What we’d really want, is to take the *equation*
    (using `=` instead of `:=`)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个完整的定义 —— 它是*无意义的*（这是对 “无意义” 一词的正式使用）。我们真正想要的是，采用 *等式*（使用 `=` 而不是 `:=`）
- en: '[PRE8]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: and find a solution which will be a value for `fact` that makes this true.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 并找到一个解决方案，该解决方案将是一个对于使这个等式成立的 `fact` 的值。
- en: 'If you look at the Racket evaluation rules handout on the web page, you will
    see that this problem is related to the way that we introduced the Racket `define`:
    there is a hand-wavy explanation that talks about *knowing* things.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看网页上的 Racket 评估规则手册，你会发现这个问题与我们介绍 Racket `define` 的方式有关：有一个模糊的解释谈论*了解*事物。
- en: 'The big question is: can we define recursive functions without Racket’s magical
    `define` form?'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的问题是：我们能够定义没有 Racket 魔术 `define` 形式的递归函数吗？
- en: 'Note: This question is a little different than the question of implementing
    recursion in our language — in the Racket case we have no control over the implementation
    of the language. As it will eventually turn out, implementing recursion in our
    own language will be quite easy when we use mutation in a specific way. So the
    question that we’re now facing can be phrased as either “can we get recursion
    in Racket without Racket’s magical definition forms?” or “can we get recursion
    in our interpreter without mutation?”.'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：这个问题与在我们的语言中实现递归的问题有点不同 —— 在 Racket 的情况下，我们无法控制语言的实现。随着时间的推移，当我们以特定方式使用突变时，在我们自己的语言中实现递归将会非常容易。所以我们现在面临的问题可以表述为“我们能在
    Racket 中不使用 Racket 的魔术定义形式获得递归吗？”或者“我们能在我们的解释器中不使用突变获得递归吗？”。
