- en: Implementing The AE LanguageTuesday, January 17th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现 AE 语言
- en: 'Back to our `eval` — this will be its (obvious) type:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的 `eval` —— 这将是它的（显而易见的）类型：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'which leads to some obvious test cases:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致一些明显的测试案例：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'which from now on we will write using the new `test` form that the `#lang pl`
    language provides:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们将使用 `#lang pl` 语言提供的新`test`形式来编写：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that we’re testing *only* at the interface level — only running whole
    functions. For example, you could think about a test like:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们仅在接口级别进行测试 —— 仅运行整个函数。例如，你可以考虑这样的一个测试：
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: but the details of parsing and of the constructor names are things that nobody
    outside of our evaluator cares about — so we’re not testing them. In fact, we
    shouldn’t even mention `parse` in these tests, since it is not part of the public
    interface of our users; they only care about using it as a compiler-like black
    box. (This is sometimes called “integration tests”.) We’ll address this shortly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但解析的细节和构造函数的名称是除了我们的求值器之外没有人关心的东西 —— 所以我们不测试它们。事实上，在这些测试中甚至不应该提到 `parse`，因为它不是我们用户公共接口的一部分；他们只关心将其用作类似编译器的黑盒。
    （这有时被称为“集成测试”。）我们很快就会解决这个问题。
- en: 'Like everything else, the structure of the recursive `eval` code follows the
    recursive structure of its input. In HtDP terms, our template is:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 像其他所有内容一样，递归 `eval` 代码的结构遵循其输入的递归结构。按照 HtDP 的术语，我们的模板是：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this case, filling in the gaps is very simple
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，填补空白非常简单。
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We now further combine `eval` and `parse` into a single `run` function that
    evaluates an AE string.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在进一步将 `eval` 和 `parse` 合并为一个单一的 `run` 函数，该函数评估 AE 字符串。
- en: '[PRE6]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This function becomes the single public entry point into our code, and the
    only thing that should be used in tests that verify our interface:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数成为我们代码的单一公共入口点，并且是应该在验证我们接口的测试中使用的唯一事物：
- en: '[PRE7]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The resulting *full* code is:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的*完整*代码是：
- en: '[PRE8]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: (Note that the tests are done with a `test` form, which we mentioned above.)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: （注意，测试是使用 `test` 形式进行的，我们之前提到过。）
- en: For anyone who thinks that Racket is a bad choice, this is a good point to think
    how much code would be needed in some other language to do the same as above.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何认为 Racket 是一个糟糕选择的人来说，现在是考虑在其他语言中需要多少代码来完成相同工作的好时机。
