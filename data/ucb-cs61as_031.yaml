- en: Conditional Expressions and Predicates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件表达式和谓词
- en: Review on Conditionals
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件语句复习
- en: We used `if` and conditionals in our first lab. In this section, we will flesh
    out more details.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第一个实验中使用了`if`和条件语句。在本节中，我们将详细介绍更多细节。
- en: We generally use an `if` or a `cond` when we want our function to behave differently
    depending on a certain condition. Note that these two functions are *special forms*
    in Racket; we don't evaluate them using the usual "evaluate the operands fully,
    and then apply the operator" method.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望函数根据某个特定条件的不同行为时，通常使用`if`或`cond`。请注意，这两个函数在Racket中是*特殊形式*；我们不使用通常的“完全评估操作数，然后应用运算符”方法来评估它们。
- en: '`cond` Examples'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`cond`示例'
- en: 'The general form of a `cond` expression is:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`cond`表达式的一般形式是：'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each `(<test> <result>)` pair is called a *clause*. The first part of each pair
    (the `<test>`) is a *predicate*—an expression that must evaluate to either true
    or false.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`(<test> <result>)`对称为*子句*。每对的第一部分（`<test>`）是*谓词*—必须评估为true或false的表达式。
- en: To evaluate a `cond` expression, start by evaluating `<test1>`. If it is true,
    evaluate and return `<result1>`. If `<test1>` is false, repeat for `<test2>`,
    and so on until there are no more tests. If you hit an `else`, return the value
    corresponding to it (the "default value").
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要评估`cond`表达式，首先评估`<test1>`。如果为真，则评估并返回`<result1>`。如果`<test1>`为假，则重复`<test2>`，依此类推，直到没有更多测试。如果遇到`else`，则返回相应的值（“默认值”）。
- en: 'You can write a `cond` expression as a series of ''if'' statements:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`cond`表达式写为一系列“if”语句：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Exercise
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: The function `plural` below takes in a word and returns its plural form. For
    example, `(plural 'carrot)` returns `'carrots` and `(plural 'body)` returns `'bodies`.
    It does *not* perform correctly for `(plural 'boy)`, which *should* return `'boys`;
    the buggy version below returns `'boies` instead.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`plural`如下接受一个单词并返回其复数形式。例如，`(plural 'carrot)`返回`'carrots`，`(plural 'body)`返回`'bodies`。对于`(plural
    'boy)`，它的表现不正确，*应该*返回`'boys`；下面的错误版本却返回`'boies`。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Choose which line of code to add in the blank below so that (plural 'boy) behaves
    correctly (that is, it should return boys). Suppose `vowel?` is defined as before.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 选择在下面的空白处添加哪行代码，以便`(plural 'boy)`正确运行（即，应返回boys）。假设`vowel?`如前所定义。
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Predicate and Style
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谓词和样式
- en: A predicate is any expression that returns true or false. Some examples include
    `(< 3 4)`,`(> 10 -2)`, and `(= 'apple 'orange)`. You can form compound predicates
    by using `and`, `or`, and `not`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词是任何返回true或false的表达式。一些示例包括`(< 3 4)`，`(> 10 -2)`和`(= 'apple 'orange)`。您可以使用`and`，`or`和`not`来形成复合谓词。
- en: 'Here is an example of a predicate:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个谓词的示例：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When defining a predicate, it is conventional to end the name of the procedure
    with a question mark (`?`).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义谓词时，习惯上以问号（`?`）结束过程的名称。
- en: 'Here''s another way to define `even?`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一种定义`even?`的方法：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Although this definition is equivalent to the original definition above, it
    contains redundancies. We urge you to avoid writing code like this. Redundant
    code can make your programs more difficult to understand, and is typically considered
    an example of bad programming style.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此定义等效于上面的原始定义，但它包含冗余。我们建议您避免编写这样的代码。冗余的代码可能会使您的程序更难理解，并且通常被认为是糟糕编程风格的示例。
- en: Exercises
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: We define a procedure that takes three numbers as arguments and returns the
    sum of the squares of the two larger numbers
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义一个过程，它以三个数字作为参数，并返回两个较大数字的平方和
- en: For example, `(max-sum-squares 1 2 3)` returns `13`, which is `4 + 9`
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`(max-sum-squares 1 2 3)`返回`13`，即`4 + 9`
- en: Why isn't the code below correct?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么下面的代码不正确？
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'PRACTICE QUESTION: Write a procedure `pigl` that takes a word as an argument
    and returns that word in pig latin. Here are the rules for pig latin:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 练习问题：编写一个过程`pigl`，它以一个单词作为参数，并以pig latin形式返回该单词。以下是pig latin的规则：
- en: If the input word starts with a vowel then we append "ay" to the input.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入的单词以元音字母开头，则我们在输入后附加“ay”。
- en: If the input word starts with a consonant then we move all the starting consonants
    to the end of the word and then append "ay" to the end.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入的单词以辅音字母开头，则我们将所有起始辅音字母移至单词末尾��然后在末尾附加“ay”。
- en: 'Here are some examples:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What happens if our input doesn't have a vowel, like `(pigl 'my)`? Make sure
    your `pigl` checks if a word has no vowels and just returns that word directly.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的输入没有元音，像`(pigl 'my)`这样会发生什么？确保您的`pigl`检查单词是否没有元音，并直接返回该单词。
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Check your answer in your Racket interpreter with the examples above!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 Racket 解释器中使用上面的示例检查你的答案！
