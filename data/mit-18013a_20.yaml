- en: 'Chapter 19: The Anti-derivative or Indefinite Integral'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第19章：反导数或不定积分
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Finding an anti-derivative is finding a function that has a given derivative
    over a range of values. Classes of derivatives for which this can be done are
    described along with some methods for finding anti-derivatives.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 找到反导数就是找到一个在一系列值上具有给定导数的函数。 可以做到这一点的导数类别以及一些找到反导数的方法都在描述。
- en: Topics
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题
- en: 19.1  [Introduction](section01.html)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 19.1  [Introduction](section01.html)
- en: 19.2  [Non-uniqueness of Anti-derivatives](section02.html)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 19.2  [反导数的非唯一性](section02.html)
- en: 19.3  [Anti-derivatives by Inspection and Classes of Functions that we can Anti-differentiate](section03.html)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 19.3  [通过观察找到反导数以及我们可以反导数的函数类](section03.html)
- en: 19.4  [Substitution](section04.html)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 19.4  [替换](section04.html)
- en: 19.5  [Integration by Parts](section05.html)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 19.5  [分部积分](section05.html)
- en: 19.6  [Differentiation with Respect to a Parameter](section06.html)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 19.6  [关于参数的微分](section06.html)
- en: 19.7  [Partial Fraction Decomposition](section07.html)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 19.7  [偏分解](section07.html)
- en: 19.1 Introduction
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19.1 介绍
- en: If we want to study an unknown function defined by some physical or other situation,
    the method of analysis consists of studying its derivative, as a function of appropriate
    variables, and deducing from them an equation for it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要研究由某种物理或其他情况定义的未知函数，那么分析的方法就是研究其导数，作为适当变量的函数，并从中推导出一个方程。
- en: The equation will generally be an example of a differential equation, which
    is an equation that involves derivatives of an unknown function. The process of
    solving a differential equation is called integrating it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方程通常是微分方程的一个例子，微分方程是涉及未知函数的导数的方程。解微分方程的过程称为积分。
- en: One important special case of this problem occurs when we have an explicit formula
    for the derivative of a function f defined over an interval of a single variable
    x and this formula is depends only on the independent variable x.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有一个关于单变量x的区间上的函数f的导数的显式公式，并且此公式仅依赖于自变量x时，这个问题的一个重要特例发生了。
- en: '**We want to know as much as this information can provide us about the function
    f.**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们想要尽可能多地了解这些信息能为我们提供的关于函数f的信息。**'
- en: Thus we want to go from g(x), with ![](../Images/f443d4b8683a2f300346b8ded1f897f1.jpg)for
    a < x < b, to f(x); we want to "undo" the differential operator ![](../Images/25cc3744d08508b0331c8dadf2cc48a2.jpg),
    and this could be called undifferentiating to find f(x) itself or as much about
    it as we can; the standard name for this task is finding **the anti-derivative**
    of g(x).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们希望从g(x)，其中![](../Images/f443d4b8683a2f300346b8ded1f897f1.jpg)，对于a < x <
    b，到达f(x)；我们想“撤销”微分算子![](../Images/25cc3744d08508b0331c8dadf2cc48a2.jpg)，并且这可以被称为找到g(x)的反导数来找到f(x)本身或者尽可能多的关于它的信息；这个任务的标准名称是找到**反导数**的。
- en: This procedure is also called **finding the indefinite integral of g(x) with
    respect to x.**
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程也被称为**找到关于x的g(x)的不定积分**。
- en: We will not use this terminology below, because we want to define the *definite
    integral* in a completely different way, and want to avoid confusion between the
    two notions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不再使用这个术语，因为我们想以完全不同的方式定义*定积分*，并且想要避免这两个概念之间的混淆。
- en: Of course you can anticipate from the similarity in names that there will be
    an intimate relation between the *definite integral* (here not defined at all)
    and the *anti-derivative* here. If you guess as much you are right. But this relation
    is a basic theorem, called the fundamental theorem of calculus.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以从名称的相似性中预料到 *定积分*（此处根本没有定义）和此处的*反导数*之间会有密切关系。如果你这么猜，你是对的。但是这种关系是一个基本定理，称为微积分的基本定理。
- en: 19.2 Non-uniqueness of Anti-derivatives
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19.2 反导数的非唯一性
- en: There is a difficulty with finding anti-derivatives akin to the problem of defining
    the *inverse* to a function that takes on some of its values at more than one
    argument each. Knowing that the original function attains one of those values
    does not determine the inverse function; additional information in the form of
    an additional condition is necessary to distinguish among the more than one possible
    original arguments that could be called the inverse function under such circumstances.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 找到类似于定义函数的*逆*的问题与找到反导数的困难相似，该函数在某些参数上取得多个值。 知道原始函数达到其中一个值并不能确定逆函数；在这种情况下，需要以附加条件的形式提供额外信息，以区分可能被称为逆函数的多个可能原始参数之间的差异。
- en: 'In going from the derivative to the function we must contend with the fact
    that a constant has zero derivative: thus we can add any constant to any possible
    anti-derivative and get another equally valid one.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从导数到函数的过程中，我们必须面对常数的导数为零的事实：因此，我们可以将任何常数添加到任何可能的反导数中，并得到另一个同样有效的反导数。
- en: Which is really to say that to determine an anti-derivative completely you must
    add additional information. In particular the value of the function at any one
    argument will be enough to determine it from its derivative over its domain.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是说要完全确定一个反导数，你必须添加额外的信息。特别是函数在任一参数处的值足以通过其定义域上的导数来确定它。
- en: Thus we must recognize the fact that without an additional condition on f, there
    is no one single anti-derivative f for given g; we can find an anti-derivative,
    or describe all anti-derivatives (in which case you should add +c to any one anti-derivative)
    but it is not quite right to use the terminology "the anti-derivative of g" until
    an additional condition has been specified.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们必须认识到没有附加条件的情况下，对于给定的 g，没有一个单一的反导函数 f；我们可以找到一个反导函数，或者描述所有反导函数（在这种情况下，你应该给任一反导函数加上
    +c），但在另外指定附加条件之前使用术语“g的反导函数”并不完全正确。
- en: (I recall that when I studied calculus in ancient times we had to play a game
    reminiscent of "Simon Says" with +c; if the question at hand was phrased one way
    the answer had to have a +c; otherwise not. As I recall from even longer ago,
    it is very easy to distract a person to lose at Simon Says and it is equally easy
    to forget to write +c when it is called for.)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: （我记得当我在古代学习微积分时，我们必须玩一个类似于“西蒙说”的游戏，带着 +c；如果问题是这样提出的，答案必须有 +c；否则不带。正如我从更久远的时候记得的那样，很容易让一个人分心以输掉西蒙说的游戏，同样容易忘记在需要时写上
    +c。）
- en: 19.3 Anti-derivatives by Inspection and Classes of Functions that we can Anti-differentiate
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19.3 凭眼观察求反导数和我们可以反区分的函数类
- en: The process of **differentiating** a known standard function can be achieved
    by parsing the function definition, and applying the appropriate rules of differentiation
    to each step in its definition.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**区分**已知标准函数的过程可以通过解析函数定义并将适当的区分规则应用于其定义的每一步来实现。'
- en: There are no specific **anti-differentiation** rules; we have to use the differentiation
    rules backwards. And these allow us to anti-differentiate large classes of standard
    functions, but not all of them.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 没有特定的**反区分**规则；我们必须反向使用区分规则。这些规则允许我们反区分大量标准函数，但并非全部。
- en: We can recognize some functions almost immediately as derivatives of others.
    For example, we can anti-differentiate any polynomial in x by applying the rule
    to differentiate powers backwards.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎可以立即将一些函数识别为其他函数的导数。例如，我们可以通过将规则应用于反向区分幂来反区分 x 中的任意多项式。
- en: Thus an anti-derivative of ![](../Images/9d49ed0f34e02fa079e8f7fce1c41e7f.jpg)
    (When anti-differentiating polynomials, a standard error is to suffer a mental
    lapse in the middle of doing this and differentiate instead of anti-differentiating
    some term; always check that you haven't done this.)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，![](../Images/9d49ed0f34e02fa079e8f7fce1c41e7f.jpg) 的一个反导数（当反区分多项式时，一个标准错误是在做这个过程中精神上出现疏忽，而不是反区分某个项；请始终检查你是否已经这样做了。）
- en: We can similarly anti-differentiate **any power** (even ![](../Images/0388f465344b0857e34842bd910f6540.jpg),
    one of whose anti-derivatives is ln(x)). And we can anti-differentiate e^(ax)
    and **any polynomial in sin(x) and cos(x),** although doing the latter requires
    applying some tricks.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以类似地反区分**任意幂**（甚至 ![](../Images/0388f465344b0857e34842bd910f6540.jpg)，其中之一的反导数是
    ln(x)）。而且我们可以反区分 e^(ax) 和 **任意多项式的 sin(x) 和 cos(x)，**尽管后者需要应用一些技巧。
- en: It turns out, that there are more tricks which allow us to differentiate **any
    rational function ![](../Images/609362ab22182c55c721ffe81b5ceb13.jpg) where p
    and q are polynomials, if we can factor q(x) into linear and quadratic factors;**
    and tricks which allow us anti-differentiate **an exponential times a polynomial,
    inverse powers of sines and cosines, functions that are polynomials divided by
    the square root of a linear or quadratic functions, products of exponentials sines
    and polynomials,** and various other classes of functions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 原来，还有更多的技巧可以让我们对**任何有理函数 ![](../Images/609362ab22182c55c721ffe81b5ceb13.jpg)
    进行求导，其中p和q是多项式，如果我们可以将q(x)分解为一次和二次因子；**还有一些技巧可以让我们对**指数与多项式、正弦和余弦的倒数、多项式除以线性或二次函数的平方根、指数正弦和多项式的乘积**以及其他各类函数进行反求导。
- en: On the other hand there are simple looking standard functions that we cannot
    anti-differentiate, because their anti-derivatives do not happen to be standard
    functions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，有一些看起来简单的标准函数我们无法反求导，因为它们的反导数恰好不是标准函数。
- en: (If these anti-derivatives were sufficiently important we would give them names,
    make tables of them and add them to the list of our basic functions (which consists
    now of x, sin x and e^x). As it happens they are important but not that important;
    we give them names and tabulate them, but call them **special functions.**
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: （如果这些反导数足够重要，我们会给它们起名字，制作表格，并将它们添加到我们基本函数列表中（目前包括x、sin x和e^x）。但事实证明，它们很重要，但不是那么重要；我们给它们起名字、列表格，但称它们为**特殊函数。**
- en: The simplest functions that cannot be anti-differentiated as standard functions
    are ![](../Images/14204ae9b55b301f6dcfb83590e1cc18.jpg) both of which have special
    functions as specific anti-derivatives.)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的不能作为标准函数反求导的函数是![](../Images/14204ae9b55b301f6dcfb83590e1cc18.jpg)，这两个函数都有特殊函数作为特定的反导数。
- en: There used to be a difference of opinion among teachers of calculus as to whether
    students should be made to learn all the tricks of anti-differentiation so that
    they could anti-differentiate anything that could be anti-differentiated.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在微积分教师中，曾经存在着一种争论，即学生是否应该学会所有反求导的技巧，以便对任何可反求导的东西进行反求导。
- en: Some felt that the mark of mastery of calculus was to be able to anti-differentiate
    strange looking functions by attempting to apply the various tricks. Others pointed
    out that there are "integral tables" which list essentially all anti-differentiable
    functions and their anti-derivatives, so that this skill, whose development is
    a wonderful exercise of ingenuity and memory, has very limited practical value.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人认为，掌握微积分的标志是能够通过尝试应用各种技巧来进行反求导，从而对奇怪的函数进行反求导。其他人指出，有“积分表”，列出了基本上所有可反求导函数及其反导数，因此，这种技能，其发展是一种奇妙的智慧和记忆练习，但实际价值非常有限。
- en: At that time there were obstacles that students faced in getting a copy of a
    reasonably complete integral table, and in looking things up in huge ones, that
    gave the edge by a small margin to the first viewpoint.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当时学生面临的障碍是，他们很难获得一本相对完整的积分表副本，并且很难在庞大的积分表中查找内容，这使得第一个观点稍微占据了一点优势。
- en: Today, however, there are commercially available programs, Maple, MATLAB, and
    Mathematica (and perhaps others), which give you detailed formulae for the anti-derivative
    of any function you care to enter, and do so instantly; which seems to tilt the
    argument toward the second viewpoint.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，今天，有商业可用的程序，如Maple、MATLAB和Mathematica（也许还有其他程序），它们可以为您输入的任何函数提供详细的反导数公式，并且立即执行；这似乎使争论倾向于第二个观点。
- en: Be that as it may, every student of calculus should be aware of the four basic
    tools of anti-differentiation, which we now discuss.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，每个微积分学生都应该了解反求导的四个基本工具，我们现在讨论这些工具。
- en: Before doing so we should notice the important fact that the action of finding
    an anti-derivative is a linear operation (as differentiating is) so that **an
    anti-derivative of a sum is the sum of anti-derivatives of its summands.**
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样做之前，我们应该注意到一个重要事实，即找到反导数是一个线性操作（与求导相同），因此**一个和的反导数是其和的各项的反导数之和。**
- en: 19.4 Substitution
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19.4 替换
- en: By far the most important tool of anti-differentiation is that of applying the
    chain rule of differentiation backwards; that means given a function f(x), finding
    a function u(x), so that you can write f(x) as ![](../Images/24ac6a3796fdf585736da1b6d18afe5e.jpg)
    In that case you can claim that an anti-derivative of f is g(u(x)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，反积分最重要的工具是将链式法则反向应用；这意味着给定一个函数 f(x)，找到一个函数 u(x)，使得你可以将 f(x) 写成![](../Images/24ac6a3796fdf585736da1b6d18afe5e.jpg)
    在这种情况下，你可以声明 f 的一个反导数是 g(u(x))。
- en: (This seems complicated when written this way, but is easier to use than it
    looks, in practice.)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: （这种写法看起来复杂，但实际使用起来比看起来容易。）
- en: For example, suppose we have f(x) = sin⁵ x cos x.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有 f(x) = sin⁵ x cos x。
- en: Then we can set u(x) = sin x, and find that ![](../Images/77b9511cf9faf9fbfd67178493b7a4fd.jpg),
    which we can recognize as the derivative of ![](../Images/3a378f36e9096d5c3b4ed8ab60aa9eab.jpg),
    which is then an anti-derivative of f.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以设定 u(x) = sin x，并找到![](../Images/77b9511cf9faf9fbfd67178493b7a4fd.jpg)，我们可以将其识别为![](../Images/3a378f36e9096d5c3b4ed8ab60aa9eab.jpg)的导数，这就是
    f 的一个反导数。
- en: The identical idea can be used to **anti-differentiate any polynomial in sines
    and cosines of odd degree in all,** if you apply the identity (sin²x + cos²x =
    1) to bring all terms into forms that are linear in one of sine or cosine like
    f is above.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的思想可以用于反积分任何奇次正弦和余弦多项式，如果你应用恒等式(sin²x + cos²x = 1)将所有项转换为一个正弦或余弦的线性形式，就像上面的
    f 一样。
- en: Employing this technique is called **"substituting"**; the variable u is in
    a sense substituted for x.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种技术被称为**“替换”**；变量 u 在某种意义上替代了 x。
- en: Notice that **if we can recognize that f(x) is the derivative of a known function
    then we can anti-differentiate by inspection.**
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，**如果我们能够识别 f(x) 是已知函数的导数，那么我们可以通过检查进行反积分。**
- en: '**Using substitution of** u(x) for x, we change the question to: can we recognize
    ![](../Images/cee8a53ac9c882145e5baf18bb4ee534.jpg) as the derivative of a function
    of u?'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用** u(x) **的替换，我们将问题转换为：我们能否将![](../Images/cee8a53ac9c882145e5baf18bb4ee534.jpg)识别为
    u 的函数的导数？**'
- en: 'In the example above, the new question becomes: can we recognize sin⁵ x as
    a derivative with respect to the variable sin x? Since sin⁵ x is a power of sin
    x, we can recognize it as the derivative of ![](../Images/64150c847b8dc6786e0f1813801bb477.jpg)
    and we have found an anti-derivative of f.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，新问题变成了：我们能否将 sin⁵ x 识别为关于变量 sin x 的导数？由于 sin⁵ x 是 sin x 的幂，我们可以将其识别为![](../Images/64150c847b8dc6786e0f1813801bb477.jpg)的导数，从而找到了
    f 的一个反导数。
- en: There are some well known standard substitutions that allow us to anti-differentiate
    many potentially useful functions. We review them below.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些众所周知的标准替换，可以让我们对许多潜在有用的函数进行反积分。我们在下面进行回顾。
- en: Looking for the right substitution that might help for finding some given specific
    anti-derivative is a bit of intellectual detective work. It is akin to solving
    a chess problem, in that while perhaps it is of no practical value, it may well
    be an excellent exercise for developing your reasoning powers or your ability
    to find what at first seems like finding a needle in a haystack.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找适当的替换可能有助于找到某个特定反导数，这有点像智力侦探工作。这类似于解决国际象棋问题，虽然也许没有实际价值，但可能是一个很好的锻炼，可以培养你的推理能力或者找到一开始看起来像大海捞针的东西的能力。
- en: Here are classes of functions (called integrands) that you should be able to
    integrate at least in theory. The details can become ugly and boring but that
    merely means that you cannot be asked to do them out very often.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些函数类（称为被积函数），你至少应该在理论上能够积分。细节可能变得复杂和乏味，但这仅仅意味着你不会被要求经常做这些计算。
- en: 1\. **Any polynomial in x.** These can be done directly term by term by inspection
    using the power rule backwards.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **任何 x 的多项式。** 这些可以直接通过逐项使用反向幂规则来进行检查。
- en: 2\. **Any single power positive or negative in x,** such as (x-3)^(1/3) or (1-x)^(-1).
    Same method.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **任何 x 的单一正或负幂次，** 如 (x-3)^(1/3) 或 (1-x)^(-1)。同样的方法。
- en: 3\. **Any exponent like e^(ax).** Again direct integration can be applied using
    the rule for differentiating exponents backwards.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **任何指数形式如 e^(ax)。** 同样，可以直接应用不同iating exponents的规则进行反积分。
- en: 4\. **Any polynomial in sines and cosines multiplied by any exponent** as in
    the last case. Here you can use the exponential formula for sines and cosines
    to make this into an ugly sum of exponentials to each of which case 3 applies.
    Some of the exponents will be complex, but so what.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. **任何正弦和余弦的多项式乘以任何指数**，就像最后一种情况一样。在这里，你可以使用正弦和余弦的指数公式，将其转换为一组指数的丑陋和，每个指数都适用于情况
    3。一些指数将是复数，但又怎样���
- en: 5\. **The function ![](../Images/714b78728f70107f90734ded11bbd1cd.jpg)** whose
    integral is the arctangent of (x-a).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. **函数 ![](../Images/714b78728f70107f90734ded11bbd1cd.jpg)**，其积分是 (x-a) 的反正切。
- en: 6\. **Any rational function of x** which means any function of the form ![](../Images/97be8db9564a16acbf84af50820ad0ad.jpg)
    where p and q are both polynomials. To do this you must be able to factor q into
    linear (and perhaps quadratic terms), employ the technique called **"partial fraction
    expansion"** discussed in a later section, and then integrate using cases 1 and
    2 and perhaps 5 above.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. **任何 x 的有理函数**，即任何形如 ![](../Images/97be8db9564a16acbf84af50820ad0ad.jpg)
    的函数，其中 p 和 q 都是多项式。要做到这一点，你必须能够将 q 因式分解为线性（也许是二次的）项，使用后面讨论的**"部分分式展开"**技术，然后使用上述的情况
    1、2 和也许 5 进行积分。
- en: (The idea is that ![](../Images/1881d2f958a0212ca0fc9f2ed124bd23.jpg) can be
    written as a sum of a polynomial and a sum over the zeroes of q(x) of single inverse
    powers (and perhaps terms like that in case 5 if you don't like to use complex
    zeroes).)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: （思路是 ![](../Images/1881d2f958a0212ca0fc9f2ed124bd23.jpg) 可以写成一个多项式和 q(x) 的零点的单个倒数幂之和（如果你不喜欢使用复数零点，也许还有类似情况
    5 的项）。）
- en: 7\. **Any rational function of sines and cosines of x** (in theory anyway).
    This reduces to a rational function to which case 6 applies after the magic substitution
    ![](../Images/425bb2ac317cbb3d333a9f66c96f2edd.jpg) The thought of carrying this
    to completion for a complicated function is too horrible for me to contemplate,
    but it ought to work. Theoretically the same thing should work for rational functions
    of sinh's and cosh's using the substitution ![](../Images/b589e2cb37021fc159789f87227e9d78.jpg)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. **x 的正弦和余弦的有理函数**（理论上）。这可以通过神奇的代换 ![](../Images/425bb2ac317cbb3d333a9f66c96f2edd.jpg)
    减少为一个有理函数，然后应用情况 6。对于一个复杂函数完成这个过程的想法对我来说太可怕了，但它应该有效。理论上，对于 sinh 和 cosh 的有理函数，使用代换
    ![](../Images/b589e2cb37021fc159789f87227e9d78.jpg) 应该也可以。
- en: 8\. **A rational function of any of ![](../Images/bc0f401519e58d294f4fcf10a425c440.jpg)
    and x, or of ![](../Images/a23f1812be41d366a6440f9db2630ad3.jpg) and x, or of
    ![](../Images/f8250ac628c8be166067353c31886aee.jpg) and x.** To do these you use
    the substitution x = sin t, or x = cosh t or x = sinh t, respectively to obtain
    a rational function of sines and cosines of t in the first case and of sinh's
    and cosh's in the latter two cases. You can then apply case 7 to finish the job.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. **任何 ![](../Images/bc0f401519e58d294f4fcf10a425c440.jpg) 和 x，或者 ![](../Images/a23f1812be41d366a6440f9db2630ad3.jpg)
    和 x，或者 ![](../Images/f8250ac628c8be166067353c31886aee.jpg) 和 x 的有理函数。** 要做到这些，你可以使用代换
    x = sin t，或者 x = cosh t 或者 x = sinh t，分别得到 t 的正弦和余弦的有理函数，然后可以应用情况 7 完成任务。
- en: 9\. **A rational function of x and of one square root, of either a linear or
    quadratic function.** (An ugly example is ![](../Images/3722ce8a50756358061216198ea3f8eb.jpg);
    here is another ![](../Images/d60f382c45879e40db578db641919251.jpg).)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. **x 和一个平方根的有理函数，要么是线性函数要么是二次函数。**（一个丑陋的例子是 ![](../Images/3722ce8a50756358061216198ea3f8eb.jpg)；这里是另一个
    ![](../Images/d60f382c45879e40db578db641919251.jpg)。）
- en: If you have a square root of a linear factor you can use the substitution t
    = that square root factor, to convert your integrand to a rational function, which
    you can then integrate using case 6.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个线性因子的平方根，你可以使用代换 t = 那个平方根因子，将你的被积函数转换为一个有理函数，然后可以使用情况 6 进行积分。
- en: With a quadratic factor you **complete the square** and then make linear substitutions
    to get your integrand into one of the forms of case 8.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于二次因子，你可以**完成平方**，然后进行线性替换，将被积函数转换为情况 8 的形式之一。
- en: It is a good idea to be able to recognize the classes of integrands to which
    these methods might be applied. However, unless you never make errors in doing
    anything, I suggest you use Maple or Mathematica or something like that to actually
    do complicated integrals of the later kinds if you are forced to do one.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 能够识别这些方法可能适用的被积函数类别是个好主意。然而，除非你在做任何事情时从不犯错误，否则我建议你如果被迫做一个复杂的后续类型的积分，最好使用 Maple
    或 Mathematica 或类似的工具来实际完成。
- en: There are some easy examples you could practice on to get an idea what is involved.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些简单的例子可以练习，以了解涉及的内容。
- en: 10\. **The product of a sine or cosine or exponent in x and a polynomial in
    x.**
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. **正弦、余弦或指数与 x 中的多项式的乘积。**
- en: This reduces to doing the product of sine, cosine or exponent and a single power
    for each power in the polynomial and adding the results.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以简化为对每个多项式中的幂进行正弦、余弦或指数与单个幂的乘积，并将结果相加。
- en: The latter integrals can be done either by integrating by parts or differentiating
    with respect to a parameter, both of which are discussed below.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 后面的积分可以通过分部积分或关于参数的微分来完成，这两种方法都在下面讨论。
- en: 11\. **The product of an exponent, a polynomial in sines and cosines and a polynomial
    in x.** This can be reduced to case 10 by using the expression for trigonometric
    functions as complex exponentials.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. **指数、正弦和余弦的多项式与 x 的多项式的乘积。**这可以通过使用三角函数的复指数表达式将其简化为情况 10。
- en: 12\. **Integrals involving logarithms and other functions.** You can get rid
    of the logarithms by **integrating by parts,** and then, if you get something
    you can recognize above, you can finish the job.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. **涉及对数和其他函数的积分。**你可以通过**分部积分**来消除对数，然后，如果你得到了你可以识别的内容，你就可以完成任务。
- en: '**Are these all the functions that we can integrate?**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**这些是我们可以积分的所有函数吗？**'
- en: No, there are others. (You can generate arbitrarily complicated functions that
    you can integrate by writing down horrible looking functions and differentiating
    them. You will find it easy to integrate the results.)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不，还有其他的。(你可以通过写出看起来很可怕的函数并对其进行微分来生成任意复杂的函数，你会发现将结果积分很容易。)
- en: And **every integrand** consisting of standard functions that are not singular
    where being integrated can be integrated numerically to whatever accuracy you
    want. The advantage of the methods described above over numerical integration
    is that you can keep parameters indefinite here, and must specify them when doing
    a straightforward numerical integration.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**每个被积函数**由标准函数组成，在积分时不会出现奇点，可以以任何所需的精度进行数值积分。上述方法相对于数值积分的优势在于，你可以在这里保持参数不定，并且必须在进行简单的数值积分时指定它们。'
- en: In addition there is a large class of special functions whose properties have
    been extensively studied, and a large number of integrals that can be expressed
    in terms of them.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一大类特殊函数，它们的性质已经被广泛研究，并且大量的积分可以用它们来表示。
- en: In this modern age it is a good idea to cultivate the art of recognizing which
    integrands look integrable to you. If the function you want to integrate does
    not look familiar to you try one of the mathematics programs.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个现代化的时代，培养识别哪些被积函数看起来对你来说是可积的艺术是一个好主意。如果你要积分的函数对你来说看起来不熟悉，请尝试使用其中一个数学程序。
- en: 19.5 Integration by Parts
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19.5 分部积分
- en: The second useful tool is the backward version of the product rule. The product
    rule, as we have noted often, tells us
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个有用的工具是乘积法则的反向版本。正如我们经常提到的，乘积法则告诉我们
- en: '![](../Images/5179bacdec953e479f968147818bb78d.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5179bacdec953e479f968147818bb78d.jpg)'
- en: This means that if we seek an anti-derivative of h(x) and we can write h as
    fg', then we can write fg' as (fg)' - f 'g, and an anti-derivative of fg' is then
    the difference between any anti-derivative of (fg)' and one of f 'g.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果我们寻求 h(x) 的一个反导数，并且我们可以将 h 写成 fg'，那么我们可以将 fg' 写成 (fg)' - f 'g，并且 fg' 的一个反导数就是
    (fg)' 的任意反导数与 f 'g 的一个之间的差值。
- en: But an anti-derivative of (fg)' is given by fg; so we can use the product rule
    here to reduce the problem of finding an anti-derivative of fg' to finding an
    anti-derivative of f 'g, for any f and g.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 (fg)' 的一个反导数由 fg 给出；所以我们可以在这里使用乘积法则将寻找 fg' 的反导数的问题简化为寻找 f 'g 的反导数，对于任何 f
    和 g。
- en: This tool is useful for finding anti-derivatives of products of the form A(x)x
    if you know an anti-derivative B(x) for A(x) and an anti-derivative C(x) for B(x)
    as well.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于形式为 A(x)x 的乘积，如果你知道 A(x) 的一个反导数 B(x) 和 B(x) 的一个反导数 C(x)，那么这个工具就是有用的。
- en: We can set f = x and g = B in the identity above, and write A(x)x = B'(x)x,
    which by this procedure is (Bx)' - B, where we have used the identity x' = 1\.
    This has Bx - C as an anti-derivative and Bx - C is therefore an anti-derivative
    of Ax.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在上述等式中将 f = x 和 g = B，然后写出 A(x)x = B'(x)x，通过这个过程是 (Bx)' - B，其中我们使用了恒等式 x'
    = 1。这具有 Bx - C 作为一个反导数，因此 Bx - C 因此是 Ax 的一个反导数。
- en: The procedure is called **integration by parts.** It is useful for finding anti-derivatives
    of products of exponentials and powers or of trigonometric functions and powers
    or of logarithms and powers, among other things.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程称为**分部积分**。它对于找到指数和幂的乘积、三角函数和幂的乘积或对数和幂的乘积的反函数非常有用，等等。
- en: '**For example, suppose we want to integrate x ln x dx, that is, we seek the
    antiderivative of x ln x with respect to x.**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**例如，假设我们要对 x ln x dx 进行积分，也就是说，我们要求关于 x 的 x ln x 的反导数。**'
- en: If we set u = ln x and dv = x dx, we can deduce that ![](../Images/cde9cd8fdcf0e4d70c4d29952dacd23f.jpg)
    is a possible antiderivative of x.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们设 u = ln x 并且 dv = x dx，我们可以推导出 ![](../Images/cde9cd8fdcf0e4d70c4d29952dacd23f.jpg)
    是 x 的一个可能的反函数。
- en: Integrating by parts tells us then udv = (uv)' - vdu which gives, after integrating
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分部积分，我们得到 udv = (uv)' - vdu，积分后得到
- en: '![](../Images/41da3f818c1c75a9a4c6cb5434cb1bb6.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41da3f818c1c75a9a4c6cb5434cb1bb6.jpg)'
- en: '**Exercises:**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**'
- en: '**Try integrating the following integrands with respect to x by using this
    technique:**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试使用这种技巧对下面的被积函数关于 x 进行积分：**'
- en: '**19.1\. x⁴(ln x)**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**19.1\. x⁴(ln x)**'
- en: '**19.2\. x sin x**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**19.2\. x sin x**'
- en: '**19.3\. x exp x**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**19.3\. x exp x**'
- en: '**19.4\. (sin x) exp x (Hint: integrate by parts twice and solve the resulting
    equation.)**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**19.4\. (sin x) exp x (提示：分部积分两次并解出得到的方程。)**'
- en: '**19.5\. x (sin x) exp x**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**19.5\. x (sin x) exp x**'
- en: 19.6 Differentiation with Respect to a Parameter
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19.6 关于参数的微分
- en: There is one other tool that can sometimes be used to evaluate anti-derivatives
    that works when certain convergence conditions hold.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种工具，有时可以用来计算反函数，当满足某些收敛条件时有效。
- en: Suppose we know the anti-derivative of g(x, y) where g is some differentiable
    function of the parameter y, as well as a function of x. Then we can deduce that
    an anti-derivative of ![](../Images/a0ec9f80308b7716f631899f7afb63f5.jpg) is the
    derivative with respect to y of an anti-derivative of g.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们知道 g(x, y) 的反函数，其中 g 是参数 y 的某个可微函数，同时也是 x 的一个函数。然后我们可以推导出 ![](../Images/a0ec9f80308b7716f631899f7afb63f5.jpg)
    的反函数是 g 的反函数关于 y 的导数。
- en: For example, we know that an anti-derivative of ![](../Images/c49fc6bbfe218ad5b8af76acbb7df7df.jpg)
    We may then deduce that an anti-derivative of ![](../Images/f874c587237f6aaa5997f52d3d31d4be.jpg)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们知道 ![](../Images/c49fc6bbfe218ad5b8af76acbb7df7df.jpg) 的一个原函数是![](../Images/f874c587237f6aaa5997f52d3d31d4be.jpg)
- en: You can take higher derivatives with respect to y here as well. This allows
    you to deduce a formula for an anti-derivative of a function of the form x^k e^(ax),
    by differentiating ![](../Images/e8926c801f88818a509f9dacf1c0c624.jpg) k times
    with respect to y and then setting y = a.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你也可以对 y 进行更高阶的导数。这使得你可以通过对 ![](../Images/e8926c801f88818a509f9dacf1c0c624.jpg)
    关于 y 求 k 次导数，然后设置 y = a 来推导出形如 x^k e^(ax) 的反函数的公式。
- en: This method when it applies converts finding anti-derivatives to making appropriate
    differentiations. However, almost everything you can deduce this way can be gotten
    as well by integrating by parts judiciously.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当适用时，这种方法将反函数的查找转换为适当的求导。然而，几乎你用这种方法推导出的一切都可以通过分部积分得到。
- en: 19.7 Partial Fraction Decomposition
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19.7 部分分解
- en: We know how to anti-differentiate a function of the form ![](../Images/7d60ddfbd00c9349847227a1de25b79f.jpg)
    for any a and b. This will allow us to find the anti-derivative of a rational
    function ![](../Images/97be8db9564a16acbf84af50820ad0ad.jpg) if we can reduce
    it to a sum of terms of that form and possibly a polynomial instead.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道如何对形如 ![](../Images/7d60ddfbd00c9349847227a1de25b79f.jpg) 的函数进行反函数，其中 a
    和 b 可以是任意值。这将使我们能够找到有理函数 ![](../Images/97be8db9564a16acbf84af50820ad0ad.jpg) 的反函数，如果我们能将它化简为这种形式的项的和以及可能的多项式。
- en: If p(x) has a higher degree than q(x) we can extract a quotient polynomial s(x)
    by a process akin to long division called synthetic division.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 p(x) 的次数高于 q(x)，我们可以通过类似长除法的过程提取一个商多项式 s(x)，称为合成除法。
- en: We may then be left with a remainder polynomial r(x). We know how to anti-differentiate
    s(x) so the task of anti-differentiating ![](../Images/97be8db9564a16acbf84af50820ad0ad.jpg)reduces
    to anti-differentiating ![](../Images/e1d314165132c769fe4f13edce75f188.jpg) where
    the numerator has lower degree than the denominator.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可能会剩下一个余项多项式 r(x)。我们知道如何对 s(x) 进行反函数，因此对于 ![](../Images/97be8db9564a16acbf84af50820ad0ad.jpg)
    的反函数化简为对 ![](../Images/e1d314165132c769fe4f13edce75f188.jpg) 进行反函数，其中分子的次数低于分母的次数。
- en: Suppose now that we can factor q into factors like (x-a) or (x-b)³ or ((x-d)²+
    c²)^m.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们可以将 q 因式分解成像 (x-a) 或 (x-b)³ 或 ((x-d)²+ c²)^m 这样的因子。
- en: The wonderful fact is that the expression ![](../Images/e1d314165132c769fe4f13edce75f188.jpg)can
    be separated into terms each of which has the form ![](../Images/bd42148eb8832ed4af5df1763d1cc203.jpg)or
    ![](../Images/3e9842d6ae64f84d3f7fceaec5c3217f.jpg) for some a's, d's and c's
    and integer values of b, each of which can be anti-differentiated.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的事实是，表达式 ![](../Images/e1d314165132c769fe4f13edce75f188.jpg)可以分解为每个都具有形式
    ![](../Images/bd42148eb8832ed4af5df1763d1cc203.jpg)或 ![](../Images/3e9842d6ae64f84d3f7fceaec5c3217f.jpg)的项，其中a、d和c为某些整数值的b，每个都可以进行反求导。
- en: And here is a procedure for separating it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个分解它的过程。
- en: Suppose the denominator q can be factored into (x-b)^kt(x) such that t(b) is
    not 0.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 假设分母q可以分解为(x-b)^kt(x)，使得t(b)不为0。
- en: And suppose we find the first k terms of the *Taylor series expansion* of ![](../Images/849d7c5abcd375857a9bc3edab7330c4.jpg)
    about x = b
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们找到了关于x = b的![](../Images/849d7c5abcd375857a9bc3edab7330c4.jpg)的*泰勒级数展开*的前k项
- en: '![](../Images/fb50f5d332397e55cb3f5501015c9118.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fb50f5d332397e55cb3f5501015c9118.jpg)'
- en: 'Then the terms in ![](../Images/e1d314165132c769fe4f13edce75f188.jpg) that
    involve inverse powers of (x-b) are given as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 那么在涉及(x-b)的负幂的![](../Images/e1d314165132c769fe4f13edce75f188.jpg)中，给出如下：
- en: '**If k = 1** there is only one term, ![](../Images/de5354d1acbb986cf2488cada223812d.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果k = 1**，则只有一个项，![](../Images/de5354d1acbb986cf2488cada223812d.jpg)'
- en: '**For k = 2** we have ![](../Images/c44da2e97e6647a7a570158d45421029.jpg) where
    A is as before while B is ![](../Images/c4fedc2b2774326ac6ec0e58e93de156.jpg)
    and so on.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于k = 2**，我们有 ![](../Images/c44da2e97e6647a7a570158d45421029.jpg)，其中A与之前一样，而B为
    ![](../Images/c4fedc2b2774326ac6ec0e58e93de156.jpg)，依此类推。'
- en: There are similar rules for quadratic factors.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于二次因子也有类似的规则。
- en: The process of separating the denominator q in this manner is called **"the
    method of partial fractions".**
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式分解分母q的过程称为**"部分分式法"**。
- en: We review the various methods again in [Section 27.1](../chapter27/section01.html)
    and some integrals to practice on are given in [Section 27.3](../chapter27/section03.html).
    We apologize for the redundancy.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次回顾各种方法，详见[第27.1节](../chapter27/section01.html)，并提供一些练习积分，详见[第27.3节](../chapter27/section03.html)。对于重复我们深感抱歉。
