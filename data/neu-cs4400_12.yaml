- en: The `match` FormTuesday, January 17th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`match`形式'
- en: The syntax for `match` is
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`match`的语法是'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The value is matched against each pattern, possibly binding names in the process,
    and if a pattern matches it evaluates the result expression. The simplest form
    of a pattern is simply an identifier — it always matches and binds that identifier
    to the value:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将值与每个模式进行匹配，可能在此过程中绑定名称，如果模式匹配，则评估结果表达式。模式的最简单形式只是一个标识符——它总是匹配并绑定该标识符到值：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Another simple pattern is a quoted symbol, which matches that symbol. For example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个简单的模式是引用的符号，它匹配该符号。例如：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: will evaluate to `"yes"` if `foo` is the symbol `x`, and to `"no"` otherwise.
    Note that `else` is not a keyword here — it happens to be a pattern that always
    succeeds, so it behaves like an else clause except that it binds `else` to the
    unmatched-so-far value.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`foo`是符号`x`，则将计算为`"yes"`，否则为`"no"`。请注意，在这里`else`不是关键字——它恰好是一个总是成功的模式，因此它的行为类似于一个else子句，只是它将`else`绑定到到目前为止未匹配的值。
- en: 'Many patterns look like function application — but don’t confuse them with
    applications. A `(list x y z)` pattern matches a list of exactly three items and
    binds the three identifiers; or if the “arguments” are themselves patterns, `match`
    will descend into the values and match them too. More specifically, this means
    that patterns can be nested:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 许多模式看起来像函数应用程序 —— 但不要将它们与应用程序混淆。`(list x y z)`模式匹配恰好三个项目的列表并绑定三个标识符；或者如果“参数”本身是模式，`match`将会进入值并匹配它们。更具体地说，这意味着模式可以被嵌套：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There is also a `cons` pattern that matches a non-empty list and then matches
    the first part against the head for the list and the second part against the tail
    of the list.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个`cons`模式，它匹配非空列表，然后将第一部分与列表的头部匹配，将第二部分与列表的尾部匹配。
- en: 'In a `list` pattern, you can use `...` to specify that the previous pattern
    is repeated zero or more times, and bound names get bound to the list of respective
    matching. One simple consequent is that the `(list hd tl ...)` pattern is exactly
    the same as `(cons hd tl)`, but being able to repeat an arbitrary pattern is very
    useful:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在`list`模式中，你可以使用`...`来指定前一个模式重复零次或多次，并且绑定的名称将绑定到相应匹配的列表。一个简单的结果是`(list hd tl
    ...)`模式与`(cons hd tl)`完全相同，但能够重复任意模式非常有用：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A few more useful patterns:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 几个更有用的模式：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The patterns are tried one by one *in-order*, and if no pattern matches the
    value, an error is raised.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 模式按顺序逐个尝试，并且如果没有模式匹配该值，则会引发错误。
- en: Note that `...` in a `list` pattern can follow *any* pattern, including all
    of the above, and including nested list patterns.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在`list`模式中，`...`可以跟随*任何*模式，包括上述所有模式，以及嵌套的列表模式。
- en: 'Here are a few examples — you can try them out with `#lang pl untyped` at the
    top of the definitions window. This:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例 — 您可以在定义窗口顶部使用`#lang pl untyped`尝试它们。这个：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'matches `x` against a pattern that accepts only a list of symbols, and binds
    `syms` to those symbols. And here’s an example that matches a list of any number
    of lists, where each of the sub-lists begins with a symbol and then has any number
    of numbers. Note how the `n` and `s` bindings get values for a list of all symbols
    and a list of lists of the numbers:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将`x`与只接受符号列表的模式进行匹配，并将`syms`绑定到这些符号。这里是一个匹配任意数量列表的列表的示例，其中每个子列表以一个符号开始，然后有任意数量的数字。请注意`n`和`s`绑定如何为所有符号列表和数字列表的列表获取值：
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is a quick example for how `or` is used with two literal alternatives,
    how `and` is used to name a specific piece of data, and how `or` is used with
    a binding:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个快速示例，说明了`or`与两个文字替代项一起使用的方式，`and`用于命名特定的数据片段，以及`or`与一个绑定一起使用的方式：
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
