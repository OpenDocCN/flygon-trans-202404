- en: Before You Refactor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在重构之前
- en: Before You Refactor
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在重构之前
- en: 'At some point every programmer will need to refactor existing code. But before
    you do so please think about the following, as this could save you and others
    a great deal of time (and pain):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个程序员在某个时候都需要重构现有代码。但在这样做之前，请考虑以下事项，因为这可能会为您和其他人节省大量的时间（和痛苦）：
- en: '*The best approach for restructuring starts by taking stock of the existing
    codebase and the tests written against that code.* This will help you understand
    the strengths and weaknesses of the code as it currently stands, so you can ensure
    that you retain the strong points while avoiding the mistakes. We all think we
    can do better than the existing system... until we end up with something no better
    — or even worse — than the previous incarnation because we failed to learn from
    the existing system''s mistakes.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*重组的最佳方法始于对现有代码库和针对该代码编写的测试进行清点。* 这将帮助您了解当前代码的优点和缺点，以便您确保保留优点同时避免错误。我们都认为自己能做得比现有系统更好……直到我们最终得到的东西比以前的版本更糟
    —— 或者甚至更糟 —— 因为我们没有从现有系统的错误中吸取教训。'
- en: '*Avoid the temptation to rewrite everything.* It is best to reuse as much code
    as possible. No matter how ugly the code is, it has already been tested, reviewed,
    etc. Throwing away the old code — especially if it was in production — means that
    you are throwing away months (or years) of tested, battle-hardened code that may
    have had certain workarounds and bug fixes you aren''t aware of. If you don''t
    take this into account, the new code you write may end up showing the same mysterious
    bugs that were fixed in the old code. This will waste a lot of time, effort, and
    knowledge gained over the years.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*避免重写一切的诱惑。* 尽可能重用尽可能多的代码是最好的。无论代码有多丑陋，它都已经经过测试、审查等。抛弃旧代码 —— 尤其是如果它已经投入生产 ——
    就意味着你要抛弃经过测试、经过考验的代码，这些代码可能有某些你不知道的变通方法和错误修复。如果你没有考虑到这一点，你写的新代码可能会出现与旧代码修复的同样神秘的错误。这将浪费大量的时间、精力和多年来积累的知识。'
- en: '*Many incremental changes are better than one massive change.* Incremental
    changes allows you to gauge the impact on the system more easily through feedback,
    such as from tests. It is no fun to see a hundred test failures after you make
    a change. This can lead to frustration and pressure that can in turn result in
    bad decisions. A couple of test failures is easy to deal with and provides a more
    manageable approach.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*许多增量改变比一个大改变更好。* 增量改变使您可以通过反馈更容易地评估对系统的影响，例如来自测试的反馈。在做出更改后看到一百个测试失败并不好玩。这可能导致沮丧和压力，反过来又会导致糟糕的决定。处理几个测试失败更容易，提供了一种更可管理的方法。'
- en: '*After each iteration, it is important to ensure that the existing tests pass.*
    Add new tests if the existing tests are not sufficient to cover the changes you
    made. Do not throw away the tests from the old code without due consideration.
    On the surface some of these tests may not appear to be applicable to your new
    design, but it would be well worth the effort to dig deep down into the reasons
    why this particular test was added.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*每次迭代后，确保现有的测试通过是很重要的。* 如果现有测试不足以覆盖您所做的更改，请添加新的测试。在不适当考虑的情况下不要丢弃旧代码的测试。表面上，其中一些测试可能看起来与您的新设计无关，但深入挖掘为什么添加了这个特定的测试会很值得。'
- en: '*Personal preferences and ego shouldn''t get in the way.* If something isn''t
    broken, why fix it? That the style or the structure of the code does not meet
    your personal preference is not a valid reason for restructuring. Thinking you
    could do a better job than the previous programmer is not a valid reason either.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*个人偏好和自我不应成为阻碍。* 如果某件事没有问题，为什么要修复它？代码的样式或结构不符合您的个人偏好并不是重构的有效理由。认为自己比以前的程序员做得更好也不是有效的理由。'
- en: '*New technology is insufficient reason to refactor.* One of the worst reasons
    to refactor is because the current code is way behind all the cool technology
    we have today, and we believe that a new language or framework can do things a
    lot more elegantly. Unless a cost–benefit analysis shows that a new language or
    framework will result in significant improvements in functionality, maintainability,
    or productivity, it is best to leave it as it is.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*新技术不是重构的充分理由。* 重构的最糟糕的理由之一是因为当前的代码远远落后于我们今天拥有的所有很酷的技术，我们相信一个新的语言或框架可以更优雅地完成某些事情。除非成本效益分析表明新的语言或框架将在功能、可维护性或生产率方面带来显著的改进，否则最好保持原样。'
- en: '*Remember that humans make mistakes.* Restructuring will not always guarantee
    that the new code will be better — or even as good as — the previous attempt.
    I have seen and been a part of several failed restructuring attempts. It wasn''t
    pretty, but it was human.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*记住人都会犯错误。* 重构并不总能保证新的代码会比之前的尝试更好，甚至与之前的一样好。我见过并参与了几次失败的重构尝试。虽然不美观，但却是人之常情。'
- en: by [Rajith Attapattu](http://programmer.97things.oreilly.com/wiki/index.php/Rajith_Attapattu)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Rajith Attapattu](http://programmer.97things.oreilly.com/wiki/index.php/Rajith_Attapattu)提供。
