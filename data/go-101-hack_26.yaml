- en: Buffered read
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓冲读取
- en: Buffered read
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓冲读取
- en: '[bufio](https://golang.org/pkg/bufio/) package provides buffered read functions.
    Let''s see an example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[bufio](https://golang.org/pkg/bufio/)包提供了缓冲读取函数。让我们看一个例子：'
- en: '(1) Create a `test.txt` file first:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: (1) 首先创建一个`test.txt`文件：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can see `test.txt` contains `4` lines.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到`test.txt`包含`4`行。
- en: '(2) See the following program:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: (2) 查看以下程序：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (a)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: (a)
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open `test.txt` file.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`test.txt`文件。
- en: (b)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: (b)
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`bufio.NewReader(f)` creates a [bufio.Reader](https://golang.org/pkg/bufio/#Reader)
    struct which implements buffered read function.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`bufio.NewReader(f)`创建一个[bufio.Reader](https://golang.org/pkg/bufio/#Reader)结构，实现了缓冲读取功能。'
- en: (c)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: (c)
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Read and print each line.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 读取并打印每一行。
- en: 'The running result is here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 运行结果在这里：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can also use [bufio.Scanner](https://golang.org/pkg/bufio/#Scanner) to implement
    above "print each line" function:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用[bufio.Scanner](https://golang.org/pkg/bufio/#Scanner)来实现上述的"打印每一行"功能：
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: (a)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: (a)
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`bufio.NewScanner(f)` creates a new [bufio.Scanner](https://golang.org/pkg/bufio/#Scanner)
    struct which splits the content by line by default.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`bufio.NewScanner(f)`创建一个新的[bufio.Scanner](https://golang.org/pkg/bufio/#Scanner)结构，默认按行分隔内容。'
- en: (b)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: (b)
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`s.Scan()` advances the `bufio.Scanner` to the next token (in this case, it
    is one optional carriage return followed by one mandatory newline), and we can
    use `s.Text()` function to get the content.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`s.Scan()`将`bufio.Scanner`推进到下一个标记（在本例中，是一个可选的回车符后跟一个必需的换行符），我们可以使用`s.Text()`函数获取内容。'
- en: 'We can also customize [SplitFunc](https://golang.org/pkg/bufio/#SplitFunc)
    function which doesn''t separate content by line. Check the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以自定义[SplitFunc](https://golang.org/pkg/bufio/#SplitFunc)函数，它不会按行分隔内容。查看以下代码：
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `split` function separates the content by "`h`", and the running result
    is:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`split`函数通过"`h`"分隔内容，运行结果是：'
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
