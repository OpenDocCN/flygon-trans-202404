- en: 'Lecture 2: Syntax and Evaluation of OCaml Programs'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二讲：OCaml 程序的语法和评估
- en: 'Summary of topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 主题摘要：
- en: OCaml syntax
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OCaml 语法
- en: Expression, terms, types, and values
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式、项、类型和值
- en: Errors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误
- en: Evaluation and rewrite rules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估和重写规则
- en: Namespaces and scope
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间和作用域
- en: Qualified identifiers and libraries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限定标识符和库
- en: OCaml syntax
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OCaml 语法
- en: 'In the previous recitation, you should have seen a few simple expression and
    declaration forms for OCaml.  The syntax of this fragment of the language can
    be summarized as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一次讲座中，您应该已经看到了 OCaml 的一些简单表达式和声明形式。这个语言片段的语法可以总结如下：
- en: '| syntactic class | syntactic variable(s) and grammar rule(s) | examples |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 语法类 | 语法变量和语法规则 | 示例 |'
- en: '| **identifiers** | *x, f* | `a`, `x`, `y`, `x_y`, `foo1000`, ... |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| **标识符** | *x, f* | `a`, `x`, `y`, `x_y`, `foo1000`, ... |'
- en: '| **constants** | *c* | ...`-2`, `-1`, `0`, `1`, `2` (integers) `1.0`, `-0.001`,
    `3.141` (floats)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '| **常量** | *c* | ...`-2`, `-1`, `0`, `1`, `2`（整数）`1.0`, `-0.001`, `3.141`（浮点数）'
- en: '`true`, `false` (booleans)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`true`, `false`（布尔值）'
- en: '`"hello"`, `""`, `"!"` (strings)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`"hello"`, `""`, `"!"`（字符串）'
- en: '`''A''`, `'' ''`, `''\n''` (characters) |'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`''A''`, `'' ''`, `''\n''`（字符） |'
- en: '| **unary operator** | *u* | `-`, `not` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| **一元运算符** | *u* | `-`, `not` |'
- en: '| **binary operators** | *b* | `+`, `*`, `-`, `>`, `<`, `>=`, `<=`, `^`, `!=`,
    ... |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **二元运算符** | *b* | `+`, `*`, `-`, `>`, `<`, `>=`, `<=`, `^`, `!=`, ... |'
- en: '| **terms** | *e* ::= *x*  &#124;  *c * &#124;  *u e  &#124;  e*[1]* b e*[2]
    *&#124;*`if`* e *`then`* e* `else`* e  &#124;  *`let` *d*[1] `and`...`and` *d[n]*`in`*e*
     &#124;  *e* `(`*e*[1]`,` ...`,` *e**[n]*`)` | `foo`, `-0.001`, `not` `b`, `2+2`
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| **项** | *e* ::= *x*  &#124;  *c * &#124;  *u e  &#124;  e*[1]* b e*[2] *&#124;*`if`* e *`then`* e* `else`* e
     &#124;  *`let` *d*[1] `and`...`and` *d[n]*`in`*e*  &#124;  *e* `(`*e*[1]`,` ...`,` *e**[n]*`)`
    | `foo`, `-0.001`, `not` `b`, `2+2` |'
- en: '| **declarations** | *d* ::= *x = e  &#124;  * * f *`(` *x*[1], ...,  *x[n]*`):`
    *t* =  *e* | `one = 1 square(x:int):int = x*x` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| **声明** | *d* ::= *x = e  &#124;  * * f *`(` *x*[1], ...,  *x[n]*`):` *t* = 
    *e* | `one = 1 square(x:int):int = x*x` |'
- en: '| **types** | *t* ::= `int`  &#124;  `float`  &#124;  `bool`  &#124;  `string`
     &#124;  `char`  &#124;  *t*[1]`*`...`*`*t[n]*`->`*t* | `int`, `string`, `int->int`,
    `bool*int->bool` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | *t* ::= `int`  &#124;  `float`  &#124;  `bool`  &#124;  `string`
     &#124;  `char`  &#124;  *t*[1]`*`...`*`*t[n]*`->`*t* | `int`, `string`, `int->int`,
    `bool*int->bool` |'
- en: A program in OCaml, like any other language, is made up of various kinds of
    **expressions**. The table above describes how to construct some of those expressions.
    That is, it specifies some of the syntax of OCaml. Some of these expressions,
    such as identifiers, constants, and operators, we have described only by example.
    These expressions are all single **tokens**. Other expressions, such as terms,
    declarations, and types, are described by **grammar rules**. These rules are written
    in a form known as BNF, for **B**ackus-**N**aur **F**orm (named after its inventors).
    Each rule describes various ways to build a particular kind of expression, separated
    by vertical bars. For example, a term may be an identifier, a constant, any unary
    operator *u* followed by any expression *e* (*u e*), any two terms *e*[1] and
    *e*[2] separated by any binary operator *b*, and so on. Notice that we use the
    letter *u* to represent any unary operator and the letter *e* to represent any
    term. These are examples of **syntactic variables** or **metavariables**. A syntactic
    variable is not an OCaml program variable; it is just a generic name for a certain
    syntactic construct. For instance, *x* can be any identifier, and *e* can be any
    expression. We sometimes stick subscripts on syntactic variables to help us keep
    them distinct (as is done above), but this is not necessary.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 OCaml 程序，像任何其他语言一样，由各种 **表达式** 组成。上表描述了如何构造其中一些表达式。也就是说，它指定了 OCaml 的一些语法。其中一些表达式，比如标识符、常量和运算符，我们仅通过示例来描述。这些表达式都是单个
    **标记**。其他表达式，比如项、声明和类型，由 **语法规则** 描述。这些规则以称为 BNF（巴科斯-瑙尔形式）的形式编写。每个规则描述了构建特定类型的表达式的各种方法，用竖线分隔。例如，一个项可以是一个标识符、一个常量、任何一元运算符
    *u* 后跟任何表达式 *e*（*u e*）、任何两个项 *e*[1] 和 *e*[2] 之间用任何二元运算符 *b* 分隔，等等。注意，我们使用字母 *u*
    表示任何一元运算符，字母 *e* 表示任何项。这些都是 **语法变量** 或 **元变量** 的示例。语法变量不是 OCaml 程序变量；它只是某种语法结构的通用名称。例如，*x*
    可以是任何标识符，*e* 可以是任何表达式。我们有时在语法变量上加上下标以帮助我们将它们区分开（如上所示），但这并非必需。
- en: The OCaml interpreter allows either terms or declarations to be typed at the
    prompt. We can think of a program as being just an OCaml expression, although
    later we'll see it is more complex.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: OCaml 解释器允许在提示符处输入项或声明。我们可以将程序看作仅仅是一个 OCaml 表达式，尽管后面我们会发现它更复杂。
- en: Program errors
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 程序错误
- en: Just because an expression has legal syntax doesn't mean that it is legal; the
    expression must also be well-typed. That is, it must use expressions only in accordance
    with their types. We will look at what it means for an expression to be well-typed
    in more detail later in the course. In general, it is useful to think of a type
    as a set of possible values (usually an infinite set). We will see that OCaml
    has a powerful, expressive type system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅因为一个表达式具有合法的语法并不意味着它是合法的；这个表达式还必须是类型正确的。也就是说，它必须仅使用与其类型相符的表达式。我们稍后会更详细地看一下表达式是什么意思。通常，把类型想象成一组可能的值（通常是无限集）是很有用的。我们将看到OCaml有一个功能强大、富有表现力的类型系统。
- en: 'More generally, there are many ways that an expression in OCaml can be wrong,
    like in English:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地说，OCaml中的表达式可以出错的方式有很多，就像在英语中一样：
- en: '*Syntax errors*: `let 0 x =`; "Spot run see"'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*语法错误*：`let 0 x =`；“斯波特跑看见”'
- en: '*Type errors*: `"x" + 3`; "See Spot ran"'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*类型错误*：`"x" + 3`；“看到斯波特跑了”'
- en: '*Semantic errors*: 1/0; "Colorless green ideas sleep furiously" (good grammar,
    incoherent semantics)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*语义错误*：1/0；“无色绿色的想法狂暴地睡觉”（良好的语法，不连贯的语义）'
- en: '*More general errors*: OCaml program that correctly computes the wrong answer,
    "Officer, you wouldn''t dare give me a ticket!"'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*更一般的错误*：正确计算错误答案的OCaml程序，“警官，您不敢给我开罚单！”'
- en: 'Now, how do we write expressions and declarations? Here is a declaration of
    a simple function that computes the absolute value of a given integer:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们如何编写表达式和声明呢？这里是一个简单函数的声明，它计算给定整数的绝对值：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Equivalently, one could write
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，也可以这样写
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: or more briefly,
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 或者更简洁地说，
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Every expression and declaration has both a *type* and a *value*.  When you
    type an expression or declaration into the OCaml top-level, it will report both
    the type and the value of the expression.  If we type the definition of `abs`
    at the OCaml prompt, followed by ;; to let the OCaml interpreter know that the
    expression should now be evaluated, it responds with
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 每个表达式和声明都有一个*类型*和一个*值*。当你在OCaml顶级环境中键入一个表达式或声明时，它会报告表达式的类型和值。如果我们在OCaml提示符下键入`abs`的定义，然后跟着`;;`，告诉OCaml解释器现在应该评估这个表达式，它会回应
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: which means that we have just bound the name `abs` to a function whose type
    is `int -> int`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们刚刚将名字`abs`绑定到一个类型为`int -> int`的函数上。
- en: Examples
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: Here is a function that determines whether its argument is a prime number. The
    type of the function is `int -> bool`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个确定其参数是否为素数的函数。这个函数的类型是`int -> bool`。
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are a couple things to notice about this program. First, note the use
    of the recursive helper function `noDivisors` that is declared inside the function
    `isPrime`. The function is defined with `let rec` because it is recursive. This
    function would be written with a loop in an imperative language, but an appropriately
    named helper function can be clearer to read than a generic loop. The scope of
    the declaration is the body of the declaration itself and the expression following
    the `in`; it is not available anywhere else.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个程序有几点需要注意。首先，注意到递归辅助函数`noDivisors`的使用，它被声明在函数`isPrime`内部。这个函数使用`let rec`来定义，因为它是递归的。在命令式语言中，这个函数会使用循环来写，但是使用一个恰当命名的辅助函数比通用的循环更易读。声明的作用域是声明本身的主体和跟在`in`后面的表达式；它在其他地方是不可用的。
- en: Here is a function that finds an approximation to the square root of a given
    floating point number.  It is based on the fact that for any positive numbers
    *x* and *g*, the numbers *g* and *x*/*g* lie on opposite sides of sqrt(*x*). 
    This is because their product is *x*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个找到给定浮点数的平方根近似值的函数。它基于这样一个事实：对于任何正数*x*和*g*，数字*g*和*x*/*g*位于sqrt(*x*)的两侧。这是因为它们的乘积是*x*。
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is example shows a number of things.  First, you can declare local values
    such as `delta` and local functions such as `goodEnough`, `improve`, and `tryGuess`. 
    Notice that "inner" functions, such as `improve`, can refer to "outer" variables
    (such as `x`).  Also notice that later declarations can refer to earlier declarations. 
    For instance, `tryGuess` refers to both `goodEnough` and `improve`.  Actually,
    the later declarations are inside the `in` expressions of the earlier ones.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了很多东西。首先，你可以声明局部变量，比如`delta`和局部函数，比如`goodEnough`、`improve`和`tryGuess`。注意，“内部”函数（比如`improve`）可以引用“外部”变量（比如`x`）。还要注意，后面的声明可以引用前面的声明。例如，`tryGuess`同时引用了`goodEnough`和`improve`。实际上，后面的声明都在前面的`in`表达式内部。
- en: 'If you type the `squareRoot` declaration above into the OCaml top-level, it
    responds with:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将上面的`squareRoot`声明键入OCaml顶级，它会响应：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'indicating that you''ve declared a variable (`squareRoot`), that its value
    is a function (`<fun>`), and that its type is a function from float to float. 
    All of the internal structure of the function definition is hidden; all we know
    from the outside is that its value is a simple function `float -> float`.  In
    particular, the function `tryGuess` is not defined outside of `squareRoot`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表示您声明了一个变量（`squareRoot`），其值是一个函数（`<fun>`），其类型是从浮点到浮点的函数。所有函数定义的内部结构都是隐藏的；从外部来看，我们只知道它的值是一个简单的函数`float
    -> float`。特别地，函数`tryGuess`在`squareRoot`之外没有定义：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After typing in the function, you might try it out on a floating point number
    such as 9.0:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在键入函数后，您可能会尝试在浮点数（如9.0）上使用它：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: OCaml has evaluated the expression `squareRoot 9.0` and printed its value (`3.0000000013969839`)
    and its type (`float`).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: OCaml已经评估了表达式`squareRoot 9.0`并打印了其值（`3.0000000013969839`）和其类型（`float`）。
- en: At the moment we have only an imprecise notion of exactly what happens when
    you type this expression into OCaml.  We will have a more precise understanding
    soon.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们对将此表达式键入OCaml时确切发生了什么有一个不精确的概念。我们很快将有更精确的理解。
- en: 'If you try to apply `squareRoot` to an expression that does not have type float
    (say an integer or a boolean), then you''ll get a type error:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试将`squareRoot`应用于没有浮点类型的表达式（例如整数或布尔值），那么您将收到一个类型错误：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: where carets (`^^^`) are used to indicate the erroneous expression.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在表达式中使用插入符号（`^^^`）来指示错误表达式。
- en: Qualified Identifiers and the Library
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限定标识符和库
- en: Qualified identifiers are of the form *x.y* where *x* is a **module** identifier. 
    Examples include `String.length`, `List.map`, and `String.sub`. As in Java with
    packages and classes, in OCaml qualified identifiers allow a set of names to be
    grouped together in a separate code module.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 限定标识符的形式为*x.y*，其中*x*是一个**模块**标识符。示例包括`String.length`、`List.map`和`String.sub`。与Java中的包和类一样，在OCaml中，限定标识符允许一组名称被分组在一个单独的代码模块中。
- en: Evaluation
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估
- en: 'The OCaml prompt lets you type either a term or a declaration that binds a
    variable to a term. It **evaluates** the term to produce a **value**: a term that
    does not need any further evaluation. We can define values *v* as a syntactic
    class too. For now, we can think of values as just being the same as constants,
    though we''ll see there is much more to them.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: OCaml提示符允许您键入一个术语或将变量绑定到一个术语的声明。它**评估**术语以产生一个**值**：一个不需要进一步评估的术语。我们也可以将值*v*定义为一个语法类。目前，我们可以认为值与常数相同，尽管我们将看到它们有更多的内容。
- en: 'Running an OCaml program is just evaluating a term. What happens when we evaluate
    a term? In an imperative (non-functional) language like Java, we sometimes imagine
    that there is an idea of a "current statement" that is executing. This isn''t
    a very good model for OCaml; it is better to think of OCaml programs as being
    evaluated in the same way that you would evaluate a mathematical expression. For
    example, if you see an expression like (1+2)*3, you know that you first evaluate
    the subexpression 1+2, getting a new expression 3*3\. Then you evaluate 3*3\.
    OCaml evaluation works the same way. As each point in time, the OCaml evaluator
    takes the left-most expression that is not a value and **rewrites** (or **reduces**)
    it to some simpler expression. Eventually the whole expression is a value and
    then evaluation stops: the program is done. Or maybe the expression never reduces
    to a value, in which case you have an infinite loop.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 运行OCaml程序只是评估一个术语。当我们评估一个术语时会发生什么？在一种命令式（非函数式）语言中，比如Java，有时我们会想象有一个正在执行的“当前语句”的概念。这对于OCaml来说不是一个很好的模型；最好将OCaml程序视为以与评估数学表达式相同的方式进行评估。例如，如果你看到一个表达式像(1+2)*3，你知道你首先评估子表达式1+2，得到一个新的表达式3*3。然后你评估3*3。OCaml评估的方式与此相同。在每个时刻，OCaml评估器获取最左边的不是值的表达式，并将其**重写**（或**简化**）为一些更简单的表达式。最终整个表达式都是一个值，然后评估停止：程序完成。或者可能表达式永远不会简化为一个值，在这种情况下，您会得到一个无限循环。
- en: 'OCaml has a bunch of built-in rules for rewriting terms that go well beyond
    simple arithmetic. Consider the if expression. It has two important rewrite rules:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: OCaml内置了许多重写规则，远远超出了简单的算术。考虑if表达式。它有两个重要的重写规则：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If the evaluator runs into an if expression, the first thing it does is try
    to reduce the conditional expression to either true or false. Then it can apply
    one of the two rules here.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果评估器遇到一个if表达式，它首先尝试将条件表达式简化为true或false。然后它可以应用这里的两条规则中的一条。
- en: Substitution
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替换
- en: 'The `let` expression is also evaluated using rewrite rules. It works by first
    evaluating all of its bindings. Then those bindings are substituted into the **body**
    of the `let` expression (the expression after the `in`). For example, here is
    a sequence of evaluation steps using `let`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用重写规则也会对`let`表达式进行评估。它的工作原理是首先评估所有的绑定。然后，这些绑定被替换到`let`表达式的**主体**（`in`之后的表达式）中。例如，下面是使用`let`的一系列评估步骤：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Function calls are the most interesting case. When a function is called, OCaml
    does a similar subsitution: it substitutes the values passed as arguments into
    the body of the function. Consider evaluating `abs(2+1)`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 函数调用是最有趣的情况。当调用函数时，OCaml会进行类似的替换：它将传递的参数值替换到函数的主体中。考虑评估`abs(2+1)`：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is a simple start on how to think about evaluation; we'll have more to
    say about evaluation in a couple of lectures.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的开始，介绍了如何思考评估问题；我们将在接下来的几堂课上进一步讨论评估问题。
