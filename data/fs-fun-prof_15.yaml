- en: Organizing modules in a project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目中组织模块
- en: Organizing modules in a project
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目中组织模块
- en: 'Before we move on to any coding in the recipe, let''s look at the overall structure
    of a F# project. In particular: (a) what code should be in which modules and (b)
    how the modules should be organized within a project.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行任何食谱中的编码之前，让我们看看F#项目的整体结构。特别是：（a）哪些代码应该放在哪些模块中，以及（b）模块应该在项目中如何组织。
- en: How not to do it
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何不这样做
- en: A newcomer to F# might be tempted to organize code in classes just like in C#.
    One class per file, in alphabetical order. After all, F# supports the same object-oriented
    features that C# does, right? So surely the F# code can be organized the same
    way as C# code?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 初学者可能会被诱惑将代码组织成类似于C#的方式。每个文件一个类，按字母顺序排列。毕竟，F#支持与C#相同的面向对象特性，对吧？所以F#代码肯定可以像C#代码一样组织？
- en: After a while, this is often followed by the discovery that F# requires files
    (and code within a file) to be in *dependency order*. That is, you cannot use
    forward references to code that hasn't been seen by the compiler yet**.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 过了一会儿，通常会发现F#要求文件（以及文件内的代码）按照*依赖顺序*排列。也就是说，你不能使用对编译器尚未看到的代码的前向引用**。
- en: This is followed by [general annoyance](http://www.sturmnet.org/blog/2008/05/20/f-compiler-considered-too-linear)
    and swearing. How can F# be so stupid? Surely it impossible to write any kind
    of large project!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这之后会出现[一般的恼怒](http://www.sturmnet.org/blog/2008/05/20/f-compiler-considered-too-linear)和咒骂。F#怎么会这么愚蠢呢？肯定无法编写任何大型项目！
- en: In this post, we'll look at one simple way to organize your code so that this
    doesn't happen.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将看一种简单的组织代码的方法，以便不会发生这种情况。
- en: '[** The `and` keyword can be used in some cases to allow mutual recursion,
    but is discouraged.]'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[** 在某些情况下，可以使用`and`关键字允许相互递归，但不建议使用。]'
- en: The functional approach to layered design
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分层设计的功能性方法
- en: 'A standard way of thinking about code is to group it into layers: a domain
    layer, a presentation layer, and so on, like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的一个标准思考方式是将其分组为层：领域层、展示层等，就像这样：
- en: '![Design layers](Recipe_DesignLayers1.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![设计层](Recipe_DesignLayers1.png)'
- en: Each layer contains *only* the code that is relevant to that layer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每个层只包含与该层相关的代码。
- en: But in practice, it is not that simple, as there are dependencies between each
    layer. The domain layer depends on the infrastructure, and the presentation layer
    depends on the domain.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但在实践中，情况并不那么简单，因为每个层之间存在依赖关系。领域层依赖基础设施，展示层依赖领域。
- en: And most importantly, the domain layer should *not* depend on the persistence
    layer. That is, it should be ["persistence agnostic"](http://stackoverflow.com/questions/905498/what-are-the-benefits-of-persistence-ignorance).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，领域层不应该依赖于持久化层。也就是说，它应该是["持久化无关的"](http://stackoverflow.com/questions/905498/what-are-the-benefits-of-persistence-ignorance)。
- en: 'We therefore need to tweak the layer diagram to look more like this (where
    each arrow represents a dependency):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要调整层次图，使其看起来更像这样（其中每个箭头代表一个依赖关系）：
- en: '![Design layers](Recipe_DesignLayers1a.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![设计层](Recipe_DesignLayers1a.png)'
- en: And ideally this reorganization would be made even more fine grained, with a
    separate "Service Layer", containing application services, domain services, etc.
    And when we are finished, the core domain classes are "pure" and have no dependencies
    on anything else outside the domain. This is often called a ["hexagonal architecture"](http://alistair.cockburn.us/Hexagonal+architecture)
    or ["onion architecture"](http://jeffreypalermo.com/blog/the-onion-architecture-part-1/).
    But this post is not about the subtleties of OO design, so for now, let's just
    work with the simpler model.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，这种重新组织会更加细粒度化，有一个单独的"服务层"，包含应用程序服务、领域服务等。当我们完成时，核心领域类是"纯粹的"，不依赖于领域之外的任何东西。这通常被称为["六边形架构"](http://alistair.cockburn.us/Hexagonal+architecture)或["洋葱架构"](http://jeffreypalermo.com/blog/the-onion-architecture-part-1/)。但本文不涉及面向对象设计的微妙之处，所以现在，让我们只使用更简单的模型。
- en: Separating behavior from types
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将行为与类型分离
- en: '*"It is better to have 100 functions operate on one data structure than 10
    functions on 10 data structures" -- Alan Perlis*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*"最好让100个函数操作一个数据结构，而不是让10个函数操作10个数据结构" -- Alan Perlis*'
- en: In a functional design, it is very important to *separate behavior from data*.
    The data types are simple and "dumb". And then separately, you have a number of
    functions that act on those data types.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在功能性设计中，*将行为与数据分离*非常重要。数据类型简单且"愚蠢"。然后，你有一些函数单独作用于这些数据类型。
- en: This is the exact opposite of an object-oriented design, where behavior and
    data are meant to be combined. After all, that's exactly what a class is. In a
    truly object-oriented design in fact, you should have nothing *but* behavior --
    the data is private and can only be accessed via methods.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这与面向对象设计完全相反，其中行为和数据被合并在一起。毕竟，这正是类的作用。事实上，在真正的面向对象设计中，你应该只有行为--数据是私有的，只能通过方法访问。
- en: 'In fact, in OOD, not having enough behavior around a data type is considered
    a Bad Thing, and even has a name: the ["anemic domain model"](http://www.martinfowler.com/bliki/AnemicDomainModel.html).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在OOD中，围绕数据类型没有足够的行为被认为是一件坏事，甚至有一个名字：["贫血领域模型"](http://www.martinfowler.com/bliki/AnemicDomainModel.html)。
- en: In functional design though, having "dumb data" with transparency is preferred.
    It is normally fine for the data to be exposed without being encapsulated. The
    data is immutable, so it can't get "damaged" by a misbehaving function. And it
    turns out that the focus on transparent data allows for more code that is more
    flexible and generic.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在函数式设计中，具有透明度的“愚蠢数据”更受青睐。数据通常可以暴露而无需封装。数据是不可变的，因此它不会被行为不端的函数“破坏”。事实证明，专注于透明数据可以实现更灵活和通用的代码。
- en: If you haven't seen it, I highly recommend [Rich Hickey's excellent talk on
    "The Value of Values"](http://www.infoq.com/presentations/Value-Values), which
    explains the benefits of this approach.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有看过，我强烈推荐[Rich Hickey关于“价值的价值”的精彩演讲](http://www.infoq.com/presentations/Value-Values)，这解释了这种方法的好处。
- en: Type layers and behavior layers
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型层和行为层
- en: So how does this apply to our layered design from above?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这如何应用于上面的分层设计呢？
- en: 'First, we must separate each layer into two distinct parts:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须将每个层分为两个不同的部分：
- en: '**Data Types**. Data structures that are used by that layer.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据类型**。被该层使用的数据结构。'
- en: '**Logic**. Functions that are implemented in that layer.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑**。在该层中实现的函数。'
- en: 'Once we have separated these two elements, our diagram will look like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们分离了这两个元素，我们的图表将如下所示：
- en: '![Design layers](Recipe_DesignLayers2.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![设计层](Recipe_DesignLayers2.png)'
- en: Notice though, that we might have some backwards references (shown by the red
    arrow). For example, a function in the domain layer might depend on a persistence-related
    type, such as `IRepository`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可能会有一些反向引用（由红色箭头表示）。例如，���域层中的一个函数可能依赖于与持久性相关的类型，如`IRepository`。
- en: 'In an OO design, we would [add more layers](http://c2.com/cgi/wiki?OneMoreLevelOfIndirection)
    (e.g. application services) to handle this. But in a functional design, we don''t
    need to -- we can just move the persistence-related types to a different place
    in the hierarchy, underneath the domain functions, like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在OO设计中，我们会[添加更多层](http://c2.com/cgi/wiki?OneMoreLevelOfIndirection)（例如应用服务）来处理这个问题。但在函数式设计中，我们不需要这样做--我们只需将与持久性相关的类型移动到层次结构的不同位置，位于域函数的下方，如下所示：
- en: '![Design layers](Recipe_DesignLayers2a.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![设计层](Recipe_DesignLayers2a.png)'
- en: In this design, we have now eliminated all cyclic references between layers.
    *All the arrows point down*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个设计中，我们现在消除了所有层之间的循环引用。*所有箭头都指向下方*。
- en: And this without having to create any extra layers or overhead.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 而且这一切都不需要创建任何额外的层或开销。
- en: Finally, we can translate this layered design into F# files by turning it upside
    down.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过将其颠倒来将这种分层设计转换为F#文件。
- en: The first file in the project should contain code which has no dependencies.
    This represents the functionality at the *bottom* of the layer diagram. It is
    generally a set of types, such the infrastructure or domain types.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目中的第一个文件应包含没有依赖关系的代码。这代表了层次结构图中*底部*的功能。通常是一组类型，如基础设施或领域类型。
- en: The next file depends only on the first file. It would represents the functionality
    at the next-to-bottom layer.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个文件仅依赖于第一个文件。它代表了接近底层的功能。
- en: And so on. Each file depends only on the previous ones.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依此类推。每个文件仅依赖于前面的文件。
- en: 'So, if we refer back to the use case example discussed in [Part 1](recipe-part1.html):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们回顾一下在[第一部分](recipe-part1.html)讨论的用例示例：
- en: '![Recipe Happy Path](Recipe_HappyPath.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![配方快乐路径](Recipe_HappyPath.png)'
- en: 'then the corresponding code in an F# project might look something like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在F#项目中，相应的代码可能如下所示：
- en: '![Design layers](Recipe_DesignLayers_CodeLayout.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![设计层](Recipe_DesignLayers_CodeLayout.png)'
- en: At the very bottom of the list is the main file, called "main" or "program",
    which contains the entry point for the program.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表的最底部是名为“main”或“program”的主文件，其中包含程序的入口点。
- en: And just above it is the code for the use cases in the application. The code
    in this file is where all the functions from all the other modules are "glued
    together" into a single function that represents a particular use case or service
    request. (The nearest equivalent of this in an OO design are the ["application
    services"](http://stackoverflow.com/questions/2268699/domain-driven-design-domain-service-application-service),
    which serve roughly the same purpose.)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 紧接着是应用程序中使用情况的代码。这个文件中的代码是将所有其他模块的所有函数“粘合在一起”的地方，形成一个代表特定用例或服务请求的单个函数。（在面向对象设计中，与之最接近的相当于是
    ["应用程序服务"](http://stackoverflow.com/questions/2268699/domain-driven-design-domain-service-application-service)，它们大致具有相同的目的。）
- en: And then just above that is the "UI layer" and then the "DB layer" and so on,
    until you get to the top.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后就在它的上面是“UI 层”，然后是“DB 层”，依此类推，直到顶层。
- en: What's nice about this approach is that, if you are a newcomer to a code base,
    you always know where to start. The first few files will always be the "bottom
    layer" of an application and the last few files will always be the "top layer".
    No folders needed!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的好处是，如果你是一个新手，你总是知道从哪里开始。前几个文件总是应用程序的“底层”，而最后几个文件总是应用程序的“顶层”。无需文件夹！
- en: Putting code in modules, not classes
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将代码放在模块中，而不是类中
- en: A common question from newcomers to F# is "how should I organize my code if
    I don't use classes?"
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: F# 的新手常问的一个问题是“如果我不使用类，我应该如何组织我的代码？”
- en: 'The answer is: *modules*. As you know, in an object oriented program, a data
    structure and the functions that act on it would be combined in a class. However
    in functional-style F#, a data structure and the functions that act on it are
    contained in modules instead.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是：*模块*。如你所知，在面向对象的程序中，数据结构和作用于它的函数会被组合在一个类中。但是在函数式的 F# 中，数据结构和作用于它的函数会分别包含在模块中。
- en: 'There are three common patterns for mixing types and functions together:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种常见的模式用于混合类型和函数：
- en: having the type declared in the same module as the functions.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型被声明在与函数相同的模块中。
- en: having the type declared separately from the functions but in the same file.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型与函数分开声明，但在同一文件中。
- en: having the type declared separately from the functions and in a different file,
    typically containing type definitions only.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型与函数分开声明，并在不同的文件中，通常仅包含类型定义。
- en: In the first approach, types are defined *inside* the module along with their
    related functions. If there is only one primary type, it is often given a simple
    name such as "T" or the name of the module.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种方法中，类型与其相关的函数*一起*定义在模块内。如果只有一个主要类型，则通常会给它一个简单的名称，比如“T”或模块的名称。
- en: 'Here''s an example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: So the functions are accessed with names like `Person.create` and `Person.fullName`
    while the type itself is accessed with the name `Person.T`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，函数使用类似 `Person.create` 和 `Person.fullName` 这样的名称访问，而类型本身则使用 `Person.T` 这样的名称访问。
- en: 'In the second approach, types are declared in the same file, but outside any
    module:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二种方法中，类型是在同一文件中声明的，但不属于任何模块：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case, the functions are accessed with the same names (`Person.create`
    and `Person.fullName`) while the type itself is accessed with the name such as
    `PersonType`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，函数使用相同的名称（`Person.create` 和 `Person.fullName`），而类型本身使用诸如 `PersonType`
    之类的名称访问。
- en: 'And finally, here''s the third approach. The type is declared in a special
    "types-only" module (typically in a different file):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里是第三种方法。类型在一个特殊的“仅类型”模块中声明（通常在不同的文件中）：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this particular case, the `AutoOpen` attribute has been used to make the
    types in this module automatically visible to all the other modules in the project
    -- making them "global".
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种特定情况下，`AutoOpen` 属性被用来使得该模块中的类型自动对项目中的所有其他模块可见 —— 使它们变得“全局”。
- en: And then a different module contains all the functions that work on, say, the
    `Person` type.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后另一个模块包含所有对 `Person` 类型起作用的函数。
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that in this example, both the type and the module are called `Person`.
    This is not normally a problem in practice, as the compiler can normally figure
    out what you want.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此示例中，类型和模块都称为 `Person`。在实践中，这通常不是问题，因为编译器通常可以理解你的意图。
- en: 'So, if you write this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你写下这样的代码：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then the compiler will understand that you are referring to the `Person` type.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 那么编译器将理解你正在引用 `Person` 类型。
- en: 'On the other hand, if you write this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你写下这样的代码：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then the compiler will understand that you are referring to the `Person` module.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 那么编译器将理解你正在引用 `Person` 模块。
- en: For more on modules, see the post on [organizing functions](organizing-functions.html).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 关于模块的更多信息，请参阅[组织函数](organizing-functions.html)的帖子。
- en: The organization of the modules
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块的组织
- en: 'For our recipe we will use a mixture of approaches, with the following guidelines:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的配方，我们将采用多种方法的混合，并遵循以下准则：
- en: '**Module Guidelines**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块指南**'
- en: '*If a type is shared among multiple modules, then put it in a special types-only
    module.*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果一个类型在多个模块之间共享，则将其放在一个专门的仅包含类型的模块中。*'
- en: For example, if a type is used globally (or to be precise, within a "bounded
    domain" in DDD-speak), I would put it in a module called `DomainTypes` or `DomainModel`,
    which comes early in the compilation order.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，如果一个类型在全局范围内使用（或者准确地说，在 DDD 术语中是在“有界域”内），我会将其放在一个名为`DomainTypes`或`DomainModel`的模块中，该模块在编译顺序中早些时候出现。
- en: If a type is used only in a subsystem, such as a type shared by a number of
    UI modules, then I would put it in a module called `UITypes`, which would come
    just before the other UI modules in the compilation order.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个类型仅在一个子系统中使用，比如多个 UI 模块共享的类型，则我会将其放在一个名为`UITypes`的模块中，该模块将会在编译顺序中排在其他 UI
    模块之前。
- en: '*If a type is private to a module (or two) then put it in the same module as
    its related functions.*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果一个类型是私有于一个模块（或两个模块），那么将其放在与其相关函数相同的模块中。*'
- en: For example, a type that was used only for validation would be put in the `Validation`
    module. A type used only for database access would be put in the `Database` module,
    and so on.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，仅用于验证的类型将放在`Validation`模块中。仅用于数据库访问的类型将放在`Database`模块中，依此类推。
- en: Of course, there are many ways to organize types, but these guidelines act as
    a good default starting point.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有许多组织类型的方法，但这些准则作为一个很好的默认起点。
- en: Dude, where are my folders?
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 伙计，我的文件夹在哪里？
- en: A common complaint is that F# projects do not support a folder structure, which
    supposedly makes it hard to organize large projects.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的抱怨是 F# 项目不支持文件夹结构，这据说使得组织大型项目变得困难。
- en: If you are doing a pure object-oriented design, then this is a legitimate complaint.
    But as you can see from the discussion above, having a linear list of modules
    is very helpful (if not strictly necessary) to ensure that the dependencies are
    maintained correctly. Yes, in theory, the files could be scattered about and the
    compiler might be able to figure out the correct compilation order, but in practice,
    it's not easy for the compiler to determine this order.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在进行纯面向对象的设计，那么这是一个合理的抱怨。但正如你从上面的讨论中看到的，有一个线性的模块列表是非常有帮助的（如果不是严格必要的），以确保依赖关系被正确维护。是的，理论上，文件可以分散在各处，编译器可能能够确定正确的编译顺序，但实际上，编译器很难确定这个顺序。
- en: Even more importantly, it's not easy for a *human* to determine the correct
    order either, and so it would make maintenance more painful than it needed to
    be.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，人类也不容易确定正确的顺序，这样会使得维护变得比必要的更痛苦。
- en: In reality, even for large projects, not having folders is not as much of a
    problem as you might think. There are a number of large F# projects which successfully
    work within this limitation, such as the F# compiler itself. See the post on [cycles
    and modularity in the wild](cycles-and-modularity-in-the-wild.html) for more.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，即使对于大型项目，没有文件夹也不是你想象中的那么大问题。有许多大型的 F# 项目成功地在这种限制下工作，比如 F# 编译器本身。更多内容请参阅[野外的循环和模块化](cycles-and-modularity-in-the-wild.html)的帖子。
- en: Help, I have mutual dependencies between my types
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 帮帮我，我的类型之间存在相互依赖
- en: 'If you are coming from an OO design, you might run into mutual dependencies
    between types, such as this example, which won''t compile:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你来自面向对象的设计，你可能会遇到类型之间的相互依赖，例如这个例子，它无法编译：
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How can you fix this to make the F# compiler happy?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何修复这个问题以让 F# 编译器满意？
- en: It's not that hard, but it does requires some more explanation, so I have devoted
    [another whole post to dealing with cyclic dependencies](cyclic-dependencies.html).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不难，但它需要更多的解释，所以我专门写了一篇[关于处理循环依赖的帖子](cyclic-dependencies.html)。
- en: Example code
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例代码
- en: Let's revisit at the code we have so far, but this time organized into modules.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新审视一下我们迄今为止的代码，但这次是按模块组织的。
- en: Each module below would typically become a separate file.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的每个模块通常会成为一个单独的文件。
- en: Be aware that this is still a skeleton. Some of the modules are missing, and
    some of the modules are almost empty.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这仍然是一个框架。一些模块尚未完成，而一些模块几乎是空的。
- en: This kind of organization would be overkill for a small project, but there will
    be lots more code to come!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这种组织对于一个小项目来说可能有点过度，但会有更多的代码要编写！
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this post, we looked at organizing code into modules. In the next post in
    this series, we'll finally start doing some real coding!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们探讨了将代码组织成模块的方法。在本系列的下一篇文章中，我们终于要开始做一些真正的编码了！
- en: 'Meanwhile, you can read more on cyclic dependencies in the follow up posts:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，您可以在以下后续帖子中了解更多关于循环依赖的信息：
- en: '[Cyclic dependencies are evil](cyclic-dependencies.html).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[循环依赖是有害的](cyclic-dependencies.html)。'
- en: '[Refactoring to remove cyclic dependencies](removing-cyclic-dependencies.html).'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[重构以消除循环依赖](removing-cyclic-dependencies.html)。'
- en: '[Cycles and modularity in the wild](cycles-and-modularity-in-the-wild.html),
    which compares some real-world metrics for C# and F# projects.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[野外的循环和模块化](cycles-and-modularity-in-the-wild.html)，对比了一些 C# 和 F# 项目的真实指标。'
