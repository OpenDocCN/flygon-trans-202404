- en: Homework 14
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业 14
- en: To work with the ideas in the next homework problems, you should first
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理下一个作业问题中的思想，你应该首先
- en: '`(load "~cs61as/lib/concurrency.scm")`'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`(load "~cs61as/lib/concurrency.scm")`'
- en: Exercise 1
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1
- en: Exercise [3.38](http://mitpress.mit.edu/sicp/full- text/book/book-Z-H-23.html#%_thm_3.38),
    [3.39, 3.40, 3.41, 3.42](http://mitpress.mit.edu/sicp/full- text/book/book-Z-H-23.html#%_thm_3.39),
    [3.44](http://mitpress.mit.edu/sicp /full-text/book/book-Z-H-23.html#%_thm_3.44),
    [3.46, 3.48](http://mitpress.mit.edu/sicp/full- text/book/book-Z-H-23.html#%_thm_3.46),
    of Abelson & Sussman
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 练习[3.38](http://mitpress.mit.edu/sicp/full- text/book/book-Z-H-23.html#%_thm_3.38)，[3.39,
    3.40, 3.41, 3.42](http://mitpress.mit.edu/sicp/full- text/book/book-Z-H-23.html#%_thm_3.39)，[3.44](http://mitpress.mit.edu/sicp
    /full-text/book/book-Z-H-23.html#%_thm_3.44)，[3.46, 3.48](http://mitpress.mit.edu/sicp/full-
    text/book/book-Z-H-23.html#%_thm_3.46)，由阿贝尔森和苏斯曼
- en: 'Exercise 2: Chaining Mapreduce'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2：链接 Mapreduce
- en: Write the function `real-most-frequent` that accepts a list of key-value pairs
    where the key is the name of the file, and the values are lines from that file
    (just like our all-songs example) . Our output is again, a list of **single**
    key-value pair. You may want to reuse any functions we have defined so far in
    the lesson.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编写函数`real-most-frequent`，接受一个键值对列表，其中键是文件名，值是来自该文件的行（就像我们的 all-songs 示例）。我们的输出再次是一个**单一**键值对列表。你可能想要重用我们在课程中定义的任何函数。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Exercise 3: Mapreduce with Streams'
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3：使用流进行 Mapreduce
- en: 'Our current mapreduce works with lists. Mapreduce in real life works with really
    large datasets: so large that a list won''t be able to contain them. One way to
    solve this is to have a mapreduce that works on streams instead of list. You can
    find our mapreduce version that work on streams [here](/static/streammapreduce.scm).
    or at "~cs61as/lib/mapreduce/streammapreduce.scm"'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的 mapreduce 是使用列表的。现实生活中的 mapreduce 处理的是非常大的数据集：大到列表无法容纳。解决这个问题的一种方法是使用流而不是列表来进行
    mapreduce。你可以在这里找到我们的适用于流的 mapreduce 版本[这里](/static/streammapreduce.scm)或者在"~cs61as/lib/mapreduce/streammapreduce.scm"中找到
- en: What changed? Our map, sort-into-buckets, and filter works with streams now.
    What do you as a user need to provide? The mapper and reducer, just like what
    you did previously. How do the mappers and reducers changed? **they don't**. The
    behavior of mapper and reducer doesn't change. You can load the file and try `(mapreduce
    mapper reducer 0 all-songs)` where the mapper and reducer are ones you've defined
    in the lessons. They would work the same way. The only difference is that if all-songs
    is large, our previous version will crash and brun whereas our stream version
    would still be able to process it
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么改变？我们的 map、sort-into-buckets 和 filter 现在可以与流一起工作。作为用户，你需要提供什么？就像之前做过的那样，mapper
    和 reducer。mapper 和 reducer 发生了什么变化？**它们没有**。mapper 和 reducer 的行为不会改变。你可以加载文件并尝试`(mapreduce
    mapper reducer 0 all-songs)`，其中 mapper 和 reducer 是你在课程中定义的。它们会以相同的方式工作。唯一的区别是，如果
    all-songs 很大，我们之前的版本会崩溃，而我们的流版本仍然能够处理它
- en: 'Exercise 4: Do You Want to be the Very Best?'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4：你想成为最强的吗？
- en: 'You have access to a stream of all 744 pokemon data [here](/static/pokemon_data)
    and "~cs61as/lib/mapreduce/pokemon_data". `streammapreduce.scm` should load it
    automatically and define the variable "data" as your input. The key is the pokemon
    national number, the value is a list of regional number, name, name (yes it appears
    twice), and the rest are types that they have. For example the first element is
    `(1 1 bulbasaur bulbasaur grass poison)` so it has the national number 1, regional
    number of 1, names bulbasaur, and has the types ''grass'' and ''poison''. A Pokemon
    can either have 1 or 2 types. Here is an example of one that only has one type:
    `(4 4 charmander charmander fire)`. You can take a look at the input by typing
    `(ss data)` in the interpreter after loading the files.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问所有 744 只宝可梦数据的流[这里](/static/pokemon_data)和"~cs61as/lib/mapreduce/pokemon_data"。`streammapreduce.scm`应该会自动加载它，并将变量"data"定义为你的输入。键是宝可梦的国家编号，值是一个区域编号、名称、名称（是的，它出现两次），以及它们拥有的类型列表。例如，第一个元素是`(1
    1 bulbasaur bulbasaur grass poison)`，所以它的国家编号是1，区域编号是1，名称是bulbasaur，类型是'grass'和'poison'。宝可梦可以有1或2种类型。这里有一个只有一种类型的例子：`(4
    4 charmander charmander fire)`。你可以在加载文件后在解释器中输入`(ss data)`来查看输入。
- en: 'Define the mapper, reducer and base-case such that calling mapreduce with `(mapreduce
    mapper reducer base-case data)` would return a list of key-value pairs where the
    keys are different types, and the values represent how many times a pokemon of
    that type appears in the dataset. The final result should yield the following
    (in any order):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 定义mapper、reducer和基本情况，使得调用`(mapreduce mapper reducer base-case data)`会返回一个键值对列表，其中键是不同类型，值表示数据集中该类型的宝可梦出现的次数。最终结果应该产生以下结果（任意顺序）：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Submit Your Homework!
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交您的作业！
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有关说明，请参阅[此指南](../submit.html)。它涵盖了基本的终端命令和作业提交。
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在提交作业时遇到任何问题，请不要犹豫向助教求助！
