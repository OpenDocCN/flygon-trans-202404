- en: Style
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 风格
- en: Style
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 风格
- en: Consistency is the most important aspect of style. The second most important
    aspect is following a style that the average C++ programmer is used to reading.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性是风格的最重要方面。第二重要的方面是遵循普通 C++ 程序员习惯阅读的风格。
- en: C++ allows for arbitrary-length identifier names, so there's no reason to be
    terse when naming things. Use descriptive names, and be consistent in the style.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 允许任意长度的标识符名称，因此在命名时没有必要使用简略的方式。使用描述性的名称，并在风格上保持一致。
- en: '`CamelCase`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联代码（`CamelCase`）不需要翻译。
- en: '`snake_case`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联代码（`snake_case`）不需要翻译。
- en: are common examples. *snake_case* has the advantage that it can also work with
    spell checkers, if desired.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 是常见的例子。*snake_case* 具有一个优点，即如果需要，它也可以与拼写检查器一起使用。
- en: Establishing A Style Guideline
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建立一个风格指南
- en: Whatever style guidelines you establish, be sure to implement a `.clang-format`
    file that specifies the style you expect. While this cannot help with naming,
    it is particularly important for an open source project to maintain a consistent
    style.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您建立什么样的风格指南，都要确保实现一个指定您期望的风格的 `.clang-format` 文件。虽然这不能帮助命名，但对于一个开源项目来说，保持一致的风格尤为重要。
- en: Every IDE and many editors have support for clang-format built in or easily
    installable with an add-in.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 IDE 和许多编辑器都内置了对 clang-format 的支持，或者可以通过插件轻松安装。
- en: VSCode [https://marketplace.visualstudio.com/items?itemName=xaver.clang-format](https://marketplace.visualstudio.com/items?itemName=xaver.clang-format)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VSCode [https://marketplace.visualstudio.com/items?itemName=xaver.clang-format](https://marketplace.visualstudio.com/items?itemName=xaver.clang-format)
- en: VisualStudio [https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.ClangFormat#review-details](https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.ClangFormat#review-details)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VisualStudio [https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.ClangFormat#review-details](https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.ClangFormat#review-details)
- en: 'Resharper++: [https://www.jetbrains.com/help/resharper/2017.2/Using_Clang_Format.html](https://www.jetbrains.com/help/resharper/2017.2/Using_Clang_Format.html)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Resharper++：[https://www.jetbrains.com/help/resharper/2017.2/Using_Clang_Format.html](https://www.jetbrains.com/help/resharper/2017.2/Using_Clang_Format.html)
- en: Vim
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vim
- en: '[https://github.com/rhysd/vim-clang-format](https://github.com/rhysd/vim-clang-format)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/rhysd/vim-clang-format](https://github.com/rhysd/vim-clang-format)'
- en: '[https://github.com/chiel92/vim-autoformat](https://github.com/chiel92/vim-autoformat)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/chiel92/vim-autoformat](https://github.com/chiel92/vim-autoformat)'
- en: 'XCode: [https://github.com/travisjeffery/ClangFormat-Xcode](https://github.com/travisjeffery/ClangFormat-Xcode)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XCode：[https://github.com/travisjeffery/ClangFormat-Xcode](https://github.com/travisjeffery/ClangFormat-Xcode)
- en: Common C++ Naming Conventions
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的 C++ 命名约定
- en: 'Types start with upper case: `MyClass`.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型以大写字母开头：`MyClass`。
- en: 'Functions and variables start with lower case: `myMethod`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数和变量以小写字母开头：`myMethod`。
- en: 'Constants are all upper case: `const double PI=3.14159265358979323;`.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常量全部大写：`const double PI=3.14159265358979323;`。
- en: 'C++ Standard Library (and other well-known C++ libraries like [Boost](http://www.boost.org/))
    use these guidelines:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 标准库（以及其他知名的 C++ 库，如 [Boost](http://www.boost.org/)）使用这些指南：
- en: 'Macro names use upper case with underscores: `INT_MAX`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宏名称使用大写字母和下划线：`INT_MAX`。
- en: 'Template parameter names use camel case: `InputIterator`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板参数名称使用驼峰式命名：`InputIterator`。
- en: 'All other names use snake case: `unordered_map`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有其他名称都使用蛇形命名：`unordered_map`。
- en: Distinguish Private Object Data
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区分私有对象数据
- en: Name private data with a `m_` prefix to distinguish it from public data. `m_`
    stands for "member" data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `m_` 前缀命名私有数据以区分它们与公共数据。`m_` 代表 "member" 数据。
- en: Distinguish Function Parameters
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区分函数参数
- en: The most important thing is consistency within your codebase; this is one possibility
    to help with consistency.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是在您的代码库中保持一致性；这是帮助保持一致性的一种可能性。
- en: Name function parameters with an `t_` prefix. `t_` can be thought of as "the",
    but the meaning is arbitrary. The point is to distinguish function parameters
    from other variables in scope while giving us a consistent naming strategy.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `t_` 前缀命名函数参数。`t_` 可以被视为 "the"，但含义是任意的。重点是在给我们一个一致的命名策略的同时，将函数参数与作用域中的其他变量区分开来。
- en: Any prefix or postfix can be chosen for your organization. This is just one
    example. *This suggestion is controversial, for a discussion about it see issue
    [#11](https://github.com/lefticus/cppbestpractices/issues/11).*
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您的组织可以选择任何前缀或后缀。这只是一个示例。*这个建议是有争议的，关于这个问题的讨论请参见问题 [#11](https://github.com/lefticus/cppbestpractices/issues/11)。*
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Don't Name Anything Starting With `_`
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要以 `_` 开头命名任何东西。
- en: 'If you do, you risk colliding with names reserved for compiler and standard
    library implementation use:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这样做，您会冒与编译器和标准库实现保留名称发生冲突的风险：
- en: '[http://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier](http://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier](http://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier)'
- en: Well-Formed Example
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 良好的示例
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Enable Out-of-Source-Directory Builds
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用源目录外构建
- en: Make sure generated files go into an output folder that is separate from the
    source folder.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 确保生成的文件进入与源文件分离的输出文件夹。
- en: Use `nullptr`
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`nullptr`
- en: C++11 introduces `nullptr` which is a special value denoting a null pointer.
    This should be used instead of `0` or `NULL` to indicate a null pointer.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: C++11 引入了`nullptr`，它是表示空指针的特殊值。应该使用它来代替`0`或`NULL`来表示空指针。
- en: Comments
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: Comment blocks should use `//`, not `/* */`. Using `//` makes it much easier
    to comment out a block of code while debugging.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注释块应使用`//`而不是`/* */`。使用`//`使得在调试过程中注释掉一块代码变得更容易。
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To comment out this function block during debugging we might do:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试过程中注释掉此函数块我们可能会这样做：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: which would be impossible if the function comment header used `/* */`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数注释头使用了`/* */`，这是不可能的。
- en: Never Use `using namespace` in a Header File
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绝不在头文件中使用`using namespace`
- en: This causes the namespace you are `using` to be pulled into the namespace of
    all files that include the header file. It pollutes the namespace and it may lead
    to name collisions in the future. Writing `using namespace` in an implementation
    file is fine though.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致你`using`的命名空间被拉入包含该头文件的所有文件的命名空间中。这会污染命名空间，并可能导致将来发生名称冲突。在实现文件中写`using namespace`是可以的。
- en: Include Guards
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含保护
- en: Header files must contain a distinctly-named include guard to avoid problems
    with including the same header multiple times and to prevent conflicts with headers
    from other projects.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 头文件必须包含一个明确命名的包含保护，以避免多次包含相同的头文件而引发问题，并防止与其他项目的头文件冲突。
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You may also consider using the `#pragma once` directive instead which is quasi-standard
    across many compilers. It's short and makes the intent clear.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以考虑使用`#pragma once`指令，该指令在许多编译器中都是准标准的。它很简洁，表达意图清晰。
- en: '{} Are Required for Blocks.'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大括号`{}`是必需的用于块。
- en: Leaving them off can lead to semantic errors in the code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 不将它们包含在内可能导致代码中的语义错误。
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Keep Lines a Reasonable Length
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持行的合理长度
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Many projects and coding standards have a soft guideline that one should try
    to use less than about 80 or 100 characters per line. Such code is generally easier
    to read. It also makes it possible to have two separate files next to each other
    on one screen without having a tiny font.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 许多项目和编码标准有一个软性指南，即应尽量每行使用不超过约 80 或 100 个字符。这样的代码通常更容易阅读。它还可以使得在一个屏幕上同时显示两个单独的文件而无需缩小字体成为可能。
- en: Use "" for Including Local Files
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 "" 包含本地文件
- en: '... `<>` is [reserved for system includes](http://blog2.emptycrate.com/content/when-use-include-verses-include).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`<>` 保留用于[系统包含](http://blog2.emptycrate.com/content/when-use-include-verses-include)。'
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Initialize Member Variables
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化成员变量
- en: '...with the member initializer list.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '...使用成员初始化列表。'
- en: For POD types, the performance of an initializer list is the same as manual
    initialization, but for other types there is a clear performance gain, see below.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 POD 类型，使用初始化列表的性能与手动初始化相同，但对于其他类型，存在明显的性能提升，请参见下文。
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In C++11 you can assign default values to each member (using `=` or using `{}`).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C++11 中，您可以为每个成员分配默认值（使用`=`或使用`{}`）。
- en: Assigning default values with =
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`=`分配默认值
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This ensures that no constructor ever "forgets" to initialize a member object.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了没有构造函数会“忘记”初始化成员对象。
- en: Assigning default values with brace initialization
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用大括号初始化分配默认值
- en: Using brace initialization does not allow narrowing at compile-time.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用大括号初始化不允许在编译时发生窄化。
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Prefer `{}` initialization over `=` unless you have a strong reason not to.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你有充分的理由，否则优先使用`{}`初始化而不是`=`。
- en: Forgetting to initialize a member is a source of undefined behavior bugs which
    are often extremely hard to find.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 忘记初始化成员是未定义行为错误的源头，往往极其难以发现。
- en: If the member variable is not expected to change after the initialization, then
    mark it `const`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成员变量在初始化后不会改变，则标记为`const`。
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since a const member variable cannot be assigned a new value, such a class may
    not have a meaningful copy assignment operator.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 const 成员变量不能被赋予新值，因此这样的类可能没有有意义的复制赋值运算符。
- en: Always Use Namespaces
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 始终使用命名空间
- en: There is almost never a reason to declare an identifier in the global namespace.
    Instead, functions and classes should exist in an appropriately named namespace
    or in a class inside of a namespace. Identifiers which are placed in the global
    namespace risk conflicting with identifiers from other libraries (mostly C, which
    doesn't have namespaces).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎没有理由在全局命名空间中声明标识符。相反，函数和类应存在于适当命名的命名空间中或存在于命名空间内的类中。将标识符放置在全局命名空间中可能会与其他库（主要是没有命名空间的C库）的标识符发生冲突。
- en: Use the Correct Integer Type for Standard Library Features
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对于标准库功能，请使用正确的整数类型。
- en: The standard library generally uses `std::size_t` for anything related to size.
    The size of `size_t` is implementation defined.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库通常对与大小相关的任何内容使用`std::size_t`。`size_t`的大小是由实现定义的。
- en: In general, using `auto` will avoid most of these issues, but not all.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，使用`auto`将避免大多数这些问题，但不是全部。
- en: Make sure you stick with the correct integer types and remain consistent with
    the C++ standard library. It might not warn on the platform you are currently
    using, but it probably will when you change platforms.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您坚持使用正确的整数类型，并与C++标准库保持一致。在您当前使用的平台上可能不会发出警告，但在更改平台时可能会发出警告。
- en: '*Note that you can cause integer underflow when performing some operations
    on unsigned values. For example:*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*请注意，在对无符号值执行某些操作时可能会导致整数下溢。例如：*'
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Use .hpp and .cpp for Your File Extensions
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用.hpp和.cpp作为您的文件扩展名。
- en: Ultimately this is a matter of preference, but .hpp and .cpp are widely recognized
    by various editors and tools. So the choice is pragmatic. Specifically, Visual
    Studio only automatically recognizes .cpp and .cxx for C++ files, and Vim doesn't
    necessarily recognize .cc as a C++ file.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，这是一种偏好问题，但.hpp和.cpp在各种编辑器和工具中都得到了广泛认可。因此，选择是实用的。具体来说，Visual Studio只自动识别.cpp和.cxx作为C++文件，而Vim不一定会将.cc识别为C++文件。
- en: One particularly large project ([OpenStudio](https://github.com/NREL/OpenStudio))
    uses .hpp and .cpp for user-generated files and .hxx and .cxx for tool-generated
    files. Both are well recognized and having the distinction is helpful.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特别大的项目（[OpenStudio](https://github.com/NREL/OpenStudio)）使用.hpp和.cpp用于用户生成的文件，.hxx和.cxx用于工具生成的文件。两者都得到了良好的认可，并且有区别是有帮助的。
- en: Never Mix Tabs and Spaces
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要混合使用制表符和空格。
- en: Some editors like to indent with a mixture of tabs and spaces by default. This
    makes the code unreadable to anyone not using the exact same tab indentation settings.
    Configure your editor so this does not happen.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一些编辑器默认使用制表符和空格的混合进行缩进。这会使代码对于不使用完全相同制表符缩进设置的任何人都无法阅读。配置您的编辑器，以防止这种情况发生。
- en: Never Put Code with Side Effects Inside an assert()
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 永远不要将具有副作用的代码放在`assert()`中。
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The above code succeeds when making a debug build, but gets removed by the compiler
    when making a release build, giving you different behavior between debug and release
    builds. This is because `assert()` is a macro which expands to nothing in release
    mode.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码在进行调试构建时成功，但在进行发布构建时会被编译器删除，从而在调试和发布构建之间产生不同的行为。这是因为`assert()`是一个宏，在发布模式下会扩展为空。
- en: Don't Be Afraid of Templates
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要害怕模板。
- en: They can help you stick to [DRY principles](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself).
    They should be preferred to macros, because macros do not honor namespaces, etc.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以帮助您遵循[DRY原则](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself)。它们应优先于宏，因为宏不尊重命名空间等。
- en: Use Operator Overloads Judiciously
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 明智地使用运算符重载。
- en: Operator overloading was invented to enable expressive syntax. Expressive in
    the sense that adding two big integers looks like `a + b` and not `a.add(b)`.
    Another common example is `std::string`, where it is very common to concatenate
    two strings with `string1 + string2`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符重载的发明是为了实现表达性的语法。在添加两个大整数时，看起来像`a + b`而不是`a.add(b)`。另一个常见示例是`std::string`，在其中使用`string1
    + string2`连接两个字符串非常普遍。
- en: However, you can easily create unreadable expressions using too much or wrong
    operator overloading. When overloading operators, there are three basic rules
    to follow as described [on stackoverflow](http://stackoverflow.com/questions/4421706/operator-overloading/4421708#4421708).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果过度或错误地重载运算符，可能会轻松创建难以阅读的表达式。在重载运算符时，有三条基本规则需要遵循，如[stackoverflow上](http://stackoverflow.com/questions/4421706/operator-overloading/4421708#4421708)所述。
- en: 'Specifically, you should keep these things in mind:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，您应该记住以下几点：
- en: Overloading `operator=()` when handling resources is a must. See [Consider the
    Rule of Zero](03-Style.html#consider-the-rule-of-zero) below.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理资源时，重载`operator=()`是必须的。参见[考虑零规则](03-Style.html#consider-the-rule-of-zero)下面。
- en: For all other operators, only overload them when they are used in a context
    that is commonly connected to these operators. Typical scenarios are concatenating
    things with +, negating expressions that can be considered "true" or "false",
    etc.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有其他运算符，只有在通常与这些运算符相关联的情况下重载它们时才重载它们。典型的情况包括使用+连接事物，否定可以被视为“真”或“假”的表达式等。
- en: Always be aware of the [operator precedence](http://en.cppreference.com/w/cpp/language/operator_precedence)
    and try to circumvent unintuitive constructs.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终注意[运算符优先级](http://en.cppreference.com/w/cpp/language/operator_precedence)，并尝试规避不直观的结构。
- en: Do not overload exotic operators such as ~ or % unless implementing a numeric
    type or following a well recognized syntax in specific domain.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非实现数值类型或按照特定领域的公认语法，否则不要重载像~或%这样的奇异运算符。
- en: '[Never](http://stackoverflow.com/questions/5602112/when-to-overload-the-comma-operator?answertab=votes#tab-top)
    overload `operator,()` (the comma operator).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[永远不要](http://stackoverflow.com/questions/5602112/when-to-overload-the-comma-operator?answertab=votes#tab-top)重载`operator,()`（逗号运算符）。'
- en: Use non-member functions `operator>>()` and `operator<<()` when dealing with
    streams. For example, you can overload `operator<<(std::ostream &, MyClass const
    &)` to enable "writing" your class into a stream, such as `std::cout` or an `std::fstream`
    or `std::stringstream`. The latter is often used to create a string representation
    of a value.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理流时使用非成员函数`operator>>()`和`operator<<()`。例如，你可以重载`operator<<(std::ostream &,
    MyClass const &)`来使你的类能够“写入”到流中，例如`std::cout`或`std::fstream`或`std::stringstream`。后者通常用于创建值的字符串表示。
- en: There are more common operators to overload [described here](http://stackoverflow.com/questions/4421706/operator-overloading?answertab=votes#tab-top).
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有更多常见的运算符可以重载，[在这里描述了](http://stackoverflow.com/questions/4421706/operator-overloading?answertab=votes#tab-top)。
- en: More tips regarding the implementation details of your custom operators can
    be found [here](http://courses.cms.caltech.edu/cs11/material/cpp/donnie/cpp-ops.html).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 关于自定义运算符的实现细节的更多提示可以在[这里](http://courses.cms.caltech.edu/cs11/material/cpp/donnie/cpp-ops.html)找到。
- en: Avoid Implicit Conversions
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免隐式转换
- en: Single Parameter Constructors
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单参数构造函数
- en: Single parameter constructors can be applied at compile time to automatically
    convert between types. This is handy for things like `std::string(const char *)`
    but should be avoided in general because they can add to accidental runtime overhead.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 单参数构造函数可以在编译时自动应用以在类型之间进行转换。这对于`std::string(const char *)`之类的事情很方便，但通常应避免使用，因为它们可能会增加意外的运行时开销。
- en: Instead mark single parameter constructors as `explicit`, which requires them
    to be explicitly called.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 反而将单参数构造函数标记为`explicit`，这需要显式调用它们。
- en: Conversion Operators
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换运算符
- en: Similarly to single parameter constructors, conversion operators can be called
    by the compiler and introduce unexpected overhead. They should also be marked
    as `explicit`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 与单参数构造函数类似，转换运算符可以被编译器调用并引入意外的开销。它们也应标记为`explicit`。
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Consider the Rule of Zero
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑零规则
- en: The Rule of Zero states that you do not provide any of the functions that the
    compiler can provide (copy constructor, copy assignment operator, move constructor,
    move assignment operator, destructor) unless the class you are constructing does
    some novel form of ownership.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 零规则指出，除非你正在构造的类采用一种新颖的所有权形式，否则不要提供编译器可以提供的任何函数（拷贝构造函数、拷贝赋值操作符、移动构造函数、移动赋值操作符、析构函数）。
- en: The goal is to let the compiler provide optimal versions that are automatically
    maintained when more member variables are added.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是让编译器提供最佳版本，在添加更多成员变量时自动维护。
- en: The [original article](https://rmf.io/cxx11/rule-of-zero) provides the background,
    while a [follow up article](http://www.nirfriedman.com/2015/06/27/cpp-rule-of-zero/)
    explains techniques for implementing nearly 100% of the time.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[原始文章](https://rmf.io/cxx11/rule-of-zero)提供了背景，而[后续文章](http://www.nirfriedman.com/2015/06/27/cpp-rule-of-zero/)解释了几乎100%的实现技术。'
