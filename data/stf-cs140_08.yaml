- en: Scheduling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度
- en: Lecture Notes for CS 140
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CS 140的讲座笔记
- en: Spring 2014
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年春季
- en: John Ousterhout
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰·奥斯特豪特
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    Chapter 7 up through Section 7.2.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关此主题的阅读材料来自*操作系统：原理与实践*：第7章直至第7.2节。
- en: 'Resources fall into two classes:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源分为两类：
- en: 'Non-preemptible: once given, it can''t be reused until thread gives it back.
    Examples are file space, terminal, and maybe memory.'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非可抢占性：一旦给予，直到线程归还为止都不能再次使用。例如文件空间、终端，可能还有内存。
- en: 'Preemptible: processor or I/O channel. Can take resource away, use it for something
    else, then give it back later.'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可抢占性：处理器或I/O通道。可以取走资源，将其用于其他用途，然后稍后归还。
- en: 'OS makes two related kinds of decisions about resources:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统对资源做出两种相关的决策：
- en: 'Allocation: who gets what. Given a set of requests for resources, which processes
    should be given which resources in order to make most efficient use of the resources?'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配：谁得到什么。给定一组对资源的请求，应该给哪些进程分配哪些资源，以便最有效地利用这些资源？
- en: 'Scheduling: how long can they keep it. When more resources are requested than
    can be granted immediately, in which order should the requests be serviced? Examples
    are processor scheduling (one processor, many threads), memory scheduling in virtual
    memory systems.'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度：它们可以持续多久。当请求的资源比可以立即授予的资源更多时，应该以何种顺序处理这些请求？例如，处理器调度（一个处理器，多个线程），虚拟内存系统中的内存调度。
- en: 'Reminder of thread states for dispatching/scheduling:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分派/调度线程状态的提醒：
- en: Running
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行中
- en: 'Ready: waiting for a core to become available'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就绪：等待核心可用
- en: 'Blocked: waiting for some other event (disk I/O, incoming network packet, etc.)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻塞：等待其他事件（磁盘I/O，传入的网络数据包等）。
- en: Simple Scheduling Algorithms
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单调度算法
- en: 'First-come-first-served (FCFS) scheduling (also called FIFO or non-preemptive):'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先来先服务（FCFS）调度（也称为FIFO或非抢占性）：
- en: Keep all of the ready threads in a single list called the *ready queue*.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有就绪线程保留在一个称为*就绪队列*的单个列表中。
- en: When a thread becomes ready, add it to the back of the ready queue.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当线程变为就绪状态时，将其添加到就绪队列的末尾。
- en: Run the first thread on the queue until it exits or blocks.
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行队列中的第一个线程，直到它退出或阻塞。
- en: 'Problem: one thread can monopolize a core.'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题：一个线程可以垄断一个核心。
- en: 'Solution: limit maximum amount of time that a thread can run without a context
    switch. This time is called a *time slice*.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案：限制线程在没有上下文切换的情况下运行的最长时间。这段时间称为*时间片*。
- en: 'Round robin scheduling: run thread for one time slice, then return to back
    of ready queue. Each thread gets equal share of the cores. Most systems use some
    variant of this.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轮转调度：运行一个时间片的线程，然后返回到就绪队列的末尾。每个线程都获得核心的平等份额。大多数系统使用这种的某种变体。
- en: 'Typical time slice values: 10-100ms'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型的时间片值：10-100毫秒
- en: The length of a time slice is also called the *time quantum*.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间片的长度也称为*时间量子*。
- en: How do we decide whether a scheduling algorithm is good?
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何确定调度算法是否好？
- en: Make users happy (minimize response time).
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用户满意（最小化响应时间）。
- en: 'Use resources efficiently:'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效地利用资源：
- en: 'Full utilization: keep cores and disks busy'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充分利用：保持核心和磁盘忙碌。
- en: 'Low overhead: minimize context switches'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低开销：最小化上下文切换
- en: Fairness (distribute CPU cycles equitably)
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公平性（公平地分配CPU周期）
- en: Is round-robin better than FCFS?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轮转调度比先来先服务好吗？
- en: 'Optimal scheduling: STCF (Shortest Time to Completion First); also called SJF
    (Shortest Job First)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳调度：STCF（最短完成时间优先）；也称为SJF（最短作业优先）。
- en: Run the thread that will finish most quickly, run it without interruptions.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行将最快完成的线程，而且不中断它。
- en: 'Another advantage of STCF: improves overall resource utilization.'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: STCF的另一个优点：提高了整体资源利用率。
- en: Suppose some jobs CPU-bound, some I/O-bound.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设一些作业是CPU密集型，一些是I/O密集型。
- en: STCF will give priority to I/O-bound jobs, which keeps the disks/network as
    busy as possible.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: STCF将优先考虑I/O密集型作业，这样可以使磁盘/网络尽可能忙碌。
- en: 'Key idea: can use past performance to predict future performance.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键思想：可以利用过去的性能来预测未来的性能。
- en: Behavior tends to be consistent
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为往往是一致的。
- en: If a process has been executing for a long time without blocking, it's likely
    to continue executing.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个进程长时间执行而没有阻塞，那么它很可能会继续执行。
- en: Priority-Based Scheduling
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于优先级的调度
- en: 'Priorities: most real schedulers support a priority for each thread:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先级：大多数真实的调度程序支持每个线程的优先级：
- en: Always run the thread with highest priority.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是运行具有最高优先级的线程。
- en: In case of tie, use round-robin among highest priority threads
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果出现相等情况，优先选择最高优先级线程中的轮转调度。
- en: Use priorities to implement various scheduling policies (e.g. approximate STCF)
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用优先级来实现各种调度策略（例如，近似最短剩余时间优先）
- en: 'Exponential Queues (or Multi-Level Feedback Queues): attacks both efficiency
    and response time problems.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指数队列（或多级反馈队列）：同时解决效率和响应时间问题。
- en: One ready queue for each priority level.
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个优先级级别都有一个就绪队列。
- en: Lower-priority queues have larger time slices (time slice doubles with each
    reduction in priority)
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较低优先级队列具有较大的时间片（随着优先级降低，时间片加倍）
- en: Newly runnable thread starts in highest priority queue
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的可运行线程从最高优先级队列开始。
- en: If it reaches the end of its time slice without blocking it moves to the next
    lower queue.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在不阻塞的情况下达到时间片的末尾，则移至下一个较低的队列。
- en: 'Result: I/O-bound threads stay in the highest-priority queues, CPU-bound threads
    migrate to lower-priority queues'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果：I/O密集型线程保持在最高优先级队列中，CPU密集型线程迁移到较低优先级队列
- en: What are the problems with this approach?
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种方法存在哪些问题？
- en: '4.4 BSD Scheduler (for first project):'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4.4 BSD调度器（用于第一个项目）：
- en: Keep information about recent CPU usage for each thread
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持每个线程的最近CPU使用情况的信息
- en: Give highest priority to thread that has used the least CPU time recently.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给予最近使用CPU时间最少的线程最高优先级。
- en: Interactive and I/O-bound threads will use little CPU time and remain at high
    priority.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交互和I/O密集型线程将使用很少的CPU时间并保持高优先级。
- en: CPU-bound threads will eventually get lower priority as they accumulate CPU
    time.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着CPU时间的累积，CPU密集型线程最终会获得较低的优先级。
- en: Multiprocessor Scheduling
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多处理器调度
- en: 'Multiprocessor scheduling is mostly the same as uniprocessor scheduling:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多处理器调度基本上与单处理器调度相同：
- en: Share the scheduling data structures among all of the cores.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有核心之间共享调度数据结构。
- en: Run the k highest-priority threads on the k cores.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在k个核心上运行k个最高优先级线程。
- en: When a thread becomes runnable, see if its priority is higher than the lowest-priority
    thread currently running. If so, preempt that thread.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个线程变为可运行状态时，查看其优先级是否高于当前正在运行的最低优先级线程。如果是，则抢占该线程。
- en: However, a single ready queue can result in contention problems if there are
    lots of cores.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，如果有很多核心，单个就绪队列可能会导致争用问题。
- en: '2 special issues for multiprocessors:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多处理器的两个特殊问题：
- en: 'Processor affinity:'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器亲和性：
- en: Once a thread has been running on a particular core it is expensive to move
    it to a different core (hardware caches will have to be reloaded).
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦一个线程在特定核心上运行，将其移动到另一个核心是昂贵的（硬件缓存将需要重新加载）。
- en: Multiprocessor schedulers typically try to keep a thread on the same core as
    much as possible to minimize these overheads.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多处理器调度器通常会尽量使一个线程尽可能在同一个核心上运行，以最小化这些开销。
- en: 'Gang scheduling:'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团体调度：
- en: 'If the threads within a process are communicating frequently, it won''t make
    sense to run one thread without the others: it will just block immediately on
    communication with another thread.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果进程内的线程频繁通信，那么单独运行一个线程而不与其他线程通信是没有意义的：它将立即在与另一个线程通信时阻塞。
- en: 'Solution: run all of the threads of a process simultaneously on different cores,
    so they can communicate more efficiently.'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案：同时在不同核心上运行一个进程的所有线程，以便它们可以更有效地进行通信。
- en: This is called *gang scheduling.*
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这被称为*团体调度*。
- en: Even if a thread blocks, it may make sense to leave it loaded on its core, on
    the assumption that it will unblock in the near future.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使一个线程阻塞，将其保留在其核心上加载的假设下可能是有意义的，假设它将在不久的将来解除阻塞。
- en: Conclusion
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Scheduling algorithms should not affect the behavior of the system (same results
    regardless of schedule).
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度算法不应影响系统的行为（无论调度如何，结果都相同）。
- en: However, the algorithms do impact the system's efficiency and response time.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，这些算法确实会影响系统的效率和响应时间。
- en: The best schemes are adaptive. To be optimal, we'd have to predict the future.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳方案是自适应的。要达到最佳，我们必须预测未来。
