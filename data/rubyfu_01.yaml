- en: Module 0x1 | Basic Ruby Kung Fu
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块 0x1 | 基础 Ruby Kung Fu
- en: Module 0x1 | Basic Ruby Kung Fu
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块 0x1 | 基础 Ruby Kung Fu
- en: Ruby has awesome abilities and tricks for dealing with string and array scenarios.
    In this chapter we'll present some tricks we may need in our hacking life.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby 在处理字符串和数组场景时具有令人惊叹的能力和技巧。在本章中，我们将介绍一些在黑客生活中可能需要的技巧。
- en: Terminal
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 终端
- en: Terminal size
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 终端大小
- en: 'Here are some different ways to get terminal size from ruby:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从 Ruby 获取终端大小的几种不同方法：
- en: By IO/console standard library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 IO/console 标准库
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By readline standard library
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 readline 标准库
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By environment like IRB or Pry
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过环境，如 IRB 或 Pry
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By tput command line
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 tput 命令行
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Console with tab completion
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有制表符补全的控制台
- en: 'We can''t stop being jealous of Metasploit console (msfconsole), where we take
    a rest from command line switches. Fortunately, here is the main idea of console
    tab completion in ruby:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法停止嫉妒 Metasploit 控制台（msfconsole），在那里我们可以从命令行开关中休息一下。幸运的是，这里是在 Ruby 中进行控制台制表符补全的主要思想：
- en: Readline
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取行
- en: The Readline module provides an interface for GNU Readline. This module defines
    a number of methods to facilitate completion and accesses input history from the
    Ruby interpreter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Readline 模块提供了 GNU Readline 的接口。此模块定义了一些方法，以便从 Ruby 解释器中完成并访问输入历史记录。
- en: '**console-basic1.rb**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**console-basic1.rb**'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now run it and try out the tab completion!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行它，试试制表符补全吧！
- en: Well, the main idea for tab completion is to make things easier, not just "press
    tab". Here is a simple thought...
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，制表符补全的主要思想是使事情变得更容易，而不仅仅是“按制表符”。这里是一个简单的思路…
- en: '**console-basic2.rb**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**console-basic2.rb**'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Things can go much farther, like *msfconsole*, maybe?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 事情可能会更进一步，比如 *msfconsole*，也许？
- en: '* * *'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[Ruby Readline Documentation and Tutorial](http://bogojoker.com/readline/)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Ruby Readline 文档和教程](http://bogojoker.com/readline/)'
- en: String
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: String
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: Colorize your outputs
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为你的输出添加颜色
- en: Since we mostly work with the command-line, we need our output to be more elegant.
    Here are the main colors you may need to do so. You can always add to this set.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们主要使用命令行，我们需要使输出更加优雅。以下是你可能需要的主要颜色。你总是可以添加到这个集合中。
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: All you need is to call the color when you `puts` it
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要在 `puts` 时调用颜色
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To understand this code, let's explain it with a diagram
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这段代码，让我们用图表解释一下
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Or you can use an external gem called [colorized] for fancier options
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以使用一个名为 [colorized] 的外部 gem 来获取更多的选择
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Then just require it in your script
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后只需在脚本中引用它
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Overwriting Console Output
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖控制台输出
- en: It's awesome to have more flexibility in your terminal, and sometimes we need
    to do more with our scripts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的终端中拥有更多的灵活性是很棒的，有时我们需要在我们的脚本中做更多的事情。
- en: Overwriting console output makes our applications elegant and less noisy for
    repeated outputs like counting and loading progress bars.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖控制台输出可以使我们的应用程序更加优雅，对于像计数和加载进度条这样的重复输出，噪音更少。
- en: I've read a how-to about [bash Prompt cursor movement](http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x361.html)
    and I found it is convenient to have in our scripts. Here's what I've found so
    far
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我阅读了一个关于 [bash 提示符光标移动](http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x361.html)
    的教程，发现在我们的脚本中使用它很方便。这是我目前找到的内容
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: So to test these I created the following PoC
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所以为了测试这些，我创建了以下 PoC
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So far so good, but why don't we make these as Ruby methods for more elegant
    usage? So I came up with the following
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止还不错，但是为什么不将这些作为 Ruby 方法来实现更加优雅的使用呢？所以我想到了以下内容
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then as a PoC, I've used the same previous PoC code (after updating String class
    on-the-fly in the same script)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后作为 PoC，我在同一个脚本中使用了相同的先前 PoC 代码（在运行时更新 String 类）
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It's much more elegant, isn't it? Say yes plz
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 更加优雅，不是吗？请说是
- en: Some application...
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序…
- en: Create Progress Percent
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建进度百分比
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Another example
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Using our elegant way (after updating String class on-the-fly)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们优雅的方式（在运行时更新 String 类）
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '* * *'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Conversion
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换
- en: Conversion
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换
- en: String conversion and/or encoding is an important part of exploitation and firewall
    bypasses.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串转换和/或编码是利用和防火墙绕过的重要部分。
- en: Convert String/Binary to Hex
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将字符串/二进制转换为十六进制
- en: If no prefix is needed, you just do the following
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要前缀，只需执行以下操作
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Otherwise, see the below ways
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，请参见下面的方法
- en: For a single character
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单个字符
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Note:** the symbols `*""` are equal of `.join`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 符号 `*""` 等于 `.join`'
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: or
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: or
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: or
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE23]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: or
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE24]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: or
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE25]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: or
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE26]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: or
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE27]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: or
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE28]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Convert Hex to String/Binary
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将十六进制转换为字符串/二进制
- en: '[PRE29]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: or
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE30]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: or for raw socket
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 或用于原始套接字
- en: '[PRE31]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: in-case of binary that is out of `.chr` range. For example you may need to convert
    an IP-address to hex raw then send it through the socket. The case of just converting
    it to hex would not work for you
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于超出`.chr`范围的二进制情况。例如，你可能需要将IP地址转换为十六进制原始数据，然后通过套接字发送。仅仅将其转换为十六进制是行不通的
- en: '[PRE32]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see, Ruby reads returns `"\\xc0\\xa8\\x64\\x0a"` which doesn't equal
    `"\xc0\xa8\x64\x0a"`. Try to enter this value (with double-quotes) `"\xc0\xa8\x64\x0a"`
    into your irb directly and you'll notice that the return is `"\xC0\xA8d\n"` which
    is what should be passed to the raw socket, not the `"\\xc0\\xa8\\x64\\x0a"`.
    The main cause is ruby escapes the backslash(`\`).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，Ruby读取返回`"\\xc0\\xa8\\x64\\x0a"`，这与`"\xc0\xa8\x64\x0a"`不相等。尝试直接在irb中输入这个值（带双引号）`"\xc0\xa8\x64\x0a"`，你会注意到返回值是`"\xC0\xA8d\n"`，这才是应该传递给原始套接字的值，而不是`"\\xc0\\xa8\\x64\\x0a"`。主要原因是Ruby转义了反斜杠（`\`）。
- en: To solve this issue, use pack to convert integers to 8-bit unsigned (unsigned
    char)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，使用打包将整数转换为8位无符号（无符号字符）
- en: '[PRE33]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Note about hex:** Sometimes you might face non-printable characters, especially
    when dealing with binary raw. In this case, append **(**`# -*- coding: binary
    -*-`**)** at the top of your file to fix any interpretation issues.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于十六进制的注意事项：** 有时你可能会遇到非可打印字符，特别是在处理二进制原始数据时。在这种情况下，在文件顶部添加**(**`# -*- coding:
    binary -*-`**)**可以解决任何解释问题。'
- en: Convert Hex (Return address) to Little-Endian format
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将十六进制（返回地址）转换为小端格式
- en: Little-endian format is simply reversing the string such as reversing/backwarding
    "Rubyfu" to "ufybuR" which can be done by calling the `reverse` method of the
    `String` class
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 小端格式就是简单地反转字符串，比如将"Rubyfu"反转为"ufybuR"，可以通过调用`String`类的`reverse`方法来实现
- en: '[PRE34]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In exploitation, this is not as simple as that since we're dealing with hex
    values that may not represent printable characters.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在利用中，这并不像看起来那么简单，因为我们处理的是可能不代表可打印字符的十六进制值。
- en: So assume we have `0x77d6b141` as the return address which we want to convert
    to Little-Endian format to allow the CPU to read it correctly.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有`0x77d6b141`作为返回地址，我们想将其转换为小端格式以使CPU正确读取它。
- en: Generally speaking, it's really a trivial task to convert `0x77d6b141` to `\x41\xb1\xd6\x77`
    since it's a one time process, but this is not the case if you have a ROP chain
    that has to be staged in your exploit. To do so simply `pack` it as an array
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，将`0x77d6b141`转换为`\x41\xb1\xd6\x77`是一个微不足道的任务，因为这是一个一次性过程，但如果你有一个需要在利用中分阶段的ROP链，情况就不同了。要做到这一点，只需将其作为数组`pack`
- en: '[PRE35]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: It happens that sometimes you get an error because of a non-Unicode string issue.
    To solve this issue, just force encoding to UTF-8, but most of the time you will
    not face this issue
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会因为非Unicode字符串问题而出现错误。要解决这个问题，只需强制编码为UTF-8，但大多数情况下你不会遇到这个问题
- en: '[PRE36]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If you have a ROP chain, then it''s not decent to apply this each time - so
    you can use the first way and append **(**`# -*- coding: binary -*-`**)** at top
    of your exploit file.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你有一个ROP链，那么每次应用这个方法并不合适 - 所以你可以使用第一种方法，并在你的利用文件顶部添加**(**`# -*- coding: binary
    -*-`**)**。'
- en: Convert to Unicode Escape
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换为Unicode转义
- en: '**Hexadecimal unicode escape**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**十六进制Unicode转义**'
- en: '[PRE37]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Or using unpack
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用解包
- en: '[PRE38]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: A shorter way
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更短的方法
- en: '[PRE39]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**Octal unicode escape**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**八进制Unicode转义**'
- en: An octal escape is exactly the same, except we convert the string to octal instead
    of hexadecimal
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 八进制转义与十六进��转义完全相同，只是我们将字符串转换为八进制而不是十六进制
- en: '[PRE40]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '**Escape Sequences in Double-Quoted Strings**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**双引号字符串中的转义序列**'
- en: '[PRE41]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: En/Decode base-64 String
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码/解码base-64字符串
- en: We'll present this in a few ways.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以几种方式呈现这个问题。
- en: '**Encode string**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**编码字符串**'
- en: '[PRE42]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: or
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE43]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '**Decode**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**解码**'
- en: '[PRE44]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: or
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE45]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '**TIP:**'
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**提示：**'
- en: The string unpack method is incredibly useful for converting data we read as
    strings back to their original form. To read more, visit the String class reference
    at www.ruby-doc.org/core/classes/String.html.
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 字符串解包方法对于将我们读取的数据作为字符串转换回其原始形式非常有用。要了解更多，请访问www.ruby-doc.org/core/classes/String.html上的String类参考。
- en: En/Decode URL String
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码/解码URL字符串
- en: URL encoding/decoding is well known. From a hacker's point of view, we need
    it often for client-side vulnerabilities.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: URL编码/解码是众所周知的。从黑客的角度来看，我们经常需要它来处理客户端漏洞。
- en: '**Encoding string**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**编码字符串**'
- en: '[PRE46]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '**Decoding string**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**解码字符串**'
- en: '[PRE47]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: You can encode/decode any non-URL string, of-course.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以编码/解码任何非URL字符串，当然。
- en: The above way will encode any non-URL standard strings only (ex. `<>"{}`) however
    if you want to encode the full string use `URI.encode_www_form_component`
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法仅对任何非URL标准字符串进行编码（例如`<>"{}`），但如果要对整个字符串进行编码，请使用`URI.encode_www_form_component`
- en: '[PRE48]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: HTML En/Decode
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML编码/解码
- en: '**Encoding HTML**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**编码HTML**'
- en: '[PRE49]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Returns
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE50]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '**Decoding HTML**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**解码HTML**'
- en: '[PRE51]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Returns
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE52]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: En/Decode SAML String
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解码/编码SAML字符串
- en: '**Decoding SAML**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**解码SAML**'
- en: '[PRE53]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Returns
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE54]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[Source](http://stackoverflow.com/questions/3253298/base64-decode64-in-ruby-returning-strange-results)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[来源](http://stackoverflow.com/questions/3253298/base64-decode64-in-ruby-returning-strange-results)'
- en: '[More about SAML][3]'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[关于SAML的更多信息][3]'
- en: '* * *'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[3]: [http://dev.gettinderbox.com/2013/12/16/introduction-to-saml/](http://dev.gettinderbox.com/2013/12/16/introduction-to-saml/)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[3]: [http://dev.gettinderbox.com/2013/12/16/introduction-to-saml/](http://dev.gettinderbox.com/2013/12/16/introduction-to-saml/)'
- en: Extraction
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取
- en: Extraction
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取
- en: String extraction is one of the main tasks that all programmers need. It's often
    difficult because we don't get an easy string presentation from which to extract
    useful data/information. Here are some helpful Ruby string-extraction cases.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串提取是所有程序员需要做的主要任务之一。这通常很困难，因为我们没有一个易于提取有用数据/信息的字符串呈现。以下是一些有用的Ruby字符串提取案例。
- en: Extracting Network Strings
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从网络中提取字符串
- en: Extracting MAC address from string
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从字符串中提取MAC地址
- en: We need to extract all MAC addresses from an arbitrary string
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从任意字符串中提取所有MAC地址
- en: '[PRE55]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '**Using Regular Expressions**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用正则表达式**'
- en: This regular expression should support Windows and Linux MAC address formats.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式应该支持Windows和Linux的MAC地址格式。
- en: Lets to find our mac
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 找到我们的mac
- en: '[PRE56]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Returns
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE57]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Extracting IPv4 address from string
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从字符串中提取IPv4地址
- en: We need to extract all IPv4 addresses from an arbitrary string
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从任意字符串中提取所有IPv4地址
- en: '[PRE58]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Let's find our IPs
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们找到我们的IP地址
- en: '[PRE60]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Returns
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE61]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Extracting IPv6 address from string
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从字符串中提取IPv6地址
- en: '[PRE62]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[Source](https://github.com/rapid7/rex-socket/blob/master/lib/rex/socket.rb)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[来源](https://github.com/rapid7/rex-socket/blob/master/lib/rex/socket.rb)'
- en: See also
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[https://gist.github.com/cpetschnig/294476](https://gist.github.com/cpetschnig/294476)'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://gist.github.com/cpetschnig/294476](https://gist.github.com/cpetschnig/294476)'
- en: '[http://snipplr.com/view/43003/regex--match-ipv6-address/](http://snipplr.com/view/43003/regex--match-ipv6-address/)'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://snipplr.com/view/43003/regex--match-ipv6-address/](http://snipplr.com/view/43003/regex--match-ipv6-address/)'
- en: Extracting Web Strings
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从网页中提取字符串
- en: Extracting URLs from a file
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从文件中提取URL
- en: Assume we have the following string
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有以下字符串
- en: '[PRE63]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '**Using Regular Expressions**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用正则表达式**'
- en: '[PRE64]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '**Using standard URI module**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用标准URI模块**'
- en: This returns an array of URLs
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个URL数组
- en: '[PRE65]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Extracting URLs from web page
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从网页中提取URL
- en: Using above tricks
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述技巧
- en: '[PRE66]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: or using a regular expression
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 或使用正则表达式
- en: '[PRE67]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Extracting email addresses from web page
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从网页中提取电子邮件地址
- en: '[PRE68]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Extracting strings from HTML tags
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从HTML标签中提取字符串
- en: Assume we have the following HTML contents and we need to get strings only and
    eliminate all HTML tags
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有以下HTML内容，我们需要仅获取字符串并消除所有HTML标签
- en: '[PRE70]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Returns
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE71]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Parsing colon separated data from a file
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从文件中解析以冒号分隔的数据
- en: During a pentest, you may need to parse text that has a very common format as
    follows
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试期间，您可能需要解析具有以下非常常见格式的文本
- en: '[PRE72]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The main idea is to remove *repeated* keys and pass to one key with an array
    of values.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思想是删除*重复*键，并传递到一个具有值数组的键。
- en: '[PRE73]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: For one-liner lovers
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一行爱好者
- en: '[PRE74]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Array
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: Array
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: Pattern
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式
- en: Pattern create
  id: totrans-219
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模式创建
- en: Assume the pattern length = 500 (you can change it to any value). By default
    this will create 20280 probabilities max.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 假设模式长度=500（您可以将其更改为任何值）。默认情况下，这将创建20280个最大可能性。
- en: '[PRE75]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: In case you need longer a pattern (ex. 30000) you can do the following
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要更长的模式（例如30000），可以执行以下操作
- en: '[PRE76]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Pattern offset
  id: totrans-224
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模式偏移
- en: I'll assume the pattern was equal or less than “20280” and we are looking for
    “9Ak0” pattern characters. The pattern_create should be initialized from above
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设模式等于或小于“20280”，我们正在寻找“9Ak0”模式字符。模式创建应从上面初始化
- en: '[PRE77]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Note: This does not consider the Little-endian format, for that there is extra
    code that should be written. For more info, please take a look at the following
    [code][1].'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：这不考虑小端格式，对于这一点需要编写额外的代码。有关更多信息，请查看以下[代码][1]。
- en: Generate all hexadecimal values from `\x00` to `\xff`
  id: totrans-228
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从`\x00`到`\xff`生成所有十六进制值
- en: '[PRE78]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '**Notes:**'
  id: totrans-230
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: ''
  id: totrans-231
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To change value presentation from `\xea` to `0xea`, change `\x%x` to `0x%x`
  id: totrans-232
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将值表示从`\xea`更改为`0xea`，请将`\x%x`更改为`0x%x`
- en: To make all letters capital (`\xea` to `\xEA`) , change `\x%x` to `\x%X`
  id: totrans-233
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使所有字母大写（`\xea`到`\xEA`），将`\x%x`更改为`\x%X`
- en: Generate all printable characters
  id: totrans-234
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成所有可打印字符
- en: '[PRE79]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: short and unclean
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 简短而不干净
- en: '[PRE80]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '* * *'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[1]: [https://github.com/KINGSABRI/BufferOverflow-Kit/blob/master/lib/pattern.rb](https://github.com/KINGSABRI/BufferOverflow-Kit/blob/master/lib/pattern.rb)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[1]: [https://github.com/KINGSABRI/BufferOverflow-Kit/blob/master/lib/pattern.rb](https://github.com/KINGSABRI/BufferOverflow-Kit/blob/master/lib/pattern.rb)'
