- en: Prefer Domain-Specific Types to Primitive Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优先选择领域特定的类型而不是原始类型
- en: Prefer Domain-Specific Types to Primitive Types
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优先选择领域特定的类型而不是原始类型
- en: On 23rd September 1999 the $327.6 million Mars Climate Orbiter was lost while
    entering orbit around Mars due to a software error back on Earth. The error was
    later called the *metric mix-up*. The ground station software was working in pounds
    while the spacecraft expected newtons, leading the ground station to underestimate
    the power of the spacecraft's thrusters by a factor of 4.45.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 1999年9月23日，价值$327.6百万的火星气候轨道飞行器在进入火星轨道时由于地球上的软件错误而丢失。这个错误后来被称为*度量混乱*。地面站软件使用英镑而飞船期望使用牛顿，导致地面站低估了飞船推进器的功率约4.45倍。
- en: 'This is one of many examples of software failures that could have been prevented
    if stronger and more domain-specific typing had been applied. It is also an example
    of the rationale behind many features in the Ada language, one of whose primary
    design goals was to implement embedded safety-critical software. Ada has strong
    typing with static checking for both primitive types and user-defined types:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是许多软件故障的例子之一，如果应用了更强大和更具领域特定的类型系统，则可以预防。这也是Ada语言中许多特性背后的理由之一，该语言的主要设计目标之一是实现嵌入式安全关键软件。Ada具有对基本类型和用户定义类型进行静态检查的强类型：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Developers in less demanding domains might also benefit from applying more
    domain-specific typing, where they might otherwise continue to use the primitive
    data types offered by the language and its libraries, such as strings and floats.
    In Java, C++, Python, and other modern languages the abstract data type is known
    as class. Using classes such as `Velocity_In_Knots` and `Distance_In_Nautical_Miles`
    adds a lot of value with respect to code quality:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在需求较低的领域开发者也可能受益于应用更多领域特定的类型，否则他们可能会继续使用语言及其库提供的原始数据类型，如字符串和浮点数。在Java、C++、Python和其他现代语言中，抽象数据类型被称为类。使用诸如`Velocity_In_Knots`和`Distance_In_Nautical_Miles`等类，对于代码质量具有很大的价值：
- en: The code becomes more readable as it expresses concepts of a domain, not just
    Float or String.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码更易读，因为它表达了领域的概念，而不仅仅是Float或String。
- en: The code becomes more testable as the code encapsulates behavior that is easily
    testable.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码封装了易于测试的行为，使得代码更具有可测试性。
- en: The code facilitates reuse across applications and systems.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码促进了跨应用程序和系统的重用。
- en: The approach is equally valid for users of both statically and dynamically typed
    languages. The only difference is that developers using statically typed languages
    get some help from the compiler while those embracing dynamically typed languages
    are more likely to rely on their unit tests. The style of checking may be different,
    but the motivation and style of expression is not.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法对于静态类型语言和动态类型语言的用户同样有效。唯一的区别在于，使用静态类型语言的开发者会得到编译器的一些帮助，而那些接受动态类型语言的开发者更可能依赖他们的单元测试。检查的风格可能不同，但动机和表达的风格是一致的。
- en: The moral is to start exploring domain-specific types for the purpose of developing
    quality software.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 教训是开始探索领域特定的类型，以开发高质量的软件。
- en: By [Einar Landre](http://programmer.97things.oreilly.com/wiki/index.php/Einar_Landre)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[Einar Landre](http://programmer.97things.oreilly.com/wiki/index.php/Einar_Landre)
