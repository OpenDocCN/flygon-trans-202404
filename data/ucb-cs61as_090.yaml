- en: Lesson 8 Intro
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8课介绍
- en: Warning
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警告
- en: This lesson contains dense reading and needs major revisions. If you find any
    of this material confusing or hard to understand, please do not hesitate to ask
    questions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这节课内容阅读密集，需要进行重大修订。如果您发现这些材料中有任何令人困惑或难以理解的地方，请毫不犹豫地提出问题。
- en: Prerequisites and What to Expect
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件和期望
- en: Make sure you understand all the material prior to this lesson, especially [Message
    Passing](http://berkeley-cs61as.github.io/textbook/message-passing.html).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您在本课之前理解所有材料，尤其是[消息传递](http://berkeley-cs61as.github.io/textbook/message-passing.html)。
- en: In this section, we are going to go over the change of the state of the variables
    and environment. You get to draw cool diagrams that illustrates beautifully the
    environment in which Scheme stores variables and procedures. Be prepared to be
    exposed to a fair amount of information and synthesize it!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论变量和环境状态的变化。您将绘制漂亮的图表，生动地说明Scheme存储变量和过程的环境。准备好接受大量信息并加以综合！
- en: Reading
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: 'In this section, we will cover the material in the following readings:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖以下阅读材料：
- en: '[Introduction to Unit 3: Modularity, Objects, and State](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-19.html#%_sec_3)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3单元介绍：模块化、对象和状态](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-19.html#%_sec_3)'
- en: '[SICP 3.1: Assignment and Local State](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-20.html#%_sec_3.1)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SICP 3.1：赋值和局部状态](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-20.html#%_sec_3.1)'
- en: '[SICP 3.2: The Environment Model of Evaluation](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%_sec_3.2)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SICP 3.2：评估的环境模型](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%_sec_3.2)'
- en: '[OOP Below the line](http://inst.eecs.berkeley.edu/~cs61as/reader/belowline.pdf)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[线下面的面向对象编程](http://inst.eecs.berkeley.edu/~cs61as/reader/belowline.pdf)'
- en: '[Environment Diagram Rules](https://docs.google.com/document/d/1GbRF9rB9TtFbf--89MBDEHzygF2E5_E2wpLBh4rb4Z4/edit)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[环境图规则](https://docs.google.com/document/d/1GbRF9rB9TtFbf--89MBDEHzygF2E5_E2wpLBh4rb4Z4/edit)'
- en: Feel free to read ahead!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 随时阅读提前！
- en: 'Also, here''s the webcast of old lecture videos. The only big example of an
    environment diagram is in the webcast, so we strongly suggest you watch it:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这里是旧讲座视频的网络直播。环境图的唯一大例子在网络直播中，因此我们强烈建议您观看：
- en: '[Lecture 21](http://www.youtube.com/watch?v=vh73mm7MqA0&feature=share&list=PL6D76F0C99A731667)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第21讲](http://www.youtube.com/watch?v=vh73mm7MqA0&feature=share&list=PL6D76F0C99A731667)'
- en: '[Lecture 22](http://www.youtube.com/watch?v=cmeWXO9Sa5E&feature=share&list=PL6D76F0C99A731667)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第22讲](http://www.youtube.com/watch?v=cmeWXO9Sa5E&feature=share&list=PL6D76F0C99A731667)'
- en: '[Lecture 23](http://www.youtube.com/watch?v=SdwAj_eowzg&feature=share&list=PL6D76F0C99A731667)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第23讲](http://www.youtube.com/watch?v=SdwAj_eowzg&feature=share&list=PL6D76F0C99A731667)'
- en: Modularity
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块化
- en: We ordinarily view the world as populated by independent objects, each of which
    has a state that changes over time. An object is said to "have state" if its behavior
    is influenced by its history. A bank account, for example, has state in that the
    answer to the question "Can I withdraw $100?" depends upon the history of deposit
    and withdrawal transactions. We can characterize an object's state by one or more
    state variables, which among them maintain enough information about history to
    determine the object's current behavior. In a simple banking system, we could
    characterize the state of an account by a current balance rather than by remembering
    the entire history of account transactions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常将世界视为由独立对象组成，每个对象都有随时间变化的状态。如果一个对象的行为受其历史影响，则称该对象“具有状态”。例如，银行账户具有状态，因为对于问题“我可以取出100美元吗？”的答案取决于存款和取款交易的历史。我们可以通过一个或多个状态变量来描述对象的状态，其中包含足够的关于历史的信息，以确定对象的当前行为。在一个简单的银行系统中，我们可以通过当前余额来描述账户的状态，而不是记住整个账户交易历史。
- en: In a system composed of many objects, the objects are rarely completely independent.
    Each may influence the states of others through interactions, which serve to couple
    the state variables of one object to those of other objects. Indeed, the view
    that a system is composed of separate objects is most useful when the state variables
    of the system can be grouped into closely coupled subsystems that are only loosely
    coupled to other subsystems.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在由许多对象组成的系统中，对象很少是完全独立的。通过相互作用，每个对象可能通过影响其他对象的状态来影响其他对象的状态，这些相互作用将一个对象的状态变量与其他对象的状态变量耦合在一起。事实上，当系统的状态变量可以分组为紧密耦合的子系统，并且这些子系统只与其他子系统松散耦合时，将系统视为由独立对象组成的观点是最有用的。
- en: This view of a system can be a powerful framework for organizing computational
    models of the system. For such a model to be **modular**, it should be decomposed
    into computational objects that model the actual objects in the system. Each computational
    object must have its own local state variables describing the actual object's
    state. Since the states of objects in the system being modeled change over time,
    the state variables of the corresponding computational objects must also change.
    If we choose to model the flow of time in the system by the elapsed time in the
    computer, then we must have a way to construct computational objects whose behaviors
    change as our programs run. In particular, if we wish to model state variables
    by ordinary symbolic names in the programming language, then the language must
    provide an assignment operator to enable us to change the value associated with
    a name.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这种对系统的看法可以是组织系统的计算模型的有力框架。为了使这样的模型**模块化**，它应该被分解成模拟系统中实际对象的计算对象。每个计算对象必须有自己的局部状态变量来描述实际对象的状态。由于系统中被模拟对象的状态随着时间的推移而改变，因此相应的计算对象的状态变量也必须改变。如果我们选择通过计算机中经过的时间来模拟系统中的时间流动，那么我们必须有一种方法来构造在我们的程序运行时行为会发生变化的计算对象。特别是，如果我们希望通过编程语言中的普通符号名称来模拟状态变量，那么语言必须提供赋值运算符，以使我们能够更改与名称关联的值。
- en: In object-oriented programming, one of the seven fundamental principles of the
    object model. The **modularity principle** states that a program should be composed
    of a collection of internally cohesive units, called objects, that can communicate
    and interoperate without needing information about their internal structure.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程中，对象模型的七个基本原则之一。**模块化原则**指出程序应该由一组内部协调的单元组成，称为对象，它们可以相互通信和互操作，而无需了解其内部结构的信息。
- en: Takeaways
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: In this subsection, you learned the definition of modularity.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个小节中，你学习了模块化的定义。
- en: What's Next?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: Go to the next subsection and see how you can use modularity to program!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 前往下一个小节，看看如何使用模块化进行编程！
