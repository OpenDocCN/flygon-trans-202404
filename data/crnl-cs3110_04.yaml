- en: 'Recitation 2: Testing and debugging'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二次课：测试与调试
- en: Debugging is the last resort
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试是最后的手段
- en: Many programmers, especially in introductory classes, might think of programming
    as a task largely involving debugging. So it's worthwhile to take a step back
    and think about everything that comes *before* debugging.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多程序员，尤其是在入门课程中，可能会认为编程主要涉及调试的任务。因此，值得退后一步思考一下在调试之前发生的一切。
- en: '**The first defense against bugs is to make them impossible.**'
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**防止错误的第一道防线是让它们不可能发生。**'
- en: Entire classes of bugs can be eradicated by choosing to program in languages
    that guarantee *[memory safety](http://www.pl-enthusiast.net/2014/07/21/memory-safety/)*
    (that no part of memory can be accessed except through a *pointer* (or reference)
    that is valid for that region of memory) and *[type safety](http://www.pl-enthusiast.net/2014/08/05/type-safety/)*
    (that no value can be used in a way inconsistent with its type). The OCaml type
    system, for example, prevents programs from buffer overflows and meaningless operations
    (like adding a boolean to a float), whereas the C type system does not.
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过选择使用保证*[内存安全性](http://www.pl-enthusiast.net/2014/07/21/memory-safety/)*（即除了通过有效的*指针*（或引用）访问该内存区域外，不能访问内存的任何部分）和*[类型安全性](http://www.pl-enthusiast.net/2014/08/05/type-safety/)*（即不会以与其类型不一致的方式使用任何值）的语言来编程，可以消除整个类别的错误。例如，OCaml
    类型系统可以防止缓冲区溢出和无意义的操作（如将布尔值添加到浮点数中），而 C 类型系统则不能。
- en: '**The second defense against bugs is to use tools that find them.**'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**防止错误的第二道防线是使用能找到它们的工具。**'
- en: There are automated source-code analysis tools, like [FindBugs](http://findbugs.sourceforge.net/),
    which can find many common kinds of bugs in Java programs, and [SLAM](http://research.microsoft.com/en-us/projects/slam/),
    which is used to find bugs in device drivers. The subfield of CS known as *formal
    methods* studies how to use mathematics to specify and verify programs, that is,
    how to prove that programs have no bugs. We'll study verification later in this
    course. *Social methods* such as code reviews and pair-programming are also useful
    at finding bugs. Studies at IBM in the 1970s-1990s suggested that code reviews
    were the most effective tools at finding bugs; see the Appendix below.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有自动化源代码分析工具，比如[FindBugs](http://findbugs.sourceforge.net/)，它可以发现 Java 程序中许多常见类型的错误，以及[SLAM](http://research.microsoft.com/en-us/projects/slam/)，它用于发现设备驱动程序中的错误。计算机科学的子领域*形式方法*研究如何使用数学来指定和验证程序，即如何证明程序没有错误。我们将在本课程的后期研究验证。*社交方法*，如代码审查和配对编程，在发现错误方面也很有用。IBM
    在 1970 年代至 1990 年代的研究表明，代码审查是发现错误最有效的工具；请参阅下面的附录。
- en: '**The third defense against bugs is to make them immediately visible.**'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**防止错误的第三道防线是立即让它们可见。**'
- en: The earlier a bug appears, the easier it is to diagnose and fix. If computation
    instead proceeds past the point of the bug, then that further computation might
    obscure where the failure really occurred. *Assertions* in the source code make
    programs "fail fast" and "fail loudly", so that bugs appear immediately, and the
    programmer knows exactly where in the source code to look.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 错误越早出现，诊断和修复就越容易。如果计算继续进行超出错误点，则进一步的计算可能会掩盖故障真正发生的地点。源代码中的*断言*使程序“快速失败”和“大声失败”，以便错误立即出现，程序员确切地知道在源代码中要查找的位置。
- en: '**The fourth defense against bugs is extensive testing.**'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**防止错误的第四道防线是广泛的测试。**'
- en: How can you know whether a piece of code has a particular bug? Write tests that
    would expose the bug, then confirm that your code doesn't fail those tests. *Unit
    test* for a relatively small piece of code, such as an individual function or
    module, are especially important to write at the same time as you develop that
    code. Running of those tests should be automated, so that if you ever break the
    code, you find out as soon as possible. (That's really Defense 3 again.)
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你如何知道一段代码是否有特定的错误？编写能够暴露该错误的测试，然后确认你的代码不会在这些测试中失败。*单元测试*适用于相对较小的代码片段，比如单个函数或模块，在你开发该代码的同时编写这些测试尤为重要。这些测试应该自动化运行，这样如果你破坏了代码，你就能尽快发现。（这实际上又是防御手段
    3。）
- en: '**The fifth and final defense against bugs is debugging as you know it.**'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**防止错误的第五和最后一道防线就是调试，如你所知。**'
- en: Debugging is really the last resort of a programmer.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调试实际上是程序员的最后手段。
- en: In the rest of this recitation, we'll look at defenses 3 through 5.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次课的其余部分，我们将看看第 3 到第 5 道防线。
- en: 'Defense 3: Assertions'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防御手段 3：断言
- en: 'The `Assertions` module contains a function `assert_true : bool -> unit`, which
    returns unit if passed `true` as an argument, and raises an exception if passed
    `false`. For example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`Assertions`模块包含一个函数`assert_true：bool -> unit`，如果传递`true`作为参数，则返回单位，如果传递`false`，则引发异常。例如：'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: (The `open Assertions` line makes it possible to refer to any function `f` declared
    inside `Assertions` simply as `f`, rather than `Assertions.f`.)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: （`open Assertions`行使我们能够简单地将声明在`Assertions`内部的任何函数`f`称为`f`，而不是`Assertions.f`。）
- en: 'If we save this code in a file `test.ml` then run `cs3110 compile test.ml;
    cs3110 run test.ml` we see the exception being raised:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将此代码保存在文件`test.ml`中，然后运行`cs3110 compile test.ml; cs3110 run test.ml`，我们会看到异常被触发：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We'll see later in the course how to declare, raise, and handle exceptions ourselves.
    For now, it's enough to know that `Assertions` uses them.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在课程后面，我们会看到如何声明、触发和处理异常。现在，知道`Assertions`使用它们就足够了。
- en: The `Assertions` module contains many other functions we can use to write assertions.
    You can read the [documentation](https://github.com/cs3110/tools/blob/master/cs3110-cli/assertions/assertions.mli)
    at the GitHub repo for the module.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Assertions`模块包含许多其他我们可以用来编写断言的函数。您可以在模块的GitHub存储库中阅读[文档](https://github.com/cs3110/tools/blob/master/cs3110-cli/assertions/assertions.mli)。'
- en: 'Defense 4: Unit tests in OCaml'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防御4：OCaml中的单元测试
- en: This course has developed its own unit-testing framework, which is part of the
    `cs3110` tool distributed on the VM. Our framework is quite similar to (and in
    fact is built on) an open-source library `Pa_ounit`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 该课程开发了自己的单元测试框架，它是分布在虚拟机上的`cs3110`工具的一部分。我们的框架与一个开源库`Pa_ounit`非常相似（实际上是基于它构建的）。
- en: 'Suppose you''re writing a function to determine whether a number is prime:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在编写一个确定数字是否为质数的函数：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '(Obviously, you''re not yet done writing the function...) And suppose you''ve
    saved this function in a file named `prime.ml`. To write unit tests, create a
    new file `prime_test.ml`. (The choice of filename is a convention, not a strict
    requirement.) Inside `prime_test.ml`, you can write unit tests such as the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: （显然，你还没有写完函数……）假设您已经将此函数保存在名为`prime.ml`的文件中。要编写单元测试，创建一个名为`prime_test.ml`的新文件（文件名的选择是一种约定，而不是严格要求）。在`prime_test.ml`中，您可以编写如下的单元测试：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first two lines open the modules for the code being tested and for the assertions
    module. Note that the first letter of the module name is capitalized, regardless
    of whether or not it was capitalized in the actual filename. The strings associated
    with each unit test are simply descriptive names. The last line (the call to `summarize`)
    should remain the final line of the file if you add any new tests. This function
    call exits with an error and a summary of the tests that failed. If all tests
    pass, it will exit normally.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前两行打开了被测试代码和断言模块的模块。请注意，无论模块名称的首字母是否大写，在实际文件名中都要大写。与每个单元测试相关联的字符串只是描述性名称。如果添加了任何新测试，最后一行（对`summarize`的调用）应保持为文件的最终行。如果所有测试都通过，它将正常退出。
- en: 'To run your unit tests, do the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行单元测试，请执行以下操作：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As output, you will see:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作为输出，您将看到：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Example: Unit tests'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：单元测试
- en: 'The following file contains some buggy code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的文件包含一些有错误的代码：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is a unit test file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个单元测试文件：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Do the above test cases pass? If not, which tests fail? If so, does this guarantee
    correctness of the above functions? Can you think of some more cases that we did
    not test? Add some cases of your own to the test file, and fix the implementation
    of the functions so that your tests pass.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述测试案例通过了吗？如果没有，哪些测试失败了？如果通过了，这是否保证了上述函数的正确性？您能想到我们没有测试的其他一些情况吗？向测试文件添加一些自己的案例，并修复函数的实现，使您的测试通过。
- en: Test-driven development
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: Testing doesn't have to happen strictly after you write code. In *test-driven
    development*, testing comes first!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 测试不一定要在编写代码之后严格进行。在*测试驱动开发*中，测试是首要的！
- en: 'Suppose we are working with a datatype for days:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在处理一个用于日期的数据类型：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And we want to write a function `next_weekday : day -> day` that returns the
    next weekday after a given day. We start by writing the most basic, broken version
    of that function we can:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要编写一个函数`next_weekday：day -> day`，它返回给定日期后的下一个工作日。我们首先编写最基本、有错误的版本：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then we begin writing tests. For example, we know that the next weekday after
    Monday is Tuesday. So we add a test:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们开始编写测试。例如，我们知道周一后的下一个工作日是周二。因此我们添加一个测试：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We compile and run the test; it fails. That''s good! Now we know that we have
    some functionality to add. Let''s go back and make this test pass:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编译并运行测试；它失败了。这是好事！现在我们知道我们有一些功能要添加。让我们回去让这个测试通过：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We compile and run the test; it passes. Time to add some more tests:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编译并运行测试；它通过了。是时候添加更多测试了：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We compile and run the tests; many fail. That''s good! We add new functionality:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编译并运行测试；许多失败。这是好事！我们添加新功能：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We compile and run the tests; they pass. Perhaps overly emboldened by our success
    in adding functionality, we notice the pattern that has evolved, and we decide
    to finish writing the function:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编译并运行测试；它们通过了。也许过于得意于我们添加功能的成功，我们注意到了已经形成的模式，并决定完成编写函数：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '(Of course we got it wrong.) We add some new tests to finish testing all the
    possible cases:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: （当然我们搞错了。）我们添加了一些新测试来完成测试所有可能的情况：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We compile and run the tests; tests 5 and 6 fail! Surprised, we look at test
    5, notice that the code for `next_weekday(Friday)` must be wrong, and fix the
    bug. After fixing the same bug for test 6, we end up with the following complete
    piece of code and unit tests:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编译并运行测试；测试 5 和 6 失败！令人惊讶，我们看了一下测试 5，注意到 `next_weekday(Friday)` 的代码肯定是错的，然后修复了
    bug。在为测试 6 修复相同的 bug 后，我们最终得到了以下完整的代码片段和单元测试：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Test-driven development is related to *extreme programming* (XP), is a collection
    of ideas about how to structure team programming projects. It emphasizes *incremental*
    development of code: there is always something that can be tested. Testing is
    not something that happens after implementation; instead, *continuous testing*
    is used to catch errors early. Thus, it is important to develop unit tests immediately
    when the code is written. Automating test suites is crucial so that continuous
    testing requires essentially no effort.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发与*极限编程*（XP）相关，是关于如何构建团队编程项目的一系列思想。它强调代码的*增量*开发：总有一些可以进行测试的东西。测试不是在实施后发生的事情；相反，*持续测试*用于及早捕获错误。因此，在编写代码时立即开发单元测试非常重要。自动化测试套件至关重要，以便持续测试几乎不需要任何努力。
- en: Extreme programming emphasizes bottom-up development of code modules for which
    units tests can be developed. Extreme programming also emphasizes social process
    on programming teams. Programmers work closely, communicating more verbally than
    with formal design documents. Specifications are short and programmers rely on
    common knowledge among the development team. Extreme programming is a good way
    to quickly development software, but it has been criticized for not producing
    high-level design documents. In the long run a project developed this way might
    be hard to manage, because the code is wedded to the engineers.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 极限编程强调对可以开发单元测试的代码模块进行自下而上的开发。极限编程还强调编程团队的社交过程。程序员密切合作，更多地通过口头交流而不是正式设计文档进行沟通。规格说明很简短，程序员依赖于开发团队的共同知识。极限编程是快速开发软件的好方法，但也因未能产生高级设计文档而受到批评。从长远来看，以这种方式开发的项目可能难以管理，因为代码与工程师紧密相关。
- en: Guidelines for writing unit tests
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写单元测试的指南
- en: 'When writing tests, keep in mind the acronym FIRST:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试时，记住首字母缩略词FIRST：
- en: 'Fast: tests should run and complete quickly.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速：测试应该快速运行并完成。
- en: 'Independent: no tests should depend on each other.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立性：没有测试应该依赖于其他测试。
- en: 'Repeatable: tests should work in any environment—i.e. they should not depend
    on any external factor such as the current time.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可重复：测试应该在任何环境中工作——即它们不应该依赖于任何外部因素，比如当前时间。
- en: 'Self-verifying: tests should be able to report success/failure without manual
    inspection on the part of a human.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自验证：测试应该能够在人类的手动检查下报告成功/失败。
- en: 'Timely: tests should be written before or along with code.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 及时：测试应该在编写代码之前或与代码一起编写。
- en: 'In addition:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此外：
- en: Keep each unit test small. A test should be designed to diagnose whether one
    particular piece of functionality does or does not work.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持每个单元测试都很小。测试应设计为诊断一个特定的功能是否工作或不工作。
- en: Name tests in a way that suggests what they test. If nothing else, the pattern
    of `*funcname*_test*i*` works fairly well.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以能够暗示它们测试内容的方式命名测试。如果没有其他内容，`*funcname*_test*i*` 的模式效果相当不错。
- en: Test continuously. Every time you add new functionality, rerun all the unit
    tests to ensure you haven't broken anything.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不断进行测试。每次添加新功能时，重新运行所有单元测试以确保没有破坏任何内容。
- en: Black-box testing
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 黑盒测试
- en: 'In the `next_weekday` example, it''s relatively obvious which unit tests to
    write. But for more complicated functions, it can be difficult to decide what
    tests and how many to write. A good strategy for developing unit tests is to write
    them by looking only at the *specification* for the function being tested. The
    function''s specification actually gives us a lot of information about what to
    test:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在`next_weekday`的示例中，相对容易确定要编写的单元测试。但对于更复杂的函数，决定编写什么样的测试以及多少个测试可能会很困难。开发单元测试的一个好策略是仅仅通过查看正在测试的函数的*规范*来编写它们。函数的规范实际上给了我们很多关于要测试什么的信息：
- en: Any *preconditions* might give us ideas about values to test.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何*先决条件*可能会给我们关于要测试的值的想法。
- en: The *postcondition* might have structure that suggests values to test.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*后置条件*可能具有结构，建议测试值。'
- en: Testing based solely on the function's specification, as opposed to its implementation,
    is called *black-box testing*. The idea is that the function is a box that we
    cannot see into.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 仅基于函数的规范进行测试，而不是基于其实现，称为*黑盒测试*。这个想法是函数是一个我们无法看进去的盒子。
- en: 'As an example of black-box testing, consider writing a function to compute
    the amount of income tax owed in the US''s progressive income tax brackets. The
    postcondition for this function might stipulate that the tax rate is determined
    by the following table:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作为黑盒测试的一个例子，考虑编写一个函数来计算美国的渐进所得税税率中所欠的税款金额。这个函数的后置条件可能规定税率由以下表格确定：
- en: '| Income | Tax rate |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 收入 | 税率 |'
- en: '| $0–$8,925 | 10% |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| $0–$8,925 | 10% |'
- en: '| $8,926–$35,250 | 15% |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| $8,926–$35,250 | 15% |'
- en: '| $35,251–$87,850 | 25% |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| $35,251–$87,850 | 25% |'
- en: '| ... | ... |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| ... | ... |'
- en: 'There is structure in this postcondition that suggests values to test. Rather
    than test every dollar amount from $0 to $87,850, we could test the *partitions*
    suggested by the postcondition: one test for the partition $0–$8,925, another
    test for $8,926–$35,250, etc. This testing strategy is called *equivalence-class
    partitioning*. The values that fall at the extreme end of each partition are often
    particularly fruitful test cases. For example, we might write a test for $0, for
    $8,925, for $8,926, for $35,250, etc. This testing strategy is called *boundary-value
    analysis*.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个后置条件中有结构，建议要测试的值。与其测试从$0到$87,850的每个美元金额，我们可以测试后置条件建议的*分区*：一个测试用于分区$0–$8,925，另一个测试用于$8,926–$35,250，依此类推。这种测试策略称为*等价类划分*。每个分区极端末端的值通常是特别有成效的测试用例。例如，我们可以为$0编写一个测试，为$8,925编写一个测试，为$8,926编写一个测试，为$35,250编写一个测试，依此类推。这种测试策略称为*边界值分析*。
- en: White-box testing
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 白盒测试
- en: The specification for a function does not necessarily give us all the information
    we need to write a good test suite. By looking at the function's implementation,
    we might be inspired to write additional tests. Testing based on the function's
    implementation is called *white-box testing* (or perhaps better, *glass-box testing*).
    The idea is that the function is a box that we can see into.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数的规范并不一定给出我们撰写良好测试套件所需的所有信息。通过查看函数的实现，我们可能会受到启发，编写额外的测试。基于函数实现的测试称为*白盒测试*（或者更好地说*玻璃盒测试*）。这个想法是函数是一个我们可以看进去的盒子。
- en: 'As an example of white-box testing, consider writing a function to determine
    the real roots (if any) of a quadratic equation *ax² + bx + c = 0*. The specification
    for the function might read as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 作为白盒测试的一个例子，考虑编写一个函数来确定二次方程*ax² + bx + c = 0*的实根（如果有的话）。该函数的规范可能如下所示：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In which case, we might be inspired by the precondition and equivalence-class
    partitioning to generate 27 test cases for when each of the coefficients is negative,
    zero, or positive. (And that''s not a bad idea!) But if we go on to read the function''s
    implementation, we get new inspiration:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可能会受到先决条件和等价类划分的启发，为每个系数为负、零或正时生成 27 个测试用例。(这不是个坏主意！) 但如果我们继续阅读函数的实现，我们会得到新的启发：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the body, we see that the value of `d` is relevant as to whether the `then`
    branch or the `else` branch of an `if` expression is evaluated. So it makes sense
    to write test cases that explore both branches:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数体中，我们看到`d`的值与`if`表达式的`then`分支或`else`分支的评估有关。因此，编写探索两个分支的测试用例是有意义的：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Code coverage* is a metric for how much of the code is being tested by a test
    suite. There are various ways to measure coverage: by the number of functions
    being tested, by whether every branch of an `if` or `match` expression is tested,
    by whether enough tests exist to cause every Boolean subexpression to take on
    both `true` and `false`, etc. By writing both tests above, we are increasing code
    coverage as measured by branches.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*代码覆盖*是测试套件测试的代码量的度量标准。有多种方法来衡量覆盖率：通过测试的函数数量，是否测试了`if`或`match`表达式的每个分支，是否存在足够的测试来导致每个布尔子表达式都取`true`和`false`等。通过编写以上两个测试，我们正在增加按分支衡量的代码覆盖率。'
- en: 'Defense 5: Debugging'
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防御五：调试
- en: So you've discovered a bug. What next?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你发现了一个bug。接下来呢？
- en: '**Distill the bug into a small test case.** Debugging is hard work, but the
    smaller the test case, the more likely you are to focus your attention of the
    piece of code where the bug lurks. Time spent on this distillation can therefore
    be time saved, because you won''t have to re-read lots of code. Don''t continue
    debugging until you have a small test case!'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将错误简化为小测试用例。**调试是一项艰苦的工作，但测试用例越小，您定位错误代码的可能性就越大。因此，花在这种简化上的时间可能是节省的时间，因为您不必重新阅读大量代码。在获得小测试用例之前不要继续调试！'
- en: '**Employ the scientific method.** Formulate a hypothesis as to why the bug
    is occurring. You might even write down that hypothesis in a notebook, as if you
    were in a Chemistry lab, to clarify it in your own mind and keep track of what
    hypotheses you''ve already considered. Next, design an experiment to affirm or
    deny that hypothesis. Run your experiment and record the result. Based on what
    you''ve learned, reformulate your hypothesis. Continue until you have rationally,
    scientifically determined the cause of the bug.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**采用科学方法。**提出关于为什么出现错误的假设。您甚至可以将该假设写在笔记本中，就像您在化学实验室中一样，以便在自己的头脑中澄清它并跟踪您已经考虑过的假设。接下来，设计一个实验来证实或否定该假设。运行您的实验并记录结果。根据您所学到的内容重新制定您的假设。直到您已经合理、科学地确定了错误的原因。'
- en: '**Fix the bug.** The fix might be a simple correction of a typo. Or it might
    reveal a design flaw that causes you to make major changes. Consider whether you
    might need to apply the fix to other locations in your code based—for example,
    was it a copy and paste error? If so, do you need to refactor your code?'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**修复错误。**修复可能是简单纠正拼写错误。或者它可能揭示了导致您进行重大更改的设计缺陷。考虑是否需要根据其他位置的代码进行修复，例如，是否是复制粘贴错误？如果是这样，您是否需要重构代码？'
- en: '**Permanently add the small test case to your test suite.** You wouldn''t want
    the bug to creep back into your code base. So keep track of that small test case
    by keeping it as part of your unit tests. That way, any time you make future changes,
    you will automatically be guarding against that same bug. Repeatedly running tests
    distilled from previous bugs is called *regression testing*.'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将小测试用例永久添加到您的测试套件中。**您不希望错误再次出现在您的代码库中。因此，通过将其保留为单元测试的一部分来跟踪该小测试用例。这样，每当您进行将来的更改时，您都将自动防范同样的错误。从以前的错误提炼出的重复运行测试称为*回归测试*。'
- en: The mechanics of OCaml debugging
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OCaml调试的机制
- en: Here are a couple tips on how to debug—if you are forced into it—in OCaml.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在OCaml中强制调试时的一些提示。
- en: '**Print statements.** Insert a *print statement* to ascertain the value of
    a variable. Suppose you want to know what the value of `x` is in the following
    function:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打印语句。**插入一个*打印语句*以确定变量的值。假设您想知道以下函数中`x`的值是多少：'
- en: '[PRE20]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Just add the line below to print that value:'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只需添加下面的行以打印该值：
- en: '[PRE21]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The [Pervasives](http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html)
    module contains many other printing statements you can use.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Pervasives](http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html)模块包含许多其他可用的打印语句。'
- en: '**Function traces.** Suppose you want to see the *trace* of recursive calls
    and returns for a function. Use the `#trace` directive:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数跟踪。**假设您想要查看函数的递归调用和返回的*跟踪*。使用`#trace`指令：'
- en: '[PRE22]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you evaluate `fib 2`, you will now see the following output:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你评估`fib 2`，你现在会看到以下输出：
- en: '[PRE23]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: To stop tracing, use the `#untrace` directive.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要停止追踪，请使用`#untrace`指令。
- en: Acknowledgment
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 致谢
- en: Some of the material in these notes is based on [slides on debugging](https://stellar.mit.edu/S/course/6/fa08/6.005/courseMaterial/topics/topic3/lectureNotes/Debugging/Debugging.pdf)
    by Rob Miller from MIT 6.005.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些笔记中的部分内容基于麻省理工学院6.005课程的Rob Miller的[调试幻灯片](https://stellar.mit.edu/S/course/6/fa08/6.005/courseMaterial/topics/topic3/lectureNotes/Debugging/Debugging.pdf)。
- en: 'Appendix: Code reviews'
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录：代码审查
- en: An extremely effective way to find faults in software systems is **code review**,
    in which the programmer goes through the code and documentation to explain how
    it works and why it is correct. It is the programmer's job to convince an expert
    review team (usually 1–3 people) who act as skeptical devil's advocates.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件系统中发现故障的一种极其有效的方法是**代码审查**，程序员通过代码和文档来解释其工作原理和为什么是正确的。程序员的工作是说服一个专家审查团队（通常是1-3人），他们充当怀疑的魔鬼的辩护者。
- en: 'There are different ways to use code review effectively:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的方法可以有效地使用代码审查：
- en: '**Code walkthrough.** In the walkthrough approach, the programmer presents
    the documentation and code to the reviewing team, and the team gives comments.
    This is an informal process. The focus is on the code rather than the coder, so
    hurt feelings are easier to avoid. However, the team may not get as much assurance
    that the code is correct.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码演示。** 在演示方法中，程序员向审查团队展示文档和代码，团队提供评论。这是一个非正式的过程。重点是代码而不是编码者，因此更容易避免伤害感情。然而，团队可能无法获得关于代码正确性的充分保证。'
- en: '**Code inspection.** Here, the review team drives the code review process.
    Some, though not necessarily very much, team preparation beforehand is useful.
    They define goals for the review process and interact with the coder(s) to understand
    where there may be quality problems. Again, making the process as blameless as
    possible is important.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码检查。** 在这里，审查团队主导代码审查过程。一些，尽管不一定很多，团队事先准备是有用的。他们为审查过程定义目标，并与编码者互动，了解可能存在质量问题的地方。再次强调尽可能使过程无责任是重要的。'
- en: '**Pair programming.** The most informal approach to code review is through
    **pair programming**, in which code is developed by a pair of engineers: the **driver**
    who writes the code, and the **observer** who watches. The role of the observer
    is be a critic, to think about potential errors, and to help navigate larger design
    issues. It''s usually better to have the observer be the engineer with the greater
    experience with the coding task at hand. The observer reviews the code, serving
    as the devil''s advocate that the driver must convince. When the pair is developing
    specifications, the observer thinks about how to make specs clearer or shorter.
    Pair programming has other benefits. It is often more fun and educational to work
    with a partner, and it helps focus both partners on the task. If you are just
    starting to work with another programmer, pair programming is a good way to understand
    how your partner thinks and to establish common vocabulary. It is a good idea
    for partners to trade off roles, too. Pair programming is an excellent approach
    for CS 3110, and we recommend trying it.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配对编程。** 通过**配对编程**是进行代码审查最不正式的方法，其中代码由一对工程师开发：**驾驶员**编写代码，**观察员**观察。观察员的角色是扮演批评者，思考潜在错误，并帮助解决更大的设计问题。通常最好让观察员是对手头编码任务有更多经验的工程师。观察员审查代码，充当驾驶员必须说服的魔鬼的辩护者。当一对人正在制定规范时，观察员会考虑如何使规范更清晰或更简短。配对编程还有其他好处。与合作伙伴一起工作通常更有趣和教育性，它有助于让双方都专注于任务。如果你刚开始与另一位程序员合作，配对编程是了解你的合作伙伴思维方式并建立共同词汇的好方法。合作伙伴也最好交换角色。配对编程是CS
    3110的一个绝佳方法，我们建议尝试。'
- en: Code review can be remarkably effective. In one study conducted at IBM (Jones,
    1991), code inspection found 65% of the known coding errors and 25% of the known
    documentation errors, whereas testing found only 20% of the coding errors and
    none of the documentation errors. The more formal inspection process may be more
    effective than walkthroughs. One study (Fagan, 1976) found that code inspections
    resulted in code with 38% fewer failures, compared to code walkthroughs.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查可能非常有效。在IBM进行的一项研究中（Jones, 1991），代码检查发现了65%的已知编码错误和25%的已知文档错误，而测试仅发现了20%的编码错误和没有文档错误。更正式的检查过程可能比演示更有效。一项研究（Fagan,
    1976）发现，代码检查导致的代码故障比演示少38%。
- en: Through code review can be expensive, however. Jones found that preparing for
    code inspection took one hour per 150 lines of code, and the actual inspection
    covered 75 lines of code per hour. Having up to three people on the inspection
    team improves the quality of inspection; beyond that, more inspectors doesn't
    seem to help. Spending a lot of time preparing for inspection did not seem to
    be useful, either. Perhaps this is because much of the value of inspection lies
    in the interaction with the coders.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过代码审查可能会很昂贵。琼斯发现，为代码检查做准备每150行代码需要一个小时，实际检查每小时涵盖75行代码。检查团队最多有三人可以提高检查质量；超过这个数量，更多的检查员似乎并没有帮助。花费大量时间准备检查似乎也没有用。也许这是因为检查的价值很大程度上在于与编码人员的互动。
