- en: Use the Right Algorithm and Data Structure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用正确的算法和数据结构
- en: Use the Right Algorithm and Data Structure
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用正确的算法和数据结构
- en: A big bank with many branch offices complained that the new computers it had
    bought for the tellers were too slow. This was in the time before everyone used
    electronic banking and ATMs were not as widespread as they are now. People would
    visit the bank far more often, and the slow computers were making the people queue
    up. Consequently, the bank threatened to break its contract with the vendor.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一家拥有许多分支机构的大银行抱怨说，他们为出纳员购买的新电脑太慢了。这是在每个人都使用电子银行之前的时代，ATM并不像现在那样普遍。人们会更经常地访问银行，而慢速的电脑使人们排队。因此，银行威胁要与供应商解除合同。
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The vendor sent a performance analysis and tuning specialist to determine the
    cause of the delays. He soon found one specific program running on the terminal
    consuming almost all the CPU capacity. Using a profiling tool, he zoomed in on
    the program and he could see the function that was the culprit. The source code
    read:'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 供应商派遣了一位性能分析和调优专家来确定延迟的原因。他很快发现了一个在终端上运行的特定程序，几乎占用了所有的CPU容量。使用性能分析工具，他放大了这个程序，他可以看到是哪个函数在搞鬼。源代码如下：
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And string s was, on average, thousands of characters long. The code (written
    by the bank) was quickly changed, and the bank tellers lived happily ever after....
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 而字符串 s 的平均长度是数千个字符。代码（由银行编写）很快就被修改了，银行出纳员过着幸福的生活......
- en: 'Shouldn''t the programmer have done better than to use code that needlessly
    scaled quadratically? Each call to strlen traversed every one of the many thousand
    characters in the string to find its terminating null character. The string, however,
    never changed. By determining its length in advance, the programmer could have
    saved thousands of calls to strlen (and millions of loop executions):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员不应该做得比使用不必要的二次扩展的代码更好吗？每次调用 strlen 都会遍历字符串中的每一个字符，以找到其终止的空字符。然而，字符串从未改变。通过提前确定其长度，程序员可以节省数千次对
    strlen 的调用（和数百万次循环执行）：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Everyone knows the adage "first make it work, then make it work fast" to avoid
    the pitfalls of micro-optimization. But the example above would almost make you
    believe that the programmer followed the Machiavellian adagio "first make it work
    slowly."
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都知道那句格言“先让它工作，然后再让它快速工作”，以避免微优化的陷阱。但上面的例子几乎让你相信程序员遵循了“先让它慢慢地工作”的“权谋”的格言。
- en: This thoughtlessness is something you may come across more than once. And it
    is not just a "don't reinvent the wheel" thing. Sometimes novice programmers just
    start typing away without really thinking and suddenly they have 'invented' bubble
    sort. They may even be bragging about it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这种考虑不周全是你可能会遇到的更多次的事情。这不仅仅是一个“不要重复造轮子”的事情。有时候，新手程序员只是开始随意地输入，而没有真正思考，突然间他们就“发明”了冒泡排序。他们甚至可能还在吹嘘。
- en: 'The other side of choosing the right algorithm is the choice of data structure.
    It can make a big difference: Using a linked list for a collection of a million
    items you want to search through — compared to a hashed data structure or a binary
    tree — will have a big impact on the user''s appreciation of your programming.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 选择正确算法的另一方面是选择正确的数据结构。这可能会产生很大的差异：对于一个你想要搜索的一百万项的集合，使用链表——与使用哈希数据结构或二叉树相比——将对用户对你的编程的欣赏产生很大的影响。
- en: Programmers should not reinvent the wheel, and should use existing libraries
    where possible. But to be able to avoid problems like the bank's, they should
    also be educated about algorithms and how they scale. Is it just the eye candy
    in modern text editors that make them just as slow as old-school programs like
    WordStar in the 1980s? Many say reuse in programming is paramount. Above all,
    however, programmers should know when, what, and how to reuse. To be able to do
    that they should have knowledge of the problem domain and of algorithms and data
    structures.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员不应该重复造轮子，而应该在可能的情况下使用现有的库。但为了能够避免像银行那样的问题，他们还应该了解算法及其扩展性。是现代文本编辑器中的华而不实的功能使它们像上世纪80年代的老式程序WordStar一样慢吗？许多人说，在编程中重用代码至关重要。然而最重要的是，程序员应该知道何时、什么时候以及如何重用。为了做到这一点，他们应该了解问题域和算法以及数据结构的知识。
- en: A good programmer should also know when to use an abominable algorithm. For
    example, if the problem domain dictates there can never be more than five items
    (like the number of dice in a Yahtzee game), you know that you *always* have to
    sort at most five items. In that case, bubble sort might actually be the most
    efficient way to sort the items. Every dog has its day.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个优秀的程序员也应该知道何时使用可怕的算法。例如，如果问题域规定永远不会超过五个项目（例如Yahtzee游戏中的骰子数量），那么你知道你*总是*需要对最多五个项目进行排序。在这种情况下，冒泡排序实际上可能是排序项目的最有效方式。每只狗都有它的一天。
- en: 'So, read some good books — and make sure you understand them. And if you really
    read Donald Knuth''s *the Art of Computer Programming* well, you might even be
    lucky: Find a mistake by the author and earn one of Don Knuth''s hexadecimal dollar
    ($2.56) checks.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，阅读一些好书——并确保你理解它们。如果你真的读懂了唐纳德·克努斯（Donald Knuth）的《计算机程序设计艺术》，你甚至可能会很幸运：发现作者的错误并获得唐纳德·克努斯（Don
    Knuth）的十六进制美元支票之一（$2.56）。
- en: By [JC van Winkel](http://programmer.97things.oreilly.com/wiki/index.php/JC_van_Winkel)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作者为[JC van Winkel](http://programmer.97things.oreilly.com/wiki/index.php/JC_van_Winkel)
