- en: Core Language
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心语言
- en: Core Language
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心语言
- en: This section will walk you through Elm's simple core language.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将带您了解 Elm 的简单核心语言。
- en: 'This works best when you follow along, so after [installing](install.html),
    start up `elm-repl` in the terminal. (Or use the [online REPL](http://elmrepl.cuberoot.in/).)
    Either way, you should see something like this:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最好是跟着操作，所以在[安装](install.html)之后，在终端启动`elm-repl`。（或者使用[在线 REPL](http://elmrepl.cuberoot.in/)。）无论哪种方式，你都应该看到类似这样的内容：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The REPL prints out the type of every result, but **we will leave the type annotations
    off in this tutorial** for the sake of introducing concepts gradually.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: REPL 会打印出每个结果的类型，但是**我们将在本教程中略去类型注释**，以便逐渐介绍概念。
- en: We will cover [values](#values), [functions](#functions), [lists](#lists), [tuples](#tuples),
    and [records](#records). These building blocks all correspond pretty closely with
    structures in languages like JavaScript, Python, and Java.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖[值](#values)、[函数](#functions)、[列表](#lists)、[元组](#tuples)和[记录](#records)。这些构建块与
    JavaScript、Python 和 Java 等语言中的结构相对应得相当紧密。
- en: Values
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 值
- en: 'Let''s get started with some strings:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些字符串开始：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Elm uses the `(++)` operator to put strings together. Notice that both strings
    are preserved exactly as is when they are put together so when we combine `"hello"`
    and `"world"` the result has no spaces.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Elm 使用`(++)`运算符将字符串连接在一起。请注意，当将两个字符串放在一起时，两个字符串都完全保留，因此当我们将`"hello"`和`"world"`组合在一起时，结果没有空格。
- en: 'Math looks normal too:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数学看起来也很正常：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Unlike JavaScript, Elm makes a distinction between integers and floating point
    numbers. Just like Python 3, there is both floating point division `(/)` and integer
    division `(//)`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与 JavaScript 不同，Elm 区分整数和浮点数。就像 Python 3 一样，有浮点除法`(/)`和整数除法`(//)`。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Functions
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: Let's start by writing a function `isNegative` that takes in some number and
    checks if it is less than zero. The result will be `True` or `False`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从编写一个函数`isNegative`开始，该函数接受一个数字并检查它是否小于零。结果将是`True`或`False`。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that function application looks different than in languages like JavaScript
    and Python and Java. Instead of wrapping all arguments in parentheses and separating
    them with commas, we use spaces to apply the function. So `(add(3,4))` becomes
    `(add 3 4)` which ends up avoiding a bunch of parens and commas as things get
    bigger. Ultimately, this looks much cleaner once you get used to it! [The elm-html
    package](http://elm-lang.org/blog/blazing-fast-html) is a good example of how
    this keeps things feeling light.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意函数应用看起来与 JavaScript、Python 和 Java 等语言不同。我们不是用括号将所有参数括起来，然后用逗号分隔它们，而是用空格应用函数。所以`(add(3,4))`变成了`(add
    3 4)`，这样可以避免一堆括号和逗号，当事情变得更复杂时，这看起来更加清晰。[elm-html 包](http://elm-lang.org/blog/blazing-fast-html)是一个很好的例子，它展示了这种方法如何保持事物轻盈。
- en: If Expressions
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果表达式
- en: When you want to have conditional behavior in Elm, you use an if-expression.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要在 Elm 中进行条件行为时，你使用一个 if 表达式。
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The keywords `if` `then` `else` are used to separate the conditional and the
    two branches so we do not need any parentheses or curly braces.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字`if` `then` `else`用于分隔条件和两个分支，因此我们不需要任何括号或花括号。
- en: Elm does not have a notion of “truthiness” so numbers and strings and lists
    cannot be used as boolean values. If we try it out, Elm will tell us that we need
    to work with a real boolean value.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Elm 没有“真实性”的概念，因此数字、字符串和列表不能用作布尔值。如果我们尝试，Elm 会告诉我们需要使用真实的布尔值。
- en: Now let's make a function that tells us if a number is over 9000.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来编写一个函数，告诉我们一个数字是否超过了`9000`。
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using a backslash in the REPL lets us split things on to multiple lines. We
    use this in the definition of `over9000` above. Furthermore, it is best practice
    to always bring the body of a function down a line. It makes things a lot more
    uniform and easy to read, so you want to do this with all the functions and values
    you define in normal code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 REPL 中使用反斜杠让我们将内容分成多行。我们在上面的`over9000`的定义中使用了这个。此外，最好的做法是始终将函数的主体放在下一行。这样做使事物更加统一和易于阅读，因此你应该在你在正常代码中定义的所有函数和值中都这样做。
- en: '**Note:** Make sure that you add a whitespace before the second line of the
    function. Elm has a "syntactically significant whitespace" meaning that indentation
    is a part of its syntax.'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 确保在函数的第二行之前加上一个空格。Elm 有一个“语法上有意义的空格”意味着缩进是其语法的一部分。'
- en: Lists
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表
- en: Lists are one of the most common data structures in Elm. They hold a sequence
    of related things, similar to arrays in JavaScript.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是 Elm 中最常见的数据结构之一。它们保存一系列相关的事物，类似于 JavaScript 中的数组。
- en: 'Lists can hold many values. Those values must all have the same type. Here
    are a few examples that use functions from [the `List` library](http://package.elm-lang.org/packages/elm-lang/core/latest/List):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 列表可以容纳许多值。这些值必须都具有相同的类型。以下是一些使用[List库](http://package.elm-lang.org/packages/elm-lang/core/latest/List)中的函数的示例：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Again, all elements of the list must have the same type.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，列表中的所有元素必须具有相同的类型。
- en: Tuples
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元组
- en: 'Tuples are another useful data structure. A tuple can hold a fixed number of
    values, and each value can have any type. A common use is if you need to return
    more than one value from a function. The following function gets a name and gives
    a message for the user:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是另一个有用的数据结构。元组可以容纳固定数量的值，每个值可以是任何类型。一个常见用法是如果您需要从函数返回多个值。以下函数获取一个名称并为用户提供消息：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This can be quite handy, but when things start becoming more complicated, it
    is often best to use records instead of tuples.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能非常方便，但当事情开始变得更加复杂时，通常最好使用记录而不是元组。
- en: Records
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录
- en: A record is a set of key-value pairs, similar to objects in JavaScript or Python.
    You will find that they are extremely common and useful in Elm! Let's see some
    basic examples.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 记录是一组键值对，类似于JavaScript或Python中的对象。您会发现它们在Elm中非常常见和有用！让我们看一些基本示例。
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So we can create records using curly braces and access fields using a dot. Elm
    also has a version of record access that works like a function. By starting the
    variable with a dot, you are saying *please access the field with the following
    name*. This means that `.name` is a function that gets the `name` field of the
    record.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以使用花括号创建记录，并使用点访问字段。Elm还有一种类似函数的记录访问版本。通过以点开头的变量，您在说*请访问以下名称的字段*。这意味着`.name`是一个获取记录的`name`字段的函数。
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When it comes to making functions with records, you can do some pattern matching
    to make things a bit lighter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用记录创建函数时，您可以进行一些模式匹配，使事情变得更加轻松。
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: So we can pass any record in as long as it has an `age` field that holds a number.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，只要记录中有一个包含数字的`age`字段，我们就可以传入任何记录。
- en: It is often useful to update the values in a record.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 更新记录中的值通常很有用。
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It is important to notice that we do not make *destructive* updates. When we
    update some fields of `bill` we actually create a new record rather than overwriting
    the existing one. Elm makes this efficient by sharing as much content as possible.
    If you update one of ten fields, the new record will share the nine unchanged
    values.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是我们不进行*破坏性*更新。当我们更新`bill`的一些字段时，实际上是创建一个新记录而不是覆盖现有记录。Elm通过尽可能共享内容来实现这一点。如果您更新十个字段中的一个，新记录将共享九个未更改的值。
- en: Comparing Records and Objects
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较记录和对象
- en: 'Records in Elm are *similar* to objects in JavaScript, but there are some crucial
    differences. The major differences are that with records:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Elm中的记录与JavaScript中的对象*相似*，但有一些关键的区别。主要区别在于记录：
- en: You cannot ask for a field that does not exist.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不能请求不存在的字段。
- en: No field will ever be undefined or null.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有字段会是未定义或空值。
- en: You cannot create recursive records with a `this` or `self` keyword.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不能使用`this`或`self`关键字创建递归记录。
- en: Elm encourages a strict separation of data and logic, and the ability to say
    `this` is primarily used to break this separation. This is a systemic problem
    in Object Oriented languages that Elm is purposely avoiding.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Elm鼓励严格区分数据和逻辑，并且主要用于打破这种分离的能力。这是Elm故意避免的面向对象语言中的系统性问题。
- en: Records also support [structural typing](https://en.wikipedia.org/wiki/Structural_type_system
    "Structural Types") which means records in Elm can be used in any situation as
    long as the necessary fields exist. This gives us flexibility without compromising
    reliability.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 记录还支持[结构类型](https://en.wikipedia.org/wiki/Structural_type_system "结构类型")，这意味着在Elm中的记录可以在任何情况下使用，只要必要的字段存在。这为我们提供了灵活性，而不会影响可靠性。
