- en: 'Recitation 3: Higher-order Functions, Anonymous Functions, Currying, Side effects,
    Printing and Exceptions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 朗诵3：高阶函数，匿名函数，柯里化，副作用，打印和异常
- en: 'This recitation covers:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这个朗诵涵盖：
- en: higher-order functions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高阶函数
- en: anonymous functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匿名函数
- en: currying
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柯里化
- en: side-effects and printing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 副作用和打印
- en: exceptions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常
- en: Higher-order functions
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高阶函数
- en: Functions are values just like any other value in OCaml. What does that mean
    exactly? This means that we can pass functions around as arguments to other functions,
    that we can store functions in data structures, that we can return functions as
    a result from other functions. The full implication of this will not hit you until
    later, but believe us, it will.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 函数在OCaml中就像任何其他值一样。这究竟意味着什么？这意味着我们可以将函数作为参数传递给其他函数，我们可以将函数存储在数据结构中，我们可以从其他函数返回函数作为结果。这个完整的含义直到后来才会让你明白，但相信我们，它会。
- en: 'Let us look at why it is useful to have higher-order functions. The first reason
    is that it allows you to write more general code, hence more reusable code. As
    a running example, consider functions *double* and *square* on integers:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看为什么拥有高阶函数很有用。第一个原因是它允许您编写更通用的代码，因此更可重用的代码。作为一个运行示例，考虑整数上的函数*double*和*square*：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let us now come up with a function to quadruple a number. We could do it directly,
    but for utterly twisted motives decide to use the function *double* above:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们想出一个函数来将一个数字四倍。我们本可以直接做，但出于完全扭曲的动机，决定使用上面的*double*函数：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Straightforward enough. What about a function to raise an integer to the fourth
    power?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ��够直接了。那么一个将整数提升到四次幂的函数呢？
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There is an obvious similarity between these two functions: what they do is
    apply a given function twice to a value. By passing in the function to another
    function `twice` as an argument, we can abstract this functionality and thus reuse
    code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个函数之间有一个明显的相似性：它们的作用是将一个给定的函数两次应用于一个值。通过将函数传递给另一个函数`twice`作为参数，我们可以抽象出这个功能，从而重用代码：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Using this, we can write:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个，我们可以写：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We have exploited the similarity between these two functions to save work. 
    This can be very helpful.  If someone comes up with an improved (or corrected)
    version of `twice`, then every function that uses it profits from the improvement.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们利用了这两个函数之间的相似性来节省工作。这可能非常有帮助。如果有人提出了一个改进（或更正）版本的`twice`，那么使用它的每个函数都会从改进中受益。
- en: 'The function `twice` is a so-called *higher-order function*: it is a function
    from functions to other values. Notice the type of `twice` is `((int -> int) *
    int) -> int`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`twice`是所谓的*高阶函数*：它是一个从函数到其他值的函数。注意`twice`的类型是`((int -> int) * int) -> int`。
- en: 'To avoid polluting the top-level namespace, it can be useful to define the
    function locally to pass in as an argument. For example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免污染顶层命名空间，将函数定义为局部函数以传递为参数可能很有用。例如：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For clarity in the evaluation example we''re about to do next, let''s rewrite
    that using an alternative syntax for functions that we saw last week:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在接下来要做的评估示例中更清晰，让我们使用上周看到的函数的另一种语法来重新编写：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'What happens when we evaluate an expression that uses a higher-order function?
    We use the same rules as earlier: when a function is applied (called), we replace
    the call with the body of the function, with the argument variables (actually,
    variables appearing in the argument pattern) bound to the corresponding actual
    values. For example, `fourth 3` evaluates as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们评估使用高阶函数的表达式时会发生什么？我们使用与之前相同的规则：当一个函数被应用（调用）时，我们用函数体替换调用，用参数变量（实际上是出现在参数模式中的变量）绑定到相应的实际值。例如，`fourth
    3`的评估如下：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '* * *'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Anonymous functions
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匿名函数
- en: 'The "alternative syntax" we just used for functions turns out to be even more
    broadly useful. You might notice that it seems silly to define and name a function
    simply to pass it in as an argument to another function. After all, all we really
    care about is that `twice` gets a function that doubles its argument.  Fortunately,
    OCaml provides a better solution — anonymous functions:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用的“替代语法”对于函数来说是更加广泛有用的。您可能会注意到，定义和命名一个函数只是为了将其作为参数传递给另一个函数似乎有点愚蠢。毕竟，我们真正关心的是`twice`得到一个将其参数加倍的函数。幸运的是，OCaml提供了一个更好的解决方案——匿名函数：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We introduce a new expression denoting "a function that expects an argument
    of a certain type and returns the value of a certain expression":'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入一个新表达式，表示“一个期望某种类型的参数并返回某个表达式值的函数”：
- en: '*e* ::= ...  |  `fun` `(`*x* : *t*`) ->` *e*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*e* ::= ...  |  `fun` `(`*x* : *t*`) ->` *e*'
- en: 'The `fun` expression creates an **anonymous function**: a function without
    a name. The argument type can be omitted; OCaml will infer it. The return type
    of an anonymous function is not declared and is inferred automatically. What is
    the type of `fun (y : int) -> y = 3` ?'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`fun`表达式创建了一个**匿名函数**：一个没有名称的函数。参数类型可以省略；OCaml将自动推断它。匿名函数的返回类型未声明，会自动推断。`fun
    (y : int) -> y = 3`的类型是什么？'
- en: '**Answer:** `int -> bool`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案：** `int -> bool`'
- en: Notice that the declaration
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意声明
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: has the same effect as
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 具有相同效果的是
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In fact, the declaration without `fun` is just **syntactic sugar** for the more
    tedious long definition. (This isn't true for recursive functions, however.)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，没有`fun`的声明只是对更繁琐的长定义的**语法糖**。（但对于递归函数来说不是这样。）
- en: '* * *'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Currying
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 柯里化
- en: 'Anonymous functions are useful for creating functions to pass as arguments
    to other functions, but are also useful for writing functions that return other
    functions. Let us rewrite the `twice` function to take a function as an argument
    and return a new function that applies the original function twice:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名函数对于创建传递给其他函数的函数很有用，但也对编写返回其他函数的函数很有用。让我们将`twice`函数重写为接受一个函数作为参数并返回一个将原始函数应用两次的新函数：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This function takes a function `f` (of type `int -> int`) as an argument, and
    returns the value `fun (x : int) -> f (f x)`, which is a function which when applied
    to an argument applies `f` twice to that argument. Thus, we can write'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '此函数接受一个类型为`int -> int`的函数`f`作为参数，并返回值`fun (x : int) -> f (f x)`，这是一个函数，当应用于参数时，将`f`应用两次于该参数。因此，我们可以写成'
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: and trying to evaluate `fourth 3` does indeed result in `81`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 并尝试评估`fourth 3`确实会产生`81`。
- en: Functions that return other functions are so common in functional programming
    that OCaml provides a special syntax for them.  For example, we could write the
    twice function above as
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 函数返回其他函数在函数式编程中非常常见，因此OCaml为它们提供了特殊的语法。例如，我们可以将上面的twice函数写成
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The "second argument" `x` here is not an argument to `twice`, but rather an
    argument to `twice f`.  The function `twice` takes only one argument, namely a
    function `f`, and returns *another* function that takes an argument `x` and returns
    an `int`.  The distinction here is critical.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的“第二个参数”`x`不是`twice`的参数，而是`twice f`的参数。函数`twice`只接受一个参数，即函数`f`，并返回*另一个*函数，该函数接受一个参数`x`并返回一个`int`。这里的区别至关重要。
- en: This device is called *currying* after the logician H. B. Curry. At this point
    you may be worried about the efficiency of returning an intermediate function
    when you're just going to pass all the arguments at once anyway. Run a test if
    you want (you should find out how to do this), but rest assured that curried functions
    are entirely normal in functional languages, so there is no speed penalty worth
    worrying about.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此设备称为*柯里化*，取自逻辑学家H·B·柯里的名字。此时，您可能担心返回中间函数的效率，因为您最终会一次性传递所有参数。如果您想测试一下（您应该找出如何做到这一点），但请放心，柯里化函数在函数式语言中是完全正常的，因此没有值得担心的速度惩罚。
- en: The type of twice is `(int -> int) -> int -> int`.  The `->` operator is right
    associative, so this is equivalent to `(int -> int) -> (int -> int)`.  Notice
    that if we had left out the parentheses on the type of `f`, we would no longer
    long have a function that took in another function as an argument, since `int
    -> int -> int -> int` is equivalent to `int -> (int -> (int -> int))`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`twice`的类型是`(int -> int) -> int -> int`。`->`运算符是右结合的，因此这等价于`(int -> int) ->
    (int -> int)`。请注意，如果我们省略了对`f`类型的括号，我们将不再有一个接受另一个函数作为参数的函数，因为`int -> int -> int
    -> int`等价于`int -> (int -> (int -> int))`。'
- en: 'Here are more examples of useful higher-order functions that we will leave
    you to ponder (and try out at home):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是更多有用的高阶函数示例，我们留给您思考（并在家里尝试）：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '* * *'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Side effects
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 副作用
- en: 'Up until now, we have only shown you pure functional programming.  But in certain
    cases, imperative programming is unavoidable.  One such case is printing a value
    to the screen.  By now you may have found it difficult to debug your OCaml code
    without any way to display intermediate values on the screen.  OCaml provides
    the function `print_string : string -> unit` to print a string to the screen.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '到目前为止，我们只向您展示了纯函数式编程。但在某些情况下，命令式编程是不可避免的。打印值到屏幕就是其中之一。到目前为止，您可能发现在没有任何方法在屏幕上显示中间值的情况下调试您的OCaml代码很困难。OCaml提供了函数`print_string
    : string -> unit`来将字符串打印到屏幕上。'
- en: Printing to the screen is called a *side-effect* because it alters the state
    of the computer.  Until now we have been writing functions that do not change
    any state but merely compute some value.  Later on we will show you more examples
    of side-effects, but printing will suffice for now.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 打印到屏幕被称为*副作用*，因为它改变了计算机的状态。到目前为止，我们编写的函数没有改变任何状态，只是计算某个值。稍后我们将向您展示更多副作用的示例，但现在打印就足够了。
- en: Because of OCaml's type system, `print_string` is not overloaded like Java's
    `System.out.println`.  To print an `int`, `float`, `bool`, etc, you must first
    convert it to a string.  Fortunately, there are built-in functions to do this
    conversion. For example, `string_of_int` converts an `int` to a `string`.  So
    to print 3, we can write `print_string (string_of_int 3)`.  The parentheses are
    needed here bacause OCaml evaluates expressions left to right.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于OCaml的类型系统，`print_string`不像Java的`System.out.println`那样重载。要打印`int`、`float`、`bool`等，必须先将其转换为字符串。幸运的是，有内置函数可以进行这种转换。例如，`string_of_int`将`int`转换为`string`。因此，要打印3，我们可以写成`print_string
    (string_of_int 3)`。这里需要括号，因为OCaml从左到右评估表达式。
- en: So how can you put print statements in your code?  There are two ways.  The
    first is with a `let` expression. These can be placed inside other `let` expressions,
    allowing you to print intermediate values.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如何在代码中放置打印语句呢？有两种方法。第一种是使用`let`表达式。这些可以放在其他`let`表达式中，允许您打印中间值。
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There is a second way as well.  For this we introduce new syntax.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 还有第二种方式。为此，我们引入新的语法。
- en: '*e* ::= ...  |  `(`*e*[1]`;` ... `;`*e[n]* `)`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*e* ::= ...  |  `(`*e*[1]`;` ... `;`*e[n]* `)`'
- en: This expression tells OCaml to evaluate expressions *e*[1],...,*e[n]* in order
    and return the result of evaluating *e[n]*.  So we could write our example as
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表达式告诉OCaml按顺序评估表达式*e*[1]，...，*e[n]*并返回评估*e[n]*的结果。因此，我们可以将我们的例子写成
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '* * *'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Exceptions
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常
- en: To handle errors, OCaml provides built in exceptions, much like Java.  To declare
    an exception named `Error`, you write
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理错误，OCaml提供了内置异常，就像Java一样。要声明一个名为`Error`的异常，您可以这样写
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Then to throw the exception, we use the `raise` keyword.  An example using the
    square root function is
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要抛出异常，我们使用`raise`关键字。使用平方根函数的示例是
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The type of an exception matches the code in which the exception is thrown. 
    So for example, in the `sqrt1` function, the type of `Error` will be `float` since
    the expression must evaluate to a real.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 异常的类型与抛出异常的代码匹配。例如，在`sqrt1`函数中，`Error`的类型将是`float`，因为表达式必须求值为实数。
- en: Exceptions can also carry values.  An example is the built-in exception `Failure`,
    defined as
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 异常也可以携带值。一个例子是内置异常`Failure`，定义如下
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: To raise this exception, we write
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要引发此异常，我们写
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We can also catch exceptions by use of the `try-with` keywords.  It is important
    not to abuse this capability.  Excessive use of exceptions can lead to unreadable
    spaghetti code.  For this class, it will probably never be necessary to handle
    an exception.  Exceptions should only be raised in truly exceptional cases, that
    is, when some unrecoverable damage has been done.  If you can avoid an exception
    by checking bounds or using options, this is far preferable.  Refer to the OCaml
    style guide for more examples and info on how to use exceptions properly.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过使用`try-with`关键字捕获异常。滥用这种能力是不明智的。过多使用异常会导致难以阅读的意大利面代码。在这门课程中，可能永远不需要处理异常。异常应该只在真正异常的情况下引发，也就是说，在造成无法恢复的损害时。如果可以通过检查边界或使用选项来避免异常，那是更可取的。请参考OCaml风格指南，了解更多关于如何正确使用异常的示例和信息。
