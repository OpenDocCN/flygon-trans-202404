- en: Chapter 5 - Element Node Geometry & Scrolling Geometry
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 - 元素节点几何和滚动几何
- en: 5.1 Element node size, offsets, and scrolling overview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.1 元素节点大小、偏移和滚动概述
- en: DOM nodes are parsed and [painted](http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/#Painting)
    into visual shapes when viewing html documents in a web browser. Nodes, mostly
    element nodes, have a corresponding visual representation made viewable/visual
    by browsers. To inspect and in some cases manipulate the visual representation
    and gemometry of nodes programatically a set of API's exists and are specified
    in the [CSSOM View Module](http://www.w3.org/TR/cssom-view/). A subset of methods
    and properties found in this specification provide an API to determine the geometry
    (i.e. size & position using offset) of element nodes as well as hooks for manipulating
    scrollable nodes and getting values of scrolled nodes. This chapter breaks down
    these methods and properties.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Web浏览器中查看HTML文档时，DOM节点会被解析并[绘制](http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/#Painting)成可视形状。节点，主要是元素节点，由浏览器制作成可视化的形式。为了以编程方式检查和在某些情况下操作节点的可视表示和几何形状，存在一组API，并在[CSSOM
    View Module](http://www.w3.org/TR/cssom-view/)中进行了规定。在这个规范中找到的一部分方法和属性提供了一个API来确定元素节点的几何形状（即大小和位置使用偏移）以及用于操作可滚动节点和获取滚动节点值的钩子。本章将详细介绍这些方法和属性。
- en: Notes
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 笔记
- en: Most of the properties (excluding *scrollLeft* & *scrollTop*) from the CSSOM
    View Module specification are read only and calculated each time they are accessed.
    In other words, the values are live
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数属性（除了*scrollLeft*和*scrollTop*）来自CSSOM View Module规范，是只读的，并且每次访问时都会重新计算。换句话说，这些值是实时的。
- en: 5.2 Getting an elements *offsetTop* and *offsetLeft* values relative to the
    *offsetParent*
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.2 获取元素相对于*offsetParent*的*offsetTop*和*offsetLeft*值
- en: Using the properties *offsetTop* and *offsetLeft* we can get the offset pixel
    value of an element node from the *offsetParent*. These element node properties
    give us the distance in pixels from an elements outside top and left border to
    the inside top and left border of the *offsetParent*. The value of the *offsetParent*
    is determined by searching the nearest ancestor elements for an element that has
    a CSS position value not equal to static. If none are found then the *<body>*
    element or what some refer to as the "document" (as opposed to the browser viewport)
    is the *offsetParent* value. If during the ancestral search a *<td>*, *<th>*,
    or *<table>* element with a CSS position value of static is found then this becomes
    the value of *offsetParent*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*offsetTop*和*offsetLeft*属性，我们可以获取元素节点相对于*offsetParent*的偏移像素值。这些元素节点属性给出了元素外部顶部和左侧边框到*offsetParent*内部顶部和左侧边框的像素距离。*offsetParent*的值是通过搜索最近的祖先元素来确定的，找到一个具有CSS位置值不等于static的元素。如果找不到任何元素，则*<body>*元素或一些人称为“文档”（与浏览器视口相对）的元素是*offsetParent*的值。如果在祖先搜索中找到具有静态CSS位置值的*<td>*、*<th>*或*<table>*元素，则这将成为*offsetParent*的值。
- en: Lets verify that *offsetTop* and *offsetLeft* provide the values one might expect.
    The properties *offsetLeft* and *offsetTop* in the code below tell us that the
    *<div>* with an *id* of *red* is 60px's from the top and left of the *offsetParent*
    (i.e. the *<body>* element in this example).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证*offsetTop*和*offsetLeft*提供了预期值。下面代码中的*offsetLeft*和*offsetTop*属性告诉我们，具有*id*为*red*的*<div>*距离*offsetParent*（即本例中的*<body>*元素）的顶部和左侧各为60像素。
- en: 'live code: [http://jsfiddle.net/domenlightenment/dj5h9](http://jsfiddle.net/domenlightenment/dj5h9)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/dj5h9](http://jsfiddle.net/domenlightenment/dj5h9)
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Examine the following image showing what the code visually show in browser to
    help aid your understanding of how the *offsetLeft* and *offsetTop* values are
    deteremined. The red *<div>* shown in the image is exactly 60 pixels from the
    *offsetParent*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 检查以下图像，显示代码在浏览器中的可视化展示，以帮助您理解*offsetLeft*和*offsetTop*值是如何确定的。图像中显示的红色*<div>*与*offsetParent*之间正好相距60像素。
- en: '![](../Images/c4sec2.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c4sec2.png)'
- en: Notice I am measuring from the outside border of the red *<div>* element to
    the inside border of the *offsetParent* (i.e. *<body>*).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我是从红色*<div>*元素的外边框到*offsetParent*（即*<body>*）的内边框进行测量的。
- en: As previously mentioned If I was to change the blue *<div>* in the above code
    to have a position of absolute this would alter the value of the *offsetParent*.
    In the code below, absolutely positioning the blue *<div>* will cause the values
    returned from *offsetLeft* and *offsetTop* to report an offset (i.e. 25px's).
    This is because the offset parent is now the blue *<div>* and not the *<body>*
    .
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果我将上述代码中的蓝色*<div>*的位置更改为绝对定位，这将改变*offsetParent*的值。在下面的代码中，将蓝色*<div>*绝对定位将导致从*offsetLeft*和*offsetTop*返回的值报告一个偏移（即25px）。这是因为偏移父级现在是蓝色*<div>*而不是*<body>*。
- en: 'live code: [http://jsfiddle.net/domenlightenment/ft2ZQ](http://jsfiddle.net/domenlightenment/ft2ZQ)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/ft2ZQ](http://jsfiddle.net/domenlightenment/ft2ZQ)
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The image of the browser view shown below clarifies the new measurements returned
    from *offsetLeft* and *offsetTop* when the *offsetParent* is the blue *<div>*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示的浏览器视图图解了当*offsetParent*是蓝色*<div>*时，从*offsetLeft*和*offsetTop*返回的新测量值。
- en: '![](../Images/c4sec2b.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c4sec2b.png)'
- en: Notes
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Many of the browsers break the outside border to inside border measurement when
    the *offsetParent* is the *<body>* and the *<body>* or *<html>* element has a
    visible margin, padding, or border value.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 许多浏览器在*offsetParent*是*<body>*时会打破外部边框到内部边框的测量，而*<body>*或*<html>*元素具有可见的边距、填充或边框值。
- en: The *offsetParent*, *offsetTop*, and *offsetLeft* are extensions to the *HTMLelement*
    object.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*offsetParent*、*offsetTop*和*offsetLeft*是*HTMLelement*对象的扩展。'
- en: 5.3 Getting an elements top, right, bottom and left border edge offset relative
    to the viewport using *getBoundingClientRect()*
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.3 使用*getBoundingClientRect()*获取元素相对于视口的顶部、右侧、底部和左侧边框边缘偏移
- en: Using the *getBoundingClientRect()* method we can get the position of an elements
    outside border edges as its painted in the browser viewport relative to the top
    and left edge of the viewport. This means the left and right edge are measured
    from the outside border edge of an element to the left edge of the viewport. And
    the top and bottom edges are measured from the outside border edge of an element
    to the top edge of the viewport.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*getBoundingClientRect()*方法，我们可以获取元素在浏览器视口中的位置，相对于视口的顶部和左侧边缘的外部边界。这意味着左右边缘是从元素的外部边界到视口左边缘的距离。而顶部和底部边缘是从元素的外部边界到视口顶部边缘的距离。
- en: In the code below I create a 50px X 50px *<div>* with a 10px border and 100px
    margin. To get the distance in pixels from each border edge of the *<div>* I call
    the *getBoundingClientRect()* method on the *<div>* which returns an object containing
    a *top*, *right*, *bottom*, and *left* property.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我创建了一个带有10px边框和100px边距的50px X 50px的*<div>*。为了获取*<div>*每个边框边缘的像素距离，我在*<div>*上调用*getBoundingClientRect()*方法，该方法返回一个包含*top*、*right*、*bottom*和*left*属性的对象。
- en: 'live code: [http://jsfiddle.net/domenlightenment/A3RN9](http://jsfiddle.net/domenlightenment/A3RN9)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/A3RN9](http://jsfiddle.net/domenlightenment/A3RN9)
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The image below shows the browser rendered view of the above code with some
    added measurement indicators to show exactly how *getBoudingClientRect()* is calculated.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图片显示了上述代码在浏览器中的渲染视图，并添加了一些测量指示器，以准确展示*getBoundingClientRect()*是如何计算的。
- en: '![](../Images/c4sec3.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c4sec3.png)'
- en: The *top* outside border edge of the *<div>* element is 100px from the top edge
    of the viewport. The *right* outside border edge of the element *<div>* is 170px
    from the left edge of the viewport. The *bottom* outside border edge of the element
    *<div>* is 170px from the top edge of the viewport. And the *left* outside border
    edge of the element *<div>* is 100px from the left edge of the viewport.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*<div>*元素的*top*外部边框边缘距离视口顶部边缘100px。*<div>*元素的*right*外部边框边缘距离视口左边缘170px。*<div>*元素的*bottom*外部边框边缘距离视口顶部边缘170px。*<div>*元素的*left*外部边框边缘距离视口左边缘100px。'
- en: 5.4 Getting an elements size (border + padding + content) in the viewport
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.4 获取元素在视口中的大小（边框+填充+内容）
- en: The *getBoundingClientRect()* returns an object with a top, right, bottom, and
    left property/value but also with a height and width property/value. The *height*
    and *width* properties indicate the size of the element where the total size is
    derived by adding the content of the div, its padding, and borders together.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*getBoundingClientRect()*返回一个带有top、right、bottom和left属性/值的对象，还有一个height和width属性/值。*height*和*width*属性表示元素的大小，总大小通过将div的内容、填充和边框相加得到。'
- en: In the code below I get the size of the *<div>* element in the DOM using *getBoundingClientRect()*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我使用*getBoundingClientRect()*获取DOM中*<div>*元素的大小。
- en: 'live code: [http://jsfiddle.net/domenlightenment/PuXmL](http://jsfiddle.net/domenlightenment/PuXmL)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/PuXmL](http://jsfiddle.net/domenlightenment/PuXmL)'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The exact same size values can also be found using from the *offsetHeight* and
    *offsetWidth* properties. In the code below I leverage these properties to get
    the same exact height and width values provided by *getBoundingClientRect()*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*offsetHeight*和*offsetWidth*属性也可以找到完全相同的大小值。在下面的代码中，我利用这些属性来获取与*getBoundingClientRect()*提供的完全相同的高度和宽度值。
- en: 'live code: [http://jsfiddle.net/domenlightenment/MSzL3](http://jsfiddle.net/domenlightenment/MSzL3)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/MSzL3](http://jsfiddle.net/domenlightenment/MSzL3)'
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**## 5.5 Getting an elements size (padding + content) in the viewport excluding
    borders'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**## 5.5 获取视口中元素的大小（填充+内容），不包括边框'
- en: The *clientWidth* and *clientHeight* properties return a total size of an element
    by adding together the content of the element and its padding excluding the border
    sizes. In the code below I use these two properties to get the height and width
    of an element including padding but excluding borders.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*clientWidth*和*clientHeight*属性通过将元素的内容和填充相加来返回元素的总大小，不包括边框大小。在下面的代码中，我使用这两个属性来获取包括填充但不包括边框的元素的高度和宽度。'
- en: 'live code: [http://jsfiddle.net/domenlightenment/bSrSb](http://jsfiddle.net/domenlightenment/bSrSb)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/bSrSb](http://jsfiddle.net/domenlightenment/bSrSb)'
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**## 5.6 Getting topmost element in viewport at a specific point using *elementFromPoint()*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**## 5.6 使用*elementFromPoint()*在特定点获取视口中最顶部的元素'
- en: Using *elementFromPoint()* it's possible to get a reference to the topmost element
    in an html document at a specific point in the document. In the code example below
    I simply ask what is the topmost element 50 pixels from the top and left of the
    viewport. Since we have two *<div*>'s at that location the topmost (or if there
    is no z-index set the last one in document order) div is selected and returned.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*elementFromPoint()*可以在文档中特定点获取到顶部元素的引用。在下面的代码示例中，我简单地询问距离视口顶部和左侧50像素的最顶部元素是什么。由于在该位置有两个*<div>*，所以会选择并返回最顶部的（如果没有设置z-index，则选择文档顺序中的最后一个）div。
- en: 'live code: [http://jsfiddle.net/domenlightenment/8ksS5](http://jsfiddle.net/domenlightenment/8ksS5)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/8ksS5](http://jsfiddle.net/domenlightenment/8ksS5)'
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 5.7 Getting the size of the element being scrolled using *scrollHeight* and
    *scrollWidth*
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.7 使用*scrollHeight*和*scrollWidth*获取正在滚动的元素的大小
- en: The *scrollHeight* and *scrollWidth* properties simply give you the height and
    width of the node being scrolled. For example, open any HTML document that scrolls
    in a web browser and access these properties on the *<html>* (e.g. *document.documentElement.scrollWidth*)
    or *<body>* (e.g. *document.body.scrollWidth*) and you will get the total size
    of the HTML document being scrolled. Since we can apply, using CSS (i.e overflow:scroll),
    to elements lets look at a simpler code example. In the code below I make a *<div>*
    scroll a *<p>* element that is 1000px's x 1000px's. Accessing the *scrollHeight*
    and *scrollWidth* properties on the *<div>* will tell us that the element being
    scroll is 1000px's x 1000px's.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*scrollHeight*和*scrollWidth*属性只是给出正在滚动的节点的高度和宽度。例如，在Web浏览器中打开任何可以滚动的HTML文档，并在*<html>*（例如*document.documentElement.scrollWidth*）或*<body>*（例如*document.body.scrollWidth*）上访问这些属性，您将得到正在滚动的HTML文档的总大小。由于我们可以对元素应用CSS（即overflow:scroll），让我们看一个更简单的代码示例。在下面的代码中，我让一个*<div>*滚动一个1000px
    x 1000px的*<p>*元素。在*<div>*上访问*scrollHeight*和*scrollWidth*属性将告诉我们正在滚动的元素为1000px
    x 1000px。'
- en: 'live code: [http://jsfiddle.net/domenlightenment/9sZtZ](http://jsfiddle.net/domenlightenment/9sZtZ)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/9sZtZ](http://jsfiddle.net/domenlightenment/9sZtZ)'
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notes
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you need to know the height and width of the node inside a scrollable area
    when the node is smaller than the viewport of the scrollable area don't use *scrollHeight*
    and *scrollWidth* as this will give you the size of the viewport. If the node
    being scrolled is smaller than the scroll area then use *clientHeight* and *clientWidth*
    to determine the size of the node contained in the scrollable area.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要知道滚动区域内节点的高度和宽度，而节点小于滚动区域的视口，请不要使用*scrollHeight*和*scrollWidth*，因为这将给出视口的大小。如果正在滚动的节点小于滚动区域，则使用*clientHeight*和*clientWidth*来确定包含在滚动区域中的节点的大小。
- en: 5.8 Getting & Setting pixels scrolled from the top and left using *scrollTop*
    and *scrollLeft*
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.8 获取并设置从顶部和左侧滚动的像素，使用*scrollTop*和*scrollLeft*
- en: The *scrollTop* and *scrollLeft* properties are read-write properties that return
    the pixels to the left or top that are not currently viewable in the scrollable
    viewport due to scrolling. In the code below I setup a *<div>* that scrolls a
    *<p>* element.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*scrollTop*和*scrollLeft*属性是读写属性，返回由于滚动而当前在可滚动视口中不可见的左侧或顶部的像素。在下面的代码中，我设置了一个*<div>*，它滚动一个*<p>*元素。'
- en: 'live code: [http://jsfiddle.net/domenlightenment/DqZYH](http://jsfiddle.net/domenlightenment/DqZYH)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/DqZYH](http://jsfiddle.net/domenlightenment/DqZYH)
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: I programatically scroll the *<div>* by setting the *scrollTop* and *scrollLeft*
    to 750\. Then I get the current value of *scrollTop* and *scrollLeft*, which of
    course since we just set the value to 750 will return a value of 750\. The 750
    reports the number of pixels scroll and indicates 750 px's to the left and top
    are not viewable in the viewport. If it helps just think of these properties as
    the pixel measurements of the content that is not shown in the viewport to the
    left or top.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过将*scrollTop*和*scrollLeft*设置为750来以编程方式滚动*<div>*。然后，我获取*scrollTop*和*scrollLeft*的当前值，当然，由于我们刚刚将值设置为750，所以将返回一个值为750。750报告了滚动的像素数，并指示视口中有750个像素左侧和顶部是不可见的。如果有帮助，可以将这些属性视为未在视口左侧或顶部显示的内容的像素测量。
- en: 5.9 Scrolling an element into view using *scrollIntoView()*
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.9 使用*scrollIntoView()*将元素滚动到视图中
- en: By selecting a node contained inside a node that is scrollable we can tell the
    selected node to scroll into view using the *scrollIntoView()* method. In the
    code below I select the fifth *<p>* element contained in the scrolling *<div>*
    and call *scrollIntoView()* on it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择包含在可滚动节点内的节点，我们可以使用*scrollIntoView()*方法告诉所选节点滚动到视图中。在下面的代码中，我选择了包含在滚动的*<div>*中的第五个*<p>*元素，并在其上调用了*scrollIntoView()*。
- en: 'live code: [http://jsfiddle.net/domenlightenment/SyeFZ](http://jsfiddle.net/domenlightenment/SyeFZ)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/SyeFZ](http://jsfiddle.net/domenlightenment/SyeFZ)
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: By passing the *scrollIntoView()* method a parameter of *true* I am telling
    the method to scroll to the top of the element being scrolled too. The *true*
    parameter is however not needed as this is the default action performed by the
    method. If you want to scroll align to the bottom of the element pass a parameter
    of *false* to the *scrollIntoView()* method.****
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将*scrollIntoView()*方法的参数设置为*true*，我告诉方法滚动到正在滚动到的元素的顶部。然而，*true*参数并不需要，因为这是该方法执行的默认操作。如果要滚动到元素底部对齐，请将参数*false*传递给*scrollIntoView()*方法。
