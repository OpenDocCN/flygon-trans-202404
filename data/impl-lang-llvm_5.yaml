- en: Control Flow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制流
- en: Control Flow
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制流
- en: 'Welcome to Chapter 5 of the "Implementing a language with LLVM" tutorial. Parts
    1-4 described the implementation of the simple Kaleidoscope language and included
    support for generating LLVM IR, followed by optimizations and a JIT compiler.
    Unfortunately, as presented, Kaleidoscope is mostly useless: it has no control
    flow other than call and return. This means that you can''t have conditional branches
    in the code, significantly limiting its power. In this episode of "build that
    compiler", we''ll extend Kaleidoscope to have an if/then/else expression plus
    a simple `for` loop.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到"使用LLVM实现语言"教程的第五章。第1-4部分描述了简单的万花筒语言的实现，并包括生成LLVM IR的支持，随后是优化和JIT编译器。不幸的是，按照目前的形式，万花筒语言几乎没什么用处：除了调用和返回之外，它没有任何控制流。这意味着你不能在代码中使用条件分支，从而极大地限制了它的功能。在本集的"构建编译器"中，我们将扩展万花筒语言，使其具有if/then/else表达式和一个简单的`for`循环。
- en: 5.1 If/Then/Else
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.1 如果/那么/否则
- en: Extending Kaleidoscope to support if/then/else is quite straightforward. It
    basically requires adding support for this "new" concept to the lexer, parser,
    AST, and LLVM code emitter. This example is nice, because it shows how easy it
    is to "grow" a language over time, incrementally extending it as new ideas are
    discovered.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展万花筒以支持if/then/else非常简单。基本上需要将对这个"新"概念的支持添加到词法分析器、解析器、AST和LLVM代码发射器中。这个例子很好，因为它展示了如何随着时间的推移"增长"一种语言，逐步扩展它，发现新思想时逐渐扩展它。
- en: 'Before we get going on "how" we add this extension, lets talk about "what"
    we want. The basic idea is that we want to be able to write this sort of thing:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始"如何"添加这个扩展之前，让我们谈谈我们想要的"什么"。基本想法是我们想要能够写出这样的东西：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In Kaleidoscope, every construct is an expression: there are no statements.
    As such, the if/then/else expression needs to return a value like any other. Since
    we''re using a mostly functional form, we''ll have it evaluate its conditional,
    then return the `then` or `else` value based on how the condition was resolved.
    This is very similar to the C "?:" expression.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在万花筒中，每个构造都是一个表达式：没有语句。因此，if/then/else表达式需要像其他任何表达式一样返回一个值。由于我们使用的是大多数函数形式，我们将使其评估其条件，然后根据条件的解析方式返回`then`或`else`值。这与C中的"？:"表达式非常相似。
- en: 'The semantics of the if/then/else expression is that it evaluates the condition
    to a boolean equality value: 0.0 is considered to be false and everything else
    is considered to be true. If the condition is true, the first subexpression is
    evaluated and returned, if the condition is false, the second subexpression is
    evaluated and returned. Since Kaleidoscope allows side-effects, this behavior
    is important to nail down.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果/那么/否则表达式的语义是将条件评估为布尔相等值：0.0被视为false，其他任何值都被视为true。如果条件为true，则评估并返回第一个子表达式，如果条件为false，则评估并返回第二个子表达式。由于万花筒允许副作用，这种行为非常重要。
- en: Now that we know what we "want", lets break this down into its constituent pieces.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道我们"想要"什么，让我们把它分解成其组成部分。
- en: 5.1.1 Lexer Extensions for If/Then/Else
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.1.1 对于If/Then/Else的词法分析器扩展
- en: 'The lexer extensions are straightforward. First we add new enum values for
    the relevant tokens:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 词法分析器的扩展很简单。首先我们为相关的标记添加新的枚举值：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 5.1.2 AST Extensions for If/Then/Else
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.1.2 If/Then/Else的AST扩展
- en: 'To represent the new expression we add a new AST node for it:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示新的表达式，我们添加了一个新的AST节点：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The AST node just has pointers to the various subexpressions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: AST节点只是指向各种子表达式的指针。
- en: 5.1.3 Parser Extensions for If/Then/Else
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.1.3 对于If/Then/Else的解析器扩展
- en: 'Now that we have the relevant tokens coming from the lexer and we have the
    AST node to build, our parsing logic is relatively straightforward. First we define
    a new parsing function:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们从词法分析器获得了相关的标记，我们有了要构建的AST节点，我们的解析逻辑相对简单。首先我们定义一个新的解析函数：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next we hook it up as a primary expression:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将其连接为一个主要的表达式：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 5.1.4 LLVM IR for If/Then/Else
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.1.4 If/Then/Else的LLVM IR
- en: Now that we have it parsing and building the AST, the final piece is adding
    LLVM code generation support. This is the most interesting part of the if/then/else
    example, because this is where it starts to introduce new concepts. All of the
    code above has been thoroughly described in previous chapters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对其进行了解析并构建了AST，最后一步是添加LLVM代码生成支持。这是if/then/else示例中最有趣的部分，因为这是它开始引入新概念的地方。以上所有代码在前几章中都已经详细描述过了。
- en: 'To motivate the code we want to produce, lets take a look at a simple example.
    Consider:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了激励我们想要生成的代码，让我们看一个简单的例子。考虑：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To visualize the control flow graph, you can use a nifty feature of the LLVM
    ''opt'' tool. If you put this LLVM IR into "t.ll" and run `llvm-as < t.ll | opt
    -analyze -view-cfg`, a window will pop up and you''ll see this graph:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要可视化控制流图，你可以使用LLVM 'opt'工具的一个很好的功能。如果你将这个LLVM IR放入“t.ll”并运行 `llvm-as < t.ll
    | opt -analyze -view-cfg`，一个窗口将弹出，你将看到这个图：
- en: Example CFG
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例CFG
- en: '![cfg](cfg.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![cfg](cfg.png)'
- en: Example CFG
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 示例CFG
- en: Another way to get this is to call `F->viewCFG()` or `F->viewCFGOnly()` (where
    F is a `Function*`) either by inserting actual calls into the code and recompiling
    or by calling these in the debugger. LLVM has many nice features for visualizing
    various graphs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种获取这个的方法是调用 `F->viewCFG()` 或 `F->viewCFGOnly()`（其中 F 是 `Function*`），可以通过在代码中插入实际调用并重新编译，或者在调试器中调用这些来实现。LLVM有许多很好的功能来可视化各种图形。
- en: 'Getting back to the generated code, it is fairly simple: the entry block evaluates
    the conditional expression (`x` in our case here) and compares the result to 0.0
    with the `fcmp one` instruction (''one'' is "Ordered and Not Equal"). Based on
    the result of this expression, the code jumps to either the `then` or `else` blocks,
    which contain the expressions for the true/false cases.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 回到生成的代码，很简单：入口块评估条件表达式（在我们这里是 `x`）并将结果与 `fcmp one` 指令中的 0.0 进行比较（'one' 是 "有序且不等于"）。根据此表达式的结果，代码跳转到
    `then` 或 `else` 块，其中包含真/假情况的表达式。
- en: 'Once the then/else blocks are finished executing, they both branch back to
    the `ifcont` block to execute the code that happens after the if/then/else. In
    this case the only thing left to do is to return to the caller of the function.
    The question then becomes: how does the code know which expression to return?'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 then/else 块执行完毕，它们都会跳转回 `ifcont` 块以执行if/then/else之后发生的代码。在这种情况下，唯一要做的就是返回给函数的调用者。然后问题就变成了：代码如何知道返回哪个表达式？
- en: 'The answer to this question involves an important SSA operation: the Phi operation.
    If you''re not familiar with SSA, the wikipedia article is a good introduction
    and there are various other introductions to it available on your favorite search
    engine. The short version is that "execution" of the Phi operation requires "remembering"
    which block control came from. The Phi operation takes on the value corresponding
    to the input control block. In this case, if control comes in from the `then`
    block, it gets the value of `calltmp`. If control comes from the `else` block,
    it gets the value of `calltmp1`.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的答案涉及一个重要的SSA操作：Phi操作。如果你不熟悉SSA，请查看维基百科文章，这是一个很好的介绍，你的最爱搜索引擎上还有各种其他介绍。简短版是，“执行”Phi操作需要“记住”控制来自哪个块。Phi操作接受与输入控制块相对应的值。在这种情况下，如果控制来自`then`块，则获取`calltmp`的值。如果控制来自`else`块，则获取`calltmp1`的值。
- en: 'At this point, you are probably starting to think "Oh no! This means my simple
    and elegant front-end will have to start generating SSA form in order to use LLVM!".
    Fortunately, this is not the case, and we strongly advise not implementing an
    SSA construction algorithm in your front-end unless there is an amazingly good
    reason to do so. In practice, there are two sorts of values that float around
    in code written for your average imperative programming language that might need
    Phi nodes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可能开始思考“哦不！这意味着我的简单而优雅的前端将不得不开始生成SSA形式以使用LLVM！”。幸运的是，情况并非如此，我们强烈建议在你的前端中不要实现SSA构造算法，除非有一个非常好的理由这样做。在实践中，有两种在为您的普通命令式编程语言编写的代码中流动的值可能需要Phi节点：
- en: 'Code that involves user variables:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 涉及用户变量的代码：
- en: x = 1; x = x + 1;
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x = 1; x = x + 1;
- en: Values that are implicit in the structure of your AST, such as the Phi node
    in this case.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的AST结构中隐含的值，例如本例中的Phi节点。
- en: 'In Chapter 7 of this tutorial ("mutable variables"), we''ll talk about #1 in
    depth. For now, just believe me that you don''t need SSA construction to handle
    this case. For #2, you have the choice of using the techniques that we will describe
    for #1, or you can insert Phi nodes directly, if convenient. In this case, it
    is really really easy to generate the Phi node, so we choose to do it directly.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程的第7章（"可变变量"）中，我们将深入讨论#1。现在，只需相信我，你不需要SSA构造来处理这种情况。对于#2，你可以选择使用我们将为#1描述的技术，或者如果方便的话，直接插入Phi节点。在这种情况下，生成Phi节点非常容易，所以我们选择直接生成。
- en: Okay, enough of the motivation and overview, lets generate code!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，足够的动机和概述了，让我们生成代码吧！
- en: 5.1.5 Code Generation for If/Then/Else
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.1.5 If/Then/Else 的代码生成
- en: 'In order to generate code for this, we implement the Codegen method for IfExprAST:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成这个代码，我们为IfExprAST实现了Codegen方法：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code creates the basic blocks that are related to the if/then/else statement,
    and correspond directly to the blocks in the example above. The first line gets
    the current Function object that is being built. It gets this by asking the builder
    for the current BasicBlock, and asking that block for its "parent" (the function
    it is currently embedded into).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了与if/then/else语句相关的基本块，并直接对应上面示例中的块。第一行获取当前正在构建的Function对象。它通过向构建器请求当前的BasicBlock，并向该块请求其“父级”（当前嵌入的函数）来获取这个。
- en: Once it has that, it creates three blocks. Note that it passes "TheFunction"
    into the constructor for the `then` block. This causes the constructor to automatically
    insert the new block into the end of the specified function. The other two blocks
    are created, but aren't yet inserted into the function.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有了这个，它就创建了三个块。请注意，它将“TheFunction”传递给`then`块的构造函数。这会导致构造函数自动将新块插入到指定函数的末尾。另外两个块已经创建，但尚未插入到函数中。
- en: 'Once the blocks are created, we can emit the conditional branch that chooses
    between them. Note that creating new blocks does not implicitly affect the IRBuilder,
    so it is still inserting into the block that the condition went into. Also note
    that it is creating a branch to the `then` block and the `else` block, even though
    the `else` block isn''t inserted into the function yet. This is all ok: it is
    the standard way that LLVM supports forward references.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了这些块后，我们可以发出选择它们之间的条件分支。请注意，创建新块不会隐式影响IRBuilder，因此它仍然插入到条件进入的块中。还要注意，它正在创建一个分支到`then`块和`else`块，即使`else`块尚未插入到函数中。这都没问题：这是LLVM支持前向引用的标准方式。
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After the conditional branch is inserted, we move the builder to start inserting
    into the `then` block. Strictly speaking, this call moves the insertion point
    to be at the end of the specified block. However, since the `then` block is empty,
    it also starts out by inserting at the beginning of the block. :)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 插入条件分支后，我们将构建器移动到开始插入`then`块。严格来说，这个调用将插入点移动到指定块的末尾。但是，由于`then`块为空，它也从该块的开头开始插入。
    :)
- en: Once the insertion point is set, we recursively codegen the `then` expression
    from the AST. To finish off the `then` block, we create an unconditional branch
    to the merge block. One interesting (and very important) aspect of the LLVM IR
    is that it requires all basic blocks to be "terminated" with a control flow instruction
    such as return or branch. This means that all control flow, including fall throughs
    must be made explicit in the LLVM IR. If you violate this rule, the verifier will
    emit an error.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插入点设置好了，我们就递归地从AST代码生成`then`表达式。为了完成`then`块，我们创建了一个无条件分支到合并块。LLVM IR的一个有趣（也非常重要）的方面是，它要求所有的基本块都必须用控制流指令（如return或branch）“终止”。这意味着所有的控制流，包括跨越，都必须在LLVM
    IR中明确指定。如果违反了这个规则，验证器将发出错误。
- en: The final line here is quite subtle, but is very important. The basic issue
    is that when we create the Phi node in the merge block, we need to set up the
    block/value pairs that indicate how the Phi will work. Importantly, the Phi node
    expects to have an entry for each predecessor of the block in the CFG. Why then,
    are we getting the current block when we just set it to ThenBB 5 lines above?
    The problem is that the `then` expression may actually itself change the block
    that the Builder is emitting into if, for example, it contains a nested "if/then/else"
    expression. Because calling Codegen recursively could arbitrarily change the notion
    of the current block, we are required to get an up-to-date value for code that
    will set up the Phi node.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的最后一行非常微妙，但非常重要。基本问题是，当我们在合并块中创建Phi节点时，我们需要设置指示Phi如何工作的块/值对。重要的是，Phi节点期望在CFG的块的每个前任中都有一个条目。那么，我们为什么在刚刚将其设置为ThenBB的当前块时获取当前块？问题是，如果`then`表达式实际上更改了Builder正在发出的块，例如，如果它包含嵌套的“if/then/else”表达式。因为递归调用Codegen可能会任意更改当前块的概念，我们需要获取一个用于设置Phi节点的代码的最新值。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The first two lines here are now familiar: the first adds the "merge" block
    to the Function object (it was previously floating, like the else block above).
    The second block changes the insertion point so that newly created code will go
    into the "merge" block. Once that is done, we need to create the PHI node and
    set up the block/value pairs for the PHI.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的前两行现在很熟悉：第一行将“merge”块添加到Function对象中（它之前是浮动的，就像上面的else块一样）。第二个块更改了插入点，使新创建的代码将进入“merge”块。一旦完成了这一点，我们需要创建PHI节点并为PHI设置块/值对。
- en: Finally, the CodeGen function returns the phi node as the value computed by
    the if/then/else expression. In our example above, this returned value will feed
    into the code for the top-level function, which will create the return instruction.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，CodeGen函数将phi节点作为if/then/else表达式计算的值返回。在我们上面的例子中，这个返回值将进入顶层函数的代码中，该代码将创建返回指令。
- en: Overall, we now have the ability to execute conditional code in Kaleidoscope.
    With this extension, Kaleidoscope is a fairly complete language that can calculate
    a wide variety of numeric functions. Next up we'll add another useful expression
    that is familiar from non-functional languages...
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们现在可以在Kaleidoscope中执行条件代码了。通过这个扩展，Kaleidoscope是一种相当完整的语言，可以计算各种各样的数值函数。接下来，我们将添加另一个从非函数式语言中熟悉的有用表达式...
- en: 5.2 `for` Loop Expression
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2 `for`循环表达式
- en: 'Now that we know how to add basic control flow constructs to the language,
    we have the tools to add more powerful things. Lets add something more aggressive,
    a `for` expression:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何将基本的控制流构造添加到语言中，我们有了添加更强大功能的工具。让我们添加一些更具攻击性的东西，一个`for`表达式：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This expression defines a new variable (`i` in this case) which iterates from
    a starting value, while the condition (`i < n` in this case) is true, incrementing
    by an optional step value (`1.0` in this case). If the step value is omitted,
    it defaults to `1.0`. While the loop is true, it executes its body expression.
    Because we don't have anything better to return, we'll just define the loop as
    always returning `0.0`. In the future when we have mutable variables, it will
    get more useful.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式定义了一个新变量（在本例中为`i`），它从一个起始值迭代，当条件（在本例中为`i < n`）为真时，按照一个可选的步长值（在本例中为`1.0`）递增。如果省略了步长值，则默认为`1.0`。在循环为真时，它执行其主体表达式。因为我们没有更好的返回值，所以我们将定义循环始终返回`0.0`。将来当我们有了可变变量时，它将变得更有用。
- en: As before, lets talk about the changes that we need to Kaleidoscope to support
    this.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，让我们谈谈我们需要对Kaleidoscope进行的更改。
- en: 5.2.1 Lexer Extensions for the `for` Loop
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2.1 `for`循环的词法分析器扩展
- en: 'The lexer extensions are the same sort of thing as for if/then/else:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 词法分析器扩展与if/then/else的情况类似：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 5.2.2 AST Extensions for the `for` Loop
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2.2 `for`循环的AST扩展
- en: The AST node is just as simple. It basically boils down to capturing the variable
    name and the constituent expressions in the node.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: AST节点同样简单。它基本上归结为在节点中捕获变量名和组成表达式。
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 5.2.3 Parser Extensions for the `for` Loop
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2.3 `for`循环的解析器扩展
- en: 'The parser code is also fairly standard. The only interesting thing here is
    handling of the optional step value. The parser code handles it by checking to
    see if the second comma is present. If not, it sets the step value to null in
    the AST node:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 解析器代码也是相当标准的。这里唯一有趣的事情是处理可选的步长值。解析器代码通过检查第二个逗号是否存在来处理它。如果不存在，则将步长值设置为AST节点中的null：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 5.2.4 LLVM IR for the `for` Loop
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2.4 `for`循环的LLVM IR
- en: 'Now we get to the good part: the LLVM IR we want to generate for this thing.
    With the simple example above, we get this LLVM IR (note that this dump is generated
    with optimizations disabled for clarity):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到了好部分：我们想要为这个东西生成的LLVM IR。对于上面的简单示例，我们得到了这个LLVM IR（请注意，这个转储是为了清晰起见而生成的，因此已禁用了优化）：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This loop contains all the same constructs we saw before: a phi node, several
    expressions, and some basic blocks. Lets see how this fits together.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环包含了我们之前看到的所有结构：一个phi节点，几个表达式和一些基本块。让我们看看这是如何组合在一起的。
- en: 5.2.5 Code Generation for the `for` Loop
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2.5 `for`循环的代码生成
- en: 'The first part of Codegen is very simple: we just output the start expression
    for the loop value:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Codegen的第一部分非常简单：我们只输出循环值的起始表达式：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With this out of the way, the next step is to set up the LLVM basic block for
    the start of the loop body. In the case above, the whole loop body is one block,
    but remember that the body code itself could consist of multiple blocks (e.g.
    if it contains an if/then/else or a for/in expression).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 解决了这个问题之后，下一步是为循环体的开始设置LLVM基本块。在上面的情况中，整个循环体是一个块，但请记住，循环体代码本身可能由多个块组成（例如，如果它包含if/then/else或for/in表达式）。
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This code is similar to what we saw for if/then/else. Because we will need it
    to create the Phi node, we remember the block that falls through into the loop.
    Once we have that, we create the actual block that starts the loop and create
    an unconditional branch for the fall-through between the two blocks.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与我们在if/then/else中看到的类似。因为我们将需要它来创建Phi节点，所以我们记住了掉入循环的块。一旦我们有了这个，我们就创建了实际开始循环的块，并为两个块之间的掉落创建了一个无条件分支。
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now that the "preheader" for the loop is set up, we switch to emitting code
    for the loop body. To begin with, we move the insertion point and create the PHI
    node for the loop induction variable. Since we already know the incoming value
    for the starting value, we add it to the Phi node. Note that the Phi will eventually
    get a second value for the backedge, but we can't set it up yet (because it doesn't
    exist!).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在循环的“前导块”已经设置好，我们切换到为循环体生成代码。首先，我们移动插入点并为循环归纳变量创建PHI节点。由于我们已经知道起始值的传入值，我们将其添加到Phi节点中。请注意，Phi最终将获得第二个值用于回边，但我们目前无法设置它（因为它还不存在！）。
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now the code starts to get more interesting. Our 'for' loop introduces a new
    variable to the symbol table. This means that our symbol table can now contain
    either function arguments or loop variables. To handle this, before we codegen
    the body of the loop, we add the loop variable as the current value for its name.
    Note that it is possible that there is a variable of the same name in the outer
    scope. It would be easy to make this an error (emit an error and return null if
    there is already an entry for VarName) but we choose to allow shadowing of variables.
    In order to handle this correctly, we remember the Value that we are potentially
    shadowing in OldVal (which will be null if there is no shadowed variable).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码开始变得更有趣了。我们的'for'循环向符号表引入了一个新变量。这意味着我们的符号表现在可以包含函数参数或循环变量。为了处理这个问题，在我们生成循环体之前，我们将循环变量添加为其名称的当前值。请注意，外部作用域可能存在同名变量。将其视为错误（如果VarName已经有条目，则发出错误并返回null）很容易，但我们选择允许变量的遮蔽。为了正确处理这一点，我们记住了我们潜在遮蔽的值OldVal（如果没有遮蔽变量，则为null）。
- en: 'Once the loop variable is set into the symbol table, the code recursively codegen''s
    the body. This allows the body to use the loop variable: any references to it
    will naturally find it in the symbol table.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦循环变量设置到符号表中，代码就会递归地生成循环体。这使得循环体可以使用循环变量：对它的任何引用都会自然地在符号表中找到它。
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that the body is emitted, we compute the next value of the iteration variable
    by adding the step value, or 1.0 if it isn't present. `NextVar` will be the value
    of the loop variable on the next iteration of the loop.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在循环体已经生成，我们通过添加步长值或者如果不存在则为1.0来计算迭代变量的下一个值。`NextVar`将是循环变量在循环的下一次迭代中的值。
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Finally, we evaluate the exit value of the loop, to determine whether the loop
    should exit. This mirrors the condition evaluation for the if/then/else statement.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们评估循环的退出值，以确定循环是否应该退出。这与if/then/else语句的条件评估相似。
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: With the code for the body of the loop complete, we just need to finish up the
    control flow for it. This code remembers the end block (for the phi node), then
    creates the block for the loop exit (`afterloop`). Based on the value of the exit
    condition, it creates a conditional branch that chooses between executing the
    loop again and exiting the loop. Any future code is emitted in the `afterloop`
    block, so it sets the insertion position to it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 循环体的代码完成后，我们只需要完成其控制流。这段代码记住了结束块（用于Phi节点），然后创建了循环退出的块（`afterloop`）。根据退出条件的值，它创建了一个条件分支，选择是再次执行循环还是退出循环。任何未来的代码都将在`afterloop`块中生成，因此将插入位置设置为它。
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The final code handles various cleanups: now that we have the `NextVar` value,
    we can add the incoming value to the loop PHI node. After that, we remove the
    loop variable from the symbol table, so that it isn''t in scope after the for
    loop. Finally, code generation of the for loop always returns 0.0, so that is
    what we return from `ForExprAST::Codegen`.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的代码处理了各种清理工作：现在我们有了`NextVar`值，我们可以将传入值添加到循环PHI节点中。之后，我们从符号表中移除循环变量，这样在for循环之后它就不在作用域内了。最后，for循环的代码生成总是返回0.0，这就是我们从`ForExprAST::Codegen`返回的内容。
- en: With this, we conclude the "adding control flow to Kaleidoscope" chapter of
    the tutorial. In this chapter we added two control flow constructs, and used them
    to motivate a couple of aspects of the LLVM IR that are important for front-end
    implementors to know. In the next chapter of our saga, we will get a bit crazier
    and add user-defined operators to our poor innocent language.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一章节，我们结束了教程中“为Kaleidoscope添加控制流”部分。在这一章节中，我们添加了两个控制流结构，并用它们来激发LLVM IR的一些方面，这对于前端实现者来说是很重要的。在我们故事的下一章中，我们将变得有点疯狂，向我们那可怜无辜的语言添加用户定义的运算符。
