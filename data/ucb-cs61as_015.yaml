- en: Special Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特殊形式
- en: The `if` Clause
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`if`子句'
- en: 'Although we have done some exercises using `if` in the previous lesson, here
    is the general structure of the special form:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在上一课中使用了`if`进行一些练习，这里是特殊形式的一般结构：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`if` is a special form, since it will not evaluate its arguments unless it
    is used. Here are a few examples:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`是一个特殊形式，因为它不会评估其参数，除非被使用。以下是一些例子：'
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The last example shows why `if` needs to be a special form. Since `(= 1 1)`
    evaluates to `#t`, we never reach the else case, `(/ 1 0)`, and successfully return
    `'foobar`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个例子展示了为什么`if`需要是一个特殊形式。由于`(= 1 1)`评估为`#t`，我们永远不会到达else情况，`(/ 1 0)`，并成功返回`'foobar`。
- en: The `cond` Clause
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`cond`子句'
- en: 'It is possible to nest `if` expressions within itself, like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在`if`表达式内部嵌套`if`表达式，就像这样：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is useful for conditionals with many clauses. But, the more clauses, the
    messier and less readable your code becomes. A shorthand for nested `if`s is the
    `cond` clause, which uses different syntax to complete the same task. Here''s
    the `roman-value` function written using a `cond` statement:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于具有许多子句的条件语句很有用。但是，子句越多，您的代码就会变得越混乱和不可读。嵌套`if`的简写是`cond`子句，它使用不同的语法来完成相同的任务。以下是使用`cond`语句编写的`roman-value`函数：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the `cond` clause lets you specify a series of conditions and
    possible values. The `else` clause at the end specifies the value to return when
    none of the previous predicates are true.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`cond`子句允许您指定一系列条件和可能的值。结尾的`else`子句指定了当前述谓词都不为真时要返回的值。
- en: 'Translated into English, the above code reads:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译成英语，上面的代码读取为：
- en: If the input letter is "i", the value is 1.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果输入字母是"i"，则值为1。
- en: If the input letter is "v", the value is 5.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果输入字母是"v"，则值为5。
- en: '...'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '...'
- en: If the input letter is "m", the value is 1000.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果输入字母是"m"，则值为1000。
- en: Otherwise, when none of the above are true, the value is `'huh?`.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，当上述情况都不为真时，值为`'huh?`。
- en: 'The general structure of a `cond` clause is as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`cond`子句的一般结构如下：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Special Forms
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊形式
- en: Special forms are procedures that do not follow normal evaluation steps. We
    learned earlier that all arguments within an expression are evaluated *before*
    the procedure is applied to its arguments. This is not true with special forms.
    Of the predicates and clauses we've gone over so far, `if`, `cond`, `or`, and
    `and` are all special forms.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊形式是不遵循正常评估步骤的过程。我们之前学过，表达式中的所有参数在过程应用到其参数之前都会被评估。这对于特殊形式不适用。到目前为止，我们讨论过的谓词和子句中，`if`、`cond`、`or`和`and`都是特殊形式。
- en: '**Test Your Understanding**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试您的理解**'
- en: The following expressions currently error. Rearrange their arguments in a way
    that will cause the expressions to not error and return the correct value. Do
    not change any argument values.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的表达式目前出错了。重新排列它们的参数，使表达式不会出错并返回正确的值。不要改变任何参数值。
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Suppose we decided to write our own `if` procedure called `new-if` and defined
    it like so:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们决定编写自己的`if`过程称为`new-if`并定义如下：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This should work exactly like `if`, since it's simply calling `if` in the body.
    But, **since this is a compound procedure, it is not a special form**. What happens
    when we call `new-if` like this?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该与`if`完全相同，因为它只是在主体中调用`if`。但是，**由于这是一个复合过程，它不是一个特殊形式**。当我们像这样调用`new-if`时会发生什么？
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since `new-if` is not a special form, it will evaluate all of its arguments
    first before entering the body.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`new-if`不是一个特殊形式，它会在进入主体之前先评估所有的参数。
- en: '`(= 1 1)` returns `#t`'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(= 1 1)`返回`#t`'
- en: '`''foo` returns `''foo`'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`''foo`返回`''foo`'
- en: '`(/ 1 0)` returns-- wait a second...'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(/ 1 0)`返回-- 等一下...'
- en: And since `(/ 1 0)` errors, our `new-if` is a failed attempt to recreate the
    `if` special form.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`(/ 1 0)`出现错误，我们的`new-if`是重新创建`if`特殊形式的失败尝试。
- en: '`if` is Composable'
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`if`是可组合的'
- en: 'To save time and code space, keep in mind that functions like `if` and `cond`
    can be used within an expression, instead of being a stand-alone expression. To
    demonstrate this, consider the following simple function:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省时间和代码空间，请记住像`if`和`cond`这样的函数可以在表达式中使用，而不是作为独立的表达式。为了演示这一点，考虑以下简单函数：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Instead, we can rewrite it this way:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以这样重写它：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Admittedly, there doesn’t seem to be much of a difference. It’s understandable,
    considering this is a simple function. When this technique is used in more complex
    functions, we save time by avoiding repetition. We can see above how the rewritten
    function only writes `'(i am a)` once, while the original definition writes it
    twice.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不可否认，似乎没有太大的区别。这是可以理解的，考虑到这是一个简单的函数。当这种技术用于更复杂的函数时，我们通过避免重复节省时间。我们可以看到上面的重写函数只写了一次`'(i
    am a)`，而原始定义则写了两次。
- en: Pitfalls
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 陷阱
- en: The structure of a `cond` statement has very strict parenthetical rules. If
    you're code is erroring, it is very likely you missed a parenthesis or added an
    extra one. Thus, ***PAY ATTENTION TO PARENTHESES WHEN USING COND STATEMENTS!***
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`cond`语句的结构有非常严格的括号规则。如果你的代码出错了，很可能是你漏掉了一个括号或者多加了一个括号。因此，在使用`cond`语句时***要注意括号！***'
- en: 'Another issue is that `and` and `or` cannot be used as if they were in English.
    To clarify, suppose we have an expression that attempts to check whether an argument
    was either `''yes` or `''no`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，`and`和`or`不能像英语一样使用。为了澄清，假设我们有一个表达式，试图检查一个参数是否是`'yes`或`'no`：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is WRONG. `or` returns the first argument that is not false, and thus
    will return `''yes` in this example. This expression ultimately is evaluated as:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是错误的。`or`返回第一个不为假的参数，因此在此示例中将返回`'yes`。这个表达式最终被评估为：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you want to check if the argument is *either* `''yes` or `''no`, you will
    need to do the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要检查参数是`'yes`还是`'no`，你需要做以下操作：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Last, but definitely not least, it is essential to avoid redundant code. Simple
    code is smart code, and will make complex programs much more readable and maneuverable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，但绝对不是最不重要的，避免冗余代码是至关重要的。简单的代码是聪明的代码，将使复杂的程序更易于阅读和操作。
- en: 'Example of redundant code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 冗余代码示例：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is bad coding style. We can simplify this into just one line:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是糟糕的编码风格。我们可以简化为一行：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Test Your Understanding**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: '**Note:** This is Exercise 3 on your Homework.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 这是你的作业中的第3个练习。'
- en: Write a procedure `indef-article` that takes in a word as its only argument
    and returns a sentence. See examples below for how `indef-article` should work.
    Remember that the indefinite article for anything that starts with a consonant
    is "a", and the indefinite article for anything that starts with a vowel is "an".
    You can ignore any edge cases.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`indef-article`的过程，它接受一个单词作为唯一参数，并返回一个句子。参见下面的示例，了解`indef-article`应该如何工作。请记住，任何以辅音字母开头的词的不定冠词是"a"，而以元音字母开头的词的不定冠词是"an"。您可以忽略任何边界情况。
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
