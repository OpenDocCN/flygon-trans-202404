- en: io.Writer interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: io.Writer 接口
- en: io.Writer interface
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: io.Writer 接口
- en: 'The inverse of [io.Reader](https://golang.org/pkg/io/#Reader) is [io.Writer](https://golang.org/pkg/io/#Writer)
    interface:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[io.Reader](https://golang.org/pkg/io/#Reader) 的逆接口是 [io.Writer](https://golang.org/pkg/io/#Writer)
    接口：'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Compared to `io.Reader`, since you no need to consider `io.EOF` error, the
    process of `Write` method is simple:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与`io.Reader`相比，由于不需要考虑`io.EOF`错误，`Write`方法的过程很简单：
- en: '(1) `err == nil`: All the data in `p` is written successfully;'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: (1) `err == nil`：`p`中的所有数据均成功写入；
- en: '(2) `err != nil`: The data in `p` is partially or not written at all.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: (2) `err != nil`：`p`中的数据部分或全部未写入。
- en: 'Let''s see an example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After executing the program, the `test.txt` is created:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行程序后，将创建`test.txt`：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
