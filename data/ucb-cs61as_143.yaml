- en: Variables and Definitions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量和定义
- en: Variables
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: To define a variable use the equal symbol. (To check equality, a double equals
    is used.) Variables can defined inside and outside of procedure defintion.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个变量，请使用等号符号。（要检查相等性，使用双等号。）变量可以在过程定义内外定义。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Defining Procedures
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义过程
- en: To define a procedure use “def”. In python, indentations (spacing at the start
    of a line) and colons are the delimiters that structure the python code into blocks.
    Therefore, we’ll use indentation to indicate the body of our procedures. When
    you’re done, you’ll need a empty line with a matching indentation as the def line
    to close the define block if you are inputing it directly into the interpreter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个过程，请使用“def”。在 Python 中，缩进（行首的空格）和冒号是结构化 Python 代码的分隔符。因此，我们将使用缩进来指示过程的主体。完成后，如果你直接在解释器中输入，则需要一个与
    def 行匹配缩进的空行来关闭定义块。
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Line 1: (0 space indentation) The function header assigns the function name
    and parameters'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (0 space indentation) 函数头部分配函数名称和参数
- en: 'Line 2: (3 space indentation) The body of func doubles x and returns (double
    of x) + 1'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (3 space indentation) 函数的主体将 x 值加倍并返回（x 的两倍）+ 1
- en: 'Line 3: (0 space indentation) Empty Line closes the define block'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (0 space indentation) 空行用于结束定义块
- en: 'Line 4: Call on func with parameter x as 1'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用参数 x 为 1 调用 func
- en: 'Line 5: 3 is returned'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回 3
- en: 'Note how we use a return statement. A return stops the procedure and delivers
    the output back to be displayed. Lines lacking the return statement aren’t propagated
    beyond the procedure innards. An apt analogy would be: a return statement is similar
    to you speaking aloud and the non-return statements are similar to your thoughts
    leading up to what you say.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何使用 return 语句。return 会停止过程并将输出传回以显示。没有 return 语句的行不会传播到过程内部之外。一个恰当的类比是：return
    语句类似于你大声说出来的话，而非 return 语句类似于你说话之前的思维。
- en: If your body is a single expression, you can write procedure definitions in
    one line. You still need the empty line
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的主体是单个表达式，你可以在一行中编写过程定义。你仍然需要空行
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Line 1: (0 space indentation) The function header assigns the function name
    and parameters and the single expression body'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (0 space indentation) 函数头部分配函数名称和参数以及单个表达式主体
- en: 'Line 2: (0 space indentation) Empty Line closes the define statement'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (0 space indentation) 空行用于结束定义语句
- en: 'Line 3: Call on func with parameter x as 1'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用参数 x 为 1 调用 func
- en: 'Line 4: 3 is returned'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回 3
