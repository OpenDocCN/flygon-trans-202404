- en: 'Chapter 6: Template Strings'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：模板字符串
- en: Template Strings
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板字符串
- en: Template strings only just barely warrant their own chapter. They aren't a kind
    of type nor are they any one of the building blocks TypeScript provides to support
    object oriented programming. However, they are quite useful. Most of the examples
    going forward in the book use them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 模板字符串仅仅勉强值得拥有自己的章节。它们既不是一种类型，也不是TypeScript提供的支持面向对象编程的任何构建块之一。然而，它们非常有用。本书中接下来的大部分示例都会使用它们。
- en: A template string is a "regular" JavaScript string seeded with placeholders.
    At runtime, your code replaces the placeholders with real values.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 模板字符串是一个带有占位符的“常规”JavaScript字符串。在运行时，您的代码将占位符替换为实际值。
- en: Denote a placeholder with `${}`. Place the variable or function inside the curly
    braces and it will be evaluated at runtime.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`${}`表示占位符。将变量或函数放在大括号内，它将在运行时进行评估。
- en: 'Here''s an example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: At runtime, the code replaces `userName` with the actual value of userName.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，代码将`userName`替换为userName的实际值。
- en: Here's another example that uses a template string as a parameter to `console.log()`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有另一个示例，它将模板字符串作为参数传递给`console.log()`。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above example, the placeholder is a function.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，占位符是一个函数。
- en: 'This is a nice shortcut, especially when you contrast it against the plain
    JS equivalent:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的快捷方式，特别是当您将其与普通JS等效对比时：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can use as many placeholders as you like:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用任意数量的占位符：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: I have trained myself to use the backtick character whenever I need to define
    strings. You never know when you might want to introduce some data into a string
    at run-time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经训练自己在需要定义字符串时使用反引号字符。您永远不知道何时可能需要在运行时将一些数据引入字符串中。
- en: You'll see a video showcasing template strings in the next chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在下一章节中看到展示模板字符串的视频。
- en: 'Template strings actually support a bit more functionality called "Tagged Templates."
    These allow you to pre-process the string before it''s emitted. I''ve never seen
    that functionality used in the real world so I''m not covering it here. Read about
    there here and decide for yourself whether you think you''ll use them: [https://basarat.gitbooks.io/typescript/docs/template-strings.html](https://basarat.gitbooks.io/typescript/docs/template-strings.html)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 模板字符串实际上支持更多功能，称为“标记模板”。这些允许您在发出字符串之前对其进行预处理。我从未在现实世界中看到过这种功能的使用，所以我在这里没有涉及。阅读这里的内容，并自行决定是否认为您会使用它们：[https://basarat.gitbooks.io/typescript/docs/template-strings.html](https://basarat.gitbooks.io/typescript/docs/template-strings.html)
- en: That's it for string templates. Let's get back into the weeds and dive into
    TypeScript functions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串模板就是这样。让我们回到细节中，深入研究TypeScript函数。
