- en: Lesson 3 Intro
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3课简介
- en: Resources and Computing
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源和计算
- en: 'Computers are powerful, but they have limits. Because of this, part of a programmer''s
    job is to manage a computer''s resources efficiently—if a programmer writes a
    program that is too inefficient, the computer will run out of resources attempting
    to execute it. There are two broad ways a program can be inefficient: space and
    time. Space is the amount of "scratch paper" the computer requires to carry out
    a program. Time is the amount of time required before the computer finishes running
    a program. In the following sections, we will examine both of these dimensions
    in detail.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机很强大，但它们也有限制。因此，程序员的一部分工作是有效地管理计算机的资源——如果程序员编写的程序效率太低，计算机将耗尽资源尝试执行它。程序的效率低下有两种广泛的方式：空间和时间。空间是计算机执行程序所需的“草稿纸”数量。时间是计算机完成运行程序所需的时间。在接下来的章节中，我们将详细研究这两个方面。
- en: First, we will take a look at space. An inefficient program may take up too
    much space to run, leading the computer to crash. We will examine what causes
    this and how we may prevent it through a specific type of recursion—tail recursion.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将看看空间。一个效率低下的程序可能占用太多空间而导致计算机崩溃。我们将研究造成这种情况的原因以及如何通过一种特定类型的递归——尾递归来防止这种情况发生。
- en: Next, we will consider time. Some programs may run longer than than the lifespan
    of the universe. (For example, the best programs we know to find a perfect solution
    to Chess.) We will learn how to identify such programs, and more generally, introduce
    and practice a method in which to measure how time-efficient our programs are.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将考虑时间。有些程序可能运行的时间比宇宙的寿命还长。（例如，我们知道的最好的程序来找到国际象棋的完美解决方案。）我们将学习如何识别这类程序，并更普遍地介绍和实践一种方法来衡量我们的程序在时间上的效率。
- en: Lastly, we will also describe another new type of recursion—tree recursion.
    Utilizing tree recursion in our programs allows us to tackle problems that we
    previously didn't have the tools to solve. We will particularly focus on what
    the costs and benefits this new technique brings.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还将描述另一种新类型的递归——树递归。在我们的程序中利用树递归使我们能够解决以前无法解决的问题。我们将特别关注这种新技术带来的成本和收益。
- en: Readings
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读材料
- en: You can check out additional readings in the book and the lecture notes. Each
    section of the lesson has more specific book links so that you can check out in
    case something is unclear.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在书籍和讲座笔记中查阅额外的阅读材料。每节课的每个部分都有更具体的书籍链接，以便您在有疑问时查阅。
- en: '[SICP 1.2 - Procedures and the Processes They Generate](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SICP 1.2 - 过程和它们生成的过程](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html)'
- en: '[Lecture Notes](http://inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=14)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[讲座笔记](http://inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=14)'
