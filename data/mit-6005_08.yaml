- en: 'Reading 8: Avoiding Debugging'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读8：避免调试
- en: Software in 6.005
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.005中的软件
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| 免受错误侵扰 | 易于理解 | 为变更做好准备 |'
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 今天正确，未来未知也正确。 | 与未来程序员清晰沟通，包括未来的自己。 | 设计以适应变更而无需重写。 |'
- en: Objectives
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目标
- en: The topic of today’s class is debugging – or rather, how to avoid debugging
    entirely, or keep it easy when you have to do it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 今天课堂的主题是调试 - 或者更确切地说，如何完全避免调试，或者在必须进行调试时保持简单。
- en: 'First Defense: Make Bugs Impossible'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一道防线：使错误不可能发生
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_8_avoiding_debugging,first_defense_make_bugs_impossible/mX154tjQuZE)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[**▶︎ 播放MITx视频**](https://courses.csail.mit.edu/6.005/video/reading_8_avoiding_debugging,first_defense_make_bugs_impossible/mX154tjQuZE)'
- en: The best defense against bugs is to make them impossible by design.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 防止错误的最佳方法是通过设计使其不可能发生。
- en: One way that we’ve already talked about is **[static checking](../01-static-checking/#static_checking_dynamic_checking_no_checking)**.
    Static checking eliminates many bugs by catching them at compile time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过的一种方式是**[静态检查](../01-static-checking/#static_checking_dynamic_checking_no_checking)**。静态检查通过在编译时捕获错误来消除许多错误。
- en: We also saw some examples of **dynamic checking** in earlier class meetings.
    For example, Java makes array overflow bugs impossible by catching them dynamically.
    If you try to use an index outside the bounds of an array or a List, then Java
    automatically produces an error. Older languages like C and C++ silently allow
    the bad access, which leads to bugs and [security vulnerabilities](http://en.wikipedia.org/wiki/Buffer_overflow).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的课堂会议中还看到了一些**动态检查**的例子。例如，Java通过动态捕获使数组溢出错误变得不可能。如果尝试使用超出数组或列表边界的索引，Java会自动产生错误。而旧的语言如C和C++会默默允许错误访问，导致错误和[安全漏洞](http://en.wikipedia.org/wiki/Buffer_overflow)。
- en: '**Immutability** (immunity from change) is another design principle that prevents
    bugs. An *immutable type* is a type whose values can never change once they have
    been created.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**不可变性**（免于改变）是另一个防止错误的设计原则。*不可变类型*是一种一旦创建就永远不会改变其值的类型。'
- en: String is an immutable type. There are no methods that you can call on a String
    that will change the sequence of characters that it represents. Strings can be
    passed around and shared without fear that they will be modified by other code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: String是一种不可变类型。没有任何方法可以调用String上的内容来改变它所代表的字符序列。字符串可以在代码之间传递和共享，而不必担心它们会被其他代码修改。
- en: 'Java also gives us *immutable references*: variables declared with the keyword
    `final`, which can be assigned once but never reassigned. It’s good practice to
    use `final` for declaring the parameters of a method and as many local variables
    as possible. Like the type of the variable, these declarations are important documentation,
    useful to the reader of the code and statically checked by the compiler.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Java还为我们提供了*不可变引用*：使用关键字`final`声明的变量，可以赋值一次但永远不会重新赋值。在声明方法的参数和尽可能多的局部变量时使用`final`是一个良好的实践。与变量的类型一样，这些声明是重要的文档，对代码的读者有用，并且被编译器静态检查。
- en: 'Consider this example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个例子：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `vowels` variable is declared final, but is it really unchanging? Which
    of the following statements will be illegal (caught statically by the compiler),
    and which will be allowed?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`vowels`变量被声明为final，但它真的是不可变的吗？以下哪些语句将是非法的（被编译器静态捕获），哪些将被允许？'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You’ll find the answers in the exercise below. Be careful about what `final`
    means! It only makes the *reference* immutable, not necessarily the *object* that
    the reference points to.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在下面的练习中找到答案。要小心`final`的含义！它只会使*引用*不可变，而不一定是引用指向的*对象*。
- en: reading exercises
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Final references, immutable objects
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最终引用，不可变对象
- en: 'Consider the following code, executed in order:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码，按顺序执行：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）（缺少答案）（缺少答案）（缺少答案）（缺少答案）（缺少答案）（缺少答案）（缺少答案）（缺少答案）（缺少答案）
- en: (missing explanation)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: Afterwards
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 之后
- en: 'After all the legal statements in the previous exercise’s answers are executed,
    what is the resulting value of each variable? Write just the sequence of letters
    found in the variable’s value, with no punctuation or spaces. For example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习答案中的所有合法语句执行后，每个变量的结果值是什么？只写出变量值中的字母序列，不带标点或空格。例如：
- en: '`vowel0`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`vowel0`'
- en: y
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: y
- en: (missing explanation)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: '`vowel1`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`vowel1`'
- en: (missing answer)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）
- en: (missing explanation)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: '`vowel2`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`vowel2`'
- en: (missing answer)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）
- en: (missing explanation)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: '`vowel3`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`vowel3`'
- en: (missing answer)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）
- en: (missing explanation)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: '`vowel4`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`vowel4`'
- en: (missing answer)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）
- en: (missing explanation)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: '`vowel5`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`vowel5`'
- en: (missing answer)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）
- en: (missing explanation)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: 'Second Defense: Localize Bugs'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二防御：本地化 Bug
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_8_avoiding_debugging,second_defense_localize_bugs/ydDq-BEWnlY)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[**▶︎ 播放 MITx 视频**](https://courses.csail.mit.edu/6.005/video/reading_8_avoiding_debugging,second_defense_localize_bugs/ydDq-BEWnlY)'
- en: If we can’t prevent bugs, we can try to localize them to a small part of the
    program, so that we don’t have to look too hard to find the cause of a bug. When
    localized to a single method or small module, bugs may be found simply by studying
    the program text.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不能防止 bug，我们可以尝试将它们本地化到程序的一小部分，这样我们就不必费太大劲找到 bug 的原因。当本地化到单个方法或小模块时，可以通过简单地研究程序文本来找到
    bug。
- en: 'We already talked about **fail fast**: the earlier a problem is observed (the
    closer to its cause), the easier it is to fix.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经谈过**尽早失败**：问题被观察到的越早（距离其原因越近），修复起来就越容易。
- en: 'Let’s begin with a simple example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的例子开始：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now suppose somebody calls `sqrt` with a negative argument. What’s the best
    behavior for `sqrt`? Since the caller has failed to satisfy the requirement that
    `x` should be nonnegative, `sqrt` is no longer bound by the terms of its contract,
    so it is technically free to do whatever it wants: return an arbitrary value,
    or enter an infinite loop, or melt down the CPU. Since the bad call indicates
    a bug in the caller, however, the most useful behavior would point out the bug
    as early as possible. We do this by inserting a runtime assertion that tests the
    precondition. Here is one way we might write the assertion:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设有人用负参数调用了`sqrt`。`sqrt`的最佳行为是什么？由于调用者未能满足`x`应该是非负的要求，所以`sqrt`不再受其合同条款的约束，因此它在技术上可以自由做任何它想做的事情：返回任意值，或者进入无限循环，或者熔断
    CPU。然而，由于错误的调用表明调用者存在 bug，因此最有用的行为是尽早指出 bug。我们通过插入一个运行时断言来测试前提条件的方式之一，来实现这一点。这是我们可能编写断言的一种方式：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When the precondition is not satisfied, this code terminates the program by
    throwing an `AssertionError` exception. The effects of the caller’s bug are prevented
    from propagating.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当前提条件不满足时，此代码通过抛出`AssertionError`异常终止程序。调用者 bug 的影响被阻止传播。
- en: Checking preconditions is an example of **defensive programming**. Real programs
    are rarely bug-free. Defensive programming offers a way to mitigate the effects
    of bugs even if you don’t know where they are.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 检查前提条件是**防御性编程**的一个例子。真实的程序很少是无 bug 的。防御性编程提供了一种减轻 bug 影响的方式，即使你不知道它们在哪里。
- en: Assertions
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言
- en: 'It is common practice to define a procedure for these kinds of defensive checks,
    usually called `assert`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通常的做法是为这些防御性检查定义一个过程，通常称为`assert`：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This approach abstracts away from what exactly happens when the assertion fails.
    The failed assert might exit; it might record an event in a log file; it might
    email a report to a maintainer.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法抽象出了当断言失败时到底发生了什么。失败的断言可能会退出；它可能会在日志文件中记录一个事件；它可能会向维护者发送一份报告。
- en: Assertions have the added benefit of documenting an assumption about the state
    of the program at that point. To somebody reading your code, `assert (x >= 0)`
    says “at this point, it should always be true that x >= 0.” Unlike a comment,
    however, an assertion is executable code that enforces the assumption at runtime.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 断言还具有一个额外的好处，即对程序在该点的状态作出假设的记录。对于阅读你的代码的人来说，`assert (x >= 0)`表示“在这一点上，x >= 0应该始终为真。”然而，与注释不同，断言是可执行的代码，它在运行时强制执行假设。
- en: 'In Java, runtime assertions are a built-in feature of the language. The simplest
    form of the assert statement takes a boolean expression, exactly as shown above,
    and throws `AssertionError` if the boolean expression evaluates to false:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 中，运行时断言是语言的一个内置特性。assert 语句的最简单形式接受一个布尔表达式，与上面完全相同，如果布尔表达式评估为 false，则抛出`AssertionError`：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'An assert statement may also include a description expression, which is usually
    a string, but may also be a primitive type or a reference to an object. The description
    is printed in an error message when the assertion fails, so it can be used to
    provide additional details to the programmer about the cause of the failure. The
    description follows the asserted expression, separated by a colon. For example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 断言语句还可以包括描述表达式，通常是一个字符串，但也可以是一个基本类型或对象的引用。当断言失败时，描述将打印在错误消息中，因此可以用于向程序员提供有关失败原因的额外细节。描述跟在断言表达式后面，用冒号分隔。例如：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If x == -1, then this assertion fails with the error message
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 x == -1，则此断言将失败，并显示错误消息。
- en: '`x is -1`'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`x 是 -1`'
- en: along with a stack trace that tells you where the assert statement was found
    in your code and the sequence of calls that brought the program to that point.
    This information is often enough to get started in finding the bug.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 还会显示一个堆栈跟踪，告诉您在代码中找到断言语句的位置以及带来程序到达该点的调用序列。这些信息通常足以开始查找错误。
- en: '**A serious problem with Java assertions is that assertions are *off by default*.**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java 断言的一个严重问题是，默认情况下断言是*关闭*的。**'
- en: If you just run your program as usual, none of your assertions will be checked!
    Java’s designers did this because checking assertions can sometimes be costly
    to performance. For example, a procedure that searches an array using binary search
    has a requirement that the array be sorted. Asserting this requirement requires
    scanning through the entire array, however, turning an operation that should run
    in logarithmic time into one that takes linear time. You should be willing (eager!)
    to pay this cost during testing, since it makes debugging much easier, but not
    after the program is released to users. For most applications, however, assertions
    are *not* expensive compared to the rest of the code, and the benefit they provide
    in bug-checking is worth that small cost in performance.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您像平常一样运行程序，则不会检查任何断言！Java 的设计者之所以这样做，是因为检查断言有时会对性能造成一定的代价。例如，使用二分搜索搜索数组的过程要求数组已排序。断言此要求需要扫描整个数组，将应该在对数时间内运行的操作转换为线性时间。在测试期间，您应该愿意（渴望！）支付这个成本，因为这样可以更容易地进行调试，但在程序发布给用户后则不应该。然而，对于大多数应用程序来说，与代码的其余部分相比，断言*并不*昂贵，它们在检查错误方面提供的好处值得在性能上付出的这点小成本。
- en: So you have to enable assertions explicity by passing `-ea` (which stands for
    *enable assertions*) to the Java virtual machine. In Eclipse, you enable assertions
    by going to Run → Run Configurations → Arguments, and putting -ea in the VM arguments
    box. It’s best, in fact, to enable them by default by going to Preferences → Java
    → Installed JREs → Edit → Default VM Arguments, as you hopefully did in the [Getting
    Started](../../getting-started/#config-eclipse) instructions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您必须通过向 Java 虚拟机传递 `-ea`（表示*启用断言*）来显式启用断言。在 Eclipse 中，您可以通过转到 Run → Run Configurations
    → Arguments，并将 -ea 放入 VM arguments 框中来启用断言。实际上，最好通过转到 Preferences → Java → Installed
    JREs → Edit → Default VM Arguments 来默认启用它们，就像您在[入门指南](../../getting-started/#config-eclipse)中所做的那样。
- en: 'It’s always a good idea to have assertions turned on when you’re running JUnit
    tests. You can ensure that assertions are enabled using the following test case:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 JUnit 测试时，始终将断言打开是一个好主意。您可以使用以下测试用例确保已启用断言：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If assertions are turned on as desired, then `assert false` throws an `AssertionError`.
    The annotation `(expected=AssertionError.class)` on the test expects and requires
    this error to be thrown, so the test passes. If assertions are turned off, however,
    then the body of the test will do nothing, failing to throw the expected exception,
    and JUnit will mark the test as failing.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果断言已按预期打开，则`assert false`会抛出`AssertionError`。测试中的注解`(expected=AssertionError.class)`期望并要求抛出此错误，因此测试通过。但是，如果关闭了断言，则测试的主体将不执行任何操作，未能抛出预期的异常，JUnit
    将标记测试为失败。
- en: Note that the Java `assert` statement is a different mechanism from the JUnit
    methods `assertTrue()`, `assertEquals()`, etc. They all assert a predicate about
    your code, but are designed for use in different contexts. The `assert` statement
    should be used in implementation code, for defensive checks inside the implementation.
    JUnit `assert...()` methods should be used in JUnit tests, to check the result
    of a test. The `assert` statements don’t run without `-ea`, but the JUnit `assert...()`
    methods always run.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Java 的 `assert` 语句与 JUnit 的 `assertTrue()`、`assertEquals()` 等方法是不同的机制。它们都断言关于你的代码的谓词，但设计用于不同的上下文中。`assert`
    语句应该在实现代码中使用，用于实现内部的防御性检查。JUnit 的 `assert...()` 方法应该在 JUnit 测试中使用，用于检查测试的结果。`assert`
    语句如果没有 `-ea` 参数不会运行，但是JUnit的 `assert...()` 方法总是会运行。
- en: What to Assert
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言什么
- en: 'Here are some things you should assert:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些你应该断言的事情：
- en: '**Method argument requirements**, like we saw for `sqrt`.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法参数要求**，就像我们在 `sqrt` 中看到的那样。'
- en: '**Method return value requirements.** This kind of assertion is sometimes called
    a *self check*. For example, the sqrt method might square its result to check
    whether it is reasonably close to x:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法返回值要求**。这种断言有时被称为*自检*。例如，sqrt 方法可能会将其结果平方以检查它是否与 x 相近：'
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Covering all cases.** If a conditional statement or switch does not cover
    all the possible cases, it is good practice to use an assertion to block the illegal
    cases:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**覆盖所有情况**。如果条件语句或 switch 没有覆盖所有可能的情况，使用断言来阻止非法情况是一个好的做法：'
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The assertion in the default clause has the effect of asserting that `vowel`
    must be one of the five vowel letters.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认子句中的断言效果是断言`vowel`必须是五个元音字母中的一个。
- en: When should you write runtime assertions? As you write the code, not after the
    fact. When you’re writing the code, you have the invariants in mind. If you postpone
    writing assertions, you’re less likely to do it, and you’re liable to omit some
    important invariants.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 什么时候应该写运行时断言？在编写代码时，而不是事后。当你编写代码时，你心中有不变量。如果你推迟编写断言，你就不太可能这样做，而且你可能会忽略一些重要的不变量。
- en: What Not to Assert
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要断言什么
- en: 'Runtime assertions are not free. They can clutter the code, so they must be
    used judiciously. Avoid trivial assertions, just as you would avoid uninformative
    comments. For example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时断言并不是免费的。它们可能会使代码变得混乱，因此必须谨慎使用。避免无关紧要的断言，就像你会避免无信息的注释一样。例如：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This assertion doesn’t find bugs in your code. It finds bugs in the compiler
    or Java virtual machine, which are components that you should trust until you
    have good reason to doubt them. If an assertion is obvious from its local context,
    leave it out.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个断言并不会找出你代码中的 bug。它会找出编译器或 Java 虚拟机中的 bug，这些都是你应该信任的组件，直到你有充分的理由怀疑它们。如果一个断言在其局部上下文中是显而易见的，请省略它。
- en: Never use assertions to test conditions that are external to your program, such
    as the existence of files, the availability of the network, or the correctness
    of input typed by a human user. Assertions test the internal state of your program
    to ensure that it is within the bounds of its specification. When an assertion
    fails, it indicates that the program has run off the rails in some sense, into
    a state in which it was not designed to function properly. Assertion failures
    therefore indicate bugs. External failures are not bugs, and there is no change
    you can make to your program in advance that will prevent them from happening.
    External failures should be handled using exceptions instead.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要使用断言来测试与程序外部条件有关的条件，比如文件的存在、网络的可用性或人类用户输入的正确性。断言测试程序的内部状态，以确保它在其规范的范围内。当一个断言失败时，它表示程序在某种意义上已经偏离了轨道，进入了一个它没有设计为正确运行的状态。因此，断言失败表示存在
    bug。外部失败不是 bug，你无法提前对程序进行任何更改以防止它们发生。应该使用异常来处理外部失败。
- en: 'Many assertion mechanisms are designed so that assertions are executed only
    during testing and debugging, and turned off when the program is released to users.
    Java’s assert statement behaves this way. Since assertions may be disabled, the
    correctness of your program should never depend on whether or not the assertion
    expressions are executed. In particular, asserted expressions should not have
    *side-effects*. For example, if you want to assert that an element removed from
    a list was actually found in the list, don’t write it like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 许多断言机制设计成仅在测试和调试期间执行断言，并在程序发布给用户时关闭。Java 的 assert 语句就是这样。由于断言可能被禁用，程序的正确性不应该依赖于断言表达式是否被执行。特别是，断言表达式不应该有*副作用*。例如，如果你想要断言从列表中移除的元素实际上在列表中被找到，不要这样写：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If assertions are disabled, the entire expression is skipped, and `x` is never
    removed from the list. Write it like this instead:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果禁用了断言，则整个表达式将被跳过，`x` 将永远不会从列表中移除。改为像这样写：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For 6.005, you are required to have assertions turned on, all the time. Make
    sure you did this in Eclipse, following the instructions in the [Getting Started
    handout](../../getting-started/#config-eclipse). If you don’t have assertions
    turned on, you will be sad, and the staff won’t have much sympathy.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 6.005，你需要始终打开断言。确保你在 Eclipse 中按照[入门手册](../../getting-started/#config-eclipse)中的说明进行了此操作。如果你没有打开断言，你会感到难过，而工作人员也不会对此有太多同情。
- en: reading exercises
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Assertions
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 断言
- en: 'Consider this (incomplete) function:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个（不完整的）函数：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Incremental Development
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增量开发
- en: '[**▶︎ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_8_avoiding_debugging,incremental_development/vFzFmw1uxmQ)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[**▶︎ 播放 MITx 视频**](https://courses.csail.mit.edu/6.005/video/reading_8_avoiding_debugging,incremental_development/vFzFmw1uxmQ)'
- en: A great way to localize bugs to a tiny part of the program is incremental development.
    Build only a bit of your program at a time, and test that bit thoroughly before
    you move on. That way, when you discover a bug, it’s more likely to be in the
    part that you just wrote, rather than anywhere in a huge pile of code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将错误局限于程序的一小部分的一个很好的方法是增量开发。每次只构建程序的一部分，并在继续之前彻底测试该部分。这样，当你发现一个错误时，它更可能出现在你刚刚编写的部分，而不是在大量代码的任何地方。
- en: 'Our class on testing talked about two techniques that help with this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们关于测试的课程谈到了两种有助于此的技术：
- en: '[**Unit testing**](../03-testing/#unit_testing_and_stubs): when you test a
    module in isolation, you can be confident that any bug you find is in that unit
    – or maybe in the test cases themselves.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**单元测试**](../03-testing/#unit_testing_and_stubs)：当你单独测试一个模块时，你可以确信找到的任何错误都在该单元内
    - 或者可能在测试用例本身。'
- en: '[**Regression testing**](../03-testing/#automated_testing_and_regression_testing):
    when you’re adding a new feature to a big system, run the regression test suite
    as often as possible. If a test fails, the bug is probably in the code you just
    changed.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**回归测试**](../03-testing/#automated_testing_and_regression_testing)：当你向一个大型系统添加新功能时，尽可能频繁地运行回归测试套件。如果一个测试失败，那么错误很可能在你刚刚修改的代码中。'
- en: Modularity & Encapsulation
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块化与封装
- en: You can also localize bugs by better software design.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过更好的软件设计来定位错误。
- en: '**Modularity.** Modularity means dividing up a system into components, or modules,
    each of which can be designed, implemented, tested, reasoned about, and reused
    separately from the rest of the system. The opposite of a modular system is a
    monolithic system – big and with all of its pieces tangled up and dependent on
    each other.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块化。** 模块化意味着将系统划分为组件或模块，每个模块都可以与系统的其余部分分开设计、实现、测试、理解和重复使用。模块化系统的相反是单片系统
    - 大而且所有部分都混在一起并且彼此依赖。'
- en: A program consisting of a single, very long main() function is monolithic –
    harder to understand, and harder to isolate bugs in. By contrast, a program broken
    up into small functions and classes is more modular.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由一个非常长的 main() 函数组成的程序是单片化的 - 更难理解，更难隔离错误。相比之下，将程序分解为小函数和类更具模块化。
- en: '**Encapsulation.** Encapsulation means building walls around a module (a hard
    shell or capsule) so that the module is responsible for its own internal behavior,
    and bugs in other parts of the system can’t damage its integrity.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**封装。** 封装意味着在模块周围建立墙壁（一个坚硬的外壳或胶囊），使得模块对其自身的内部行为负责，系统其他部分的错误不会损害其完整性。'
- en: One kind of encapsulation is [access control](http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html),
    using `public` and `private` to control the visibility and accessibility of your
    variables and methods. A public variable or method can be accessed by any code
    (assuming the class containing that variable or method is also public). A private
    variable or method can only be accessed by code in the same class. Keeping things
    private as much as possible, especially for variables, provides encapsulation,
    since it limits the code that could inadvertently cause bugs.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一种封装是[访问控制](http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html)，使用`public`和`private`来控制变量和方法的可见性和可访问性。公共变量或方法可以被任何代码访问（假设包含该变量或方法的类也是公共的）。私有变量或方法只能被同一类中的代码访问。尽可能保持私有，特别是对于变量，提供了封装，因为它限��了可能无意中引起bug的代码。
- en: 'Another kind of encapsulation comes from **variable scope**. The *scope* of
    a variable is the portion of the program text over which that variable is defined,
    in the sense that expressions and statements can refer to the variable. A method
    parameter’s scope is the body of the method. A local variable’s scope extends
    from its declaration to the next closing curly brace. Keeping variable scopes
    as small as possible makes it much easier to reason about where a bug might be
    in the program. For example, suppose you have a loop like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种封装来自于**变量作用域**。变量的*作用域*是指变量定义的程序文本部分，表达式和语句可以引用该变量。方法参数的作用域是方法的主体。局部变量的作用域从其声明到下一个闭合花括号。保持变量作用域尽可能小，使得更容易推断程序中可能存在bug的位置。例如，假设你有一个像这样的循环：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '…and you’ve discovered that this loop keeps running forever – `i` never reaches
    100\. Somewhere, somebody is changing `i`. But where? If `i` is declared as a
    global variable like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: …你发现这个循环永远运行下去——`i`永远不会达到100。某处，有人在改变`i`。但是在哪里呢？如果`i`被声明为一个全局变量，像这样：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '…then its scope is the entire program. It might be changed anywhere in your
    program: by `doSomeThings()`, by some other method that `doSomeThings()` calls,
    by a concurrent thread running some completely different code. But if `i` is instead
    declared as a local variable with a narrow scope, like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: …那么它的作用域是整个程序。它可能在程序的任何地方被改变：通过`doSomeThings()`，通过`doSomeThings()`调用的其他方法，通过运行一些完全不同代码的并发线程。但是如果`i`被声明为一个具有狭窄作用域的局部变量，像这样：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: …then the only place where `i` can be changed is within the for statement –
    in fact, only in the … parts that we’ve omitted. You don’t even have to consider
    `doSomeThings()`, because `doSomeThings()` doesn’t have access to this local variable.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: …那么`i`可以被改变的唯一地方就是在for语句内——事实上，只在我们省略的部分中。你甚至不必考虑`doSomeThings()`，因为`doSomeThings()`无法访问这个局部变量。
- en: '**Minimizing the scope of variables** is a powerful practice for bug localization.
    Here are a few rules that are good for Java:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**最小化变量的作用域** 是一种用于定位bug的强大实践。以下是一些对Java有益的规则：'
- en: '**Always declare a loop variable in the for-loop initializer.** So rather than
    declaring it before the loop:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总是在for循环初始化器中声明循环变量。** 因此，而不是在循环之前声明它：'
- en: '[PRE18]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'which makes the scope of the variable the entire rest of the outer curly-brace
    block containing this code, you should do this:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这使得变量的作用域延伸到包含此代码的外部花括号块的其余部分，你应该这样做：
- en: '[PRE19]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: which makes the scope of `i` limited just to the for loop.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这使得`i`的作用域仅限于for循环。
- en: '**Declare a variable only when you first need it, and in the innermost curly-brace
    block that you can.** Variable scopes in Java are curly-brace blocks, so put your
    variable declaration in the innermost one that contains all the expressions that
    need to use the variable. Don’t declare all your variables at the start of the
    function – it makes their scopes unnecessarily large. But note that in languages
    without static type declarations, like Python and Javascript, the scope of a variable
    is normally the entire function anyway, so you can’t restrict the scope of a variable
    with curly braces, alas.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**只有在首次需要时才声明变量，并且在您可以的最内层大括号块中。** 在Java中，变量范围是大括号块，因此将变量声明放在包含所有需要使用该变量的表达式的最内层块中。不要在函数开头声明所有变量——这会使它们的范围不必要地大。但请注意，在没有静态类型声明的语言中，比如Python和Javascript，变量的范围通常是整个函数，因此你无法用大括号限制变量的范围，唉。'
- en: '**Avoid global variables.** Very bad idea, especially as programs get large.
    Global variables are often used as a shortcut to provide a parameter to several
    parts of your program. It’s better to just pass the parameter into the code that
    needs it, rather than putting it in global space where it can inadvertently reassigned.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免全局变量。** 非常糟糕的想法，特别是当程序变得很大时。全局变量通常被用作为程序的几个部分提供参数的捷径。最好将参数传递到需要它的代码中，而不是将其放在全局空间中，这样可以无意中重新分配。'
- en: reading exercises
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Variable scope
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 变量范围
- en: 'Consider the following code (which is missing some variable declarations):'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码（其中缺少一些变量声明）：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）（缺少答案）（缺少答案）（缺少答案）（缺少答案）
- en: (missing explanation)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）（缺少答案）（缺少答案）（缺少答案）
- en: (missing explanation)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）（缺少答案）（缺少答案）（缺少答案）
- en: (missing explanation)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）（缺少答案）（缺少答案）（缺少答案）
- en: (missing explanation)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this reading, we looked at some ways to minimize the cost of debugging:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇阅读中，我们看了一些减少调试成本的方法：
- en: Avoid debugging
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免调试
- en: make bugs impossible with techniques like static typing, automatic dynamic checking,
    and immutable types and references
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态类型、自动动态检查和不可变类型和引用等技术使错误变得不可能
- en: Keep bugs confined
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持错误局限
- en: failing fast with assertions keeps a bug’s effects from spreading
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用断言快速失败可以防止错误的影响扩散
- en: incremental development and unit testing confine bugs to your recent code
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增量开发和单元测试将错误限制在您最近的代码中
- en: scope minimization reduces the amount of the program you have to search
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 范围最小化减少了您必须搜索的程序量
- en: 'Thinking about our three main measures of code quality:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑我们对代码质量的三个主要指标：
- en: '**Safe from bugs.** We’re trying to prevent them and get rid of them.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**免受错误之苦。** 我们正在尝试预防它们并摆脱它们。'
- en: '**Easy to understand.** Techniques like static typing, final declarations,
    and assertions are additional documentation of the assumptions in your code. Variable
    scope minimization makes it easier for a reader to understand how the variable
    is used, because there’s less code to look at.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于理解。** 类似静态类型、最终声明和断言的技术是你代码中假设的额外文档。变量范围的最小化使读者更容易理解变量的使用方式，因为要查看的代码更少。'
- en: '**Ready for change.** Assertions and static typing document the assumptions
    in an automatically-checkable way, so that when a future programmer changes the
    code, accidental violations of those assumptions are detected.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为变化做好准备。** 断言和静态类型以一种可自动检查的方式记录了假设，因此当将来的程序员更改代码时，会检测到对这些假设的意外违反。'
