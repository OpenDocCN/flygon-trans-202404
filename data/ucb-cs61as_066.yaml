- en: Nested Mappings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套映射
- en: Nested Mapping in Sequences
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 序列中的嵌套映射
- en: 'In the previous subsection, we saw how we can combine `enumerate`, `map`, `filter`,
    and `accumulate` to produce more complex functions. In this subsection we are
    going to explore an example of nested mapping: calling `map` on a list twice.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一小节中，我们看到如何结合 `enumerate`、`map`、`filter` 和 `accumulate` 来生成更复杂的函数。在本小节中，我们将探讨一个嵌套映射的例子：在列表上两次调用
    `map`。
- en: Checker Grid
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 棋盘网格
- en: '![](/static/checker.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/checker.png)'
- en: 'Jack is a big fan of checkers. He wants to write a function that will make
    a list all of the coordinates in a 4x4 board. More concretely, he wants a function
    that outputs:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Jack 是一个大力支持国际象棋的人。他想要编写一个函数，将一个 4x4 的棋盘上所有的坐标列出来。更具体地说，他想要一个输出如下的函数：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that a coordinate is represented as a pair of `x` and `y` coordinates and
    the code outputs a list of such coordinates. We will walk step-by-step through
    how Jack can write this function using list manipulation techniques we have already
    learned.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，坐标被表示为一对 `x` 和 `y` 坐标，并且代码输出了一个这样的坐标列表。我们将逐步介绍 Jack 如何使用我们已经学到的列表操作技术编写这个函数。
- en: 'Checker Grid: First Row'
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 棋盘网格：第一行
- en: '![](/static/checker.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/checker.png)'
- en: 'First, lets consider a small chunk of the problem and work our way up: Let''s
    write some code that returns a list of the coordinates from the first row, i.e.
    `( (1 . 1) (2 . 1) (3 . 1) (4 . 1) )`. How can we achieve this? Well, we notice
    that the x-coordinate starts from 1 and ends at 4 and that the y-coordinate is
    always 1\. So if we have a list `(1 2 3 4)`, we can `cons` each element with 1\.
    We can write this as:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们考虑问题的一个小部分，并逐步解决：让我们编写一些代码，返回来自第一行的坐标列表，即 `( (1 . 1) (2 . 1) (3 . 1) (4
    . 1) )`。我们如何实现这个呢？嗯，我们注意到 x 坐标从 1 开始到 4 结束，而 y 坐标始终为 1。因此，如果我们有一个列表 `(1 2 3 4)`，我们可以将每个元素与
    1 进行 `cons`。我们可以写成这样：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So far so good. Jack is happy.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一切顺利。Jack 很高兴。
- en: 'Checker Grid: All Rows'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 棋盘网格：所有行
- en: '![](/static/checker.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/checker.png)'
- en: So we have some code that returns a list of coordinates for the first row. Since
    there are only 4 rows, we can technically have a copy for each row.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们有一些代码返回了第一行的坐标列表。由于只有4行，我们可以在技术上为每行都复制一个。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That is good and all, but we know that copying and pasting code is generally
    a bad idea. (What if the checkerboard was 1000x1000?) We want to keep the part
    that is similar, and change as little as possible. Notice that the only difference
    from the code for row1, row2, row3, and row4 is the number you are cons-ing with.
    We can apply the same method from before:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '这一切都很好，但我们知道复制和粘贴代码通常是一个坏主意。（如果棋盘是1000x1000呢？）我们想要保留相似的部分，并尽可能地少改变。注意到从 row1、row2、row3
    和 row4 的代码中唯一的区别是你与之 `cons` 的数字。我们可以应用之前的方法： '
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice how the inner lambda takes care of each tile in a single row, while the
    outer lambda takes care of each row in a board. Hooray! We're done, right?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意内部 lambda 如何处理单行中的每个瓦片，而外部 lambda 则处理棋盘中的每一行。万岁！我们完成了，对吧？
- en: 'Checkers Grid: Flattening'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 棋盘网格：展开
- en: '![](/static/checker.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/checker.png)'
- en: 'This is what we get we we run our current code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行我们当前代码时，我们得到了这个：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This looks deceptively similar to our desired result:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来与我们期望的结果非常相似：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'What''s different? Our current code returns a list of a list of coordinates.
    What we want instead is a list of coordinates. So how do we ''flatten'' the list?
    We can call `accumulate` with `append`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么不同吗？我们当前的代码返回了一个坐标列表的列表。我们想要的是一个坐标列表。那么我们如何“展开”这个列表呢？我们可以调用 `accumulate`，并用
    `append`：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Flatmap
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展平映射
- en: 'Calling `accumulate` with `append` is so common that we implement this procedure
    as `flatmap`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 用 `append` 调用 `accumulate` 是如此常见，以至于我们将这个过程实现为 `flatmap`：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Using this definition, we can finally write the function that Jack wants:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个定义，我们最终可以编写出 Jack 想要的函数：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Takeaways
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: Nested mappings can be useful when you want to traverse a certain list and match
    their elements up. In order to get your functions correct, breaking the problem
    down like how we did it here is highly recommended. `flatmap` is function that
    "flattens" list of lists.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要遍历某个列表并匹配它们的元素时，嵌套映射是很有用的。为了正确编写函数，强烈建议像我们在这里做的那样将问题分解。`flatmap` 是一个“展平”列表的函数。
