- en: Your first application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的第一个应用程序
- en: Your first application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的第一个应用程序
- en: 'Ready to build your first web app with ASP.NET Core? You''ll need to gather
    a few things first:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 准备用ASP.NET Core构建你的第一个Web应用程序？首先需要收集一些东西：
- en: '**Your favorite code editor.** You can use Atom, Sublime, Notepad, or whatever
    editor you prefer writing code in. If you don''t have a favorite, give Visual
    Studio Code a try. It''s a free, cross-platform code editor that has rich support
    for writing C#, JavaScript, HTML, and more. Just search for "download visual studio
    code" and follow the instructions.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**你喜欢的代码编辑器。** 你可以使用Atom、Sublime、记事本，或者你喜欢编写代码的任何编辑器。如果你没有喜欢的，可以试试Visual Studio
    Code。它是一个免费的跨平台代码编辑器，对编写C#、JavaScript、HTML等有很好的支持。只需搜索“下载Visual Studio Code”并按照说明操作。'
- en: If you're on Windows, you can also use Visual Studio to build ASP.NET Core applications.
    You'll need Visual Studio 2017 version 15.3 or later (the free Community Edition
    is fine). Visual Studio has great code completion and other features specific
    to C#, although Visual Studio Code is close behind.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Windows上，也可以使用Visual Studio来构建ASP.NET Core应用程序。你需要Visual Studio 2017版本15.3或更高版本（免费的社区版也可以）。Visual
    Studio具有出色的代码补全和其他针对C#的特定功能，尽管Visual Studio Code也不差。
- en: '**The .NET Core SDK.** Regardless of the editor or platform you''re using,
    you''ll need to install the .NET Core SDK, which includes the runtime, base libraries,
    and command line tools you need for building ASP.NET Core apps. The SDK can be
    installed on Windows, Mac, or Linux.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**.NET Core SDK。** 无论你使用的是哪个编辑器或平台，你都需要安装.NET Core SDK，其中包括构建ASP.NET Core应用所需的运行时、基本库和命令行工具。SDK可在Windows、Mac或Linux上安装。'
- en: Once you've decided on an editor, you'll need to get the SDK.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你决定了编辑器，你就需要获取SDK。
- en: Get the SDK
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取SDK
- en: Get the SDK
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取SDK
- en: 'Search for "download .net core" and follow the instructions on Microsoft''s
    download page for your platform. After the SDK has finished installing, open up
    the Terminal (or PowerShell on Windows) and use the `dotnet` command line tool
    (also called a **CLI**) to make sure everything is working:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索“下载 .net core”，按照微软下载页面上的说明为你的平台安装。SDK安装完成后，打开终端（或Windows上的PowerShell），使用`dotnet`命令行工具（也称为**CLI**）确保一切正常运行：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can get more information about your platform with the `--info` flag:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`--info`标志获取有关你的平台的更多信息：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you see output like the above, you're ready to go!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到类似上面的输出，那么你已经准备好了！
- en: Hello World in C#
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用C#编写的Hello World
- en: Hello World in C#
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用C#编写的Hello World
- en: Before you dive into ASP.NET Core, try creating and running a simple C# application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入学习ASP.NET Core之前，尝试创建并运行一个简单的C#应用程序。
- en: 'You can do this all from the command line. First, open up the Terminal (or
    PowerShell on Windows). Navigate to the location you want to store your projects,
    such as your Documents directory:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以全部在命令行中完成。首先，打开终端（或Windows上的PowerShell）。导航到你想要存储项目的位置，比如你的文档目录：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the `dotnet` command to create a new project:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`dotnet`命令创建一个新项目：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This creates a basic C# program that writes some text to the screen. The program
    is comprised of two files: a project file (with a `.csproj` extension) and a C#
    code file (with a `.cs` extension). If you open the former in a text or code editor,
    you''ll see this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个基本的C#程序，向屏幕输出一些文本。该程序由两个文件组成：一个项目文件（扩展名为`.csproj`）和一个C#代码文件（扩展名为`.cs`）。如果你在文本或代码编辑器中打开前者，你会看到这样的内容：
- en: '**`CsharpHelloWorld.csproj`**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**`CsharpHelloWorld.csproj`**'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The project file is XML-based and defines some metadata about the project. Later,
    when you reference other packages, those will be listed here (similar to a `package.json`
    file for npm). You won't have to edit this file by hand often.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 项目文件是基于XML的，定义了关于项目的一些元数据。稍后，当你引用其他包时，它们将在这里列出（类似于npm的`package.json`文件）。你通常不需要经常手动编辑这个文件。
- en: '**`Program.cs`**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Program.cs`**'
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`static void Main` is the entry point method of a C# program, and by convention
    it''s placed in a class (a type of code structure or module) called `Program`.
    The `using` statement at the top imports the built-in System classes from .NET
    and makes them available to the code in the class.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`static void Main`是C#程序的入口方法，按照惯例，它放置在一个名为`Program`的类（一种代码结构或模块）中。顶部的`using`语句导入了来自.NET的内置System类，并使其可用于类中的代码。'
- en: 'From inside the project directory, use `dotnet run` to run the program. You''ll
    see the output written to the console after the code compiles:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目目录中，使用`dotnet run`来运行程序。代码编译后，你会在控制台看到输出：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That's all it takes to scaffold and run a .NET program! Next, you'll do the
    same thing for an ASP.NET Core application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是构建和运行.NET程序所需的全部！接下来，你将为一个ASP.NET Core应用程序做同样的事情。
- en: Create an ASP.NET Core project
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个ASP.NET Core项目
- en: Create an ASP.NET Core project
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个ASP.NET Core项目
- en: 'If you''re still in the directory you created for the Hello World sample, move
    back up to your Documents or home directory:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然在为Hello World示例创建的目录中，返回到你的文档或主目录：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, create a new project with `dotnet new`, this time with some extra options:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`dotnet new`创建一个新项目，这次带有一些额外选项：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This creates a new project from the `mvc` template, and adds some additional
    authentication and security bits to the project. (I'll cover security in the *Security
    and identity* chapter.)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从`mvc`模板创建一个新项目，并向项目添加一些额外的身份验证和安全位。 （我将在*安全和身份*章节中介绍安全性。）
- en: 'The `-o AspNetCoreTodo` flag tells `dotnet new` to create a new directory called
    `AspNetCoreTodo` for all the output files. You''ll see quite a few files show
    up in this project directory. Once you `cd` into the new directory, all you have
    to do is run the project:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`-o AspNetCoreTodo`标志告诉`dotnet new`为所有输出文件创建一个名为`AspNetCoreTodo`的新目录。你会看到许多文件出现在这个项目目录中。一旦你`cd`进入新目录，你只需运行项目：'
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Instead of printing to the console and exiting, this program starts a web server
    and waits for requests on port 5000.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序不是打印到控制台然后退出，而是启动一个Web服务器，并在端口5000上等待请求。
- en: Open your web browser and navigate to `http://localhost:5000`. You'll see the
    default ASP.NET Core splash page, which means your project is working! When you're
    done, press Ctrl-C in the terminal window to stop the server.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的网络浏览器，导航到`http://localhost:5000`。你会看到默认的ASP.NET Core启动页面，这意味着你的项目正在运行！完成后，在终端窗口中按下Ctrl-C停止服务器。
- en: The parts of an ASP.NET Core project
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ASP.NET Core项目的各个部分
- en: 'The `dotnet new mvc` template generates a number of files and directories for
    you. Here are the most important things you get out of the box:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet new mvc`模板为你生成了许多文件和目录。以下是你可以立即获得的最重要的内容：'
- en: The **Program.cs** and **Startup.cs** files set up the web server and ASP.NET
    Core pipeline. The `Startup` class is where you can add middleware that handles
    and modifies incoming requests, and serves things like static content or error
    pages. It's also where you add your own services to the dependency injection container
    (more on this later).
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Program.cs**和**Startup.cs**文件设置了Web服务器和ASP.NET Core管道。`Startup`类是你可以添加中间件处理和修改传入请求，并提供静态内容或错误页面的地方。这也是你向依赖注入容器添加自己的服务的地方（稍后会详细介绍）。'
- en: The **Models**, **Views**, and **Controllers** directories contain the components
    of the Model-View-Controller (MVC) architecture. You'll explore all three in the
    next chapter.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Models**、**Views**和**Controllers**目录包含了Model-View-Controller（MVC）架构的组件。在下一章节中你将探索这三个组件。'
- en: The **wwwroot** directory contains static assets like CSS, JavaScript, and image
    files. By default, the bower tool is used to manage CSS and JavaScript packages,
    but you can use whatever package manager you prefer (npm and yarn are popular
    choices). Files in `wwwroot` will be served as static content, and can be bundled
    and minified automatically.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**wwwroot**目录包含静态资产，如CSS、JavaScript和图像文件。默认情况下，使用bower工具来管理CSS和JavaScript包，但你可以使用你喜欢的任何包管理器（npm和yarn是流行的选择）。`wwwroot`中的文件将作为静态内容提供，并可以自动捆绑和缩小。'
- en: The **appsettings.json** file contains configuration settings ASP.NET Core will
    load on startup. You can use this to store database connection strings or other
    things that you don't want to hard-code.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**appsettings.json**文件包含了ASP.NET Core在启动时加载的配置设置。你可以使用它来存储数据库连接字符串或其他不希望硬编码的内容。'
- en: Tips for Visual Studio Code
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Visual Studio Code提示
- en: 'If you''re using Visual Studio Code (or Visual Studio) for the first time,
    here are a couple of helpful tips to get you started:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你第一次使用Visual Studio Code（或Visual Studio），以下是一些帮助你入门的有用提示：
- en: '**F5 to run (and debug breakpoints)**: With your project open, press F5 to
    run the project in debug mode. This is the same as `dotnet run` on the command
    line, but you have the benefit of setting breakpoints in your code by clicking
    on the left margin:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按下F5运行（并调试断点）**：打开你的项目后，按下F5以调试模式运行项目。这与命令行中的`dotnet run`相同，但你可以通过点击左边缘设置断点来在代码中设置断点：'
- en: '![Breakpoint in Visual Studio Code](breakpoint.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Visual Studio Code中的断点](breakpoint.png)'
- en: '**Lightbulb to fix problems**: If your code contains red squiggles (compiler
    errors), put your cursor on the code that''s red and look for the lightbulb icon
    on the left margin. The lightbulb menu will suggest common fixes, like adding
    a missing `using` statement to your code:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灯泡修复问题**：如果您的代码包含红色波浪线（编译器错误），请将光标放在红色的代码上，并查找左边缘的灯泡图标。灯泡菜单将提供常见的修复建议，比如在您的代码中添加一个缺失的`using`语句：'
- en: '![Lightbulb suggestions](lightbulb.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![灯泡建议](lightbulb.png)'
- en: '**Compile quickly**: Use the shortcut `Command-Shift-B` or `Control-Shift-B`
    to run the Build task, which does the same thing as `dotnet build`.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速编译**：使用快捷键`Command-Shift-B`或`Control-Shift-B`运行生成任务，这与`dotnet build`做的事情相同。'
- en: A note about Git
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有关 Git 的一点说明
- en: If you use Git or GitHub to manage your source code, now is a good time to do
    `git init` and initialize a Git repository in the project directory. Make sure
    you add a `.gitignore` file that ignores the `bin` and `obj` directories. The
    Visual Studio template on GitHub's gitignore template repo ([https://github.com/github/gitignore](https://github.com/github/gitignore))
    works great.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 Git 或 GitHub 管理源代码，现在是执行`git init`并在项目目录中初始化 Git 存储库的好时机。确保添加一个`.gitignore`文件，忽略`bin`和`obj`目录。GitHub
    的 gitignore 模板仓库上的 Visual Studio 模板（[https://github.com/github/gitignore](https://github.com/github/gitignore)）非常适用。
- en: There's plenty more to explore, so let's dive in and start building an application!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多内容等待探索，所以让我们开始构建一个应用程序吧！
