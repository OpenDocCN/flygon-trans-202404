- en: Control Measures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制措施
- en: If, Elif, Else
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: If、Elif、Else
- en: Conditional statements are formed using if, elif, and else statements. An if
    statement is composed of a predicate and a body that is executed if the predicate
    is satisfied. Elif is shorthand for “else if” and is used for any additional conditions
    beyond the first if statement. An elif statement has a similar construction as
    an if statement. The else statement follows all if and elif statement as is triggered
    when none of the conditional statements prior are fulfilled.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句使用if、elif和else语句形成。if语句由谓词和一个在谓词满足时执行的主体组成。Elif是“else if”的缩写，用于第一个if语句之外的任何其他条件。elif语句的构造与if语句类似。else语句跟随所有if和elif语句，当之前的所有条件语句都不满足时触发。
- en: If, elif, and else use indentation and colons to block the code appropriately.
    When you’re done, you’ll need a empty line with a matching indentation as the
    first line to close the conditional when you are inputting directly into the interpreter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: If、elif和else使用缩进和冒号适当地阻止代码。完成后，您需要一个空行，与第一行具有相同的缩进，以关闭条件语句，当您直接输入到解释器时。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Line 1: (0 space indentation) The if condition'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第1行：（0个空格缩进）if条件
- en: 'Line 2: (3 space indentation) The if body'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第2行：（3个空格缩进）if主体
- en: 'Line 3: (0 space indentation) The else if condition'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第3行：（0个空格缩进）else if条件
- en: 'Line 4: (3 space indentation) The else if body'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第4行：（3个空格缩进）else if主体
- en: 'Line 5: (0 space indentation) The else'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第5行：（0个空格缩进）else
- en: 'Line 6: (3 space indentation) The else body'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第6行：（3个空格缩进）else主体
- en: 'Line 7: (0 space indentation) Empty Line closes the if block and invokes evaluation'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第7行：（0个空格缩进）空行关闭if块并调用评估
- en: 'Line 8: 4 is returned (the if case is skipped, the elif case is triggered,
    never reaches the else case)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第8行：返回4（跳过if情况，触发elif情况，永远不会到达else情况）
- en: Note that no return statement is used. That is because the conditional statement
    is outside of a procedure definition. Inside of a function body, you would expect
    “return 3” instead of “3” and so on, if that were the desired return value.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，没有使用返回语句。这是因为条件语句在过程定义之外。在函数体内，您期望“return 3”而不是“3”等等，如果这是期望的返回值。
- en: '**Homework Problem 3: Fizz Buzz**'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**作业问题3：Fizz Buzz**'
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a program that prints the integers from 1 to n (n is an argument to the
    procedure). But for multiples of three print "Fizz" instead of the number, and
    for the multiples of five print "Buzz". For numbers which are multiples of both
    three and five print "FizzBuzz".
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编写一个程序，打印从1到n的整数（n是程序的参数）。但是对于三的倍数，打印“Fizz”而不是数字，对于五的倍数，打印“Buzz”。对于既是三的倍数又是五的倍数的数字，打印“FizzBuzz”。
- en: Loops and Range
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环和范围
- en: In python, loops are supported. Loop execute a block or line of code multiple
    times. Loops are useful for when you would like to progress through a sequence
    or repeat an operation---use a loop to iterate, instead of recursion. `for` loops
    control the number of iterations to correspond with the entries of a sequence
    to iterate over. `while` loops control the number of iterations with a predicate.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在python中，支持循环。循环多次执行一个代码块或一行代码。循环对于希望通过一个序列或重复一个操作的情况非常有用---使用循环进行迭代，而不是递归。`for`循环控制迭代次数以对应要迭代的序列的条目。`while`循环通过谓词控制迭代次数。
- en: Certain control statements can be invoked within loops to stop and break out
    of the loop or to skip to the next iteration. `break` does the former and `continue`
    does the latter action. Consult online resources if you need an example of their
    use.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环中可以调用某些控制语句来停止并跳出循环，或者跳到下一个迭代。`break`执行前者，`continue`执行后者。如果需要示例，请查阅在线资源。
- en: While loops
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: While循环
- en: While loops contain a predicate which is checked before the start of every iteration.
    If the predicate is not satisfied, the while loop stops. A while block uses a
    colon and indentation to indicate which line is the header and which are in the
    body
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: While循环包含一个谓词，在每次迭代开始之前检查。如果谓词不满足，则while循环停止。while块使用冒号和缩进来指示哪一行是头部，哪些是主体
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Line 1: set up a variable x equals to zero'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第1行：设置一个变量x等于零
- en: 'Line 2: (0 spaces) While header with condition of x being less than 3'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第2行：（0个空格）带有x小于3的条件的While头部
- en: 'Line 3: (3 spaces) While body line calls print'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第3行：（3个空格）While主体行调用打印
- en: 'Line 4: (3 spaces) While body line increments x by 1 (x += 1 is the same as
    x = x + 1)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第4行：（3个空格）While主体行将x增加1（x += 1与x = x + 1相同）
- en: 'Line 5: (0 spaces) Empty line closes While block and the block is evaluated'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第5行：（0个空格）空行关闭While块并评估该块
- en: 'Line 6: hello is printed (for x = 0)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第6行：当x = 0时打印hello。
- en: 'Line 7: hello is printed (for x = 1)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第7行：当x = 1时打印hello。
- en: 'Line 8: hello is printed (for x = 2)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第8行：当x = 2时打印hello。
- en: 'Line 9: check the value of x'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第9行：检查x的值。
- en: 'Line 10: 3 is returned for the value of x (which is NOT less than 3)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第10行：返回x的值为3（这不是小于3）
- en: '**Homework Problem 4: Snow White and the Seven Dwarves**'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**作业问题4：白雪公主和七个小矮人**'
- en: ''
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a program called `snow_white` that takes in two numbers as arguments,
    the first is the `num_chants`, the second is the `max_sing`.
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编写一个名为`snow_white`的程序，它接受两个数字作为参数，第一个是`num_chants`，第二个是`max_sing`。
- en: ''
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The program:'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 该程序：
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: prints "heigh" "ho" alternatingly
  id: totrans-39
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交替打印"heigh"和"ho"。
- en: prints "its off to work we go" after `num_chants` of "heigh" or "ho"
  id: totrans-40
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每唱完`num_chants`次"heigh"或者"ho"后，打印"its off to work we go"。
- en: stops printing after having "it's off to work we go" `max_sing` times
  id: totrans-41
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在唱了"it's off to work we go" `max_sing`次后停止打印。
- en: ''
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'EXAMPLE: should print "it''s off to work we go" between every `5` alternating
    "hi"s and "ho"s, for a maximum of `2` times.'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 例子：每唱完`5`次交替出现的"hi"和"ho"之间打印"it's off to work we go"，最多`2`次。
- en: ''
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use a while loop (and possibly control statements) to accomplish this behavior.
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用while循环（可能还有控制语句）来实现此行为。
- en: ''
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Homework Problem 5: Push First Odd Back (taken from CS10)**'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**作业问题5：将第一个奇数推后（来自CS10）**'
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Write a function called `push_first_odd_back` that takes in a list as an argument
    This function should place the first odd number at the back of the input list.
    Do not return a new list - in fact this function shouldn''t return anything, it
    should only modify the input list. (Hint: use the while loop)'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 写一个名为`push_first_odd_back`的函数，它以列表作为参数。该函数应该将第一个奇数放到输入列表的末尾。不要返回新列表 - 实际上，这个函数不应该返回任何东西，它只应该修改输入列表。（提示：使用while循环）
- en: For Loops
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于循环
- en: For loops contain a variable and a sequence (more on this later). With each
    iteration, the value of the variable changes to the next value in the sequence.
    As with other multiple line blocks, for loops are delimited by colons and indentation
    and are completed with an empty line. Within the body of the for loop, you can
    access the value of the variable being iterated over.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: For循环包含一个变量和一个序列（稍后详细介绍）。每次迭代时，变量的值都会更改为序列中的下一个值。与其他多行块一样，for循环由冒号和缩进限定，并在空行处完成。在for循环的主体中，您可以访问被迭代的变量的值。
- en: The `range` function creates a progression of numbers which can then be used
    in a `for` loop for control. Range takes in a start, end, and increment to create
    a sequence that includes the start and incremental entries up to, but excluding
    the end. Range will default start to zero and increment to one if not provided.
    For now, only use `range` in the context of a `for` loop, later in the lesson
    we'll go in depth on how `range` works.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`range`函数创建一个数字序列，然后可以在`for`循环中用于控制。Range接受一个开始、结束和增量，以创建一个包含开始和增量条目的序列，但不包括结束。如果没有提供，range将默认开始为零，增量为一。现在，只在`for`循环的上下文中使用`range`，在后面的课程中，我们将深入探讨`range`的工作原理。'
- en: 'TIP: if you want x iterations and don''t actually plan on using the iteration
    variable, use `range(x)`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '提示：如果你想要x次迭代并且实际上不打算使用迭代变量，可以使用`range(x)`。 '
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can also use a string or a list in the place of range as a sequence to iterate
    over
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在range的位置使用字符串或列表作为要迭代的序列。
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Homework Problem 6: Cats and Dogs**'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**作业问题6：猫和狗**'
- en: ''
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a program that return True if the string "cat" and "dog" appear the same
    number of times in the given string.
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编写一个程序，如果字符串中的"cat"和"dog"出现的次数相同，则返回True。
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
