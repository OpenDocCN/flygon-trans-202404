- en: Incremental testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增量测试
- en: When you write a program, it is tempting to write the whole program, and then
    start debugging it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当你写程序时，很容易写完整个程序，然后开始调试它。
- en: In general, this is very bad strategy. It is much more effective to test every
    function immediately after you have written it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，这是非常糟糕的策略。最好在编写每个函数后立即测试每个函数。
- en: Continue working on the next function only after the first one works correctly.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 只有第一个函数正确工作后，才继续处理下一个函数。
- en: 'In Kotlin, we can test functions interactively using the interactive mode.
    We use the :load command inside the interactive mode. The same command allows
    us to reload our code after we have made changes to it:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kotlin 中，我们可以使用交互模式来交互式测试函数。我们在交互模式中使用 :load 命令。同样的命令允许我们在对代码进行更改后重新加载它：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A worked out example: the Collatz problem'
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一个完整的例子：科拉茨问题
- en: Let's practice incremental testing on an example, the so-called Collatz problem.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个例子，所谓的科拉茨问题，来练习增量测试。
- en: 'Consider a sequence of integers following the rule:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑遵循以下规则的整数序列：
- en: \[ n_{i+1} = \left\{ \begin{array}{ll} 3n_i + 1 & \text{if $n_i$ is odd}\\ n_i/2
    & \text{if $n_i$ is even} \end{array} \right. \]
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: \[ n_{i+1} = \left\{ \begin{array}{ll} 3n_i + 1 & \text{如果 $n_i$ 是奇数}\\ n_i/2
    & \text{如果 $n_i$ 是偶数} \end{array} \right. \]
- en: 'If you provide a starting value \(n_0\), this determines an entire sequence.
    Here are a few examples, with starting values 5, 34, 7, and 672:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供一个起始值 \(n_0\)，这将确定一个完整的序列。以下是一些示例，起始值为 5、34、7 和 672：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can notice that all four example sequences reach the number 1 (and then
    of course the sequence starts cycling: 1 4 2 1 4 2 1 4 2 1...).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以注意到所有四个示例序列都达到了数字 1（然后当然序列开始循环：1 4 2 1 4 2 1 4 2 1...）。
- en: 'It is conjectured that this is always true: for any starting value, the sequence
    arrives at 1.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有人猜测这总是成立：对于任何起始值，序列都会到达 1。
- en: We want to do some experiments with this conjecture, for instance to determine
    experimentally which starting value gives long chains. So we want to write functions
    that, given the starting value, can print out the entire sequence, and can print
    the number of steps until 1 is reached.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想对这个猜想进行一些实验，例如实验性地确定哪个起始值给出了长链。因此，我们希望编写函数，给定起始值后，可以打印出整个序列，并可以打印出达到 1 之前的步数。
- en: 'Let''s start with the basic function: Given \(n_i\), compute the next number
    \(n_{i+1}\). I create a file [collatz.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/07-collatz/collatz1.kts)
    with the following contents:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从基本函数开始：给定 \(n_i\)，计算下一个数字 \(n_{i+1}\)。我创建了一个文件 [collatz.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/07-collatz/collatz1.kts)，内容如下：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We test this function by loading the file and checking that it correctly handles
    both the even and the odd case:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过加载文件并检查它是否正确处理奇偶情况来测试此函数：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The functions seems to work, so the next step is to write a function that prints
    the entire sequence starting from a given starting value. We add the function
    collatz to our file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来函数工作正常，所以下一步是编写一个函数，从给定的起始值开始打印整个序列。我们将函数 collatz 添加到我们的文件中：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'I reload the file and test it on an example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我重新加载文件并在一个例子上进行测试：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And already I notice my mistake: the loop doesn''t print the final 1. So I
    change my function as follows ([collatz.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/07-collatz/collatz2.kts)):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我注意到我的错误：循环没有打印最终的 1。所以我把我的函数改成了如下形式（[collatz.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/07-collatz/collatz2.kts)）：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And I can continue testing by reloading the file and trying again:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我可以继续通过重新加载文件并重试来进行测试：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now it seems to work well.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来工作得很好。
- en: 'The next function will count the number of steps done from a given starting
    value until we reach 1:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个函数将计算从给定的起始值开始到达 1 所经历的步骤数：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'I test this by comparing the result with the output of collatz:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过将结果与 collatz 的输出进行比较来测试这一点：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, I''ll write a function that tries all starting values between 2 and
    a given maximum \(n\), and reports the starting value with the longest sequence
    ([collatz3.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/07-collatz/collatz3.kts)):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我将编写一个函数，它尝试所有从 2 到给定最大值 \(n\) 之间的起始值，并报告具有最长序列的起始值（[collatz3.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/07-collatz/collatz3.kts)）：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the result of testing this function:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是测试此函数的结果：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Unit testing
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单元测试
- en: For a large program, it is common to write a separate test program for every
    function or class. These test programs are called unit tests.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大型程序，通常为每个函数或类编写一个单独的测试程序是很常见的。这些测试程序称为单元测试。
- en: Some programmers even write the tests before the code!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有些程序员甚至在编写代码之前就编写测试！
- en: The unit tests remain useful even when the program is finished. All software
    needs to be maintained. Whenever a change is made to the software, we can run
    the unit tests again to get confidence that we didn’t break anything.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 即使程序完成后，单元测试仍然很有用。所有软件都需要维护。每当对软件进行更改时，我们可以再次运行单元测试，以确保我们没有破坏任何东西。
- en: On many software projects, unit tests are automated and run every night, to
    ensure that the changes made during the day didn’t create any new bugs.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多软件项目中，单元测试是自动化的，并且每晚运行，以确保白天进行的更改没有引入任何新的错误。
- en: We will not ask you to write unit tests in CS109, but you should get in the
    habit of testing your functions. Often you can test by hand, interactively. But
    when you need more than two or three lines of code to test a function, it makes
    sense to write extra testing functions. Keep those in your code, so that you can
    use them again later to check your program when you have made changes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会要求您在CS109中编写单元测试，但您应该养成测试函数的习惯。通常可以通过手动交互式测试。但是，当您需要超过两三行代码来测试一个函数时，编写额外的测试函数是有意义的。将它们保留在您的代码中，这样以后在进行更改时可以再次使用它们来检查您的程序。
