- en: Homework 7
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业 7
- en: 'Type the following into the terminal to copy the template file to the current
    directory (note the period at the end):'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中键入以下内容将模板文件复制到当前目录（注意末尾的句点）：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Or you can download it from [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw7.scm).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以从[这里](http://inst.eecs.berkeley.edu/~cs61as/templates/hw7.scm)下载。
- en: Exercise 1
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1
- en: 'Modify the `person` class given in the template to add a `repeat` method, which
    repeats the last thing said. For example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 修改模板中给出的 `person` 类，添加一个 `repeat` 方法，用于重复上次说的话。例如：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Exercise 2
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2
- en: This exercise introduces you to `usual`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习让你了解 `usual`。
- en: Suppose that we want to define a class called `double-talker` to represent people
    that always say things twice. For example, take a look at the following dialog.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想定义一个名为 `double-talker` 的类来代表总是说两遍话的人。例如，看看以下对话。
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Consider the following three definitions for the double-talker class:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下三个对于 `double-talker` 类的定义：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Determine which of these definitions work as intended. Determine also for which
    messages the three versions would respond differently.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 确定这些定义中哪些是按预期工作的。还确定三个版本对哪些消息会有不同的响应。
- en: Exercise 3
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3
- en: 'For a statistical project you need to compute lots of random numbers in various
    ranges. (Recall that `(random 10)` returns a random number between 0 and 9.) Also,
    you need to keep track of how many random numbers are computed in each range.
    You decide to use object-oriented programming. Objects of the class random-generator
    will accept two messages: `number` and `count`. The message `number` means "give
    me a random number in your range" while `count` means "how many number requests
    have you had?" The class has an instantiation argument that specifies the range
    of random numbers for this object, so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个统计项目，你需要计算各种范围内的大量随机数。（回想一下，`(random 10)` 返回 0 到 9 之间的随机数。）此外，你需要跟踪每个范围内计算的随机数数量。你决定使用面向对象编程。`random-generator`
    类的对象将接受两个消息：`number` 和 `count`。`number` 消息意味着“给我一个你范围内的随机数”，而 `count` 意味着“你已经请求了多少个数字？”该类有一个实例化参数，指定此对象的随机数范围，因此：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: will create an object such that `(ask r10 'number)` will return a random number
    between 0 and 9, while `(ask r10 'count)` will return the number of random numbers
    `r10` has created.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建一个对象，使得 `(ask r10 'number)` 将返回 0 到 9 之间的随机数，而 `(ask r10 'count)` 将返回 `r10`
    创建的随机数数量。
- en: Exercise 4
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4
- en: Define the class `coke-machine`. The instantiation arguments for a `coke-machine`
    are the number of Cokes that can fit in the machine and the price (in cents) of
    a Coke. For example,
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 `coke-machine` 类。`coke-machine` 的实例化参数是机器中可以容纳的可乐数量和可乐的价格（以分为单位）。例如，
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'creates a machine that can hold 80 Cokes and sells them for 70 cents each.
    `coke-machine` objects must accept the following messages:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个可以容纳 80 瓶可乐并以每瓶 70 分的价格出售的机器。`coke-machine` 对象必须接受以下消息：
- en: '`(ask my-machine ''deposit 25)` means deposit 25 cents. You can deposit several
    coins and the machine should remember the total.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(ask my-machine ''deposit 25)` 意味着存入 25 分。你可以存入多枚硬币，机器应该记住总额。'
- en: '`(ask my-machine ''coke)` means push the button for a Coke. The machine then
    either 1) prints "Not enough money", 2) prints "Machine empty", or 3) returns
    the amount of change you get. The error messages should be printed using `display`
    (for example, `(display "Machine empty")`). (After a successful transaction, no
    money is left in the machine; i.e., change does not stay in the machine.)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(ask my-machine ''coke)` 意味着按下可乐按钮。然后机器会打印出 1) "Not enough money"，2) "Machine
    empty"，或者 3) 返回找零的金额。错误信息应该使用 `display` 打印（例如，`(display "Machine empty")`）。（成功交易后，机器内不会留下任何钱；即找零不会留在机器内。）'
- en: '`(ask my-machine ''fill 60)` means add 60 Cokes to the machine.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(ask my-machine ''fill 60)` 意味着向机器中添加 60 瓶可乐。'
- en: 'Here''s an example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You may assume that a Coke machine has an infinite supply of change and initially
    contains zero Cokes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以假设可乐机有无限的找零，并且最初不含任何可乐。
- en: Exercise 5
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 5
- en: 'We are going to use objects to represent decks of cards. You are given the
    list `ordered-deck` containing 52 cards in standard order:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用对象来表示一副牌。你将获得包含标准顺序中的 52 张牌的列表 `ordered-deck`：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You are also given a function to shuffle the elements of a list:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你还得到一个用于打乱列表元素的函数：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A `deck` object responds to two messages: `deal` and `empty?`. It responds
    to `deal` by returning the top card of the deck, after removing that card from
    the deck; if the deck is empty, it responds to `deal` by returning `()`. It responds
    to `empty?` by returning `#t` or `#f`, according to whether all cards have been
    dealt. Write a class definition for `deck`. When instantiated, a `deck` object
    should contain a shuffled deck of 52 cards.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`deck`对象响应两个消息：`deal`和`empty?`。它通过从牌堆中移除顶部的牌来响应`deal`，如果牌堆为空，它通过返回`()`来响应`deal`。它通过返回`#t`或`#f`来响应`empty?`，根据是否所有牌都已发出。为`deck`编写一个类定义。当实例化时，一个`deck`对象应该包含一个洗过的
    52 张牌的牌堆。
- en: Exercise 6
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 6
- en: We want to promote politeness among our objects. Write a class `miss-manners`
    that takes an object as its instantiation argument. The new `miss-manners` object
    should accept only one message, namely `please`. The arguments to the `please`
    message should be, first, a message understood by the original object, and second,
    an argument to that message. **(Assume that all messages to the original object
    require exactly one additional argument.)**
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在我们的对象之间促进礼貌。编写一个类`miss-manners`，它以一个对象作为其实例化参数。新的`miss-manners`对象应该只接受一个消息，即`please`。`please`消息的参数应该是，首先，原始对象理解的消息，其次，该消息的参数。**(假设对原始对象的所有消息都需要额外一个参数。)**
- en: 'Here is an example using the person class from the upcoming adventure game
    project:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用即将推出的冒险游戏项目中的人物类的示例：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Extra for Experts
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专家专用
- en: Do these if you want an extra challenge. These are *not* for credit.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想挑战一下，可以做这些。这些*不*计入学分。
- en: Exercise 7
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 7
- en: The technique of multiple inheritance is described on pages 9 and 10 of ["Object-Oriented
    Programming - Above-the-line view"](http://www-inst.eecs.berkeley.edu/~cs61as/reader/aboveline.pdf).
    That section discusses the problem of resolving ambiguous patterns of inheritance,
    and mentions in particular that it might be better to choose a method inherited
    directly from a second-choice parent over one inherited from a first-choice grandparent.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 多重继承技术在["面向对象编程 - 上线视图"](http://www-inst.eecs.berkeley.edu/~cs61as/reader/aboveline.pdf)的第
    9 和 10 页有描述。该部分讨论了解决继承模式的模糊问题，并特别提到，从第二选择父类直接继承的方法可能比从第一选择祖父类继承的方法更好。
- en: Devise an example of such a situation. Describe the inheritance hierarchy of
    your example, listing the methods that each class provides. Also describe why
    it would be more appropriate in this example for an object to inherit a given
    method from its second-choice parent rather than its first-choice grandparent.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个这样的情况的例子。描述你的例子的继承层次结构，列出每个类提供的方法。还描述为什么在这个例子中，对象从第二选择父类继承一个给定方法而不是从第一选择祖父类继承更为合适。
- en: Submit Your Homework!
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交你的作业！
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有关说明，请参阅[此指南](../submit.html)。它涵盖了基本的终端命令和作业提交。
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在提交作业时遇到任何问题，请不要犹豫向助教求助！
