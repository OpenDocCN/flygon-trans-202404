- en: 'Lecture 5: Polymorphism and Pattern Matching'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五讲：多态性和模式匹配
- en: Variant types
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变体类型
- en: Lists are very useful, but it turns out they are not really as special as they
    look. We can implement our own lists, and other more interesting data structures,
    such as binary trees.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 列表非常有用，但事实证明它们并不像看起来那么特殊。我们可以实现我们自己的列表，以及其他更有趣的数据结构，例如二叉树。
- en: 'We have already seen some simple examples of **variant types** sometimes known
    as **algebraic datatypes** or just **datatypes**. Variant types provide some needed
    power: the ability to have a variable that contains more than one kind of value.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了一些简单的**变体类型**的示例，有时被称为**代数数据类型**或简称为**数据类型**。变体类型提供了一些必要的功能：能够有一个变量包含多种类型的值。
- en: 'Unlike tuple types and function types, but like record types, variant types
    cannot be anonymous; they must be declared with their names. Suppose we wanted
    to have a variable that could contain one of three values: Yes, No, or Maybe,
    very much like an `enum` in Java. Its type could be declared as a variant type:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与元组类型和函数类型不同，但与记录类型相同，变体类型不能是匿名的；它们必须用它们的名称声明。假设我们想要一个变量，它可以包含三个值之一：Yes、No 或
    Maybe，非常类似于 Java 中的 `enum`。其类型可以声明为一个变体类型：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `type` keyword declares a name for the new type.  The variant type is declared
    with a set of **constructors** that describe the possible ways to make a value
    of that type. In this case, we have three constructors: `Yes`, `No`, and `Maybe`.
    Constructor names must start with an uppercase letter, and all other names in
    OCaml must start with a lowercase letter.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`type` 关键字声明了新类型的名称。变体类型是用一组**构造函数**声明的，描述了创建该类型值的可能方法。在这种情况下，我们有三个构造函数：`Yes`、`No`
    和 `Maybe`。构造函数名称必须以大写字母开头，而 OCaml 中的所有其他名称必须以小写字母开头。'
- en: 'The different constructors can also carry other values with them. For example,
    suppose we want a type that can either be a 2D point or a 3D point. It can be
    declared as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的构造函数也可以携带其他值。例如，假设我们想要一个类型，它可以是 2D 点或 3D 点。它可以声明如下：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Some examples of values of type `eitherPoint` are: `TwoD (2.1, 3.0)` and `ThreeD
    (1.0, 0.0, -1.0)`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 类型 `eitherPoint` 的一些值的示例包括：`TwoD (2.1, 3.0)` 和 `ThreeD (1.0, 0.0, -1.0)`。
- en: 'Suppose we have a value of type `eitherPoint`, which is either a `TwoD` of
    something or `ThreeD` of something. We need a way to extract the "something".
    This can be done with pattern matching. Example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个类型为 `eitherPoint` 的值，它可以是某个值的 `TwoD` 或 `ThreeD`。我们需要一种方法来提取“某个值”。这可以通过模式匹配来实现。例如：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Variant type syntax
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变体类型语法
- en: 'We use *X* as a metavariable to represent the name of a constructor, and *T*
    to represent the name of a type. Optional syntactic elements are indicated by
    brackets [ ]. Then a variant type declaration looks like this in general:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 *X* 作为元变量来表示构造函数的名称，*T* 来表示类型的名称。方括号 [ ] 表示可选的语法元素。然后，变体类型声明的一般形式如下所示：
- en: '`type`*T* = *X*[1][`of` *t*[1]] | ... | *X[n]* [`of` *t**[n]*]'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`type`*T* = *X*[1][`of` *t*[1]] | ... | *X[n]* [`of` *t**[n]*]'
- en: 'Variant types introduce new syntax for terms *e*, patterns *p*, and values
    *v*:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 变体类型引入了术语 *e*、模式 *p* 和值 *v* 的新语法：
- en: '*e* ::= ... |  *X e* |  `match`* e *`with `*p*[1] `->` *e*[1]| ... | *p[n]*
    `->` *e[n]**p* ::=  *X  *|  *X*`(`*x*[1] : *t*[1], ...,  *x[n]* : *t[n]*`)`'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*e* ::= ... |  *X e* |  `match`* e *`with `*p*[1] `->` *e*[1]| ... | *p[n]*
    `->` *e[n]**p* ::=  *X  *|  *X*`(`*x*[1] : *t*[1], ...,  *x[n]* : *t[n]*`)`'
- en: '*v* ::= *c* | (*v*[1], ..., *v[n]*) | `fun` *p* `->` *e* | *X v*'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*v* ::= *c* | (*v*[1], ..., *v[n]*) | `fun` *p* `->` *e* | *X v*'
- en: Note that the vertical bars in the expression "`match`* e *`with `*p*[1] `->`
    *e*[1 ]| ... | *p[n]* `->` *e[n]*" are part the syntax of this construct; the
    other vertical bars (|) are part of the BNF notation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意表达式 "`match`* e *`with `*p*[1] `->` *e*[1 ]| ... | *p[n]* `->` *e[n]*" 中的竖线是该结构的语法的一部分；其他竖线
    (|) 是 BNF 符号的一部分。
- en: We can use variant types to define many useful data structures.  In fact, the
    `bool` is really just a variant type with constructors named `true` and `false`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用变体类型来定义许多有用的数据结构。事实上，`bool` 实际上只是一个具有名称为 `true` 和 `false` 的构造函数的变体类型。
- en: Implementing integer lists
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现整数列表
- en: 'We can write our own version of lists using variant types. Suppose we want
    to define values that act like linked lists of integers. A linked list is either
    empty, or it has an integer followed by another list containing the rest of the
    list elements. This leads to a very natural variant type declaration:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用变体类型编写我们自己的列表版本。假设我们想要定义表现为整数链表的值。链表要么为空，要么有一个整数，后面跟着包含其余列表元素的另一个列表。这导致一个非常自然的变体类型声明：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This type has two constructors, `Nil` and `Cons`. It is a **recursive type**
    because it mentions itself in its own definition (in the `Cons` constructor),
    just like a recursive function is one that mentions itself in its own definition.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型有两个构造函数，`Nil`和`Cons`。它是一个**递归类型**，因为它在自己的定义中（在`Cons`构造函数中）提到了自己，就像递归函数是在自己的定义中提到了自己一样。
- en: 'Any list of integers can be represented by using this type. For example, the
    empty list is just the constructor `Nil`, and `Cons` corresponds to the operator
    `::`. Here are some examples of lists:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 任何整数列表都可以用这种类型来表示。例如，空列表只是构造函数`Nil`，而`Cons`对应于操作符`::`。以下是一些列表的例子：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So we can construct any lists we want. We can also take them apart using pattern
    matching. For example, our `length` function above can be written for `intlist`s
    by just translating the list patterns into the corresponding patterns using constructors. 
    Similarly, we can implement many other functions over lists, as shown in the following
    examples.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以构造任意我们想要的列表。我们也可以使用模式匹配来拆解它们。例如，我们上面的`length`函数可以通过将列表模式转换为相应的使用构造函数的模式来为`intlist`编写。同样，我们可以实现许多其他对列表的函数，如下面的例子所示。
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Representing trees with a recursive type
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用递归类型表示树
- en: Trees are another very useful data structure. Unlike lists, they are not built
    into OCaml. A binary tree is either
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 树是另一种非常有用的数据结构。与列表不同，它们不是内置到OCaml中的。二叉树要么是
- en: the empty tree (no children), or
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空树（没有子节点），或者
- en: a node containing a value and two children that are binary trees.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含一个值和两个子树（二叉树）的节点。
- en: 'Just for variety, let''s use a record type to represent a tree node. In OCaml
    we have to define two mutually recursive types, one to represent a tree node,
    and one to represent a (possibly empty) tree:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了变化一下，让我们使用记录类型来表示树节点。在OCaml中，我们必须定义两种相互递归的类型，一个用于表示树节点，另一个用于表示（可能为空的）树：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The rule for when mutually recursive type declarations are legal is a little
    tricky. Essentially, any cycle of recursive types must include at least one record
    or variant type. Since the cycle between `inttree` and `node` includes both kinds
    of types, this declaration is legal.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 相互递归类型声明何时合法的规则有点棘手。基本上，任何递归类型的循环必须包含至少一个记录类型或变体类型。由于`inttree`和`node`之间的循环包括两种类型，因此此声明是合法的。
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Because there are several things stored in a tree node, it's helpful to use
    a record rather than a tuple to keep them all straight. But a tuple would also
    have worked.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因为树节点中存储了几个东西，使用记录而不是元组来保持它们的清晰是有帮助的。但元组也可以工作。
- en: 'We can use pattern matching to write the usual algorithms for recursively traversing
    trees. For example, here is a recursive search over the tree:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用模式匹配来编写通常用于递归遍历树的算法。例如，这是一个对树的递归搜索：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Of course, if we knew the tree obeyed the binary search tree invariant, we could
    have written a more efficient algorithm.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果我们知道树遵循二叉搜索树的不变性，我们可以编写一个更有效的算法。
- en: Representing natural numbers with a recursive type
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用递归类型表示自然数
- en: 'We can even define data structures that act like numbers, demonstrating that
    we don''t really have to have numbers built into OCaml either! A natural number
    is either the value zero or the *successor* of some other natural number. This
    definition leads naturally to the following definition for values that act like
    natural numbers `nat`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以定义像数字一样的数据结构，证明我们也不一定需要将数字内置到OCaml中！自然数要么是值为零，要么是另一个自然数的*后继*。这个定义自然地导致了对行为像自然数的值`nat`的以下定义：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is how you might define the natural numbers in a mathematical logic course.
    We have defined a new type `nat`, and `Zero` and `Next` are constructors for values
    of this type. The type `nat` is a **recursive type**, which allows us to build
    expressions that have an arbitrary number of nested `Next` constructors. Such
    values act like natural numbers:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你可能在数理逻辑课程中定义自然数的方式。我们定义了一个新类型`nat`，`Zero`和`Next`是此类型值的构造函数。类型`nat`是一个**递归类型**，它允许我们构建具有任意数量嵌套`Next`构造函数的表达式。这样的值表现得像自然数：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When we ask the interpreter what *four* represents, we get
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们询问解释器 *four* 代表什么时，我们得到
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The equivalent Java definitions would be
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的Java定义将是
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: And in fact the implementation is similar.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，实现是类似的。
- en: Now we can write functions to manipulate values of this type.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写操作此类型值的函数了。
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here we're pattern-matching a value with type `nat`. If the value is `Zero`
    we evaluate to `true`; otherwise we evaluate to `false`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在模式匹配具有类型 `nat` 的值。如果值是 `Zero`，我们会计算为 `true`；否则，我们会计算为 `false`。
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here we determine the predecessor of a number. If the value of `n` matches `Zero`
    then we raise an exception, since zero has no predecessor in the natural numbers.
    If the value matches `Next m` for some value `m` (which of course also must be
    of type `nat`), then we return `m`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们确定一个数字的前驱。如果 `n` 的值匹配 `Zero`，那么我们会引发一个异常，因为自然数中没有零的前驱。如果值匹配 `Next m`，其中
    `m` 的值也必须是 `nat` 类型，那么我们返回 `m`。
- en: 'Similarly we can define a function to add two numbers:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以定义一个函数来相加两个数字：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you were to try evaluating `add four four`, the interpreter would respond
    with:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试评估 `add four four`，解释器会回答：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: which is the `nat` representation of 8.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 8 的 `nat` 表示。
- en: 'To better understand the results of our computation, we would like to convert
    such values to type `int`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解我们计算的结果，我们希望将这些值转换为 `int` 类型：
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: That was pretty easy. Now we can write `toInt (add four four)` and get *8*.
    How about the inverse operation?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当容易。现在我们可以写 `toInt (add four four)` 并得到 *8*。逆操作呢？
- en: '[PRE18]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To determine whether a natural number is even or odd, we can write a pair of
    mutually recursive functions:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定一个自然数是偶数还是奇数，我们可以编写一对互相递归的函数：
- en: '[PRE19]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You have to use the keyword `and` to combine mutually recursive functions like
    this. Otherwise the compiler would give an error when you refer to `odd` before
    it has been defined.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须使用关键字 `and` 来组合这样的互相递归函数。否则，在引用尚未定义的 `odd` 时，编译器会报错。
- en: Finally we can define multiplication in terms of addition.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以根据加法来定义乘法。
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: which gives
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这给出了
- en: '[PRE21]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '* * *'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Pattern matching
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式匹配
- en: It turns out that the syntax of OCaml patterns is richer than what we saw in
    the last lecture. In addition to new kinds of terms for creating and projecting
    tuple and record values, and creating and examining variant type values, we also
    have the ability to match patterns against values to pull them apart into their
    parts.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示 OCaml 模式的语法比我们在上一堂课上看到的更丰富。除了用于创建和投影元组和记录值，创建和检查变体类型值的新术语外，我们还有能力将模式与值匹配，将其拆分为其部分。
- en: When used properly, pattern matching leads to concise, clear code.  This is
    because  OCaml pattern matching allows one pattern to appear as a subexpression
    of another pattern. For example, we see above that `Next n` is a pattern, but
    so is `Next (Next n)`. This second pattern matches only on a value that has the
    form `Next (Next` *v*`)` for some value *v* (that is, the successor of the successor
    of something), and binds the variable `n` to that something, *v*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正确的方式，模式匹配会导致简洁清晰的代码。这是因为 OCaml 模式匹配允许一个模式出现为另一个模式的子表达式。例如，我们在上面看到 `Next n`
    是一个模式，但 `Next (Next n)` 也是一个模式。这第二个模式仅匹配形式为 `Next (Next` *v*`)` 的值，其中 *v* 是某个值（也就是某个东西的后继的后继），并将变量
    `n` 绑定到该值。
- en: 'Similarly, in our implementation of the `nth` function, earlier, a neat trick
    is to use pattern matching to do the `if n = 0` and the `match` at the same time.
    We pattern-match on the tuple `(lst, n)`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在我们之前的 `nth` 函数的实现中，一个巧妙的技巧是使用模式匹配来同时执行 `if n = 0` 和 `match`。我们对元组 `(lst,
    n)` 进行模式匹配：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, we've also added a clause to catch the empty list and raise an exception.
    We're also using the wildcard pattern `_` to match on the `n` component of the
    tuple, because we don't need to bind the value of `n` to another variable—we already
    have `n`. We can make this code even shorter; can you see how?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们还添加了一个子句来捕获空列表并引发异常。我们还使用通配符模式 `_` 来匹配元组的 `n` 组件，因为我们不需要将 `n` 的值绑定到另一个变量上——我们已经有了
    `n`。我们可以让这段代码变得更短；你能看出来怎么做吗？
- en: 'Example: Pattern matching on records'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例：对记录进行模式匹配
- en: 'All natural numbers are nonnegative, but we can simulate integers in terms
    of the naturals by using a representation consisting of a sign and magnitude:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的自然数都是非负数，但我们可以通过使用由符号和幅度组成的表示来模拟整数的自然数：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here we''ve defined *integer* to refer to a record type with two fields: *sign*
    and *mag*. Remember that records are unordered, so there is no concept of a "first"
    field.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将*整数*定义为具有两个字段：*sign* 和 *mag* 的记录类型。请记住，记录是无序的，因此没有“第一个”字段的概念。
- en: The declarations of `sign` and `integer` both create new types.  However, it
    is possible to write type declarations that simply introduce a new name for an
    existing type. For example, if we wrote `type number = int`, then the types `number`
    and `int` could be used interchangeably.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`sign` 和 `integer` 的声明都创建了新类型。然而，可以编写类型声明，只是为现有类型引入新名称。例如，如果我们写了 `type number
    = int`，那么类型 `number` 和 `int` 可以互换使用。'
- en: 'We can use the definition of `integer` to write some integers:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`integer`的定义来写一些整数：
- en: '[PRE24]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now we can write a function to determine the successor of any integer:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写一个函数来确定任意整数的后继：
- en: '[PRE25]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here we're pattern-matching on a record type. Notice that in the third pattern
    we are doing pattern matching because the `mag` field is matched against a pattern
    itself, `Next n`. Remember that the patterns are tested in order. How does the
    meaning of this function change if the first two patterns are swapped?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在模式匹配记录类型。请注意，在第三个模式中，我们进行模式匹配，因为`mag`字段与一个模式本身匹配，`Next n`。请记住，模式是按顺序测试的。如果前两个模式被交换，这个函数的含义会发生什么变化？
- en: The predecessor function is very similar, and it should be obvious that we could
    write functions to add, subtract, and multiply integers in this representation.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 前驱函数非常相似，很明显我们可以编写函数来在这种表示中添加、减去和乘以整数。
- en: '* * *'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: OCaml syntax
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OCaml 语法
- en: Taking into account the ability to write complex patterns, we can now write
    down a more comprehensive syntax for OCaml.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到编写复杂模式的能力，我们现在可以为 OCaml 编写一个更全面的语法了。
- en: '| syntactic class | syntactic variables and grammar rule(s) | examples |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 语法类 | 语法变量和语法规则 | 示例 |'
- en: '| **identifiers** | *x*,  *y* | `a`, `x`, `y`, `x_y`, `foo1000`, ... |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| **标识符** | *x*,  *y* | `a`, `x`, `y`, `x_y`, `foo1000`, ... |'
- en: '| **datatypes, datatype constructors** | *X*, *Y* | `Nil`, `Cons`, `list` |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| **数据类型，数据类型构造函数** | *X*, *Y* | `Nil`, `Cons`, `list` |'
- en: '| **constants** | *c* | ...`~2`, `~1`, `0`, `1`, `2` (integers) `1.0`, `~0.001`,
    `3.141` (floats)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '| **常量** | *c* | ...`~2`, `~1`, `0`, `1`, `2`（整数） `1.0`, `~0.001`, `3.141`（浮点数）'
- en: '`true`, `false` (booleans)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`true`, `false`（布尔值）'
- en: '`"hello"`, `""`, `"!"` (strings)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`"hello"`, `""`, `"!"`（字符串）'
- en: '`#"A"`, `#" "` (characters) |'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`#"A"`, `#" "`（字符） |'
- en: '| **unary operator** | *u* | `~`, `not`, `size`, ... |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| **一元运算符** | *u* | `~`, `not`, `size`, ... |'
- en: '| **binary operators** | *b* | `+`, `*`, `-`, `>`, `<`, `>=`, `<=`, `^`, ...
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| **二进制运算符** | *b* | `+`, `*`, `-`, `>`, `<`, `>=`, `<=`, `^`, ... |'
- en: '| **expressions (terms)** | *e* ::-  *c * &#124; *x*  &#124;  *u e  &#124; 
    e*[1]* b e*[2] *&#124;*`if`* e*[1]`then`* e*[2] `else`* e*[3]*  &#124;  *`let` *d*[1]*...**d[n]*`in`*e*`end`  &#124;
     *e* `(`*e*[1]`,` ...`,` *e[n]*`)`  `&#124; (`*e*[1]`,`...`,`*e[n]*`)`  `&#124;
    #`*n e*  &#124;   `{`*x*[1]`=`*e*[1]`,` ...`,` *x[n]*`=`*e[n]*`}`  `&#124; #`*x
    e  *&#124;   *X*`(`*e*`)`  &#124;  `match`* e *`with `*p*[1]`->`*e*[1]&#124; ... &#124; *p[n]*`->`*e[n]*
    | `~0.001`, `foo`, `not` `b`, `2 + 2`, `Cons(2, Nil)` |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| **表达式（项）** | *e* ::-  *c * &#124; *x*  &#124;  *u e * &#124;  *e*[1]* b e*[2]
    *&#124;*`if`* e*[1]`then`* e*[2] `else`* e*[3]*  &#124;  *`let` *d*[1]*...**d[n]*`in`*e*`end`  &#124;
     *e* `(`*e*[1]`,` ...`,` *e[n]*`)`  `&#124; (`*e*[1]`,`...`,`*e[n]*`)`  `&#124;
    #`*n e*  &#124;   `{`*x*[1]`=`*e*[1]`,` ...`,` *x[n]*`=`*e[n]*`}`  `&#124; #`*x
    e  *&#124;   *X*`(`*e*`)`  &#124;  `match`* e *`with `*p*[1]`->`*e*[1]&#124; ... &#124; *p[n]*`->`*e[n]*
    | `~0.001`, `foo`, `not` `b`, `2 + 2`, `Cons(2, Nil)` |'
- en: '| **patterns** | *p* ::= *c * &#124; *x*  &#124;  `(`*p*[1]`,`...`,` *p[n]*`)`*  &#124;
     *`{`*x*[1]`=` *p*[1]`,`...`,`*x[n]*`=`*p[n]*`}`  &#124;  *X*  &#124;  *X* `(`
    *p* `)` | `a:int`, `(x:int,y:int), I(x:int)` |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| **模式** | *p* ::= *c * &#124; *x*  &#124;  `(`*p*[1]`,`...`,` *p[n]*`)`*  &#124;
     *`{`*x*[1]`=` *p*[1]`,`...`,`*x[n]*`=`*p[n]*`}`  &#124;  *X*  &#124;  *X* `(`
    *p* `)` | `a:int`, `(x:int,y:int), I(x:int)` |'
- en: '| **declarations** | *d* ::= `val`*p* *=* *e  *&#124;`fun`* y p *`:` *t* - *e*  &#124;
     `da``tatype` *Y*- *X*[1]**[**`of `*t*[1]**]** `&#124;` ... `&#124;` *X[n ]***[**`of`
    *t**[n]***]** | `val one = 1 fun square(x: int):  int'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '| **声明** | *d* ::= `val`*p* *=* *e  *&#124;`fun`* y p *`:` *t* - *e*  &#124;
     `da``tatype` *Y*- *X*[1]**[**`of `*t*[1]**]** `&#124;` ... `&#124;` *X[n ]***[**`of`
    *t**[n]***]** | `val one = 1 fun square(x: int):  int'
- en: datatype d - N &#124; I of int` |
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: datatype d - N &#124; I of int` |
- en: '| **types** | *t* ::= `int`  &#124;  `float`  &#124;  `bool`  &#124;  `string`
     &#124;  `char`  &#124;  *t*[1]`->`*t*[2]*  &#124;  **t*[1]`*`...`*`*t[n]*  &#124;
     `{`*x*[1]:*t*[1], *x*[2]:*t*[2],..., *x[n]*:*t[n]*`}`  &#124;  *Y* | `int`, `string`,
    `int->int`, `bool*int->bool` |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | *t* ::= `int`  &#124;  `float`  &#124;  `bool`  &#124;  `string`
     &#124;  `char`  &#124;  *t*[1]`->`*t*[2]*  &#124;  **t*[1]`*`...`*`*t[n]*  &#124;
     `{`*x*[1]:*t*[1], *x*[2]:*t*[2],..., *x[n]*:*t[n]*`}`  &#124;  *Y* | `int`, `string`,
    `int->int`, `bool*int->bool` |'
- en: '| **values** | *v* ::= *c*  &#124;  `(`*v*[1]`,`...`,`*v[n]*`)` &#124;  `{`*x*[1]`=`*v*[1]`,` ...`,` *x[n]*`=`*v[n]*`}`  &#124;
     *X*`(`*v*`)` | `2`, `(2,"hello")`, `Cons(2,Nil)` |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| **values** | *v* ::= *c*  &#124;  `(`*v*[1]`,`...`,`*v[n]*`)` &#124;  `{`*x*[1]`=`*v*[1]`,` ...`,` *x[n]*`=`*v[n]*`}`  &#124;
     *X*`(`*v*`)` | `2`, `(2,"hello")`, `Cons(2,Nil)` |'
- en: '*Note:* pattern-matching floating point constants is inadvisable. Equality
    on floats is a dangerous thing to rely upon. It''s better to test whether one
    float is within some small distance epsilon of another float.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：*对浮点常量进行模式匹配是不明智的。浮点数的相等性是一件危险的事情。最好的做法是测试一个浮点数是否在另一个浮点数的某个小距离 epsilon
    内。'
- en: Polymorphism
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多态性
- en: 'There is a nice feature that allows us to avoid rewriting the same code over
    and over so that it works for different types. Suppose we want to write a function
    that swaps the position of values in an ordered pair:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个很好的功能，可以让我们避免一遍又一遍地重写相同的代码，以便它适用于不同的类型。假设我们想要编写一个函数，用于交换有序对中值的位置：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is tedious, because we're writing exactly the same algorithm each time.
    It gets worse! What if the two pair elements have different types?
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这很烦人，因为我们每次都要写完全相同的算法。更糟糕的是！如果两个对元素具有不同的类型怎么办？
- en: '[PRE27]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And so on. There is a better way:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。有一种更好的方法：
- en: '[PRE28]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Instead of writing explicit types for `x` and `y`, we write **type variables**`''a`
    and `''b`.  The type of `swap` is `''a * ''b` `->` `''b * ''a`*.* This means that
    we can use swap as if it had any type that we could get by *consistently* replacing
    `''a` and `''b` in its type with a type for `''a` and a type for `''b`. We can
    use the new swap in place of all the old definitions:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是为 `x` 和 `y` 写明确的类型，而是写下**类型变量**`'a` 和 `'b`。`swap` 的类型是 `'a * 'b` `->` `'b
    * 'a`*.* 这意味着我们可以将 swap 视为具有任何我们能够通过*一致*替换其类型中的`'a`和`'b`而获得的类型。我们可以将新的 swap 替换为所有旧定义：
- en: '[PRE29]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In fact, we can leave out the type declarations in the definition of `swap`,
    and OCaml will figure out the most general polymorphic type it can be given, automatically:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可以在 `swap` 的定义中省略类型声明，OCaml 将自动找出它可以给出的最一般的多态类型：
- en: '[PRE30]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The ability to use swap as though it had many different types is known as **polymorphism**,
    from the Greek for "many forms".
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `swap` 用作具有许多不同类型的能力被称为**多态性**，源自希腊语的 "多种形式"。
- en: Notice that the type variables must be substituted consistently in any use of
    a polymorphic expression. For example, it is impossible for `swap` to have the
    type `(int * float) -> (string * int)`, because that type would consistently substitute
    for the type variable `'a` but not for `'b`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在任何多态表达式的使用中，类型变量必须一致地进行替换。例如，`swap`的类型为`(int * float) -> (string * int)`是不可能的，因为该类型会一致替换类型变量`'a`，但不会替换`'b`。
- en: OCaml programmers typically read the types `'a` and `'b` as "alpha" and "beta".
    This is easier than saying "single quotation mark a" or "apostrophe a". They also
    they wish they could write Greek letters instead. A type variable may be any identifier
    preceded by a single quotation mark; for example, `'key` and `'value` are also
    legal type variables. The OCaml compiler needs to have these identifiers preceded
    by a single quotation mark so that it knows it is seeing a type variable.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: OCaml 程序员通常将类型`'a`和`'b`读作 "alpha" 和 "beta"。这比说 "单引号 a" 或 "撇号 a" 要容易。他们还希望能够使用希腊字母。类型变量可以是由单引号引导的任何标识符；例如，`'key`
    和 `'value` 也是合法的类型变量。OCaml 编译器需要在这些标识符之前加上单引号，以便知道它正在看到一个类型变量。
- en: It is important to note that to be polymorphic in a parameter `x`, a function
    may not use `x` in any way that would identify its type. It must treat `x` as
    a black box. Note that `swap` doesn't use its arguments `x` or `y` in any interesting
    way, but treats them as black boxes. When the OCaml type checker is checking the
    definition of `swap`, all it knows is that `x` is of some arbitrary type `'a`.
    It doesn't allow any operation to be performed on `x` that couldn't be performed
    on an arbitrary type. This means that the code is guaranteed to work for any `x`
    and `y`. However, we can apply other polymorphic functions. For example,
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，要使参数 `x` 在多态上成立，函数不能以任何方式使用 `x` 以确定其类型。它必须将 `x` 视为黑盒子。请注意，`swap` 并不以任何有趣的方式使用其参数
    `x` 或 `y`，而是将它们视为黑盒子。当 OCaml 类型检查器检查 `swap` 的定义时，它只知道 `x` 是某种任意类型 `'a`。它不允许对 `x`
    执行任何不能在任意类型上执行的操作。这意味着该代码保证适用于任何 `x` 和 `y`。然而，我们可以应用其他多态函数。例如，
- en: '[PRE31]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '* * *'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Parameterized Types
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数化类型
- en: We can also define polymorphic datatypes. For example, we defined lists of integers
    as
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以定义多态数据类型。例如，我们将整数列表定义为
- en: '[PRE32]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'But we can make this more general by using a **parameterized variant type**
    instead:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们可以通过使用**参数化变体类型**来使其更通用：
- en: '[PRE33]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: A parameterized datatype is a recipe for creating a family of related datatypes. The
    name `'a` is a **type parameter** for which any other type may be supplied. For
    example, `int list_` is a list of integers, `float list_` is a list of float,
    and so on. However, `list_` itself is not a type. Notice also that we cannot use
    `list_` to create a list each of whose elements can be any type. All of the elements
    of a `T list_` must be `T`'s.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 参数化数据类型是创建一系列相关数据类型的方法。名称`'a`是**类型参数**，可以提供任何其他类型。例如，`int list_`是整数列表，`float
    list_`是浮点数列表，依此类推。但是，`list_`本身并不是一种类型。还要注意，我们不能使用`list_`来创建每个元素可以是任何类型的列表。`T list_`的所有元素必须是`T`。
- en: '[PRE34]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Notice `list_` itself is *not* a type. We can think of `list_` as a function
    that, when applied to a type like `int`, produces another type (`int` `list_`).
    It is a **parameterized type constructor**: a function that takes in parameters
    and gives back a type. Other languages have parameterized type constructors. For
    example, in Java you can declare a **parameterized class**:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`list_`本身并*不是*一种类型。我们可以将`list_`视为一个函数，当应用于类似`int`的类型时，会产生另一种类型（`int` `list_`）。它是一个**参数化类型构造器**：一个接受参数并返回类型的函数。其他语言也有参数化类型构造器。例如，在Java中，您可以声明一个**参数化类**：
- en: '[PRE35]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In OCaml, we can define **polymorphic functions** that know how to manipulate
    any kind of list:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在OCaml中，我们可以定义**多态函数**，它们知道如何操作任何类型的列表：
- en: '[PRE36]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: For trees,
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于树，
- en: '[PRE37]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If we use a record type for the nodes, the record type also must be parameterized,
    and instantiated on the same element type as the tree type:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用记录类型作为节点，那么记录类型也必须是参数化的，并且在树类型的相同元素类型上进行实例化：
- en: '[PRE38]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It is also possible to have multiple type parameters on a parameterized type,
    in which case parentheses are needed:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以在参数化类型上具有多个类型参数，这种情况下需要使用括号：
- en: '[PRE39]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '* * *'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Abstract syntax and variant types
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象语法和变体类型
- en: 'Earlier we noticed that there is a similarity between BNF declarations and
    variant type declarations. In fact, we can define variant types that act like
    the corresponding BNF declarations. The values of these variant types then represent
    legal expressions that can occur in the language. For example, consider a BNF
    definition of legal OCaml type expressions:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们早些时候注意到，BNF声明与变体类型声明之间存在相似性。实际上，我们可以定义行为类似于对应的BNF声明的变体类型。然后，这些变体类型的值代表了语言中可以出现的合法表达式。例如，考虑一个OCaml类型表达式的合法BNF定义：
- en: '| (base types)  | *b* ::= `int` &#124; `float` &#124; `string` &#124; `bool`
    &#124; `char` |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '|（基本类型） | *b* ::= `int` &#124; `float` &#124; `string` &#124; `bool` &#124;
    `char` |'
- en: '| (types) | *t* ::= *b* &#124; *t* `->` *t* &#124; *t*[1] `*` *t*[2] `*`...`*`
    *t[n]* &#124; `{` *x*[1] `:` *t*[1]`;` ...`;` *x[n]* `:` *t[n]* `}` &#124; *X*
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '|（类型） | *t* ::= *b* &#124; *t* `->` *t* &#124; *t*[1] `*` *t*[2] `*`...`*`
    *t[n]* &#124; `{` *x*[1] `:` *t*[1]`;` ...`;` *x[n]* `:` *t[n]* `}` &#124; *X*
    |'
- en: 'This grammar has exactly the same structure as the following type declarations:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语法与以下类型声明具有完全相同的结构：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Any legal OCaml type expression can be represented by a value of type `mlType`
    that contains all the information of the corresponding type expression. This value
    is known as the *abstract syntax* for that expression. It is abstract because
    it doesn''t contain any information about the actual symbols used to represent
    the expression in the program. For example, the abstract syntax for the expression
    `int * bool -> {name : string}` would be:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '任何合法的OCaml类型表达式都可以由包含相应类型表达式所有信息的`mlType`类型的值表示。这个值被称为该表达式的*抽象语法*。它是抽象的，因为它不包含关于在程序中表示表达式的实际符号的任何信息。例如，表达式`int
    * bool -> {name : string}`的抽象语法将是：'
- en: '[PRE41]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The abstract syntax would be exactly the same even for a more verbose version
    of the same type expression: `((int * bool) -> {name : string})`. Compilers typically
    use abstract syntax internally to represent the program that they are compiling.
    We will see a lot more abstract syntax later in the course when we see how OCaml
    works.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '即使对于相同类型表达式的更详细的版本，抽象语法也会完全相同：`((int * bool) -> {name : string})`。编译器通常在内部使用抽象语法来表示它们正在编译的程序。当我们了解OCaml的工作原理时，我们将在课程后期看到更多的抽象语法。'
