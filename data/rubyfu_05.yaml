- en: Module 0x5 | Exploitation Kung Fu
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块0x5 | 开发功夫
- en: Module 0x5 | Exploitation Kung Fu
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块0x5 | 开发功夫
- en: Skeleton exploit
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 骨架利用
- en: It's really a good thing to have a skeleton exploit to edit and use quickly
    during your exploitation process.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个骨架利用是一个很好的事情，可以在利用过程中快速编辑和使用。
- en: Network base
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络基础
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To execute it
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 执行它
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that some services has to receive from it and some does not.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有些服务必须从中接收，有些则不需要。
- en: File base
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件基础
- en: Creating a simple exploit file
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个简单的利用文件
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To execute it
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 执行它
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Fuzzer
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模糊器
- en: Fuzzer
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模糊器
- en: Fuzzers usually used for general or precisely applications functions. In this
    part we'll show how to fuzz most known services using ruby. Remember, Fuzzing
    is an **Art of Hitting Things**, it's not about the tools.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊器通常用于一般或精确的应用程序功能。在这部分中，我们将展示如何使用ruby模糊最常见的服务。记住，模糊是一种**打击事物的艺术**，它不仅仅是关于工具。
- en: '**Fuzzer Types**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**模糊器类型**'
- en: Mutation
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突变
- en: Metadata/File format
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元数据/文件格式
- en: Mutation
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突变
- en: FTP Fuzzer
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FTP模糊器
- en: The general idea of fuzzing FTP service is to test all commands buffer sizes.
    However, not the case isn't the same all the time, for example, testing username
    and password buffers. In addition, the same technique could be applied for many
    services even customized services.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊FTP服务的一般思路是测试所有命令缓冲区大小。然而，并非所有情况都是一样的，例如，测试用户名和密码缓冲区。此外，相同的技术可以应用于许多服务，甚至定制服务。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I was thinking of making it a bit more elegant to give myself a chance to inspect
    and configure each command separately.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我想让它更加优雅，给自己一个机会逐个检查和配置每个命令。
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that, this script can be used for other protocols (IMAP, POP3, etc) since
    it deals with socket!.
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，这个脚本可以用于其他协议（IMAP，POP3等），因为它涉及到套接字！。
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Calling Windows APIs
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用Windows API
- en: Calling Windows APIs
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用Windows API
- en: Due playing with MS-Windows Exploitation development, I was using some **C**
    applications that calling Windows APIs and I wanted to give it a try and take
    it step by step.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于参与MS-Windows开发，我使用了一些调用Windows API的**C**应用程序，我想试试并逐步进行尝试。
- en: The simplest example came to my mind is calling the *MessageBoxA* function.
    If we take a look at the [MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/ms645505.aspx)
    of *MessageBoxA* function, we'll find at very beginning the function description
    and its arguments and returns. At the Requirements section, we'll find the required
    DLL to call *MessageBoxA* function which is *User32.dll* library.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我脑海中想到的最简单的例子是调用*MessageBoxA*函数。如果我们查看*MessageBoxA*函数的[MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/ms645505.aspx)，我们会在最开始找到函数描述及其参数和返回值。在要求部分，我们会找到调用*MessageBoxA*函数所需的DLL，即*User32.dll*库。
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's do it,
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧，
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](MessageBoxA1.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](MessageBoxA1.png)'
- en: '[Source and explaination](http://www.rubytips.org/2008/05/13/accessing-windows-api-from-ruby-using-win32api-library/)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[源码和解释](http://www.rubytips.org/2008/05/13/accessing-windows-api-from-ruby-using-win32api-library/)'
- en: That's was really easy! but, `Win32API` is going to be deprecated or it's already
    deprecated at the moment you read this part. Ruby have moved all dealing with
    C, dll functions to `Fiddle` class which is a wrapper of `libffi` C library which
    provides a portable interface to allow languages to call code from another language.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很容易！但是，`Win32API`将会被弃用，或者在你阅读这部分时已经被弃用。Ruby已经将所有与C、dll函数的处理移至`Fiddle`类，它是`libffi`
    C库的一个包装器，提供了一个可移植的接口，允许语言调用另一种语言的代码。
- en: If we build our MessageBoxA script again using `Fiddle` it will be like
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次使用`Fiddle`构建我们的MessageBoxA脚本，它将会是这样的
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Source](https://gist.github.com/Youka/3ebbdfd03454afa7d0c4)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[源码](https://gist.github.com/Youka/3ebbdfd03454afa7d0c4)'
- en: As you can the script is getting much bigger but, important thing to mention
    is, Using `Win32API` is going to be a real pain for bigger or more complicated
    tasks, in another hand `Fiddle` is more elegant and readable than `Win32API`
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，脚本变得越来越庞大，但是，需要提到的重要一点是，对于更大或更复杂的任务，使用`Win32API`将会是一个真正的痛苦，另一方面，`Fiddle`比`Win32API`更加优雅和可读
- en: At that point, I was wondering if I can write something like an old frind application
    call [*arwin*](http://www.vividmachines.com/shellcode/arwin.c) which finds a Function
    location in a Windows library. With the help of MSDN [LoadLibrary](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684175(v=vs.85.aspx)
    and [GetProcAddress](https://msdn.microsoft.com/en-us/library/windows/desktop/ms683212(v=vs.85.aspx)
    documentations let's do it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 那时，我在想是否可以编写类似于一个名为[*arwin*](http://www.vividmachines.com/shellcode/arwin.c)的旧朋友应用程序，它可以在
    Windows 库中找到函数位置。借助 MSDN 的 [LoadLibrary](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684175(v=vs.85.aspx)
    和 [GetProcAddress](https://msdn.microsoft.com/en-us/library/windows/desktop/ms683212(v=vs.85.aspx)
    文档，让我们来做吧。
- en: '**arwin.rb**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**arwin.rb**'
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Results
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 结果
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](Arwin1.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](Arwin1.png)'
- en: Metasploit
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit
- en: Metasploit
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit
- en: Code Design Pattern
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码设计模式
- en: Metasploit uses **Facade** design pattern which encapsulates/simplifies the
    complex part of the framework by implementing it as interfaces which makes development
    really easy and elegant. I found that the [Wikipedia](https://en.wikipedia.org/wiki/Facade_pattern#Ruby)
    example of facades is descent to be presented
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit 使用**外观**设计模式，通过将其实现为接口来封装/简化框架的复杂部分，使开发变得非常简单和优雅。我发现维基百科的外观示例很适合展示
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see from the above code, the developer who wants to use the **Computer
    framework** don't have to deal with the complex codebase (classes, methods and
    calculations) directly. Instead, he will use a simple interface class called **`ComputerFacade`**
    which instantiate(as objects) all classes once you call it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从上面的代码中所看到的，想要使用**计算机框架**的开发人员不必直接处理复杂的代码库（类、方法和计算）。相反，他将使用一个名为**`ComputerFacade`**的简单接口类，一旦调用它，它将实例化（作为对象）所有类。
- en: Another exist example in ruby language itself is `open-uri` standard library,
    which encapsulates `net/http` and `uri` libraries and makes theme looks like opening
    ordinary file. To see how `open-uri` makes things easy, We'll write a code that
    send get request to *Ruby.net* and get the response with both regular and `open-uri`
    way
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby 语言本身的另一个存在示例是 `open-uri` 标准库，它封装了 `net/http` 和 `uri` 库，并使它们看起来像是打开普通文件。为了看到`open-uri`是如何简化事情的，我们将编写一个代码，发送
    get 请求到 *Ruby.net* 并以常规和`open-uri`方式获取响应
- en: '**regular way**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**常规方式**'
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**facade way**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**外观方式**'
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: More about Facade
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于外观
- en: '[Practicingruby | Structural Design Patterns](https://practicingruby.com/articles/structural-design-patterns)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Practicingruby | 结构设计模式](https://practicingruby.com/articles/structural-design-patterns)'
- en: '[Wikipedia| Facade Pattern#Ruby](https://en.wikipedia.org/wiki/Facade_pattern#Ruby)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[维基百科| 外观模式#Ruby](https://en.wikipedia.org/wiki/Facade_pattern#Ruby)'
- en: '[Sourcemaking | Facade Design Pattern](https://sourcemaking.com/design_patterns/facade)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Sourcemaking | 外观设计模式](https://sourcemaking.com/design_patterns/facade)'
- en: Metasploit Structure
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Metasploit 结构
- en: '![](MSF-struct.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](MSF-struct.png)'
- en: As you can see in figure above, Metasploit libraries are working as interface
    serves all modules, interfaces, tools and plugins. That's exactly represents what
    we've explained in **Code Design Pattern**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，Metasploit 库作为接口为所有模块、接口、工具和插件提供服务。这正好代表了我们在**代码设计模式**中解释的内容。
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Absolute module
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绝对模块
- en: Here is a very basic structure of a general module.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个通用模块的非常基本结构。
- en: I'll Add some comments for explanation purpose.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我将添加一些注释以解释目的。
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The result is
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是
- en: '![](msf_template1.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](msf_template1.png)'
- en: Load Metasploit module
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载 Metasploit 模块
- en: To load/reload the Metasploit module you're working on, you can put the script
    in your user's Metasploit path or in the Metasploit framework path
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载/重新加载您正在使用的 Metasploit 模块，您可以将脚本放在您的用户 Metasploit 路径或 Metasploit 框架路径中
- en: User's Metasploit path
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户的 Metasploit 路径
- en: '[PRE16]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Metasploit framework path
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit 框架路径
- en: '[PRE17]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To make Metasploit load/reload the script use one of the following ways
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要使 Metasploit 加载/重新加载脚本，请使用以下方法之一
- en: Exit from msfconsole then run it again
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 退出 msfconsole 然后再次运行
- en: use `reload_all` to reload all modules
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`reload_all`重新加载所有模块
- en: If your module is previously loaded and you made changes on it just use `reload`
    but you have to be using the module, in another work `use [YOUR MODULE]`
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的模块以前已加载并对其进行了更改，只需使用`reload`，但您必须使用该模块，换句话说，`use [YOUR MODULE]`
- en: '**Note:** It''s really important to know the official Metasploit development
    documentation **(** [http://www.rubydoc.info/github/rapid7/metasploit-framework/](http://www.rubydoc.info/github/rapid7/metasploit-framework/)
    **)**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 了解官方 Metasploit 开发文档**（**[http://www.rubydoc.info/github/rapid7/metasploit-framework/](http://www.rubydoc.info/github/rapid7/metasploit-framework/)
    **）**非常重要'
- en: '* * *'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Auxiliary module
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 辅助模块
- en: Auxiliary module
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 辅助模块
- en: Scanner
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扫描器
- en: Basic Scanner modules
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 基本扫描模块
- en: WordPress XML-RPC Massive Brute Force
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WordPress XML-RPC 大规模暴力破解
- en: WordPress CMS framework support XML-RPC service to interact with almost all
    functions in the framework. Some functions require authentication. The main issues
    lies in the you can authenticate many times within the same request. WordPress
    accepts about 1788 lines of XML request which allows us to send tremendous number
    of login tries in a single request. So how awesome is this? Let me explain.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress CMS 框架支持 XML-RPC 服务与框架中几乎所有功能进行交互。一些功能需要身份验证。主要问题在于您可以在同一请求中多次进行身份验证。WordPress
    接受大约 1788 行的 XML 请求，这使我们能够在单个请求中发送大量的登录尝试。这有多棒？让我解释一下。
- en: Imagine that you have to brute force one user with 6000 passwords? How many
    requests you have to send in the normal brute force technique? It's 6000 requests.
    Using our module will need to 4 requests only of you use the default CHUNKSIZE
    which is 1500 password per request!!!. NO MULTI-THREADING even you use multi-threading
    in the traditional brute force technique you'll send 6000 request a few of its
    are parallel.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你必须暴力破解一个用户的 6000 个密码？在传���的暴力破解技术中，你需要发送多少请求？是 6000 个请求。使用我们的模块只需要 4 个请求，如果使用默认的
    CHUNKSIZE，即每个请求 1500 个密码！！！没有多线程，即使你在传统的暴力破解技术中使用多线程，你也只会发送少量的并行请求。
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: So from above you can understand how the XML request will be build. Now How
    the reply will be? To simplify this we'll test a single user once with wrong password
    another with correct password to understand the response behavior
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面你可以理解 XML 请求将如何构建。现在回复会是什么样？为了简化，我们将测试一个用户一次用错误密码，另一个用正确密码来了解响应行为
- en: '**wrong password response**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误密码的响应**'
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We noticed the following
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到了以下内容
- en: '`<name>faultCode</name>`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<name>faultCode</name>`'
- en: '`<int>403</int>`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<int>403</int>`'
- en: '`<string>Incorrect username or password.</string>`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<string>用户名或密码不正确。</string>`'
- en: Usually we rely one the string response '*Incorrect username or password.*',
    but what if the WordPress language wasn't English? so the best thing is the integer
    response which is `403`
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通常我们依赖于字符串响应'*用户名或密码不正确。*', 但如果 WordPress 的语言不是英语怎么办？所以最好的是整数响应`403`
- en: '**correct password response**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**正确密码的响应**'
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We noticed that long reply with the result of called method `wp.getUsersBlogs`
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到了长长的回复，带有调用方法`wp.getUsersBlogs`的结果
- en: Awesome, right?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒，对吧？
- en: The tricky part is just begun! Since we will be sending thousands of passwords
    in one request and the reply will be rally huge XML files, how we'll find the
    position of the correct credentials? The answer is, by using the powerful ruby
    iteration methods, particularly `each_with_index` method.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 棘手的部分刚刚开始！因为我们将在一个请求中发送成千上万个密码，回复将是非常庞大的 XML 文件，我们如何找到正确凭据的位置？答案是，通过使用强大的 Ruby
    迭代方法，特别是`each_with_index`方法。
- en: Enough talking, show me the code!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 废话少说，给我看代码！
- en: What do we want?
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们想要什么？
- en: Create Auxiliary module
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建辅助模块
- en: Deal with Web Application
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 Web 应用程序
- en: Deal with WordPress
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 WordPress
- en: Describe The module
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述模块
- en: Let people know we created this module
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让人们知道我们创建了这个模块
- en: Add references about the vulnerability that we exploit
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加我们利用的漏洞的参考资料
- en: Options to set the target URI, port, user, pass list.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置目标 URI、端口、用户、密码列表的选项。
- en: Read username and password lists as arrays
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户名和密码列表读取为数组
- en: Build/Generate XML file takes a user and iterate around the passwords
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建/生成 XML 文件，使用一个用户并围绕密码进行迭代
- en: Check if target is running WordPress
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查目标是否在运行 WordPress
- en: Check if target enabling RPC
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查目标是否启用了 RPC
- en: Setup the HTTP with XML POST request
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置带有 XML POST 请求的 HTTP
- en: Parse XML request and response
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析 XML 请求和响应
- en: Find the exact correct credentials
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到确切的正确凭据
- en: Check if we got blocked
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查我们是否被阻止
- en: Parsing the result and find which password is correct
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析结果并找出哪个密码是正确的
- en: Check if the module has been written correctly (msftidy.rb)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查模块是否已正确编写（msftidy.rb）
- en: Steps
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤
- en: Create Auxiliary module
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建辅助模块
- en: Deal with Web Application
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 Web 应用程序
- en: Deal with WordPress
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 WordPress
- en: Describe The module
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述模块
- en: Let people know we created this module
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让人们知道我们创建了这个模块
- en: Add references about the vulnerability that we exploit
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加我们利用的漏洞的参考资料
- en: Options to set the target URI, port, user, pass list.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置目标 URI、端口、用户、密码列表的选项。
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Read username and password lists as arrays
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户名和密码列表读取为数组
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Build/Generate XML file takes a user and iterate around the passwords
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建/生成 XML 文件，使用一个用户并围绕密码进行迭代
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Check if target is running WordPress
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查目标是否在运行 WordPress
- en: Check if target enabling RPC
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查目标是否启用RPC
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Setup the HTTP with XML POST request
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置HTTP与XML POST请求
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Parse XML request and response
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析XML请求和响应
- en: Find the exact correct credentials
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到确切的正确凭证
- en: Check if we got blocked
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查是否被阻止
- en: Parsing the result and find which password is correct
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析结果并找出哪个密码是正确的
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Wrapping up
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 总结
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Check if the module has been written correctly (msftidy.rb)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查模块是否已正确编写（msftidy.rb）
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Run it**'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行它**'
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Exploit module
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用模块
- en: Exploit module
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用模块
- en: Remote Exploit
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程利用
- en: FTP exploit
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FTP利用
- en: Our example will be a very simple vulnerable FTP server called ability server.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例将是一个非常简单的易受攻击的FTP服务器，名为ability server。
- en: What do we want?
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们想要什么？
- en: Create Exploit module
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建利用模块
- en: Exploit FTP Server
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用FTP服务器
- en: Set exploit rank
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置利用等级
- en: Describe The module
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述该模块
- en: Let people know we created this module
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让人们知道我们创建了这个模块
- en: Add references about the vulnerability that we exploit
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加我们利用的漏洞的参考资料
- en: Choose a default payload
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个默认的有效载荷
- en: Set the Bad characters.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置坏字符。
- en: Set Disclosure Date
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置披露日期
- en: Targets and it's return address (EIP offset)
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标及其返回地址（EIP偏移）
- en: Options to set the target IP, port. Also username and password if required.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置目标IP、端口的选项。如果需要，还有用户名和密码。
- en: Check the target if vulnerable.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查目标是否存在漏洞。
- en: Send the exploit
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送利用
- en: Check if the module has been written correctly (msftidy.rb)
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查模块是否已正确编写（msftidy.rb）
- en: Steps
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤
- en: Create Exploit module
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建利用模块
- en: Exploit FTP Server
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用FTP服务器
- en: Put a rank for the module
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为模块设置一个等级
- en: '[PRE30]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Describe The module
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述该模块
- en: Let people know we created this module
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让人们知道我们创建了这个模块
- en: Add references about the vulnerability that we exploit
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加我们利用的漏洞的参考资料
- en: Choose a default payload
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个默认的有效载荷
- en: Set the Bad characters.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置坏字符。
- en: Set Disclosure Date
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置披露日期
- en: Targets and it's return address (EIP offset)
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标及其返回地址（EIP偏移）
- en: Options to set the target IP, port. Also username and password if required.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置目标IP、端口的选项。如果需要，还有用户名和密码。
- en: '[PRE31]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Check the target if vulnerable.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查目标是否存在漏洞。
- en: '[PRE32]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Send the exploit
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送利用
- en: '[PRE33]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Wrapping up
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: '[PRE34]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Check if the module has been written correctly (msftidy.rb)
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查模块是否已正确编写（msftidy.rb）
- en: '[PRE35]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Meterpreter
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meterpreter
- en: Meterpreter
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meterpreter
- en: From the official [wiki](https://github.com/rapid7/metasploit-framework/wiki/Meterpreter),
    The Meterpreter is an advanced payload that has been part of Metasploit since
    2004\. Originally written by Matt "skape" Miller, dozens of contributors have
    provided additional code, and the payload continues to be frequently updated as
    part of Metasploit development.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 来自官方[wiki](https://github.com/rapid7/metasploit-framework/wiki/Meterpreter)，Meterpreter是Metasploit自2004年以来的一个高级负载。最初由Matt
    "skape" Miller编写，数十位贡献者提供了额外的代码，该负载继续作为Metasploit开发的一部分经常更新。
- en: Meterpreter is a payload framework that provides APIs to interact with by writing
    scripts and plugins that increase its capabilities. You can find Meterpreter scripts
    in `metasploit-framework/scripts/meterpreter` those scripts that you use in post
    exploitation using **run** (e.g. getuid, getsystem, migrate, scraper, etc). Meterpreter
    source code is located in `metasploit-framework/lib/rex/post/meterpreter`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter是一个负载框架，提供API与之交互，通过编写脚本和插件来增加其功能。您可以在`metasploit-framework/scripts/meterpreter`中找到Meterpreter脚本，这些脚本可在后期利用中使用**run**（例如getuid、getsystem、migrate、scraper等）。Meterpreter源代码位于`metasploit-framework/lib/rex/post/meterpreter`。
- en: Actually, you can't imagine the power of Meterpreter until you read its [wishlist
    and features](https://github.com/rapid7/metasploit-framework/wiki/Meterpreter-Wishlist)
    not just use it.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您无法想象Meterpreter的强大之处，直到阅读其[愿望清单和功能](https://github.com/rapid7/metasploit-framework/wiki/Meterpreter-Wishlist)，而不仅仅是使用它。
- en: To get started, let's to get a Meterpreter shell on a victim machine to start
    practicing it inline then we can write some scripts
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，让我们在受害者机器上获得一个Meterpreter shell，以便开始内联练习，然后我们可以编写一些脚本
- en: Once you get the Meterpreter shell type `irb` to be dropped into ruby's IRB.
    Most of required modules will be loaded already. Then type `require 'irb/completion'`
    to support auto-completion for the IRB console, just like the follows
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获得Meterpreter shell，请输入`irb`以进入ruby的IRB。大多数所需模块已经加载。然后输入`require 'irb/completion'`以支持IRB控制台的自动补全，就像下面的例子一样
- en: '[PRE36]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If you would like to use `Pry` instead of `irb` then type `pry` and make the
    console more readable. Personally, I'd prefer `pry`
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用`Pry`而不是`irb`，请键入`pry`并使控制台更易读。个人更喜欢`pry`
- en: '[PRE37]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As you can see, you've been dropped to the IRB console with an instance variable
    called `client` of the running Meterpreter.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，你已经被放到了一个名为`client`的实例变量的IRB控制台中，该实例变量是正在运行的Meterpreter的一部分。
- en: Try this as a start
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 试试这个作为一个开始
- en: '[PRE38]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: To list all associated methods with `client` instance
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出与`client`实例关联的所有方法
- en: This will return an array.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个数组。
- en: '[PRE39]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Let's to check some of the interesting methods there.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来检查一些有趣的方法。
- en: Victim's IP address and port
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受害者的IP地址和端口
- en: '[PRE40]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Victim's computer information and plat form
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受害者计算机信息和平台
- en: '[PRE41]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Returns
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE42]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Get the current exploit datastore
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取当前利用数据存储
- en: '[PRE43]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Returns a hash contains all the exploit information that result to this Meterpreter
    session
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含导致此Meterpreter会话的所有利用信息的哈希
- en: '[PRE44]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '* * *'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: API and Extensions
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API和扩展
- en: Meterpreter API and Extensions
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meterpreter API和扩展
- en: Meterpreter extensions are located in `metasploit-framework/lib/rex/post/meterpreter`.
    It's highly recommended to browse and open the files to understand the code and
    it's style.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Meterpreter扩展位于`metasploit-framework/lib/rex/post/meterpreter`。强烈建议浏览并打开文件以了解代码及其风格。
- en: 'Extension ClientCore : `core`'
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展ClientCore：`core`
- en: '**Path**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**路径**'
- en: '`metasploit-framework/lib/rex/post/meterpreter/client_core.rb`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metasploit-framework/lib/rex/post/meterpreter/client_core.rb`'
- en: '[PRE45]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '**use** method is used to load meterpreter extensions which is used in the
    meterpreter console (ex. `use sniffer`, `use mimikatz`, etc )'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**use**方法用于加载meterpreter扩展，该方法用于meterpreter控制台（例如`use sniffer`，`use mimikatz`等）'
- en: 'Note: to list all loadable extensions in meterpreter console use `use -l` command.'
  id: totrans-233
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：要列出meterpreter控制台中所有可加载的扩展，请使用`use -l`命令。
- en: From IRB console of the meterpreter, let's try to use *sniffer* extension
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 从meterpreter的IRB控制台，让我们尝试使用*sniffer*扩展
- en: '[PRE46]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: As you can see, it returns a `nil` because the *sniffer* extension hasn't yet
    loaded.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，它返回一个`nil`，因为*sniffer*扩展尚未加载。
- en: Let's try to load the extension
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试加载扩展
- en: '[PRE47]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: As you can see it returns a `nil` because the method *use* is available in the
    `core` extension not in the meterpreter `client` instance.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，它返回一个`nil`，因为方法*use*在`core`扩展中可用，而不在meterpreter`client`实例中。
- en: 'To load extension: `load sniffer`'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载扩展：`load sniffer`
- en: '[PRE48]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: To check all *sniffer* extension methods, go to `metasploit-framework/lib/rex/post/meterpreter/extensions/sniffer/sniffer.rb`
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查所有*sniffer*扩展方法，请转到`metasploit-framework/lib/rex/post/meterpreter/extensions/sniffer/sniffer.rb`
- en: also, from IRB, get all methods as we know
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，从IRB中，获取所有方法，正如我们所知
- en: '[PRE49]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: which returns an array of all available methods
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含所有可用方法的数组
- en: '[PRE50]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Getting available interfaces: `sniffer_interfaces`'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取可用接口：`sniffer_interfaces`
- en: which returns array of hashes
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 返回哈希数组
- en: '[PRE51]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Extension Stdapi::Fs : `fs`'
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展Stdapi::Fs：`fs`
- en: '**Path**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**路径**'
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/stdapi.rb`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/stdapi.rb`'
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/fs`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/fs`'
- en: '[PRE52]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Dir class: `dir.rb`'
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dir类：`dir.rb`
- en: One of the extensions available for `fs` is **Dir** located in `metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/fs/dir.rb`.
    Let's to use some of its methods which we can know from `client.fs.dir.methods`
    or from source code.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`fs`可用的扩展之一是位于`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/fs/dir.rb`中的**Dir**。让我们使用一些我们可以从`client.fs.dir.methods`或源代码中了解的方法。'
- en: 'Get current directory: `pwd`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取当前目录：`pwd`
- en: '[PRE53]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: List all files and directories in the current directory `ls`
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出当前目录中的所有文件和目录`ls`
- en: '[PRE54]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Change the current directory: `cd`'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改当前目录：`cd`
- en: '[PRE55]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Create a new directory: `mkdir`'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新目录：`mkdir`
- en: '[PRE56]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'File class: `file.rb`'
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件类：`file.rb`
- en: Discover **File** class, let's begin with a simple search. Try to download and
    download files.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 发现**File**类，让我们从一个简单的搜索开始。尝试下载和下载文件。
- en: Search
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索
- en: '[PRE57]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Extension Stdapi::Fs : `sys`'
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展Stdapi::Fs：`sys`
- en: '**Path**'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**路径**'
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/stdapi.rb`'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/stdapi.rb`'
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/sys`'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/sys`'
- en: '[PRE58]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Config class: `config.rb`'
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置类：`config.rb`
- en: 'Get User ID: `getuid`'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取用户ID：`getuid`
- en: '[PRE59]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Get system information
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取系统信息
- en: '[PRE60]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Check if current process is running as SYSTEM user
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查当前进程是否以SYSTEM用户身份运行
- en: '[PRE61]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Enables all possible privileges: `getpriv`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用所有可能的特权：`getpriv`
- en: '[PRE62]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Process class: `process.rb`'
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进程类：`process.rb`
- en: 'Get the current Process ID: `getpid`'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取当前进程ID：`getpid`
- en: '[PRE63]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Get all exist processes with its details (pid, ppid, name, path, session, user,
    arch): `ps`'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取所有存在的进程及其详细信息（pid、ppid、名称、路径、会话、用户、架构）：`ps`
- en: '[PRE64]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Extension Stdapi::Fs : `net`'
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展Stdapi::Fs：`net`
- en: '**Path**'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '**路径**'
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/stdapi.rb`'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/stdapi.rb`'
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/net`'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/net`'
- en: '[PRE65]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Get the current victim interfaces: `ifconfig` or `ipconfig`'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取当前受害者接口：`ifconfig` 或 `ipconfig`
- en: '[PRE66]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Get network stat: `netstat`'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取网络统计信息：`netstat`
- en: '[PRE67]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Get the ARP table: `arp`'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取 ARP 表：`arp`
- en: '[PRE68]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Routes: `route`'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由：`route`
- en: '[PRE69]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Get Proxy settings: `getproxy`'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取代理设置：`getproxy`
- en: '[PRE70]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: As you can see how easy to get familiar with meterpreter API. there are other
    extensions you can play with
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可以看到，熟悉 Meterpreter API 是多么容易。还有其他扩展可以使用。
- en: '[PRE71]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: You can add more about those too in Rubyfu!
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在 Rubyfu 中添加更多相关内容！
- en: Meterpreter Scripting
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meterpreter 脚本
- en: Meterpreter Scripting
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meterpreter 脚本
- en: Since the Meterpreter scripting is planned to be removed and replaced with POST
    module, we'll put a skeleton Meterpreter script only.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 由于计划移除 Meterpreter 脚本并用 POST 模块替换，我们将只放一个骨架 Meterpreter 脚本。
- en: You can locate you new Meterpreter script in
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下位置找到您的新 Meterpreter 脚本
- en: The framework it-self `metasploit-framework/scripts/meterpreter` or,
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 框架本身 `metasploit-framework/scripts/meterpreter` 或，
- en: In your Metasploit user's path `~/.msf/scripts/meterpreter`
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的 Metasploit 用户路径 `~/.msf/scripts/meterpreter` 中
- en: Absolute Meterpreter Script
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绝对 Meterpreter 脚本
- en: '[PRE72]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The script is directly quoted from the Metasploit samples
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本直接引用自 Metasploit 示例
- en: Run Process migration on multiple meterpreter sessions
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在多个 Meterpreter 会话上运行进程迁移
- en: From `msfconsole` and after getting all metherpreter sessions, go to `post/windows/manage/migrate`
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `msfconsole` 并在获取所有 Meterpreter 会话后，转到 `post/windows/manage/migrate`
- en: '[PRE73]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '**Note:** make sure you''ve the sufficient privileges to migrate to the designated
    processe'
  id: totrans-318
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 确保您有足够的权限迁移到指定的进程'
- en: Then create a file with `rc` extension including the `<ruby> </ruby>` tages
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个包含 `<ruby> </ruby>` 标签的 `rc` 扩展名文件
- en: '**mass-mirgation.rc**'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '**mass-mirgation.rc**'
- en: '[PRE74]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Now, from msfconsole,
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从 msfconsole，
- en: '[PRE75]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Result will be similar to
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将类似于
- en: '[PRE76]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Railgun API Extension
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Railgun API 扩展
- en: Railgun API Extension
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Railgun API 扩展
- en: Quoting from [Railgun presentation in DefCon20](https://www.defcon.org/images/defcon-20/dc-20-presentations/Maloney/DEFCON-20-Maloney-Railgun.pdf),
    **Railgun** is an extension to the Meterpreter stdapi, allows arbitrary loading
    of DLLs. Since Windows API DLLs are always at known paths, we can always load
    them.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 引用自 [DefCon20 中的 Railgun 演示](https://www.defcon.org/images/defcon-20/dc-20-presentations/Maloney/DEFCON-20-Maloney-Railgun.pdf)，**Railgun**
    是 Meterpreter stdapi 的一个扩展，允许任意加载 DLL。由于 Windows API DLL 总是在已知路径上，我们总是可以加载它们。
- en: The ultimate benefit of using Railgun is getting the ability of dynamically
    access to the entire windows API on the system. By calling APIs from user process,
    we can impersonate user, anything become possible.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Railgun 的最终好处是获得动态访问系统上整个 Windows API 的能力。通过从用户进程调用 API，我们可以模拟用户，一切皆有可能。
- en: Railgun is used as POST exploitation API so knowing it well opens a lot of new
    possibillities to the post exploitation phase.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: Railgun 用作 POST 渗透 API，因此熟悉它将为后渗透阶段带来许多新的可能性。
- en: '**Path**'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '**路径**'
- en: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/railgun`'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/railgun`'
- en: All defined DLLs are located in `metasploit-framework/tree/master/lib/rex/post/meterpreter/extensions/stdapi/railgun/def`
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有定义的 DLL 都位于 `metasploit-framework/tree/master/lib/rex/post/meterpreter/extensions/stdapi/railgun/def`
- en: As an extension, we'll test it as the same as we were testing previous extensions,
    buy tripping the Meterpreter console to `irb` console. We'll have instantiated
    object called `client` or `session` as we know previously.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个扩展，我们将像测试之前的扩展一样测试它，通过将 Meterpreter 控制台转到 `irb` 控制台。我们将有一个之前已知的实例化对象称为 `client`
    或 `session`。
- en: To list all loaded DLL
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出所有加载的 DLL
- en: '[PRE77]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: To list all available function and its parameters for specific DLL (say `user32`)
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ���出特定 DLL（比如 `user32`）的所有可用函数及其参数
- en: '[PRE78]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Now, let's start using it,
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始使用它，
- en: Popping-up a message box
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹出消息框
- en: '[PRE79]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Results
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 结果
- en: '![](msf_meter_railgun1.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![](msf_meter_railgun1.png)'
- en: Lock Windows Screen
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定 Windows 屏幕
- en: '[PRE80]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: metasm
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: metasm
- en: Metasm
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasm
- en: 'Metasm is a cross-architecture assembler, disassembler, linker, and debugger.
    It is written in such a way that it is easy to add support for new architectures.
    For now, the following architectures are in:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: Metasm 是一个跨架构的汇编器、反汇编器、链接器和调试器。它的编写方式使得很容易为新的架构添加支持。目前支持以下架构：
- en: Intel Ia32.txt (16 and 32bits)
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Intel Ia32.txt（16 和 32 位）
- en: Intel X86_64.txt (*aka* Ia32 64bits, X64, AMD64)
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Intel X86_64.txt（又称 Ia32 64 位，X64，AMD64）
- en: MIPS
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIPS
- en: PowerPC
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerPC
- en: Sh4
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sh4
- en: Supports low and high-level debugging support (Ia32 only for now) under Windows,
    Linux and remote (via a gdbserver). Metasm is included in Metasploit by default.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 支持在 Windows、Linux 和远程（通过 gdbserver）下进行低级和高级调试支持（目前仅支持 Ia32）。Metasm 默认包含在 Metasploit
    中。
- en: Install Metasm gem
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Metasm gem
- en: '[PRE81]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: More about installation [here](https://github.com/jjyg/metasm/blob/master/doc/install_notes.txt).
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多关于安装的信息[在这里](https://github.com/jjyg/metasm/blob/master/doc/install_notes.txt)。
- en: Converting Assembly to Op-code - metasm-shell.rb
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将汇编转换为操作码 - metasm-shell.rb
- en: You can find metasm-shell in ruby gems default path after installation. In my
    case, it's located in `/var/lib/gems/2.1.0/gems/metasm-1.0.2/samples`
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，你可以在 ruby gems 默认路径中找到 metasm-shell。在我的情况下，它位于`/var/lib/gems/2.1.0/gems/metasm-1.0.2/samples`。
- en: Run it
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行它
- en: '[PRE82]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: as you can see you are now in the shell's prompt
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，现在你已经在 shell 的提示符下了
- en: Find assembly op-code
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找汇编操作码
- en: '[PRE83]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: More usage will be added for this awesome library.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个出色的库，将会添加更多用法。
- en: '* * *'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
