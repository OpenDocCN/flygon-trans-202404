- en: copy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: copy
- en: copy
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: copy
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'The definition of built-in `copy` function is [here](https://golang.org/pkg/builtin/#copy):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 内置`copy`函数的定义在[这里](https://golang.org/pkg/builtin/#copy)：
- en: func copy(dst, src []Type) int
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: func copy(dst, src []Type) int
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The copy built-in function copies elements from a source slice into a destination
    slice. (As a special case, it also will copy bytes from a string to a slice of
    bytes.) The source and destination may overlap. Copy returns the number of elements
    copied, which will be the minimum of len(src) and len(dst).
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`copy`内置函数将元素从源片复制到目标片。（作为特例，它还会将字符串的字节复制到字节片中。）源片和目标片可能重叠。`copy`返回复制的元素数量，这将是`len(src)`和`len(dst)`的最小值。'
- en: 'Let''s see a basic example in which source and destination slices aren''t overlapped:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个基本示例，其中源片和目标片不重叠：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the above example, the destination slice''s length is `3`, and the source
    slice''s length can be `2`, `3`, `4`. Check the result:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，目标片的长度为`3`，源片的长度可以是`2`、`3`、`4`。检查结果：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can make sure the number of copied elements is indeed the minimum length
    of source and destination slices.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以确保复制的元素数量确实是源片和目标片长度的最小值。
- en: 'Let''s check the overlapped case:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查重叠的情况：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result is like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Through the output, we can see no matter the source slice is ahead of destination
    or not, the result is always as expected. You can think the implementation is
    like this: the data from source slice are copied to a temporary place first, then
    the elements are copied from temporary to destination slice.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输出，我们可以看到无论源片是否在目标片之前，结果始终如预期。你可以这样想象实现方式：首先将数据从源片复制到临时位置，然后将元素从临时位置复制到目标片。
- en: '`copy` requires the source and destination slices are the same type, and an
    exception is the source is string while the destination is `[]byte`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`copy`要求源片和目标片是相同类型，一个例外是源片是字符串而目标片是`[]byte`：'
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output is:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Reference:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：
- en: '[copy() behavior when overlapping](https://groups.google.com/forum/#!msg/Golang-Nuts/HI6RI18S8L0/v6xevVPeS9EJ).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[重叠时`copy()`的行为](https://groups.google.com/forum/#!msg/Golang-Nuts/HI6RI18S8L0/v6xevVPeS9EJ)。'
