- en: Testing Is the Engineering Rigor of Software Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发的工程严谨性测试
- en: Testing Is the Engineering Rigor of Software Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发的工程严谨性测试
- en: Developers love to use tortured metaphors when trying to explain what it is
    they do to family members, spouses, and other non-techies. We frequently resort
    to bridge building and other "hard" engineering disciplines. All these metaphors
    fall down quickly, though, when you start trying to push them too hard. It turns
    out that software development is *not* like many of the "hard" engineering disciplines
    in lots of important ways.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员喜欢在试图向家人、配偶和其他非技术人士解释他们所做的事情时使用拗口的比喻。我们经常诉诸于桥梁建造和其他“硬”工程学科。然而，当你试图过于强调它们时，所有这些比喻很快就会失效。事实证明，从许多重要的方面来看，软件开发与许多“硬”工程学科并不相似。
- en: Compared to "hard" engineering, the software development world is at about the
    same place the bridge builders were when the common strategy was to build a bridge
    and then roll something heavy over it. If it stayed up, it was a good bridge.
    If not, well, time to go back to the drawing board. Over the past few thousand
    years, engineers have developed mathematics and physics they can use for a structural
    solution without having to build it to see what it does. We don't have anything
    like that in software, and perhaps never will because software is in fact very
    different. For a deep-dive exploration of the comparison between software "engineering"
    and regular engineering, ["What is Software Design?"](http://www.developerdotstar.com/mag/articles/reeves_design.html),
    written by Jack Reeves in *C++ Journal* in 1992, is a classic. Even though it
    was written almost two decades ago, it is still remarkably accurate. He painted
    a gloomy picture in this comparison, but the thing that was missing in 1992 was
    a strong testing ethos for software.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与“硬”工程相比，软件开发领域的处境大致相同于桥梁建造者在常见策略是先建造一座桥梁，然后把重物滚过去的情况。如果它保持不倒，那就是一座好桥。如果不行，那么，是时候回到绘图板上重新设计了。在过去的几千年里，工程师们已经发展出了他们可以用于结构解决方案的数学和物理学，而不必先建造出来看看它的表现。我们在软件方面没有任何像那样的东西，也许永远不会有，因为软件实际上是非常不同的。如果你想深入探讨软件“工程”和常规工程之间的比较，《[软件设计是什么？](http://www.developerdotstar.com/mag/articles/reeves_design.html)》这篇文章是一部经典之作，由杰克·里夫斯于1992年在*C++
    Journal*上撰写。尽管它几乎是二十年前写的，但它仍然非常准确。在这个比较中，他描绘了一个阴郁的画面，但1992年缺少的是软件的强大测试理念。
- en: 'Testing "hard" things is tough because you have to build them to test them,
    which discourages speculative building just to see what will happen. But the building
    process in software is ridiculously cheap. We''ve developed an entire ecosystem
    of tools that make it easy to do just that: unit testing, mock objects, test harnesses,
    and lots of other stuff. Other engineers would love to be able to build something
    and test it under realistic conditions. As software developers, we should embrace
    testing as the primary (but not the only) verification mechanism for software.
    Rather than waiting for some sort of calculus for software, we already have the
    tools at our disposal to ensure good engineering practices. Viewed in this light,
    we now have ammunition against managers who tell us "We don''t have time to test."
    A bridge builder would never hear from their boss "Don''t bother doing structural
    analysis on that building — we have a tight deadline." The recognition that testing
    is indeed the path to reproducibility and quality in software allows us as developers
    to push back on arguments against it as professionally irresponsible.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 测试“硬”东西是困难的，因为你必须建造它们才能测试它们，这会阻止对建造的投机行为，只是为了看看会发生什么。但是，软件开发过程中的建造过程却非常廉价。我们已经开发出了整个生态系统的工具，使这变得容易实现：单元测试、模拟对象、测试工具和其他大量工具。其他工程师希望能够构建出一些东西并在真实条件下进行测试。作为软件开发人员，我们应该将测试视为软件的主要（但不是唯一）验证机制。我们已经拥有了工具来确保良好的工程实践，而不是等待某种软件的微积分。以这种光线来看，我们现在有了反驳那些认为测试是不负责任的专业行为的论据。一个桥梁建造者永远不会听到他们的老板说“不要为那座建筑进行结构分析——我们的时间很紧张。”承认测试确实是软件的可重复性和质量之路，使我们作为开发人员能够反驳那些反对测试的论点，认为这是职业上不负责任的。
- en: Testing takes time, just like structural analysis takes time. Both activities
    ensure the quality of the end product. It's time for software developers to take
    up the mantle of responsibility for what they produce. Testing alone isn't sufficient,
    but it is necessary. Testing ***is*** the engineering rigor of software development.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 测试需要时间，就像结构分析需要时间一样。这两项活动都确保最终产品的质量。是时候让软件开发人员承担起他们所生产的责任了。单单进行测试是不够的，但却是必要的。测试***是***软件开发的工程严谨性。
- en: By [Neal Ford](http://programmer.97things.oreilly.com/wiki/index.php/Neal_Ford)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[尼尔·福特](http://programmer.97things.oreilly.com/wiki/index.php/Neal_Ford)
