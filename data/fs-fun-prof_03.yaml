- en: Installing and using F#
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和使用 F#
- en: The F# compiler is a free and open source tool which is available for Windows,
    Mac and Linux (via Mono). Find out more about F# and how to install it at the
    [F# Foundation](http://fsharp.org/).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: F# 编译器是一个免费的开源工具，可用于 Windows、Mac 和 Linux（通过 Mono）。了解更多关于 F# 以及如何安装它的信息，请访问[F#
    基金会](http://fsharp.org/)。
- en: You can use it with an IDE (Visual Studio, MonoDevelop), or with your favorite
    editor (VS Code and Atom have especially good F# support using [Ionide](http://ionide.io/)),
    or simply as a standalone command line compiler.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 IDE（Visual Studio、MonoDevelop）中使用它，或者在你喜欢的编辑器中使用它（VS Code 和 Atom 使用[Ionide](http://ionide.io/)具有特���好的
    F# 支持），或者简单地作为一个独立的命令行编译器。
- en: If you don't want to install anything, you can try the [.NET Fiddle](https://dotnetfiddle.net/)
    site, which is an interactive environment where you can explore F# in your web
    browser. You should be able to run most of the code on this site there.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想安装任何东西，你可以尝试[.NET Fiddle](https://dotnetfiddle.net/)网站，这是一个交互式环境，你可以在网页浏览器中探索
    F#。你应该能够在那里运行这个网站上的大部分代码。
- en: Working with the code examples
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用代码示例
- en: Once you have F# installed and running, you can follow along with the code samples.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装并运行了 F#，你就可以跟着代码示例进行学习。
- en: The best way to run the code examples on this site is to type the code into
    an `.FSX` script file, which you can then send to the F# interactive window for
    evaluation. Alternatively you can type the examples directly into the F# interactive
    console window. I would recommend the script file approach for anything other
    than one or two lines.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个网站上运行代码示例的最佳方法是将代码输入到一个`.FSX`脚本文件中，然后将其发送到 F# 交互窗口进行评估。或者你可以直接将示例输入到 F# 交互控制台窗口中。除了一两行代码之外，我建议使用脚本文件的方法。
- en: For the longer examples, the code is downloadable from this website -- the links
    will be in the post.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较长的示例，代码可以从这个网站下载 -- 链接将在帖子中提供。
- en: Finally, I would encourage you to play with and modify the examples. If you
    then get compiler errors, do check out the ["troubleshooting F#"](index5.html)
    page, which explains the most common problems, and how to fix them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我鼓励你玩弄和修改这些示例。如果你遇到编译器错误，请查看["F# 故障排除"](index5.html)页面，该页面解释了最常见的问题以及如何解决它们。
- en: Projects and Solutions
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目和解决方案
- en: F# uses exactly the same "projects" and "solutions" model that C# does, so if
    you are familiar with that, you should be able to create an F# executable quite
    easily.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: F# 使用与 C# 相同的“项目”和“解决方案”模型，因此如果你熟悉这一点，你应该能够很容易地创建一个 F# 可执行文件。
- en: To make a file that will be compiled as part of the project, rather than a script
    file, use the `.fs` extension. `.fsx` files will not be compiled.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个将作为项目的一部分编译的文件，而不是脚本文件，请使用`.fs`扩展名。`.fsx`文件不会被编译。
- en: 'An F# project does have some major differences from C# though:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与 C# 相比，F# 项目确实有一些主要区别：
- en: The F# files are organized *linearly*, not in a hierarchy of folders and subfolders.
    In fact, there is no "add new folder" option in an F# project! This is not generally
    a problem, because, unlike C#, an F# file contains more than one class. What might
    be a whole folder of classes in C# might easily be a single file in F#.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: F# 文件是*线性*组织的，而不是以文件夹和子文件夹的层次结构组织。事实上，在 F# 项目中没有“添加新文件夹”的选项！这通常不是问题，因为与 C# 不同，一个
    F# 文件包含多个类。在 C# 中可能是一个文件夹的整个类，而在 F# 中可能很容易成为一个单独的文件。
- en: 'The *order of the files in the project is very important*: a "later" F# file
    can use the public types defined in an "earlier" F# file, but not the other way
    around. Consequently, you cannot have any circular dependencies between files.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目中文件的*顺序非常重要*：一个“后来”的 F# 文件可以使用在“先前”的 F# 文件中定义的公共类型，但反之则不行。因此，文件之间不能有循环依赖关系。
- en: You can change the order of the files by right-clicking and doing "Move Up"
    or "Move Down". Similarly, when creating a new file, you can choose to "Add Above"
    or "Add Below" an existing file.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过右键单击并选择“上移”或“下移”来更改文件的顺序。同样，在创建新文件时，你可以选择在现有文件的“上方添加”或“下方添加”。
- en: Shell scripts in F#
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 F# 中的 Shell 脚本
- en: You can also use F# as a scripting language, rather than having to compile code
    into an EXE. This is done by using the FSI program, which is not only a console
    but can also be used to run scripts in the same way that you might use Python
    or Powershell.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将 F# 用作脚本语言，而不必将代码编译成 EXE。这是通过使用 FSI 程序来实现的，它不仅是一个控制台，还可以用于运行脚本，就像你可能会使用
    Python 或 Powershell 一样。
- en: This is very convenient when you want to quickly create some code without compiling
    it into a full blown application. The F# build automation system ["FAKE"](https://github.com/fsharp/FAKE)
    is an example of how useful this can be.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想快速创建一些代码而不将其编译成完整的应用程序时，这非常方便。F#构建自动化系统["FAKE"](https://github.com/fsharp/FAKE)就是一个展示这种用途有多有用的例子。
- en: To see how you can do this yourself, here is a little example script that downloads
    a web page to a local file. First create an FSX script file -- call it "`ShellScriptExample.fsx`"
    -- and paste in the following code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何自己做到这一点，这里有一个小例子脚本，可以将网页下载到本地文件。首先创建一个FSX脚本文件 -- 叫做"`ShellScriptExample.fsx`"
    -- 然后粘贴以下代码。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Don't worry about how the code works right now. It's pretty crude anyway, and
    a better example would add error handling, and so on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心代码现在是如何工作的。它相当粗糙，一个更好的示例会添加错误处理等功能。
- en: 'To run this script, open a command window in the same directory and type:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此脚本，请在相同目录中打开一个命令窗口并输入：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you play with the code on this site, you might want to experiment with creating
    some scripts at the same time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在这个网站上玩弄代码时，您可能想尝试同时创建一些脚本。
