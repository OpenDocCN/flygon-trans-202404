- en: TypecheckingA Typechecker for STLC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypecheckingA Typechecker for STLC
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: (* This short chapter constructs such a function and proves it    correct. *)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: (* This short chapter constructs such a function and proves it    correct. *)
- en: Require Import Coq.Bool.Bool.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Require Import Coq.Bool.Bool.
- en: Require Import Maps.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Require Import Maps.
- en: Require Import Smallstep.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Require Import Smallstep.
- en: Require Import Stlc.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Require Import Stlc.
- en: Module STLCChecker.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Module STLCChecker.
- en: Import STLC.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Import STLC.
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Fixpoint beq_ty (T[1] T[2]:ty) : bool :='
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fixpoint beq_ty (T[1] T[2]:ty) : bool :='
- en: match T[1],T[2] with
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: match T[1],T[2] with
- en: '| TBool, TBool ⇒'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '| TBool, TBool ⇒'
- en: 'true'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 'true'
- en: '| TArrow T[11] T[12], TArrow T[21] T[22] ⇒'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '| TArrow T[11] T[12], TArrow T[21] T[22] ⇒'
- en: andb (beq_ty T[11] T[21]) (beq_ty T[12] T[22])
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: andb (beq_ty T[11] T[21]) (beq_ty T[12] T[22])
- en: '| _,_ ⇒'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '| _,_ ⇒'
- en: 'false'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'false'
- en: end.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Lemma beq_ty_refl : ∀T[1],'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 'Lemma beq_ty_refl : ∀T[1],'
- en: beq_ty T[1] T[1] = true.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: beq_ty T[1] T[1] = true.
- en: Proof.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof.
- en: intros T[1]. induction T[1]; simpl.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: intros T[1]. induction T[1]; simpl.
- en: reflexivity.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: reflexivity.
- en: rewrite IHT1_1. rewrite IHT1_2. reflexivity. Qed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: rewrite IHT1_1. rewrite IHT1_2. reflexivity. Qed.
- en: 'Lemma beq_ty__eq : ∀T[1] T[2],'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'Lemma beq_ty__eq : ∀T[1] T[2],'
- en: beq_ty T[1] T[2] = true → T[1] = T[2].
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: beq_ty T[1] T[2] = true → T[1] = T[2].
- en: Proof with auto.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof with auto.
- en: intros T[1]. induction T[1]; intros T[2] Hbeq; destruct T[2]; inversion Hbeq.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: intros T[1]. induction T[1]; intros T[2] Hbeq; destruct T[2]; inversion Hbeq.
- en: '- (* T[1]=TBool *)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T[1]=TBool *)'
- en: reflexivity.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: reflexivity.
- en: '- (* T[1]=TArrow T1_1 T1_2 *)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T[1]=TArrow T1_1 T1_2 *)'
- en: rewrite [andb_true_iff](http://coq.inria.fr/library/Coq.Bool.Bool.html#andb_true_iff)
    in H[0]. inversion H[0] as [Hbeq1 Hbeq2].
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: rewrite [andb_true_iff](http://coq.inria.fr/library/Coq.Bool.Bool.html#andb_true_iff)
    in H[0]. inversion H[0] as [Hbeq1 Hbeq2].
- en: apply IHT1_1 in Hbeq1. apply IHT1_2 in Hbeq2. subst... Qed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: apply IHT1_1 in Hbeq1. apply IHT1_2 in Hbeq2. subst... Qed.
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Fixpoint type_check (Γ:context) (t:tm) : option ty :='
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fixpoint type_check (Γ:context) (t:tm) : option ty :='
- en: match t with
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: match t with
- en: '| tvar x ⇒'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '| tvar x ⇒'
- en: Γ x
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Γ x
- en: '| tabs x T[11] t[12] ⇒'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '| tabs x T[11] t[12] ⇒'
- en: match type_check (update Γ x T[11]) t[12] with
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: match type_check (update Γ x T[11]) t[12] with
- en: '| Some T[12] ⇒ Some (TArrow T[11] T[12])'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some T[12] ⇒ Some (TArrow T[11] T[12])'
- en: '| _ ⇒ None'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ None'
- en: end
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '| tapp t[1] t[2] ⇒'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '| tapp t[1] t[2] ⇒'
- en: match type_check Γ t[1], type_check Γ t[2] with
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: match type_check Γ t[1], type_check Γ t[2] with
- en: '| Some (TArrow T[11] T[12]),Some T[2] ⇒'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some (TArrow T[11] T[12]),Some T[2] ⇒'
- en: if beq_ty T[11] T[2] then Some T[12] else None
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: if beq_ty T[11] T[2] then Some T[12] else None
- en: '| _,_ ⇒ None'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '| _,_ ⇒ None'
- en: end
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '| ttrue ⇒'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '| ttrue ⇒'
- en: Some TBool
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Some TBool
- en: '| tfalse ⇒'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '| tfalse ⇒'
- en: Some TBool
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Some TBool
- en: '| tif guard t f ⇒'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '| tif guard t f ⇒'
- en: match type_check Γ guard with
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: match type_check Γ guard with
- en: '| Some TBool ⇒'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some TBool ⇒'
- en: match type_check Γ t, type_check Γ f with
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: match type_check Γ t, type_check Γ f with
- en: '| Some T[1], Some T[2] ⇒'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some T[1], Some T[2] ⇒'
- en: if beq_ty T[1] T[2] then Some T[1] else None
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: if beq_ty T[1] T[2] then Some T[1] else None
- en: '| _,_ ⇒ None'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '| _,_ ⇒ None'
- en: end
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '| _ ⇒ None'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ None'
- en: end
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Theorem type_checking_sound : ∀Γ t T,'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 'Theorem type_checking_sound : ∀Γ t T,'
- en: type_check Γ t = Some T → has_type Γ t T.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: type_check Γ t = Some T → has_type Γ t T.
- en: Proof with eauto.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof with eauto.
- en: intros Γ t. generalize dependent Γ.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: intros Γ t. generalize dependent Γ.
- en: induction t; intros Γ T Htc; inversion Htc.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: induction t; intros Γ T Htc; inversion Htc.
- en: '- (* tvar *) eauto.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tvar *) eauto.'
- en: '- (* tapp *)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tapp *)'
- en: remember ([type_check](Typechecking.html#STLCChecker.type_check) Γ t[1]) as
    TO[1].
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: remember ([type_check](Typechecking.html#STLCChecker.type_check) Γ t[1]) as
    TO[1].
- en: remember ([type_check](Typechecking.html#STLCChecker.type_check) Γ t[2]) as
    TO[2].
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: remember ([type_check](Typechecking.html#STLCChecker.type_check) Γ t[2]) as
    TO[2].
- en: destruct TO[1] as [T[1]|]; try solve_by_invert;
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: destruct TO[1] as [T[1]|]; try solve_by_invert;
- en: destruct T[1] as [|T[11] T[12]]; try solve_by_invert.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: destruct T[1] as [|T[11] T[12]]; try solve_by_invert.
- en: destruct TO[2] as [T[2]|]; try solve_by_invert.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: destruct TO[2] as [T[2]|]; try solve_by_invert.
- en: 'destruct ([beq_ty](Typechecking.html#STLCChecker.beq_ty) T[11] T[2]) eqn: Heqb;'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 'destruct ([beq_ty](Typechecking.html#STLCChecker.beq_ty) T[11] T[2]) eqn: Heqb;'
- en: try solve_by_invert.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: try solve_by_invert.
- en: apply [beq_ty__eq](Typechecking.html#STLCChecker.beq_ty__eq) in Heqb.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: apply [beq_ty__eq](Typechecking.html#STLCChecker.beq_ty__eq) in Heqb.
- en: inversion H[0]; subst...
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: inversion H[0]; subst...
- en: '- (* tabs *)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tabs *)'
- en: rename i into y. rename t into T[1].
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: rename i into y. rename t into T[1].
- en: remember ([update](Maps.html#update) Γ y T[1]) as G'.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: remember ([update](Maps.html#update) Γ y T[1]) as G'.
- en: remember ([type_check](Typechecking.html#STLCChecker.type_check) G' t[0]) as
    TO[2].
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: remember ([type_check](Typechecking.html#STLCChecker.type_check) G' t[0]) as
    TO[2].
- en: destruct TO[2]; try solve_by_invert.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: destruct TO[2]; try solve_by_invert.
- en: inversion H[0]; subst...
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: inversion H[0]; subst...
- en: '- (* ttrue *) eauto.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* ttrue *) eauto.'
- en: '- (* tfalse *) eauto.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tfalse *) eauto.'
- en: '- (* tif *)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tif *)'
- en: remember ([type_check](Typechecking.html#STLCChecker.type_check) Γ t[1]) as
    TOc.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: remember ([type_check](Typechecking.html#STLCChecker.type_check) Γ t[1]) as
    TOc.
- en: remember ([type_check](Typechecking.html#STLCChecker.type_check) Γ t[2]) as
    TO[1].
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: remember ([type_check](Typechecking.html#STLCChecker.type_check) Γ t[2]) as
    TO[1].
- en: remember ([type_check](Typechecking.html#STLCChecker.type_check) Γ t[3]) as
    TO[2].
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: remember ([type_check](Typechecking.html#STLCChecker.type_check) Γ t[3]) as
    TO[2].
- en: destruct TOc as [Tc|]; try solve_by_invert.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: destruct TOc as [Tc|]; try solve_by_invert.
- en: destruct Tc; try solve_by_invert.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: destruct Tc; try solve_by_invert.
- en: destruct TO[1] as [T[1]|]; try solve_by_invert.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对 TO[1] 进行分析得到 [T[1]|]; 尝试通过反演解决。
- en: destruct TO[2] as [T[2]|]; try solve_by_invert.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对 TO[2] 进行分析得到 [T[2]|]; 尝试通过反演解决。
- en: destruct ([beq_ty](Typechecking.html#STLCChecker.beq_ty) T[1] T[2]) eqn:Heqb;
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对 ([beq_ty](Typechecking.html#STLCChecker.beq_ty) T[1] T[2]) 进行分析得到 Heqb;
- en: try solve_by_invert.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过反演解决。
- en: apply [beq_ty__eq](Typechecking.html#STLCChecker.beq_ty__eq) in Heqb.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [beq_ty__eq](Typechecking.html#STLCChecker.beq_ty__eq) 在 Heqb 中。
- en: inversion H[0]. subst. subst...
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 H[0]。替换。替换...
- en: Qed.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成。
- en: 'Theorem type_checking_complete : ∀Γ t T,'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '定理 type_checking_complete : ∀Γ t T,'
- en: has_type Γ t T → type_check Γ t = Some T.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Γ t T 下有类型 t T → type_check Γ t = Some T。
- en: Proof with auto.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明使用自动化。
- en: intros Γ t T Hty.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 Γ t T Hty。
- en: induction Hty; simpl.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Hty 进行归纳; 简化。
- en: '- (* T_Var *) eauto.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Var *) eauto。'
- en: '- (* T_Abs *) rewrite IHHty...'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_Abs *) 重写 IHHty...'
- en: '- (* T_App *)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_App *)'
- en: rewrite IHHty1. rewrite IHHty2.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 重写 IHHty1。重写 IHHty2。
- en: rewrite ([beq_ty_refl](Typechecking.html#STLCChecker.beq_ty_refl) T[11])...
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 重写 ([beq_ty_refl](Typechecking.html#STLCChecker.beq_ty_refl) T[11])...
- en: '- (* T_True *) eauto.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_True *) eauto。'
- en: '- (* T_False *) eauto.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_False *) eauto.'
- en: '- (* T_If *) rewrite IHHty1. rewrite IHHty2.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* T_If *) 重写 IHHty1。重写 IHHty2。'
- en: rewrite IHHty3. rewrite ([beq_ty_refl](Typechecking.html#STLCChecker.beq_ty_refl)
    T)...
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 重写 IHHty3。重写 ([beq_ty_refl](Typechecking.html#STLCChecker.beq_ty_refl) T)...
- en: Qed.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成。
- en: End STLCChecker.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 结束 STLCChecker。
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Module TypecheckerExtensions.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 TypecheckerExtensions。
- en: Require Import MoreStlc.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 MoreStlc。
- en: Import STLCExtended.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 STLCExtended。
- en: 'Fixpoint beq_ty (T[1] T[2]: ty) : bool :='
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '递归 beq_ty (T[1] T[2]: ty) : bool :='
- en: match T[1],T[2] with
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 T[1],T[2] 的情况与
- en: '| TNat, TNat ⇒'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '| TNat, TNat ⇒'
- en: 'true'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'true'
- en: '| TUnit, TUnit ⇒'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '| TUnit, TUnit ⇒'
- en: 'true'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'true'
- en: '| TArrow T[11] T[12], TArrow T[21] T[22] ⇒'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '| TArrow T[11] T[12], TArrow T[21] T[22] ⇒'
- en: andb (beq_ty T[11] T[21]) (beq_ty T[12] T[22])
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: andb (beq_ty T[11] T[21]) (beq_ty T[12] T[22])
- en: '| TProd T[11] T[12], TProd T[21] T[22] ⇒'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '| TProd T[11] T[12], TProd T[21] T[22] ⇒'
- en: andb (beq_ty T[11] T[21]) (beq_ty T[12] T[22])
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: andb (beq_ty T[11] T[21]) (beq_ty T[12] T[22])
- en: '| TSum T[11] T[12], TSum T[21] T[22] ⇒'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '| TSum T[11] T[12], TSum T[21] T[22] ⇒'
- en: andb (beq_ty T[11] T[21]) (beq_ty T[12] T[22])
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: andb (beq_ty T[11] T[21]) (beq_ty T[12] T[22])
- en: '| TList T[11], TList T[21] ⇒'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '| TList T[11], TList T[21] ⇒'
- en: beq_ty T[11] T[21]
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: beq_ty T[11] T[21]
- en: '| _,_ ⇒'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '| _,_ ⇒'
- en: 'false'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 'false'
- en: end.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 结束。
- en: 'Lemma beq_ty_refl : ∀T[1],'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '引理 beq_ty_refl : ∀T[1],'
- en: beq_ty T[1] T[1] = true.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: beq_ty T[1] T[1] = true。
- en: Proof.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: intros T[1].
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 T[1]。
- en: induction T[1]; simpl;
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对 T[1] 进行归纳; 简化;
- en: try reflexivity;
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试反射;
- en: try (rewrite IHT1_1; rewrite IHT1_2; reflexivity);
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试 (重写 IHT1_1; 重写 IHT1_2; 反射);
- en: try (rewrite IHT1; reflexivity). Qed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试 (重写 IHT1; 反射). 完成。
- en: 'Lemma beq_ty__eq : ∀T[1] T[2],'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '引理 beq_ty__eq : ∀T[1] T[2],'
- en: beq_ty T[1] T[2] = true → T[1] = T[2].
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当 beq_ty T[1] T[2] = true 时，T[1] = T[2]。
- en: Proof.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: intros T[1].
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 T[1]。
- en: induction T[1]; intros T[2] Hbeq; destruct T[2]; inversion Hbeq;
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 对 T[1] 进行归纳; 引入 T[2] Hbeq; 对 T[2] 进行分析; 反演 Hbeq;
- en: try reflexivity;
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试反射;
- en: try (rewrite andb_true_iff in H[0]; inversion H[0] as [Hbeq1 Hbeq2];
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试 (在 H[0] 中重写 andb_true_iff; 反演 H[0] 得到 [Hbeq1 Hbeq2];
- en: apply IHT1_1 in Hbeq1; apply IHT1_2 in Hbeq2; subst; auto);
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: apply IHT1_1 在 Hbeq1 中; apply IHT1_2 在 Hbeq2 中; 替换; 自动);
- en: try (apply IHT1 in Hbeq; subst; auto).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试 (应用 IHT1 在 Hbeq; 替换; 自动).
- en: Qed.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 完成。
- en: 'Fixpoint type_check (Γ:context) (t:tm) : option ty :='
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '递归类型检查 (Γ:context) (t:tm) : option ty :='
- en: match t with
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 t 与
- en: '| tvar x ⇒'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '| tvar x ⇒'
- en: Γ x
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Γ x
- en: '| tabs x T[11] t[12] ⇒'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '| tabs x T[11] t[12] ⇒'
- en: match type_check (update Γ x T[11]) t[12] with
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 type_check (update Γ x T[11]) t[12] 的结果与
- en: '| Some T[12] ⇒ Some (TArrow T[11] T[12])'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some T[12] ⇒ Some (TArrow T[11] T[12])'
- en: '| _ ⇒ None'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ None'
- en: end
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 结束
- en: '| tapp t[1] t[2] ⇒'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '| tapp t[1] t[2] ⇒'
- en: match type_check Γ t[1], type_check Γ t[2] with
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 type_check Γ t[1], type_check Γ t[2] 的结果与
- en: '| Some (TArrow T[11] T[12]),Some T[2] ⇒'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some (TArrow T[11] T[12]),Some T[2] ⇒'
- en: if beq_ty T[11] T[2] then Some T[12] else None
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 beq_ty T[11] T[2] 然后返回 Some T[12] 否则返回 None
- en: '| _,_ ⇒ None'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '| _,_ ⇒ None'
- en: end
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 结束
- en: '| tnat _ ⇒'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '| tnat _ ⇒'
- en: Some TNat
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Some TNat
- en: '| tsucc t[1] ⇒'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '| tsucc t[1] ⇒'
- en: match type_check Γ t[1] with
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 type_check Γ t[1] 的结果与
- en: '| Some TNat ⇒ Some TNat'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some TNat ⇒ Some TNat'
- en: '| _ ⇒ None'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ None'
- en: end
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 结束
- en: '| tpred t[1] ⇒'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '| tpred t[1] ⇒'
- en: match type_check Γ t[1] with
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 type_check Γ t[1] 的结果与
- en: '| Some TNat ⇒ Some TNat'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some TNat ⇒ Some TNat'
- en: '| _ ⇒ None'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ None'
- en: end
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 结束
- en: '| tmult t[1] t[2] ⇒'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '| tmult t[1] t[2] ⇒'
- en: match type_check Γ t[1], type_check Γ t[2] with
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 type_check Γ t[1], type_check Γ t[2] 的结果与
- en: '| Some TNat, Some TNat ⇒ Some TNat'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some TNat, Some TNat ⇒ Some TNat'
- en: '| _,_ ⇒ None'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '| _,_ ⇒ None'
- en: end
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 结束
- en: '| tif0 guard t f ⇒'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '| tif0 guard t f ⇒'
- en: match type_check Γ guard with
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 type_check Γ guard 的结果与
- en: '| Some TNat ⇒'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some TNat ⇒'
- en: match type_check Γ t, type_check Γ f with
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 type_check Γ t, type_check Γ f 的结果与
- en: '| Some T[1], Some T[2] ⇒'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some T[1], Some T[2] ⇒'
- en: if beq_ty T[1] T[2] then Some T[1] else None
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 beq_ty T[1] T[2] 然后返回 Some T[1] 否则返回 None
- en: '| _,_ ⇒ None'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '| _,_ ⇒ None'
- en: end
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 结束
- en: '| _ ⇒ None'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ None'
- en: end
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 结束
- en: (* FILL IN HERE *)
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写 *)
- en: '| tlcase t[0] t[1] x[21] x[22] t[2] ⇒'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '| tlcase t[0] t[1] x[21] x[22] t[2] ⇒'
- en: match type_check Γ t[0] with
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 type_check Γ t[0] 的结果与
- en: '| Some (TList T) ⇒'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some (TList T) ⇒'
- en: match type_check Γ t[1],
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 type_check Γ t[1],
- en: type_check (update (update Γ x[22] (TList T)) x[21] T) t[2] with
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: type_check (update (update Γ x[22] (TList T)) x[21] T) t[2] 的结果与
- en: '| Some T[1]'', Some T[2]'' ⇒'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some T[1]'', Some T[2]'' ⇒'
- en: if beq_ty T[1]' T[2]' then Some T[1]' else None
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 beq_ty T[1]' T[2]' 然后 Some T[1]' else 无
- en: '| _,_ ⇒ None'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '| _,_ ⇒ 无'
- en: end
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 结束
- en: '| _ ⇒ None'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ 无'
- en: end
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 结束
- en: (* FILL IN HERE *)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写 *)
- en: '| _ ⇒ None  (* ... and delete this line *)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '| _ ⇒ 无  (* ... 并删除此行 *)'
- en: end.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 结束。
- en: (* Just for fun, we'll do the soundness proof with just a bit more    automation than above, using these "mega-tactics": *)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: (* 仅仅为了好玩，我们将使用比上面稍微更多的自动化来进行完备性证明，使用这些“超级策略”：*)
- en: Ltac invert_typecheck Γ t T :=
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 反演类型检查 Γ t T :=
- en: remember (type_check Γ t) as TO;
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 记住（type_check Γ t）为 TO;
- en: destruct TO as [T|];
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 将 TO 视为 [T|]；
- en: try solve_by_invert; try (inversion H[0]; eauto); try (subst; eauto).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试解决反演；尝试（反演 H[0]; 自动）; 尝试（替换; 自动）。
- en: Ltac fully_invert_typecheck Γ t T T[1] T[2] :=
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 完全反演类型检查 Γ t T T[1] T[2] :=
- en: let TX := fresh T in
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让 TX := 新 T in
- en: remember (type_check Γ t) as TO;
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 记住（type_check Γ t）为 TO;
- en: destruct TO as [TX|]; try solve_by_invert;
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 将 TO 视为 [TX|]；尝试解决反演；
- en: destruct TX as [T[1] T[2]| | | T[1] T[2]| T[1] T[2]| T[1]];
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 将 TX 视为 [T[1] T[2]| | | T[1] T[2]| T[1] T[2]| T[1]]；
- en: try solve_by_invert; try (inversion H[0]; eauto); try (subst; eauto).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试解决反演；尝试（反演 H[0]; 自动）; 尝试（替换; 自动）。
- en: Ltac case_equality S T :=
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac 情况相等 S T :=
- en: 'destruct (beq_ty S T) eqn: Heqb;'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 分解（beq_ty S T）等式为：Heqb;
- en: inversion H[0]; apply beq_ty__eq in Heqb; subst; subst; eauto.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 H[0]; 应用 beq_ty__eq 在 Heqb 中; 替换; 替换; 自动。
- en: 'Theorem type_checking_sound : ∀Γ t T,'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 定理类型检查声音：∀Γ t T，
- en: type_check Γ t = Some T → has_type Γ t T.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: type_check Γ t = Some T → Γ t T。
- en: Proof with eauto.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 证明与自动。
- en: intros Γ t. generalize dependent Γ.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 Γ t。泛化 Γ。
- en: induction t; intros Γ T Htc; inversion Htc.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 对 t 进行归纳; 对 Γ T Htc 进行反演。
- en: '- (* tvar *) eauto.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tvar *) 自动。'
- en: '- (* tapp *)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tapp *)'
- en: fully_invert_typecheck Γ t[1] T[1] T[11] T[12].
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 完全反演类型检查 Γ t[1] T[1] T[11] T[12]。
- en: invert_typecheck Γ t[2] T[2].
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 反演类型检查 Γ t[2] T[2]。
- en: case_equality T[11] T[2].
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 情况相等 T[11] T[2]。
- en: '- (* tabs *)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tabs *)'
- en: rename i into x. rename t into T[1].
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 将 i 重命名为 x。将 t 重命名为 T[1]。
- en: remember (update Γ x T[1]) as Γ'.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 记住（更新 Γ x T[1]）为 Γ'。
- en: invert_typecheck Γ' t[0] T[0].
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 反演类型检查 Γ' t[0] T[0]。
- en: '- (* tnat *) eauto.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tnat *) 自动。'
- en: '- (* tsucc *)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tsucc *)'
- en: rename t into t[1].
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 将 t 重命名为 t[1]。
- en: fully_invert_typecheck Γ t[1] T[1] T[11] T[12].
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 完全反演类型检查 Γ t[1] T[1] T[11] T[12]。
- en: '- (* tpred *)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tpred *)'
- en: rename t into t[1].
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 将 t 重命名为 t[1]。
- en: fully_invert_typecheck Γ t[1] T[1] T[11] T[12].
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 完全反演类型检查 Γ t[1] T[1] T[11] T[12]。
- en: '- (* tmult *)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tmult *)'
- en: fully_invert_typecheck Γ t[1] T[1] T[11] T[12].
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 完全反演类型检查 Γ t[1] T[1] T[11] T[12]。
- en: fully_invert_typecheck Γ t[2] T[2] T[21] T[12].
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 完全反演类型检查 Γ t[2] T[2] T[21] T[12]。
- en: '- (* tif0 *)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tif0 *)'
- en: fully_invert_typecheck Γ t[1] T[1] T[11] T[12].
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 完全反演类型检查 Γ t[1] T[1] T[11] T[12]。
- en: invert_typecheck Γ t[2] T[2].
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 反演类型检查 Γ t[2] T[2]。
- en: invert_typecheck Γ t[3] T[3].
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 反演类型检查 Γ t[3] T[3]。
- en: case_equality T[2] T[3].
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 情况相等 T[2] T[3]。
- en: (* FILL IN HERE *)
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写 *)
- en: '- (* tlcase *)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* tlcase *)'
- en: rename i into x[31]. rename i[0] into x[32].
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 将 i 视为 x[31]。将 i[0] 视为 x[32]。
- en: fully_invert_typecheck Γ t[1] T[1] T[11] T[12].
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 完全反演类型检查 Γ t[1] T[1] T[11] T[12]。
- en: invert_typecheck Γ t[2] T[2].
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 反演类型检查 Γ t[2] T[2]。
- en: remember (update (update Γ x[32] (TList T[11])) x[31] T[11]) as Gamma'2.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 记住（更新（更新 Γ x[32]（TList T[11]））x[31] T[11]）为 Gamma'2。
- en: invert_typecheck Gamma'2 t[3] T[3].
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 反演类型检查 Gamma'2 t[3] T[3]。
- en: case_equality T[2] T[3].
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 情况相等 T[2] T[3]。
- en: (* FILL IN HERE *)
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写 *)
- en: Qed.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 完成。
- en: 'Theorem type_checking_complete : ∀Γ t T,'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 定理类型检查完整性：∀Γ t T，
- en: has_type Γ t T → type_check Γ t = Some T.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Γ t T → type_check Γ t = Some T。
- en: Proof.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: intros Γ t T Hty.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 Γ t T Hty。
- en: induction Hty; simpl;
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Hty 进行归纳; 简化;
- en: try (rewrite IHHty);
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试（重写 IHHty）;
- en: try (rewrite IHHty1);
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试（重写 IHHty1）;
- en: try (rewrite IHHty2);
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试（重写 IHHty2）;
- en: try (rewrite IHHty3);
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试（重写 IHHty3）;
- en: try (rewrite (beq_ty_refl T));
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试（重写（beq_ty_refl T））;
- en: try (rewrite (beq_ty_refl T[1]));
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试（重写（beq_ty_refl T[1]））;
- en: try (rewrite (beq_ty_refl T[2]));
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试（重写（beq_ty_refl T[2]））;
- en: eauto.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 自动。
- en: Admitted. (* ... and delete this line *)
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 已批准。 (* ... 并删除此行 *)
- en: (*  Qed. (* ... and uncomment this one *) *)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: (*  完成。(* ... 并取消注释此行 *) *)
- en: End TypecheckerExtensions.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 结束 TypecheckerExtensions。
- en: '[PRE6]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Module StepFunction.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 StepFunction。
- en: Import TypecheckerExtensions.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 TypecheckerExtensions。
- en: (* FILL IN HERE *)
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写 *)
- en: End StepFunction.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 结束 StepFunction。
- en: '[PRE7]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Module StlcImpl.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 StlcImpl。
- en: Import StepFunction.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 StepFunction。
- en: (* FILL IN HERE *)
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写 *)
- en: End StlcImpl.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 结束 StlcImpl。
- en: '[PRE8]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
