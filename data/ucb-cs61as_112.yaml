- en: Representing Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表示表
- en: Intro
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简介
- en: We have mentioned in Unit 2 that we can store data using a 2 dimensional table
    and, given 2 keys, can fetch the desired data. We can use mutable lists to represent
    this data structure by first building a 1 dimensional table and extending the
    idea.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第2单元中提到，我们可以使用二维表存储数据，并且，给定2个键，可以获取所需数据。我们可以使用可变列表来表示这种数据结构，首先构建一个一维表，然后扩展这个想法。
- en: 'Before We Start: `assoc`'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们开始之前：`assoc`
- en: Before we dive in to tables, we have to explore another Scheme compound procedure,
    `assoc`, which will play a huge role. `assoc` accepts a `key` and a list of pairs,
    and returns the first pair that has `key` as its `car`. If no such pairs exist,
    it returns `#f`. Look at the series of examples below to understand what `assoc`
    does.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论表之前，我们必须探索另一个Scheme复合过程，`assoc`，它将发挥重要作用。`assoc`接受一个`key`和一组对，并返回第一个将`key`作为其`car`的对。如果不存在这样的对，则返回`#f`。查看下面的一系列示例，以了解`assoc`的作用。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is the formal definition for `assoc`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`assoc`的正式定义：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 1-Dimensional Tables
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一维表
- en: In a **1D table**, values are stored under a single key. A table will be designed
    as a list of pairs. Each pairs' `car` hold the key for each value.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个**一维表**中，值存储在单个键下。表将设计为一对对的列表。每对的`car`保存每个值的键。
- en: '![](../Images/985d464e8b5ba9010fdb19facebef760.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/985d464e8b5ba9010fdb19facebef760.jpg)'
- en: In the above table, the breakdown between the keys and values can be seen below.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上表中，键和值之间的关系如下所示。
- en: '| Keys | Values |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 键 | 值 |'
- en: '| --- | --- |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `a` | `1` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `a` | `1` |'
- en: '| `b` | `2` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `b` | `2` |'
- en: '| `c` | `3` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `c` | `3` |'
- en: Why does our table point to a pair that doesn't contain any key-value pair?
    We designed our table so that the first pair holds the symbol `*table*` which
    signifies that the current list structure we're looking at is a table.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们的表指向一个不包含任何键值对的对？我们设计我们的表，使第一个对包含符号`*table*`，这表示我们正在查看的当前列表结构是一个表。
- en: '`make-table`'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`make-table`'
- en: 'Here is the simple constructor for our table:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们表的简单构造函数：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`lookup`'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`lookup`'
- en: To extract information from a table, we use the `lookup` selector, which takes
    a key as argument and returns the associated value (or `#f` if there is no value
    stored under that key). Here's our definition of `lookup`
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要从表中提取信息，我们使用`lookup`选择器，它接受一个键作为参数，并返回关联的值（如果该键下没有存储值，则返回`#f`）。以下是我们对`lookup`的定义
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`insert!`'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`insert!`'
- en: 'To insert a key-value pair in a table, we follow this simple algorithm:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要在表中插入一个键值对，我们遵循这个简单的算法：
- en: If key is already in the list, just update the value
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果键已经在列表中，只需更新值
- en: Otherwise, make a new key-value pair and attach it to the table
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，创建一个新的键值对并将其附加到表中
- en: (define (insert! key value table) (let ((record (assoc key (cdr table)))) (if
    record (set-cdr! record value) (set-cdr! table (cons (cons key value) (cdr table)))))
    'ok)
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (define (insert! key value table) (let ((record (assoc key (cdr table)))) (if
    record (set-cdr! record value) (set-cdr! table (cons (cons key value) (cdr table)))))
    'ok)
- en: 2-Dimensional Tables
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二维表
- en: 'In a **2D table**, each value is specified by *two* keys. We can construct
    such a table as a 1 dimensional table in which each key identifies a subtable.
    Say we have 2 tables: "math" and "letters" with the following key-value pairs.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个**二维表**中，每个值由*两个*键指定。我们可以构建这样一个表，作为一个一维表，其中每个键标识一个子表。假设我们有2个表："math"和"letters"，具有以下键值对。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can put them into one big table:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将它们放入一个大表中：
- en: '![](../Images/ec2e74a211a476ff79993795265f9ed2.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec2e74a211a476ff79993795265f9ed2.jpg)'
- en: '`lookup`'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`lookup`'
- en: To find a value in a 2D table, you will need 2 keys. The first key is used to
    find the correct subtable. The second key is used to find the correct value in
    that subtable.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要在二维表中查找一个值，你需要2个键。第一个键用于找到正确的子表。第二个键用于在该子表中找到正确的值。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`insert`'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`insert`'
- en: To insert into a 2D table, you also need 2 keys. The first key is used to try
    and find the correct subtable. If a subtable with the first key doesn't exist,
    make a new subtable. If the table exists, use the exact same algorithm we have
    for the 1 dimensional `insert!`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要插入到二维表中，你还需要2个键。第一个键用于尝试找到正确的子表。如果第一个键对应的子表不存在，则创建一个新的子表。如果表存在，则使用我们为一维`insert!`所使用的完全相同的算法。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Local Tables
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地表
- en: 'The `lookup` and`insert!` operations defined above take the table as an argument.
    This enables us to use programs that access more than one table. Another way to
    deal with multiple tables is to have separate `lookup` and `insert!` procedures
    for each table. We can do this by representing a table procedurally, as an object
    that maintains an internal table as part of its local state. When sent an appropriate
    message, this "table object'''' supplies the procedure with which to operate on
    the internal table. Here is a generator for two-dimensional tables represented
    in this fashion:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上述定义的`lookup`和`insert!`操作将表作为参数传递。这使我们能够使用访问多个表的程序。处理多个表的另一种方法是为每个表单独拥有`lookup`和`insert!`过程。我们可以通过过程化地表示表格，将其视为维护内部表格作为其本地状态一部分的对象来实现这一点。当发送适当的消息时，“表对象”将提供用于在内部表格上操作的过程。以下是以这种方式表示的二维表格的生成器：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`get` and `put`'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`get`和`put`'
- en: In Unit 2's "Data Directed" subsection, we used a 2D table to store a value
    under 2 keys using the procedures `get` and `put`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二单元的“数据导向”子节中，我们使用一个二维表格来存储两个键下的一个值，使用了`get`和`put`过程。
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can now define these procedures using our tables!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用我们的表来定义这些过程！
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`get` takes as arguments two keys, and `put` takes as arguments two keys and
    a value. Both operations access the same local table, which is encapsulated within
    the object created by the call to `make-table`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`get`以两个键作为参数，`put`以两个键和一个值作为参数。这两个操作都访问相同的本地表，该表封装在调用`make-table`的对象中。'
