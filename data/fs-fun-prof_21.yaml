- en: How to design and code a complete program
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何设计和编写完整的程序
- en: How to design and code a complete program
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何设计和编写完整的程序
- en: '**"I think I understand functional programming at the micro level, and I have
    written toy programs, but how do I actually go about writing a complete application,
    with real data, real error handling, and so on?"**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: “我觉得我理解了微观层面的函数式编程，并且我写过玩具程序，但是我到底应该如何去写一个完整的应用程序，包括真实的数据、真实的错误处理等等？”
- en: This is a very common question, so I thought that in this series of posts I'd
    describe a recipe for doing exactly this, covering design, validation, error handling,
    persistence, dependency management, code organization, and so on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常常见的问题，所以我认为在这系列文章中我会描述一个确切的做法，包括设计、验证、错误处理、持久性、依赖管理、代码组织等等。
- en: 'Some comments and caveats first:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先一些评论和警告：
- en: I'll focus on just a single use case rather than a whole application. I hope
    that it will be obvious how to extend the code as needed.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我将专注于一个单一的用例，而不是一个完整的应用程序。我希望很明显如何根据需要扩展代码。
- en: This will deliberately be a very simple *data-flow oriented* recipe with no
    special tricks or advanced techniques. But if you are just getting started, I
    think it is useful to have some straightforward steps you can follow to get a
    predictable result. I don't claim that this is the one true way of doing this.
    Different scenarios will need different recipes, and of course, as you get more
    expert, you may find this recipe too simplistic and limited.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将是一个非常简单的*数据流导向*的配方，没有特殊的技巧或高级技术。但如果你刚开始入门，我认为有一些简单明了的步骤可以让你得到可预测的结果是有用的。我不声称这是唯一正确的做法。不同的场景将需要不同的配方，当然，随着您变得更加专业，您可能会发现这个配方过于简单和有限。
- en: To help ease the transition from object-oriented design, I will try to use familiar
    concepts such as "patterns", "services", "dependency injection", and so on, and
    explain how they map to functional concepts.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了帮助缓解从面向对象设计过渡，我将尝试使用熟悉的概念，如“模式”、“服务”、“依赖注入”等，并解释它们如何映射到函数式概念。
- en: This recipe is also deliberately somewhat imperative, that is, it uses an explicit
    step-by-step workflow. I hope this approach will ease the transition from OO to
    FP.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个配方也是故意有些命令式的，也就是说，它使用了一个明确的逐步工作流程。我希望这种方法能够缓解从 OO 到 FP 的过渡。
- en: To keep things simple (and usable from a simple F# script), I'll mock the entire
    infrastructure and avoid the UI directly.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了保持简单（并且可以从简单的 F# 脚本中使用），我将模拟整个基础架构，并避免直接使用 UI。
- en: Overview
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: 'Here''s an overview of what I plan to cover in this series:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我计划在本系列中涵盖的概述：
- en: '**Converting a use-case into a function**. In this first post, we''ll examine
    a simple use case and see how it might be implemented using a functional approach.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将用例转换为函数**。在第一篇文章中，我们将检查一个简单的用例，并看看如何使用函数式方法来实现它。'
- en: '**[Connecting smaller functions together](recipe-part2.html)**. In the next
    post, we''ll discuss a simple metaphor for combining smaller functions into bigger
    functions.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[将较小的函数连接在一起](recipe-part2.html)**。在下一篇文章中，我们将讨论一个简单的隐喻，将较小的函数组合成更大的函数。'
- en: '**Type driven design and failure types**. In the third post, we''ll build the
    types needed for the use case, and discuss the use of special error types for
    the failure path.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型驱动设计和失败类型**。在第三篇文章中，我们将构建用例所需的类型，并讨论用于失败路径的特殊错误类型的使用。'
- en: '**Configuration and dependency management**. In this post, we''ll talk about
    how to wire up all the functions.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置和依赖管理**。在本文中，我们将讨论如何连接所有函数。'
- en: '**Validation**. In this post, we''ll discuss various ways of implementing validation,
    and converting from the unsafe outside world to the warm fuzzy world of type safety.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证**。在本文中，我们将讨论实现验证的各种方式，以及从不安全的外部世界转换到类型安全的温暖模糊世界的方法。'
- en: '**Infrastructure**. In this post, we''ll discuss various infrastructure components,
    such as logging, working with external code, and so on.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础架构**。在本文中，我们将讨论各种基础架构组件，例如日志记录、与外部代码的交互等等。'
- en: '**The domain layer**. In this post, we''ll discuss how domain driven design
    works in a functional environment.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领域层**。在本文中，我们将讨论领域驱动设计在函数式环境中的工作方式。'
- en: '**The presentation layer**. In this post, we''ll discuss how to convey results
    and errors back to the UI.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表示层**。在本文中，我们将讨论如何将结果和错误传达回 UI。'
- en: '**Dealing with changing requirements**. In this post, we''ll discuss how to
    deal with changing requirements and the effect this has on the code.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理变化的需求**。在本文中，我们将讨论如何处理变化的需求以及这对代码的影响。'
- en: Getting started
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: Let's pick a very simple use case, namely updating some customer information
    via a web service.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择一个非常简单的用例，即通过网络服务更新一些客户信息。
- en: 'So here are the basic requirements:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是基本要求：
- en: A user submits some data (userid, name and email).
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户提交一些数据（用户ID、姓名和电子邮件）。
- en: We check to see that the name and email are valid.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们检查名称和电子邮件是否有效。
- en: The appropriate user record in a database is updated with the new name and email.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库中的适当用户记录已使用新名称和电子邮件更新。
- en: If the email has changed, send a verification email to that address.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果电子邮件已更改，请向该地址发送验证电子邮件。
- en: Display the result of the operation to the user.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将操作结果显示给用户。
- en: This is a typical *data centric* use case. There is some sort of request that
    triggers the use case, and then the request data "flows" through the system, being
    processed by each step in turn. This kind of scenario is common in enterprise
    software, which is why I am using it as an example.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的*数据中心*用例。有一种请求触发了用例，然后请求数据“流”经过系统，依次由每个步骤处理。这种情景在企业软件中很常见，这就是为什么我把它用作例子的原因。
- en: 'Here''s a diagram of the various components:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是各种组件的图表：
- en: '![Recipe Happy Path](Recipe_HappyPath.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![用例快乐路径](Recipe_HappyPath.png)'
- en: But this describes the "happy path" only. Reality is never so simple! What happens
    if the userid is not found in the database, or the email address is not valid,
    or the database has an error?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但这仅描述了“快乐路径”。现实从未如此简单！如果在数据库中找不到用户ID，或者电子邮件地址无效，或者数据库出错，会发生什么？
- en: Let's update the diagram to show all the things that could go wrong.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新图表，显示可能出错的所有事情。
- en: '![Recipe Error Path](Recipe_ErrorPath.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![用例错误路径](Recipe_ErrorPath.png)'
- en: At each step in the use case, various things could cause errors, as shown. Explaining
    how to handle these errors in an elegant way will be one of the goals of this
    series.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在用例的每个步骤中，各种事情都可能导致错误，如所示。解释如何以优雅的方式处理这些错误将是本系列的目标之一。
- en: Thinking functionally
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能性思维
- en: So now that we understand the steps in the use case, how do we design a solution
    using a functional approach?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了用例中的步骤，如何使用功能性方法设计解决方案呢？
- en: First of all, we have to address a mismatch between the original use case and
    functional thinking.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须解决原始用例与功能性思维之间的不匹配。
- en: In the use case, we typically think of a request/response model. The request
    is sent, and the response comes back. If something goes wrong, the flow is short-circuited
    and response is returned "early".
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在用例中，我们通常考虑请求/响应模型。请求被发送，响应返回。如果出现问题，流程将被短路，提前返回响应。
- en: 'Here''s a diagram showing what I mean, based on a simplified version of the
    use case:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示意图，展示了我所说的，基于用例的简化版本：
- en: '![A imperative data flow](Recipe_ResponseBack.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![一个命令式数据流](Recipe_ResponseBack.png)'
- en: 'But in the functional model, a function is a black box with an input and an
    output, like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但在功能性模型中，函数是一个具有输入和输出的黑匣子，就像这样：
- en: '![A function with one output](Recipe_Function1.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![一个具有一个输出的函数](Recipe_Function1.png)'
- en: How can we adapt the use case to fit this model?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何使用用例来适应这个模型？
- en: Forward flow only
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仅向前流动
- en: First, you must recognize that functional data flow is *forward only*. You cannot
    do a U-turn or return early.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须认识到功能性数据流是*仅向前*的。你不能掉头或提前返回。
- en: In our case, that means that all the errors *must* be sent forward to the end,
    as an alternative path to the happy path.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，这意味着所有错误*必须*被发送到最后，作为一个到达快乐路径的替代路径。
- en: '![A functional data flow](Recipe_ResponseForward.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![一个功能性数据流](Recipe_ResponseForward.png)'
- en: 'Once we have done that, we can convert the whole flow into a single "black
    box" function like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们做到了这一点，我们就可以将整个流程转换为一个单一的“黑匣子”函数，就像这样：
- en: '![A function with many outputs](Recipe_FunctionMany.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![一个具有多个输出的函数](Recipe_FunctionMany.png)'
- en: But of course, if you look inside the big function, it is made up of ("composed
    from" in functional-speak) smaller functions, one for each step, joined in a pipeline.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你查看大函数的内部，它由（在功能性语言中称为“组合”）较小的函数组成，每个步骤一个，连接在一个管道中。
- en: '![A function with many outputs](Recipe_FunctionMany2.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![一个具有多个输出的函数](Recipe_FunctionMany2.png)'
- en: Error handling
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误处理
- en: In that last diagram, there is one success output and three error outputs. This
    is a problem, as functions can have only *one* output, not four!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个图表中，有一个成功输出和三个错误输出。这是个问题，因为函数只能有*一个*输出，而不是四个！
- en: How can we handle this?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如何处理这个情况？
- en: The answer is to use a union type, with one case to represent each of the different
    possible outputs. And then the function as a whole would indeed only have a single
    output.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是使用联合类型，其中一个情况代表不同可能的输出。然后整个函数确实只会有一个输出。
- en: 'Here''s an example of a possible type definition for the output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出的可能类型定义的示例：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And here''s the diagram reworked to show a single output with four different
    cases embedded in it:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 并且这里重新制作的图表显示了一个单一输出，其中嵌入了四个不同的情况：
- en: '![A function with a 4 case union output](Recipe_Function_Union4.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![带有 4 个情况联合输出的函数](Recipe_Function_Union4.png)'
- en: Simplifying the error handling
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简化错误处理
- en: This does solve the problem, but having one error case for each step in the
    flow is brittle and not very reusable. Can we do better?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实解决了问题，但是每个流程步骤都有一个错误情况是脆弱且不太可重用的。我们能做得更好吗？
- en: 'Yes! All we *really* need is *two* cases. One for the happy path, and one for
    all other error paths, like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！我们*真正*需要的只有*两个*情况。一个是正常路径，另一个是所有其他错误路径，就像这样：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![A function with a 2 case union output](Recipe_Function_Union2.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![带有 2 个情况联合输出的函数](Recipe_Function_Union2.png)'
- en: This type is very generic and will work with *any* workflow! In fact, you'll
    soon see that we can create a nice library of useful functions that will work
    with this type, and which can be reused for all sorts of scenarios.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型非常通用，适用于*任何*工作流程！事实上，您很快就会看到，我们可以创建一个很好的有用函数库，这些函数将使用这种类型，并且可以在各种情景下重复使用。
- en: One more thing though -- as it stands there is no data in the result at all,
    just a success/failure status. We need to tweak it a bit so that it can contain
    an actual success or failure object. We will specify the success type and failure
    type using generics (a.k.a. type parameters).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事——就目前而言，结果中根本没有数据，只有成功/失败状态。我们需要稍微调整一下，以便它可以包含一个真正的成功或失败对象。我们将使用泛型（也称为类型参数）来指定成功类型和失败类型。
- en: 'Here''s the final, completely generic and reusable version:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终的、完全通用和可重用的版本：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In fact, there is already a type almost exactly like this defined in the F#
    library. It's called [Choice](http://msdn.microsoft.com/en-us/library/ee353439.aspx).
    For clarity though, I will continue to use the `Result` type defined above for
    this and the next post. When we come to some more serious coding, we'll revisit
    this.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，F# 库中已经定义了一个几乎完全相同的类型。它被称为 [Choice](http://msdn.microsoft.com/en-us/library/ee353439.aspx)。不过，为了清晰起见，我将继续使用上面定义的`Result`类型用于本文和下一篇文章。当我们开始进行更严肃的编码时，我们会重新审视这一点。
- en: So, now, showing the individual steps again, we can see that we will have to
    combine the errors from each step onto to a single "failure" path.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在，再次显示各个步骤，我们可以看到我们将不得不将每个步骤的错误合并到单个的“失败”路径上。
- en: '![A function with two outputs](Recipe_Function_ErrorTrack.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![带有两个输出的函数](Recipe_Function_ErrorTrack.png)'
- en: How to do this will be the topic of the next post.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下一篇文章的主题将是如何做到这一点。
- en: Summary and guidelines
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结和指导
- en: 'So far then, we have the following guidelines for the recipe:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们对配方有以下几点指导：
- en: '*Guidelines*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*指导*'
- en: Each use case will be equivalent to a single function
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个用例将等同于一个单独的函数
- en: 'The use case function will return a union type with two cases: `Success` and
    `Failure`.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例函数将返回一个有两个情况的联合类型：`Success`和`Failure`。
- en: The use case function will be built from a series of smaller functions, each
    representing one step in a data flow.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例函数将由一系列较小的函数构建，每个函数代表数据流中的一个步骤。
- en: The errors from each step will be combined into a single error path.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个步骤的错误将合并为单个错误路径。
