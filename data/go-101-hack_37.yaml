- en: Channel types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通道类型
- en: Channel types
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通道类型
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'When declaring variables of channel type, the most common instances are like
    this (`T` is any valid type):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明通道类型的变量时，最常见的实例如下（`T`是任何有效类型）：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'But you may also see examples as follows :'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但你可能也会看到以下示例：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Or:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'What the hell are the differences among these `3` definitions? The distinctions
    are here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这`3`个定义之间到底有何区别？区别在于这里：
- en: '(1) `chan T`: The channel can receive and send `T` type data;'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: (1) `chan T`：通道可以接收和发送`T`类型的数据；
- en: '(2) `<-chan T`: The channel is **read-only**, which means you can **only receive**
    `T` type data from this channel;'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: (2) `<-chan T`：通道是**只读**的，这意味着你只能从该通道**接收**`T`类型的数据；
- en: '(2) `chan<- T`: The channel is **write-only**, which means you can **only send**
    `T` type data to this channel.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: (2) `chan<- T`：通道是**只写**的，这意味着你只能向该通道**发送**`T`类型的数据。
- en: 'The mnemonics is correlating them with channel operations:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将助记符与通道操作相关联：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`<-chan T` is similar to `v := <-ch`, so it is a receive-only channel, and
    it is the same as `chan<- T` and `ch <- v`.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`<-chan T`类似于`v := <-ch`，因此它是一个只接收的通道，与`chan<- T`和`ch <- v`相同。'
- en: 'Restricting a channel type (read-only or write-only) can let compiler do strict
    checks for you. For example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 限制通道类型（只读或只写）可以让编译器为你进行严格的检查。例如：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The compilation generates following errors:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 编译生成以下错误：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Furthermore, the `<-` operator associates with the **leftmost** `chan` possible,
    i.e., `chan<- chan int` and `chan (<-chan int)` aren''t equal: the previous is
    same as `chan<- (chan int)`, which defines a **write-only** channel whose data
    type is a channel who can receive and send `int` data; while `chan (<-chan int)`
    defines a **write-and-read** channel whose data type is a channel who can only
    receive `int` data.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`<-`运算符与**最左侧**可能的`chan`相关联，即`chan<- chan int`和`chan (<-chan int)`并不相等：前者与`chan<-
    (chan int)`相同，它定义了一个数据类型为通道的**只写**通道，该通道可以接收和发送`int`数据；而`chan (<-chan int)`定义了一个数据类型为通道的**读写**通道，该通道只能接收`int`数据。
- en: 'References:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料：
- en: '[Channel types](https://nanxiao.gitbooks.io/golang-101-hacks/content/posts/unbuffered-and-buffered-channels.html);'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[通道类型](https://nanxiao.gitbooks.io/golang-101-hacks/content/posts/unbuffered-and-buffered-channels.html);'
- en: '[How to understand "<-chan" in declaration?](https://groups.google.com/forum/#!topic/golang-nuts/ul_K7S3EtOk).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何理解声明中的"<-chan"？](https://groups.google.com/forum/#!topic/golang-nuts/ul_K7S3EtOk)。'
