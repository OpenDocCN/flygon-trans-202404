- en: Local State Variables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地状态变量
- en: A Preview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预览
- en: 'Let''s take a quick glance at what we will be going over in this section:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一下我们将在本节中讨论的内容：
- en: '![](../Images/3153baea361d35852ff06442458a01c2.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3153baea361d35852ff06442458a01c2.jpg)'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What do you think? Do you have any idea about what this function does?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你觉得呢？你对这个函数有什么想法吗？
- en: Withdraw
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提款
- en: 'Let''s withdraw money from the bank account. We will do this using a procedure
    `withdraw`, which takes as argument an amount to be withdrawn. If there is enough
    money in the account to accommodate the withdrawal, then `withdraw` should return
    the balance remaining after the withdrawal. Otherwise, `withdraw` should return
    the message `"Insufficient funds"`. For example, if we begin with $100 in the
    account, we should obtain the following sequence of responses using `withdraw`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从银行账户中取钱。我们将使用一个名为`withdraw`的过程来实现这一点，该过程以要提取的金额作为参数。如果账户中有足够的钱来容纳提款，则`withdraw`应返回提款后剩余的余额。否则，`withdraw`应返回消息`"余额不足"`。例如，如果我们账户中有$100，我们应该使用`withdraw`获得以下响应序列：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Observe that the expression `(withdraw 25)`, evaluated twice, yields different
    values.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到表达式`(withdraw 25)`，被评估两次，产生不同的值。
- en: '*Wait, but I thought that a particular function call with the same argument
    returns the same value!*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*等等，但我以为特定的带有相同参数的函数调用会返回相同的值！*'
- en: Up to now it has, but this is a new kind of behavior for a procedure. All our
    procedures could be viewed as functions that pass the vertical line test. A call
    to a procedure computes the value of the function applied to the given arguments,
    and two calls to the same procedure with the same arguments always produces the
    same result. But in this situation, the balance needs to be changed after each
    transaction. Otherwise, we all are going to be rich!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，它一直是这样，但这是一个过程的新行为类型。我们所有的过程都可以看作是通过垂直线测试的函数。对过程的调用计算应用于给定参数的函数的值，并且对具有相同参数的同一过程的两次调用总是产生相同的结果。但在这种情况下，每次交易后都需要改变余额。否则，我们都会变得富有！
- en: 'To implement `withdraw`, we can use a variable `balance` to indicate the balance
    of money in the account and define `withdraw` as a procedure that accesses balance.
    The withdraw procedure checks to see if balance is at least as large as the requested
    amount. If so, `withdraw` decrements balance by amount and returns the new value
    of balance. Otherwise, `withdraw` returns the Insufficient funds message. Here
    are the definitions of `balance` and `withdraw`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现`withdraw`，我们可以使用一个变量`balance`来表示账户中的余额，并将`withdraw`定义为一个访问余额的过程。提款过程检查余额是否至少与请求的金额一样多。如果是，`withdraw`将余额减少金额并返回余额的新值。否则，`withdraw`返回`余额不足`的消息。这里是`balance`和`withdraw`的定义：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Decrementing balance is accomplished by the expression
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过表达式来减少余额
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This uses the `set!` special form, whose syntax is
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了`set!`特殊形式，其语法为
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here `[name]` is a symbol and `[new-value]` is any expression. `Set!` changes
    `[name]` so that its value is the result obtained by evaluating `[new-value]`.
    In the case at hand, we are changing balance so that its new value will be the
    result of subtracting amount from the previous value of balance.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`[name]`是一个符号，`[new-value]`是任何表达式。`Set!`改变`[name]`，使其值为通过评估`[new-value]`获得的结果。在这种情况下，我们正在更改余额，使其新值为从余额的先前值中减去金额的结果。
- en: '`Withdraw` also uses the `begin` special form to cause two expressions to be
    evaluated in the case where the if test is true: first decrementing `balance`
    and then returning the value of `balance`. In general, evaluating the expression'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Withdraw`还使用`begin`特殊形式，在if测试为真的情况下导致两个表达式被评估：首先减少`balance`，然后返回`balance`的值。一般来说，评估表达式'
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: causes the expressions `[exp1]` through `[expk]` to be evaluated in sequence
    and the value of the final expression `[expk]` to be returned as the value of
    the entire `begin` form.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 导致表达式`[exp1]`到`[expk]`按顺序求值，并将最终表达式`[expk]`的值作为整个`begin`形式的值返回。
- en: Play with `withdraw`, `set!` and `begin` on your STk interpreter!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的STk解释器上使用`withdraw`、`set!`和`begin`进行玩耍！
- en: Something's Fishy...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有些不对劲...
- en: 'Before we move on, examine again how `withdraw` and `balance` are defined:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，再次检查`withdraw`和`balance`是如何定义的：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Do you see anything that could cause a trouble?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到可能会引起问题的地方了吗？
- en: Trouble Detected
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测到问题
- en: The problem is with the variable `balance`. As specified above, `balance` is
    a name defined in the global environment and is freely accessible to be examined
    or modified by any procedure. It would be much better if we could somehow make
    `balance` **internal** to `withdraw`, so that `withdraw` would be the only procedure
    that could access `balance` directly and any other procedure could access `balance`
    only indirectly (through calls to `withdraw`). This would more accurately model
    the notion that `balance` is a **local state variable** used by `withdraw` to
    keep track of the state of the account.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 问题出在变量`balance`上。如上所述，`balance`是在全局环境中定义的名称，并且可以被任何过程自由访问以进行检查或修改。如果我们能够使`balance`在`withdraw`内部，那将更好，这样`withdraw`将是唯一可以直接访问`balance`的过程，而任何其他过程只能间接访问`balance`（通过调用`withdraw`）。这将更准确地模拟`balance`是`withdraw`使用的**局部状态变量**，用于跟踪账户状态的概念。
- en: 'We can make `balance` internal to `withdraw` by rewriting the definition as
    follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式将`balance`变为`withdraw`内部：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What we have done here is use `let` to establish an environment with a local
    variable `balance`, bound to the initial value 100\. Within this local environment,
    we use `lambda` to create a procedure that takes `amount` as an argument and behaves
    like our previous `withdraw` procedure. This procedure -- returned as the result
    of evaluating the `let` expression -- is `new- withdraw`, which behaves in precisely
    the same way as `withdraw` but whose variable `balance` is not accessible by any
    other procedure.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是使用`let`来建立一个具有局部变量`balance`的环境，其初始值为100。在这个局部环境中，我们使用`lambda`创建一个以`amount`为参数并像我们先前的`withdraw`过程一样运行的过程。这个过程——作为评估`let`表达式的结果返回——是`new-withdraw`，它的行为与`withdraw`完全相同，但其变量`balance`不可被任何其他过程访问。
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Play with `new-withdraw` on the STk interpreter and make sure you understand
    how it works.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在STk解释器上尝试使用`new-withdraw`，确保你理解它是如何工作的。
- en: '`make-account`'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`make-account`'
- en: 'Here is a simplified version of the `make-account` procedure in SICP:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是SICP中`make-account`过程的简化版本：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, let's try to rewrite this using local state variables. Fill in the blank
    in the following code so that the result works exactly the same as the `make-account`
    procedure above. That is, it responds to the same messages and produces the same
    return values. The differences between the two procedures are that the inside
    of `make-account` above is enclosed in the `let` statement below, and the names
    of the parameters to `make-account` are different.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用局部状态变量重写这个。填写下面代码中的空白，使结果与上面的`make-account`过程完全相同。也就是说，它响应相同的消息并产生相同的返回值。两个过程之间的区别在于上面的`make-account`内部被下面的`let`语句包围，并且`make-account`的参数名称不同。
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, modify either version of make-account so that, given the message balance,
    it returns the current account balance, and given the message init-balance, it
    returns the amount with which the account was initially created. For example,
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，修改`make-account`的任一版本，使其在给定消息`balance`时返回当前账户余额，并在给定消息`init-balance`时返回账户最初创建时的金额。例如，
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Make another modification such that, given the message transactions (any deposit
    or withdrawal), it returns a list of all transactions made since the account was
    opened. For example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 进行另一个修改，使得在给定消息transactions（任何存款或取款）时，它返回自账户开户以来所做的所有交易的列表。例如：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Before viewing the entire solution below, try out your definition in the STk
    interpreter and make sure you understand the entire code for `make-account`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看下面的整个解决方案之前，在STk解释器中尝试你的定义，并确保你理解`make-account`的整个代码。
- en: 'Here is our solution:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的解决方案：
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The Substitution Model of Evaluation
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估的替换模型
- en: 'Given this definition:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这个定义：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Follow the [substitution model](http://berkeley-cs61as.github.io/textbook/the-substitution-model-for-procedure-application.html)
    to find the result of computing
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循[替换模型](http://berkeley-cs61as.github.io/textbook/the-substitution-model-for-procedure-application.html)来找到计算结果
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: That is, show the expression that results from substituting `5` for `var` in
    the body of `plus1`, and then compute the value of the resulting expression.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 即，展示将`var`替换为`5`后在`plus1`主体中得到的表达式，然后计算结果的值。
- en: Now, try it in the STk interpreter. Did you get the same answer? Why or why
    not?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在STk解释器中尝试一下。你得到了相同的答案吗？为什么？
- en: Introducing assignments accompanies a pretty big cost. At this point, you may
    realize that we cannot use the substitution model of evaluation anymore because
    it yields the wrong value. The trouble here is that substitution is based ultimately
    on the notion that the symbols in our language are essentially names for values.
    But as soon as we introduce `set!` and the idea that the value of a variable can
    change, a variable can no longer be simply a name. Now a variable somehow refers
    to a place where a value can be stored, and the value stored at this place can
    change.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 引入赋值带来了相当大的代价。此时，你可能意识到我们不能再使用替换模型进行评估，因为它会产生错误的值。问题在于，替换最终基于我们语言中的符号本质上是值的名称这一概念。但是一旦我们引入`set!`和变量的值可以改变的概念，一个变量就不再仅仅是一个名称。现在一个变量在某种程度上指向一个可以存储值的位置，而存储在这个位置的值可以改变。
- en: '*Then how can I evaluate the procedures?*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*那么我如何评估这些过程呢？*'
- en: The new model of evaluation is waiting for you in the next subsection.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 新的评估模型在下一小节等着你。
- en: Takeaways
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: 'In this section, you learned:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学到了：
- en: How to implement local state variables
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何实现局部状态变量
- en: Costs of assignments
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 赋值的代价
- en: How to use `set!` and `begin`
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用`set!`和`begin`
- en: What's Next?
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: Let's go to the next subsection and learn about the new model of evaluation!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去下一小节，学习关于新的评估模型！
