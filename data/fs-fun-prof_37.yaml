- en: We don't need no stinking UML diagrams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们不需要臭UML图表
- en: We don't need no stinking UML diagrams
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们不需要臭UML图表
- en: 'In my talk on [functional DDD](http://fsharpforfunandprofit.com/ddd/), I often
    use this slide (*[in context](http://www.slideshare.net/ScottWlaschin/ddd-with-fsharptypesystemlondonndc2013/45)*):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我关于[函数式DDD](http://fsharpforfunandprofit.com/ddd/)的演讲中，我经常使用这张幻灯片（*[上下文](http://www.slideshare.net/ScottWlaschin/ddd-with-fsharptypesystemlondonndc2013/45)*）：
- en: '![We don''t need no stinking UML diagrams](no-uml-diagrams.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![我们不需要臭UML图表](no-uml-diagrams.jpg)'
- en: Which is of course is a misquote of [this famous scene](https://www.youtube.com/watch?v=gx6TBrfCW54).
    Oops, I mean [this one](https://www.youtube.com/watch?v=VqomZQMZQCQ).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当然这是对[这个著名场景](https://www.youtube.com/watch?v=gx6TBrfCW54)的误引用。哎呀，我是说[这个](https://www.youtube.com/watch?v=VqomZQMZQCQ)。
- en: Ok, I might be exaggerating a bit. Some UML diagrams are useful (I like sequence
    diagrams for example) and in general, I do think a good picture or diagram can
    be worth 1000 words.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我可能有点夸张。有些UML图表是有用的（例如我喜欢序列图），总的来说，我认为一个好的图片或图表可以抵得上1000个单词。
- en: But I believe that, in many cases, using UML for class diagrams is not necessary.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 但我相信，在许多情况下，使用UML绘制类图并不是必要的。
- en: Instead, a concise language like F# (or OCaml or Haskell) can convey the same
    meaning in a way that is easier to read, easier to write, and most important,
    easier to turn into *working code*!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，像F#（或OCaml或Haskell）这样简洁的语言可以以更易读、更易写的方式传达相同的含义，最重要的是，更容易转换为*可工作的代码*！
- en: With UML diagrams, you need to translate them to code, with the possibility
    of losing something in translation. But if the design is documented in your programming
    language itself, there is no translation phase, and so the design must always
    be in sync with the implementation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UML图表时，你需要将它们转换为代码，有可能在转换过程中丢失一些信息。但如果设计已经在你的编程语言本身中记录，就没有转换阶段，因此设计必须始终与实现保持同步。
- en: To demonstrate this in practice, I decided to scour the internet for some good
    (and not-so-good) UML class diagrams, and convert them into F# code. You can compare
    them for yourselves.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在实践中演示这一点，我决定在互联网上搜寻一些好的（和不那么好的）UML类图，并将它们转换为F#代码。你们可以自行比较。
- en: Regular expressions
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正则表达式
- en: 'Let''s start with a classic one: regular expressions (*[source](http://zenit.senecac.on.ca/wiki/index.php/Interpreter)*)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个经典的开始：正则表达式（*[来源](http://zenit.senecac.on.ca/wiki/index.php/Interpreter)*）
- en: 'Here''s the UML diagram:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是UML图表：
- en: '![](uml-regex.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](uml-regex.png)'
- en: 'And here''s the F# equivalent:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是F#的等价物：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That's quite straightforward.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单明了。
- en: Student enrollment
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学生选课
- en: 'Here''s another classic one: enrollment (*[source](http://www.agilemodeling.com/artifacts/classDiagram.htm)*).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个经典的例子：选课（*[来源](http://www.agilemodeling.com/artifacts/classDiagram.htm)*）。
- en: 'Here''s the UML diagram:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是UML图表：
- en: '![](uml-enrollment.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](uml-enrollment.png)'
- en: 'And here''s the F# equivalent:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是F#的等价物：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The F# mirrors the UML diagram, but I find that by writing functions for all
    the activities rather than drawing pictures, holes in the original requirements
    are revealed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: F#反映了UML图表，但我发现通过为所有活动编写函数而不是绘制图片，可以揭示原始需求中的漏洞。
- en: For example, in the `GetSeminarsTaken` method in the UML diagram, where is the
    list of seminars stored? If it is in the `Student` class (as implied by the diagram)
    then we have a mutual recursion between `Student` and `Seminar` and the whole
    tree of every student and seminar is interconnected and must be loaded at the
    same time unless [hacks are used](https://stackoverflow.com/questions/19371214/entity-framework-code-first-circular-dependices).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在UML图表中的`GetSeminarsTaken`方法中，研讨会列表存储在哪里？如果它在`Student`类中（如图表所示），那么`Student`和`Seminar`之间存在相互递归，并且每个学生和研讨会的整个树是相互连接的，除非使用[技巧](https://stackoverflow.com/questions/19371214/entity-framework-code-first-circular-dependices)。
- en: Instead, for the functional version, I created an `EnrollmentRepository` to
    decouple the two classes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，对于函数版本，我创建了一个`EnrollmentRepository`来解耦这两个类。
- en: Similarly, it's not clear how enrollment actually works, so I created an `EnrollStudent`
    function to make it clear what inputs are needed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，选课实际上是如何运作的并不清楚，所以我创建了一个`EnrollStudent`函数来明确需要哪些输入。
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Because the function returns an `option`, it is immediately clear that enrollment
    might fail (e.g student is not eligible to enroll, or is enrolling twice by mistake).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因为该函数返回一个`option`，所以立即清楚地表明了可能会出现选课失败的情况（例如学生不符合选课条件，或者因错误而重复选课）。
- en: Order and customer
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 订单和客户
- en: Here's another one (*[source](http://www.tutorialspoint.com/uml/uml_class_diagram.htm)*).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个(*[来源](http://www.tutorialspoint.com/uml/uml_class_diagram.htm)*)。
- en: '![](uml-order.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](uml-order.png)'
- en: 'And here''s the F# equivalent:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是F#的等效代码：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: I'm just copying the UML diagram, but I have to say that I hate this design.
    It's crying out to have more fine grained states.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是复制了UML图表，但我必须说我讨厌这个设计。它呼唤着更加细粒度的状态。
- en: In particular, the `Confirm` and `Dispatch` functions are horrible -- they give
    no idea of what else is needed as input or what the effects will be. This is where
    writing real code can force you to think a bit more deeply about the requirements.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是`Confirm`和`Dispatch`函数很糟糕 -- 它们没有提供任何关于需要的其他输入或影响的信息。这就是写真正的代码可能会迫使你更深入地思考需求的地方。
- en: Order and customer, version 2
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 订单和客户，版本 2
- en: Here's a much better version of orders and customers (*[source](http://edn.embarcadero.com/article/31863)*).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是订单和客户的一个更好的版本(*[来源](http://edn.embarcadero.com/article/31863)*)。
- en: '![](uml-order2.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](uml-order2.png)'
- en: 'And here''s the F# equivalent:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是F#的等效代码：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I've done some minor tweaking, adding units of measure for the weight, creating
    types to represent `Qty` and `Price`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我进行了一些小的调整，为重量添加了度量单位，创建了表示`Qty`和`Price`的类型。
- en: Again, this design might be improved with more fine grained states, such as
    creating a separate `AuthorizedPayment` type (to ensure that an order can only
    be paid with authorized payments) and a separate `PaidOrder` type (e.g. to stop
    you paying for the same order twice).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这个设计可能通过更细粒度的状态得到改进，比如创建一个单独的`AuthorizedPayment`类型（确保订单只能使用授权支付），以及一个单独的`PaidOrder`类型（例如，防止您重复支付同一订单）。
- en: 'Here''s the kind of thing I mean:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我所说的那种事情：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Hotel Booking
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 酒店预订
- en: Here's one from the JetBrains IntelliJ documentation (*[source](https://www.jetbrains.com/idea/help/viewing-diagram.html)*).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自JetBrains IntelliJ文档的一个(*[来源](https://www.jetbrains.com/idea/help/viewing-diagram.html)*)。
- en: '![](uml-hotel.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](uml-hotel.png)'
- en: 'Here''s the F# equivalent:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是F#的等效代码：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: I have to stop there, sorry. The design is driving me crazy. I can't even.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须在这里停下，抱歉。这个设计让我疯狂。我甚至无法。
- en: What are these `EntityManager` and `FacesMessages` fields? And logging is important
    of course, but why is `Log` a field in the domain object?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`EntityManager`和`FacesMessages`字段是什么？当然，日志记录很重要，但为什么`Log`是域对象中的一个字段？
- en: By the way, in case you think that I am deliberately picking bad examples of
    UML design, all these diagrams come from the top results in an image search for
    ["uml class diagram"](https://www.google.com/search?q=uml+class+diagram&tbm=isch).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，如果你认为我是故意挑选糟糕的UML设计示例，所有这些图表都来自于对["uml类图"](https://www.google.com/search?q=uml+class+diagram&tbm=isch)进行图像搜索的前几个结果。
- en: Library
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图书馆
- en: This one is better, a library domain (*[source](http://www.uml-diagrams.org/library-domain-uml-class-diagram-example.html)*).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更好，一个图书馆领域(*[来源](http://www.uml-diagrams.org/library-domain-uml-class-diagram-example.html)*)。
- en: '![](uml-library.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](uml-library.png)'
- en: Here's the F# equivalent. Note that because it is code, I can add comments to
    specific types and fields, which is doable but awkward with UML.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是F#的等效代码。请注意，因为这是代码，我可以添加注释到特定类型和字段，这在UML中是可行的，但很麻烦。
- en: 'Note also that I can say `ISBN: string option` to indicate an optional ISBN
    rather that the awkward `[0..1]` syntax.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '还要注意，我可以说`ISBN: string option`来表示可选的ISBN，而不是笨拙的`[0..1]`语法。'
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since the Search and Manage interfaces are undefined, we can just use placeholders
    (`unit`) for the inputs and outputs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于搜索和管理界面未定义，我们可以只是使用占位符(`unit`)来表示输入和输出。
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Again, this might not be the perfect design. For example, it''s not clear that
    only `Active` accounts could borrow a book, which I might represent in F# as:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这可能不是完美的设计。例如，很难理解只有`Active`帐户才能借书，我可能会在F#中表示为：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you want to see a more modern approach to modelling this domain using CQRS
    and event sourcing, see [this post](http://thinkbeforecoding.com/post/2009/11/02/Event-Sourcing-and-CQRS-Lets-use-it).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想看到更现代的方法来使用CQRS和事件源建模这个领域，请看[这篇文章](http://thinkbeforecoding.com/post/2009/11/02/Event-Sourcing-and-CQRS-Lets-use-it)。
- en: Software licensing
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件许可
- en: The final example is from a software licensing domain (*[source](http://www.uml-diagrams.org/software-licensing-domain-diagram-example.html?context=cls-examples)*).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个示例来自软件许可领域(*[来源](http://www.uml-diagrams.org/software-licensing-domain-diagram-example.html?context=cls-examples)*)。
- en: '![](uml-hasp.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](uml-hasp.png)'
- en: Here's the F# equivalent.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是F#的等效代码。
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This diagram is just pure data and no methods, so there are no function types.
    I have a feeling that there are some important business rules that have not been
    captured.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表只是纯粹的数据，没有方法，因此没有函数类型。我觉得一些重要的业务规则没有被捕捉到。
- en: For example, if you read the comments in the source, you'll see that there are
    some interesting constraints around `EntitlementType` and `LockingType`. Only
    certain locking types can be used with certain entitlement types.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，如果你读源代码中的注释，你会发现`EntitlementType`和`LockingType`周围有一些有趣的约束。只有某些锁定类型才能与某些权益类型一起使用。
- en: That might be something that we could consider modelling in the type system,
    but I haven't bothered. I've just tried to reproduct the UML as is.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是我们可以考虑在类型系统中建模的内容，但我没有费心去做。我只是试图原样重现 UML。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: I think that's enough to get the idea.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这已经足够让你了解了。
- en: My general feeling about UML class diagrams is that they are OK for a sketch,
    if a bit heavyweight compared to a few lines of code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我对 UML 类图的一般感觉是，它们适用于草图，与几行代码相比有些庞大。
- en: For detailed designs, though, they are not nearly detailed enough. Critical
    things like context and dependencies are not at all obvious. In my opinion, none
    of the UML diagrams I've shown have been good enough to write code from, even
    as a basic design.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 但对于详细设计来说，它们远远不够详细。像上下文和依赖关系这样的关键事项根本不明显。在我看来，我展示过的所有 UML 图都不足以编写代码，即使是基本设计也不行。
- en: Even more seriously, a UML diagram can be very misleading to non-developers.
    It looks "official" and can give the impression that the design has been thought
    about deeply, when in fact the design is actually shallow and unusable in practice.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 更为严重的是，对非开发人员来说，UML 图可能非常误导人。它看起来很“正式”，可能会给人一种设计已经深思熟虑的印象，而实际上设计实际上是肤浅的，在实践中无法使用。
- en: Disagree? Let me know in the comments!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有异议？在评论中告诉我！
