- en: Lazy Evaluation and GeneratorsTA DAH YOU'RE DONE!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 惰性评估和生成器TA DAH，你完成了！
- en: Lazy Evaluation
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 惰性评估
- en: Sorry for this bit of a jump in topics. You're skipping this from Lesson 12,
    so we'll do a quick intro here.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对不起，这是一个话题的小跳跃。你从第12课跳过了这部分，所以我们在这里做一个快速介绍。
- en: Lazy evaluation is the implementation of normal order evaluation as opposed
    to applicative order evaluation. As a review, in Lesson 1, where we began our
    discussion of models of evaluation, we noted that Scheme is an applicative-order
    language, namely, that all the arguments to Scheme procedures are evaluated when
    the procedure is applied. In contrast, normal-order languages delay evaluation
    of procedure arguments until the actual argument values are needed. Delaying evaluation
    of procedure arguments until the last possible moment (e.g., until they are required
    by a primitive operation) is called lazy evaluation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 惰性评估是正常顺序评估的实现，与应用顺序评估相对。回顾一下，在第1课中，我们开始讨论评估模型时，我们注意到Scheme是一种应用顺序语言，即当应用过程时，Scheme过程的所有参数都会被评估。相比之下，正常顺序语言延迟评估过程参数，直到实际参数值被需要。延迟评估过程参数直到最后可能的时刻（例如，直到它们被原始操作需要时）被称为惰性评估。
- en: Python is similar to Scheme. When you define a procedure and call it with arguments.
    All arguments are evaluated before the body is evaluated.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python类似于Scheme。当你定义一个过程并用参数调用它时。所有参数在主体评估之前都会被评估。
- en: Consider the procedure
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑该过程
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Evaluating `try(0, 1/0)` will trigger a division by zero error because the arguments
    are both evaluated first.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 评估`try(0, 1/0)`将触发除零错误，因为参数都会首先被评估。
- en: In Lazy Evaluation, an error would not occur. Evaluating the expression would
    return 1, because the argument `1/0` would never be evaluated as it is never used
    in a primitive procedure nor returned.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在惰性评估中，不会发生错误。评估表达式将返回1，因为参数`1/0`永远不会被评估，因为它从未在原始过程中使用，也没有返回。
- en: '`if` is a lazy procedure when used directly. If you were to try:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`在直接使用时是一个惰性过程。如果你尝试：'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: See that True gets returned since we never need to evaluate 1/0 so we never
    error! All this is possible because `if` is handled as a special form in the evaluation
    process (think mc-eval from lesson 11). For us to get this behavior in every procedure
    call, we would have to change how eval and apply work in Python. Instead of immediately
    evaluating the arguments to a procedure application before passing it to apply,
    we only do so if it is returned or used primitively.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 看到True被返回，因为我们永远不需要评估1/0，所以我们永远不会出错！所有这些都是可能的，因为`if`在评估过程中被处理为一个特殊形式（想想第11课的mc-eval）。为了在每个过程调用中获得这种行为，我们必须改变Python中eval和apply的工作方式。我们只有在返回或原始使用时才立即评估过程应用的参数，而不是在将其传递给apply之前立即评估参数。
- en: If you have an interest in a deeper understanding of lazy evaluation implemented
    in an interpreter, please read the original lesson 12 [content](http://www.cs61as.org/textbook/an-interpreter-with-lazy-evaluation.html).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对在解释器中实现惰性评估有更深入的了解感兴趣，请阅读原始第12课的[内容](http://www.cs61as.org/textbook/an-interpreter-with-lazy-evaluation.html)。
- en: If you want to dabble with an implementation of lazy evaluation wrappers in
    Python, see the lazy.py module on this [website](http://blitiri.com.ar/p/python/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试在Python中使用惰性评估包装器的实现，请查看这个[网站](http://blitiri.com.ar/p/python/)上的lazy.py模块。
- en: Range and Generators
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围和生成器
- en: We've been using `range()` in `for` loops but we haven't thought much how it
    works. Range is an immutable sequence that is lazy. Behind the scenes, elements
    in a sequence created by range aren't created until they are required. Don't believe
    me? Try `print(range(4))` and `print([0, 1, 2, 3])`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在`for`循环中使用`range()`，但我们并没有想过它是如何工作的。Range是一个惰性的不可变序列。在幕后，通过range创建的序列中的元素直到需要它们时才被创建。不相信我吗？尝试`print(range(4)`和`print([0,
    1, 2, 3])`。
- en: We can create similar sequences to `range()` through the use of generators.
    In Python, generators are functions than create sequences by computing and `yield`ing
    the next value as needed. They are analogous to streams from Scheme and are a
    lazy sequence as opposed to lists which are eager sequences (eager to enumerate).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过生成器的使用创建类似于`range()`的序列。在Python中，生成器是通过计算并根据需要`yield`下一个值来创建序列的函数。它们类似于Scheme中的流，是一种惰性序列，而不是急切枚举的列表。
- en: Generators are [iterable](https://docs.python.org/3/tutorial/classes.html#iterators)
    so you can use them in for loops, just like how we use range(). You can also call
    `next(generator)` on any generator procedure to get subsequent elements. Generators,
    however, cannot be iterated over multiple times. Once you've used up the sequence,
    it's gone. If you try to call `next()` on a used up generator you'll get a `StopIteration`
    error message.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器是[可迭代的](https://docs.python.org/3/tutorial/classes.html#iterators)，所以你可以在for循环中使用它们，就像我们使用range()一样。你也可以在任何生成器过程上调用`next(generator)`来获取后续元素。然而，生成器不能被多次迭代。一旦你用完了序列，它就消失了。如果你尝试在用完的生成器上调用`next()`，你会收到一个`StopIteration`错误消息。
- en: Take a moment to ponder why we'd want generators. [Why not just always use lists?](https://www.google.com/search?q=when+to+use+generators+in+python)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 想一想为什么我们想要生成器。[为什么不总是使用列表？](https://www.google.com/search?q=when+to+use+generators+in+python)
- en: '`yield` is how we create procedures that are generators as opposed to functions.
    You''ll use `yield` instead of `return`. Now for an example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield`是我们创建生成器而不是函数的过程。你会使用`yield`而不是`return`。现在举个例子：'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now try printing each element using a for loop:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试使用for循环打印每个元素：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now try calling next:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试调用`next`：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Aha! The `StopIteration` error!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 啊哈！`StopIteration`错误！
- en: And now an infinite generator! Go ahead and try to `print` it and `next` through
    a call.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是一个无限生成器！尝试`print`和通过调用`next`来遍历。
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Homework Problem 10: Growing Pains (Exponentially)**'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**作业问题10：成长的烦恼（指数增长）**'
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a generator `gen_exp()` that takes a number n and generates (for eternity)
    the exponential of n to the n to the n starting at n.
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '编写一个名为`gen_exp()`的生成器，接受一个数字n，并从n开始生成（永远）n的指数n的指数n。 '
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example the first few elements of `gen_exp(2)` should be 2, (2^2), ((2^2)^
    2), (((2^2)^ 2) ^ 2)
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 例如，`gen_exp(2)`的前几个元素应该是2，(2^2)，((2^2)^ 2)，(((2^2)^ 2) ^ 2)
- en: TA DAH YOU'RE DONE!
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成啦！
- en: More cool things! You should look into if you liked learning Python.
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多酷炫的东西！如果你喜欢学习Python，你应该深入了解。
- en: '[Importing Modules](https://docs.python.org/3/tutorial/modules.html) like the
    [math module... so awesome](https://docs.python.org/3/library/math.html). See
    [this link](https://docs.python.org/3/library/index.html) for an extensive directory
    of module libraries that come packaged with Python 3.5.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[导入模块](https://docs.python.org/3/tutorial/modules.html)像[数学模块...太棒了](https://docs.python.org/3/library/math.html)。查看[此链接](https://docs.python.org/3/library/index.html)以获取Python
    3.5捆绑的模块库的广泛目录。'
- en: '[Turtle Graphics](https://docs.python.org/3/library/turtle.html)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[海龟图形](https://docs.python.org/3/library/turtle.html)'
- en: '[Science-y math-y stuff](http://www.scipy.org/) which is already installed
    with an Anaconda distribuition'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[科学数学内容](http://www.scipy.org/)，已经随Anaconda发行版安装'
