- en: Exercises for Partner B
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伙伴B的练习
- en: Question B3
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题B3
- en: Define a method `take-all` for people. If given that message, a person should
    `take` all the things at the current location that are not already owned by someone.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为人们定义一个 `take-all` 方法。如果给出该消息，一个人应该拿走当前位置尚未被任何人拥有的��有东西。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Question B4: Part 1'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题B4：第1部分
- en: It's unrealistic that anyone can take anything from anyone. We want to give
    our characters a `strength`, and then one person can take something from another
    only if the first has greater `strength` than the second.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 任何人都可以从任何人那里拿走东西是不现实的。我们想给我们的角色一个 `strength`，然后只有第一个人的 `strength` 大于第二个人的时候，第一个人才能从第二个人那里拿东西。
- en: 'However, we aren''t going to clutter up the person class by adding a local
    `strength` variable. That''s because we can anticipate wanting to add lots more
    attributes as we develop the program further. People can have *charisma* or *wisdom*;
    things can be *food* or not; places can be *indoors* or not. Therefore, you will
    create a class called `basic-object` that keeps a local variable called `properties`
    containing an attribute-value table like the one that we used with `get` and `put`
    in Lesson 6\. However, `get` and `put` refer to a single, fixed table for all
    operations; in this situation we need a separate table for every object. The file
    `tables.scm` contains an implementation of the table Abstract Data Type:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们不会通过添加本地 `strength` 变量来使人类类变得混乱。这是因为我们可以预期随着程序的进一步开发，我们可能会想要添加更多属性。人们可以拥有
    *魅力* 或 *智慧*；事物可以是 *食物* 或不是；地方可以是 *室内* 或不是。因此，你将创建一个名为 `basic-object` 的类，它保留一个名为
    `properties` 的本地变量，其中包含一个属性值表，就像我们在第6课中使用 `get` 和 `put` 一样。然而，`get` 和 `put` 指的是所有操作的一个固定表；在这种情况下，我们需要为每个对象单独的表。文件
    `tables.scm` 包含了表抽象数据类型的实现：
- en: 'Constructor: `(make-table)` returns a new, empty table.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数：`(make-table)` 返回一个新的空表。
- en: 'Mutator: `(insert! key value table)` adds a new key-value pair to a table.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改器：`(insert! key value table)` 向表中添加一个新的键值对。
- en: 'Selector: `(lookup key table)` returns the corresponding value, or `#f` if
    the key is not in the table.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器：`(lookup key table)` 返回相应的值，如果键不在表中，则返回 `#f`。
- en: You'll learn how tables are implemented in [SICP 3.3.3 (pp. 266-268)](https://mitpress.mit.edu/sicp/full-text/sicp/book/node63.html).
    For now, just take them as primitive.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在 [SICP 3.3.3 (pp. 266-268)](https://mitpress.mit.edu/sicp/full-text/sicp/book/node63.html)
    中学习表是如何实现的。现在，只需将它们视为原始的。
- en: 'You''ll modify the `person`, `place` and `thing` classes so that they will
    inherit from `basic-object`. This object will accept a message `put` so that the
    following call does the right thing:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你将修改 `person`、`place` 和 `thing` 类，使它们从 `basic-object` 继承。这个对象将接受一个 `put` 消息，以便以下调用做正确的事情：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Also, the `basic-object` should treat any message not otherwise recognized as
    a request for the attribute of that name, so
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`basic-object` 应该将任何未被识别为该名称属性请求的消息视为请求。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: should work WITHOUT having to write an explicit `strength` method in the class
    definition.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 应该在不必在类定义中显式编写 `strength` 方法的情况下工作。
- en: 'Don''t forget that the property list mechanism returns `#f` if you ask for
    a property that isn''t in the list. This means that the following call should
    never give an error message, even if we haven''t `put` that property in that object:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，如果你要求列表中没有的属性，属性列表机制会返回 `#f`。这意味着即使我们没有在对象中 `put` 该属性，以下调用也不应该出错：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is important for true-or-false properties, which will automatically be
    `#f` (but not an error) unless we explicitly `put` a `#t` value for them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于真假属性很重要，除非我们明确为它们 `put` 一个 `#t` 值，否则它们将自动为 `#f`（但不会出错）。
- en: Give people some reasonable initial strength. (They should be the same for every
    newly instantiated person object.) Later, they'll be able to get stronger by eating.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 给人们一些合理的初始力量。（每个新实例化的人对象应该是相同的。）后来，他们可以通过进食变得更强。
- en: 'Question B4: Part 2'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题B4：第2部分
- en: You'll notice that the type predicate `person?` checks to see if the type of
    the argument is a member of the list `'(person police thief)`. This means that
    the `person?` procedure has to keep a list of all the classes that inherit from
    `person`, which is a pain if we make a new subclass.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到类型谓词 `person?` 检查参数的类型是否是列表 `'(person police thief)` 的成员。这意味着 `person?`
    过程必须保持一个从 `person` 继承的所有类的列表，如果我们创建一个新的子类，这将很麻烦。
- en: We'll take advantage of the property list to implement a better system for type
    checking. If we add a method named `person?` to the person class, and have it
    always return `#t`, then any object that's a type of person will automatically
    inherit this method. Objects that don't inherit from person won't find a `person?`
    method and won't find an entry for `person?` in their property table, so they'll
    return `#f`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用属性列表来实现一个更好的类型检查系统。如果我们向 person 类添加一个名为 `person?` 的方法，并让它始终返回 `#t`，那么任何属于
    person 类型的对象都将自动继承此方法。没有从 person 继承的对象将找不到 `person?` 方法，并且在其属性表中找不到 `person?`
    条目，因此它们将返回 `#f`。
- en: Similarly, places should have a `place?` method, and things a `thing?` method.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，地方应该有一个 `place?` 方法，东西应该有一个 `thing?` 方法。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Add these type methods and change the implementation of the type predicate procedures
    (at the very bottom of `adv.scm`) to this new implementation. Don't forget to
    add the definition for `place?`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些类型方法，并将类型谓词过程的实现更改为这种新实现（在 `adv.scm` 的底部）。不要忘记添加 `place?` 的定义。
- en: 'The new type predicate should do the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 新的类型谓词应该执行以下操作：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Remember that `person?` should work for classes that inherit from `person`,
    like `thief` and `police` (defined later). Similarly with `place?` and `thing`?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 `person?` 应该适用于从 `person` 继承的类，如稍后定义的 `thief` 和 `police`。`place?` 和 `thing`
    也是如此。
- en: 'Question B5: Part 1'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 B5：第 1 部分
- en: In the modern era, many places allow you to get connected to the net. Define
    a `hotspot` as a kind of place that allows network connectivity. Each hotspot
    should have a `name` and a `password` as instantiation variables that you must
    know to connect.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代，许多地方允许您连接到网络。将 `hotspot` 定义为一种允许网络连接的地方。每个热点应该有一个 `name` 和一个 `password`
    作为必须知道的实例变量以便连接。
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '(Note: We''re envisioning a per-network password, not a per-person password
    as you use with AirBears.) The hotspot has a `connect` method with two arguments,
    a `laptop` (a kind of thing, to be invented in a moment) and a password. If the
    password is correct, and the laptop is in the hotspot, add it to a list of connected
    laptops otherwise, return an error. When the laptop leaves the hotspot, remove
    it from the list.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: （注意：我们设想的是每个网络一个密码，而不是像 AirBears 那样每个人一个密码。）热点有一个 `connect` 方法，带有两个参数，一个 `laptop`（一种即将发明的东西）和一个密码。如果密码正确，并且笔记本在热点中，则将其添加到已连接笔记本的列表中，否则返回错误。当笔记本离开热点时，将其从列表中移除。
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Hotspots also have a `surf` method with two arguments, a laptop and a text string,
    such as
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 热点还有一个 `surf` 方法，带有两个参数，一个笔记本和一个文本字符串，例如
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If the laptop is connected to the network, then the surf method should
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果笔记本连接到网络，则 surf 方法应该
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: where URL is the text string argument (note the space after x in "lynx "). Otherwise,
    return an error.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当 URL 是文本字符串参数时（注意在 "lynx " 中的 x 后面有一个空格），否则返回错误。
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Question B5: Part 2'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 B5：第 2 部分
- en: Now invent the `laptop` class. A laptop has one instantiation variable, its
    name.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在发明 `laptop` 类。笔记本有一个实例变量，即其名称。
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A laptop is a thing that has two extra methods: `connect`, with a password
    as argument, sends a `connect` message to the place where the laptop is. If the
    password is wrong, return an error.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本是一种具有两个额外方法的东西：`connect`，带有密码作为参数，向笔记本所在的地方发送一个 `connect` 消息。如果密码错误，则返回错误。
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: A laptop also has another method, `surf`, with a URL text string as argument,
    sends a `surf` message to the place where it is. Thus, whenever a laptop enters
    a new hotspot, the user must ask to `connect` to that hotspot's network; when
    the laptop leaves the hotspot, it must automatically be disconnected from the
    network. (If it's in a place other than a hotspot, the `surf` message won't be
    understood; if it's in a hotspot but not connected, return an error).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本还有另一个方法，`surf`，带有一个 URL 文本字符串作为参数，向其所在的地方发送一个 `surf` 消息。因此，每当笔记本进入新的热点时，用户必须请求连接到该热点的网络；当笔记本离开热点时，它必须自动断开网络连接。（如果它在除热点之外的地方，`surf`
    消息将不被理解；如果它在热点中但未连接，则返回错误）。
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
