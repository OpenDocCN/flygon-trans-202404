- en: Chapter 2 - Document Nodes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 - 文档节点
- en: 2.1  *document*  node overview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1  *document*  节点概述
- en: The *HTMLDocument* constructor (which inherits from *document*) when instantiated
    represents specifically a *DOCUMENT_NODE* (i.e. *window.document*) in the DOM.
    To verify this we can simply ask which constructor was used in the creation of
    the *document* node object.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*HTMLDocument* 构造函数（继承自 *document*）在实例化时具体表示 DOM 中的 *DOCUMENT_NODE*（即 *window.document*）。要验证这一点，我们只需询问在创建
    *document* 节点对象时使用了哪个构造函数。'
- en: 'live code: [http://jsfiddle.net/domenlightenment/qRAzL](http://jsfiddle.net/domenlightenment/qRAzL)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/qRAzL](http://jsfiddle.net/domenlightenment/qRAzL)
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code above concludes that the *HTMLDocument* constructor function constructs
    the *window.document* node object and that this node is a *DOCUMENT_NODE* object.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码得出结论，*HTMLDocument* 构造函数构造了 *window.document* 节点对象，而这个节点是一个 *DOCUMENT_NODE*
    对象。
- en: Notes
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Both *Document* and *HTMLDocument* constructors are typically instantiated by
    the browser when you load an HTML document. However, using *document.implementation.createHTMLDocument()*
    its possible to create your own HTML document outside of the one currently loaded
    into the browser. In addtion to *createHTMLDocument()* its also possible to create
    a document object which has yet to be setup as an HTML document using *createDocument()*.
    Typically the use of theses methods are associated with programatically providing
    an HTML document to an iframe.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当加载 HTML 文档时，通常浏览器会实例化 *Document* 和 *HTMLDocument* 构造函数。然而，使用 *document.implementation.createHTMLDocument()*
    可以在当前加载到浏览器中的 HTML 文档之外创建自己的 HTML 文档。除了 *createHTMLDocument()* 外，还可以使用 *createDocument()*
    创建尚未设置为 HTML 文档的文档对象。通常，这些方法的使用与以编程方式向 iframe 提供 HTML 文档相关。
- en: 2.2 *HTMLDocument* properties and methods (including inherited)
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 *HTMLDocument* 属性和方法（包括继承的）
- en: To get accurate information pertaining to the available properties and methods
    on an *HTMLDocument* node its best to ignore the specification and to ask the
    browser what is available. Examine the arrays created in the code below detailing
    the properties and methods available from an *HTMLDocument* node (a.k.a. *window.document*)
    object.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关 *HTMLDocument* 节点上可用属性和方法的准确信息，最好忽略规范，并询问浏览器有哪些可用。检查下面代码中创建的数组，详细说明了从
    *HTMLDocument* 节点（也称为 *window.document*）对象中可用的属性和方法。
- en: 'live code: [http://jsfiddle.net/domenlightenment/jprPe](http://jsfiddle.net/domenlightenment/jprPe)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/jprPe](http://jsfiddle.net/domenlightenment/jprPe)
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The available properties are many even if the inherited properties were not
    considered. Below I've hand pick a list of noteworthy properties and methods for
    the context of this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 即使不考虑继承的属性，可用的属性仍然很多。下面我手动挑选了一些值得注意的属性和方法列表，以便在本章的上下文中使用。
- en: '*doctype*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*doctype*'
- en: '*documentElement*'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*documentElement*'
- en: '*implementation*.*'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*implementation*.*'
- en: '*activeElement*'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*activeElement*'
- en: '*body*'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*body*'
- en: '*head*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*head*'
- en: '*title*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*title*'
- en: '*lastModified*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*lastModified*'
- en: '*referrer*'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*referrer*'
- en: '*URL*'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*URL*'
- en: '*defaultview*'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*defaultview*'
- en: '*compatMode*'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*compatMode*'
- en: '*ownerDocument*'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ownerDocument*'
- en: '*hasFocus()*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*hasFocus()*'
- en: Notes
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The *HTMLDocument* node object is used to access (typically inherit) a great
    deal of the methods and properties available for working with the DOM (i.e. *document.querySelectorAll()*).
    You will be seeing many of these properties not discussed in this chapter discussed
    in the appropriate chapter's following this chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*HTMLDocument* 节点对象用于访问（通常继承）许多用于处理 DOM 的方法和属性（例如 *document.querySelectorAll()*）。你将看到许多这些属性在本章未讨论的属性在接下来的适当章节中讨论。'
- en: 2.3 Getting general HTML document information (title, url, referrer, lastModified,
    compatMode)
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 获���一般 HTML 文档信息（标题、URL、引用者、最后修改时间、compatMode）
- en: The *document* object provides access to some general information about the
    HTML document/DOM being loaded. In the code below I use the *document.title*,
    *document.URL*, *document.referrer*, *document.lastModified*, and *document.compatMode*
    properties to gain some general information about the *document*. Based on the
    property name the returned values should be obvious.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*document* 对象提供了有关正在加载的 HTML 文档/DOM 的一些常规信息。在下面的代码中，我使用 *document.title*、*document.URL*、*document.referrer*、*document.lastModified*
    和 *document.compatMode* 属性来获取有关 *document* 的一些常规信息。根据属性名称，返回的值应该是明显的。'
- en: 'live code: [http://jsfiddle.net/domenlightenment/pX8Le](http://jsfiddle.net/domenlightenment/pX8Le)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/pX8Le](http://jsfiddle.net/domenlightenment/pX8Le)
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 2.4 *document* child nodes
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 *document* 子节点
- en: '*Document* nodes can contain one *DocumentType* node object and one *Element*
    node object. This should not be a surprise since HTML documents typically contain
    only one doctype (e.g. *<!DOCTYPE html>*) and one element (e.g. *<html lang="en">*).
    Thus if you ask for the children (e.g. *document.childNodes*) of the *Document*
    object you will get an array containing at the very least the documents doctype/DTD
    and *<html lang="en">* element. The code below showcases that *window.document*
    is a type of node object (i.e *Document*) with child nodes.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*文档* 节点可以包含一个 *DocumentType* 节点对象和一个 *Element* 节点对象。这不应该让人感到意外，因为 HTML 文档通常只包含一个
    doctype（例如 *<!DOCTYPE html>*）和一个元素（例如 *<html lang="en">*）。因此，如果您请求 *Document*
    对象的子节点（例如 *document.childNodes*），您将得到一个数组，其中至少包含文档的 doctype/DTD 和 *<html lang="en">*
    元素。下面的代码展示了 *window.document* 是一种节点对象（即 *Document*）并具有子节点。'
- en: 'live code: [http://jsfiddle.net/domenlightenment/UasKc](http://jsfiddle.net/domenlightenment/UasKc)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/UasKc](http://jsfiddle.net/domenlightenment/UasKc)
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notes
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注：
- en: Don't confuse the *window.document* object created from *HTMLDocument* constructor
    with the *Document* object. Just remember *window.document* is the starting point
    for the DOM interface. That is why *document.childNodes* contains child nodes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不要混淆从 *HTMLDocument* 构造函数创建的 *window.document* 对象与 *Document* 对象。只需记住 *window.document*
    是 DOM 接口的起始点。这就是为什么 *document.childNodes* 包含子节点的原因。
- en: If a comment node (not discussed in this book) is made outside of the *<html
    lang="en">* element then it will become a child node of the *window.document*.
    However having comment nodes outside of the <html> element can cause some buggy
    results in IE and also is a violation of the DOM specification.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 *<html lang="en">* 元素之外创建了注释节点（本书未讨论），它将成为 *window.document* 的子节点。然而，在 *<html>*
    元素之外存在注释节点可能会导致 IE 中的一些错误结果，并且也违反了 DOM 规范。
- en: 2.5 *document* provides shortcuts to *<!DOCTYPE>*, *<html lang="en">*, *<head>*,
    and *<body>*
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.5 *文档* 提供了 *<!DOCTYPE>*、*<html lang="en">*、*<head>* 和 *<body>* 的快捷方式。
- en: 'Using the properties listed below we can get a shortcut reference to the following
    nodes:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用下面列出的属性，我们可以快捷地引用以下节点：
- en: '*document.doctype* refers to *<!DOCTYPE> *'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*document.doctype* 指的是 *<!DOCTYPE>*'
- en: '*document.documentElement* refers to *<html lang="en">*'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*document.documentElement* 指的是 *<html lang="en">*'
- en: '*document.head* refers to *<head>*'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*document.head* 指的是 *<head>*'
- en: '*document.body* refers to *<body>*'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*document.body* 指的是 *<body>*'
- en: This is demonstrated in the code below.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码演示了这一点。
- en: 'live code: [http://jsfiddle.net/domenlightenment/XsSTM](http://jsfiddle.net/domenlightenment/XsSTM)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/XsSTM](http://jsfiddle.net/domenlightenment/XsSTM)
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*### Notes'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*### 注：'
- en: The doctype or DTD is a *nodeType* of 10 or *DOCUMENT_TYPE_NODE* and should
    not be confused with the *DOCUMENT_NODE* (aka *window.document* constructed from
    *HTMLDocument()*). The doctype is constructed from the *DocumentType()* constructor.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: doctype 或 DTD 是 10 或 *DOCUMENT_TYPE_NODE* 的 *nodeType*，不应与 *DOCUMENT_NODE*（也称为
    *window.document* 从 *HTMLDocument()* 构造）混淆。doctype 是使用 *DocumentType()* 构造函数构造的。
- en: In Safari, Chrome, and Opera the *document.doctype* does not appear in the *document.childNodes*
    list.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Safari、Chrome 和 Opera 中，*document.doctype* 不会出现在 *document.childNodes* 列表中。
- en: 2.6 Detecting DOM specifications/features using *document.implementation.hasFeature()*
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.6 使用 *document.implementation.hasFeature()* 检测 DOM 规范/功能
- en: Its possible using *document.implementation.hasFeature()* to ask (boolean) the
    current document what feature and level the browser has implemented/supports.
    For example we can ask if the browser has implemented the core DOM level 3 specification
    by passing the name of the feature and the version to the *hasFeature()* method.
    In the code below I ask if the browser has implemented the Core 2.0 & 3.0 specification.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 *document.implementation.hasFeature()* 来询问（布尔值）当前文档所实现/支持的功能和级别。例如，我们可以通过向
    *hasFeature()* 方法传递功能名称和版本来询问浏览器是否已经实现了核心 DOM 3.0 规范。在下面的代码中，我询问浏览器是否已经实现了核心 2.0
    和 3.0 规范。
- en: 'live code: [http://jsfiddle.net/domenlightenment/TYYZ6](http://jsfiddle.net/domenlightenment/TYYZ6)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/TYYZ6](http://jsfiddle.net/domenlightenment/TYYZ6)
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**The following table defines the features ([spec calls these modules](http://www.w3.org/TR/DOM-Level-2-Core/introduction.html#ID-Conformance))
    and versions that you can pass the *hasFeature()* method.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**以下表格定义了您可以传递给 *hasFeature()* 方法的功能（[规范将这些称为模块](http://www.w3.org/TR/DOM-Level-2-Core/introduction.html#ID-Conformance)）和版本。'
- en: '| Feature | Supported Versions |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 支持的版本 |'
- en: '| --- | --- |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Core | 1.0, 2.0, 3.0 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 核心 | 1.0, 2.0, 3.0 |'
- en: '| XML | 1.0, 2.0, 3.0 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| XML | 1.0, 2.0, 3.0 |'
- en: '| HTML | 1.0, 2.0 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| HTML | 1.0, 2.0 |'
- en: '| Views | 2.0 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 视图 | 2.0 |'
- en: '| StyleSheets | 2.0 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 样式表 | 2.0 |'
- en: '| CSS | 2.0 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| CSS | 2.0 |'
- en: '| CSS2 | 2.0 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| CSS2 | 2.0 |'
- en: '| Events | 2.0, 3.0 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 事件 | 2.0, 3.0 |'
- en: '| UIEvents | 2.0, 3.0 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| UI事件 | 2.0, 3.0 |'
- en: '| MouseEvents | 2.0, 3.0 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 鼠标事件 | 2.0, 3.0 |'
- en: '| MutationEvents | 2.0, 3.0 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 变动事件 | 2.0, 3.0 |'
- en: '| HTMLEvents | 2.0 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| HTML事件 | 2.0 |'
- en: '| Range | 2.0 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 范围 | 2.0 |'
- en: '| Traversal | 2.0 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 遍历 | 2.0 |'
- en: '| LS (Loading and saving between files and DOM trees synchronously) | 3.0 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| LS（在文件和DOM树之间同步加载和保存） | 3.0 |'
- en: '| LS-Asnc (Loading and saving between files and DOM trees asynchronously) |
    3.0 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| LS-Asnc（异步在文件和DOM树之间加载和保存） | 3.0 |'
- en: '| Validation | 3.0 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 验证 | 3.0 |'
- en: Notes
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: Don't trust *hasFeature()* alone you should also use [capability detection](http://dev.opera.com/articles/view/using-capability-detection/)
    in addition to *hasFeature()*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 不要仅仅信任*hasFeature()*，您还应该使用[能力检测](http://dev.opera.com/articles/view/using-capability-detection/)以及*hasFeature()*。
- en: Using the *isSupported* method implementation information can be gathered for
    a specific/selected node only (i.e. *element.isSupported(feature,version*).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*isSupported*方法实现可以仅针对特定/选定的节点（即*element.isSupported(feature,version*）收集信息。
- en: You can determince online what a user agent supports by visiting [http://www.w3.org/2003/02/06-dom-support.html](http://www.w3.org/2003/02/06-dom-support.html).
    Here you will find a table indicating what the browser loading the url claims
    to implement.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问[http://www.w3.org/2003/02/06-dom-support.html](http://www.w3.org/2003/02/06-dom-support.html)来确定用户代理支持的内容。在这里，您将找到一个表，指示加载URL的浏览器声称实现了什么。
- en: 2.7 Get a reference to the focus/active node in the *document*
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.7 获取*文档*中焦点/活动节点的引用
- en: Using the *document.activeElement* we can quickly get a reference to the node
    in the document that is focused/active. In the code below, on page load, I am
    setting the focus of the document to the *<textarea>* node and then gaining a
    reference to that node using the *activeElement* property.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*document.activeElement*，我们可以快速获取文档中具有焦点/活动状态的节点的引用。在下面的代码中，在页面加载时，我将文档的焦点设置为*<textarea>*节点，然后使用*activeElement*属性获取对该节点的引用。
- en: 'live code: [http://jsfiddle.net/domenlightenment/N9npb](http://jsfiddle.net/domenlightenment/N9npb)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/N9npb](http://jsfiddle.net/domenlightenment/N9npb)
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notes
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: The focused/active element returns elements that have the ability to be focused.
    If you visit a web page in a browser and start hitting the tab key you will see
    focus shifting from element to element in that page that can get focused. Don't
    confuse the selection of nodes (highlight sections of the HTML page with mouse)
    with elements that get focus for the purpose of inputting something with keystrokes,
    spacebar, or mouse.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 聚焦/活动元素返回具有聚焦能力的元素。如果您在浏览器中访问网页并开始按下 Tab 键，您将看到焦点从一个可以获得焦点的元素转移到页面中的另一个元素。不要将节点的选择（用鼠标突出显示
    HTML 页面的部分）与为输入某些内容而获得焦点的元素混淆，可以使用按键、空格键或鼠标。
- en: 2.8 Determing if the *document* or any node inside of the *document* has focus
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.8 确定*文档*或*文档*内的任何节点是否具有焦点
- en: Using the document.hasFocus() method its possible to know if the user currently
    is focused on the window that has the HTML document loaded. In the code below
    you see that if we execute the code and then focus another window, tabe, or application
    all together the *getFocus()* will return false.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用document.hasFocus()方法可以知道用户当前是否专注于加载有HTML文档的窗口。在下面的代码中，您会看到，如果我们执行代码然后专注于另一个窗口、标签或应用程序，*getFocus()*将返回false。
- en: 'live code: [http://jsfiddle.net/domenlightenment/JkE3d](http://jsfiddle.net/domenlightenment/JkE3d)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/JkE3d](http://jsfiddle.net/domenlightenment/JkE3d)
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '***## 2.9 *document.defaultview* is a shortcut to the head/global object'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '***## 2.9 *document.defaultview*是头部/全局对象的快捷方式'
- en: You should be aware that the *defaultView* property is a shortcut to the JavaScript
    head object or what some refer to as the global object. The head object in a web
    browser is the *window* object and *defaultView* will point to this object in
    a JavaScript browser enviroment. The code below demonstrates the value of *defaultView*
    in a browser.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该知道*defaultView*属性是JavaScript head对象的快捷方式，有些人称之为全局对象。在Web浏览器中，head对象是*window*对象，*defaultView*将指向JavaScript浏览器环境中的此对象。下面的代码演示了浏览器中*defaultView*的值。
- en: 'live code: [http://jsfiddle.net/domenlightenment/QqK6Q](http://jsfiddle.net/domenlightenment/QqK6Q)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/QqK6Q](http://jsfiddle.net/domenlightenment/QqK6Q)
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you are dealing with a DOM that is headless or an JavaScript enviroment that
    is not running in a web browser (i.e. [node.js](http://nodejs.org/)) this property
    can get you access to the head object scope.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你处理的是一个无头的 DOM 或者一个不在 web 浏览器中运行的 JavaScript 环境（比如 [node.js](http://nodejs.org/)），这个属性可以让你访问到
    head 对象作用域。
- en: 2.9 Getting a reference to the *Document* from an *element* using *ownerDocument*
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 *ownerDocument* 从 *element* 获取 *Document* 的引用 2.9。
- en: The *ownerDocument* property when called on a node returns a reference to the
    *Document* the node is contained within. In the code below I get a reference to
    the *Document* of the *<body>* in the HTML document and the *Document* node for
    the *<body>* element contained inside of the iframe.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当在节点上调用 *ownerDocument* 属性时，它会返回节点所包含的 *Document* 的引用。在下面的代码中，我获取了 HTML 文档中
    *<body>* 的 *Document* 的引用以及 iframe 中包含的 *<body>* 元素的 *Document* 节点。
- en: 'live code: N/A'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '内联代码: N/A'
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If *ownerDocument* is called on the *Document* node the value returned is *null*.******
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 *Document* 节点上调用 *ownerDocument*，则返回的值为 *null*。
