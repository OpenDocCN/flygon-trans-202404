- en: Chapter 10 - JavaScript in the DOM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章 - DOM中的JavaScript
- en: 10.1 Inserting & executing JavaScript overview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.1 插入和执行JavaScript概述
- en: JavaScript can be inserted in to an HTML document in a modern way by including
    external JavaScript files or writing page level inline JavaScript, which is basically
    the contents of an external JavaScript file literally embed in the HTML page as
    a text node. Don't confuse element inline JavaScript contained in attribute event
    handlers (i.e. *<div onclick="alert('yo')"></div>*) with page inline JavaScript
    (i.e. *<script>alert('hi')</script>*).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript可以通过包含外部JavaScript文件或编写页面级内联JavaScript的现代方式插入到HTML文档中，页面级内联JavaScript基本上是外部JavaScript文件的内容直接嵌入到HTML页面中作为文本节点。不要将包含在属性事件处理程序中的元素内联JavaScript（即*<div
    onclick="alert('yo')"></div>*）与页面内联JavaScript（即*<script>alert('hi')</script>*）混淆。
- en: Both methods of inserting JavaScript into an HTML document require the use of
    a *[<script>](http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#the-script-element)*
    [element node](http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#the-script-element).
    The *<script>* element can contain JavaScript code or can be used to link to external
    JavaScript files using the *src* attribute. Both methods are explored in the code
    example below.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将JavaScript插入到HTML文档中的两种方法都需要使用*[<script>](http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#the-script-element)*
    [元素节点](http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#the-script-element)。*<script>*元素可以包含JavaScript代码，也可以用于使用*src*属性链接到外部JavaScript文件。下面的代码示例探讨了这两种方法。
- en: 'live code: [http://jsfiddle.net/domenlightenment/g6T5F](http://jsfiddle.net/domenlightenment/g6T5F)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/g6T5F](http://jsfiddle.net/domenlightenment/g6T5F)
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notes
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Its possible to insert and execute JavaScript in the DOM by placing JavaScript
    in an element attribute event handler (i.e. *<div onclick="alert('yo')"></div>*)
    and using the *javascript:* protocal (e.g. *<a href="javascript:alert('yo')"></a>*)
    but this is no longer considered a modern practice.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将JavaScript放置在元素属性事件处理程序中（即*<div onclick="alert('yo')"></div>*）和使用*javascript:*协议（例如*<a
    href="javascript:alert('yo')"></a>*）在DOM中插入和执行JavaScript，但这不再被视为现代实践。
- en: Trying to include an external JavaScript file and writing page inline JavaScript
    using the same *<script>* element will result in the page inline JavaScript being
    ignored and the exterenal JavaScript file being downloaded and exectued
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在同一个*<script>*元素中包含外部JavaScript文件和编写页面内联JavaScript将导致页面内联JavaScript被忽略，而外部JavaScript文件被下载并执行。
- en: Self-closing scripts tags (i.e. *<script src="" />* ) should be avoid unless
    you are rocking some old school XHTML
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自闭合脚本标签（即*<script src="" />*）应该避免，除非您正在使用一些老式的XHTML。
- en: 'The *<script>* element does not have any required attributes but offers the
    follow optional attribures: *async*, *charset*, *defer*, *src*, and *type*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*<script>*元素没有任何必需的属性，但提供以下可选属性：*async*、*charset*、*defer*、*src*和*type*。'
- en: Page inline JavaScript produces a text node. Which permits the usage of *innerHTML*
    and *textContent* to retrieve the contents of a line *<script>*. However, appending
    a new text node made up of JavaScript code to the DOM after the browser has already
    parsed the DOM will not execute the new JavaScript code. It simply replaces the
    text.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 页面内联JavaScript生成文本节点。这允许使用*innerHTML*和*textContent*来检索一行*<script>*的内容。然而，在浏览器解析DOM后将由JavaScript代码组成的新文本节点附加到DOM中，将不会执行新的JavaScript代码。它只是替换文本。
- en: If JavaScript code contains the string *'</script>'* you will have to escape
    the closing *'/'* with *'<\/script>'* so that the parser does not think this is
    the real closing *</script>* element
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果JavaScript代码包含字符串*'</script>'*，则必须使用*'<\/script>'*转义关闭*'/'*，以便解析器不认为这是真正的闭合*</script>*元素。
- en: 10.2 JavaScript is parsed synchronously by default
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.2 JavaScript默认同步解析
- en: By default when the DOM is being parsed and it encounters a *<script>* element
    it will stop parsing the document, block any further rendering & downloading,
    and exectue the JavaScript. Because this behavior is blocking and does not permit
    parallel parsing of the DOM or exection of JavaScriopt its consider to be synchronous.
    If the JavaScript is external to the html document the blocking is exacerbated
    because the JavaScript must first be downloaed before it can be parsed. In the
    code example below I comment what is occuring during browser rendering when the
    browser encoutners several *<script>* elements in the DOM.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当DOM被解析并遇到一个*<script>*元素时，它将停止解析文档，阻止进一步的渲染和下载，并执行JavaScript。由于这种行为是阻塞的，不允许DOM的并行解析或JavaScript的执行，因此被认为是同步的。如果JavaScript是外部的html文档，阻塞会加剧，因为必须先下载JavaScript才能解析。在下面的代码示例中，我评论了浏览器在DOM中遇到几个*<script>*元素时发生的情况。
- en: 'live code: [http://jsfiddle.net/domenlightenment/rF3Lh](http://jsfiddle.net/domenlightenment/rF3Lh)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/rF3Lh](http://jsfiddle.net/domenlightenment/rF3Lh)
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*****You should make note of the differences between an inline script''s and
    external scripts as it pertains to the loading phase.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*****您应该注意内联脚本和外部脚本在加载阶段的差异。'
- en: Notes
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: The default blocking nature of a *<script>* element can have a significant effect
    on the perfomrance & percived performance of the visual rendering of a HTML web
    page. If you have a couple of script elements at the start of an html page nothing
    else is happening (e.g. DOM parsing & resource loading) until each one is downloaed
    and executed sequentially.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*<script>*元素的默认阻塞特性对HTML网页的视觉渲染性能和感知性能有显著影响。如果在html页面的开头有几个脚本元素，除了下载和执行，没有其他事情发生（例如DOM解析和资源加载），直到每个脚本按顺序下载和执行。'
- en: 10.3 Defering the downloading & exectuion of external JavaScript using *defer*
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.3 推迟下载和执行外部JavaScript使用*defer*
- en: The *<script>* element has an attribute called *defer* that will defer the blocking,
    downloading, and executing of an external JavaScript file until the browser has
    parsed the closing *<html>* node. Using this attribute simply defers what normally
    occurs when a web browser encoutners a *<script>* node. In the code below I defer
    each external JavaScript file until the final *<html>* is encountered.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*<script>*元素有一个名为*defer*的属性，它将延迟外部JavaScript文件的阻塞、下载和执行，直到浏览器解析了闭合的*<html>*节点。使用此属性简单地推迟了当Web浏览器遇到*<script>*节点时通常发生的事情。在下面的代码中，我将每个外部JavaScript文件推迟到最后遇到*<html>*。'
- en: 'live code: [http://jsfiddle.net/domenlightenment/HDegp](http://jsfiddle.net/domenlightenment/HDegp)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/HDegp](http://jsfiddle.net/domenlightenment/HDegp)
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notes
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: According to the specification defered scripts are suppose to be exectued in
    document order and before the *DOMContentLoaded* event. However, adherence to
    this specification among modern browsers is inconsistent.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据规范，延迟脚本应该按照文档顺序执行，并在*DOMContentLoaded*事件之前执行。然而，现代浏览器对此规范的遵守并不一致。
- en: '*defer* is a boolan attribute it does not have a value'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*defer*是一个布尔属性，它没有值。'
- en: Some browers support defered inline scripts but this is not common among modern
    browsers
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一些浏览器支持延迟内联脚本，但这在现代浏览器中并不常见。
- en: By using *defer* the assummption is that *document.write()* is not being used
    in the JavaScript that will be defered
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*defer*的假设是在延迟执行的JavaScript中不使用*document.write()*。
- en: 10.4 Asynchronously downloading & executing external JavaScript files using
    *async*
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.4 使用*async*异步下载和执行外部JavaScript文件
- en: The *<script>* element has an attribute called *async* that will override the
    sequential blocking nature of *<script>* elements when the DOM is being constructed
    by a web browser. By using this attribute, we are telling the browser not to block
    the construction (i.e. DOM parsing, including downloading other assets e.g. images,
    style sheets, etc...) of the html page and forgo the the sequential loading as
    well.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*<script>*元素有一个名为*async*的属性，当Web浏览器构建DOM时，它将覆盖*<script>*元素的顺序阻塞特性。通过使用此属性，我们告诉浏览器不要阻止构建（即DOM解析，包括下载其他资源如图像、样式表等...）html页面，并放弃顺序加载。'
- en: What happens by using the *async* attribute is the files are loaded in parallel
    and parsed in order of download once they are fully downloaded. In the code below
    I comment what is happening when the HTML document is being parsed and render
    by the web browser.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用*async*属性，文件会并行加载，并按照下载顺序解析一旦它们完全下载。在下面的代码中，我解释了在Web浏览器解析和渲染HTML文档时发生的情况。
- en: 'live code: [http://jsfiddle.net/domenlightenment/](http://jsfiddle.net/domenlightenment/)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/](http://jsfiddle.net/domenlightenment/)
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '***### Notes'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '***### 注意事项'
- en: IE 10 has support for *async*, but IE 9 does not
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: IE 10支持*async*，但IE 9不支持
- en: A major drawback to using the *async* attribute is JavaScript files potentially
    get parsed out of the order they are included in the DOM. This raises a dependency
    management issue.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*async*属性的一个主要缺点是JavaScript文件可能会按照它们在DOM中包含的顺序被解析。这会引发依赖管理问题。
- en: '*async* is a boolan attribute it does not have a value'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*async*是一个布尔属性，它没有值'
- en: By using *async* the assummption is that *document.write()* is not being used
    in the JavaScript that will be defered
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用*async*，假设JavaScript中没有使用*document.write()*，那么将会被推迟的JavaScript不会出现问题
- en: The *async* attribute will trump the *defer* if both are used on a *<script>*
    element
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在*<script>*元素上同时使用*async*和*defer*，*async*属性将覆盖*defer*。
- en: 10.5 Forcing asynchronous downloading & parsing of external JavaScript using
    dynamic *<script>*
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.5 强制异步下载和解析外部JavaScript使用动态*<script>*
- en: A known hack for forcing a web browser into asynchronous JavaScript downloading
    and parsing without using the *async* attribure is to programatically create *<script>*
    elements that include external JavaScript files and insert them in the DOM. In
    the code below I programatically create the *<script>* element node and then append
    it to the *<body>* element which forces the browser to treat the *<script>* element
    asynchronously.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 强制Web浏览器进行异步JavaScript下载和解析的已知方法，而不使用*async*属性，是通过编程方式创建包含外部JavaScript文件的*<script>*元素，并将其插入DOM中。在下面的代码中，我通过编程方式创建*<script>*元素节点，然后将其附加到*<body>*元素中，这迫使浏览器将*<script>*元素异步处理。
- en: 'live code: [http://jsfiddle.net/domenlightenment/du94d](http://jsfiddle.net/domenlightenment/du94d)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/du94d](http://jsfiddle.net/domenlightenment/du94d)
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*### Notes'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*### 注意事项'
- en: A major drawback to using dynamic *<script>* elements is JavaScript files potentially
    get parsed out of the order they are included in the DOM. This raises a dependency
    management issue.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用动态*<script>*元素的一个主要缺点是JavaScript文件可能会按照它们在DOM中包含的顺序被解析。这会引发依赖管理问题。
- en: 10.6 Using the *onload* call back for asynchronous *<script>*'s so we know when
    its loaded
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.6 使用异步*<script>*的*onload*回调，以便我们知道何时加载完成
- en: The *<script>* element [supports a load event](http://pieisgood.org/test/script-link-events/)
    handler (ie. *onload*) that will execute once an external JavaScript file has
    been loaded and executed. In the code below I leverage the *onload* event to create
    a callback programatically notifying us when the JavaScript file has been downloaded
    and exectued.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*<script>*元素支持一个加载事件（即*onload*）处理程序，一旦外部JavaScript文件被加载和执行，它将执行。在下面的代码中，我利用*onload*事件来创建一个回调，程序化地通知我们JavaScript文件何时被下载和执行。'
- en: 'live code: [http://jsfiddle.net/domenlightenment/XzAFx](http://jsfiddle.net/domenlightenment/XzAFx)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/XzAFx](http://jsfiddle.net/domenlightenment/XzAFx)
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notes
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: The *onload* event is only the tip of the iceberg [avaliable where *onload*
    is supported](http://pieisgood.org/test/script-link-events/) you also have use
    of *onerror*, *load*, and, *error*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*onload*事件只是冰山一角[在支持*onload*的地方可用](http://pieisgood.org/test/script-link-events/)，你还可以使用*onerror*、*load*和*error*。'
- en: 10.7 Be mindful of *<script>* 's placement in HTML for DOM manipulation
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.7 谨慎处理*<script>*在HTML中的位置以进行DOM操作
- en: 'Given a *<script>* elements synchronous nature, placing one in the *<head>*
    element of an HTML document presents a timing problem if the JavaScript execution
    is dependant upon any of the DOM that proceeds the *<script>*. In a nut shell,
    if JavaScript is executed at the begining of a document that manipulates the DOM,
    that proceeds it, you are going to get a JavaScript error. Proven by the following
    code example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于*<script>*元素的同步性质，如果将其放置在HTML文档的*<head>*元素中，会出现时间问题，如果JavaScript执行依赖于在*<script>*之前的任何DOM，那么会出现JavaScript错误。简而言之，如果在操作DOM的JavaScript在其之前执行，你将会得到一个JavaScript错误。通过以下代码示例证明：
- en: 'live code: N/A'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：N/A
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Many developers, myself being one of them, for this reason will attempt to place
    all *<script>* elements before the closing *</body>* element. By doing this you
    can rest assured the DOM in front of the *<script>*'s has been parsed and is ready
    for scripting. As well, this strategy will remove a dependancy on DOM ready events
    that can liter a code base.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者，我自己也是其中之一，因此会尝试将所有*<script>*元素放置在闭合的*</body>*元素之前。通过这样做，你可以放心地确保*<script>*前面的DOM已经被解析并准备好进行脚本编写。此外，这种策略还将消除对DOM就绪事件的依赖，这可以使代码库更加清晰。
- en: 10.8 Getting a list of *<script>*'s in the DOM
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.8 获取DOM中*<script>*元素的列表
- en: The *document.scripts* property avaliable from the document object provides
    a list (i.e. an *HTMLCollection*) of all of the scripts currently in the DOM.
    In the code below I leverage this property to gain access to each of the *<script>*
    elements *src* attributes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从文档对象中提供的*document.scripts*属性提供了一个列表（即*HTMLCollection*），其中包含当前DOM中的所有脚本。在下面的代码中，我利用这个属性来访问每个*<script>*元素的*src*属性。
- en: 'live code: N/A'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 内联代码：N/A
- en: '[PRE7]*********'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7]*********'
