- en: Number representations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字表示
- en: 'Let''s have another look at my Collatz code. Remember that the conjecture was
    that the Collatz sequence always ends at one. We test this with some larger numbers:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看看我的 Collatz 代码。记住，猜想是 Collatz 序列总是以一结束。我们用一些较大的数字来测试这个：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And at this point the program seems to go into an infinite loop!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此时程序似乎陷入了无限循环！
- en: 'But that means that we do not reach the number one—did we manage to find a
    counter example to the Collatz conjecture? Let''s try to find the starting value
    that leads to the infinite sequence. Here is a new function to do that ([collatz4.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/07-collatz/collatz4.kts)):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但这意味着我们没有达到数字一——我们成功找到了 Collatz 猜想的一个反例吗？让我们尝试找到导致无限序列的起始值。这是一个新的函数来做到这一点（[collatz4.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/07-collatz/collatz4.kts)）：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s try it:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It seems that starting with 113383 leads to an infinite sequence! Let''s print
    out the first numbers in this sequence. I add a print statement to collatzBounded
    ([collatz5.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/07-collatz/collatz5.kts)):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从 113383 开始似乎会导致一个无限序列！让我们打印出这个序列中的前几个数字。我在 collatzBounded 中添加了一个打印语句（[collatz5.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/07-collatz/collatz5.kts)）：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output is this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是这样的：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'What''s that? Why are there negative numbers? The last positive number is 827370449,
    so let''s see what happens to that:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是什么？为什么有负数？最后一个正数是 827370449，所以让我们看看发生了什么：
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Oops! Is our definition of the next function wrong?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！我们下一个函数的定义是错的吗？
- en: '[PRE6]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: No, it seems that Kotlin's arithmetic is broken!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不，看来 Kotlin 的算术出了问题！
- en: 'It turns out that you have to be careful with Int integer objects. Int integers
    have 32 bits, and therefore the largest possible Int value is \(2^{31} - 1\).
    You can also find this maximum value as Int.MAX_VALUE. But \(3 \cdot 827370449\)
    is larger than this. We can check this by computing the value using long arithmetic.
    A Long is an integer with 64 bits. You can convert an integer to a Long using
    the toLong() method, or simply write an L after a literal integer:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 原来你必须小心处理 Int 整数对象。Int 整数有 32 位，因此最大可能的 Int 值是 \(2^{31} - 1\)。你也可以将这个最大值表示为
    Int.MAX_VALUE。但 \(3 \cdot 827370449\) 比这个值大。我们可以通过长算术来计算该值进行检查。Long 是具有 64 位的整数。你可以使用
    toLong() 方法将整数转换为 Long，或者在字面整数后面简单地写一个 L：
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How numbers are represented
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数字是如何表示的
- en: 'Integers are represented using a fixed number of bits, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 整数使用固定数量的位表示，如下所示：
- en: '| Long | 64 bits |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| Long | 64 位 |'
- en: '| Int | 32 bits |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| Int | 32 位 |'
- en: '| Short | 16 bits |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| Short | 16 位 |'
- en: '| Byte | 8 bits |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 字节 | 8 位 |'
- en: 'Arithmetic on these types is performed by the hardware using registers of fixed
    length. For instance, imagine we had a type of integer with four bits, and we
    perform some additions:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对这些类型的算术是通过使用固定长度的寄存器的硬件执行的。例如，想象一下我们有一种具有四位的整数类型，并且我们执行一些加法：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since the register has only four bits, the overflow that happens when you add \(9
    + 7\) cannot be represented, and the result is not \(10000 = 16\) but \(0000 =
    0\).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于寄存器只有四位，当你相加 \(9 + 7\) 时发生的溢出无法表示，结果不是 \(10000 = 16\) 而是 \(0000 = 0\)。
- en: In other words, integer addition and subtraction is really addition and subtraction
    modulo \(2^{k}\), where \(k\) is the number of bits. For our four-bit data type,
    additions are modulo 16, and therefore \(9 + 7 = 0\).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，整数加法和减法实际上是模 \(2^{k}\) 加法和减法，其中 \(k\) 是位数。对于我们的四位数据类型，加法是模 16，因此 \(9 +
    7 = 0\)。
- en: 'This is actually convenient, because it allows us to use negative numbers without
    any extra hardware: For instance, since \(-1 \equiv 15\) (modulo 16), we can subtract
    one by adding \(15\):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上很方便，因为它允许我们使用负数而不需要任何额外的硬件：例如，由于 \(-1 \equiv 15\)（模 16），我们可以通过添加 \(15\)
    来减去一个数：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Of course the problem is how to determine what number the output represents.
    When the result is \(1111\), does that mean \(15\) or \(-1\)?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当结果为 \(1111\) 时，如何确定输出表示什么数字。当结果为 \(1111\) 时，是表示 \(15\) 还是表示 \(-1\)？
- en: 'The standard convention is to say that the number is negative when the first
    bit is one. In other words, \(1000 ... 1111\) are \(-8\) to \(-1\), and \(0000
    ... 0111\) are \(0\) to \(7\):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 标准惯例是说当第一位是一时，数字为负。换句话说，\(1000 ... 1111\) 是 \(-8\) 到 \(-1\)，而 \(0000 ... 0111\)
    是 \(0\) 到 \(7\)：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is convenient, because it's very easy to test if a number is negative,
    but it's just a convention. Some programming languages (like C and C++) also have
    unsigned integers, where \(0000 ... 1111\) mean \(0\) to \(15\). In principle,
    we could also say that \(1100 ... 1111\) mean \(-4\) to \(-1\), and \(0000 ...
    1011\) mean \(0\) to \(11\).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这很方便，因为检测一个数字是否为负数非常容易，但这只是一种约定。一些编程语言（如C和C++）也有无符号整数，其中\(0000 ... 1111\)表示\(0\)到\(15\)。原则上，我们也可以说\(1100
    ... 1111\)表示\(-4\)到\(-1\)，而\(0000 ... 1011\)表示\(0\)到\(11\)。
- en: In our example above, we performed the multplication \(3 * 827370449 = 2482111347\).
    In binary, this is
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上面的例子中，我们进行了乘法运算\(3 * 827370449 = 2482111347\)。在二进制中，这是
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first bit of the result is \(1\), and therefore it is considered negative.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的第一位是\(1\)，因此被视为负数。
- en: You can learn more about number representations [here](http://www.swarthmore.edu/NatSci/echeeve1/Ref/BinaryMath/NumSys.html).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[这里](http://www.swarthmore.edu/NatSci/echeeve1/Ref/BinaryMath/NumSys.html)了解更多关于数字表示的信息。
