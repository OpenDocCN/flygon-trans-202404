- en: Pair Program and Feel the Flow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配对编程，感受工作流程
- en: Pair Program and Feel the Flow
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配对编程，感受工作流程
- en: Imagine that you are totally absorbed by what you are doing — focused, dedicated,
    and involved. You may have lost track of time. You probably feel happy. You are
    experiencing flow. It is difficult to both achieve and maintain flow for a whole
    team of developers since there are so many interruptions, interactions, and other
    distractions that can easily break it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你完全沉浸在自己正在做的事情中 —— 专注、专心和投入。你可能已经忘记了时间。你可能感到快乐。你正在经历工作流程。要想让整个开发团队都实现和保持工作流程是困难的，因为有很多干扰、交互和其他容易打破它的干扰因素。
- en: If you have already practiced pair programming, you are probably familiar with
    how pairing contributes to flow. If you have not, we want to use our experiences
    to motivate you to start right now! To succeed with pair programming both individual
    team members and the team as a whole have to put in some effort.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经练习了配对编程，你可能已经了解了配对如何促进工作流程。如果没有，我们希望利用我们的经验来激励你立即开始！要成功地进行配对编程，个别团队成员和整个团队都必须付出一些努力。
- en: As a team member, be patient with developers less experienced than you. Confront
    your fears about being intimidated by more skilled developers. Realize that people
    are different, and value it. Be aware of your own strengths and weaknesses, as
    well as those of other team members. You may be surprised how much you can learn
    from your colleagues.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为团队成员，对比你经验不如你的开发人员要有耐心。面对自己被技术更熟练的开发人员吓到的恐惧。意识到人与人不同，并加以珍视。要意识到自己的优点和缺点，以及其他团队成员的优点和缺点。你可能会惊讶地发现你能从同事那里学到多少东西。
- en: As a team, introduce pair programming to promote distribution of skills and
    knowledge throughout the project. You should solve your tasks in pairs and rotate
    pairs and tasks frequently. Agree upon a rule of rotation. Put the rule aside
    or adjust it when necessary. Our experience is that you do not necessarily need
    to complete a task before rotating it to another pair. Interrupting a task to
    pass it to another pair may sound counterintuitive, but we have found that it
    works.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 作为团队，引入配对编程以促进技能和知识在项目中的分配。你应该成对解决任务，并经常轮换任务和配对。达成轮换规则的一致意见。在必要时放下或调整规则。我们的经验是，你不一定需要在将任务完成之前将其轮换到另一对。打断任务将其传递给另一对可能听起来违反直觉，但我们发现它行得通。
- en: 'There are numerous situations where flow can be broken, but where pair programming
    helps you keep it:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多情况会打断工作流程，但是配对编程可以帮助你保持流程的情况有：
- en: '**Reduce the "truck factor":** It''s a slightly morbid thought experiment,
    but how many of your team members would have to be hit by a truck before the team
    became unable to complete the final deliverable? In other words, how dependent
    is your delivery on certain team members? Is knowledge privileged or shared? If
    you have been rotating tasks among pairs, there is always someone else who has
    the knowledge and can complete the work. Your team''s flow is not as affected
    by the "truck factor."'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低“卡车因素”：** 这是一个略带 morbide 的思想实验，但是在你的团队中有多少成员必须被卡车撞到才会导致团队无法完成最终交付的任务？换句话说，你的交付任务对某些团队成员的依赖程度有多大？知识是优先的还是共享的？如果你一直在不同的配对之间轮换任务，总会有其他人掌握知识并完成工作。你的团队的流程不会受到“卡车因素”的影响。'
- en: '**Solve problems effectively:** If you are pair programming and you run into
    a challenging problem, you always have someone to discuss it with. Such dialog
    is more likely to open up possibilities than if you are stuck by yourself. As
    the work rotates, your solution will be revisited and reconsidered by the next
    pair, so it does not matter if you did not choose the optimal solution initially.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有效解决问题：** 如果你在进行配对编程时遇到了一个具有挑战性的问题，你总是有人可以讨论。这样的对话更有可能打开可能性，而不是让你自己陷入困境。随着工作的轮换，你的解决方案将被下一对重新审视和重新考虑，因此如果你最初没有选择最优解决方案也没关系。'
- en: '**Integrate smoothly:** If your current task involves calling another piece
    of code, you hope the names of the methods, the docs, and the tests are descriptive
    enough to give you a grasp of what it does. If not, pairing with a developer who
    was involved in writing that code will give you better overview and faster integration
    into your own code. Additionally, you can use the discussion as an opportunity
    to improve the naming, docs, and testing.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平稳集成：** 如果你当前的任务涉及调用另一段代码，你希望方法的名称、文档和测试足够描述，以便你能够掌握它的作用。如果不是，与编写该代码的开发人员进行配对编程将使你对其有更好的概述，并更快地集成到你自己的代码中。此外，你可以利用讨论的机会改进命名、文档和测试。'
- en: '**Mitigate interruptions:** If someone comes over to ask you a question, or
    your phone rings, or you have to answer an urgent email, or you have to attend
    a meeting, your pair programming partner can keep on coding. When you return your
    partner is still in the flow and you will quickly catch up and rejoin them.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少打扰：** 如果有人过来问你问题，或者你的电话响了，或者你必须回复紧急邮件，或者你必须参加会议，你的编程伙伴可以继续编码。当你回来时，你的伙伴仍然在状态中，你很快就能赶上并重新加入他们。'
- en: '**Bring new team members up to speed quickly:** With pair programming, and
    a suitable rotation of pairs and tasks, newcomers quickly get to know both the
    code and the other team members.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速带新团队成员上手：** 通过结对编程，并适当轮换团队成员和任务，新人很快就能了解代码和其他团队成员。'
- en: Flow makes you incredibly productive. But it is also vulnerable. Do what you
    can to get it, and hold on to it when you've got it!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 流畅让你变得极其高效。但它也很脆弱。尽力争取进入状态，并在进入状态后保持住它！
- en: By [Gudny Hauknes](http://programmer.97things.oreilly.com/wiki/index.php/Gudny_Hauknes),
    [Ann Katrin Gagnat](http://programmer.97things.oreilly.com/wiki/index.php/Ann_Katrin_Gagnat),
    and Kari Røssland
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[古德尼·豪克内斯](http://programmer.97things.oreilly.com/wiki/index.php/Gudny_Hauknes)、[安·卡特琳·加格纳特](http://programmer.97things.oreilly.com/wiki/index.php/Ann_Katrin_Gagnat)和卡里·罗斯兰
