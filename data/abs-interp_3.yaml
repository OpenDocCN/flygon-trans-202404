- en: 3  Topics in abstract interpretation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3  抽象解释中的主题
- en: 3.1  Abstract domains
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1  抽象域
- en: An abstract domain is an abstract algebra, often implemented as a library module
    (see **Sec. [5](#sec:libraries)**), providing a description of abstract program
    properties and abstract property transformers describing the operational effect
    of program instructions and commands in the abstract. Abstract domains are often
    complete lattices, an abstraction of powersets [[26](#CousotCousot79-1-POPL)].
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象域是一个抽象代数结构，通常作为一个库模块实现（参见**第[5](#sec:libraries)**节），提供了对抽象程序属性和描述程序指令和命令在抽象中的操作效果的抽象属性变换器的描述。抽象域通常是完备格，是幂集的一种抽象[[26](#CousotCousot79-1-POPL)]。
- en: 3.2  Finite versus infinite abstract domains
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.2  有限与无限抽象域
- en: The first infinite abstract domain (that of intervals) was introduced in [[21](#CousotCousot76-1-ISOP)].
    This abstract domain was later used to prove that, thanks to widenings, infinite
    abstract domains can lead to effective static analyses for a given programming
    language that are strictly more precise and equally efficient than any other one
    using a finite abstract domain or an abstract domain satisfying chain conditions
    [[31](#CousotCousot92-4-PLILP)].
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个无限抽象域（区间的抽象域）是在[[21](#CousotCousot76-1-ISOP)]中介绍的。这个抽象域后来被用来证明，由于widening，无限抽象域可以导致针对给定编程语言的有效静态分析，这些分析比使用有限抽象域或满足链条件的抽象域的任何其他分析都更精确且同样高效[[31](#CousotCousot92-4-PLILP)]。
- en: 3.3  Merge over all paths (MOP) in dataflow analysis
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.3  在数据流分析中合并所有路径的(MOP)
- en: The first dataflow analyses where proved correct by comparing the union of the
    abstraction along all execution paths (so-called MOP[¹](#tthFtNtAAB) solution)
    with a fixpoint solution using transfer functions (i.e. abstract property transformer)
    [[67](#Hecht77-1)]. Instead of comparing one solution of the static analysis problem
    to another one, the theory of abstract interpretation introduced the idea that
    the correctness/soundness should be expressed with respect to a formal semantics.
    A consequence is that static analysis algorithms can be specified and designed
    by approximation of a program semantics. Moreover, the "fixpoint solution" was
    shown to be an abstraction of the "MOP solution". These two solutions coincide
    for distributive abstract interpretations (for which abstract transformers preserve
    union). Otherwise, the abstract domain used for the fixpoint solution can be minimally
    enriched into its *disjunctive completion* to get exactly the "MOP solution" in
    fixpoint form (on the completed abstract domain) [[26](#CousotCousot79-1-POPL)].
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个数据流分析通过比较沿着所有执行路径的抽象的并集（所谓的MOP[¹](#tthFtNtAAB)解）与使用转移函数（即抽象属性变换器）的不动点解来证明其正确性[[67](#Hecht77-1)]。与将静态分析问题的一个解与另一个解进行比较不同，抽象解释理论引入了正确性/完备性应该根据形式化语义来表达的思想。一个结果是，静态分析算法可以通过近似程序语义来指定和设计。此外，“不动点解”被证明是“MOP解”的一个抽象。这两种解在分布式抽象解释中相符（其中抽象变换器保持并集）。否则，用于不动点解的抽象域可以被最小地丰富为其*分离完成*，以在完整的抽象域上获得完全的“MOP解”（在完整的抽象域上）[[26](#CousotCousot79-1-POPL)]。
- en: 3.4  Standard and collecting semantics
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.4  标准和收集语义
- en: The *collecting semantics* or *non-standard semantics* (after the *static semantics*
    of [[22](#CousotCousot77-1-POPL)]) is the semantics of the language formally defining
    the program execution properties of interest to be analyzed by abstraction. These
    program executions themselves are formalized by the standard semantics.For example
    in [[22](#CousotCousot77-1-POPL)], the standard semantics is an operational semantics.
    The concrete properties of interest are invariance properties so the collecting
    semantics defines the reachable states from initial states. This collecting semantics
    is expressed as the least fixpoint of equations using strongest postcondition
    transformers. Thus the considered abstractions provide abstract invariance properties
    (overapproximating the reachable states).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*收集语义*或*非标准语义*（在[[22](#CousotCousot77-1-POPL)]的*静态语义*之后）是正式定义了要通过抽象分析分析的程序执行属性的语言的语义。这些程序执行本身由标准语义形式化。例如在[[22](#CousotCousot77-1-POPL)]中，标准语义是一个操作语义。感兴趣的具体属性是不变性属性，因此收集语义定义了从初始状态到达的可达状态。这个收集语义被表达为使用最强后条件变换器的方程的最小不动点。因此，考虑到的抽象提供了抽象的不变性属性（对可达状态进行了近似）。'
- en: 3.5  Galois connection
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.5  Galois 连接
- en: Galois connections can be used when the abstract domain always offers a most
    precise approximation of any concrete property [[26](#CousotCousot79-1-POPL)].
    Indeed the Galois connections introduced in [[21](#CousotCousot76-1-ISOP),[22](#CousotCousot77-1-POPL)]
    are the semi-dual of the one introduced by Évariste Galois, and so do compose
    (the abstraction of an abstraction is an abstraction). Equivalent presentations
    involve closure operators, ideals, congruences, etc [[26](#CousotCousot79-1-POPL)].An
    interesting consequence of the existence of the best abstraction of concrete properties
    is the existence of best/most precise transformers, which provides guidelines
    for their [automatic] design [[17](#Cousot99-3-Marktoberdorf-paper)]. Moreover
    by abstracting fixpoints by fixpoints, static analysis is specified by an abstract
    semantics expressed in fixpoint form whereas a static analyzer is an algorithm
    for computing or overapproximating this fixpoint.There are several alternative
    formalizations in absence of best approximations [[94](#MycroftJones86-1)], [[30](#CousotCousot92-3-JLC)].
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Galois 连接可用于当抽象域始终提供任何具体属性的最精确近似时[[26](#CousotCousot79-1-POPL)]。事实上，[[21](#CousotCousot76-1-ISOP),[22](#CousotCousot77-1-POPL)]中介绍的
    Galois 连接是 Évariste Galois 引入的连接的半对偶，因此可以组成（一个抽象的抽象是一个抽象）。等效的表达涉及闭包算子、理想、同余等[[26](#CousotCousot79-1-POPL)]。存在具体属性的最佳抽象的一个有趣后果是存在最佳/最精确的变换器，这为它们的[自动]设计提供了指导[[17](#Cousot99-3-Marktoberdorf-paper)]。此外，通过将抽象点抽象为点，静态分析由表达为点形式的抽象语义指定，而静态分析器是计算或过度逼近此点的算法。在没有最佳近似的情况下，存在几种替代的形式化[[94](#MycroftJones86-1)]，[[30](#CousotCousot92-3-JLC)]。
- en: 3.6  Moore family, Closure operators
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.6 Moore family，闭包算子
- en: If the correspondance between the concrete and abstract properties is given
    by a Galois connection, then the image of the abstract properties in the concrete
    is a *Moore family*, which is the image of the concrete properties by a *closure
    operator* [[26](#CousotCousot79-1-POPL)]. The formalization of the abstraction
    by closure operators is useful to abstract away from the representation of the
    concrete properties. Other equivalent formalizations of the existence of the best
    abstraction of concrete properties include principal ideals, complete join congruences,
    etc [[26](#CousotCousot79-1-POPL)].
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果具体属性和抽象属性之间的对应关系由 Galois 连接给出，则抽象属性在具体属性中的图像是 *Moore family*，这是具体属性的图像由 *closure
    operator* 给出[[26](#CousotCousot79-1-POPL)]。通过闭包算子对抽象的抽象进行形式化对于从具体属性的表示中抽象出来是有用的。具体属性的最佳抽象的存在的其他等价形式化包括主理想、完全加入同余等[[26](#CousotCousot79-1-POPL)]。
- en: 3.7  Moore completion
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.7 Moore completion
- en: If an abstract domains has no best approximations for some concrete properties
    its *Moore completion* is the most abstract abstract domain more expressive than
    the original abstract domain which has this property [[26](#CousotCousot79-1-POPL)].
    This introduces a Galois connection.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个抽象域对于某些具体属性没有最佳近似，那么其 *Moore completion* 就是比原始抽象域更具表达力的最抽象抽象域[[26](#CousotCousot79-1-POPL)]。这引入了一个
    Galois 连接。
- en: 3.8  Fixpoints
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.8 Fixpoints
- en: Most program properties can be expressed as fixpoints of monotone or extensive
    property transformers, a property preserved by abstraction [[26](#CousotCousot79-1-POPL)].
    This reduces program analysis to fixpoint approximation and verification to fixpoint
    checking [[22](#CousotCousot77-1-POPL)].
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数程序属性可以表达为单调或广义性质变换器的 fixpoints，这是一种由抽象保留的属性[[26](#CousotCousot79-1-POPL)]。这将程序分析简化为
    fixpoint 近似，并将验证简化为 fixpoint 检查[[22](#CousotCousot77-1-POPL)]。
- en: 3.9  Inference rules
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.9 推理规则
- en: Most (concrete and abstract) program properties can also be expressed using
    inference rules, which indeed is equivalent to definitions using fixpoints, equations,
    constraints, etc [[34](#CousotCousot95-4-CAV)]. This point of view has the advantage
    of separating the design of an (abstract) semantics (or a static analysis) from
    its formal presentation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数（具体和抽象）程序属性也可以使用推理规则来表达，这实际上等同于使用 fixpoints、方程、约束等进行定义[[34](#CousotCousot95-4-CAV)]。这种观点的优点是将（抽象）语义（或静态分析）的设计与其形式化表示分开。
- en: 3.10  Iteration
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.10 迭代
- en: A standard method for fixpoints construction is *iteration*. This can be extended
    to transfinite iterations to prove Tarski's fixpoint theorem [[25](#CousotCousot79-3)].
    In practice one can accelerate the fixpoint computation using appropriate iteration
    strategies formalized as chaotic/asynchronous iterations [[14](#Cousot78-1-TheseEtat)].
    This extends to higher-order [[24](#CousotCousot77-3)], [[74](#JonesRosendahl97-jflp)].
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 构造不动点的标准方法是*迭代*。这可以扩展到超限迭代以证明塔斯基的不动点定理[[25](#CousotCousot79-3)]。在实践中，可以使用适当的迭代策略加速不动点计算，将其形式化为混沌/异步迭代[[14](#Cousot78-1-TheseEtat)]。这扩展到高阶[[24](#CousotCousot77-3)],
    [[74](#JonesRosendahl97-jflp)]。
- en: 3.11  Convergence acceleration by widening/narrowing
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.11  通过加宽/收窄加速收敛
- en: Convergence acceleration is mandatory in infinite abstract domains in which
    the iterative computation of abstract fixpoints may diverge. Widenings/narrowings
    and their duals are universal methods to do so [[22](#CousotCousot77-1-POPL),[14](#Cousot78-1-TheseEtat)].
    This extends to higher-order [[24](#CousotCousot77-3),[6](#Bourdoncle-FMPA93)].
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在无限抽象域中，收敛加速是必需的，其中抽象不动点的迭代计算可能会发散。加宽/收窄及其对偶是通用的方法[[22](#CousotCousot77-1-POPL),[14](#Cousot78-1-TheseEtat)]。这扩展到高阶[[24](#CousotCousot77-3),[6](#Bourdoncle-FMPA93)]。
- en: 3.12  Constraint resolution
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.12  约束解决
- en: Thanks to Tarski's theorem, fixpoints can be re-expressed as equality or inequality
    constraints whence static analysis can be equally viewed as a fixpoint approximation
    or as a constraint resolution problem. Some constraint resolution methods are
    mere fixpoint iteration (e.g. set-based analysis [[35](#CousotCousot95-3-FPCA)]).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于塔斯基的定理，不动点可以重新表达为相等或不等式约束，因此静态分析既可以被视为不动点近似，也可以被视为约束解决问题。一些约束解决方法仅是不动点迭代（例如基于集合的分析[[35](#CousotCousot95-3-FPCA)]）。
- en: 3.13  Modularity
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.13  模块化
- en: The static analysis of programs by parts [[37](#CousotCousot-CC02)]. This includes
    separate interprocedural analysis [[24](#CousotCousot77-3)].
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的静态分析可以分为部分进行[[37](#CousotCousot-CC02)]。这包括单独的过程内分析[[24](#CousotCousot77-3)]。
- en: 3.14  Abstract domain combination
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.14  抽象域组合
- en: The design of abstractions can be done by parts, by choosing basic abstractions
    and then by composing them using abstract domain combinators [[26](#CousotCousot79-1-POPL)].
    This provides a unifying view on abstract domain design [[52](#FileGiacobazziRanzato96-1survey)].There
    are numerous examples of such abstract domain combinations including the *reduced
    sum*, the *reduced product* and the *reduced power* [[26](#CousotCousot79-1-POPL)].
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象的设计可以通过部分进行，选择基本抽象，然后使用抽象域组合器将它们组合起来[[26](#CousotCousot79-1-POPL)]。这为抽象域设计提供了一个统一的视角[[52](#FileGiacobazziRanzato96-1survey)]。有许多这样的抽象域组合的例子，包括*减少和*、*减少积*和*减少幂*[[26](#CousotCousot79-1-POPL)]。
- en: 3.15  Refinement
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.15  细化
- en: The enrichment of an abstract domain so has to express in the refined domain
    properties which cannot be expressed in the original domain. Examples are the
    *Moore completion* **Sec. [3.7](#sec:Moorecompletion)**, *partitioning* [[15](#Cousot81-1-MuchnickJones),[5](#Bourdoncle92-1),[79](#MauborgneRival05-ESOP)],
    [[69](#JeannetHalbwachsRaymond-SAS-99)], the *disjunctive completion* [[26](#CousotCousot79-1-POPL)],
    [[53](#FileRanzato-TCS99)], the *Heyting completion* [[59](#GiacobazziScozzari-TOPLAS-98)],
    *complementation* [[13](#CortesiFileGiacobazziPalamidessiRanzato97)], etc.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 将抽象域丰富到能够表达在原始域中无法表达的细化域中的属性。例如*Moore完成* **Sec. [3.7](#sec:Moorecompletion)**、*分区*
    [[15](#Cousot81-1-MuchnickJones),[5](#Bourdoncle92-1),[79](#MauborgneRival05-ESOP)],
    [[69](#JeannetHalbwachsRaymond-SAS-99)], *分解完成* [[26](#CousotCousot79-1-POPL)],
    [[53](#FileRanzato-TCS99)], *Heyting完成* [[59](#GiacobazziScozzari-TOPLAS-98)],
    *补集* [[13](#CortesiFileGiacobazziPalamidessiRanzato97)]等。
- en: 3.16  Completion
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.16  完成
- en: The refinement of an abstract domain into the most abstract abstract domain
    which is precise enough to prove a given specification [[26](#CousotCousot79-1-POPL)],
    [[93](#Mycroft93-1),[57](#GiacobazziRanzato97-amast),[58](#GiacobazziRanzatoScozzari-JACM-00),[104](#Schmidt-APLAS06)].
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将抽象域细化为足够精确以证明给定规范的最抽象抽象域的方法[[26](#CousotCousot79-1-POPL)], [[93](#Mycroft93-1),[57](#GiacobazziRanzato97-amast),[58](#GiacobazziRanzatoScozzari-JACM-00),[104](#Schmidt-APLAS06)]。
- en: 3.17  Lattice of abstract interpretations
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.17  抽象解释的格
- en: A consequence of the formalization of static analyses by Galois connections
    is that they can be organized into a complete lattice according to the partial
    order of their relative precisions [[26](#CousotCousot79-1-POPL)]. All semantics
    and analyses are present in this formally defined lattice and so it remains to
    find the useful ones, which is the real question!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过伽罗华连接对静态分析进行形式化的一个结果是，它们可以根据其相对精度的偏序关系组织成完全格[[26](#CousotCousot79-1-POPL)]。所有的语义和分析都存在于这个形式上定义的格中，因此找到有用的分析就成了真正的问题！
