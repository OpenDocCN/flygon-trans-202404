- en: Classes with methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有方法的类
- en: Objects are the basis of object-oriented programming. In Scala, every piece
    of data is an object. The type of the object determines what you can do with the
    object. Classes can contain data (the state of the object) and methods (what you
    can do with the object). You can think about a class as a blueprint for objects.
    Once you define a class, you can create objects from the blueprint using the keyword new.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是面向对象编程的基础。在Scala中，每个数据都是一个对象。对象的类型决定了你可以对对象做什么。类可以包含数据（对象的状态）和方法（你可以对对象做什么）。你可以把类看作是对象的蓝图。一旦你定义了一个类，你就可以使用关键字 new 从蓝图创建对象。
- en: Consider an object as an atomic unit. Clients (that's the term for program code
    that uses the object) do not care about the implementation of the object, they
    only use the exposed methods and fields. "Exposed" means here that they are made
    available by the class for use by clients.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象视为一个原子单位。客户端（这是指使用对象的程序代码）不关心对象的实现，它们只使用公开的方法和字段。这里的“公开”意味着它们由类提供给客户端使用。
- en: Consistency
  id: totrans-3
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一致性
- en: 'A date consists of three attributes: year, month, and day, all of them integers.
    We could thus store a date as a triple Triple<Int, Int, Int>, but then we may
    be confused if they indicate year-month-day, or day-month-year. It''s better to
    create a [data class](tutorial-data-classes.html) with three attributes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 日期由三个属性组成：年、月和日，它们都是整数。因此，我们可以将日期存储为一个三元组 Triple<Int, Int, Int>，但是如果它们表示年-月-日，或者日-月-年，我们可能会感到困惑。最好创建一个具有三个属性的[数据类](tutorial-data-classes.html)：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Both methods, however, do not guarantee that our date objects will be consistent.
    Consistency means that the attributes take on only legal, meaningful values, and
    that the values of each attribute are consistent with each other. For instance,
    a day value of 31 is consistent with a month value of 3, but not with a month
    value of 4. A day value of 29 and a month value of 2 are consistent only if the
    year value indicates a leap year. With the data class defined above, there is
    nothing stopping us from making mistakes like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这两种方法都不能保证我们的日期对象是一致的。一致性意味着属性只取合法的、有意义的值，并且每个属性的值与其他属性的值一致。例如，一个日期值为 31
    是与一个月值为 3 一致的，但与一个月值为 4 的不一致。一个日期值为 29 和一个月值为 2 只有在年值表示闰年时才一致。使用上面定义的数据类，我们没有任何限制，可以犯这样的错误：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To ensure that our Date objects are always consistent, we can add four require
    statements in the constructor of the object. It is indicated by the keyword init,
    followed by statements that are executed every time an object of this type is
    created ([days1.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days1.kt)):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们的日期对象始终保持一致，我们可以在对象的构造函数中添加四个require语句。它由关键字init指示，后跟在每次创建此类型的对象时执行的语句（[days1.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days1.kt)）：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If the values are okay, nothing happens. Otherwise require throws an exception,
    and we know immediately that something is wrong. Since the Date object is immutable,
    the consistent state that is guaranteed when the object is constructed can never
    be broken and made inconsistent.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果值正常，什么都不会发生。否则，require会抛出一个异常，我们立即就知道出了什么问题。由于日期对象是不可变的，因此在对象构造时保证的一致状态永远不会被破坏和变得不一致。
- en: It is helpful if objects guarantee that their state is consistent. It makes
    it possible for functions working with the objects to proceed without error checking,
    and simplifies debugging since we will notice quickly when something went wrong.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象保证它们的状态是一致的，那将会很有帮助。这样可以使得与对象一起工作的函数能够进行无错误检查的操作，并简化调试，因为当出现问题时我们会很快注意到。
- en: 'To use my new Date object, I have to compile the definition, and can then test
    it interactively:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用我的新的日期对象，我必须编译定义，然后可以交互式地测试它：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Methods
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 方法
- en: In the past, we had functions that took arguments of a particular type, such
    as a function date2num that converted a date, represented as year, month, and
    day, into a day index starting on January 1, 1901.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，我们有函数接受特定类型的参数，比如一个函数 date2num ，它将一个日期表示为年、月和日，转换为从 1901 年 1 月 1 日开始的日期索引。
- en: In object-oriented programming, we prefer to define functions that work on a
    specific type as a method of that type. One advantage is that it clearly documents
    the available functions for a given type (for instance, to find out what you can
    do with a String, you would look at the list of methods of the String class).
    The main advantage, however, will be the possibility of hiding or protecting information
    inside the object, as we will see later.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程中，我们更喜欢将适用于特定类型的函数定义为该类型的方法。其中一个优点是它清晰地记录了给定类型可用的函数（例如，要找出可以对字符串执行的操作，您可以查看
    String 类的方法列表）。然而，主要优点将是隐藏或保护对象内部信息的可能性，正如我们稍后将看到的那样。
- en: 'For the moment, let us add methods to convert a Date object into a day index,
    and to return the day of the week of a Date ([days3.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days3.kt)):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时，让我们添加方法来将 Date 对象转换为日期索引，并返回日期的星期几 ([days3.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days3.kt))：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A method looks like a function definition, but is placed inside the body of
    the class. The body of the method can refer to the names of the object''s fields:
    Note the use of the fields year, month, and day in the method dayIndex.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 方法看起来像函数定义，但放置在类的主体内。方法的主体可以引用对象的字段名称：注意在方法 `dayIndex` 中使用了年、月和日字段。
- en: 'A method can only be called if we have a reference to an object of that type
    available, and so whenever a method is executed, there is always a "current" object.
    The field names refer to the fields of this "current" object:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当我们有可用于引用该类型对象的引用时，才能调用方法，因此每当执行方法时，总会有一个“当前”对象。字段名称指的是此“当前”对象的字段：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Printing pretty dates
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 打印漂亮的日期
- en: 'Every object in Kotlin or Java can be converted to a string, and that is what
    happens when you look at an object in the interactive mode, or using println:
    the object is first converted to a string using its toString method:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 或 Java 中的每个对象都可以转换为字符串，这就是在交互模式或使用 `println` 时发生的情况：首先使用其 `toString`
    方法将对象转换为字符串：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since we defined Date as a data class, the compiler is providing a reasonable
    toString method that shows the name of the class and the value of each field.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将 Date 定义为数据类，编译器提供了一个合理的 `toString` 方法，显示类名和每个字段的值。
- en: 'In production quality code, we may want a nice representation of dates. We
    can achieve this by overriding the default definition of the toString method,
    like this ([days4.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days4.kt)):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产质量的代码中，我们可能希望有一个漂亮的日期表示。我们可以通过重写 `toString` 方法的默认定义来实现这一点，就像这样 ([days4.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days4.kt))：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note the keyword override. It is necessary because every object already has
    a toString method. So we are not adding a new method, we are overriding the previous
    definition.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意关键字 `override`。这是必需的，因为每个对象已经有一个 `toString` 方法。因此，我们不是添加一个新方法，而是重写了之前的定义。
- en: 'With this method, our object looks much prettier:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个方法，我们的对象看起来更漂亮了：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Operators are methods
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运算符就是方法
- en: 'Let''s add a method to compute the number of days between two dates. Since
    we already have dayIndex(), this is very easy to implement ([days5.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days5.kt)):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个方法来计算两个日期之间的天数。由于我们已经有了 `dayIndex()`，这个实现非常容易 ([days5.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days5.kt))：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And it works well:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 它表现良好：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: But wouldn't it be nice if we could write d2 - d1 for the difference between
    two dates instead of the not-so-pretty d2.diff(d1)?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们能够写 `d2 - d1` 来表示两个日期之间的差异，而不是不那么美观的 `d2.diff(d1)`，那不是很好吗？
- en: In Kotlin, unlike in Java, this is possible. In fact, in Kotlin, there is no
    difference at all between operators like + and methods like take—they are all
    implemented as methods.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kotlin 中，与 Java 不同，这是可能的。事实上，在 Kotlin 中，像 `+` 这样的运算符和像 `take` 这样的方法之间根本没有区别——它们都被实现为方法。
- en: 'To define the - operator, all we have to do is to rename our diff method into
    minus, and to add the keyword operator ([days6.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days6.kt)):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义减法运算符 `-`，我们只需将我们的 `diff` 方法重命名为 `minus`，并添加关键字 `operator` ([days6.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days6.kt))：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can now calculate with dates:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以计算日期了：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It can be fun to define your own operators, but don't go overboard—it is only
    useful when it makes the code more readable!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 定义自己的运算符可能很有趣，但不要过分——只有在代码更易读时才有用！
- en: Overloading
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重载
- en: 'Scala, like Java and C++ but unlike C, allows the overloading of method names:
    It is allowed to have different methods that have the same name, and only differ
    in the type of arguments they accept. Here is a simple example ([overloading.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/05-basic/overloading.kts)):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Scala，像Java和C++一样，但与C不同，允许方法名的重载：允许有不同的方法具有相同的名称，只是在它们接受的参数类型上有所不同。这里是一个简单的例子（[overloading.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/05-basic/overloading.kts)）：
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The compiler correctly determines that f(17) is a call to the first function,
    while f("CS109") is a call to the second function.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器正确确定f(17)是对第一个函数的调用，而f("CS109")是对第二个函数的调用。
- en: 'We can make use of overloading to add more operators to our Date class. We
    will allow adding or subtracting a number of days to a date to obtain a new date
    ([days7.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days7.kt)):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以利用重载来为我们的Date类添加更多运算符。我们将允许将一定数量的天数加或减到日期上以获得一个新日期（[days7.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days7.kt)）:'
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Note that there are two minus operators defined for the Date class. The compiler
    correctly selects the one we need depending on the type of the right-hand side:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Date类定义了两个减号运算符。编译器根据右侧的类型选择我们需要的那一个：
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: A real program
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一个真正的程序
- en: 'Since we now have a nice date class, let''s write a program to use it ([days.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days.kt)):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们现在有了一个不错的日期类，让我们写一个程序来使用它（[days.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/50-objects/days.kt)）：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As explained in the [previous section](tutorial-compiling.html), the program
    starts through the main function, which receives the command line arguments in
    the form of parameter args.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[前一节](tutorial-compiling.html)中所解释的，程序通过主函数启动，该函数以参数args的形式接收命令行参数。
- en: 'We compile the program:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编译程序：
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The compiler produces a class DaysKt for the source file containing the main
    function, so this is the class we need to call to run the program:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器为包含主函数的源文件生成一个类DaysKt，因此这是我们需要调用来运行程序的类：
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
