- en: Create Go workspace
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Go工作空间
- en: Create Go workspace
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Go工作空间
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Once the `Go` build environment is ready, the next step is to create workspace
    for development:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`Go`构建环境准备好了，下一步是创建开发工作空间：
- en: '(1) Set up a new empty directory:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: (1) 设置一个新的空目录：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '(2) Use a new environment variable `$GOPATH` to point it:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: (2) 使用一个新的环境变量`$GOPATH`来指向它：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The workspace should contain `3` subdirectories:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 工作空间应包含`3`个子目录：
- en: 'src: contains the Go source code.'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: src：包含Go源代码。
- en: 'pkg: contains the package objects. You could think them as libraries which
    are used in linkage stage to generate the final executable files.'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: pkg：包含包对象。你可以将它们视为在链接阶段用于生成最终可执行文件的库。
- en: 'bin: contains the executable files.'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: bin：包含可执行文件。
- en: 'Let''s see an example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '(1) Create a `src` directory in `$GOPATH`, which is `/root/gowork` in my system:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: (1) 在我的系统中，在`$GOPATH`中创建一个`src`目录，它是`/root/gowork`：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '(2) Since `Go` organizes source code using "`package`" concept , and every
    "`package`" should occupy a distinct directory, I create a `greet` directory in
    `src`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: (2) 由于`Go`使用"`package`"的概念来组织源代码，每个"`package`"都应占据一个不同的目录，所以我在`src`中创建了一个`greet`目录：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then create a new `Go` source code file (`greet.go`) in `src/greet`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在`src/greet`中创建一个新的`Go`源代码文件(`greet.go`)：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can consider this `greet` directory provides a `greet` package which can
    be used by other programs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以考虑这个`greet`目录提供了一个`greet`包，其他程序可以使用它。
- en: '(3) Create another package `hello` which utilizes the `greet` package:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: (3) 创建另一个使用`greet`包的包`hello`：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can see in `hello.go`, the `main` function calls `Greet` function offered
    by `greet` package.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在`hello.go`中，`main`函数调用了`greet`包提供的`Greet`函数。
- en: '(4) Now our `$GOPATH` layout is like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: (4) 现在我们的`$GOPATH`布局如下：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s compile and install `hello` package:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编译并安装`hello`包：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Check the `$GOPATH` layout again:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 再次检查`$GOPATH`的布局：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can see the executable command `hello` is generated in `bin` folder. Because
    `hello` needs `greet` package''s help, a `greet.a` object is also produced in
    `pkg` directory, but in system related subdirectory: `linux_amd64`.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到可执行命令`hello`生成在`bin`文件夹中。因为`hello`需要`greet`包的帮助，所以在`pkg`目录下也会生成一个`greet.a`对象，但在系统相关的子目录中：`linux_amd64`。
- en: 'Run `hello` command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`hello`命令：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Working as expected!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都正常工作！
- en: '(5) You should add `$GOPATH/bin` to `$PATH` environment variable for facility:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: (5) 你应该将`$GOPATH/bin`添加到`$PATH`环境变量以方便：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then you can run `hello` directly:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以直接运行`hello`：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Reference:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：
- en: '[How to Write Go Code](https://golang.org/doc/code.html).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何编写Go代码](https://golang.org/doc/code.html)。'
