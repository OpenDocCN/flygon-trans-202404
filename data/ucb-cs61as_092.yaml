- en: The Environment Model of Evaluation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估的环境模型
- en: The Environment Model of Evaluation
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估的环境模型
- en: '![](http://www-tc.pbs.org/wgbh/americanexperience/media/uploads/collections/he
    roImages/environment_film_landing.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](http://www-tc.pbs.org/wgbh/americanexperience/media/uploads/collections/he
    roImages/environment_film_landing.jpg)'
- en: In the previous subsection, we learned that we can no longer use the substitution
    model of evaluation once we use assignments. The new model that will be used from
    now on is called the **environment model of evaluation**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一小节中，我们了解到一旦使用赋值，就不能再使用替换评估模型。从现在开始将使用的新模型称为**评估的环境模型**。
- en: 'Let''s go through the example to see how this new model works. We define a
    simple `square` procedure and call it on `7`:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过示例看看这个新模型是如何工作的。我们定义一个简单的`square`过程，并在`7`上调用它：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'What happens? The substitution model states:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？替换模型陈述：
- en: Substitute the actual argument value(s) for the formal parameter(s) in the body
    of the function.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数体中用实际参数值替换形式参数值。
- en: Evaluate the resulting expression.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估结果表达式。
- en: In this example, the substitution of `7` for `x` in `(* x x)` gives `(* 7 7)`.
    In step 2 we evaluate that expression to get the result, `49`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，在`(* x x)`中将`7`替换为`x`得到`(* 7 7)`。在第2步中，我们评估该表达式以获得结果`49`。
- en: 'Now, let''s put the substitution model aside and take a look at the more complete
    and comprehensive **environment model**:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将替换模型放在一边，看看更完整和全面的**环境模型**：
- en: Create a frame with the formal parameter(s) bound to the actual argument values.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有形式参数绑定到实际参数值的框架。
- en: Use this frame to extend the lexical environment.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用此框架来扩展词法环境。
- en: Evaluate the body in the resulting environment.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在结果环境中评估函数体。
- en: A **frame** is a collection of name-value associations, or **bindings**. In
    our example, the frame has one binding that binds `x` to `7`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**框架**是名称-值关联或**绑定**的集合。在我们的示例中，框架有一个将`x`绑定到`7`的绑定。'
- en: Let's skip step 2 for a moment and think about step 3\. The idea is that we
    are going to evaluate the expression `(* x x)`, but we are reﬁning our notion
    of what it means to "evaluate" an expression. Expressions are no longer evaluated
    in a vacuum, but instead, every evaluation must be done with respect to some environment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时跳过第2步，思考第3步。这个想法是，我们将评估表达式`(* x x)`，但我们正在细化我们对“评估”表达式的理解。表达式不再在真空中评估，而是每次评估都必须与某个环境相关。
- en: An **environment** can be described as some collection of bindings between names
    and values. When we are evaluating `(* x x)` and we see the symbol `x`, we want
    to be able to look up `x` in our collection of bindings and ﬁnd the value `7`.
    Looking up the value bound to a symbol is something we've done before with global
    variables. What's new is that instead of one central collection of bindings we
    now have the possibility of **local environments**. The symbol `x` isn't always
    `7`. That's only the case during this one invocation of `square`. So, step 3 means
    to evaluate the expression in the way that we've always understood, but looking
    up names in a particular place.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**环境**可以描述为名称和值之间的一些绑定集合。当我们评估`(* x x)`并看到符号`x`时，我们希望能够在我们的绑定集合中查找`x`并找到值`7`。查找绑定到符号的值是我们以前使用全局变量做过的事情。新的是，我们现在有可能有**局部环境**。符号`x`并不总是`7`。这只在这次调用`square`期间才是这样。因此，第3步意味着以我们一直理解的方式评估表达式，但在特定位置查找名称。'
- en: What's step 2 about? The point is that we can't evaluate `(* x x)` in an environment
    with nothing but the `x` to `7` binding, because we also have to look up a value
    for the symbol `*` (namely, the multiplication function). So, we create a new
    frame in step 1, but that frame isn't an environment by itself. Instead we use
    the new frame to extend an environment that already existed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第2步是什么？关键是我们不能在只有`x`到`7`绑定的环境中评估`(* x x)`，因为我们还必须查找符号`*`的值（即乘法函数）。因此，在第1步中创建一个新框架，但该框架本身不是一个环境。相反，我们使用新框架来扩展已经存在的环境。
- en: Which old environment do we extend? In the `square` example, there is only one
    candidate, the **global environment**. But in more complicated situations there
    may be several environments available.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展哪个旧环境？在`square`示例中，只有一个候选者，**全局环境**。但在更复杂的情况下，可能有几个可用的环境。
- en: Rules for the Environment Model
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境模型的规则
- en: 'Now, we will go over the rules for the environment model for different cases.
    Before we proceed, keep in mind that:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论不同情况下环境模型的规则。在继续之前，请记住：
- en: Every expression is either an **atom** or a **list**.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个表达式要么是**原子**，要么是**列表**。
- en: At any time there is a current frame, initially the global frame.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何时候都有一个当前框架，最初是全局框架。
- en: Expressing Atoms
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表达原子
- en: 'Let''s get some perspective on how we expression atomic values:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对如何表达原子值有一些看法：
- en: Numbers, strings, `#t`, and `#f` are self-evaluating.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数字，字符串，`#t`和`#f`是自评估的。
- en: If the expression is a symbol, find the **first available** binding. (That is,
    look in the current frame; if not found there, look in the frame "behind" the
    current frame; and so on until the global frame is reached.)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果表达式是一个符号，找到**第一个可用**绑定。（也就是说，在当前框架中查找；如果在那里找不到，就在当前框架“后面”的框架中查找；直到达到全局框架为止。）
- en: '![](../Images/f4668433759407c7a43fd68da3d184dd.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f4668433759407c7a43fd68da3d184dd.jpg)'
- en: Procedure Invocation
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过程调用
- en: What about procedures? How does the evaluation deal with expressions that invoke
    procedures?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 那么过程怎么办？评估如何处理调用过程的表达式？
- en: Evaluate all the subexpressions (using these same rules).
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估所有子表达式（使用相同的规则）。
- en: Apply the procedure (the value of the first subexpression) to the arguments
    (the values of the other subexpressions).
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将过程（第一个子表达式的值）应用于参数（其他子表达式的值）。
- en: 'If the procedure is compound (user-defined):'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果过程是复合的（用户定义的）：
- en: Create a frame with the formal parameters of the procedure bound to the actual
    argument values.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个帧，其中过程的形式参数绑定到实际参数值。
- en: Extend the procedure's defining environment with this new frame.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用这个新框架扩展过程的定义环境。
- en: Evaluate the procedure body, using the new frame as the current frame.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估过程体，使用新框架作为当前框架。
- en: 'If the procedure is primitive:'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果过程是原始的：
- en: Apply it by magic. **ONLY COMPOUND PROCEDURE INVOCATIONS CREATES A NEW FRAME.**
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过魔法应用它。**只有复合过程调用创建新框架。**
- en: An Example
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个例子
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/918ba20c9909a0637277685ab7ab61e8.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/918ba20c9909a0637277685ab7ab61e8.jpg)'
- en: Procedure objects in the global frame.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 全局框架中的过程对象。
- en: '![](../Images/35a1b511561df0c1098a486422343b2f.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/35a1b511561df0c1098a486422343b2f.jpg)'
- en: Environments created by evaluating `(f 5)`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过评估`(f 5)`创建的环境。
- en: Special Forms
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊形式
- en: A `lambda` creates a procedure in the form of a double bubble. The left circle
    points to the text of the `lambda` expression; the right circle points to the
    defining environment (i.e., to the current environment at the time the `lambda`
    is seen). **ONLY LAMBDAS CREATE PROCEDURES.**
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lambda`创建一个双泡泡形式的过程。左圆圈指向`lambda`表达式的文本；右圆圈指向定义环境（即，在看到`lambda`时的当前环境）。**只有lambda创建过程。**'
- en: '`define` adds a new binding to the current frame.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`define`向当前框架添加一个新绑定。'
- en: '`set!` changes the first available binding.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`set!`更改第一个可用绑定。'
- en: A `let` is a `lambda` with an invocation.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`let`是带有调用的`lambda`。'
- en: '`(define (...) …)` = `lambda` + `define`'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(define (...) …)` = `lambda` + `define`'
- en: Other special forms follow their own rules (`cond`, `if`).
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他特殊形式遵循自己的规则（`cond`，`if`）。
- en: An Example
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个例子
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/f8dbb06f27f40cdcd1059c2e05003d9c.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f8dbb06f27f40cdcd1059c2e05003d9c.jpg)'
- en: Result of defining `make-withdraw` in the global environment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在全局环境中定义`make-withdraw`的结果。
- en: '![](../Images/1460cf6157ee3bb2c541e1a5783b37ae.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1460cf6157ee3bb2c541e1a5783b37ae.jpg)'
- en: Result of evaluating `(define W1 (make-withdraw 100))`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 评估`(define W1 (make-withdraw 100))`的结果。
- en: Takeaways
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: In this subsection, we learned how to evaluate procedures with the environment
    model.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一小节中，我们学习了如何用环境模型评估过程。
- en: What's Next?
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: Go to the next subsection and learn how to draw environment diagrams!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 转到下一小节，学习如何绘制环境图！
