- en: Semantics (= Evaluation)Tuesday, January 17th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义（=评估）Tuesday, January 17th
- en: '[PLAI §2](plai.pdf#chapter.2 "Interpreting Arithmetic")'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §2](plai.pdf#chapter.2 "解释算术")'
- en: Back to BNF — now, meaning.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 回到BNF——现在，意义。
- en: 'An important feature of these BNF specifications: we can use the derivations
    to specify *meaning* (and meaning in our context is “running” a program (or “interpreting”,
    “compiling”, but we will use “evaluating”)). For example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些BNF规范的一个重要特性：我们可以使用推导来指定*含义*（在我们的上下文中，含义是“运行”程序（或“解释”，“编译”，但我们将使用“评估”））。例如：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To do this a little more formally:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了稍微正式一些：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Note the completely different roles of the two `+`s and `-`s. In fact, it might
    have been more correct to write:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意两个`+`和`-`的完全不同的角色。事实上，写成这样可能更正确：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'or even using a marker to denote meta-holes in these strings:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至使用一个标记来表示这些字符串中的元占位符：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: but we will avoid pretending that we’re doing that kind of string manipulation.
    (For example, it will require specifying what does it mean to return `<num>` for
    `$<num>` (involves `string->number`), and the fragments on the right side mean
    that we need to specify these as substring operations.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们将避免假装我们正在做那种字符串操作。（例如，这将需要说明返回`<num>`代表什么（涉及`string->number`），右侧的片段表示我们需要将这些指定为子字符串操作。）
- en: Note that there’s a similar kind of informality in our BNF specifications, where
    we assume that `<foo>` refers to some terminal or non-terminal. In texts that
    require more formal specifications (for example, in RFC specifications), each
    literal part of the BNF is usually double-quoted, so we’d get
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们的BNF规范中存在类似的非正式性，在这些规范中，我们假设`<foo>`指的是某个终端或非终端。在需要更正式规范的文本中（例如，在RFC规范中），BNF的每个文字部分通常都是双引号括起来的，所以我们会得到
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'An alternative popular notation for `eval(X)` is `[[X]]`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`eval(X)`的另一种流行符号是`[[X]]`：'
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Is there a problem with this definition? Ambiguity:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义有问题吗？歧义：
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Depending on the way the expression is parsed, we can get either a result of
    `2` or `-4`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 根据表达式的解析方式，我们可以得到`2`或`-4`的结果：
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Again, be very aware of confusing subtleties which are extremely important:
    We need parens around a sub-expression only in one side, why? — When we write:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，要非常注意混淆的微妙之处，这些微妙之处非常重要：我们只需要在一个子表达式的一侧加括号，为什么？——当我们写：
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: we have two expressions, but one stands for an *input syntax*, and one stands
    for a real mathematical expression.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个表达式，但一个代表*输入语法*，另一个代表真正的数学表达式。
- en: In a case of a computer implementation, the syntax on the left is (as always)
    an AE syntax, and the real expression on the right is an expression in whatever
    language we use to implement our AE language.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机实现的情况下，左侧的语法（像往常一样）是AE语法，右侧的实际表达式是我们用来实现AE语言的任何语言中的表达式。
- en: Like we said earlier, ambiguity is not a real problem until the actual parse
    tree matters. With `eval` it definitely matters, so we must not make it possible
    to derive any syntax in multiple ways or our evaluation will be non-deterministic.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，歧义直到实际解析树很重要才成为问题。对于`eval`来说，这绝对很重要，因此我们不能使得可能以多种方式推导出任何语法，否则我们的评估将是非确定性的。
- en: '* * *'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Quick exercise:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 快速练习：
- en: 'We can define a meaning for `<digit>`s and then `<num>`s in a similar way:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以类似地为`<digit>`s和然后`<num>`s定义一个意义：
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Is this exactly what we want? — Depends on what we actually want…
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们想要的吗？——取决于我们实际想要什么…
- en: First, there’s a bug in this code — having a BNF derivation like
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，这段代码有一个错误——有一个类似BNF的推导
- en: '[PRE10]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'is unambiguous, but makes it hard to parse a number. We get:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是无歧义的，但很难解析数字。我们得到：
- en: '[PRE11]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Changing the order of the last rule works much better:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改变最后一个规则的顺序效果更好：
- en: '[PRE12]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'and then:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后：
- en: '[PRE13]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As a concrete example see how you would make it work with `107`, which demonstrates
    why compositionality is important.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为具体例子，看看如何使其与`107`配合使用，这说明了组合性的重要性。
- en: 'Example for free stuff that looks trivial: if we were to define the meaning
    of numbers this way, would it always work? Think an average language that does
    not give you bignums, making the above rules fail when the numbers are too big.
    In Racket, we happen to be using an integer representation for the syntax of integers,
    and both are unlimited. But what if we wanted to write a Racket compiler in C
    or a C compiler in Racket? What about a C compiler in C, where the compiler runs
    on a 64 bit machine, and the result needs to run on a 32 bit machine?'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费东西的例子看起来微不足道：如果我们以这种方式定义数字的含义，它总是有效吗？想象一个不提供大数的平均语言，当数字太大时，上述规则会失败。在Racket中，我们碰巧使用整数表示法来表示整数的语法，两者都是无限的。但是如果我们想在C中编写一个Racket编译器，或者在Racket中编写一个C编译器呢？在一个C编译器中编写C编译器，其中编译器在64位机器上运行，结果需要在32位机器上运行，会怎么样？
- en: 'Side-note: CompositionalityTuesday, January 17th'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旁注：组合性星期二，1月17日
- en: The example of
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'being a language that is easier to to write an evaluator for leads us to an
    important concept — compositionality. This definition is easier to write an evaluator
    for, since the resulting language is compositional: the meaning of an expression
    — for example `123` — is composed out of the meaning of its two parts, which in
    this BNF are `12` and `3`. Specifically, the evaluation of `<NUM> <digit>` is
    `10 *` the evaluation of the first, plus the evaluation of the second. In the
    `<digit> <NUM>` case this is more difficult — the meaning of such a number depends
    not only on the *meaning* of the two parts, but also on the `<NUM>` *syntax*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 成为一种更容易编写求值器的语言，引导我们到一个重要的概念——组合性。这个定义更容易编写一个求值器，因为结果语言是组合的：表达式的含义——例如`123`——由其两部分的含义组成，在这个BNF中是`12`和`3`。具体来说，`<NUM>
    <digit>`的评估是第一个的评估乘以10，加上第二个的评估。在`<digit> <NUM>`的情况下，这更加困难——这样一个数字的含义不仅取决于两部分的*含义*，还取决于`<NUM>`的*语法*：
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This this case this can be tolerable, since the meaning of the expression is
    still made out of its parts — but imperative programming (when you use side effects)
    is much more problematic since it is not compositional (at least not in the obvious
    sense). This is compared to functional programming, where the meaning of an expression
    is a combination of the meanings of its subexpressions. For example, every sub-expression
    in a functional program has some known meaning, and these all make up the meaning
    of the expression that contains them — but in an imperative program we can have
    a part of the code be `x++` — and that doesn’t have a meaning by itself, at least
    not one that contributes to the meaning of the whole program in a direct way.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，这是可以容忍的，因为表达式的含义仍然由其部分构成——但是命令式编程（当你使用副作用时）要复杂得多，因为它不是组合的（至少不是在明显的意义上）。这与函数式编程相比，函数式编程中，表达式的含义是其子表达式的含义的组合。例如，在函数式程序中，每个子表达式都有一定的含义，所有这些子表达式组成了包含它们的表达式的含义——但在命令式程序中，我们可以有代码的一部分是`x++`——这本身没有意义，至少不是以直接方式为整个程序的含义做出贡献的意义。
- en: '(Actually, we can have a well-defined meaning for such an expression: the meaning
    is going from a world where `x` is a container of some value N, to a world where
    the same container has a different value N+1\. You can probably see now how this
    can make things more complicated. On an intuitive level — if we look at a random
    part of a functional program we can tell its meaning, so building up the meaning
    of the whole code is easy, but in an imperative program, the meaning of a random
    part is pretty much useless.)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: (实际上，我们可以为这种表达式定义一个明确定义的含义：从一个`x`是某个值N的容器的世界，到一个相同容器具有不同值N+1的世界。你现在可能能看出这会使事情变得更加复杂。在直觉层面上——如果我们看一个函数式程序的随机部分，我们可以知道它的含义，因此建立整个代码的含义是容易的，但在命令式程序中，一个随机部分的含义几乎是无用的。)
