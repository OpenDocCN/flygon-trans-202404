- en: Programming Considerations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程考虑
- en: Programming Considerations
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程考虑
- en: Even with serializers, it's not easy to do a good job of writing programs that
    deal successfully with concurrency. In fact, all of the operating systems in widespread
    use today have bugs in this area; Unix systems, for example, are expected to crash
    every month or two because of concurrency bugs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用了串行器，编写成功处理并发的程序也并不容易。事实上，今天广泛使用的所有操作系统在这个领域都存在错误；例如，Unix系统预计每个月或两个月会因并发错误而崩溃。
- en: 'To make the discussion concrete, let''s think about an airline reservation
    system, which serves thousands of simultaneous users around the world. Here are
    the things that can go wrong:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使讨论具体化，让我们考虑一个为全球数千名同时用户提供服务的航空公司预订系统。以下是可能出错的事情：
- en: '**Incorrect results.** The worst problem is if the same seat is reserved for
    two diﬀerent people. Just as in the case of adding 1 to x, the reservation system
    must ﬁrst ﬁnd a vacant seat, then mark that seat as occupied. That sequence of
    reading and then modifying the database must be protected.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误的结果。** 最糟糕的问题是同一个座位被两个不同的人预订。就像给x加1的情况一样，预订系统必须首先找到一个空座位，然后将该座位标记为已占用。读取然后修改数据库的这个顺序必须受到保护。'
- en: '**Ineﬃciency.** One very simple way to ensure correct results is to use a single
    serializer to protect the entire reservation database, so that only one person
    could make a request at a time. But this is an unacceptable solution; thousands
    of people are waiting to reserve seats, mostly not for the same ﬂight.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低效率。** 确保正确结果的一个非常简单的方法是使用单个串行器保护整个预订数据库，以便一次只有一个人可以发出请求。但这是一个不可接受的解决方案；成千上万的人正在等待预订座位，大多数人并非为同一航班。'
- en: '**Deadlock.** Suppose that someone wants to travel to a city for which there
    is no direct ﬂight. We must make sure that we can reserve a seat on ﬂight A and
    a seat on connecting ﬂight B on the same day, before we commit to either reservation.
    This probably means that we need to use two serializers at the same time, one
    for each ﬂight. Suppose we say something like'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**死锁。** 假设有人想去一个没有直达航班的城市。我们必须确保在同一天可以预订到A航班的座位和连接航班B的座位，然后再承诺任何预订。这可能意味着我们需要同时使用两个串行器，一个用于每个航班。假设我们说类似于'
- en: (serializer-A (serializer-B (lambda () ...))))
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (serializer-A (serializer-B (lambda () ...))))
- en: Meanwhile someone else says
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，还有人说
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The timing could work out so that we get serializer A, the other person gets
    serializer B, and then we are each stuck waiting for the other one (forever!).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 时间可能会安排得当，我们得到串行器A，另一个人得到串行器B，然后我们每个人都被困在等待对方（永远！）。
- en: '**Unfairness.** This isn''t an issue in every situation, but sometimes you
    want to avoid a solution to the deadlock problem that always gives a certain process
    priority over some other one. If the high-priority process is greedy, the lower-priority
    process might never get its turn at the shared data.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不公平。** 这并非在每种情况下都是问题，但有时您希望避免解决死锁问题的解决方案总是优先考虑某个进程。如果高优先级进程贪婪，低优先级进程可能永远无法轮到共享数据。'
- en: Correct Behavior of Concurrent Programs
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发程序的正确行为
- en: Depending on the particular program you're writing, the definition of correct
    behavior might differ. Typically, a concurrent program is said to display correct
    behavior if it produces the same result as if the processes had run sequentially
    in some order. There are two important aspects to this requirement.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您正在编写的特定程序，正确行为的定义可能有所不同。通常情况下，如果并发程序产生与进程按某种顺序顺序运行时相同的结果，则说该并发程序显示正确行为。这一要求有两个重要方面。
- en: First, it does not require the processes to actually run sequentially, but only
    to produce results that are the same *as if* they had run sequentially.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它不要求进程实际按顺序运行，而只要求产生与它们按顺序运行时相同的结果。
- en: Second, there may be more than one possible "correct" result produced by a concurrent
    program, because we require only that the result be the same as for some sequential
    order.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，由于我们只要求结果与某个顺序的结果相同，所以并发程序可能会产生多个可能的“正确”结果。
