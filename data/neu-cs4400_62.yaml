- en: Variable MutationTuesday, February 28th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量突变星期二，2月28日
- en: '[PLAI §12](plai.pdf#chapter.12 "Church and State") and [PLAI §13](plai.pdf#chapter.13
    "Mutable Data Structures") (different: adds boxes to the language)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §12](plai.pdf#chapter.12 "Church and State") 和 [PLAI §13](plai.pdf#chapter.13
    "Mutable Data Structures")（不同之处：向语言添加盒��）'
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PLAI §14](plai.pdf#chapter.14 "Variables") (that’s what we do)'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §14](plai.pdf#chapter.14 "Variables")（这就是我们所做的）'
- en: 'The code that we now have implements recursion by *changing* bindings, and
    to make that possible we made environments hold boxes for all bindings, therefore
    bindings are *all* mutable now. We can use this to add more functionality to our
    evaluator, by allowing changing any variable — we can add a `set!` form:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的代码通过*改变*绑定来实现递归，为了使这成为可能，我们让环境为所有绑定保存盒子，因此现在所有的绑定都是可变的。我们可以利用这一点为我们的求值器添加更多功能，通过允许更改任何变量
    — 我们可以添加一个`set!`形式：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: to the evaluator that will modify the value of a variable. To implement this
    functionality, all we need to do is to use `lookup` to retrieve some box, then
    evaluate the expression and put the result in that box. The actual implementation
    is left as a homework exercise.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 给评估器，它将修改变量的值。要实现这个功能，我们只需要使用`lookup`来检索一些盒子，然后评估表达式并将结果放入该盒子中。实际的实现留作家庭作业。
- en: 'One thing that should be considered here is — all of the expressions in our
    language evaluate to some value, the question is what should be the value of a
    `set!` expression? There are three obvious choices:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要考虑的一件事是 — 我们语言中的所有表达式都会求值为某个值，问题是`set!`表达式的值应该是什么？有三个明显的选择：
- en: return some bogus value,
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回一些虚假值，
- en: return the value that was assigned,
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回被分配的值，
- en: return the value that was previously in the box.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回之前在盒子中的值。
- en: Each one of these has its own advantage — for example, C uses the second option
    to `chain` assignments (eg, `x = y = 0`) and to allow side effects where an expression
    is expected (eg, `while (x = x-1) ...`).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些中的每一个都有自己的优势 — 例如，C 使用第二个选项来`chain`赋值（例如，`x = y = 0`）并允许副作用在期望表达式的地方发生（例如，`while
    (x = x-1) ...`）。
- en: 'The third one is useful in cases where you might use the old value that is
    overwritten — for example, if C had this behavior, you could `pop` a value from
    a linked list using something like:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种情况在你可能会使用被覆盖的旧值的情况下很有用 — 例如，如果 C 有这种行为，你可以使用类似以下方式从链表中`pop`一个值：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'because the argument to `first` will be the old value of `l`, before it changed
    to be its `rest`. You could also swap two variables in a single expression: `x
    = y = x`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`first`的参数将是`l`的旧值，在它变为其`rest`之前。你也可以在单个表达式中交换两个变量：`x = y = x`。
- en: (Note that the expression `x = x + 1` has the meaning of C’s `++x` when option
    (2) is used, and `x++` when option (3) is used.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意，当使用选项（2）时，表达式`x = x + 1`的含义等同于 C 的`++x`，而当使用选项（3）时，则等同于`x++`。）
- en: Racket chooses the first option, and we will do the same in our language. The
    advantage here is that you get no discounts, therefore you must be explicit about
    what values you want to return in situations where there is no obvious choice.
    This leads to more robust programs since you do not get other programmers that
    will rely on a feature of your code that you did not plan on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Racket选择第一个选项，在我们的语言中我们也会这样做。这里的优势是你不会得到折扣，因此在没有明显选择的情况下，你必须明确指出你想要返回的值。这会导致更健壮的程序，因为你不会有其他程序员依赖于你没有计划的代码特性。
- en: 'In any case, the modification that introduces mutation is small, but it has
    a tremendous effect on our language: it was true for Racket, and it is true for
    FLANG. We have seen how mutation affects the language subset that we use, and
    in the extension of our FLANG the effect is even stronger: since *any* variable
    can change (there is no need for an explicit `box` value). In other words, a binding
    is not always the same — in can change as a result of a `set!` expression. Of
    course, we could extend our language with boxes (using Racket boxes to implement
    FLANG boxes), but that will be a little more verbose.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，引入突变的修改很小，但对我们的语言有巨大影响：对 Racket 是真的，对 FLANG 也是真的。我们已经看到突变如何影响我们使用的语言子集，在我们的
    FLANG 扩展中，这种影响甚至更强烈：因为*任何*变量都可以改变（不需要显式的`box`值）。换句话说，一个绑定并不总是相同的 — 它可以因为`set!`表达式的结果而改变。当然，我们可以使用盒子扩展我们的语言（使用
    Racket 盒子来实现 FLANG 盒子），但那会更加冗长。
- en: Note that Racket does have a `set!` form, and in addition, fields in structs
    can be made modifiable. However, we do not use any of these. At least not for
    now.
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，Racket确实有一个`set!`形式，此外，结构体中的字段可以被修改。然而，我们目前并没有使用这些。至少目前还没有。
