- en: What is Logic Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是逻辑编程
- en: What is Logic Programming?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是逻辑编程？
- en: At the beginning of this course, we stressed that computer science deals with
    imperative (how to) knowledge, whereas mathematics deals with declarative (what
    is) knowledge. Indeed, programming languages require that the programmer express
    knowledge in a form that indicates the step-by-step methods for solving particular
    problems. On the other hand, high-level languages provide, as part of the language
    implementation, a substantial amount of methodological knowledge that frees the
    user from concern with numerous details of how a specified computation will progress.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程开始时，我们强调计算机科学处理命令式（如何）知识，而数学处理声明式（是什么）知识。事实上，编程语言要求程序员以一种表明解决特定问题的逐步方法的形式表达知识。另一方面，高级语言作为语言实现的一部分，提供了大量的方法论知识，使用户不必担心指定计算将如何进行的许多细节。
- en: Most programming languages, including Lisp, are organized around computing the
    values of mathematical functions. Expression-oriented languages (such as Lisp,
    Fortran, and Algol) capitalize on the "pun" that an expression that describes
    the value of a function may also be interpreted as a means of computing that value.
    Because of this, most programming languages are strongly biased toward unidirectional
    computations (computations with well-defined inputs and outputs). There are, however,
    radically different programming languages that relax this bias. Logic programming
    extends this idea by combining a relational vision of programming with a powerful
    kind of symbolic pattern matching called unification.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数编程语言，包括Lisp，在计算数学函数的值时都是有组织的。面向表达式的语言（如Lisp，Fortran和Algol）利用了一个“双关语”，即描述函数值的表达式也可以被解释为计算该值的手段。因此，大多数编程语言都倾向于单向计算（具有明确定义的输入和输出）。然而，也有一些根本不同的编程语言放松了这种偏见。逻辑编程通过将关系式编程视觉与一种称为统一化的强大符号模式匹配相结合来扩展这一思想。
- en: This approach, when it works, can be a very powerful way to write programs.
    Part of the power comes from the fact that a single "what is" fact can be used
    to solve a number of different problems that would have different "how to" components.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当这种方法奏效时，编写程序可以是一种非常强大的方式。部分原因在于一个“是什么”事实可以用来解决许多不同的问题，这些问题可能具有不同的“如何”组成部分。
- en: A Sample Database
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个示例数据库
- en: 'Before we get into the specifics of logic programming, we need a database to
    play with. You can load this database using:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论逻辑编程的具体内容之前，我们需要一个数据库来进行操作。您可以使用以下命令加载此数据库：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The personnel data base for Microshaft contains assertions about company personnel.
    Here is the information about Ben Bitdiddle, the resident computer wizard:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Microshaft的人员数据库包含有关公司人员的断言。以下是有关住宅计算机巫师Ben Bitdiddle的信息：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Each assertion is a list (in this case a triple) whose elements can themselves
    be lists.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个断言都是一个列表（在本例中是一个三元组），其元素本身可以是列表。
- en: 'As resident wizard, Ben is in charge of the company''s computer division, and
    he supervises two programmers and one technician. Here is the information about
    them:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作为公司的住宅巫师，Ben负责公司的计算机部门，并监督两名程序员和一名技术员。以下是关于他们的信息：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There is also a programmer trainee, who is supervised by Alyssa:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个受到Alyssa监督的程序员实习生：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All of these people are in the computer division, as indicated by the word computer
    as the first item in their job descriptions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些人都在计算机部门工作，其工作描述中的第一项为计算机。
- en: 'Ben is a high-level employee. His supervisor is the company''s big wheel himself:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Ben是一名高级员工。他的主管是公司的大佬本人：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Besides the computer division supervised by Ben, the company has an accounting
    division, consisting of a chief accountant and his assistant:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了由Ben监督的计算机部门外，公司还有一个会计部门，由一名首席会计师和他的助手组成：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There is also a secretary for the big wheel:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个为大佬工作的秘书：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The data base also contains assertions about which kinds of jobs can be done
    by people holding other kinds of jobs. For instance, a computer wizard can do
    the jobs of both a computer programmer and a computer technician:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库还包含有关哪些工作可以由从事其他种类工作的人员完成的断言。例如，计算机巫师可以完成计算机程序员和计算机技术员的工作：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A computer programmer could fill in for a trainee:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一名计算机程序员可以代替一名实习生：
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Also, as is well known,
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，众所周知，
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Simple Queries
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单查询
- en: The query language allows users to retrieve information from the data base by
    posing queries in response to the system's prompt. For example, to find all computer
    programmers one can say
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 查询语言允许用户通过对系统提示的查询来从数据库中检索信息。例如，要找到所有计算机程序员，可以说
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The system will respond with the following items:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 系统将以以下项目回应：
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The input query specifies that we are looking for entries in the data base that
    match a certain pattern. In this example, the pattern specifies entries consisting
    of three items, of which the first is the literal symbol job, the second can be
    anything, and the third is the literal list (computer programmer). The "anything"
    that can be the second item in the matching list is specified by a pattern variable,
    `?x`. The general form of a pattern variable is a symbol, taken to be the name
    of the variable, preceded by a question mark. We will see below why it is useful
    to specify names for pattern variables rather than just putting ? into patterns
    to represent "anything". The system responds to a simple query by showing all
    entries in the data base that match the specified pattern.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 输入查询指定我们正在寻找与某种模式匹配的数据库条目。在这个例子中，模式指定由三个项目组成的条目，其中第一个是文字符号job，第二个可以是任何东西，第三个是文字列表(computer
    programmer)。匹配列表中第二个项目的“任何东西”由模式变量`?x`指定。模式变量的一般形式是一个符号，被视为变量的名称，前面加上一个问号。我们将在下面看到为什么指定模式变量的名称比只是在模式中放入?来代表“任何东西”更有用。系统通过显示与指定模式匹配的数据库中的所有条目来响应简单查询。
- en: A pattern can have more than one variable. For example, the query
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模式可以有多个变量。例如，查询
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: will list all the employees' addresses.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将列出所有员工的地址。
- en: A pattern can have no variables, in which case the query simply determines whether
    that pattern is an entry in the data base. If so, there will be one match; if
    not, there will be no matches.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模式可以没有变量，这种情况下查询只是确定该模式是否是数据库中的一个条目。如果是，将会有一个匹配；如果不是，将没有匹配。
- en: The same pattern variable can appear more than once in a query, specifying that
    the same "anything" must appear in each position. This is why variables have names.
    For example,
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 同一个模式变量可以在查询中出现多次，指定相同的“任何东西”必须出现在每个位置。这就是为什么变量有名称。例如，
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: finds all people who supervise themselves (though there are no such assertions
    in our sample data base).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 找到所有自我监督的人（尽管在我们的示例数据库中没有这样的断言）。
- en: The query
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 查询
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'matches all job entries whose third item is a two-element list whose first
    item is computer:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配所有第三个项目是一个两元素列表且第一个项目是computer的工作条目：
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This same pattern does not match
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个相同的模式不匹配
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: because the third item in the entry is a list of three elements, and the pattern's
    third item specifies that there should be two elements. If we wanted to change
    the pattern so that the third item could be any list beginning with computer,
    we could specify
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因为条目中的第三个项目是一个包含三个元素的列表，而模式的第三个项目指定应该有两个元素。如果我们想要更改模式，使第三个项目可以是以computer开头的任何列表，我们可以指定
- en: '[PRE17]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For example,
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE18]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: matches the data
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配数据
- en: '[PRE19]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: with `?type` as the list `(programmer trainee)`. It also matches the data
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以`?type`为列表`(programmer trainee)`。它也匹配数据
- en: '[PRE20]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: with `?type` as the list `(programmer)`, and matches the data
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以`?type`为列表`(programmer)`，并匹配数据
- en: '[PRE21]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: with `?type` as the empty list `()`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以`?type`为空列表`()`。
- en: 'We can describe the query language''s processing of simple queries as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以描述查询语言对简单查询的处理如下：
- en: The system finds all assignments to variables in the query pattern that satisfy
    the pattern -- that is, all sets of values for the variables such that if the
    pattern variables are instantiated with (replaced by) the values, the result is
    in the data base.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统找到查询模式中所有满足模式的变量赋值 -- 也就是说，所有变量的值集合，使得如果将模式变量实例化（替换为）这些值，结果就在数据库中。
- en: The system responds to the query by listing all instantiations of the query
    pattern with the variable assignments that satisfy it.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统通过列出满足它的变量赋值的查询模式的所有实例来响应查询。
- en: Note that if the pattern has no variables, the query reduces to a determination
    of whether that pattern is in the data base. If so, the empty assignment, which
    assigns no values to variables, satisfies that pattern for that data base.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果模式没有变量，则查询将简化为确定该模式是否在数据库中。如果是，则空赋值，即不为变量分配任何值，将满足该数据基的模式。
- en: '**Assertions and Queries: Part 1**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**断言和查询：第1部分**'
- en: Add a couple assertions into the database about things that you like. This should
    look very similar to
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库中添加一些关于你喜欢的事物的断言。这应该看起来非常类似于
- en: '[PRE22]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Next, write a query that returns all of the things you like. It should return
    to you all of the assertions you just added.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编写一个查询，返回所有你喜欢的事物。它应该返回你刚刚添加的所有断言。
- en: '**Assertions and Queries: Part 2**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**断言和查询：第2部分**'
- en: Add a few more assertions into the database about things that your project partner
    likes. Write another query that returns all of the things s/he likes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库中再添加一些关于你的项目伙伴喜欢的事物的断言。编写另一个查询，返回他/她喜欢的所有事物。
- en: '**Assertions and Queries: Part 3**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**断言和查询：第3部分**'
- en: Finally, write a query that will return all of the things that anoyone in the
    database likes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，编写一个查询，返回数据库中任何人喜欢的所有事物。
- en: '**Simple Queries**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**简单查询**'
- en: 'Give simple queries that retrieve the following information from the data base:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 给出从数据库中检索以下信息的简单查询：
- en: all people supervised by Ben Bitdiddle;
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有由Ben Bitdiddle监督的人;
- en: the names and jobs of all people in the accounting division;
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 会计部门所有人的姓名和工作;
- en: the names and addresses of all people who live in Slumerville.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 住在Slumerville的所有人的姓名和地址。
- en: 'Remember, to load the example database and run the query system, type the following
    commands into an interpreter:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，要加载示例数据库并运行查询系统，请在解释器中键入以下命令：
- en: '[PRE23]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Compound Queries
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合查询
- en: 'Simple queries form the primitive operations of the query language. In order
    to form compound operations, the query language provides means of combination.
    One thing that makes the query language a logic programming language is that the
    means of combination mirror the means of combination used in forming logical expressions:
    and, or, and not. (Here and, or, and not are not the Lisp primitives, but rather
    operations built into the query language.)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 简单查询构成了查询语言的基本操作。为了形成复合操作，查询语言提供了组合的手段。使查询语言成为逻辑编程语言的一点是，组合手段反映了形成逻辑表达式时使用的组合手段：与、或和非。（这里的与、或和非不是Lisp的原语，而是内置于查询语言中的操作。）
- en: 'We can use and as follows to find the addresses of all the computer programmers:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下使用与来找到所有计算机程序员的地址：
- en: '[PRE24]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The resulting output is
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 结果输出为
- en: '[PRE25]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In general,
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，
- en: '[PRE26]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: is satisfied by all sets of values for the pattern variables that simultaneously
    satisfy `<query1> <query2> ... <queryn>`
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于同时满足`<query1> <query2> ... <queryn>`的模式变量值集合都满足
- en: As for simple queries, the system processes a compound query by finding all
    assignments to the pattern variables that satisfy the query, then displaying instantiations
    of the query with those values.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 至于简单查询，系统通过找到满足查询的所有模式变量赋值，然后显示具有这些值的实例化来处理复合查询。
- en: Another means of constructing compound queries is through or. For example,
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种构建复合查询的方法是通过或。例如，
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'will find all employees supervised by Ben Bitdiddle or Alyssa P. Hacker:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将找到所有由Ben Bitdiddle或Alyssa P. Hacker监督的员工：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In general,
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: is satisfied by all sets of values for the pattern variables that satisfy at
    least one of `<query1> <query2> ... <queryn>`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有满足至少一个`<query1> <query2> ... <queryn>`的模式变量值集合都满足。
- en: Compound queries can also be formed with `not`. For example,
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 复合查询也可以用`not`形成。例如，
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: finds all people supervised by Ben Bitdiddle who are not computer programmers.
    In general,
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 找到所有由Ben Bitdiddle监督的不是计算机程序员的人。一般来说，
- en: '[PRE31]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: is satisfied by all assignments to the pattern variables that do not satisfy
    `<query1>`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有不满足`<query1>`的模式变量赋值都满足。
- en: The final combining form is called `lisp-value`. When `lisp-value` is the first
    element of a pattern, it specifies that the next element is a Lisp predicate to
    be applied to the rest of the (instantiated) elements as arguments. In general,
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的组合形式称为`lisp-value`。当`lisp-value`是模式的第一个元素时，它指定下一个元素是一个应用于其余（实例化的）元素作为参数的Lisp谓词。一般来说，
- en: '[PRE32]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: will be satisfied by assignments to the pattern variables for which the `<predicate>`
    applied to the instantiated `<arg1> ... <argn>` is true. For example, to find
    all people whose salary is greater than $30,000 we could write
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将满足模式变量的赋值，其中应用于实例化的`<arg1> ... <argn>`的`<predicate>`为真。例如，要找到所有薪水大于$30,000的人，我们可以写
- en: '[PRE33]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Rules
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规则
- en: 'As long as we just tell the system isolated facts, we can’t get extraordinarily
    interesting replies. But we can also tell it *rules* that allow it to infer one
    fact from another. For example, if we have a lot of facts like:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 只要我们告诉系统孤立的事实，我们就无法得到非常有趣的回复。但我们也可以告诉它*规则*，让它从一个事实推断出另一个事实。例如，如果我们有很多事实，比如：
- en: '[PRE34]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'then we can establish a rule about grandmotherhood:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们可以建立一个关于祖母关系的规则：
- en: '[PRE35]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The rule says that the ﬁrst part (the conclusion) is true *if* we can ﬁnd values
    for the variables such that the second part (the condition) is true.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 规则说第一部分（结论）为真*如果*我们可以找到变量的值，使得第二部分（条件）为真。
- en: Again, resist the temptation to try to do composition of functions!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，抵制尝试进行函数的组合的诱惑！
- en: '[PRE36]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`Mother` isn’t a function, and you can’t ask for the mother of someone as this
    incorrect example tries to do. Instead, as in the correct version above, you have
    to establish a variable (`?mom`) that has a value that satisﬁes the two motherhood
    relationships we need.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mother`不是一个函数，你不能像这个错误的例子尝试的那样询问某人的母亲。相反，就像上面的正确版本一样，你必须建立一个变量（`?mom`），它有一个满足我们需要的两个母亲关系的值。'
- en: In this language the words `assert!, rule, and, or`, and `not` have special
    meanings. Everything else is just a word that can be part of assertions or rules.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种语言中，单词`assert！，rule，and，or`和`not`具有特殊含义。其他一切都只是可以成为断言或规则的词。
- en: '**Analyzing the Family Tree**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**分析家谱**'
- en: 'Let''s try writing some rules! The following database (see Genesis 4) traces
    the genealogy of the descendants of Ada back to Adam, by way of Cain:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试写一些规则！以下数据库（参见创世记4）通过该数据库追溯了亚当的后裔的家谱，经由该迦音：
- en: '[PRE37]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Formulate rules such as "If S is the son of F, and F is the son of G, then S
    is the grandson of G" and "If W is the wife of M, and S is the son of W, then
    S is the son of M" (which was supposedly more true in biblical times than today)
    that will enable the query system to find the grandson of Cain; the sons of Lamech;
    the grandsons of Methushael.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 制定规则，如“如果S是F的儿子，F是G的儿子，那么S是G的孙子”和“如果W是M的妻子，S是W的儿子，那么S是M的儿子”（在圣经时代比今天更真实）将使查询系统能够找到该因的孙子；拉麦的儿子；麦土沙的孙子。
- en: More Rules
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多规则
- en: 'Here''s a slightly more complicated rule:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个稍微复杂��规则：
- en: '[PRE38]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It specifies that two people live near each other if they live in the same
    town. The final `not` clause prevents the rule from saying that all people live
    near themselves. The `same` relation is defined by the very simple rule:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 它指定如果两个人住在同一个城镇，那么他们住在附近。最后的`not`子句防止规则说所有人都住在自己附近。`same`关系由非常简单的规则定义：
- en: '[PRE39]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**Carpooling Time**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**拼车时间**'
- en: By giving the query
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 通过给出查询
- en: '[PRE40]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Alyssa P. Hacker is able to find people who live near her, with whom she can
    ride to work. On the other hand, when she tries to find all pairs of people who
    live near each other by querying
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 艾莉莎·P·哈克能够找到住在她附近的人，与他们一起上班。另一方面，当她试图通过查询找到所有住在附近的人的配对时
- en: '[PRE41]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: she notices that each pair of people who live near each other is listed twice;
    for example,
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 她注意到每对住在附近的人都被列出两次；例如，
- en: '[PRE42]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Why does this happen? Is there a way to find a list of people who live near
    each other, in which each pair appears only once? Explain. (Don't write the code
    for this!)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会发生这种情况？有没有办法找到一个住在附近的人的列表，其中每对只出现一次？解释一下。（不要写代码！）
- en: Logic as Programs
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑作为程序
- en: 'We can regard a rule as a kind of logical implication: *If* an assignment of
    values to pattern variables satisfies the body, *then* it satisfies the conclusion.
    Consequently, we can regard the query language as having the ability to perform
    *logical deductions* based upon the rules. As an example, consider the `append`
    operation. `Append` can be characterized by the following two rules:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将规则视为一种逻辑蕴涵：*如果*对模式变量的值的分配满足主体，*那么*它满足结论。因此，我们可以认为查询语言具有根据规则执行*逻辑推理*的能力。例如，考虑`append`操作。`Append`可以由以下两条规则表征：
- en: For any list `y`, the empty list and `y` append to form `y`.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于任何列表`y`，空列表和`y`连接形成`y`。
- en: For any `u`, `v`, `y`, and `z`, `(cons u v)` and `y` append to form `(cons u
    z)` if `v` and `y` append to form `z`.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于任何`u`、`v`、`y`和`z`，如果`v`和`y`连接形成`z`，那么`(cons u v)`和`y`连接形成`(cons u z)`。
- en: To express this in our query language, we define two rules for a relation
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的查询语言中表达这一点，我们为一个关系定义了两条规则
- en: '[PRE43]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'which we can interpret to mean "x and y append to form z":'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以解释为“x和y连接形成z”：
- en: '[PRE44]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The first rule has no body, which means that the conclusion holds for any value
    of `?y`. Note how the second rule makes use of dotted-tail notation to name the
    car and cdr of a list.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条规则没有主体，这意味着结论对于任何`?y`的值都成立。请注意第二条规则如何使用点尾符号来命名列表的car和cdr。
- en: 'Given these two rules, we can formulate queries that compute the append of
    two lists:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这两条规则，我们可以制定计算两个列表追加的查询：
- en: '[PRE45]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'What is more striking, we can use the same rules to ask the question "Which
    list, when appended to `(a b)`, yields`(a b c d)`?" This is done as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 更引人注目的是，我们可以使用相同的规则来询问“哪个列表，当追加到`(a b)`时，会产生`(a b c d)`？”这样做如下：
- en: '[PRE46]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The new thing in logic programming is that we can run a "function" backwards!
    We can tell it the answer and get back the question. But the real magic is...
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑编程中的新事物是我们可以反向运行一个“函数”！我们可以告诉它答案，然后得到问题。但真正的魔力是...
- en: '[PRE47]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: we can also ask for all pairs of lists that append to form `(a b c d)`! We can
    use logic programming to compute multiple answers to the same question! Somehow
    it found all the possible combinations of values that would make our query true.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以询问所有追加形成`(a b c d)`的列表对！我们可以使用逻辑编程来计算相同问题的多个答案！不知何故，它找到了使我们的查询成立的所有可能值的组合。
- en: 'How does the append program work? Compare it to the Scheme `append`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 追加程序是如何工作的？将其与Scheme的`append`进行比较：
- en: '[PRE48]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Like the Scheme program, the logic program has two cases: There is a base case
    in which the ﬁrst argument is empty. In that case the combined list is the same
    as the second appended list. And there is a recursive case in which we divide
    the ﬁrst appended list into its car and its cdr. We reduce the given problem into
    a problem about appending `(cdr a)` to `b`. The logic program is diﬀerent in form,
    but it says the same thing.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 像Scheme程序一样，逻辑程序有两种情况：有一个基本情况，其中第一个参数为空。在这种情况下，组合列表与第二个追加列表相同。还有一个递归情况，在这种情况下，我们将第一个追加列表分为其car和cdr。我们将给定的问题简化为关于将`(cdr
    a)`追加到`b`的问题。逻辑程序在形式上不同，但它表达的是同样的意思。
- en: (Just as, in the grandmother example, we had to give the mother a name instead
    of using a function call, here we have to give`(car a)` a name--we call it `?u`.)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: (就像在祖母的例子中，我们不得不给母亲一个名字而不是使用函数调用一样，在这里我们必须给`(car a)`一个名字--我们称之为`?u`。)
- en: Word of Caution
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警告
- en: The query system may seem to exhibit quite a bit of intelligence in using the
    rules to deduce the answers to the queries above. Actually, as we will see in
    the next section, the system is following a well-determined algorithm in unraveling
    the rules. Unfortunately, although the system works impressively in the append
    case, the general methods may break down in more complex cases.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 查询系统似乎展示了相当多的智能，使用规则推断上述查询的答案。实际上，正如我们将在下一节中看到的那样，系统在解开规则时遵循一个明确定义的算法。不幸的是，尽管系统在追加案例中表现出色，但在更复杂的情况下，一般方法可能会失效。
- en: The "working backward" magic used in the append case doesn't always work. Let's
    look at the following example, which reverses a list.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在追加案例中使用的“向后工作”的魔法并不总是奏效。让我们看看下面的例子，它颠倒了一个列表。
- en: '[PRE49]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This works for `(reverse (a b c) ?what)` but not the other way around; it gets
    into an inﬁnite loop. We can also write a version that works only backwards:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于`(reverse (a b c) ?what)`有效，但���过来不行；它会陷入无限循环。我们也可以编写一个仅向后工作的版本：
- en: '[PRE50]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: But it's much harder to write one that works both ways. Even as we speak, logic
    programming fans are trying to push the limits of the idea, but right now, you
    still have to understand something about the below-the-line algorithm to be conﬁdent
    that your logic program won't loop.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 但编写一个双向工作的程序要困难得多。即使在我们说话的同时，逻辑编程爱好者也在尝试推动这个想法的极限，但现在，你仍然需要了解一些关于下面的算法才能确信你的逻辑程序不会循环。
- en: '**Last-Pair**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**最后一对**'
- en: Define rules to implement the `last-pair` operation of [SICP exercise 2.17](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_thm_2.17),
    which returns a list containing the last element of a nonempty list. Check your
    rules on queries such as `(last-pair (3) ?x)`, `(last-pair (1 2 3) ?x)`, and `(last-pair
    (2 ?x) (3))`. Do your rules work correctly on queries such as `(last-pair ?x (3))`?
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 定义规则来实现[SICP练习2.17](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_thm_2.17)的`last-pair`操作，该操作返回包含非空列表的最后一个元素的列表。在类似`(last-pair
    (3) ?x)`、`(last-pair (1 2 3) ?x)`和`(last-pair (2 ?x) (3))`的查询上检查你的规则。你的规则在类似`(last-pair
    ?x (3))`的查询上是否正确？
- en: Takeaways
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: 'Here are some takeaways from this subsection:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这一小节的一些要点：
- en: In logic programming, we assert facts and ask questions.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在逻辑编程中，我们断言事实并提出问题。
- en: An assertion is represented by a list.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个断言由一个列表表示。
- en: We use the query language to retrieve information from the data base.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用查询语言从数据库中检索信息。
- en: Rules allow infering one fact from another.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则允许从一个事实推断出另一个事实。
- en: We can write programs such as `append` with logic programming!
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用逻辑编程编写诸如`append`之类的程序！
- en: What's Next?
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: Go to the next subsection and learn how the query system works!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 前往下一小节，了解查询系统的工作原理！
