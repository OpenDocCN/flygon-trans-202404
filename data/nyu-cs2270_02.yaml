- en: Notes for September 16 class -- Introduction to Ray Tracing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9月16日课程笔记--射线追踪简介
- en: '**WebGL Cheat Sheet**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**WebGL速查表**'
- en: As I mentioned last week, there is a convenient [compact guide to WebGL.](https://www.khronos.org/files/webgl/webgl-reference-card-1_0.pdf)
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 正如我上周提到的，这里有一个方便的[WebGL紧凑指南。](https://www.khronos.org/files/webgl/webgl-reference-card-1_0.pdf)
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last page in particular is useful for writing shaders in OpenGL ES.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 特别是最后一页对于在OpenGL ES中编写着色器非常有用。
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that OpenGL ES fragment shaders do not allow recursion.
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，OpenGL ES片段着色器不允许递归。
- en: '**Gamma correction**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**伽马校正**'
- en: Displays are adjusted for human perception using a "gamma curve", since people
    can perceive a vary large range of brightness.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 显示器使用“伽马曲线”调整人类感知，因为人们可以感知到非常大范围的亮度。
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example, the image to the right shows the values 0...255 on the horizontal
    axis, the resulting actual displayed brightness on the virtual axis.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 例如，右侧的图像显示了水平轴上的值0...255，虚拟轴上的实际显示亮度。
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Various displays differ, but this adjustment is generally approximately x²
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不同的显示器有所不同，但这种调整通常大约是x²
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Since all of our calculations are really summing actual photons of light, we
    need to do all our math in linear brightness, and then do a gamma correction when
    we are all finished:'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于我们所有的计算实际上都是在求解实际光子的总和，我们需要在线性亮度下进行所有数学运算，然后在完成时进行伽马校正：
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Roughly: c → sqrt(c)'
  id: totrans-16
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 粗略地说：c → sqrt(c)
- en: '*Output brightness*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*输出亮度*'
- en: '![](../Images/faf0a062f9799cc734a4d7f0f6cf0ca4.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/faf0a062f9799cc734a4d7f0f6cf0ca4.jpg)'
- en: '*Input values 0 ... 255*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*输入值0 ... 255*'
- en: '**Ray tracing: *Forming a ray***'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**射线追踪：*形成一条射线***'
- en: At each pixel, a ray from the origin V = (0,0,0) shoots into the scene, hitting
    a virtual screen which is on the z = -f plane.
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在每个像素处，从原点V =（0,0,0）射出一条射线，击中一个位于z = -f平面上的虚拟屏幕。
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We refer to f as the "focal length" of this virtual camera.
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们将f称为这个虚拟相机的“焦距”。
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The ray toward any pixel aims at: (x, y, -f), where -1 ≤ x ≤ +1 and -1 ≤ y
    ≤ +1.'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指向任何像素的光线目标是：(x, y, -f)，其中-1 ≤ x ≤ +1，-1 ≤ y ≤ +1。
- en: ''
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So the ray direction W = normalize( vec3(x, y, -f) ).
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因此，射线方向W = normalize（vec3（x，y，-f））。
- en: ''
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In order to render an image of a scene at any pixel, we need to follow the ray
    at that pixel and see what object (if any) the ray encounters first.
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了在任何像素渲染场景的图像，我们需要跟随该像素处的射线，并查看射线首先遇到的对象（如果有）是什么。
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In other words, the nearest object at a point V + Wt, where t > 0.
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 换句话说，在点V + Wt处最近的对象，其中t > 0。
- en: '![](../Images/fc61dfbaf236b39341e952d35fe8e63b.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fc61dfbaf236b39341e952d35fe8e63b.jpg)'
- en: '**Ray tracing: *Defining a sphere***'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**射线追踪：*定义一个球体***'
- en: 'We can describe a sphere in a GLSL vector of length 4:'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们可以用长度为4的GLSL向量来描述一个球体：
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`vec4 sphere = vec4(x,y,z,r);`'
  id: totrans-36
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`vec4 sphere = vec4(x,y,z,r);`'
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: where (x,y,z) is the center of the sphere, and r is the sphere radius.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 其中（x，y，z）是球体的中心，r是球体的半径。
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As we discussed in class, the components of a vec4 in GLSL can be accessed
    in one of two ways:'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 正如我们在课堂上讨论的那样，GLSL中的vec4的分量可以通过两种方式之一访问：
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So to access the value of your sphere's radius in a fragment shader `vec4`,
    you will want to refer to it as sphere.w (not sphere.r).
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因此，在片段着色器`vec4`中访问你的球体半径的值时，你将希望将其称为sphere.w（而不是sphere.r）。
- en: '![](../Images/f16b1ccbeb5d4d24076a1a259dffadaa.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f16b1ccbeb5d4d24076a1a259dffadaa.jpg)'
- en: '**Ray tracing: *Finding where a ray hits a sphere***'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**射线追踪：*找到射线击中球体的位置***'
- en: D = V - sph.xyz // vector from center of sphere to ray origin.
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: D = V - sph.xyz // 从球体中心到射线起点的向量。
- en: ''
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The point of doing this subtraction is that we are then effectively solving
    the much easier problem of ray tracing to a sphere at the origin (0,0,0).
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这样做减法的目的是，我们实际上在解决射线追踪到原点（0,0,0）处的球体的问题，这个问题要容易得多。
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So instead of solving the more complex problem of tracing a ray V+Wt to a sphere
    centered at sph.xyz, we are instead solving the equivalent, but much simpler,
    problem of tracing the ray D+Wt to a sphere centered at (0,0,0).
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因此，我们不是解决追踪射线V+Wt到以sph.xyz为中心的球体的更复杂问题，而是解决等效但简单得多的问题，即追踪射线D+Wt到以（0,0,0）为中心的球体。
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (D + Wt)² = sph.r² // find a point along ray that is distance r from sphere
    center.
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （D + Wt）² = sph.r² //找到沿射线距离球体中心r的���。
- en: ''
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (D + Wt)² - sph.r² = 0 // need to solve for t.
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （D + Wt）² - sph.r² = 0 //需要解决t。
- en: ''
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Generally, if a and b are vectors, then a • b = ( a[x] * b[x] + a[y] * b[y]
    + a[z] * b[z] )
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一般来说，如果a和b是向量，那么a • b =（a[x] * b[x] + a[y] * b[y] + a[z] * b[z]）
- en: ''
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This "inner product" also equals: |a| * |b| * cos(θ)'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个“内积”也等于：|a| * |b| * cos(θ)
- en: ''
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Multiplying the terms out, we need to solve the following quadratic equation:'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将这些项相乘，我们需要解决以下二次方程：
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (W • W) t² +
  id: totrans-63
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （W • W）t² +
- en: 2 (W • D) t +
  id: totrans-64
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2（W • D）t +
- en: (D • D) - r² = 0
  id: totrans-65
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: (D • D) - r² = 0
- en: ''
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since ray direction W is unit length, the first term in this equation (W • W)
    is just 1.
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于射线方向W是单位长度，因此此方程中的第一项（W • W）只是1。
- en: '![](../Images/8c485daddd6e051fd3d3758f6e0cd3b9.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c485daddd6e051fd3d3758f6e0cd3b9.jpg)'
- en: '**Ray tracing: *Finding the nearest intersection***'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**光线追踪：*找到最近的交点***'
- en: Compute the intersection to all spheres in the scene.
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 计算场景中所有球体的交点。
- en: The visible sphere at this pixel, if any, is the one with smallest positive
    t.
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在此像素处可见的球体（如果有的话），是具有最小正t值的球体。
- en: '**Ray tracing: *Computing the surface point***'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**光线追踪：*计算表面点***'
- en: 'Once we know the value of t, we can just plug it into the ray equation to get
    the location of the surface point on the sphere that is visible at this ray, as
    shown in the equation below and in the figure to the right:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们知道t的值，我们只需将其代入射线方程中，即可得到在此射线可见的球体表面点的位置，如下方程和右侧图所示：
- en: S = V + W t
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: S = V + W t
- en: '![](../Images/9ca84eac450457168de6e9ab79a945c6.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ca84eac450457168de6e9ab79a945c6.jpg)'
- en: '**Ray tracing: *Computing the surface normal***'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**光线追踪：*计算表面法线***'
- en: We now need to compute the surface normal in order to compute how the sphere
    interacts with light to produce a final color at this pixel.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要计算表面法线，以便计算球体如何与光线相互作用，从而在此像素产生最终颜色。
- en: The "surface normal" is the unit length vector that is perpendicular to the
    surface of the sphere -- the "up" direction if you are standing on the surface.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: “表面法线”是垂直于球体表面的单位长度向量，即如果你站在表面上的“向上”方向。
- en: 'For a sphere, we can get this by subtracting the center of the sphere from
    the surface point S, and then dividing by the radius of the sphere:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个球体，我们可以通过从球体中心减去表面点S，然后除以球体半径来获得这个值：
- en: N = (S - sph.xyz) / sph.r
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: N = (S - sph.xyz) / sph.r
- en: '![](../Images/70f96f090203c87c8f10d499bd8e66b0.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/70f96f090203c87c8f10d499bd8e66b0.jpg)'
- en: '**Ray tracing: *A simple shader***'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**光线追踪：*一个简单的着色器***'
- en: 'A simple light source at infinity can be defined as an rgb color, together
    with an xyz light direction:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 无穷远处的简单光源可以定义为rgb颜色，以及xyz光线方向：
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A diffuse simple surface material can be defined by an rgb "ambient" component,
    which is independent of any particular light source, and an rgb "diffuse" component,
    which is added for each light source:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的漫反射表面材质可以由独立于任何特定光源的rgb“环境”分量和为每个光源添加的rgb“漫反射”分量来定义：
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The figure to the right shows a diffuse sphere, where the point at each pixel
    is computed as:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的图显示了一个漫反射球体，其中每个像素点的位置计算如下：
- en: ambient + lightColor * diffuse * max(0, normal • lightDirection)
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 环境光 + 光源颜色 * 漫反射 * max(0, 法线 • 光线方向)
- en: '![](../Images/38f40f1008aa1becae861e45f38d6838.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/38f40f1008aa1becae861e45f38d6838.jpg)'
- en: '**Ray tracing: *Multiple light sources***'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**光线追踪：*多光源***'
- en: 'If the scene contains more than one light source, then pixel color for points
    on the sphere can be computed by:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果场景包含多个光源，则可以通过以下方式计算球体上点的像素颜色：
- en: ambient + ∑[n] ( lightColor[n] * diffuse * max(0, normal • lightDirection[n])
    )
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 环境光 + ∑[n]（光源颜色[n] * 漫反射 * max(0, 法线 • 光线方向[n])）
- en: where n iterates over the lights in the scene.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 其中n在场景中的光源上进行迭代。
- en: '**At the end of the class we saw a video:**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**课程结束时我们观看了一个视频：**'
- en: The Academy Award winning short [**Ryan**](http://videosift.com/video/Chris-Landreth-Ryan-Oscar-winning-animated-short)
    by Chris Landreth.
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由Chris Landreth执导的获得奥斯卡奖的短片[**Ryan**](http://videosift.com/video/Chris-Landreth-Ryan-Oscar-winning-animated-short)。
- en: '**Homework**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**作业**'
- en: Implement simple ray tracing for spheres in a fragment shader.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在片段着色器中为球体实现简单的光线追踪。
- en: As we said in class, you can start with [this code base](code2.zip).
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如我们在课堂上所说，您可以从[此代码库](code2.zip)开始。
- en: Implement simple diffuse shading.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现简单的漫反射阴影。
- en: 'Extra credit: multiple spheres'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外加分：多个球体
- en: '***Hint:*** You can create and use an array of spheres as:'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***提示：*** 您可以创建并使用球体数组，如下所示：'
- en: ''
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ''
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you try this extra credit, make sure that at each pixel you choose the sphere
    with the smallest value of t.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果尝试这个额外加分，请确保在每个像素处选择具有最小t值的球体。
- en: 'Extra credit: multiple light sources'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外加分：多个光源
- en: 'Extra credit: procedural textures'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外加分：程序纹理
- en: Make something cool and fun, try to create something interactive (using uCursor)
    and/or animated (using uTime).
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作一些酷炫有趣的东西，尝试创建一些交互式的（使用uCursor）和/或动画的（使用uTime）。
