- en: オブジェクトからキーの型を生成する
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: オブジェクトからキーの型を生成する
- en: 原文：[https://typescriptbook.jp/tips/generates-type-from-object-key](https://typescriptbook.jp/tips/generates-type-from-object-key)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/tips/generates-type-from-object-key](https://typescriptbook.jp/tips/generates-type-from-object-key)
- en: オブジェクトからキーだけ欲しい[​](#オブジェクトからキーだけ欲しい "オブジェクトからキーだけ欲しい への直接リンク")
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: オブジェクトからキーだけ欲しい[​](#オブジェクトからキーだけ欲しい "オブジェクトからキーだけ欲しい への直接リンク")
- en: あるメッセージが言語ごとに定義されているとします。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: あるメッセージが言語ごとに定義されているとします。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 内容は確認を促す変哲もないシステムのメッセージです。このオブジェクトを使ってシステムがサポートしている言語の一覧を作ります。次のようなユニオン型が今回の目的です。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 内容は確認を促す変哲もないシステムのメッセージです。このオブジェクトを使ってシステムがサポートしている言語の一覧を作ります。次のようなユニオン型が今回の目的です。
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`typeof`[​](#typeof "typeof への直接リンク")'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`typeof`[​](#typeof "typeof への直接リンク")'
- en: 頻出するこの`typeof`はJavaScriptのものではなく、TypeScriptの`typeof`です。これをオブジェクトに対して使用している例は前のページにあるとおりです。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 頻出するこの`typeof`はJavaScriptのものではなく、TypeScriptの`typeof`です。これをオブジェクトに対して使用している例は前のページにあるとおりです。
- en: '[## 📄️ オブジェクトから型を生成する'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ オブジェクトから型を生成する'
- en: 多くの言語では型による構造体、オブジェクトの定義をしてからコーディングが始まりますが、元がJavaScriptであるTypeScriptにはそのような決まりがないことも多々あります。](/tips/generates-type-from-object)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 多くの言語では型による構造体、オブジェクトの定義をしてからコーディングが始まりますが、元がJavaScriptであるTypeScriptにはそのような決まりがないことも多々あります。](/tips/generates-type-from-object)
- en: この例で実行すれば次のような型`TypeOfLanguage`が生成されるでしょう (型名は便宜的なものです) 。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: この例で実行すれば次のような型`TypeOfLanguage`が生成されるでしょう (型名は便宜的なものです) 。
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ts`type <data-lsp lsp="type TypeOfLanguage = {
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ts`type <data-lsp lsp="type TypeOfLanguage = {
- en: 'en: string;'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'en: string;'
- en: 'fr: string;'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'fr: string;'
- en: 'es: string;'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'es: string;'
- en: 'ja: string;'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'ja: string;'
- en: 'zh: string;'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zh: string;'
- en: '}" style="border-bottom:solid 2px lightgrey">TypeOfLanguage</data-lsp> =  typeof
    <data-lsp lsp="const conf: {'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '}" style="border-bottom:solid 2px lightgrey">TypeOfLanguage</data-lsp> =  typeof
    <data-lsp lsp="const conf: {'
- en: 'en: string;'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'en: string;'
- en: 'fr: string;'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'fr: string;'
- en: 'es: string;'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'es: string;'
- en: 'ja: string;'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'ja: string;'
- en: 'zh: string;'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zh: string;'
- en: '}">conf</data-lsp>;` `type TypeOfLanguage = {'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '}">conf</data-lsp>;` `type TypeOfLanguage = {'
- en: 'en: string;'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'en: string;'
- en: 'fr: string;'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'fr: string;'
- en: 'es: string;'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'es: string;'
- en: 'ja: string;'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'ja: string;'
- en: 'zh: string;'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zh: string;'
- en: '}`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '}`'
- en: ここまでくればあとは少しです。`TypeOfLanguage`型のキーだけを型にしてしまいます。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ここまでくればあとは少しです。`TypeOfLanguage`型のキーだけを型にしてしまいます。
- en: '`keyof`[​](#keyof "keyof への直接リンク")'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`keyof`[​](#keyof "keyof への直接リンク")'
- en: '`keyof`はオブジェクトの型に使うとそのオブジェクトのキーをユニオン型にして返します。上記の`TypeOfLanguage`型があれば'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`keyof`はオブジェクトの型に使うとそのオブジェクトのキーをユニオン型にして返します。上記の`TypeOfLanguage`型があれば'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ts`type <data-lsp lsp="type Language = &quot;en&quot; | &quot;fr&quot; | &quot;es&quot;
    | &quot;ja&quot; | &quot;zh&quot;" style="border-bottom:solid 2px lightgrey">Language</data-lsp>
    =  keyof <data-lsp lsp="type TypeOfLanguage = {
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ts`type <data-lsp lsp="type Language = &quot;en&quot; | &quot;fr&quot; | &quot;es&quot;
    | &quot;ja&quot; | &quot;zh&quot;" style="border-bottom:solid 2px lightgrey">Language</data-lsp>
    =  keyof <data-lsp lsp="type TypeOfLanguage = {
- en: 'en: string;'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'en: string;'
- en: 'fr: string;'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'fr: string;'
- en: 'es: string;'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'es: string;'
- en: 'ja: string;'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'ja: string;'
- en: 'zh: string;'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zh: string;'
- en: '}">TypeOfLanguage</data-lsp>;` `type Language = "en" | "fr" | "es" | "ja" |
    "zh"`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '}">TypeOfLanguage</data-lsp>;` `type Language = "en" | "fr" | "es" | "ja" |
    "zh"`'
- en: となります。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: となります。
- en: '[## 📄️ keyof型演算子'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ keyof型演算子'
- en: keyofはオブジェクトの型からプロパティ名を型として返す型演算子です。たとえば、nameプロパティを持つ型に対して、keyofを使うと文字列リテラル型の"name"が得られます。](/reference/type-reuse/keyof-type-operator)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: keyofはオブジェクトの型からプロパティ名を型として返す型演算子です。たとえば、nameプロパティを持つ型に対して、keyofを使うと文字列リテラル型の"name"が得られます。](/reference/type-reuse/keyof-type-operator)
- en: まとめ[​](#まとめ "まとめ への直接リンク")
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: まとめ[​](#まとめ "まとめ への直接リンク")
- en: 見た目が少々いびつですが、次でオブジェクトから希望するキーのユニオン型を生成できます。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 見た目が少々いびつですが、次でオブジェクトから希望するキーのユニオン型を生成できます。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'ts`type <data-lsp lsp="type Language = &quot;en&quot; | &quot;fr&quot; | &quot;es&quot;
    | &quot;ja&quot; | &quot;zh&quot;" style="border-bottom:solid 2px lightgrey">Language</data-lsp>
    =  keyof  typeof <data-lsp lsp="const conf: {'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`type <data-lsp lsp="type Language = &quot;en&quot; | &quot;fr&quot; | &quot;es&quot;
    | &quot;ja&quot; | &quot;zh&quot;" style="border-bottom:solid 2px lightgrey">Language</data-lsp>
    =  keyof  typeof <data-lsp lsp="const conf: {'
- en: 'en: string;'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'en: string;'
- en: 'fr: string;'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'fr: string;'
- en: 'es: string;'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'es: string;'
- en: 'ja: string;'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'ja: string;'
- en: 'zh: string;'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zh: string;'
- en: '}">conf</data-lsp>;` `type Language = "en" | "fr" | "es" | "ja" | "zh"`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '}">conf</data-lsp>;` `type Language = "en" | "fr" | "es" | "ja" | "zh"`'
- en: '疑問: `keyof conf`じゃダメなんですか？[​](#疑問-keyof-confじゃダメなんですか "疑問-keyof-confじゃダメなんですか
    への直接リンク")'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '疑問: `keyof conf`じゃダメなんですか？[​](#疑問-keyof-confじゃダメなんですか "疑問-keyof-confじゃダメなんですか
    への直接リンク")'
- en: 動作しません。なぜなら`keyof`は値ではなく (オブジェクトの) 型に対して使用できるからです。一方`typeof`は値から型を生成するのでこの順番で使用する必要があります。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 動作しません。なぜなら`keyof`は値ではなく (オブジェクトの) 型に対して使用できるからです。一方`typeof`は値から型を生成するのでこの順番で使用する必要があります。
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
