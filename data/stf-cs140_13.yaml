- en: Linkers and Dynamic Linking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接器和动态链接
- en: Lecture Notes for CS 140
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CS 140的讲座笔记
- en: Spring 2014
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年春季
- en: John Ousterhout
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰·奥斯特豪特
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    none.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自*操作系统：原理与实践*这个主题的阅读材料：无。
- en: 'When a process is running, what does its memory look like? A collection of
    regions called *sections*. Basic memory layout for Linux and other Unix systems:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当进程运行时，它的内存是什么样子？一组称为*部分*的区域。 Linux和其他Unix系统的基本内存布局：
- en: 'Code (or "text" in Unix terminology): starts at location 0'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码（或Unix术语中的“文本”）：从位置0开始
- en: 'Data: starts immediately above code, grows upward'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据：立即在代码上方开始，向上增长。
- en: 'Stack: starts at highest address, grows downward'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 栈：从最高地址开始，向下增长
- en: 'System components that take part in managing a process''s memory:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参与管理进程内存的系统组件：
- en: 'Compiler and assembler:'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器和汇编器：
- en: Generate one *object file* for each source code file containing information
    for that source file.
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个包含该源文件信息的源代码文件生成一个*目标文件*。
- en: Information is incomplete, since each source file generally references some
    things defined in other source files.
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息是不完整的，因为每个源文件通常引用其他源文件中定义的一些内容。
- en: 'Linker:'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接器：
- en: Combines all of the object files for one program into a single object file.
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个程序的所有目标文件合并为一个单独的目标文件。
- en: Linker output is complete and self-sufficient.
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接器的输出是完整且自给自足的。
- en: 'Operating system:'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统：
- en: Loads object files into memory.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将目标文件加载到内存中。
- en: Allows several different processes to share memory at once.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许多个不同的进程同时共享内存。
- en: Provides facilities for processes to get more memory after they've started running.
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为进程在启动后获取更多内存提供设施。
- en: 'Run-time library:'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时库：
- en: Works together with OS to provide dynamic allocation routines, such as malloc
    and free in C.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与操作系统一起工作，提供动态分配例程，例如C中的malloc和free。
- en: 'Linkers (or Linkage Editors, ld in Unix, LINK on Windows): combine many separate
    pieces of a program, re-organize storage allocation. Typically invoked invisibly
    by compilers.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接器（或链接编辑器，在Unix中为ld，在Windows上为LINK）：将程序的许多独立部分组合在一起，重新组织存储分配。通常由编译器隐式调用。
- en: 'Three functions of a linker:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接器的三个功能：
- en: Combine all the pieces of a program.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将程序的所有部分组合在一起。
- en: Figure out a new memory organization so that all the pieces fit together (combine
    like sections).
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找出一个新的内存组织，使所有部分都能组合在一起（组合类似的部分）。
- en: Touch up addresses so that the program can run under the new memory organization.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触及地址，以便程序可以在新的内存组织下运行。
- en: 'Result: a runnable program stored in a new object file called an *executable*.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果：存储在新的名为*可执行文件*的目标文件中的可运行程序。
- en: 'Problems linker must solve:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接器必须解决的问题：
- en: Assembler doesn't know addresses of external objects when assembling files separately.
    E.g. where is printf routine?
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汇编器在单独组装文件时不知道外部对象的地址。例如printf例程在哪里？
- en: Assembler just puts zero in the object file for each unknown address
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汇编器只是为每个未知地址在目标文件中放置零。
- en: Assembler doesn't know where the things it's assembling will go in memory
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汇编器不知道它正在组装的东西将在内存中的位置。
- en: Assume that things start at address zero, let linker re-arrange.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设事物从地址零开始，让链接器重新排列。
- en: 'Each object file consists of:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个目标文件由以下组成：
- en: '*Sections*, each holding a distinct kind of information.'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*部分*，每个部分包含一种不同类型的信息。'
- en: 'Typical sections: code ("text") and data.'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型的部分：代码（“文本”）和数据。
- en: For each section, object file contains size and current location of the section,
    plus initial contents, if any
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个部分，目标文件包含部分的大小和当前位置，以及初始内容（如果有）。
- en: '*Symbol table*: name and current location of variable or procedure that can
    be referenced in other object files.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*符号表*：变量或过程的名称和当前位置，可以在其他目标文件中引用。'
- en: '*Relocation records* : information about addresses referenced in this object
    file that the linker must adjust once it knows the final memory allocation.'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*重定位记录*：关于在此目标文件中引用的地址的信息，链接器在知道最终内存分配后必须调整的信息。'
- en: Additional information for debugging (e.g. map from line numbers in the source
    file to location in the code section).
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于调试的附加信息（例如，从源文件中的行号到代码部分中位置的映射）。
- en: 'Linker executes in three passes:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接器执行三次传递：
- en: 'Pass 1: read in section sizes, compute final memory layout.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第1步：读取部分大小，计算最终内存布局。
- en: 'Pass 2: read in all symbols, create complete symbol table in memory.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第2步：读取所有符号，创建内存中完整的符号表。
- en: 'Pass 3: read in section and relocation information, update addresses, write
    out new file.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第3步：读取部分和重定位信息，更新地址，写出新文件。
- en: Dynamic Linking
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态链接
- en: 'Originally all programs were linked *statically*, as described above:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最初，所有程序都是以*静态*方式链接的，如上所述：
- en: All external references fully *resolved*
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有外部引用都已经 *解析*
- en: Each program complete
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个程序都是完整的
- en: 'Since late 1980''s most systems have supported *shared libraries* and *dynamic
    linking*:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自20世纪80年代末以来，大多数系统都支持*共享库*和*动态链接*：
- en: For common library packages, only keep a single copy in memory, shared by all
    processes.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于常见的库包，只在内存中保留一个副本，供所有进程共享。
- en: Don't know where library is loaded until runtime; must resolve references dynamically,
    when program runs.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时不知道库加载在哪里；必须在程序运行时动态解析引用。
- en: 'One way of implementing dynamic linking: *jump table*.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现动态链接的一种方式：*跳转表*。
- en: 'If any of the files being linked are shared libraries, the linker doesn''t
    actually include the shared library code in the final program. Instead, it includes
    two things that implement dynamic linking:'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果被链接的文件中有任何共享库，链接器实际上不会在最终程序中包含共享库代码。相反，它包含两个实现动态链接的内容：
- en: 'Jump table: an array in which each entry is a single machine instruction containing
    an unconditional branch (jump).'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳转表：一个数组，其中每个条目都是一个包含无条件分支（跳转）的单个机器指令。
- en: For each function in a shared library used by the program, there is one entry
    in the jump table that will jump to the beginning of that function.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于程序使用的共享库中的每个函数，跳转表中都有一个条目，该条目将跳转到该函数的开头。
- en: 'Dynamic loader: library package invoked at startup to fill in the jump table.'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态加载器：在启动时调用的库包，用于填充跳转表。
- en: 'For relocation records referring to functions in the shared library, the linker
    substitutes the address of the jump table entry: when the function is invoked,
    the caller will "call" the jump table entry, which redirects the call to the real
    function.'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于指向共享库中函数的重定位记录，链接器会替换跳转表条目的地址：当调用函数时，调用者将“调用”跳转表条目，该条目将调用重定向到真正的函数。
- en: Initially, all jump table entries jump to zero (unresolved).
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最初，所有跳转表条目都跳转到零（未解析）。
- en: 'When the program starts up, the dynamic load library is invoked:'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当程序启动时，动态加载库被调用：
- en: It invokes the OS mmap functions to load each shared library into memory.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它调用操作系统的 mmap 函数将每个共享库加载到内存中。
- en: It fills in the jump table with the correct address for each function in a shared
    library.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它会为共享库中每个函数的正确地址填充跳转表。
