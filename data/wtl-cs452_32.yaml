- en: Lecture 32 - Communicating Sequential Processes (CSP)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第32讲 - 通信顺序处理（CSP）
- en: Public Service Annoucements
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共服务公告
- en: 'Final exam date: 9.00 August 7 to 11.30 August 9'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 期末考试日期：8月7日上午9点至8月9日上午11点30分
- en: 'Final demos: 26 August & 27 August'
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终演示：8月26日和8月27日
- en: 25 August
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8月25日
- en: Groups demoing on the 27th leave the lab at 13.00
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 27日进行演示的组在13.00离开实验室
- en: 26 August
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8月26日
- en: Code freeze at 9.00
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码冻结在9.00
- en: Demos start at 9.30
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演示从9.30开始
- en: 30 minutes in length
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时长30分钟
- en: Demos end at 13.00, groups demoing on the 27th re-enter the lab
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演示结束于13.00，27日进行演示的组重新进入实验室
- en: 27 August
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8月27日
- en: Code freeze at 9.00
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码冻结在9.00
- en: Demos start at 9.30
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演示从9.30开始
- en: 30 minutes in length
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时长30分钟
- en: Demos end at 13.00
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演示结束于13.00
- en: Noticed at the Milestone 2 demos
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在里程碑2的演示中注意到
- en: Conservative reservations did best
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保守的预留表现最佳
- en: They make corner cases not exist
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使边缘情况不存在
- en: 'But they inhibit performance: we saw system lock-up with two trains.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但它们会抑制性能：我们看到两列车系统死机。
- en: 'My impression:'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我的印象：
- en: every group had something close to staggering
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个组都有接近惊人的东西
- en: a few groups had robust implementations, not necessarily complete
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些组有稳健的实现，不一定完整
- en: One robust implementation had many terminal-controllable parameters
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个稳健的实现有许多终端可控参数
- en: Only one group -- of the ones we asked -- had a small idle task execution time
    fraction, ~ 50%, and they were having performance problems.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有一个组--我们询问的组中--有一个小的空闲任务执行时间比例，约为50%，而且他们遇到了性能问题。
- en: Following, first on a big loop, then on a small one, is a good test of reservations.
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，首先进行大循环，然后进行小循环，是对预留的一个很好的测试。
- en: We liked ones that adjusted to go at the best speed.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们喜欢那些调整速度最佳的。
- en: This is a symptom of being ables to run more trains without lock-up
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是能够在没有锁死的情况下运行更多列车的症状
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Can Message Passing be Made Type Safe?
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息传递是否可以做到类型安全？
- en: Dynamically
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 动态地
- en: Yes, even including type extension and polymorphism, but
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，甚至包括类型��展和多态性，但是
- en: What does the program do when it detects a type mismatch?
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当程序检测到类型不匹配时会做什么？
- en: Well, it could send a more informative error message before it dies.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嗯，它在死机之前可以发送更多信息的错误消息。
- en: Statically
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 静态地
- en: No,
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不，
- en: Structured programming depends critically on well-defined scope.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化编程在于良好定义的范围至关重要。
- en: While tasks are scoped internally, there is no inter-task scoping.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然任务在内部有范围，但没有任务间的范围。
- en: In fact, we are happy to be free of scoping, because it allows us to try out
    a wider variety of program structures.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际上，我们很高兴摆脱了范围限制，因为这使我们可以尝试更多种类的程序结构。
- en: CSP
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSP
- en: To formal methods people CSP is a calculus for reasoning about the correctness
    of multi-process/threaded/tasking (MPTT) systems. Active research has been ongoing
    for forty years with several goals
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于形式方法的人来说，CSP是一个用于推理多进程/多线程/多任务（MPTT）系统正确性的演算法。已经进行了四十年的积极研究，有几个目标
- en: translating other synchronization/communication semantics to and from CSP
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其他同步/通信语义翻译成CSP并从CSP翻译
- en: finding new methods for reasoning about CSP
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找关于CSP的推理新方法
- en: scaling everything to make CSP useful for production sized programs
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有内容按比例缩放，使CSP对于生产规模的程序有用
- en: During that time many a chicken has left its tracks on the pages of formal methods
    journals and conference proceedings!
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在那段时间里，许多鸡在形式方法期刊和会议记录的页面上留下了它们的足迹！
- en: For programmers the claim has been and is made that CSP provides a superior
    method for structuring MPTT systems. (`Superior' in the sense of `easier to design,
    implement and understand'.)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于程序员来说，主张并且一直主张CSP提供了一种优越的方法来构建MPTT系统。（“优越”是指“更容易设计、实现和理解”。）
- en: The claim was first made in the late 1970s/early 1980s.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该主张首次出现在1970年代末/1980年代初。
- en: It was made again in the early 1990s, this time with the weight of Bell Labs
    behind it.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在1990年代初再次出现，这次有贝尔实验室的支持。
- en: And has been made yet again in the last few years, this time with the weight
    of Goggle behind it.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且在最近几年再次提出，这次有谷歌的支持。
- en: Primitives
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 原语
- en: In CSP there are two communication primitives. In the notation of occam 2/Go,
    they are
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSP中有两个通信原语。在occam 2/Go的表示法中，它们是
- en: '**read**'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**读取**'
- en: '[PRE0]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: reads from an input channel called `keyboard` and assigns what it reads to the
    variable `ch`
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从名为`keyboard`的输入通道读取并将其读取的内容赋给变量`ch`
- en: the channel must have an associated type, and the type must match the type of
    the variable.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道必须有一个关联类型，并且该类型必须与变量的类型匹配。
- en: That is, the channel and the variable must be in the same scope.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也就是说，通道和变量必须在相同的范围内。
- en: read blocks until input is available on the channel
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取阻塞，直到通道上有输入可用
- en: '**write**'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**写**'
- en: '[PRE1]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: writes the value of the variable `duh` into the channel `keyboard`
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将变量`duh`的值写入通道`keyboard`
- en: blocks until the
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直到
- en: Thus, a read/write pair guarantess that read in the reading process occurs simultaneously
    with or after the corresponding write in the writing process.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，读/写对保证了读取过程中的读取与写入过程中的相应写入同时发生或之后发生。
- en: There is also a creation primitive
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个创建原语
- en: occam -- PAR
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: occam -- PAR
- en: 'no shared memory: costly'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有共享内存：昂贵
- en: Go -- go
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go -- go
- en: 'shared memory: cheap'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享内存：廉价
- en: The communication primitives require something new, called a channel.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通信原语需要一种新的东西，称为通道。
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Each channel has a protocol that states the type that messages it handles must
    have.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个通道都有一个协议，规定它处理的消息的类型必须是什么。
- en: Knowing the name of a channel is essential for using it.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知道通道的名称对于使用它是必不可少的。
- en: Applications control who can be on the other end of a channel, which is essential
    for security, by controlling who knows the name of the channel.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序控制谁可以在通道的另一端，这对于安全性至关重要，通过控制谁知道通道的名称。
- en: The Grandfather -- the Transputer -- and the Grandson -- Go
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 祖父--传输器--和孙子--Go
- en: Use many co-operating, medium capability microCPUs to do a big job.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用许多合作的、中等能力的微型CPU来完成一项大任务。
- en: An idea whose time has now come, **again**.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个时机再次到来的想法。
- en: Google
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌
- en: Problem is communication
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是通信
- en: 'Big granularity (thick client: MS, Google)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大颗粒度（厚客户端：微软，谷歌）
- en: minimizes communication
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化通信
- en: maximizes replicated data
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化复制数据
- en: 'The Google approach:'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌的方法：
- en: an opportunity nobody thought about
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个没有人考虑过的机会
- en: a problem nobody thought about.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个没有人考虑过的问题。
- en: Small granularity
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小颗粒度
- en: minimizes replicated data
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化复制数据
- en: maximizes communication
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化通信
- en: Your system, like threading solutions, relies on shared memory for communication
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的系统，像线程解决方案一样，依赖于共享内存进行通信
- en: How would you handle caching?
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何处理缓存？
- en: Transputer hardware
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 传输器硬件
- en: The transputer was an early, now vanished, example of a real-time system based
    on plentiful small granularity communication. Your kernel is another example.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 传输器是一个早期的、现在消失了的、基于丰富的小颗粒通信的实时系统的例子。你的内核是另一个例子。
- en: 'Your kernel: communication based on memory that is universally accessible by
    the kernel, which is easy to program, hard to make secure.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的内核：基于内核普遍可访问的内存进行通信，易于编程，难以确保安全。
- en: 'The transputer: communication based on switch mediated packets, which is hard
    to program, easy to make secure.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传输器：基于交换介导的数据包通信，难以编程，易于确保安全。
- en: The transputer itself
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 传输器本身
- en: CPU, memory, switch on one chip
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU、内存、交换机在一块芯片上
- en: chips connected in an array
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 芯片连接成一个数组
- en: presumably a run-time system decides where tasks will go in order to
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大概一个运行时系统决定任务将去的地方
- en: maximize CPU throughput
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化CPU吞吐量
- en: minimize communication overhead
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化通信开销
- en: can be, and usually was, taken over by the programmer.
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以被程序员接管。
- en: What about real-time?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 实时怎么样？
- en: lots of timer (countup) hardware
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大量计时器（计时器）硬件
- en: interaction of countdown and countup to make your clock server
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 倒计时和计时器的交互以制作您的时钟服务器
- en: Instances of timers are not guaranteed to be synchronized
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定时器的实例不能保证同步
- en: How could two timers be synchronized?
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个计时器如何同步？
- en: Google (data centre) hardware
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 谷歌（数据中心）硬件
- en: Many single board (including disk) computers
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 许多单板（包括磁盘）计算机
- en: Communicate by high speed ethernet
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过高速以太网通信
- en: Software
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 软件
- en: Farmer with clients & worker
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 农民与客户端和工人
- en: Occam2
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Occam2
- en: '[PRE3]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Go
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 去
- en: '[PRE4]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Timing out
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 超时
- en: Occam2
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Occam2
- en: '[PRE5]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Go
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 去
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Basic idea
  id: totrans-118
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 基本思想
- en: processes (tasks)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程（任务）
- en: may be named, take arguments and return values
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以命名，接受参数并返回值
- en: may be combined
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能被合并
- en: CSP channels
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSP通道
- en: time
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 时间
- en: Combining processes
  id: totrans-124
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 结合进程
- en: sequential
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 顺序
- en: conditional
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ���条件的
- en: if/then
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: if/then
- en: selection by case
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按情况选择
- en: looping
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环
- en: without test/break
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有测试/中断
- en: with test/break
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有测试/中断
- en: parallel
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并行
- en: initiated when the keyword PAR occurs.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当关键字PAR出现时启动。
- en: alternation
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交替
- en: guarded alternatives
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护性选择
- en: if more than one guard is true then select at random
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有多个保护条件为真，则随机选择
- en: can be prioritized
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以优先考虑
- en: Time
  id: totrans-138
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 时间
- en: timer returns time as channel input
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计时器将时间作为通道输入返回
- en: '[PRE7]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`AFTER` can be used to combine times, because there is a total order based
    on time'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AFTER`可以用来组合时间，因为基于时间的总序。'
- en: '[PRE8]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`AFTER` can make timer input blocking'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AFTER`可以使计时器输入阻塞'
- en: '[PRE9]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Can you Build a Server with Type-Checking?
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你能用类型检查构建服务器吗？
- en: '[PRE10]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The Result
  id: totrans-147
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 结果
- en: You can write a type-safe server, BUT
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以编写一个类型安全的服务器，但是
- en: all possible clients must be in the same scope in order to get static type checking
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有可能的客户端必须在相同的范围内才能获得静态类型检查
- en: with dynamic, structural type checking you only need to have the tasks written
    in languages having the same type system
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动态、结构类型检查，你只需将任务编写成具有相同类型系统的语言
- en: BUT
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 但是
- en: with this structure excessive code in the client weakens synchronization, which
    might not be what you want.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种结构，客户端中过多的代码会削弱同步，这可能不是你想要的。
- en: '* * *'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Return to:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·科温 2012 年春季 CS452 课堂笔记](index.html)'
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·科温的 2012 年春季 CS452 页面](../index.html)'
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·科温的 CS452 页面](../../index.html)'
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·科温的教学页面](../../../index.html)'
- en: '[Bill Cowan''s home page](../../../../index.html)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比尔·科温的主页](../../../../index.html)'
