- en: '第二部分: 源码及附录'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '第二部分: 源码及附录'
- en: '[1\. 第二部分: 源码及附录](README.xhtml)'
  id: totrans-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1\. 第二部分: 源码及附录](README.xhtml)'
- en: '[2\. Sanic源码阅读：基于0.1.2](Sanic源码阅读：基于0.1.2.xhtml)'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2\. Sanic源码阅读：基于0.1.2](Sanic源码阅读：基于0.1.2.xhtml)'
- en: '[simple_server.py](Sanic源码阅读：基于0.1.2.xhtml#simple-server-py)'
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[simple_server.py](Sanic源码阅读：基于0.1.2.xhtml#simple-server-py)'
- en: '[blueprints.py](Sanic源码阅读：基于0.1.2.xhtml#blueprints-py)'
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[blueprints.py](Sanic源码阅读：基于0.1.2.xhtml#blueprints-py)'
- en: '[总结](Sanic源码阅读：基于0.1.2.xhtml#)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[总结](Sanic源码阅读：基于0.1.2.xhtml#)'
- en: '[3\. 附录：关于装饰器](附录：关于装饰器.xhtml)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3\. 附录：关于装饰器](附录：关于装饰器.xhtml)'
- en: '[认识装饰器](附录：关于装饰器.xhtml#)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[认识装饰器](附录：关于装饰器.xhtml#)'
- en: '[装饰器原理](附录：关于装饰器.xhtml#)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[装饰器原理](附录：关于装饰器.xhtml#)'
- en: '[结语](附录：关于装饰器.xhtml#)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结语](附录：关于装饰器.xhtml#)'
- en: '# 1\. 第二部分: 源码及附录  # 2\. Sanic源码阅读：基于0.1.2'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '# 1\. 第二部分: 源码及附录  # 2\. Sanic源码阅读：基于0.1.2'
- en: '`Sanic`是一个可以使用`async/await`语法编写项目的异步非阻塞框架，它写法类似于`Flask`，但使用了异步特性，而且还使用`uvloop`作为事件循环，其底层使用的是`libuv`，从而使
    `Sanic`的速度优势更加明显。'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sanic`是一个可以使用`async/await`语法编写项目的异步非阻塞框架，它写法类似于`Flask`，但使用了异步特性，而且还使用了`uvloop`作为事件循环，其底层使用的是`libuv`，从而使
    `Sanic`的速度优势更加明显。'
- en: 本章，我将和大家一起看看`Sanic`里面的运行机制是怎样的，它的`Router Blueprint`等是如何实现的。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章，我将和大家一起看看`Sanic`里面的运行机制是怎样的，它的`Router Blueprint`等是如何实现的。
- en: 如果你有以下的需求：
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有以下的需求：
- en: 想深入了解Sanic，迫切想知道它的运行机制
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想深入了解Sanic，迫切想知道它的运行机制
- en: 直接阅读源码，做一些定制
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接阅读源码，做一些定制
- en: 学习
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习
- en: 将Sanic-0.1.2阅读完后的一些建议，我觉得你应该有以下基础再阅读源码才会理解地比较好：
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将Sanic-0.1.2阅读完后的一些建议，我觉得你应该有以下基础再阅读源码才会理解地比较好：
- en: 理解[装饰器](https://github.com/howie6879/Sanic-For-Pythoneer/blob/master/docs/part2/%E9%99%84%E5%BD%95%EF%BC%9A%E5%85%B3%E4%BA%8E%E8%A3%85%E9%A5%B0%E5%99%A8.md)
    [https://github.com/howie6879/Sanic-For-Pythoneer/blob/master/docs/part2/%E9%99%84%E5%BD%95%EF%BC%9A%E5%85%B3%E4%BA%8E%E8%A3%85%E9%A5%B0%E5%99%A8.md]，见附录
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解[装饰器](https://github.com/howie6879/Sanic-For-Pythoneer/blob/master/docs/part2/%E9%99%84%E5%BD%95%EF%BC%9A%E5%85%B3%E4%BA%8E%E8%A3%85%E9%A5%B0%E5%99%A8.md)
    [https://github.com/howie6879/Sanic-For-Pythoneer/blob/master/docs/part2/%E9%99%84%E5%BD%95%EF%BC%9A%E5%85%B3%E4%BA%8E%E8%A3%85%E9%A5%B0%E5%99%A8.md]，见附录
- en: 理解协程
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解协程
- en: Sanic-0.1.2 的核心文件如下：
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Sanic-0.1.2 的核心文件如下：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 通过运行下面的示例，这些文件都会被我们看到它的作用，拭目以待吧，为了方便诸位的理解，我已将我注解的一份`Sanic`代码上传到了`github`，见[sanic_annotation](https://github.com/howie6879/sanic_annotation)
    [https://github.com/howie6879/sanic_annotation]。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行下面的示例，这些文件都会被我们看到它的作用，拭目以待吧，为了方便诸位的理解，我已将我注解的一份`Sanic`代码上传到了`github`，见[sanic_annotation](https://github.com/howie6879/sanic_annotation)
    [https://github.com/howie6879/sanic_annotation]。
- en: '## simple_server.py'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '## simple_server.py'
- en: 让我们从[simple_server](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/examples/simple_server.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/examples/simple_server.py]开始吧，代码如下：
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从[simple_server](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/examples/simple_server.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/examples/simple_server.py]开始吧，代码如下：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 或许你直接把[sanic_annotation](https://github.com/howie6879/sanic_annotation) [https://github.com/howie6879/sanic_annotation]项目直接clone到本地比较方便调试+理解：
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 或许你直接把[sanic_annotation](https://github.com/howie6879/sanic_annotation) [https://github.com/howie6879/sanic_annotation]项目直接clone到本地比较方便调试+理解：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 那么，现在一切准备就绪，开始阅读吧。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，现在一切准备就绪，开始阅读吧。
- en: 前两行代码导入包：
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 前两行代码导入包：
- en: '`Sanic`：构建一个 Sanic 服务必须要实例化的类'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sanic`：构建一个 Sanic 服务必须要实例化的类'
- en: '`json`：以json格式返回结果，实际上是HTTPResponse类，根据实例化参数content_type的不同，构建不同的实例，如：'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json`：以json格式返回结果，实际上是HTTPResponse类，根据实例化参数content_type的不同，构建不同的实例，如：'
- en: '`text`：`content_type="text/plain; charset=utf-8"`'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`：`content_type="text/plain; charset=utf-8"`'
- en: '`html`：`content_type="text/html; charset=utf-8"`'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`html`：`content_type="text/html; charset=utf-8"`'
- en: 实例化一个`Sanic`对象，`app = Sanic(__name__)`，可见[sanic.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/sanic.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/sanic.py]，我已经在这个文件里面做了一些注释，这里也详细说下`Sanic`类：
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化一个`Sanic`对象，`app = Sanic(__name__)`，可见[sanic.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/sanic.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/sanic.py]，我已经在这个文件里面做了一些注释，这里也详细说下`Sanic`类：
- en: route()：装饰器，构建uri和视图函数的映射关系，调用Router().add()方法
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: route()：装饰器，构建uri和视图函数的映射关系，调用Router().add()方法
- en: exception()：装饰器，和上面差不多，不过针对的是错误处理类Handler
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: exception()：装饰器，和上面差不多，不过针对的是错误处理类Handler
- en: middleware()：装饰器，针对中间件
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: middleware()：装饰器，针对中间件
- en: register_blueprint()：注册视图的函数，接受第一个参数是视图类`blueprint`，再调用该类下的`register`方法实现将此蓝图下的`route、exception、middleware`统一注册到`app.route、app.exception、app.exception`
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: register_blueprint()：注册视图的函数，接受第一个参数是视图类`blueprint`，再调用该类下的`register`方法实现将此蓝图下的`route、exception、middleware`统一注册到`app.route、app.exception、app.exception`
- en: 'handle_request()：这是一个很重要的异步函数，当服务启动后，如果客户端发来一个有效的请求，会自动执行 `on_message_complete`函数，该函数的目的是异步调用
    `handle_request`函数，`handle_request`函数会回调`write_response`函数，`write_response`接受的参数是此uri请求对应的视图函数，比如上面demo中，如果客户端请求''/''，那么这里`write_response`就会接受`json({"test":
    True})`，然后进一步处理，再返回给客户端'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'handle_request()：这是一个很重要的异步函数，当服务启动后，如果客户端发来一个有效的请求，会自动执行 `on_message_complete`函数，该函数的目的是异步调用
    `handle_request`函数，`handle_request`函数会回调`write_response`函数，`write_response`接受的参数是此uri请求对应的视图函数，比如上面demo中，如果客户端请求''/''，那么这里`write_response`就会接受`json({"test":
    True})`，然后进一步处理，再返回给客户端'
- en: run()：Sanic服务的启动函数，必须执行，实际上会继续调用`server.serve`函数，详情下面会详细讲
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: run()：Sanic服务的启动函数，必须执行，实际上会继续调用`server.serve`函数，详情下面会详细讲
- en: stop()：终止服务
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: stop()：终止服务
- en: 其实上面这部分介绍已经讲了Sanic基本的运行逻辑，如果你理解了，那下面的讲解对你来说是轻轻松松，如果不怎么明白，也不要紧，这是只是一个大体的介绍，跟着步骤来，也很容易理解，继续看代码：
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 其实上面这部分介绍已经讲了Sanic基本的运行逻辑，如果你理解了，那下面的讲解对你来说是轻轻松松，如果不怎么明白，也不要紧，这是只是一个大体的介绍，跟着步骤来，也很容易理解，继续看代码：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`app.route`，上面介绍过，随着Sanic服务的启动而启动，可定义参数`uri, methods`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.route`，上面介绍过，随着Sanic服务的启动而启动，可定义参数`uri, methods`'
- en: 目的是为`url`的`path`和视图函数对应起来，构建一对映射关系，本例中`Sanic.router`类下的`Router.routes = []`
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 目的是为`url`的`path`和视图函数对应起来，构建一对映射关系，本例中`Sanic.router`类下的`Router.routes = []`
- en: 会增加一个名为`Route`的`namedtuple`，如下：
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 会增加一个名为`Route`的`namedtuple`，如下：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 看到没，`uri '/'` 和视图函数`test`对应起来了，如果客户端请求`'/'`，当服务器监听到这个请求的时候,`handle_request`可以通过参数中的`request.url`来找到视图函数`test`并且执行，随即生成视图返回
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 看到没，`uri '/'` 和视图函数`test`对应起来了，如果客户端请求`'/'`，当服务器监听到这个请求的时候,`handle_request`可以通过参数中的`request.url`来找到视图函数`test`并且执行，随即生成视图返回
- en: '那么这里`write_response`就会接受视图函数test返回的`json({"test": True})`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '那么这里`write_response`就会接受视图函数test返回的`json({"test": True})`'
- en: 说下`Router`类，这个类的目的就是添加和获取路由对应的视图函数，把它想象成`dict`或许更容易理解：
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 说下`Router`类，这个类的目的就是添加和获取路由对应的视图函数，把它想象成`dict`或许更容易理解：
- en: add(self, uri, methods, handler)：添加一个映射关系到self.routes
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: add(self, uri, methods, handler)：添加一个映射关系到self.routes
- en: get(self, request)：获取request.url对应的视图函数
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: get(self, request)：获取request.url对应的视图函数
- en: 最后一行，`app.run(host="0.0.0.0", port=8000)`，Sanic 下的`run`函数，启动一个`http server`，主要是启动`run`里面的`serve`函数，参数如下：
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行，`app.run(host="0.0.0.0", port=8000)`，Sanic 下的`run`函数，启动一个`http server`，���要是启动`run`里面的`serve`函数，参数如下：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 让我们将目光投向[server.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/server.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/server.py]，这也是Sanic框架的核心代码：
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将目光投向[server.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/server.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/server.py]，这也是Sanic框架的核心代码：
- en: serve()：里面会创建一个TCP服务的协程，然后通过`loop.run_forever()`运行这个事件循环，以便接收客户端请求以及处理相关事件，每当一个新的客户端建立连接服务就会创建一个新的`Protocol`实例，接受请求与返回响应离不开其中的`HttpProtocol`，里面的函数支持接受数据、处理数据、执行视图函数、构建响应数据并返回给客户端
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: serve()：里面会创建一个TCP服务的协程，然后通过`loop.run_forever()`运行这个事件循环，以便接收客户端请求以及处理相关事件，每当一个新的客户端建立连接服务就会创建一个新的`Protocol`实例，接受请求与返回响应离不开其中的`HttpProtocol`，里面的函数支持接受数据、处理数据、执行视图函数、构建响应数据并返回给客户端
- en: HttpProtocol：`asyncio.Protocol`的子类，用来处理与客户端的通信，我在[server.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/server.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/server.py]里写了对应的注释
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HttpProtocol：`asyncio.Protocol`的子类，用来处理与客户端的通信，我在[server.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/server.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/server.py]里写了对应的注释
- en: 至此，Sanic 服务启动了
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，Sanic 服务启动了
- en: 不要小看这一个小小的demo，执行一下，竟然涉及到下面这么多个文件，让我们总结一下：
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 不要小看这一个小小的demo，执行一下，竟然涉及到下面这么多个文件，让我们总结一下：
- en: '[sanic.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/sanic.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/sanic.py]'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sanic.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/sanic.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/sanic.py]'
- en: '[server.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/server.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/server.py]'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[server.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/server.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/server.py]'
- en: '[router.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/router.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/router.py]'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[router.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/router.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/router.py]'
- en: '[request.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/request.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/request.py]'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[request.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/request.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/request.py]'
- en: '[response.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/response.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/response.py]'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[response.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/response.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/response.py]'
- en: '[exceptions.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/exceptions.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/exceptions.py]'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[exceptions.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/exceptions.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/exceptions.py]'
- en: '[config.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/config.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/config.py]'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[config.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/config.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/config.py]'
- en: '[log.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/log.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/log.py]'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[log.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/log.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/log.py]'
- en: '除去`__init__.py`，`Sanic`项目一共就10个文件，这个小demo不显山不露水地竟然用到了8个，虽然其中几个没有怎么用到，但也足够说明，你如果理解了这个demo，`Sanic`的运行逻辑以及框架代码你已经了解地很深入了  ##
    blueprints.py'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '除去`__init__.py`，`Sanic`项目一共就10个文件，这个小demo不显山不露水地竟然用到了8个，虽然其中几个没有怎么用到，但也足够说明，你如果理解了这个demo，`Sanic`的运行逻辑以及框架代码你已经了解地很深入了  ##
    blueprints.py'
- en: 这个例子看完，我们就能轻易地明白什么是`blueprints`，以及`blueprints`的运行方式，代码如下：
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子看完，我们就能轻易地明白什么是`blueprints`，以及`blueprints`的运行方式，代码如下：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 让我们从这两行开始：
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这两行开始：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '显然，`blueprint`以及`blueprint2`是`Blueprint`根据不同的参数生成的不同的实例对象，接下来要干嘛？没错，分析[blueprints.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/blueprints.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/blueprints.py]:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '显然，`blueprint`以及`blueprint2`是`Blueprint`根据不同的参数生成的不同的实例对象，接下来要干嘛？没错，分析[blueprints.py](https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/blueprints.py)
    [https://github.com/howie6879/sanic_annotation/blob/master/sanic_0_1_2/src/blueprints.py]:'
- en: BlueprintSetup：蓝图注册类
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BlueprintSetup：蓝图注册类
- en: add_route：添加路由到app
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: add_route：添加路由到app
- en: add_exception：添加对应抛出的错误到app
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: add_exception：添加对应抛出的错误到app
- en: add_middleware：添加中间件到app
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: add_middleware：添加中间件到app
- en: Blueprint：蓝图类，接收两个参数：name(蓝图名称) url_prefix 该蓝图的url前缀
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blueprint：蓝图类，接收两个参数：name(蓝图名称) url_prefix 该蓝图的url前缀
- en: route：路由装饰器，将会生成一个匿名函数到self.deferred_functions列表里稍后一起处理注册到app里
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: route：路由装饰器，将会生成一个匿名函数到self.deferred_functions列表里稍后一起处理注册到app里
- en: middleware：同上
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: middleware：同上
- en: exception：同上
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: exception：同上
- en: record：注册一个回调函数到self.deferred_functions列表里面，
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: record：注册一个回调函数到self.deferred_functions列表里面，
- en: make_setup_state：实例化BlueprintSetup
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: make_setup_state：实例化BlueprintSetup
- en: register：注册视图，实际就是注册route、middleware、exception到app，此时会利用make_setup_state返回的BlueprintSetup示例进行对于的add_***一系列操作，相当于Sanic().route()效果
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: register：注册视图，实际就是注册route、middleware、exception到app，此时会利用make_setup_state返回的BlueprintSetup示例进行对于的add_***一系列操作，相当于Sanic().route()效果
- en: 请看下`route`和`register`函数，然后再看下面的代码：
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请看下`route`和`register`函数，然后再看下面的代码：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '怎么样，现在来看，是不是很轻松，这一行`app.run(host="0.0.0.0", port=8000, debug=True)`服务启动代码不用多说吧？  ##
    总结'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '怎么样，现在来看，是不是很轻松，这一行`app.run(host="0.0.0.0", port=8000, debug=True)`服务启动代码不用多说吧？  ##
    总结'
- en: 看到这里，相信你已经完全理解了`Sanic`的运行机制，虽然还有`middleware&exception`的注册以及调用机制没讲，但这和`route`的运行机制一样，如果你懂了`route`那么这两个也很简单。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 看到这里，相信你已经完全理解了`Sanic`的运行机制，虽然还有`middleware&exception`的注册以及调用机制没讲，但这和`route`的运行机制一样，如果你懂了`route`那么这两个也很简单。
- en: 如果诸位一遍没怎么看明白，这里我建议可以多看几遍，多结合编辑器`Debug`下源码，坚持下来，会发下`Sanic`真的很简单，当然，这只是第一个小版本的`Sanic`，和目前的版本相比，不论是代码结构的复杂程度以及功能对比，都有很大差距，毕竟，`Sanic`一直在开源工作者的努力下，慢慢成长。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果诸位一遍没怎么看明白，这里我建议可以多看几遍，多结合编辑器`Debug`下源码，坚持下来，会发下`Sanic`真的很简单，当然，这只是第一个小版本的`Sanic`，和目前的版本相比，不论是代码结构的复杂程度以及功能对比，都有很大差距，毕竟，`Sanic`一直在开源工作者的努力下，慢慢成长。
- en: 本人技术微末，若有错误，请指出，不胜感激.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 本人技术微末，若有错误，请指出，不胜感激.
- en: 注解地址：[sanic_annotation](https://github.com/howie6879/sanic_annotation) [https://github.com/howie6879/sanic_annotation]
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注解地址：[sanic_annotation](https://github.com/howie6879/sanic_annotation) [https://github.com/howie6879/sanic_annotation]
- en: '博客地址：[http://blog.howie6879.cn/post/31/](http://blog.howie6879.cn/post/31/)  #
    附录：关于装饰器'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '博客地址：[http://blog.howie6879.cn/post/31/](http://blog.howie6879.cn/post/31/)  #
    附录：关于装饰器'
- en: '## 认识装饰器'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '## 认识装饰器'
- en: 在python中，对于一个函数，若想在其运行前后做点什么，那么装饰器是再好不过的选择，这种语法在一些项目中十分常见，是Python语言的黑魔法，用处颇多，话不多说，让我们看一下代码：
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在python中，对于一个函数，若想在其运行前后做点什么，那么装饰器是再好不过的选择，这种语法在一些项目中十分常见，是Python语言的黑魔法，用处颇多，话不多说，让我们看一下代码：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '这段代码，初看之下，确实不是很理解，接下来一步一步分析，看看装饰器到底是怎么工作的。  ## 装饰器原理'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '这段代码，初看之下，确实不是很理解，接下来一步一步分析，看看装饰器到底是怎么工作的。  ## 装饰器原理'
- en: 在python中，方法允许作为参数传递，想在某个函数执行前后加点料，也可以这样简单实现。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在python中，方法允许作为参数传递，想在某个函数执行前后加点料，也可以这样简单实现。
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 由此，上面代码也可以这样写：
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由此，上面代码也可以这样写：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 两段代码执行后：
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 两段代码执行后：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '表面上看来，`02-2.py`代码看起来也可以很好地执行啊，可请注意，在末尾处，`hello`只是函数名称，它并不能被调用，若执行`hello()`，就会报`TypeError:
    ''NoneType'' object is not callable`对象不能调用的错误，这是自然，因为在`decorator`中`func()`直接将传入的函数实例化了，有人会想，那如果这样改呢？'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '表面上看来，`02-2.py`代码看起来也可以很好地执行啊，可请注意，在末尾处，`hello`只是函数名称，它并不能被调用，若执行`hello()`，就会报`TypeError:
    ''NoneType'' object is not callable`对象不能调用的错误，这是自然，因为在`decorator`中`func()`直接将传入的函数实例化了，有人会想，那如果这样改呢？'
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 确实，这样改是可以，可有没有想过，若想在函数执行结束后加点装饰呢？这样便行不通了，可能又有人会想，若这样改呢？
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，这样改是可以，可有没有想过，若想在函数执行结束后加点装饰呢？这样便行不通了，可能又有人会想，若这样改呢？
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '这样写看起来，恩，怎么说呢，总有种没有意义的感觉，不如直接将在外部的函数放进`decorator`中，如下:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '这样写看起来，恩，怎么说呢，总有种没有意义的感觉，不如直接将在外部的函数放进`decorator`中，如下:'
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 执行：
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 执行：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 怎么样，输出的结果是不是符合要求，其实简单来看的话，可以这样理解`hello()==decorator(hello)()==wrapper()`，最后其实就是执行`wrapper()`函数而已，事实就是如此的简单，不妨来验证一下：
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 怎么样，输出的结果是不是符合要求，其实简单来看的话，可以这样理解`hello()==decorator(hello)()==wrapper()`，最后其实就是执行`wrapper()`函数而已，事实就是如此的简单，不妨来验证一下：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 果然就是执行了wrapper函数，解决问题的同时也会出现新的问题，那便是代码中本来定义的hello函数岂不是被wrapper函数覆盖了，又该如何解决这个问题呢？这时候`functions.wraps`就可以登场了，代码如下：
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 果然就是执行了wrapper函数，解决问题的同时也会出现新的问题，那便是代码中本来定义的hello函数岂不是被wrapper函数覆盖了，又该如何解决这个问题呢？这时候`functions.wraps`就可以登场了，代码如下：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 执行代码：
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 执行代码：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`functions.wraps`作用是不是一目了然哈~到了这一步，再看01.py的代码，是不是代码结构清晰明了，只不过多了个参数~'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`functions.wraps`作用是不是一目了然哈~到了这一步，再看01.py的代码，是不是代码结构清晰明了，只不过多了个参数~'
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '猜都猜得到执行后输出什么了。  ## 结语'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '猜都猜得到执行后输出什么了。  ## 结语'
- en: 只要了解装饰器原理，不管是带参数的装饰器，还是装饰器类，都是小菜一碟。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 只要了解装饰器原理，不管是带参数的装饰器，还是装饰器类，都是小菜一碟。
- en: Index
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Index
- en: '[Introduction](README.md)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Introduction](README.md)'
- en: '[第一部分：技巧](./docs/part1/README.md)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第一部分：技巧](./docs/part1/README.md)'
- en: '[1.初使用](./docs/part1/1.初使用.md)'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1.初使用](./docs/part1/1.初使用.md)'
- en: '[2.配置](./docs/part1/2.配置.md)'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2.配置](./docs/part1/2.配置.md)'
- en: '[3.项目结构](./docs/part1/3.项目结构.md)'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3.项目结构](./docs/part1/3.项目结构.md)'
- en: '[4.展示一个页面](./docs/part1/4.展示一个页面.md)'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4.展示一个页面](./docs/part1/4.展示一个页面.md)'
- en: '[5.数据库使用](./docs/part1/5.数据库使用.md)'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5.数据库使用](./docs/part1/5.数据库使用.md)'
- en: '[6.常用的技巧](./docs/part1/6.常用的技巧.md)'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[6.常用的技巧](./docs/part1/6.常用的技巧.md)'
- en: '[7.可靠的拓展](./docs/part1/7.可靠的拓展.md)'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7.可靠的拓展](./docs/part1/7.可靠的拓展.md)'
- en: '[8.测试与部署](./docs/part1/8.测试与部署.md)'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[8.测试与部署](./docs/part1/8.测试与部署.md)'
- en: '[第二部分：源码及附录](./docs/part2/README.md)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第二部分：源码及附录](./docs/part2/README.md)'
- en: '[Sanic源码阅读：基于0.1.2](./docs/part2/Sanic源码阅读：基于0.1.2.md)'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Sanic源码阅读：基于0.1.2](./docs/part2/Sanic源码阅读：基于0.1.2.md)'
- en: '[附录：关于装饰器](./docs/part2/附录：关于装饰器.md)'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[附录：关于装饰器](./docs/part2/附录：关于装饰器.md)'
