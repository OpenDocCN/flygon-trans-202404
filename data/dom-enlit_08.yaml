- en: Chapter 3 - Element Nodes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章 - 元素节点
- en: 3.1 *HTML*Element* object overview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1 *HTML*Element* 对象概述
- en: Elements in an html document all have a unique nature and as such they all have
    a unique [JavaScript constructor](http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/html.html)
    that instantiates the element as a node object in a DOM tree. For example an *<a>*
    element is created as a DOM node from the *HTMLAnchorElement()* constructor. Below
    we verify that an anchor element is created from *HTMLAnchorElement()*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 文档中的元素都具有独特的特性，因此它们都有一个独特的[JavaScript 构造函数](http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/html.html)，用于将元素实例化为
    DOM 树中的节点对象。例如，*<a>* 元素是从 *HTMLAnchorElement()* 构造函数创建的 DOM 节点。下面我们验证了锚元素是否是从
    *HTMLAnchorElement()* 创建的。
- en: 'live code: [http://jsfiddle.net/domenlightenment/TgcNu](http://jsfiddle.net/domenlightenment/TgcNu)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 内联代码：[http://jsfiddle.net/domenlightenment/TgcNu](http://jsfiddle.net/domenlightenment/TgcNu)
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The point I am trying to express in the previous code example is that each element
    in the DOM is constructed from a unique JavaScript intefaces/constructor. The
    list below (not a [complete list](http://www.whatwg.org/specs/web-apps/current-work/multipage/section-index.html#elements-1))
    should give you a good sense of the interfaces/constructors used to create HTML
    elements.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我在前面的代码示例中试图表达的观点是，DOM 中的每个元素都是由唯一的 JavaScript 接口/构造函数构造而成的。下面的列表（不是[完整列表](http://www.whatwg.org/specs/web-apps/current-work/multipage/section-index.html#elements-1)）应该能让你对用于创建
    HTML 元素的接口/构造函数有一个很好的理解。
- en: '*HTMLHtmlElement*'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLHtmlElement*'
- en: '*HTMLHeadElement*'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLHeadElement*'
- en: '*HTMLLinkElement*'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLLinkElement*'
- en: '*HTMLTitleElement*'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLTitleElement*'
- en: '*HTMLMetaElement*'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLMetaElement*'
- en: '*HTMLBaseElement*'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLBaseElement*'
- en: '*HTMLIsIndexElement*'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLIsIndexElement*'
- en: '*HTMLStyleElement*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLStyleElement*'
- en: '*HTMLBodyElement*'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLBodyElement*'
- en: '*HTMLFormElement*'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLFormElement*'
- en: '*HTMLSelectElement*'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLSelectElement*'
- en: '*HTMLOptGroupElement*'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLOptGroupElement*'
- en: '*HTMLOptionElement*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLOptionElement*'
- en: '*HTMLInputElement*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLInputElement*'
- en: '*HTMLTextAreaElement*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLTextAreaElement*'
- en: '*HTMLButtonElement*'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLButtonElement*'
- en: '*HTMLLabelElement*'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLLabelElement*'
- en: '*HTMLFieldSetElement*'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLFieldSetElement*'
- en: '*HTMLLegendElement*'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLLegendElement*'
- en: '*HTMLUListElement*'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLUListElement*'
- en: '*HTMLOListElement*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLOListElement*'
- en: '*HTMLDListElement*'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLDListElement*'
- en: '*HTMLDirectoryElement*'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLDirectoryElement*'
- en: '*HTMLMenuElement*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLMenuElement*'
- en: '*HTMLLIElement*'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLLIElement*'
- en: '*HTMLDivElement*'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLDivElement*'
- en: '*HTMLParagraphElement*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLParagraphElement*'
- en: '*HTMLHeadingElement*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLHeadingElement*'
- en: '*HTMLQuoteElement*'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLQuoteElement*'
- en: '*HTMLPreElement*'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLPreElement*'
- en: '*HTMLBRElement*'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLBRElement*'
- en: '*HTMLBaseFontElement*'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLBaseFontElement*'
- en: '*HTMLFontElement*'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLFontElement*'
- en: '*HTMLHRElement*'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLHRElement*'
- en: '*HTMLModElement*'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLModElement*'
- en: '*HTMLAnchorElement*'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLAnchorElement*'
- en: '*HTMLImageElement*'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLImageElement*'
- en: '*HTMLObjectElement*'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLObjectElement*'
- en: '*HTMLParamElement*'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLParamElement*'
- en: '*HTMLAppletElement*'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLAppletElement*'
- en: '*HTMLMapElement*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLMapElement*'
- en: '*HTMLAreaElement*'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLAreaElement*'
- en: '*HTMLScriptElement*'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLScriptElement*'
- en: '*HTMLTableElement*'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLTableElement*'
- en: '*HTMLTableCaptionElement*'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLTableCaptionElement*'
- en: '*HTMLTableColElement*'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLTableColElement*'
- en: '*HTMLTableSectionElement*'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLTableSectionElement*'
- en: '*HTMLTableRowElement*'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLTableRowElement*'
- en: '*HTMLTableCellElement*'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLTableCellElement*'
- en: '*HTMLFrameSetElement*'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLFrameSetElement*'
- en: '*HTMLFrameElement*'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLFrameElement*'
- en: '*HTMLIFrameElement*'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTMLIFrameElement*'
- en: Keep in mind each *HTML*Element* above inherits properties and methods from
    *HTMLElement*, *Element*, *Node*, and *Object*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，上述每个 *HTML*Element* 都继承自 *HTMLElement*、*Element*、*Node* 和 *Object* 的属性和方法。
- en: 3.2 *HTML*Element* object properties and methods (including inherited)
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2 *HTML*Element* 对象的属性和方法（包括继承的）
- en: To get accurate information pertaining to the available properties and methods
    on an *HTML*Element* node its best to ignore the specification and to ask the
    browser what is available. Examine the arrays created in the code below detailing
    the properties and methods available from  HTML  element nodes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取关于 *HTML*Element* 节点可用属性和方法的准确信息，最好忽略规范，并询问浏览器有哪些可用。查看下面代码中创建的数组，详细说明了来自
    HTML 元素节点的属性和方法。
- en: 'live code: [http://jsfiddle.net/domenlightenment/vZUHw](http://jsfiddle.net/domenlightenment/vZUHw)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 内联代码：[http://jsfiddle.net/domenlightenment/vZUHw](http://jsfiddle.net/domenlightenment/vZUHw)
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The available properties are many even if the inherited properties were not
    considered. Below I've hand pick a list of note worthy properties and methods
    (inherited as well) for the context of this chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 即使不考虑继承的属性，可用的属性也很多。下面我手工挑选了一些值得注意的属性和方法列表（包括继承的）以供本章节的上下文参考。
- en: '*createElement()*'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*createElement()*'
- en: '*tagName*'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*tagName*'
- en: '*children*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*children*'
- en: '*getAttribute()*'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*getAttribute()*'
- en: '*setAttribute()*'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*setAttribute()*'
- en: '*hasAttribute()*'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*hasAttribute()*'
- en: '*removeAttribute()*'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*removeAttribute()*'
- en: '*classList()*'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*classList()*'
- en: '*dataset*'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*dataset*'
- en: '*attributes*'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*attributes*'
- en: For a complete list check out the MDN documentation which covers the [general
    properties and methods](https://developer.mozilla.org/en/DOM/element) available
    to most HTML elements.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整列表，请查阅 MDN 文档，其中涵盖了大多数 HTML 元素可用的 [一般属性和方法](https://developer.mozilla.org/en/DOM/element)。
- en: 3.3 Creating Elements
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3 创建元素
- en: '*Element* nodes are instantiated for us when a browser interputs an HTML document
    and a corresponding DOM is built based on the contents of the document. After
    this fact, its also possible to programaticlly create *Element* nodes using *createElement()*.
    In the code below I create a *<textarea>* element node and then inject that node
    into the live DOM tree.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器解释 HTML 文档并基于文档内容构建相应的 DOM 时，*Element* 节点会被实例化。在此之后，也可以使用 *createElement()*
    来编程创建 *Element* 节点。在下面的代码中，我创建了一个 *<textarea>* 元素节点，然后将该节点注入到实时 DOM 树中。
- en: 'live code: [http://jsfiddle.net/domenlightenment/d3Yvv](http://jsfiddle.net/domenlightenment/d3Yvv)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/d3Yvv](http://jsfiddle.net/domenlightenment/d3Yvv)'
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The value passed to the *createElement()* method is a string that specifices
    the type of element (aka *[tagName](http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-104682815)*)
    to be created.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 *createElement()* 方法的值是一个字符串，指定要创建的元素类型（也称为 *[tagName](http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-104682815)*）。
- en: Notes
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This value passed to createElement is changed to a lower-case string before
    the element is created.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 createElement 的值在创建元素之前会被更改为小写字符串。
- en: 3.4 Get the tag name of an element
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4 获取元素的标签名
- en: Using the *tagName* property we can access the name of an element. The *tagName*
    property returns the same value that using *nodeName* would return. Both return
    the value in uppercase regardless of the case in the source HTML document.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *tagName* 属性可以访问元素的名称。*tagName* 属性返回与使用 *nodeName* 返回的值相同。无论源 HTML 文档中的大小写如何，两者都返回大写值。
- en: Below we get the name of an *<a>* element in the DOM.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下面我们获取 DOM 中 *<a>* 元素的名称。
- en: 'live code: [http://jsfiddle.net/domenlightenment/YJb3W](http://jsfiddle.net/domenlightenment/YJb3W)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/YJb3W](http://jsfiddle.net/domenlightenment/YJb3W)'
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 3.5 Getting a list/collection of element attributes and values
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.5 获取元素属性和值的列表/集合
- en: Using the *attributes* property (inherited by element nodes from *Node*) we
    can get a collection of the *[Attr](http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-637646024)*
    nodes that an element currently has defined. The list returned is a *[NameNodeMap](https://developer.mozilla.org/en/DOM/NamedNodeMap)*.
    Below I loop over the attributes collection exposing each *Attr* node object contained
    in the collection.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *attributes* 属性（从 *Node* 继承给元素节点）可以获取元素当前定义的 *[Attr](http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-637646024)*
    节点的集合。返回的列表是一个 *[NameNodeMap](https://developer.mozilla.org/en/DOM/NamedNodeMap)*。下面我循环遍历属性集合，暴露集合中包含的每个
    *Attr* 节点对象。
- en: 'live code: [http://jsfiddle.net/domenlightenment/9gVQf](http://jsfiddle.net/domenlightenment/9gVQf)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/9gVQf](http://jsfiddle.net/domenlightenment/9gVQf)'
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notes
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The array returned from accessing the attributes property should be consider
    live. Meaning that its contents can be changed at anytime.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从访问 attributes 属性返回的数组应该被视为活动的。这意味着其内容随时可以更改。
- en: The array that is returned inherits from the *NameNodeMap* which provides methods
    to operate on the array such as *getNamtedItem()*, *setNamedItem()*, and *removeNamedItem()*.
    Operating on *attributes* with these methods should be secondary to using *getAttribute()*,
    *setAttribute()*, *hasAttribute()*, *removeAttribute()*. Its this authors opinion
    that dealing with [Attr](http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-637646024)
    nodes is messy. The only merit in using the *attributes* is found only in its
    funcitonaly for returning a list of live attributes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的数组继承自 *NameNodeMap*，提供了一些操作数组的方法，如 *getNamtedItem()*、*setNamedItem()* 和 *removeNamedItem()*。使用这些方法操作
    *attributes* 应该次于使用 *getAttribute()*、*setAttribute()*、*hasAttribute()*、*removeAttribute()*。作者认为处理
    [Attr](http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-637646024) 节点很混乱。使用
    *attributes* 的唯一优点在于其功能性，可以返回一个活动属性列表。
- en: The *attributes* property is an array like collection and has a read only *length*
    property.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*attributes* 属性是一个类似数组的集合，具有只读的 *length* 属性。'
- en: Boolean attributres (e.g. *<option selected>foo</option>*) show up in the *attributes*
    list but of course have no value unless you provide one (e.g. *<option selected="selected">foo</option>*).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔属性（例如 *<option selected>foo</option>*）会显示在 *attributes* 列表中，但除非提供值（例如 *<option
    selected="selected">foo</option>*），否则没有值。
- en: 3.6 Getting, Setting, & Removing an element's attribute value
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.6 获取、设置和删除元素的属性值
- en: The most consistent way to get, set, or remove an elements [attribute](http://www.whatwg.org/specs/web-apps/current-work/#attributes-1)
    value is to use the *getAttribute(), setAttribute(),* and *removeAttribute()*
    method. In the code below I demonstrate each of these methods for managing element
    attributes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 获取、设置或删除元素 [属性](http://www.whatwg.org/specs/web-apps/current-work/#attributes-1)
    值的最一致的方式是使用 *getAttribute()*, *setAttribute()* 和 *removeAttribute()* 方法。在下面的代码中，我演示了管理元素属性的每种方法。
- en: 'live code: [http://jsfiddle.net/domenlightenment/wp7rq](http://jsfiddle.net/domenlightenment/wp7rq)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/wp7rq](http://jsfiddle.net/domenlightenment/wp7rq)
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notes
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: Use *removeAttribute()* instead of setting the attribute value to *null* or
    *''* using *setAttribute()*
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *removeAttribute()* 而不是使用 *setAttribute()* 将属性值设置为 *null* 或 *''*
- en: Some element attributes are available from element nodes as object properties
    (i.e. *document.body.id* or *document.body.className*). This author recommends
    avoiding these properties and using the remove, set, and get attribute methods.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一些元素属性可以作为对象属性从元素节点获取（即 *document.body.id* 或 *document.body.className*）。作者建议避免使用这些属性，而是使用
    remove、set 和 get 属性方法。
- en: 3.7 Verifying an element has a specific attribute
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.7 验证元素是否具有特定属性
- en: The best way to determine (i.e. boolean) if an element has an attribute is to
    use the *hasAttribute()*  method. Below I verify if the *<a>* has a *href*, *title*,
    *style*, *data-foo*, *class*, and *foo* attribute.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 确定（即布尔）元素是否具有属性的最佳方法是使用 *hasAttribute()* 方法。下面我验证 *<a>* 是否具有 *href*、*title*、*style*、*data-foo*、*class*
    和 *foo* 属性。
- en: 'live code: [http://jsfiddle.net/domenlightenment/hbCCE](http://jsfiddle.net/domenlightenment/hbCCE)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/hbCCE](http://jsfiddle.net/domenlightenment/hbCCE)
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This method will return *true* if the element contains the attribute even if
    the attribute has no value. For example using *hasAttribute()* we can get a boolean
    response for [boolean attributes](http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.3.4.2).
    In the code example below we check to see if a checkbox is checked.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 即使属性没有值，该方法也会返回 *true*。例如，使用 *hasAttribute()* 我们可以为 [布尔属性](http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.3.4.2)
    得到一个布尔值。在下面的代码示例中，我们检查复选框是否被选中。
- en: 'live code: [http://jsfiddle.net/domenlightenment/tb6Ja](http://jsfiddle.net/domenlightenment/tb6Ja)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/tb6Ja](http://jsfiddle.net/domenlightenment/tb6Ja)
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 3.8 Getting a list of class attribute values
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.8 获取类属性值列表
- en: Using the *classList* property available on element nodes we can access a list
    (i.e. *[DOMTokenList](http://www.w3.org/TR/dom/#interface-domtokenlist)*) of class
    attribute values that is much easier to work with than a space-delimited string
    value returned from the *className* property. In the code below I contrast the
    use of *classList* with *className*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用元素节点上可用的 *classList* 属性，我们可以访问一个类属性值列表（即 *[DOMTokenList](http://www.w3.org/TR/dom/#interface-domtokenlist)*），这比从
    *className* 属性返回的空格分隔的字符串值更容易处理。在下面的代码中，我对比了 *classList* 与 *className* 的使用。
- en: 'live code: [http://jsfiddle.net/domenlightenment/DLJEA](http://jsfiddle.net/domenlightenment/DLJEA)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/DLJEA](http://jsfiddle.net/domenlightenment/DLJEA)
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notes
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: Given the *classList* is an array like collection it has a read only *length*
    property.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于 *classList* 是类似数组的集合，它有一个只读的 *length* 属性。
- en: '*classList* is read-only but can be modifyied using the *add()*, *remove()*,
    *contains()*, and *toggle()* methods'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*classList* 是只读的，但可以使用 *add()*、*remove()*、*contains()* 和 *toggle()* 方法进行修改'
- en: IE9 does not support *classList*. Support will land in [IE10](http://blogs.msdn.com/b/ie/archive/2012/05/31/windows-release-preview-the-sixth-ie10-platform-preview.aspx).
    [Several](https://github.com/eligrey/classList.js) [polyfills](https://gist.github.com/1381839)
    are avaliable.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: IE9 不支持 *classList*。支持将在 [IE10](http://blogs.msdn.com/b/ie/archive/2012/05/31/windows-release-preview-the-sixth-ie10-platform-preview.aspx)
    中出现。有 [几种](https://github.com/eligrey/classList.js) [polyfills](https://gist.github.com/1381839)
    可用。
- en: 3.9 Adding & removing sub-values to a class attribute
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.9 添加和删除类属性的子值
- en: Using the *classList.add()* and *classList.remove()* methods its extremely simple
    to edit the value of a class attribute. In the code below I demonstrated adding
    and removing class values.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *classList.add()* 和 *classList.remove()* 方法非常简单地编辑类属性的值。在下面的代码中，我演示了添加和删除类值。
- en: 'live code: [http://jsfiddle.net/domenlightenment/YVaUU](http://jsfiddle.net/domenlightenment/YVaUU)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/YVaUU](http://jsfiddle.net/domenlightenment/YVaUU)
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 3.10 Toggling a class attribute value
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.10 切换类属性值
- en: Using the *classList.toggle()* method we can toggle a sub-value of the class
    attribute. This allows us to add a value if its missing or remove a value if its
    already added. In the code below I toggle the *'visible'* value and the *'grow'*
    value. Which essentially means I remove *'visible'* and add *'grow'* to the class
    attribute value.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*classList.toggle()*方法，我们可以切换类属性的子值。这使我们能够在缺失时添加一个值，或者在已经添加时删除一个值。在下面的代码中，我切换了*'visible'*值和*'grow'*值。这实质上意味着我从类属性值中删除*'visible'*并添加*'grow'*。
- en: 'live code: [http://jsfiddle.net/domenlightenment/uFp6J](http://jsfiddle.net/domenlightenment/uFp6J)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/uFp6J](http://jsfiddle.net/domenlightenment/uFp6J)'
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 3.11 Determining if a class attribute value contains a specific value
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.11 确定类属性值是否包含特定值
- en: Using the *classList.contains()* method its possible to determine (boolean)
    if a class attribute value contains a specific sub-value. In the code below we
    test weather the *<div>* class attribute contains a sub-value of *brown*.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*classList.contains()*方法，可以确定（布尔值）类属性值是否包含特定的子值。在下面的代码中，我们测试*<div>*类属性是否包含*brown*的子值。
- en: 'live code: [http://jsfiddle.net/domenlightenment/njyaP](http://jsfiddle.net/domenlightenment/njyaP)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/njyaP](http://jsfiddle.net/domenlightenment/njyaP)'
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 3.12 Getting & Setting data-* attributes
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.12 获取和设置数据属性*
- en: The *dataset* property of a element node provides an object containing all of
    the attributes of an element that starts with data-*. Because its a simply a JavaScript
    object we can manipulate *dataset* and have the element in the DOM reflect those
    changes
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 元素节点的*dataset*属性提供了一个包含以data-*开头的所有元素属性的对象。因为它只是一个JavaScript对象，我们可以操作*dataset*，并使DOM中的元素反映这些更改。
- en: 'live code: [http://jsfiddle.net/domenlightenment/ystgj](http://jsfiddle.net/domenlightenment/ystgj)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 'live code: [http://jsfiddle.net/domenlightenment/ystgj](http://jsfiddle.net/domenlightenment/ystgj)'
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*### Notes'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*### 注意事项'
- en: '*dataset* contains camel case versions of data attributes. Meaning *data-foo-foo*
    will be listed as the property *fooFoo* in the dataset *DOMStringMap* object.
    The*-* is replaced by camel casing.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*dataset*包含数据属性的驼峰命名版本。这意味着*data-foo-foo*将在数据集*DOMStringMap*对象的属性*fooFoo*中列出。*-*被驼峰命名替换。'
- en: Removing a data-* attribute from the DOM is as simple using the *delete* operator
    on a property of the *datset* (e.g. *delete dataset.fooFoo*)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在DOM上使用*delete*运算符来删除数据-*属性是非常简单的（例如*delete dataset.fooFoo*）
- en: '*dataset* is not supported in IE9\. A [polyfill](https://github.com/remy/polyfills/blob/master/dataset.js)
    is avaliable. However, you can always just use getAttribute(''data-foo''), removeAttribute(''data-foo''),
    setAttribute(''data-foo''), hasAttribute(''data-foo'').*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*dataset*在IE9中不受支持。有一个[polyfill](https://github.com/remy/polyfills/blob/master/dataset.js)可用。然而，您总是可以使用getAttribute(''data-foo'')，removeAttribute(''data-foo'')，setAttribute(''data-foo'')，hasAttribute(''data-foo'')。'
