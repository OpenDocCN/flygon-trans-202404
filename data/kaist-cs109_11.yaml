- en: Exceptions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常
- en: 'If you are like me, you have seen many times how your programs terminate with
    an error or exception message. Here are some examples of exception messages:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你和我一样，你会经常看到你的程序以错误或异常消息终止。以下是一些异常消息的示例：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Errors and exceptions
  id: totrans-3
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 错误和异常
- en: Errors such as OutOfMemoryError indicate a serious failure, where continuing
    the program makes no sense.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如OutOfMemoryError之类的错误表示严重的失败，继续程序毫无意义。
- en: 'Other exceptions, however, merely indicate an unexpected or abnormal condition
    in a program. For instance, a mistake in the input data of a program could cause
    an exception. Such mistakes can be handled: We say that the exception is handled
    or caught.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，其他异常仅仅表示程序中的一个意外或异常条件。例如，程序输入数据中的错误可能会导致异常。这些错误可以被处理：我们说异常被处理或捕获。
- en: For instance, a NumberFormatException might indicate that the user entered an
    incorrect number, and the correct response would be to print an error message
    and ask for new input.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，NumberFormatException可能表示用户输入了一个不正确的数字，正确的响应是打印一个错误消息并要求新的输入。
- en: A FileNotFoundException means that the file we tried to open does not exist.
    Depending on the situation, the correct response could be to try a different file
    name, to ask the user for a different file name, or simply to skip reading the
    file.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: FileNotFoundException意味着我们尝试打开的文件不存在。根据情况，正确的响应可能是尝试不同的文件名，要求用户提供不同的文件名，或者简单地跳过读取文件。
- en: Catching exceptions
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 捕获异常
- en: 'The following code asks the user for a number. The function readString returns
    a string, so we have to convert that to an integer using the toInt() method. If
    the string is not a number, such as "abc" or "123ab", then the toInt() method
    throws an exception. We can catch the exception by enclosing the critical part
    in a try block, and adding a catch block to handle the exceptions we are interested
    in ([catch1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/16-exceptions/catch1.kts)):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码要求用户输入一个数字。readString函数返回一个字符串，因此我们必须使用toInt()方法将其转换为整数。如果字符串不是一个数字，比如"abc"或"123ab"，那么toInt()方法会抛出一个异常。我们可以通过将关键部分放在try块中，并添加一个catch块来处理我们感兴趣的异常来捕获异常（[catch1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/16-exceptions/catch1.kts)）：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the try block executes normally, then the catch clauses are skipped. But
    if somewhere inside the try block (including in any method called, directly or
    indirectly) an exception is thrown, then execution of the try block stops immediately,
    and continues in the first case of the catch clause that matches the exception.
    Here, "matches" means that the exception is the same type as the exception type
    listed in the case.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果try块正常执行，则catch子句将被跳过。但是，如果在try块内的某个地方（包括直接或间接调用的任何方法）抛出异常，则try块的执行立即停止，并在第一个与异常匹配的catch子句中继续执行。这里，“匹配”意味着异常与case中列出的异常类型相同。
- en: The code within a catch case is called an exception handler.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: catch块中的代码称为异常处理程序。
- en: 'In our example above, if the string str does not represent an integer (for
    instance, if it is "abc"), then str.toInt throws the exception NumberFormatException.
    The try block is terminated (and in particular, no value is assigned to x), and
    execution continues in the catch clause for NumberFormatException. Here are some
    example runs:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上面的示例中，如果字符串str不代表一个整数（例如，如果它是"abc"），那么str.toInt会抛出NumberFormatException异常。try块被终止（特别是，没有值被赋给x），并且执行继续在NumberFormatException的catch子句中。以下是一些示例运行：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Exceptions versus error codes
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 异常与错误代码
- en: Old programming languages like C do not have exceptions, and so all errors or
    unusual conditions need to be handled by error codes. In C++, error codes are
    also still widely used, for instance for compatibility with C.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 老的编程语言如C没有异常，因此所有错误或异常情况都需要通过错误代码来处理。在C++中，错误代码也仍然广泛使用，例如为了与C兼容。
- en: 'A simple and elegant method like str.toInt() is impossible without exceptions.
    We would have to return two results: one Boolean value to indicate whether the
    conversion was successful, and the Int value itself.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 像`str.toInt()`这样简单而优雅的方法在没有异常的情况下是不可能的。我们将不得不返回两个结果：一个布尔值来指示转换是否成功，以及Int值本身。
- en: 'So exceptions allow us to concentrate on the essential meaning of str.toInt():
    it takes a string, and returns a number. But the real power of exceptions only
    appears in the next section…'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，异常使我们能够集中精力于`str.toInt()`的基本含义：它接受一个字符串，并返回一个数字。但是异常的真正威力只在下一节中显现…
- en: Exceptions deep deep down
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 深入了解异常
- en: The nice thing about exceptions is that you can also catch exceptions that were
    thrown inside functions called in the try block.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 异常的好处是你也可以捕获在try块中调用的函数内部抛出的异常。
- en: 'Going back to our number conversion example, here is version where we convert
    the string in a separate function ([catch2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/16-exceptions/catch2.kts)):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的数字转换示例，这里是一个在单独函数中转换字符串的版本（[catch2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/16-exceptions/catch2.kts)）：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The function test(s) converts the string to a double, but then rounds it off
    to two decimal places and returns an integer.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 函数test(s)将字符串转换为双精度浮点数，然后将其四舍五入到两位小数并返回整数。
- en: 'When a conversion error occurs, this happens inside test(s), but we can still
    catch this in the show(s) function:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生转换错误时，这发生在test(s)内部，但我们仍然可以在show(s)函数中捕获这个错误：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When an exception occurs (we say that an exception is thrown), then the normal
    flow of execution is then interrupted, and continues at the nearest (innermost,
    most recent) catch block where this type of exception is caught (that is, there
    is an exception handler of the right type).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当异常发生时（我们说异常被抛出），正常的执行流程会被中断，然后在最近（最内层，最近的）捕获块继续，其中捕获了这种类型的异常（也就是说，有一个正确类型的异常处理程序）。
- en: 'Let''s look at this in more detail and consider the following program ([except1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/16-exceptions/except1.kts)):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下，并考虑以下程序（[except1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/16-exceptions/except1.kts)）：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is a run:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个运行示例：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For input value "25", we see beginning and end of try block and the functions
    f and g. For input value "abc", the toInt method throws an exception, so f is
    not called. For input value "0", the division inside function g throws an ArithmeticError.
    As you see, execution continues immediately in the exception handler, without
    finishing functions g, f, or the try-block.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于输入值"25"，我们看到try块的开始和结束以及函数f和g。对于输入值"abc"，toInt方法抛出异常，因此不调用f。对于输入值"0"，函数g内部的除法抛出ArithmeticError。正如你所看到的，执行立即在异常处理程序中继续，而不是完成函数g、f或try块。
- en: Throwing exceptions
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 抛出异常
- en: 'So far we have only caught exceptions thrown inside some library function.
    But you can just as well throw exceptions yourself. For instance, let''s assume
    that our function g(n) above should only handle non-negative numbers. We can ensure
    this by throwing an IllegalArgumentException if the argument is negative. The
    whole script now looks like this ([except2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/16-exceptions/except2.kts)):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只捕获了在某些库函数内部抛出的异常。但是你也可以自己抛出异常。例如，假设我们的函数g(n)应该只处理非负数。如果参数为负数，我们可以通过抛出IllegalArgumentException来确保这一点。整个脚本现在看起来像这样（[except2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/16-exceptions/except2.kts)）：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that exceptions are objects, and are created like any other object, by
    calling their constructor.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，异常是对象，并且像任何其他对象一样通过调用它们的构造函数创建。
- en: 'Again, we run it with different inputs:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们用不同的输入运行它：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Exceptions are often used to detect errors in the input data.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 异常通常用于检测输入数据中的错误。
- en: We can catch the exception at a suitable place in the program and print an error
    message, or handle the problem in some other way.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在程序中适当的位置捕获异常并打印错误消息，或以其他方式处理问题。
- en: When you are debugging a program, you may be confused where certain exceptions
    come from. In such a case it can be useful to use the method printStackTrace()
    of the exception object. It prints out the chain of methods that lead to the exception
    being thrown.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调试程序时，可能会困惑于某些异常的来源。在这种情况下，使用异常对象的printStackTrace()方法可能很有用。它会打印出导致异常抛出的方法链。
- en: 'If we change our main function as follows ([except3.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/16-exceptions/except3.kts)):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将主函数更改如下（[except3.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/16-exceptions/except3.kts)）：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'then we can see this in action:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '那么我们可以看到这个过程： '
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can see here that the IllegalArgumentException was thrown in function g (in
    line 16 of the script), which was called by function f, which was called from
    the main function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到IllegalArgumentException是在函数g（脚本的第16行）中抛出的，该函数被函数f调用，后者又被主函数调用。
- en: Assertions
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 断言
- en: 'Assertions are conditions in the program that are tested during the execution.
    If the condition is true, nothing particular happens. If the condition is false,
    however, an AssertionError exception is thrown. The statement:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 断言是在程序执行过程中测试的条件。如果条件为真，则不会发生任何特殊情况。但是，如果条件为假，则会抛出 AssertionError 异常。该语句：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: throws an AssertionError if condition is false.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果条件为假，则抛出 AssertionError。
- en: You can also include a message with the assertion.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在断言中包含一条消息。
- en: The purpose of an assertion is to detect errors in your program. (Compare this
    with the exceptions use above, whose purpose is to detect errors in the input
    data.)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 断言的目的是检测程序中的错误。（与上面使用异常的目的相比，异常的目的是检测输入数据中的错误。）
- en: 'Consider the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If the code A is correct, then the string s computed by A cannot be empty. We
    verify that this is indeed true, that is that s is not empty, using an assertion.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码 A 正确，则由 A 计算得到的字符串 s 不能是空的。我们通过断言验证这一点确实是真的，即 s 不为空。
- en: 'The purpose of this assertion is to protect code B. Without the assertion,
    the following could happen: There is a mistake in code A, and therefore s is empty.
    This causes some strange crash in code B, and so we start debugging code B. With
    the assertion, it is immediately clear that the problem is in code A.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此断言的目的是保护代码 B。如果没有断言，可能会发生以下情况：代码 A 中存在错误，因此 s 为空。这会导致代码 B 中发生一些奇怪的崩溃，因此我们开始调试代码
    B。有了断言，立即清楚问题出在代码 A。
- en: So the purpose of assertions is to protect pieces of code from each other, and
    to isolate problems.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，断言的目的是保护代码片段免受彼此的影响，并隔离问题。
- en: Require
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Require
- en: The require(condition) statement is a special form of assertion. It works exactly
    like assert, but throws an IllegalArgumentException if the condition is false.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: require(condition) 语句是断言的一种特殊形式。它的工作方式与 assert 完全相同，但如果条件为假，则会抛出 IllegalArgumentException。
- en: 'This is useful when you need an assertion to test if the arguments of a method
    are correct: in this situtation you should use require(condition) instead of assert(condition).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要一个断言来测试方法的参数是否正确时很有用：在这种情况下，您应该使用 require(condition) 而不是 assert(condition)。
- en: The purpose of require is to protect your function from being called with illegal
    arguments. Without it, you might spend a long time trying to debug your function,
    when in reality a problem is caused by incorrect argument values given to the
    function.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: require 的目的是保护您的函数免受使用非法参数调用的影响。如果没有它，您可能会花很长时间尝试调试函数，而实际上问题是由于给函数传递的参数值不正确引起的。
- en: Reading and writing files
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 读取和写入文件
- en: When reading or writing files, many things can go wrong. The file might not
    exist, we might not be allowed to write to it, the hard disk may be full, or someone
    might eject the CD-ROM we are reading from. This means that any serious code the
    does file input/output needs to worry about catching exceptions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取或写入文件时，很多问题可能会出现。文件可能不存在，我们可能没有写入权限，硬盘可能已满，或者有人可能弹出我们正在读取的光盘。这意味着任何进行文件输入/输出的严肃代码都需要考虑捕获异常。
- en: 'The following simple script prints all lines in a text file together with the
    length of each line. If the file doesn''t exist or if you are not allowed to read
    the file, an exception will be thrown. You can catch the exception, print an error
    message, and continue, instead of letting the program crash ([read1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/16-exceptions/read1.kts)):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下简单的脚本会打印文本文件中的所有行以及每行的长度。如果文件不存在或者您没有读取文件的权限，将会抛出异常。您可以捕获异常，打印错误消息，并继续执行，而不是让程序崩溃（[read1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/16-exceptions/read1.kts)）：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If the forEachLine method fails to open the file, it will throw a FileNotFoundException.
    The loop is not executed; execution jumps directly to the exception handler that
    prints a message to the user.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 forEachLine 方法无法打开文件，则会抛出 FileNotFoundException。循环不会被执行；执行直接跳转到打印消息给用户的异常处理程序。
- en: FileNotFoundException is a special case of IOException, so the exception matches
    both catch clauses. However, only one catch clause is executed–the first one that
    matches. The second catch clause would execute if the first were not present.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: FileNotFoundException 是 IOException 的一种特殊情况，因此异常符合两个 catch 子句。但是，只有一个 catch
    子句会被执行 - 第一个匹配的子句。如果第一个不存在，则会执行第二个 catch 子句。
- en: It could happen that we can open the file, but the forAllLines method still
    throws an exception (for instance, because the disk is faulty). This typically
    generates some sort of IOException. This causes the second catch clause to execute.
    Exception handlers are often used to recover from errors and clean up loose ends
    like open files.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可能发生的情况是我们可以打开文件，但是`forAllLines`方法仍然抛出异常（例如，因为磁盘故障）。这通常会生成某种类型的`IOException`。这将导致第二个捕获子句执行。异常处理程序通常用于从错误中恢复并清理类似打开文件的松散端。
- en: Note that you don't need a catch clause for every exception that can occur.
    You can catch some exceptions and let others propagate.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，并非每个可能发生的异常都需要一个捕获子句。你可以捕获一些异常，让其他异常传播。
