- en: MVC basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC 基础知识
- en: MVC basics
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC 基础知识
- en: In this chapter, you'll explore the MVC system in ASP.NET Core. **MVC** (Model-View-Controller)
    is a pattern for building web applications that's used in almost every web framework
    (Ruby on Rails and Express are popular examples), as well as frontend JavaScript
    frameworks like Angular. Mobile apps on iOS and Android use a variation of MVC
    as well.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将探索 ASP.NET Core 中的 MVC 系统。**MVC**（模型-视图-控制器）是一种用于构建 Web 应用程序的模式，几乎在每个
    Web 框架中都有使用（Ruby on Rails 和 Express 是流行的示例），以及前端 JavaScript 框架（如 Angular）。iOS
    和 Android 上的移动应用程序也使用 MVC 的变体。
- en: 'As the name suggests, MVC has three components: models, views, and controllers.
    **Controllers** handle incoming requests from a client or web browser and make
    decisions about what code to run. **Views** are templates (usually HTML plus some
    templating language like Handlebars, Pug, or Razor) that get data added to them
    and then are displayed to the user. **Models** hold the data that is added to
    views, or data that is entered by the user.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，MVC 有三个组件：模型、视图和控制器。**控制器**处理来自客户端或 Web 浏览器的传入请求，并决定运行哪些代码。**视图**是模板（通常是
    HTML 加上一些模板语言，如 Handlebars、Pug 或 Razor），其中添加了数据，然后显示给用户。**模型**保存添加到视图中的数据，或用户输入的数据。
- en: 'A common pattern for MVC code is:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: MVC 代码的常见模式是：
- en: The controller receives a request and looks up some information in a database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器接收请求并在数据库中查找一些信息
- en: The controller creates a model with the information and attaches it to a view
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器使用信息创建模型，并将其附加到视图
- en: The view is rendered and displayed in the user's browser
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图被呈现并显示在用户的浏览器中
- en: The user clicks a button or submits a form, which sends a new request to the
    controller
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户点击按钮或提交表单，这将发送一个新的请求给控制器
- en: If you've worked with MVC in other languages, you'll feel right at home in ASP.NET
    Core MVC. If you're new to MVC, this chapter will teach you the basics and will
    help get you started.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在其他语言中使用过 MVC，那么在 ASP.NET Core MVC 中你会感到非常亲切。如果你对 MVC 还不熟悉，本章将教你基础知识，并帮助你入门。
- en: What you'll build
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你将构建什么
- en: The "Hello World" exercise of MVC is building a to-do list application. It's
    a great project since it's small and simple in scope, but it touches each part
    of MVC and covers many of the concepts you'd use in a larger application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MVC 的“Hello World”练习是构建一个待办事项列表应用程序。这是一个很棒的项目，因为它的规模小而简单，但涵盖了 MVC 的每个部分，并涵盖了你在更大的应用程序中可能使用的许多概念。
- en: In this book, you'll build a to-do app that lets the user add items to their
    to-do list and check them off once complete. You'll build the server (the "backend")
    using ASP.NET Core, C#, and the MVC pattern. You'll use HTML, CSS, and JavaScript
    in the views (also called the "frontend").
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你将构建一个待办事项应用程序，允许用户将项目添加到他们的待办事项列表中，并在完成后将其标记为已完成。你将使用 ASP.NET Core、C#
    和 MVC 模式构建服务器（后端）。你将在视图（也称为前端）中使用 HTML、CSS 和 JavaScript。
- en: If you haven't already created a new ASP.NET Core project using `dotnet new
    mvc`, follow the steps in the previous chapter. You should be able to build and
    run the project and see the default welcome screen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有使用 `dotnet new mvc` 创建一个新的 ASP.NET Core 项目，请按照前一章的步骤操作。你应该能够构建并运行项目，并看到默认的欢迎屏幕。
- en: Create a controller
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个控制器
- en: Create a controller
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建控制器
- en: There are already a few controllers in the project's Controllers folder, including
    the `HomeController` that renders the default welcome screen you see when you
    visit `http://localhost:5000`. You can ignore these controllers for now.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的 Controllers 文件夹中已经有几个控制器，包括 `HomeController`，该控制器在访问 `http://localhost:5000`
    时呈现默认的欢迎屏幕。现在你可以忽略这些控制器。
- en: 'Create a new controller for the to-do list functionality, called `TodoController`,
    and add the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为待办事项列表功能创建一个名为 `TodoController` 的新控制器，并添加以下代码：
- en: '**`Controllers/TodoController.cs`**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Controllers/TodoController.cs`**'
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Routes that are handled by controllers are called **actions**, and are represented
    by methods in the controller class. For example, the `HomeController` includes
    three action methods (`Index`, `About`, and `Contact`) which are mapped by ASP.NET
    Core to these route URLs:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由控制器处理的路由称为**操作**，并由控制器类中的方法表示。例如，`HomeController` 包括三个操作方法（`Index`、`About`
    和 `Contact`），这些方法由 ASP.NET Core 映射到以下路由 URL：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are a number of conventions (common patterns) used by ASP.NET Core, such
    as the pattern that `FooController` becomes `/Foo`, and the `Index` action name
    can be left out of the URL. You can customize this behavior if you'd like, but
    for now, we'll stick to the default conventions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 使用了一些约定（常见模式），比如`FooController`的模式变成了`/Foo`，并且`Index`动作名称可以省略 URL。你可以根据需要自定义此行为，但目前我们将遵循默认约定。
- en: 'Add a new action called `Index` to the `TodoController`, replacing the `//
    Actions go here` comment:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 向`TodoController`添加一个名为`Index`的新动作，替换掉`// Actions go here`的注释：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Action methods can return views, JSON data, or HTTP status codes like `200 OK`
    or `404 Not Found`. The `IActionResult` return type gives you the flexibility
    to return any of these from the action.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 动作方法可以返回视图、JSON 数据，或者 HTTP 状态码，比如`200 OK`或`404 Not Found`。`IActionResult`返回类型使你能够从动作中返回其中任何一个。
- en: It's a best practice to keep controllers as lightweight as possible. In this
    case, the controller should only be responsible for getting the to-do items from
    the database, putting those items into a model the view can understand, and sending
    the view back to the user's browser.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能将控制器保持轻量级是一种最佳实践。在这种情况下，控制器应该只负责从数据库中获取待办事项，将这些项目放入视图可以理解的模型中，并将视图发送回用户的浏览器。
- en: Before you can write the rest of the controller code, you need to create a model
    and a view.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在你能够编写控制器代码的其余部分之前，你需要创建一个模型和一个视图。
- en: Create models
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: Create models
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模型
- en: 'There are two separate model classes that need to be created: a model that
    represents a to-do item stored in the database (sometimes called an **entity**),
    and the model that will be combined with a view (the **MV** in MVC) and sent back
    to the user''s browser. Because both of them can be referred to as "models", I''ll
    refer to the latter as a *view model*.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 需要创建两个单独的模型类：一个模型表示存储在数据库中的待办事项（有时称为**实体**），另一个模型将与视图结合（MVC 中的**V**），并发送回用户的浏览器。因为两者都可以称为“模型”，所以我将后者称为*视图模型*。
- en: 'First, create a class called `TodoItem` in the Models directory:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 Models 目录中创建一个名为`TodoItem`的类：
- en: '**`Models/TodoItem.cs`**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Models/TodoItem.cs`**'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This class defines what the database will need to store for each to-do item:
    an ID, a title or name, whether the item is complete, and what the due date is.
    Each line defines a property of the class:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此类定义了数据库需要为每个待办事项存储的内容：一个 ID、一个标题或名称、项目是否完成，以及截止日期是什么。每一行定义了类的一个属性：
- en: The **Id** property is a guid, or a **g**lobally **u**nique **id**entifier.
    Guids (or GUIDs) are long strings of letters and numbers, like `43ec09f2-7f70-4f4b-9559-65011d5781bb`.
    Because guids are random and are extremely unlikely to be accidentally duplicated,
    they are commonly used as unique IDs. You could also use a number (integer) as
    a database entity ID, but you'd need to configure your database to always increment
    the number when new rows are added to the database. Guids are generated randomly,
    so you don't have to worry about auto-incrementing.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Id**属性是一个全局唯一标识符（guid）。Guids（或GUIDs）是一长串字母和数字，比如`43ec09f2-7f70-4f4b-9559-65011d5781bb`。因为
    guid 是随机生成的，极不可能意外重复，所以它们通常用作唯一标识符。你也可以使用数字（整数）作为数据库实体 ID，但需要配置数据库，以便在向数据库添加新行时始终递增数字。Guids
    是随机生成的，所以你不必担心自动递增。'
- en: The **IsDone** property is a boolean (true/false value). By default, it will
    be `false` for all new items. Later you'll use write code to switch this property
    to `true` when the user clicks the item's checkbox in the view.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已完成**（IsDone）属性是一个布尔值（true/false）。默认情况下，对于所有新项目，它将是`false`。稍后你会编写代码，在用户在视图中点击项目的复选框时，将此属性切换为`true`。'
- en: The **Title** property is a string. This will hold the name or description of
    the to-do item.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题**（Title）属性是一个字符串。这将保存待办事项的名称或描述。'
- en: The **DueAt** property is a `DateTimeOffset`, which is a C# type that stores
    a date/time stamp along with a timezone offset from UTC. Storing the date, time,
    and timezone offset together makes it easy to render dates accurately on systems
    in different timezones.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DueAt**属性是一个`DateTimeOffset`，它是 C# 类型，用于存储带有时区偏移量的日期/时间戳。将日期、时间和时区偏移量一起存储使得在不同时区的系统上准确渲染日期变得很容易。'
- en: Notice the `?` question mark after the `DateTimeOffset` type? That marks the
    DueAt property as *nullable*, or optional. If the `?` wasn't included, every to-do
    item would need to have a due date. The Id and IsDone properties aren't marked
    as nullable, so they are required and will always have a value (or a default value).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`DateTimeOffset`类型后面的`?`问号？那标记了DueAt属性为*可空*或可选。如果不包含`?`，则每个待办事项都需要有到期日期。Id和IsDone属性未标记为可空，因此它们是必需的并且始终具有值（或默认值）。
- en: Strings in C# are always nullable, so there's no need to mark the Title property
    as nullable. C# strings can be null, empty, or contain text.
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: C#中的字符串始终可空，因此不需要将Title属性标记为可空。C#字符串可以为null、空或包含文本。
- en: Each property is followed by `get; set;`, which is a shorthand way of saying
    the property is read/write (or more technically, it has a getter and setter methods).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 每个属性后面跟着`get; set;`，这是一种简写方式，表示属性是可读/可写的（或更确切地说，它具有getter和setter方法）。
- en: At this point, it doesn't matter what the underlying database technology is.
    It could be SQL Server, MySQL, MongoDB, Redis, or something more exotic. This
    model defines what the database row or entry will look like in C# so you don't
    have to worry about the low-level database stuff in your code. This simple style
    of model is sometimes called a "plain old C# object" or POCO.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，底层数据库技术是什么并不重要。它可以是SQL Server，MySQL，MongoDB，Redis或更奇特的东西。该模型定义了在C#中数据库行或条目的外观，因此您无需担心代码中的底层数据库问题。这种简单的模型风格有时称为“普通的C#对象”或POCO。
- en: The view model
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视图模型
- en: Often, the model (entity) you store in the database is similar but not *exactly*
    the same as the model you want to use in MVC (the view model). In this case, the
    `TodoItem` model represents a single item in the database, but the view might
    need to display two, ten, or a hundred to-do items (depending on how badly the
    user is procrastinating).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您存储在数据库中的模型（实体）与您要在MVC中使用的模型（视图模型）相似但不完全相同。在这种情况下，`TodoItem`模型表示数据库中的单个项目，但视图可能需要显示两个，十个或一百个待办事项（取决于用户拖延的程度）。
- en: 'Because of this, the view model should be a separate class that holds an array
    of `TodoItem`s:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，视图模型应该是一个单独的类，其中包含一个`TodoItem`数组：
- en: '**`Models/TodoViewModel.cs`**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Models/TodoViewModel.cs`**'
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`IEnumerable<>` is a fancy C# way of saying that the `Items` property contains
    zero, one, or many `TodoItem`s. (In technical terms, it''s not quite an array,
    but rather an array-like interface for any sequence that can be enumerated or
    iterated over.)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`IEnumerable<>`是C#的一种高级方式，表示`Items`属性包含零个、一个或多个`TodoItem`。（从技术上讲，它不完全是数组，而是任何可以枚举或迭代的序列的类似数组的接口。）'
- en: The `IEnumerable<>` interface exists in the `System.Collections.Generic` namespace,
    so you need a `using System.Collections.Generic` statement at the top of the file.
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`IEnumerable<>`接口存在于`System.Collections.Generic`命名空间中，因此您需要在文件顶部添加一个`using
    System.Collections.Generic`语句。'
- en: Now that you have some models, it's time to create a view that will take a `TodoViewModel`
    and render the right HTML to show the user their to-do list.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一些模型，是时候创建一个视图，它将采用`TodoViewModel`并渲染正确的HTML以向用户显示他们的待办事项列表。
- en: Create a view
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个视图
- en: Create a view
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个视图
- en: Views in ASP.NET Core are built using the Razor templating language, which combines
    HTML and C# code. (If you've written pages using Jade/Pug or Handlebars moustaches
    in JavaScript, ERB in Ruby on Rails, or Thymeleaf in Java, you've already got
    the basic idea.)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core中的视图使用Razor模板语言构建，该语言结合了HTML和C#代码。（如果你曾经使用Jade/Pug或Handlebars Mustaches编写过页面，或者使用Ruby
    on Rails中的ERB，或者Java中的Thymeleaf，你可能已经有了基本的思路。）
- en: Most view code is just HTML, with the occasional C# statement added in to pull
    data out of the view model and turn it into text or HTML. The C# statements are
    prefixed with the `@` symbol.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数视图代码只是HTML，偶尔会添加C#语句以从视图模型中提取数据并将其转换为文本或HTML。C#语句以`@`符号为前缀。
- en: The view rendered by the `Index` action of the `TodoController` needs to take
    the data in the view model (an array of to-do items) and display it as a nice
    table for the user. By convention, views are placed in the `Views` directory,
    in a subdirectory corresponding to the controller name. The file name of the view
    is the name of the action with a `.cshtml` extension.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`TodoController`的`Index`操作呈现的视图需要将视图模型中的数据（待办事项数组）显示为用户的漂亮表格。按照惯例，视图放置在`Views`目录中，子目录对应于控制器名称。视图的文件名是动作的名称，带有`.cshtml`扩展名。'
- en: '**`Views/Todo/Index.cshtml`**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Views/Todo/Index.cshtml`**'
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: At the very top of the file, the `@model` directive tells Razor which model
    to expect this view to be bound to. The model is accessed through the `Model`
    property.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件的最顶部，`@model` 指令告诉 Razor 预期此视图绑定到哪个模型。通过 `Model` 属性访问模型。
- en: Assuming there are any to-do items in `Model.Items`, the `foreach` statement
    will loop over each to-do item and render a table row (`<tr>` element) containing
    the item's name and due date. A checkbox is also rendered that contains the item's
    ID, which you'll use later to mark the item as completed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 `Model.Items` 中有任何待办事项，`foreach` 语句将遍历每个待办事项并渲染一个包含该项目名称和到期日期的表行（`<tr>` 元素）。还渲染了一个复选框，其中包含项目的
    ID，稍后你将使用它来标记项目为已完成。
- en: The layout file
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布局文件
- en: 'You might be wondering where the rest of the HTML is: what about the `<body>`
    tag, or the header and footer of the page? ASP.NET Core uses a layout view that
    defines the base structure that the rest of the views are rendered inside of.
    It''s stored in `Views/Shared/_Layout.cshtml`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道其他 HTML 在哪里：页面的 `<body>` 标签、页眉和页脚呢？ASP.NET Core 使用布局视图定义了其余视图呈现在其中的基本结构。它存储在
    `Views/Shared/_Layout.cshtml` 中。
- en: The default ASP.NET Core template includes Bootstrap and jQuery in this layout
    file, so you can quickly create a web application. Of course, you can use your
    own CSS and JavaScript libraries if you'd like.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 ASP.NET Core 模板在这个布局文件中包含了 Bootstrap 和 jQuery，所以你可以快速创建一个 Web 应用程序。当然，你也可以使用你自己的
    CSS 和 JavaScript 库。
- en: Customizing the stylesheet
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义样式表
- en: 'For now, just add these CSS style rules to the bottom of the `site.css` file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时只需将这些 CSS 样式规则添加到 `site.css` 文件的底部：
- en: '**`wwwroot/css/site.css`**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**`wwwroot/css/site.css`**'
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can use CSS rules like these to completely customize how your pages look
    and feel.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这样的 CSS 规则来完全自定义你的页面的外观和感觉。
- en: ASP.NET Core and Razor can do much more, such as partial views and server-rendered
    view components, but a simple layout and view is all you need for now. The official
    ASP.NET Core documentation (at `https://docs.asp.net`) contains a number of examples
    if you'd like to learn more.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 和 Razor 可以做得更多，比如部分视图和服务器呈现的视图组件，但是现在你只需要一个简单的布局和视图。官方的 ASP.NET
    Core 文档（位于 `https://docs.asp.net`）包含了许多示例，如果你想了解更多的话。
- en: Add a service class
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个服务类
- en: Add a service class
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个服务类
- en: You've created a model, a view, and a controller. Before you use the model and
    view in the controller, you also need to write code that will get the user's to-do
    items from a database.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了一个模型、一个视图和一个控制器。在你在控制器中使用模型和视图之前，你还需要编写代码来从数据库获取用户的待办事项。
- en: You could write this database code directly in the controller, but it's a better
    practice to keep all the database code in a separate class called a **service**.
    This helps keep the controller as simple as possible, and makes it easier to test
    and change the database code later.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接在控制器中编写这个数据库代码，但是最好的做法是将所有的数据库代码放在一个名为**服务**的单独类中。这有助于保持控制器尽可能简单，并使后续测试和更改数据库代码变得更容易。
- en: Separating your application logic into one layer that handles database access
    and another layer that handles presenting a view is sometimes called a layered,
    3-tier, or n-tier architecture.
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将你的应用逻辑分为一个处理数据库访问的层和另一个处理呈现视图的层有时被称为分层、三层或多层架构。
- en: .NET and C# include the concept of **interfaces**, where the definition of an
    object's methods and properties is separate from the class that actually contains
    the code for those methods and properties. Interfaces make it easy to keep your
    classes decoupled and easy to test, as you'll see here (and later in the *Automated
    testing* chapter).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 和 C# 包括**接口**的概念，接口的定义是对象的方法和属性的定义与实际包含该方法和属性的类分开的。接口使得保持你的类解耦并且易于测试，就像你在这里（以及后面的*自动化测试*章节中）所看到的那样。
- en: 'First, create an interface that will represent the service that can interact
    with to-do items in the database. By convention, interfaces are prefixed with
    "I". Create a new file in the Services directory:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个代表可以与数据库中的待办事项进行交互的服务的接口。按照惯例，接口以"I"为前缀。在 Services 目录中创建一个新文件：
- en: '**`Services/ITodoItemService.cs`**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Services/ITodoItemService.cs`**'
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that the namespace of this file is `AspNetCoreTodo.Services`. Namespaces
    are a way to organize .NET code files, and it's customary for the namespace to
    follow the directory the file is stored in (`AspNetCoreTodo.Services` for files
    in the `Services` directory, and so on).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这个文件的命名空间是`AspNetCoreTodo.Services`。命名空间是组织.NET代码文件的一种方式，按照文件所在的目录来命名空间是一种习惯做法（对于`Services`目录中的文件来说，命名空间就是`AspNetCoreTodo.Services`，依此类推）。
- en: 'Because this file (in the `AspNetCoreTodo.Services` namespace) references the
    `TodoItem` class (in the `AspNetCoreTodo.Models` namespace), it needs to include
    a `using` statement at the top of the file to import that namespace. Without the
    `using` statement, you''ll see an error like:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个文件（在`AspNetCoreTodo.Services`命名空间中）引用了`TodoItem`类（在`AspNetCoreTodo.Models`命名空间中），所以它需要在文件顶部包含一个`using`语句来导入该命名空间。没有`using`语句，你会看到一个错误，如下所示：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since this is an interface, there isn't any actual code here, just the definition
    (or **method signature**) of the `GetIncompleteItemsAsync` method. This method
    requires no parameters and returns a `Task<IEnumerable<TodoItem>>`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个接口，这里实际上没有任何代码，只有`GetIncompleteItemsAsync`方法的定义（或**方法签名**）。这个方法不需要参数，并返回一个`Task<IEnumerable<TodoItem>>`。
- en: 'If this syntax looks confusing, think: "a Task that contains a list of TodoItems".'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果这个语法看起来令人困惑，想一想：“包含一个TodoItems列表的Task”。
- en: The `Task` type is similar to a future or a promise, and it's used here because
    this method will be **asynchronous**. In other words, the method may not be able
    to return the list of to-do items right away because it needs to go talk to the
    database first. (More on this later.)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`Task`类型类似于将来或承诺，它在这里被使用，因为这个方法将是**异步**的。换句话说，该方法可能不能立即返回待办事项列表，因为它需要先访问数据库。（稍后详细讨论。）'
- en: 'Now that the interface is defined, you''re ready to create the actual service
    class. I''ll cover database code in depth in the *Use a database* chapter, but
    for now you''ll just fake it and return hard-coded values:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在接口已经定义好了，你可以开始创建真正的服务类了。我将在*使用数据库*章节深入讲解数据库代码，但现在你只需模拟一下，返回硬编码的值即可：
- en: '**`Services/FakeTodoItemService.cs`**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Services/FakeTodoItemService.cs`**'
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This `FakeTodoItemService` implements the `ITodoItemService` interface but always
    returns the same array of two `TodoItem`s. You'll use this to test the controller
    and view, and then add real database code in *Use a database*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`FakeTodoItemService`实现了`ITodoItemService`接口，但总是返回两个`TodoItem`的相同数组。你将使用这个来测试控制器和视图，然后在*使用数据库*中添加真正的数据库代码。
- en: Use dependency injection
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用依赖注入
- en: Use dependency injection
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用依赖注入
- en: 'Back in the `TodoController`, add some code to work with the `ITodoItemService`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`TodoController`，添加一些代码来处理`ITodoItemService`：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Since `ITodoItemService` is in the `Services` namespace, you''ll also need
    to add a `using` statement at the top:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`ITodoItemService`位于`Services`命名空间中，你还需要在顶部添加一个`using`语句：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first line of the class declares a private variable to hold a reference
    to the `ITodoItemService`. This variable lets you use the service from the `Index`
    action method later (you'll see how in a minute).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 类的第一行声明了一个私有变量来保存对`ITodoItemService`的引用。这个变量让你稍后可以从`Index`动作方法中使用该服务（稍后你会看到如何使用）。
- en: The `public TodoController(ITodoItemService todoItemService)` line defines a
    **constructor** for the class. The constructor is a special method that is called
    when you want to create a new instance of a class (the `TodoController` class,
    in this case). By adding an `ITodoItemService` parameter to the constructor, you've
    declared that in order to create the `TodoController`, you'll need to provide
    an object that matches the `ITodoItemService` interface.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`public TodoController(ITodoItemService todoItemService)`这行代码定义了类的一个**构造函数**。构造函数是一个特殊的方法，当你想要创建一个类的新实例时（在本例中是`TodoController`类），就会调用这个方法。通过在构造函数中添加一个`ITodoItemService`参数，你声明了要创建`TodoController`，你需要提供一个与`ITodoItemService`接口匹配的对象。'
- en: Interfaces are awesome because they help decouple (separate) the logic of your
    application. Since the controller depends on the `ITodoItemService` interface,
    and not on any *specific* service class, it doesn't know or care which class it's
    actually given. It could be the `FakeTodoItemService`, a different one that talks
    to a live database, or something else! As long as it matches the interface, the
    controller doesn't care. This makes it really easy to test parts of your application
    separately. (I'll cover testing more in the *Automated testing* chapter.)
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 接口很棒，因为它们有助于解耦（分离）应用程序的逻辑。由于控制器依赖于`ITodoItemService`接口，而不是任何*特定*的服务类，因此它不知道也不关心实际给定的是哪个类。它可以是`FakeTodoItemService`，一个连接到实时数据库的不同服务，或其他任何东西！只要它符合接口，控制器就不在乎。这使得分开测试应用程序的各个部分变得非常容易。（我将在*自动化测试*章节中更详细地介绍测试。）
- en: 'Now you can finally use the `ITodoItemService` (via the private variable you
    declared) in your action method to get to-do items from the service layer:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在操作方法中使用`ITodoItemService`（通过您声明的私有变量）从服务层获取待办事项：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Remember that the `GetIncompleteItemsAsync` method returned a `Task<IEnumerable<TodoItem>>`?
    Returning a `Task` means that the method won't necessarily have a result right
    away, but you can use the `await` keyword to make sure your code waits until the
    result is ready before continuing on.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 记得`GetIncompleteItemsAsync`方法返回了一个`Task<IEnumerable<TodoItem>>`吗？返回一个`Task`意味着该方法不一定会立即有结果，但您可以使用`await`关键字确保您的代码在继续执行之前等待结果准备就绪。
- en: 'The `Task` pattern is common when your code calls out to a database or an API
    service, because it won''t be able to return a real result until the database
    (or network) responds. If you''ve used promises or callbacks in JavaScript or
    other languages, `Task` is the same idea: the promise that there will be a result
    - sometime in the future.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的代码调用数据库或API服务时，`Task`模式很常见，因为它在数据库（或网络）响应之前无法返回真正的结果。如果您在JavaScript或其他语言中使用过promises或回调，`Task`是相同的概念：承诺将来会有一个结果。
- en: If you've had to deal with "callback hell" in older JavaScript code, you're
    in luck. Dealing with asynchronous code in .NET is much easier thanks to the magic
    of the `await` keyword! `await` lets your code pause on an async operation, and
    then pick up where it left off when the underlying database or network request
    finishes. In the meantime, your application isn't blocked, because it can process
    other requests as needed. This pattern is simple but takes a little getting used
    to, so don't worry if this doesn't make sense right away. Just keep following
    along!
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果您曾经在旧版JavaScript代码中处理过“回调地狱”，那么您很幸运。由于`await`关键字的魔力，处理.NET中的异步代码要容易得多！`await`让您的代码在异步操作上暂停，然后在底层数据库或网络请求完成时继续执行。与此同时，您的应用程序不会被阻塞，因为它可以根据需要处理其他请求。这种模式很简单，但需要一点时间来适应，所以如果一开始不明白也不要担心。只需继续跟着做！
- en: 'The only catch is that you need to update the `Index` method signature to return
    a `Task<IActionResult>` instead of just `IActionResult`, and mark it as `async`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的注意事项是，您需要更新`Index`方法的签名，使其返回`Task<IActionResult>`而不仅仅是`IActionResult`，并将其标记为`async`：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You're almost there! You've made the `TodoController` depend on the `ITodoItemService`
    interface, but you haven't yet told ASP.NET Core that you want the `FakeTodoItemService`
    to be the actual service that's used under the hood. It might seem obvious right
    now since you only have one class that implements `ITodoItemService`, but later
    you'll have multiple classes that implement the same interface, so being explicit
    is necessary.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经接近成功了！您让`TodoController`依赖于`ITodoItemService`接口，但还没有告诉ASP.NET Core您希望`FakeTodoItemService`是实际在幕后使用的服务。现在可能显而易见，因为您只有一个实现`ITodoItemService`的类，但以后您将有多个实现相同接口的类，因此明确是必要的。
- en: 'Declaring (or "wiring up") which concrete class to use for each interface is
    done in the `ConfigureServices` method of the `Startup` class. Right now, it looks
    something like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 声明（或“连接”）每个接口要使用的具体类是在`Startup`类的`ConfigureServices`方法中完成的。目前，它看起来像这样：
- en: '**Startup.cs**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**Startup.cs**'
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The job of the `ConfigureServices` method is adding things to the **service
    container**, or the collection of services that ASP.NET Core knows about. The
    `services.AddMvc` line adds the services that the internal ASP.NET Core systems
    need (as an experiment, try commenting out this line). Any other services you
    want to use in your application must be added to the service container here in
    `ConfigureServices`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConfigureServices` 方法的作用是向**服务容器**添加东西，或者说是 ASP.NET Core 知道的服务集合。`services.AddMvc`
    行添加了内部 ASP.NET Core 系统需要的服务（试验一下，尝试注释掉这行）。任何你想在应用程序中使用的其他服务都必须在这里的 `ConfigureServices`
    中添加到服务容器中。'
- en: 'Add the following line anywhere inside the `ConfigureServices` method:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ConfigureServices` 方法的任何地方添加以下行：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This line tells ASP.NET Core to use the `FakeTodoItemService` whenever the `ITodoItemService`
    interface is requested in a constructor (or anywhere else).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码告诉 ASP.NET Core，在构造函数（或其他任何地方）请求`ITodoItemService`接口时，使用`FakeTodoItemService`。
- en: '`AddSingleton` adds your service to the service container as a **singleton**.
    This means that only one copy of the `FakeTodoItemService` is created, and it''s
    reused whenever the service is requested. Later, when you write a different service
    class that talks to a database, you''ll use a different approach (called **scoped**)
    instead. I''ll explain why in the *Use a database* chapter.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddSingleton` 将你的服务添加到服务容器中作为一个**单例**。这意味着只创建一个`FakeTodoItemService`的副本，并且在请求服务时重复使用它。稍后，当你编写一个与数据库交互的不同服务类时，你将使用不同的方法（称为**scoped**）。我会在*使用数据库*章节中解释原因。'
- en: That's it! When a request comes in and is routed to the `TodoController`, ASP.NET
    Core will look at the available services and automatically supply the `FakeTodoItemService`
    when the controller asks for an `ITodoItemService`. Because the services the controller
    depends on are "injected" from the service container, this pattern is called **dependency
    injection**.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！当请求到达并被路由到 `TodoController` 时，ASP.NET Core 将查看可用的服务，并在控制器请求`ITodoItemService`时自动提供`FakeTodoItemService`。因为控制器依赖的服务是从服务容器中“注入”的，所以这种模式被称为**依赖注入**。
- en: Finish the controller
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成控制器
- en: Finish the controller
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成控制器
- en: 'The last step is to finish the controller code. The controller now has a list
    of to-do items from the service layer, and it needs to put those items into a
    `TodoViewModel` and bind that model to the view you created earlier:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是完成控制器代码。控制器现在有了来自服务层的待办事项列表，它需要将这些项目放入一个`TodoViewModel`中，并将该模型绑定到你之前创建的视图中：
- en: '**`Controllers/TodoController.cs`**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Controllers/TodoController.cs`**'
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you haven''t already, make sure these `using` statements are at the top
    of the file:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有，请确保这些`using`语句在文件的顶部：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you're using Visual Studio or Visual Studio Code, the editor will suggest
    these `using` statements when you put your cursor on a red squiggly line.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用 Visual Studio 或者 Visual Studio Code，当你将光标放在红色波浪线上时，编辑器会建议这些`using`语句。
- en: Test it out
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试一下
- en: To start the application, press F5 (if you're using Visual Studio or Visual
    Studio Code), or just run `dotnet run` in the terminal. If the code compiles without
    errors, the server will spin up on port 5000 by default.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动应用程序，请按 F5（如果你使用的是 Visual Studio 或 Visual Studio Code），或者在终端中运行 `dotnet run`。如果代码编译没有错误，服务器将默认在端口
    5000 上启动。
- en: If your web browser didn't open automatically, open it and navigate to [http://localhost:5000/todo](http://localhost:5000/todo).
    You'll see the view you created, with the data pulled from your fake database
    layer (for now).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的网络浏览器没有自动打开，请打开它并导航到 [http://localhost:5000/todo](http://localhost:5000/todo)。你将看到你从假数据库层拉取的数据填充了你之前创建的视图。
- en: Congratulations! You've built a working ASP.NET Core application. Next, you'll
    take it further with third-party packages and real database code.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经构建了一个可工作的 ASP.NET Core 应用程序。接下来，你将通过第三方包和真实的数据库代码进一步完善它。
