- en: Representing Queues
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表示队列
- en: Queue Data Structure
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 队列数据结构
- en: 'Using `set-car!` and `set-cdr!` allows us to create a data structure that we
    could not have implemented efficiently before: a queue. A **queue** is a sequence
    in which items are inserted at one end (called the rear of the queue) and deleted
    from the other end (the front). Because items are always removed in the order
    in which they are inserted, a queue is sometimes called a FIFO (first in, first
    out).'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`set-car!`和`set-cdr!`允许我们创建一种以前无法有效实现的数据结构：队列。**队列**是一种序列，在其中项目从一端（称为队列的后端）插入，从另一端（前端）删除。因为项目总是按照插入的顺序被移除，所以有时称队列为FIFO（先进先出）。
- en: '![](http://3.bp.blogspot.com/_w9XO9zBePXE/SKFjlee6K-I/AAAAAAAAAdk/iRjNgU62cmM/
    s1600/royston_queue.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](http://3.bp.blogspot.com/_w9XO9zBePXE/SKFjlee6K-I/AAAAAAAAAdk/iRjNgU62cmM/
    s1600/royston_queue.jpg)'
- en: Queue in Action
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 队列实例
- en: Assume we have the functions `make-queue`, which returns a new queue, `insert-queue!`,
    which adds a new element to a queue, and `delete-queue!`, which removes an element
    in a queue (we are going to implement them soon!). Lets examine the mechanisms
    of a queue.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有函数`make-queue`，它返回一个新队列，`insert-queue!`，它向队列添加一个新元素，以及`delete-queue!`，它从队列中删除一个元素（我们将很快实现它们！）。让我们来看看队列的机制。
- en: '| Operation | Resulting Queue |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 结果队列 |'
- en: '| --- | --- |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `(define q (make-queue))` |  |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `(define q (make-queue))` |  |'
- en: '| `(insert-queue! q ''a)` | `a` |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `(insert-queue! q ''a)` | `a` |'
- en: '| `(insert-queue! q ''b)` | `a b` |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `(insert-queue! q ''b)` | `a b` |'
- en: '| `(delete-queue! q)` | b |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `(delete-queue! q)` | b |'
- en: '| `(insert-queue! q ''c)` | b c |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `(insert-queue! q ''c)` | b c |'
- en: '| `(insert-queue! q ''d)` | `b c d` |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `(insert-queue! q ''d)` | `b c d` |'
- en: '| `(delete-queue! q)` | `c d` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `(delete-queue! q)` | `c d` |'
- en: 'In terms of data abstraction, we can regard a queue as defined by the following
    set of operations:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据抽象方面，我们可以将队列视为以下一组操作定义的：
- en: 'a constructor: `(make-queue)` returns an empty queue (a queue containing no
    items).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个构造函数：`(make-queue)`返回一个空队列（不包含任何项目的队列）。
- en: 'two selectors:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个选择器：
- en: '`(empty-queue? <_queue_>)` tests if the queue is empty.'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(empty-queue? <_queue_>)`测试队列是否为空。'
- en: '`(front-queue <_queue_>)` returns the object at the front of the queue, signaling
    an error if the queue is empty. **It does not modify the queue.**'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(front-queue <_queue_>)`返回队列前端的对象，如果队列为空，则发出错误信号。**它不修改队列。**'
- en: 'two mutators:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个改变者：
- en: '`(insert-queue! <_queue_> <_item_>)` inserts the item at the rear of the queue
    and returns the modified queue as its value.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(insert-queue! <_queue_> <_item_>)`将项目插入到队列的后端，并将修改后的队列作为其值返回。'
- en: '`(delete-queue! <_queue_>)` removes the item at the front of the queue and
    returns the modified queue as its value, signaling an error if the queue is empty
    before the deletion.'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(delete-queue! <_queue_>)`删除队列前端的项目，并将修改后的队列作为其值返回，如果在删除之前队列为空，则发出错误信号。'
- en: Queues as Lists
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为列表的队列
- en: Because a queue is a list of items, we can technically represent it with an
    ordinary list. The front of the queue will be the `car` of the list, inserting
    a new element will be equivalent to appending a new pair at the end. Deleting
    an item will just be the `cdr`. Why don't we go with this implementation? The
    problem is the run time. To add an item to the back of a list, we have to go through
    a series of `cdr`s. If the list is really long, it will take us a really long
    time to find the last pair. The run time for this is `Θ(n)`, where `n` is the
    length of the list.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因为队列是一系列项目的列表，我们可以用普通列表来表示它。队列的前端将是列表的`car`，插入新元素将相当于在末尾添加新对。删除项目只是`cdr`。为什么我们不采用这种实现？问题在于运行时间。要将项目添加到列表的末尾，我们必须经过一系列的`cdr`。如果列表真的很长，我们将花费很长时间找到最后一对。这样做的运行时间为`Θ(n)`，其中`n`是列表的长度。
- en: A list allows us access to the first item in constant time, but when you need
    to find the last pair, it takes a long time. We can solve this by storing and
    updating the pointer to the backmost pair.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 列表允许我们在常数时间内访问第一个项目，但当需要找到最后一对时，它需要很长时间。我们可以通过存储和更新指向最后一对的指针来解决这个问题。
- en: '![](../Images/44b4d2bc1275d24e3d1a3098b9325efb.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/44b4d2bc1275d24e3d1a3098b9325efb.jpg)'
- en: 'Looking at the queue above, we see that we store two pointers: one that points
    to the front of the list and one to the back. If we try to add a new item, `''d`,
    to the queue, the structure will be changed into the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 查看上面的队列，我们可以看到我们存储了两个指针：一个指向列表的前端，一个指向后端。如果我们尝试向队列添加一个新项目，`'d`，则结构将更改为以下内容：
- en: '![](../Images/ac70f6a07a551383054f2350a1c1b210.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ac70f6a07a551383054f2350a1c1b210.jpg)'
- en: When we want to find the last pair of `q`, we can follow the `(cdr q)` pointer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要找到`q`的最后一对时，我们可以按照`(cdr q)`指针。
- en: Implementation
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现
- en: 'To define the queue operations, we use the following procedures, which enable
    us to select and modify the front and rear pointers of a queue:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '要定义队列操作，我们使用以下过程，这些过程使我们能够选择和修改队列的前端和后端指针： '
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we can implement the actual queue operations. We will consider a queue
    to be empty if its front pointer is the empty list:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以实现实际的队列操作。如果其前端指针是空列表，则我们将考虑队列为空：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `make-queue` constructor returns, as an initially empty queue, a pair whose
    `car` and `cdr` are both the empty list:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`make-queue`构造函数返回一个初始为空队列的对，其`car`和`cdr`都是空列表：'
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To select the item at the front of the queue, we return the `car` of the pair
    indicated by the front pointer:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择队列前端的项目，我们返回由前端指针指示的对的`car`：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Adding to a Queue
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加到队列
- en: 'We will follow the general algorithm outlined before:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循之前概述的一般算法：
- en: '`cons` a new pair containing the new item'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cons`一个包含新项的新对'
- en: If the queue is empty, we set its `front-ptr` and `rear-ptr` to this new pair
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果队列为空，我们将其`front-ptr`和`rear-ptr`设置为这个新对
- en: If the queue isn't empty, we find the final pair, change its `cdr` to the newly
    made pair and update the `rear-ptr`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果队列不为空，我们找到最后一对，将其`cdr`更改为新生成的对，并更新`rear-ptr`。
- en: (define (insert-queue! queue item) (let ((new-pair (cons item '()))) (cond ((empty-queue?
    queue) (set-front-ptr! queue new-pair) (set-rear-ptr! queue new-pair) queue) (else
    (set-cdr! (rear-ptr queue) new-pair) (set-rear-ptr! queue new-pair) queue))))
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (define (insert-queue! queue item) (let ((new-pair (cons item '()))) (cond ((empty-queue?
    queue) (set-front-ptr! queue new-pair) (set-rear-ptr! queue new-pair) queue) (else
    (set-cdr! (rear-ptr queue) new-pair) (set-rear-ptr! queue new-pair) queue))))
- en: Deleting from a Queue
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从队列中删除
- en: To delete from a queue, we can simply change the `front-ptr` to point to the
    next pair.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要从队列中删除，我们可以简单地将`front-ptr`更改为指向下一个对。
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/ac70f6a07a551383054f2350a1c1b210.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ac70f6a07a551383054f2350a1c1b210.jpg)'
- en: 'If starting from the queue above we decide to delete the first time, the change
    will only be where the `front-ptr` points to:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从上面的队列开始我们决定删除第一个项目，更改只会发生在`front-ptr`指向的位置：
- en: '![](../Images/368ec8b3e335f9a139ebbaf028b67d33.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/368ec8b3e335f9a139ebbaf028b67d33.jpg)'
- en: Takeaways
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收获
- en: '`set-car!` and `set-cdr!` allows us to implement a new data structure (the
    queue) much more efficiently than what `cons`, `car`, and `cdr` alone can build.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`set-car!`和`set-cdr!`允许我们更有效地实现一个新的数据结构（队列），而不仅仅是`cons`、`car`和`cdr`所能构建的。'
