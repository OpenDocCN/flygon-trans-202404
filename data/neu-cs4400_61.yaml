- en: Implementing a Circular EnvironmentTuesday, February 21st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现循环环境
- en: 'We now use this to implement `rec` in the following way:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用这个来实现以下方式的`rec`：
- en: 'Change environments so that instead of values they hold boxes of values: `(Boxof
    VAL)` instead of `VAL`, and whenever `lookup` is used, the resulting boxed value
    is unboxed,'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改环境，使其不再保存值，而是保存值的盒子：`(Boxof VAL)`代替`VAL`，并且每当使用`lookup`时，结果的盒子值会被解封，
- en: In the `WRec` case, create the new environment with some temporary binding for
    the identifier — any value will do since it should not be used (when named expressions
    are always `fun` expressions),
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WRec`情况下，为标识符创建新环境，其中包含一些临时绑定 — 任何值都可以，因为它不应该被使用（当命名表达式总是`fun`表达式时），
- en: Evaluate the expression in the new environment,
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新环境中评估表达式，
- en: Change the binding of the identifier (the box) to the result of this evaluation.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改标识符（盒子）的绑定为此评估的结果。
- en: 'The resulting definition is:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 结果定义为：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Racket has another `let` relative for such cases of multiple-nested `let`s
    — `let*`. This form is a derived form — it is defined as a shorthand for using
    nested `let`s. The above is therefore exactly the same as this code:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Racket还有另一个相对于多层嵌套`let`的情况的`let` — `let*`。这个形式是一个派生形式 — 它被定义为使用嵌套的`let`的简写。因此，上面的代码与以下代码完全相同：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This `let*` form can be read almost as a C/Java-ish kind of code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`let*`形式几乎可以被看作是一种类似C/Java的代码：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The code can be simpler if we fold the evaluation into the `set-box!` (since
    `value` is used just there), and if use `lookup` to do the mutation — since this
    way there is no need to hold onto the box. This is a bit more expensive, but since
    the binding is guaranteed to be the first one in the environment, the addition
    is just one quick step. The only binding that we need is the one for the new environment,
    which we can do as an internal definition, leaving us with:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将评估合并到`set-box!`中（因为`value`只在那里使用），并且如果使用`lookup`来进行突变 — 因为这样就不需要保留盒子。这会稍微昂贵一些，但由于绑定保证是环境中的第一个绑定，所以添加只是一个快速步骤。我们唯一需要的绑定是新环境的绑定，我们可以将其作为内部定义来完成，留下：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A complete rehacked version of FLANG with a `rec` binding follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个完全重新修改的FLANG版本，带有一个`rec`绑定如下：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
