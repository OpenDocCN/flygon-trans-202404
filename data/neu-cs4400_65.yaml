- en: The Toy LanguageTuesday, February 28th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩具语言星期二，2月28日
- en: Not in PLAI
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不在 PLAI 中
- en: 'A quick note: from now on, we will work with a variation of our language —
    it will change the syntax to look a little more like Racket, and we will use Racket
    values for values in our language and Racket functions for built-ins in our language.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个快速的提示：从现在开始，我们将使用我们语言的一个变体 —— 它将改变语法，看起来有点像 Racket，并且我们将使用 Racket 值来表示我们语言中的值，使用
    Racket 函数来表示我们语言中的内置函数。
- en: 'Main highlights:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 主要亮点：
- en: There can be multiple bindings in function arguments and local `bind` forms
    — the names are required to be distinct.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数参数和局部 `bind` 表单中可以有多个绑定 —— 名称必须是不同的。
- en: There are now a few keywords like `bind` that are parsed in a special way. Other
    forms are taken as function application, which means that there are no special
    parse rules (and AST entries) for arithmetic functions. They’re now bindings in
    the global environment, and treated in the same way as all bindings. For example,
    `*` is an expression that evaluates to the *primitive* multiplication function,
    and `{bind {{+ *}} {+ 2 3}}` evaluates to `6`.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在有一些关键字像 `bind` 这样的关键字以特殊的方式解析。其他形式被视为函数应用，这意味着没有特殊的解析规则（和 AST 条目）用于算术函数。它们现在是全局环境中的绑定，并且与所有绑定一样处理。例如，`*`
    是一个表达式，它求值为*原始*乘法函数，`{bind {{+ *}} {+ 2 3}}` 求值为 `6`。
- en: Since function applications are now the same for primitive functions and user-bound
    functions, there is no need for a `call` keyword. Note that the function call
    part of the parser must be last, since it should apply only if the input is not
    some other known form.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于原始函数和用户绑定函数现在的函数应用是相同的，所以不再需要 `call` 关键字。请注意，解析器的函数调用部分必须是最后的，因为它只应用于输入不是其他已知形式的情况。
- en: 'Note the use of `make-untyped-list-function`: it’s a library function (included
    in the course language) that can convert a few known Racket functions to a function
    that consumes a list of *any* Racket values, and returns the result of applying
    the given Racket function on these values. For example:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意使用 `make-untyped-list-function`：它是一个库函数（包含在课程语言中），可以将一些已知的 Racket 函数转换为一个函数，该函数消耗一个*任何*
    Racket 值的列表，并返回将给定的 Racket 函数应用于这些值的结果。例如：
- en: '[PRE0]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: evaluates to `10`.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 求值为 `10`。
- en: 'Another important aspect of this is its type — the type of `add` in the previous
    example is `(List -> Any)`, so the resulting function can consume *any* input
    values. If it gets a bad value, it will throw an appropriate error. This is a
    hack: it basically means that the resulting `add` function has a very generic
    type (requiring just a list), so errors can be thrown at run-time. However, in
    this case, a better solution is not going to make these run-time errors go away
    because the language that we’re implementing is not statically typed.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个的另一个重要方面是它的类型 —— 在前面的例子中，`add` 的类型是`(List -> Any)`，因此生成的函数可以消耗*任何*输入值。如果它得到一个坏值，它将抛出一个适当的错误。这是一个技巧：它基本上意味着生成的
    `add` 函数具有非常通用的类型（只需要一个列表），因此错误可以在运行时抛出。然而，在这种情况下，一个更好的解决方案不会让这些运行时错误消失，因为我们正在实现的语言不是静态类型的。
- en: The benefit of this is that we can avoid the hassle of more verbose code by
    letting these functions dynamically check the input values, so we can use a single
    `RktV` variant in `VAL` which wraps any Racket value. (Otherwise we’d need different
    wrappers for different types, and implement these dynamic checks.)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这样做的好处是我们可以通过让这些函数动态检查输入值来避免更冗长的代码的麻烦，因此我们可以在 `VAL` 中使用一个 `RktV` 变体来包装任何 Racket
    值。（否则我们需要为不同类型需要不同的包装器，并实现这些动态检查。）
- en: The following is the complete implementation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整的实现。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
