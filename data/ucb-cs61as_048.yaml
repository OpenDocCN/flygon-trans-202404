- en: Tree Recursion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 树递归
- en: A New Class of Problems
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个新类的问题
- en: 'There are some problems for which we haven''t explicitly described a recursive
    pattern for yet. Consider the following problem:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些问题我们尚未明确描述递归模式。考虑以下问题：
- en: I want to go up a flight of stairs that has `n` steps. I can either take 1 or
    2 steps each time. How many different ways can I go up this flight of stairs?
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我想爬一段有`n`步的楼梯。每次我可以迈出1步或2步。我可以以多少种不同的方式爬上这段楼梯？
- en: 'For example, in the case where `n` is 5, there are 8 possible ways:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当`n`为5时，有8种可能的方式：
- en: '`[1 1 1 1 1](../static/count-stairs/11111.png)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1 1 1 1 1](../static/count-stairs/11111.png)'
- en: '[2 1 1 1](../static/count-stairs/2111.png)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[2 1 1 1](../static/count-stairs/2111.png)'
- en: '[1 2 1 1](../static/count-stairs/1211.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[1 2 1 1](../static/count-stairs/1211.png)'
- en: '[1 1 2 1](../static/count-stairs/1121.png)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[1 1 2 1](../static/count-stairs/1121.png)'
- en: '[1 1 1 2](../static/count-stairs/1112.png)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[1 1 1 2](../static/count-stairs/1112.png)'
- en: '[1 2 2](../static/count-stairs/122.png)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[1 2 2](../static/count-stairs/122.png)'
- en: '[2 1 2](../static/count-stairs/212.png)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[2 1 2](../static/count-stairs/212.png)'
- en: '[2 2 1](../static/count-stairs/221.png)`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[2 2 1](../static/count-stairs/221.png)`'
- en: 'In order to solve this problem, we have to introduce a pattern called *Tree
    Recursion*. Tree Recursion is just a phrase to describe when you make a recursive
    call more than once in your recursive case. Why would we need to do this here?
    Consider one solution to the above problem:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们必须引入一种称为*树递归*的模式。树递归只是用来描述在递归情况下多次进行递归调用的短语。为什么我们需要在这里这样做？考虑上面问题的一个解决方案：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Breaking the procedure down, there are three parts to consider
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序分解，有三个部分需要考虑
- en: There are two base cases, with two different outcomes.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有两种基本情况，有两种不同的结果。
- en: If there is only one step to climb, there is only one way (by taking that step)
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果只有一步要爬，那么只有一种方式（通过迈出那一步）
- en: If there are two steps to climb, there is exactly two ways (1-step 1-step, or
    2-step)
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有两步要爬，那么有确切两种方式（一步一步，或者两步）
- en: Otherwise, the problem is made smaller by breaking it into two worlds
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，通过将问题分解为两个世界，问题变得更小
- en: In the first world, we take one step, and thus the number of steps is reduced
    by one
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一个世界中，我们走一步，因此步数减少了一步
- en: In the second world, we take two steps, and thus the number of steps is reduced
    by two
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二个世界中，我们走两步，因此步数减少了两步
- en: Making two recursive calls to those smaller problems gives us the answer to
    those smaller problems, and adding up those up gives us the answer to the original
    problem.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对这些较小问题进行两次递归调用，我们得到这些较小问题的答案，并将它们相加得到原始问题的答案。
- en: '`count-stairs` is *tree recursive* because whenever it is called, the recursive
    calls branches out and form an upside-down tree. For example, `(count-stairs 5)`:
    ![An upside down tree](../static/count-stairs/(count-stairs 5).png)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`count-stairs`是*树递归*的，因为每当它被调用时，递归调用会分支出并形成一个倒置的树。例如，`(count-stairs 5)`: ![一个倒置的树](../static/count-stairs/(count-stairs
    5).png)'
- en: Counting Change
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算找零
- en: 'Let consider a harder problem to solve:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个更难的问题：
- en: How many different ways can we make change of $1.00, given half-dollars, quarters,
    dimes, nickels, and pennies? More generally, can we write a function to compute
    the number of ways to change any given amount of money using any set of currency
    denominations?
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有多少种不同的方式可以找零$1.00，给定半美元、25美分、10美分、5美分和1美分？更一般地说，我们能否编写一个函数来计算使用任何货币面额的任何给定金额的找零方式数量？
- en: 'We approach the problem in a similar fashion as above. By thinking carefully
    about the problem statement, we can notice that we have to keep track of a two
    things: what our amount currently is, and which coins we have to use (we can keep
    track of this in a sentence, e.g. `''(50 25 10 5 1)`). From there, we can observe
    a few things about our base cases:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以与上面类似的方式解决问题。通过仔细思考问题陈述，我们可以注意到我们必须跟踪两件事：我们当前的金额是多少，以及我们必须使用哪些硬币（我们可以在一个句子中跟踪这一点，例如`'(50
    25 10 5 1)`）。从那里，我们可以观察到关于我们基本情况的一些事情：
- en: If the amount is exactly 0, we should count that as 1 way to make change
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果金额恰好为0，我们应该将其视为一种找零的方式
- en: This may seem counter-intuitive, but there's exactly one way to make change
    for $0--use no coins.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这可能看起来有些违反直觉，但对于$0，有且仅有一种找零的方法--不使用任何硬币。
- en: If the amount is less than 0, we should count that as 0 ways to make change.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果金额小于0，我们应该将其视为0种找零的方式。
- en: You can't make change for negative amounts!
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能为负数金额找零！
- en: If we run out of coins to use, we should count that as 0 ways to make change.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们用完了要使用的硬币，我们应该将其视为0种找零的方式。
- en: This will become more intuitive once we consider the recursive case.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦我们考虑递归情况，这将变得更直观。
- en: 'For the recursive case, we again have to make two recursive calls. These two
    recursive calls break our problem into two worlds:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于递归情况，我们再次必须进行两次递归调用。这两次递归调用将我们的问题分成两个世界：
- en: In one world, we use the the largest coin (the `first` of `(50 25 10 5 1)`)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个世界中，我们使用最大的硬币（`(50 25 10 5 1)`中的`第一个`）
- en: Why are the coins in that order? Because it's easy to reason about. The sentence
    could be in a different order, and while that will affect the computation, it
    will not affect the result.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么硬币是那个顺序？因为这样更容易推理。句子可以按不同顺序排列，虽然这会影响计算，但不会影响结果。
- en: In the other world, we never use the largest coin again.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在另一个世界中，我们再也不使用最大的硬币了。
- en: For example, if we never use the half dollar again, our new sentence should
    be `(25 10 5 1)`.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，如果我们再也不使用半美元，我们的新句子应该是`(25 10 5 1)`。
- en: 'When we translate this into code, we get the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将这个转换成代码时，我们得到以下结果：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: On Time Efficiency
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对于时间效率
- en: Tree recursive procedures typically take exponential time to compute. Why would
    we ever use them?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 树递归过程通常需要指数时间来计算。我们为什么要使用它们呢？
- en: Some problems are more easily solved by thinking tree recursively. Try writing
    count-change using for loops in another language.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有些问题通过递归地思考更容易解决。尝试用另一种语言编写使用for循环的找零问题。
- en: Some problems are intractably hard, meaning the fastest known algorithms we
    have for them are *still* exponential in runtime.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有些问题非常难以解决，意味着我们已知的最快算法在运行时间上仍然是*指数级*的。
- en: Turns out we can optimize tree recursive procedures without changing their shape,
    which we will cover later in the course.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果我们可以优化树递归过程而不改变其形状，这是我们稍后会在课程中涵盖的内容。
- en: Further Reading
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[SICP 1.2.2 Tree Recursion](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_%_sec_1.2.2)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SICP 1.2.2 树递归](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_%_sec_1.2.2)'
- en: '[SICP 1.2.2 Example: Counting Change](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_%_sec_Temp_52)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SICP 1.2.2 例子：找零问题](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_%_sec_Temp_52)'
