- en: Todoアプリのリファクタリング
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Todo应用程序的重构
- en: 原文：[https://jsprimer.net/use-case/todoapp/final/](https://jsprimer.net/use-case/todoapp/final/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/use-case/todoapp/final/](https://jsprimer.net/use-case/todoapp/final/)
- en: 前のセクションで、予定していたTodoアプリの機能はすべて実装できました。 しかし、`App.js`を見てみるとほとんどがHTML要素の処理になっています。
    このようなHTML要素の作成処理は表示する内容が増えるほど、コードの行数が線形的に増えていきます。 このままTodoアプリを拡張していくと`App.js`が肥大化してコードが読みにくくなり、メンテナンス性が低下してしまいます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们已经实现了计划中的所有Todo应用程序功能。 但是，如果查看`App.js`，几乎所有内容都是关于HTML元素的处理。 随着显示内容的增加，HTML元素的创建处理会呈线性增长。
    如果继续扩展Todo应用程序，`App.js`会变得臃肿，代码难以阅读，维护性会降低。
- en: ここで、`App.js`の役割を振り返ってみましょう。 `App`というクラスを持ち、このクラスではModelの初期化やHTML要素とModel間で発生するイベントを中継する役割を持っています。
    表示から発生したイベントをModelに伝え、Modelから発生した変更イベントを表示に伝えている管理者と言えます。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回顾一下`App.js`的角色。 拥有一个名为`App`的类，这个类负责初始化Model以及在HTML元素和Model之间传递事件。 可以说，它是一个管理者，负责将来自显示的事件传递给Model，并将来自Model的变更事件传递给显示。
- en: このセクションでは`App`クラスをイベントの管理者という役割に集中させるため、`App`クラスに書かれているHTML要素を作成する処理を別のクラスへ切り出すリファクタリングを行います。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个部分，为了将`App`类专注于作为事件管理者的角色，我们将`App`类中负责创建HTML元素的过程提取到另一个类中进行重构。
- en: '[](#component)*Viewコンポーネント*'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#component)*View组件*'
- en: '*`App`クラスの大部分を占めているのは`TodoItemModel`の配列に対応するTodoリストのHTML要素を作成する処理です。 このような表示のための処理を部品ごとのモジュールに分け、`App`クラスから作成したモジュールを使うような形にリファクタリングしていきます。
    ここでは、表示のための処理を扱うクラスをViewコンポーネントと呼び、ここでは`View`をファイル名の末尾につけることで区別します。'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*`App`类中占据大部分的是创建与`TodoItemModel`数组对应的Todo列表的HTML元素的过程。 我们将这样的显示处理分解为各个模块，并将`App`类中创建的模块用作重构的形式。
    在这里，我们将处理显示的类称为View组件，并通过在文件名末尾添加`View`来区分。'
- en: Todoリストの表示は次の2つの部品（Viewコンポーネント）から成り立っています。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Todo列表的显示由以下两个部件（View组件）组成。
- en: TodoアイテムViewコンポーネント
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Todo项目视图组件
- en: TodoアイテムをリストとしてまとめたTodoリストViewコンポーネント
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Todo项目作为列表整合到Todo列表视图组件中
- en: この部品に対応するように次のViewのモジュールを作成していきます。 これらのViewのモジュールは、`src/view/`ディレクトリに作成していきます。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 创建与此部件对应的下一个View模块。 这些View模块将在`src/view/`目录中创建。
- en: '`TodoItemView`: TodoアイテムViewコンポーネント'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoItemView`: Todo项目视图组件'
- en: '`TodoListView`: TodoリストViewコンポーネント'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoListView`: Todo列表视图组件'
- en: '[](#TodoItemView)*TodoItemViewを作成する*'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#TodoItemView)*创建TodoItemView*'
- en: '*まずは、Todoアイテムに対応する`TodoItemView`から作成しています。'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，从与Todo项目对应的`TodoItemView`开始创建。'
- en: '`src/view/TodoItemView.js`ファイルを作成して、次のような`TodoItemView`クラスを`export`します。 この`TodoItemView`は、Todoアイテムに対応するHTML要素を返す`createElement`メソッドを持ちます。'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`src/view/TodoItemView.js`文件，并`export`如下`TodoItemView`类。 这个`TodoItemView`具有返回与Todo项目对应的HTML元素的`createElement`方法。
- en: src/view/TodoItemView.js
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: src/view/TodoItemView.js
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: TodoItemViewの`createElement`メソッドの中身は`App`クラスでのHTML要素を作成する部分を元にしています。 `createElement`メソッドは、`TodoItemModel`のインスタンスだけではなく`onUpdateTodo`と`onDeleteTodo`というリスナー関数を受け取っています。
    この受け取ったリスナー関数はそれぞれ対応するイベントがViewで発生した際に呼び出されます。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: TodoItemView的`createElement`方法基于`App`类中创建HTML元素的部分。 `createElement`方法接收的不仅仅是`TodoItemModel`实例，还有`onUpdateTodo`和`onDeleteTodo`这两个监听器函数。
    当View中发生相应事件时，这些接收到的监听器函数将被调用。
- en: このように引数としてリスナー関数を外から受け取ることで、イベントが発生したときの具体的な処理はViewクラスの外側に定義できます。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从外部接收监听器函数作为参数，可以在事件发生时在View类的外部定义具体处理。
- en: たとえば、この`TodoItemView`クラスは次のように利用できます。 `TodoItemModel`のインスタンスとイベントリスナーのオブジェクトを受け取り、TodoアイテムのHTML要素を返します。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个`TodoItemView`类可以这样使用。 接收`TodoItemModel`实例和事件监听器对象，并返回Todo项目的HTML元素。
- en: TodoItemViewを利用するサンプルコード
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TodoItemView的示例代码
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[](#TodoListView)*TodoListViewを作成する*'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#TodoListView)*创建TodoListView*'
- en: '*次はTodoリストに対応する`TodoListView`を作成します。'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*接下来创建与Todo列表对应的`TodoListView`。'
- en: '`src/view/TodoListView.js`ファイルを作成し、次のような`TodoListView`クラスを`export`します。 この`TodoListView`は`TodoItemModel`の配列からTodoリストのHTML要素を作成して返す`createElement`メソッドを持ちます。'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`src/view/TodoListView.js`文件，并`export`如下`TodoListView`类。 这个`TodoListView`具有从`TodoItemModel`数组中创建Todo列表的HTML元素并返回的`createElement`方法。
- en: src/view/TodoListView.js
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: src/view/TodoListView.js
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: TodoListViewの`createElement`メソッドは`TodoItemView`を使ってTodoアイテムのHTML要素を作り、`todoListElement`へと追加していきます。
    このTodoListViewの`createElement`メソッドも`onUpdateTodo`と`onDeleteTodo`のリスナー関数を受け取ります。
    しかし、`TodoListView`ではこのリスナー関数を`TodoItemView`にそのまま渡しています。 なぜなら具体的なDOMイベントを発生させる要素が作られるのは`TodoItemView`の中となるためです。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: TodoListView的`createElement`方法使用`TodoItemView`创建Todo项目的HTML元素，并将其添加到`todoListElement`中。
    这个TodoListView的`createElement`方法也接收`onUpdateTodo`和`onDeleteTodo`的监听器函数。 但是，`TodoListView`直接将这些监听器函数传递给`TodoItemView`。
    这是因为具体触发DOM事件的元素是在`TodoItemView`内部创建的。
- en: '[](#app-refactoring)*Appのリファクタリング*'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#app-refactoring)*重构App*'
- en: '*最後に作成した`TodoItemView`クラスと`TodoListView`クラスを使って`App`クラスをリファクタリングしていきます。'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*最后，使用最近创建的`TodoItemView`类和`TodoListView`类来重构`App`类。'
- en: '`App.js`を次のように`TodoListView`クラスを使うように書き換えます。 `onChange`のリスナー関数で`TodoListView`クラスを使ってTodoリストのHTML要素を作るように変更します。
    このときTodoListViewの`createElement`メソッドには次のようにそれぞれ対応するコールバック関数を渡します。'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将`App.js`重写为使用`TodoListView`类。 在`onChange`的监听器函数中，将`App`类更改为使用`TodoListView`类创建Todo列表的HTML元素。
    在这种情况下，将相应的回调函数传递给TodoListView的`createElement`方法。
- en: '`onUpdateTodo`のコールバック関数では、TodoListModelの`updateTodo`メソッドを呼ぶ'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onUpdateTodo`的回调函数中调用TodoListModel的`updateTodo`方法'
- en: '`onDeleteTodo`のコールバック関数では、TodoListModelの`deleteTodo`メソッドを呼ぶ'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`onDeleteTodo`的回调函数中调用TodoListModel的`deleteTodo`方法
- en: src/App.js
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: src/App.js
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: これで`App`クラスからHTML要素の作成処理がViewクラスに移動でき、`App`クラスはModelとView間のイベントを管理するだけになりました。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '现在`App`类中的HTML元素创建处理已经移动到View类中，`App`类只负责管理Model和View之间的事件。 '
- en: '[](#app-event-listener)*Appのイベントリスナーを整理する*'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#app-event-listener)*整理App的事件监听器*'
- en: '*`App`クラスで登録しているイベントのリスナー関数を見てみると次の4種類となっています。'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*查看`App`类中注册的事件监听器函数，共有以下4种类型。'
- en: '| イベントの流れ | リスナー関数 | 役割 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 事件流 | 监听器函数 | 角色 |'
- en: '| --- | --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Model` → `View` | `this.#todoListModel.onChange(listener)` | `TodoListModel`が変更イベントを受け取る
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `Model` → `View` | `this.#todoListModel.onChange(listener)` | `TodoListModel`接收变更事件
    |'
- en: '| `View` → `Model` | `formElement.addEventListener("submit", listener)` | フォームの送信イベントを受け取る
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `查看` → `模型` | `formElement.addEventListener("submit", listener)` | 接收表单提交事件
    |'
- en: '| `View` → `Model` | `onUpdateTodo: listener` | Todoアイテムのチェックボックスの更新イベントを受け取る
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `查看` → `模型` | `onUpdateTodo: listener` | 接收待办事项复选框更新事件 |'
- en: '| `View` → `Model` | `onDeleteTodo: listener` | Todoアイテムの削除イベントを受け取る |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `查看` → `模型` | `onDeleteTodo: listener` | 接收待办事项删除事件 |'
- en: イベントの流れがViewからModelとなっているリスナー関数が3箇所あり、それぞれリスナー関数はコード上バラバラな位置に書かれています。 また、それぞれのリスナー関数はTodoアプリの機能と対応していることがわかります。
    これらのリスナー関数がTodoアプリの扱っている機能であるということをわかりやすくするため、リスナー関数を`App`クラスのメソッドとして定義し直してみましょう。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在三个从视图到模型的事件流中，存在三个监听器函数，它们分别在代码的不同位置编写。 此外，可以看出每个监听器函数都与待办事项应用的功能相对应。 为了使这些监听器函数更容易理解为待办事项应用的功能，让我们重新定义它们为`App`类的方法。
- en: 次のように、それぞれ対応するリスナー関数を`handle`メソッドとして実装して、それを呼び出すように変更しました。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将相应的监听器函数改为`handle`方法，并进行调用。
- en: src/App.js
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: src/App.js
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: このように`App`クラスのメソッドとしてリスナー関数を並べることで、Todoアプリの機能がコード上の見た目としてわかりやすくなりました。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将监听器函数作为`App`类的方法排列，使待办事项应用的功能在代码中更加清晰可见。
- en: '[](#section-conclusion)*セクションのまとめ*'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#section-conclusion)*本节总结*'
- en: '*このセクションでは、次のことを行いました。'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节内容包括以下：*'
- en: Appから表示に関する処理をViewコンポーネントに分割した
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将与显示相关的处理从 App 中分离到视图组件中
- en: Todoアプリの機能と対応するリスナー関数を`App`クラスのメソッドへ移動した
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将待办事项应用功能与相应的监听器函数移到`App`类的方法中
- en: Todoアプリを完成させた
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成了待办事项应用
- en: 完成したTodoアプリは次のURLで確認できます。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址找到已完成的待办事项应用。
- en: '[https://jsprimer.net/use-case/todoapp/final/final/](https://jsprimer.net/use-case/todoapp/final/final/)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://jsprimer.net/use-case/todoapp/final/final/](https://jsprimer.net/use-case/todoapp/final/final/)'
- en: 実はこのTodoアプリにはまだアプリケーションとして、完成していない部分があります。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，此待办事项应用尚未完全实现为应用程序。
- en: 入力欄でEnterキーを連打すると、空のTodoアイテムが追加されてしまうのは意図しない挙動です。 また、Appの`mount`メソッドでTodoListModelの`onChange`メソッドなどにイベントリスナーを登録していますが、そのイベントリスナーを解除していません。
    このTodoアプリではあまり問題にはなりませんが、イベントリスナーは登録したままだとメモリリークにつながる場合もあります。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 连续按 Enter 键时会添加空的待办事项是不期望的行为。 另外，在 App 的`mount`方法中，注册了 TodoListModel 的`onChange`方法等事件监听器，但并未解除这些事件监听器。
    虽然这在此待办事项应用中并不是问题，但是未解除的事件监听器可能导致内存泄漏。
- en: 余力がある人は、次の機能を追加してTodoアプリを完成させてみてください。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有余力，可以尝试添加以下功能以完成待办事项应用。
- en: タイトルが空の場合は、フォームを送信してもTodoアイテムを追加できないようにする
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当标题为空时，禁止提交表单以添加待办事项
- en: Appの`mount`メソッドでのイベントリスナー登録に対応して、Appに`unmount`メソッドを実装し、イベントリスナーを解除できるようにする
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 App 的`mount`方法中注册事件监听器后，为 App 实现了`unmount`方法，以便解除事件监听器
- en: Appの`mount`メソッドと対応する`unmount`メソッドを作成するというTodoは、アプリケーションのライフサイクルを意識するという課題になります。
    ウェブページにはページ読み込みが完了したときに発生する`load`イベントと、読み込んだページを破棄したときに発生する`unload`イベントがあります。
    Todoアプリも`mount`と`unmount`を実装し、次のようにウェブページのライフサイクルに合わせられます。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决应用程序的生命周期问题，为 App 创建了`mount`方法和对应的`unmount`方法。 这样做可以根据 Web 页面的生命周期进行相应处理。
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 残ったTodoを実装したコードは、次のURLで確認できます。 ぜひ、自分で実装してみてウェブページやアプリの動きについて考えてみてください。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址找到实现剩余待办事项的代码。 请务必尝试自己实现并思考网页或应用的运作方式。
- en: '[https://jsprimer.net/use-case/todoapp/final/more/](https://jsprimer.net/use-case/todoapp/final/more/)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://jsprimer.net/use-case/todoapp/final/more/](https://jsprimer.net/use-case/todoapp/final/more/)'
- en: '[](#todo-conclusion)*Todoアプリのまとめ*'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#todo-conclusion)*待办事项应用总结*'
- en: '*今回は、Todoアプリを構成する要素をModelとViewという単位でモジュールに分けていました。 モジュールを分けることでコードの見通しを良くしたり、Todoアプリにさらなる機能を追加しやすい形にしました。
    このようなモジュールの分け方などの設計には正解はなく、さまざまな考え方があります。'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*本次我们将待办事项应用划分为模型和视图两个模块。 通过划分模块，我们提高了代码的可读性，并使待办事项应用更容易添加新功能。 关于模块划分等设计方面并没有唯一正确的答案，有各种不同的观点。*'
- en: 今回Todoアプリという題材をユースケースに選んだのは、JavaScriptのウェブアプリケーションではよく利用されている題材であるためです。 さまざまなライブラリを使ったTodoアプリの実装が[TodoMVC](https://todomvc.com/)と呼ばれるサイトにまとめられています。
    今回作成したTodoアプリは、TodoMVCからフィルター機能などを削ったものをライブラリを使わずに実装したものです。^([1](#fn_1))
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 选择待办事项应用作为案例是因为它在 JavaScript 网页应用中经常使用。 使用各种库实现的待办事项应用可以在[TodoMVC](https://todomvc.com/)网站上找到。
    此次创建的待办事项应用是在不使用库的情况下实现的，删除了 TodoMVC 中的筛选功能等内容。^([1](#fn_1))
- en: 現実では、ライブラリをまったく使わずウェブアプリケーションを実装することはほとんどありません。 ライブラリを使うことで、`html-util.js`のようなものは自分で書く必要がなくなったり、最後の課題として残ったライフサイクルの問題なども解決しやすくなります。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '在现实生活中，几乎不可能完全不使用库来实现 Web 应用程序。 使用库可以省去编写像`html-util.js`这样的工具的麻烦，同时也更容易解决最后一个问题：生命周期。 '
- en: しかし、ライブラリを使って開発する場合でも、第一部の基本文法や第二部のユースケースで紹介したようなJavaScriptの基礎は重要です。 なぜならライブラリも、これらの基礎の上に実装されているためです。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使在使用库进行开发时，第一部分的基本语法和第二部分介绍的 JavaScript 基础也很重要。 因为这些库也是建立在这些基础之上的。
- en: また、作るアプリケーションの種類や目的によって適切なライブラリは異なります。 ライブラリによっては魔法のような機能を提供しているものもありますが、それらも基礎となる技術を使っていることは覚えておいてください。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，适用于构建应用程序的库也因应用程序类型和目的而异。 尽管某些库提供了像魔术般的功能，但请记住它们也是建立在基础技术之上的。
- en: この書籍ではJavaScriptの基礎を中心に紹介しましたが、「[ECMAScript](../../../basic/ecmascript/)」の章で紹介したようにJavaScriptの基礎も年々更新されています。
    基礎が更新されると応用であるライブラリも新しいものが登場し、定番だったものも徐々に変化していきます。 知らなかったものが出てくるのは、JavaScript自体が成長しているということです。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本书主要介绍了 JavaScript 的基础知识，但正如「[ECMAScript](../../../basic/ecmascript/)」章节所述，JavaScript
    的基础知识也在不断更新。 随着基础知识的更新，衍生出的库也会更新，而曾经的经典也会逐渐改变。 发现未知内容意味着 JavaScript 本身正在发展。
- en: この書籍を読んでまだ理解できなかったことや知らなかったことがあるのは問題ありません。 知らなかったことを見つけたときにそれが何かを調べられるということが、
    JavaScriptという変化していく言語やそれを利用する環境においては重要です。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本书后仍有不理解或不熟悉的内容并不是问题。 在 JavaScript 这种不断发展的语言及其使用环境中，能够查找到未知内容是很重要的。
- en: ¹. ライブラリやフレームワークを使わずに実装したJavaScriptをVanilla JSと呼ぶことがあります。 [↩](#reffn_1 "Jump
    back to footnote [1] in the text.")*******
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. 在不使用库或框架的情况下实现 JavaScript 的代码有时被称为 Vanilla JS。 [↩](#reffn_1 "跳转到脚注 [1]")
