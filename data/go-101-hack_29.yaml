- en: Sort
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序
- en: Sort
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序
- en: '`sort` package defines an [interface](https://golang.org/pkg/sort/#Interface)
    whose name is `Interface`:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`sort`包定义了一个名为`Interface`的[接口](https://golang.org/pkg/sort/#Interface)：'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For slice, or any other collection types, provided that it implements the `Len()`,
    `Less` and `Swap` functions, you can use `sort.Sort()` function to arrange the
    elements in the order.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于切片，或者任何其他实现了`Len()`，`Less`和`Swap`函数的集合类型，你可以使用`sort.Sort()`函数按顺序排列元素。
- en: 'Let''s see the following example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看下面的示例：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To avoid losing focus of demonstrating how to use `sort.Interface`, the `command`
    struct is simplified to only contain one `string` member: `name`. The comparison
    method (`Less`) is just contrasting the `name` in alphabetic order.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了不失焦点地展示如何使用`sort.Interface`，`command`结构被简化为只包含一个`string`成员：`name`。比较方法（`Less`）只是按字母顺序对比`name`。
- en: 'Check the running result of the program:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 检查程序的运行结果：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can see after sorting, the items in `c` are rearranged.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在排序后，`c`中的项目被重新排列了。
- en: 'Additionally, if you pick at the performance, you may define a slice whose
    type is the pointer, because switching pointer is much quicker if the size of
    element is very big. Modify the above example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果你在意性能，你可以定义一个元素类型为指针的切片，因为如果元素的大小非常大，切换指针会快得多。修改上面的例子：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Check the executing result:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 检查执行结果：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can see the pointers are reordered.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到指针被重新排序了。
- en: 'Reference:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：
- en: '[The Go Programming Language](http://www.gopl.io/).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[《Go编程语言》](http://www.gopl.io/)。'
