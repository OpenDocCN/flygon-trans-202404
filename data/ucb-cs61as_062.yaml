- en: Building Hierarchy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立层次结构
- en: Composing pairs and lists
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合对和列表
- en: Previously we saw how to use `cons` to "group" a pair of values together, e.g.
    `(cons 1 2)`, which returns a pair `(1 . 2)`. We can also use `list` to group
    an arbitary amount of data together. For example if you type `(list 1 2 'bagel
    4)` in the interpreter, Racket will print the list `(1 2 bagel 4)`. Notice that
    we can put *any* sort of data inside them, even other pairs and lists!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们看到如何使用`cons`来“组合”一对值，例如`(cons 1 2)`，它返回一对`(1 . 2)`。我们也可以使用`list`来组合任意数量的数据。例如，如果您在解释器中键入`(list
    1 2 'bagel 4)`，Racket将打印列表`(1 2 bagel 4)`。请注意，我们可以在其中放置*任何*类型的数据，甚至其他对和列表！
- en: 'Now let''s make a pair of lists:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一对列表：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first item of the pair is the list `(1 2)` and the second is the list `(3
    4)`. We can show this structure with the following box-and-pointer diagram:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这对中的第一个项目是列表`(1 2)`，第二个是列表`(3 4)`。我们可以用以下的盒子和指针图展示这个结构：
- en: '![](../Images/57773dc2369e476a49136116f652213e.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/57773dc2369e476a49136116f652213e.jpg)'
- en: (If you aren't familiar with drawing and interpreting box-and-pointer diagrams,
    please go back and review the [section](http://berkeley-cs61as.github.io/textbook/representing-sequences.html)
    in Lesson 4.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: （如果您不熟悉绘制和解释盒子和指针图，请返回并查看第4课中的[部分](http://berkeley-cs61as.github.io/textbook/representing-sequences.html)。）
- en: 'You can also represent the structure `((1 2) 3 4)` using a **little-t tree**:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用**小t树**来表示结构`((1 2) 3 4)`：
- en: '![](../Images/24934e1affa167fdfd56f0aa696b129b.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/24934e1affa167fdfd56f0aa696b129b.jpg)'
- en: With litle-t trees, every element in a sequence is a node. In the example above,
    `(1 2)` is an element of `((1 2) 3 4)`, so it's a node. But it's also a tree with
    two children nodes—one for each element.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在小t树中，序列中的每个元素都是一个节点。在上面的例子中，`(1 2)`是`((1 2) 3 4)`的一个元素，因此它是一个节点。但它也是一个有两个子节点的树——每个元素一个。
- en: Why do we call this a "little-t tree"? Later on in this lesson, we'll discuss
    the "capital-T Tree" data type, which is *completely different* from the little-t
    tree data type. We use this notation for the sake of consistency and clarity.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们称之为“小t树”？在本课的后面，我们将讨论“大T树”数据类型，这与小t树数据类型*完全不同*。我们使用这种表示法是为了保持一致性和清晰度。
- en: We may also refer to little-t trees as **deep lists** (since they are lists
    within lists within lists within...), which is less ambiguous, but also less descriptive
    of the tree-like structure of lists of lists.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将小t树称为**深度列表**（因为它们是列表中的列表中的列表中的列表...），这样不太含糊，但也不太描述列表的树状结构。
- en: '**Test Your Understanding**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试您的理解**'
- en: Suppose we evaluate the expression `(list 1 (list 2 (list 3 4)))`. What is returned
    when we enter this into the interpreter? Draw for yourself the corresponding box-and-pointer
    structure and the corresponding little-t tree.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们评估表达式`(list 1 (list 2 (list 3 4)))`。当我们输入这个表达式到解释器时会返回什么？为自己绘制相应的盒子和指针结构以及相应的小t树。
- en: Takeaways
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: In this section, we discussed nested `cons` structures. We also introduced little-t
    trees.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了嵌套的`cons`结构。我们还介绍了小t树。
- en: Before We Continue...
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在我们继续之前...
- en: Review the [shorthand notation](http://berkeley-cs61as.github.io/textbook/representing-sequences.html#sub2)
    for `car`s and `cdr`s. It will come in handy!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下[shorthand notation](http://berkeley-cs61as.github.io/textbook/representing-sequences.html#sub2)中`car`和`cdr`的用法。这会很有用！
