- en: Compound Procedures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复合过程
- en: Defining Procedures
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义过程
- en: You already know how to define simple procedures such as `square`. The standard
    way to define a procedure is `(define (name formal-parameters) body)`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经知道如何定义简单的过程，比如`square`。定义过程的标准方法是`(define (name formal-parameters) body)`。
- en: 'Vocab:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 术语：
- en: 'Compound Procedure: a compound procedure is a procedure that is defined in
    terms of Racket primitive procedures.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复合过程：复合过程是根据 Racket 原始过程来定义的过程。
- en: 'Name: the name of the procedure is a symbol used to refer to the procedure.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：过程的名称是用来指代该过程的符号。
- en: 'Formal Parameters: the formal parameters of a procedure are the names used
    within the body of the procedure to refer to the arguments.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形式参数：过程的形式参数是在过程体内用来指代实际参数的名称。
- en: 'Body: the body of the procedure is the "meat" of the procedure. It is formally
    defined as "an expression that will yield the value of the procedure application
    when the formal parameters are replaced by the actual arguments to which the procedure
    is applied", but you can think of it as instructions for the computer to follow.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主体：过程的主体是过程的“主体部分”。它正式定义为“一个表达式，当将形式参数替换为过程应用的实际参数时，将产生过程应用的值”，但你可以将其视为计算机要遵循的指令。
- en: In the procedure definition `(define (square x) (* x x))`, the *name* is `square`,
    the *formal parameter* is `x`, and the *body* is `(* x x)`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在过程定义`(define (square x) (* x x))`中，*名称*是`square`，*形式参数*是`x`，*主体*是`(* x x)`。
- en: 'Suppose I define a procedure as such: `(define (foo x y) (+ (* 3 x) (* 4 y)))`.
    Please answer the following questions.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我将一个过程定义为如下：`(define (foo x y) (+ (* 3 x) (* 4 y)))`。请回答以下问题。
- en: What is the name of the above procedure?What are the two formal parameters?What
    is the body of the procedure?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 上述过程的名称是什么？两个形式参数是什么？过程的主体是什么？
- en: Procedures with Multiple Formal Parameters
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带有多个形式参数的过程
- en: 'Procedures don''t have to have just one formal parameter, such as in `square`.
    They can also have multiple formal parameters. The way to create procedures with
    multiple arguments is fairly straightforward. It looks something like this: `(define
    (foo x y z) (* x y z))`.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 过程不一定只能有一个形式参数，比如`square`。它们也可以有多个形式参数。创建具有多个参数的过程的方法相当简单。看起来像这样：`(define (foo
    x y z) (* x y z))`。
- en: 'We can also create procedures with no arguments at all! The code for that looks
    something like this: `(define (foo) 3))`. Now, whenever you call `(foo)`, it will
    return 3.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建没有任何参数的过程！代码看起来像这样：`(define (foo) 3))`。现在，每当你调用`(foo)`时，它都会返回 3。
- en: Procedure-Ception
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过程内嵌
- en: One of the most useful (and coolest!) parts about programming is that, once
    you've defined a procedure, not only can you can use it over and over again, you
    can also use it to define other procedures.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 编程最有用（也是最酷！）的部分之一是，一旦你定义了一个过程，不仅可以一遍又一遍地使用它，还可以用它来定义其他过程。
- en: 'Since you''re probably sick of `square` right now, let''s use another function
    as an example. Let''s define a predicate `vowel?`, and use it to define another
    procedure:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你现在可能已经厌倦了`square`，让我们用另一个函数作为例子。让我们定义一个谓词`vowel?`，并使用它来定义另一个过程：
- en: '`(define (vowel? letter) (member? letter ''(a e i o u))`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define (vowel? letter) (member? letter ''(a e i o u))`'
- en: Now that we have `vowel?`, we can use it in different procedures. For example,
    one of the problems in 0.3 deals with Pig Latin. If a word starts with a vowel,
    translating that word into Pig Latin is as simple as adding "ay" to the end of
    the word. We're not going to worry about translating words into Pig Latin right
    now; we're just going to define yet another predicate to check if a word starts
    with a vowel.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`vowel?`，我们可以在不同的过程中使用它。例如，0.3 中的一个问题涉及到 Pig Latin。如果一个单词以元音开头，将该单词翻译成
    Pig Latin 就很简单，只需在单词末尾添加“ay”。我们现在不会担心将单词翻译成 Pig Latin；我们只会定义另一个谓词来检查一个单词是否以元音开头。
- en: '`(define (pig-complete? wd) (vowel? (first wd)))`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define (pig-complete? wd) (vowel? (first wd)))`'
- en: As you can see, we used one user-defined procedure (`vowel?`), to define another
    one.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们使用一个用户定义的过程（`vowel?`）来定义另一个过程。
