- en: An Overview - Data Abstraction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述 - 数据抽象
- en: What Is Data Abstraction?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是数据抽象？
- en: Recall Lesson 1 - do you remember [Procedures as Black-Box Abstractions](http://berkeley-cs61as.github.io/textbook/procedures-as-black-box-abstractions.html)?
    You don't have to know how the procedures that are used as arguments for [higher
    order functions](http://berkeley-cs61as.github.io/textbook/hofs-procedures-as-arguments.html)
    were implemented, as long as they work! This allowed us to create generalized,
    "customizable" functions that made our code concise, readable, and *flexible*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 回想第1课 - 你还记得[过程作为黑盒抽象](http://berkeley-cs61as.github.io/textbook/procedures-as-black-box-abstractions.html)吗？你不需要知道用作[高阶函数](http://berkeley-cs61as.github.io/textbook/hofs-procedures-as-arguments.html)参数的过程是如何实现的，只要它们能工作！这使我们能够创建通用的，“可定制”的函数，使我们的代码简洁，可读性强，*灵活*。
- en: The analogous notion for compound data is called **data abstraction**, and it
    is a methodology that enables us to isolate how a compound data object is used
    from the details of how it is constructed from more primitive data objects. In
    other words, you don't need to know how a car's engine works to drive the car.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 复合数据的类似概念称为**数据抽象**，它是一种方法论，使我们能够将复合数据对象的使用方式与如何从更基本的数据对象构造它的细节隔离开来。换句话说，你不需要知道汽车的发动机是如何工作的才能开车。
- en: The basic idea of data abstraction is to structure the programs that use compound
    data objects so that they operate on "abstract data." That is, our programs should
    use data in such a way that it does not make any assumptions on *how* the data
    is stored or extracted. And so, the way data is represented is "concrete" and
    independent from the program that uses it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据抽象的基本思想是结构化使用复合数据对象的程序，使其操作“抽象数据”。也就是说，我们的程序应该以一种不对数据存储或提取方式做任何假设的方式使用数据。因此，数据表示的方式是“具体的”，并且独立于使用它的程序。
- en: Programs and projects that professional programmers write are often accessible
    to the public, who *aren't* all code savvy. If a tech company writes a cool program
    in Python, they won't expect their clients to know how they wrote their program,
    or even how to understand Python, in order to use their product. So how do these
    programmers let non-programmer people to use their creations? Abstraction. This
    is what programming is all about.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 专业程序员编写的程序和项目通常对不懂编程的公众开放。如果一个科技公司用Python编写了一个很酷的程序，他们不会期望他们的客户知道他们如何编写程序，甚至如何理解Python，才能使用他们的产品。那么这些程序员如何让非程序员人群使用他们的作品呢？抽象。这就是编程的全部意义。
- en: 'The interface between these two parts of our system will be a set of procedures,
    called **constructors** and **selectors**:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们系统中这两部分之间的接口将是一组过程，称为**构造函数**和**选择器**：
- en: The **constructor** creates the object that stores our data.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构造函数** 创建存储我们数据的对象。'
- en: The **selector(s)** extracts the data that you will use from the object created
    by the constructor.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择器（selector(s)）** 从构造函数创建的对象中提取您将使用的数据。'
- en: The object that a constructor creates is called an **abstract data type (ADT)**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数创建的对象称为**抽象数据类型（ADT）**。
- en: 'Example: Rational Numbers'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子：有理数
- en: To illustrate this technique, let's consider how to design an interface for
    manipulating rational numbers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这种技术，让我们考虑如何设计一个用于操作有理数的接口。
- en: A rational number is any number that can be expressed as the quotient or the
    fraction (*p/q*) of two integers, where *q* is non-zero. For example, 3/4 is a
    rational number with the denominator 4 and numerator 3, while π is an irrational
    number.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有理数是可以表示为两个整数的商或分数（*p/q*）的任何数，其中*q*不为零。例如，3/4是一个有理数，分母为4，分子为3，而π是一个无理数。
- en: Although the Racket language already accommodates fractions in its dictionary,
    let's try to represent it by creating our own abstract data type. Before we jump
    into making our constructors and selectors, let's first look at the information
    we need.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Racket语言已经在其字典中容纳了分数，让我们尝试通过创建自己的抽象数据类型来表示它。在我们开始制作构造函数和选择器之前，让我们先看看我们需要的信息。
- en: 'The minimal data needed for a complete representation of a rational number
    is the numerator and a denominator. So, we can arbitrarily pick any way to store
    these two numbers. Here we chose to store it in a *pair*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 完整表示有理数所需的最小数据是分子和分母。因此，我们可以任意选择存储这两个数字的方式。这里我们选择将其存储在一个*对*中：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'That''s it for our constructor! It''s simply a procedure that, when called
    with the proper arguments, "creates" a rational number by storing it in a pair.
    Sure, `(3 . 4)` doesn''t really *look* like a fraction, but that''s exactly what
    are selectors are here for. How can we *extract* the numerator and denominator
    from our abstract data type? Take a look:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的构造函数！它只是一个过程，当用适当的参数调用时，通过将其存储在一对中来“创建”一个有理数。当然，`(3 . 4)`看起来并不*像*一个分数，但这正是我们的选择器存在的原因。我们如何*提取*我们的抽象数据类型中的分子和分母？看一看：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The first selector, `numerator`, takes in a rational number as its argument
    and returns its numerator by calling `car` on it. The second selector returns
    the denominator by calling `cdr` on it. And now, our abstract data type implementation
    is complete! We can make a rational number and extract its data like so:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选择器`numerator`接受一个有理数作为其参数，并通过调用`car`来返回其分子。第二个选择器通过调用`cdr`来返回分母。现在，我们的抽象数据类型实现已经完成了！我们可以创建一个有理数并提取其数据，就像这样：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Do you see how, in the calls above, there is nothing that reveals *how* the
    rational number was represented? You've *abstracted* away the method of representing
    your data and left a clean interface that almost anybody can use.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否注意到，在上面的调用中，没有任何内容透露了*有理数*是如何表示的？你已经*抽象*出了表示数据的方法，并留下了一个几乎任何人都可以使用的干净接口。
- en: The constructors and selectors of an abstract data type go hand in hand. The
    selectors for this rational numbers implementation will not work for a different
    implementation of rational numbers. We could have used lists, sentences, decimals,
    etc. The beauty of abstraction is that we *don't know*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象数据类型的构造函数和选择器是相辅相成的。这个有理数实现的选择器对于不同的有理数实现是不起作用的。我们可以使用列表、句子、小数等。抽象的美妙之处在于我们*不知道*。
- en: '**Test Your Understanding**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试您的理解**'
- en: 'Consider the problem of representing line segments in a plane. Each segment
    is represented as a pair of points: a starting point and an ending point.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑在平面中表示线段的问题。每个线段表示为一对点：一个起点和一个终点。
- en: 'Points are represented as a pair of coordinates:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 点被表示为一对坐标：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Define a constructor called make-segment and selectors called start-segment
    and end-segment that define the representation of segments in terms of points.
    You may choose any method of storing the data you wish.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个构造函数称为`make-segment`和选择器称为`start-segment`和`end-segment`，以点的形式定义线段的表示。您可以选择任何您希望存储数据的方法。
- en: Procedures using ADT
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用ADT的过程
- en: To build off of our rational numbers ADT, let's write some procedures that respect
    the abstraction of our implementation. One useful procedure is `print-rat`, which
    actually let's us see what a rational number "looks like" given its abstract representation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了扩展我们的有理数ADT，让我们编写一些尊重我们实现抽象的过程。一个有用的过程是`print-rat`，它实际上让我们看到一个有理数的“外观”，给定其抽象表示。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This way we can pretend our rational number isn't actually a pair. :)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以假装我们的有理数实际上不是一对。:)
- en: 'What''s the use of rational numbers if we can''t do mathematical operations
    on them? Here, we''ve defined some simple arithmetic procedures for our ADT:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不能对有理数进行数学运算，那有理数有什么用呢？在这里，我们为我们的ADT定义了一些简单的算术过程：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice how these procedures *respect* the abstraction. Nowhere in our code do
    we call `cons` to create a rational, or `car`/`cdr` to select the numerator or
    denominator. Failing to do so is called a **data abstraction violation**, but
    we can talk about that in a later section. For now, let's move on to a bigger
    and better example!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这些过程*尊重*抽象。在我们的代码中，我们从不调用`cons`来创建一个有理数，也不调用`car`/`cdr`来选择分子或分母。不这样做被称为**数据抽象违反**，但我们可以在后面的部分讨论这个问题。现在，让我们继续进行更大更好的示例！
- en: '**Test Your Understanding**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试您的理解**'
- en: Using your implementation of line segments above, define a procedure called
    segment-length that takes in a line segment and returns its length.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上面的线段实现，定义一个名为`segment-length`的过程，该过程接受一个线段并返回其长度。
