- en: Phantoms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 幻影
- en: Let's think about a programming pattern we've seen, but not paid attention to.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一个我们见过但没有注意到的编程模式。
- en: 'Patterns: I'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式：I
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Patterns: II'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式：II
- en: '[PRE3]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Patterns: III'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式：III
- en: '[PRE6]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Patterns: IV'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式：IV
- en: '[PRE9]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Patterns, abstracted
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象的模式
- en: 'Typeclass:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 类型类：
- en: '[PRE12]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Where can you find this typeclass?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你在哪里可以找到这个类型类？
- en: '[PRE13]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Monoids
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单子
- en: Instances of `Monoid` must obey some rules.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Monoid` 的实例必须遵守一些规则。'
- en: 'Rule 1: identity element'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 规则 1：单位元素
- en: '[PRE14]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Rule 2: our associative operation *must actually associate*.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 规则 2：我们的结合操作 *必须确实结合*。
- en: '[PRE15]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Rules?
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规则？
- en: Monoids come from abstract algebra.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 单子来自抽象代数。
- en: In abstract algebra, rules that must be true are called *axioms*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在抽象代数中，必须为真的规则被称为 *公理*。
- en: Also called *laws*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 也称为 *规律*。
- en: In Haskell, how are these rules/axioms/laws enforced?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Haskell 中，这些规则/公理/法则是如何强制执行的？
- en: They are not.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们不是。
- en: Monoids for lists
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表的单子
- en: 'Here''s the easiest and most familiar-to-Haskellers case:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单和最熟悉于 Haskell 程序员的情况：
- en: '[PRE16]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Pop quiz:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 快速测验：
- en: What other definition(s) would follow the `Monoid` laws?
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有哪些定义符合 `Monoid` 的规律？
- en: Do they make any sense?
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们有任何意义吗？
- en: Monoids for numbers?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字的单子？
- en: Numbers are an interesting case.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 数字是一个有趣的案例。
- en: 'Addition as monoid:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 加法作为单子：
- en: Identity `0`
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单位 `0`
- en: Associative operator `+`
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结合运算符 `+`
- en: 'Multiplication as monoid:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 乘法作为单子：
- en: Identity `1`
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单位 `1`
- en: Associative operator `*`
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结合运算符 `*`
- en: When do we use typeclasses?
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们何时使用类型类？
- en: Suppose you want to abstract a code pattern into a typeclass.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想将一个代码模式抽象成一个类型类。
- en: Under what circumstances is this likely to work best?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在什么情况下这可能效果最好？
- en: When there is *just one* "canonical" behaviour you expect for a given type.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当对于给定类型只有 *一个* "规范" 行为时。
- en: 'For lists, our `Monoid` instance *is* canonical:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列表，我们的 `Monoid` 实例 *是* 规范的：
- en: Any other behaviour that follows the laws is just *weird*.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循规律的任何其他行为都只是 *奇怪* 的。
- en: 'For numbers, we have two sensible behaviours:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数字，我们有两种合理的行为：
- en: No one `Monoid` instance can be called canonical!
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有一个 `Monoid` 实例可以被称为规范的！
- en: Monoids for multiplication
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 乘法的单子
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Monoids for addition
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加法的单子
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `Either` type
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Either` 类型'
- en: There exists a built-in type named `Either`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个名为 `Either` 的内置类型。
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'By convention:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例：
- en: '`Left` means "something went wrong"'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Left` 表示 "出了问题"'
- en: '`Right` means "result was a success"'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Right` 表示 "结果是成功"'
- en: 'Often used as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 常用如下：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: (where the `String` carries an error message)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: （其中 `String` 携带一个错误消息）
- en: Coding exercise
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码练习
- en: Create a `Monoid` instance that will give the *first success* from a chain of
    `Either` values.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `Monoid` 实例，从一系列 `Either` 值中获得 *第一个成功*。
- en: 'Desired behaviour:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 期望的行为：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You have five minutes.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你有五分钟。
- en: Ambient machinery for the coding exercise
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码练习的环境设备
- en: 'If you import `Data.Monoid` you will have the following definitions available:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你导入 `Data.Monoid`，你将有以下定义可用：
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Language hitch
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语言障碍
- en: Did you try to write code like this?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你试过写这样的代码吗？
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You surely ran into trouble while trying to define `mempty`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当你试图定义 `mempty` 时肯定会遇到麻烦。
- en: Why?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？
- en: Type quantification
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型量化
- en: In Haskell, type variables are *quantified*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Haskell 中，类型变量被 *量化*。
- en: They stand in for all types in a given domain.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 它们代表给定域中的所有类型。
- en: If there's no typeclass mentioned, a type variable is implicitly *universally*
    quantified.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有提到类型类，类型变量隐式地被 *普遍* 量化。
- en: 'We can write these quantifiers explicitly:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以明确地写出这些量词：
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '"The `length` function must accept any list, no matter what type of data it
    contains."'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '"`length` 函数必须接受任何列表，无论它包含什么类型的数据。"'
- en: Universal quantification
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全称量化
- en: Why is universal quantification relevant here?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 全称量化在这里为什么相关？
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Universal quantification
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全称量化
- en: Why is universal quantification relevant here?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 全称量化在这里为什么相关？
- en: '[PRE26]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Since `mempty` gives a "zero element", it must somehow produce a zero element
    for the type `a`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `mempty` 给出了一个 "零元素"，它必须以某种方式为类型 `a` 产生一个零元素。
- en: But since `a` is universally quantified, it stands in for *every type*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但由于 `a` 是普遍量化的，它代表 *每种类型*。
- en: Clearly there is no one legal value that is of every type.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 显然没有一个合法的值适用于每种类型。
- en: It is impossible to write a sensible instance.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 不可能编写一个明智的实例。
- en: A possible fix
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个可能的修复
- en: 'This won''t typecheck either:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这也不会通过类型检查：
- en: '[PRE27]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'However, we can make it compile by adding the following to the top of our source
    file:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以通过在源文件顶部添加以下内容使其编译通过：
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Pragmas
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指示
- en: 'This is a specially formatted comment:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个特殊格式的注释：
- en: '[PRE29]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '"Special" comments usually contain directives ("pragmas") that change the compiler''s
    behaviour.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '"特殊" 注释通常包含改变编译器行为的指令（"指示"）。'
- en: The `LANGUAGE` pragma enables non-standard language features.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`LANGUAGE`指令启用非标准语言特性。'
- en: '[PRE30]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`FlexibleInstances` makes the compiler consider [more typeclass instances as
    legal](http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#instance-rules)
    than the Haskell 98 standard allows.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`FlexibleInstances`使编译器考虑[更多类型类实例作为合法](http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#instance-rules)，而不仅仅是
    Haskell 98 标准允许的。'
- en: More about pragmas
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多关于指令的内容
- en: You'll see a few more pragmas as we progress.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的进展，你会看到更多指令。
- en: Some are widely used, others are not.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有些被广泛使用，有些则不是。
- en: Some are safe, others are not...
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有些是安全的，有些不是...
- en: up to and including allowing the typechecker to go into an infinite loop! (`UndecidableInstances`)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直到让类型检查器陷入无限循环！（`UndecidableInstances`）
- en: '`FlexibleInstances` is widely used and often safe.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`FlexibleInstances`被广泛使用且通常安全。'
- en: Back to our fix
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回到我们的修复
- en: 'This *will* typecheck:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这*将*通过类型检查：
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: But is it canonical?
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 但它是否是规范的？
- en: Canonicality
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规范性
- en: Why worry about our `Monoid` instance being canonical?
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要担心我们的`Monoid`实例是否规范？
- en: 'Any time you declare an instance of any typeclass:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 每当声明任何类型类的实例时：
- en: It is automatically made available to every module that imports your module.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它会自动提供给导入你模块的每个模块。
- en: You can't say "I don't want to import instance `X`" :-(
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能说“我不想导入实例`X`” :-(
- en: If you define a weird instance of a popular typeclass, you'll "infect" people
    who import your module.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为一个流行类型类定义一个奇怪的实例，你会“感染”那些导入你模块的人。
- en: Make sure your instances make sense!
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的实例是有意义的！
- en: Finally!
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 终于！
- en: Via use of `newtype`, we don't accidentally associate a silly `Monoid` instance
    with `Either String a`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`newtype`，我们不会意外地将一个愚蠢的`Monoid`实例与`Either String a`关联起来。
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: HTTP POST
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP POST
- en: Let's upload some vitally important data to a server.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向服务器上传一些至关重要的数据。
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Multipart form upload
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多部分表单上传
- en: When we POST multipart data to a form (e.g. uploading a photo), some information
    is mandatory, while other stuff is optional.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向表单 POST 多部分数据（例如上传照片）时，一些信息是强制性的，而其他内容是可选的。
- en: '[PRE34]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Uploading data
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上传数据
- en: Suppose we want to build a HTTP client that supports POST.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想构建一个支持 POST 的 HTTP 客户端。
- en: Web pages tend to expect multipart form data, while REST APIs have different
    needs.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 网页通常期望多部分表单数据，而 REST API 有不同的需求。
- en: Here are some types that let us represent a POST body.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些类型，让我们能够表示一个 POST 主体。
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Can you write a `Monoid` instance for `Payload`?
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你能为`Payload`编写一个`Monoid`实例吗？
- en: Decide for yourself, then discuss with a partner for 2 minutes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 自行决定，然后与伙伴讨论 2 分钟。
- en: Huh
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哼
- en: 'This part is easy enough:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分足够简单：
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: What about the rest of `mappend`?
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的`mappend`呢？
- en: Semantic problems
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语义问题
- en: It is easy to see how we can glom together `Params` or `FormData`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易看出我们如何将`Params`或`FormData`粘合在一起。
- en: '[PRE37]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: However, mixing `Raw` with `Params`, or `Params` with `FormData`, is nonsensical.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，混合`Raw`和`Params`，或`Params`和`FormData`，是荒谬的。
- en: A straightforward `Monoid` instance will have to crash (!!!) if we try this.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一个直接的`Monoid`实例将不得不崩溃（！！！）如果我们尝试这样做。
- en: Handling failure (badly)
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理失败（糟糕地）
- en: What if we use the `Maybe` type to represent a failed attempt to `mappend`?
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`Maybe`类型来表示对`mappend`的失败尝试呢？
- en: '[PRE38]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Yay?
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 耶？
- en: This compiles, but it has a conceptual problem.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这样编译是可以的，但存在一个概念问题。
- en: Every time we use `mappend`, we have to pattern-match the result to see if the
    `mappend` succeeded.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次我们使用`mappend`，我们都必须模式匹配结果，看看`mappend`是否成功。
- en: In API design circles, this is called "crappy".
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在 API 设计圈子中，这被称为“糟糕”。
- en: But wait, it gets worse!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等，情况会变得更糟！
- en: O error message, where art thou?
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哦，错误消息，你在哪里？
- en: 'Let me try this in `ghci`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我在`ghci`中尝试一下：
- en: '[PRE39]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Overlapping instances
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重叠实例
- en: Remember `FlexibleInstances`?
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得`FlexibleInstances`吗？
- en: It allowed us to write a `Monoid` instance for the type `Maybe Payload`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许我们为类型`Maybe Payload`编写一个`Monoid`实例。
- en: Trouble is, `Data.Monoid` already defined an instance for `Maybe a`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 麻烦的是，`Data.Monoid`已经为`Maybe a`定义了一个实例。
- en: '`FlexibleInstances` allows these two *definitions* to coexist happily.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`FlexibleInstances`允许这两个*定义*快乐地共存。'
- en: But when we want to *use* an instance, GHC doesn't know which one to use!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当我们想*使用*一个实例时，GHC 不知道该使用哪一个！
- en: Overlapping instances
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重叠实例
- en: 'Enter the `OverlappingInstances` pragma:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 进入`OverlappingInstances`指令：
- en: '[PRE40]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This allows multiple instances to coexist *and* be used.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许多个实例共存*并*被使用。
- en: The most specific instance that is visible will be used.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 可见的最具体实例将被使用。
- en: A very handy extension!
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常方便的扩展！
- en: Also a big semantic gun pointing at your foot.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也是一个指向你脚的大语义枪。
- en: Problems with overlapping instances
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重叠实例的问题
- en: Why worry about `OverlappingInstances`?
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要担心`OverlappingInstances`？
- en: Makes it very easy for incorrect programs to still typecheck.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使得不正确的程序仍然可以通过类型检查。
- en: Can cause confusing error messages.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能导致混乱的错误消息。
- en: A program that typechecks can have its meaning changed by adding an instance
    declaration in some remote module.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个经过类型检查的程序可以通过在某个远程模块中添加一个实例声明来改变其含义。
- en: On the plus side, you can [publish papers about their problems](http://web.cecs.pdx.edu/~jgmorris/pubs/morris-icfp2010-instances.pdf),
    so they're not bad for an academic career.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，你可以[发表关于它们问题的论文](http://web.cecs.pdx.edu/~jgmorris/pubs/morris-icfp2010-instances.pdf)，所以对于学术生涯来说并不糟糕。
- en: Checking in
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查中
- en: 'We have a `Monoid` instance that:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个`Monoid`实例：
- en: Has a janky API
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个糟糕的API
- en: Uses a dodgy language extension
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用了一个不靠谱的语言扩展
- en: Can we do better?
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能做得更好吗？
- en: Phantom types
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 幻影类型
- en: Let's add a type parameter on the left hand side of our `Payload` type.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`Payload`类型的左侧添加一个类型参数。
- en: '[PRE41]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The type variable `a` *does not appear in the RHS*.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 类型变量`a`*不出现在RHS中*。
- en: We call this a *phantom type*.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称之为*幻影类型*。
- en: What's it for?
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 它是用来做什么的？
- en: A tiny upload API
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个小型的上传API
- en: '[PRE42]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Consider the types
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑这些类型
- en: '[PRE44]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Notice:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: The first function returns a `Payload [Param]`
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个函数返回一个`Payload [Param]`
- en: The second returns a `Payload [Part]`
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个返回一个`Payload [Part]`
- en: The phantom parameter makes these *distinct types*.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 幻影参数使这些*类型不同*。
- en: The runtime representation is the same in each case.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每种情况下，运行时表示是相同的。
- en: The compiler prevents us from mixing the two by accident.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器通过防止我们意外混合两者。
- en: Code moment
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码片段
- en: Please write a body for `addParams` below.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 请为下面的`addParams`写一个主体。
- en: '[PRE45]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Download the code you''ll need:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 下载你需要的代码：
- en: '[PRE46]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You have five minutes.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你有五分钟。
- en: Making this all work
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让这一切都起作用
- en: We have a constrained public API for creating `Payload` values.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为创建`Payload`值有一个受限的公共API。
- en: '[PRE47]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How do we enforce this?
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何强制执行这一点？
- en: We export the *name* of the type `Part`, but *not any of its constructors*.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导出了类型`Part`的*名称*，但*不导出任何构造函数*。
- en: Exporting a type
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出一个类型
- en: The `(..)` notation below means "export the type `Part` and all of its constructors".
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`(..)`表示“导出类型`Part`及其所有构造函数”。
- en: '[PRE48]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Exporting a type
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出一个类型
- en: The `(..)` notation below means "export the type `Part` and all of its constructors".
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`(..)`表示“导出类型`Part`及其所有构造函数”。
- en: '[PRE49]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Notice that we omit the `(..)` below, meaning "export the type `Payload`, but
    *not any of its constructors*".
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 注意下面我们省略了`(..)`，表示“导出类型`Payload`，但*不导出任何构造函数*”。
- en: '[PRE50]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Exporting a type
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出一个类型
- en: The `(..)` notation below means "export the type `Part` and all of its constructors".
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`(..)`表示“导出类型`Part`及其所有构造函数”。
- en: '[PRE51]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: So we export the `Payload` type, and *only* the functions that we defined and
    control ("smart constructors") that construct values of this type.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们导出`Payload`类型，*只有*我们定义和控制的函数（“智能构造函数”）来构造这种类型的值。
- en: '[PRE52]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Trying it out
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下
- en: 'In `ghci`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ghci`中：
- en: '[PRE53]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This uses my favourite operator from `Data.Monoid`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了我从`Data.Monoid`中喜欢的运算符：
- en: '[PRE54]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: What do we get if we try this?
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试这样做，我们会得到什么？
- en: '[PRE55]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Last of the monoids
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后的幺半群
- en: For which of the following should we write `Monoid` instances?
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪些情况应该写`Monoid`实例？
- en: '[PRE56]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Why care so much about monoids?
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么这么在意幺半群？
- en: 'Monoids have many merits:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 幺半群有许多优点：
- en: Simple
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单
- en: Easy for clients to use
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户容易使用
- en: Force you to address API design problems early on
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强迫你早期解决API设计问题
- en: Monoids without an identity
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 没有单位的幺半群
- en: Like the abstract algebraic approach?
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢抽象代数的方法吗？
- en: 'A package on Hackage named `semigroups` gives us monoids *without* an identity
    operation: semigroups.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Hackage上的一个名为`semigroups`的包为我们提供了没有单位操作的幺半群：半群。
- en: 'Alas:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 唉：
- en: The `Monoid` type was developed before the `semigroups` package
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Monoid`类型是在`semigroups`包之前开发的'
- en: The two should be related, but thanks to this accident of history are not
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这两者应该有关联，但由于历史原因，它们并没有
- en: Principles
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原则
- en: Why care about phantom types and monoids?
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要关心幻影类型和幺半群？
- en: We want to build the simplest correct libraries we can
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们想要构建尽可能简单正确的库
- en: Monoids help us focus on simplicity.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 幺半群帮助我们专注于简单性。
- en: Phantom types make it easier to build APIs where flat-out broken behaviours
    can be made impossible by the compiler.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 幻影类型使得构建API更容易，编译器可以防止绝对错误的行为。
- en: Mutable variables
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可变变量
- en: 'We''ve already seen the very handy `MVar` type, which represents a "blocking
    mutable box": we can put a value in or take one out, but we''ll block if we put
    when full or take when empty.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了非常方便的`MVar`类型，它表示一个“阻塞可变盒子”：我们可以放入一个值或取出一个值，但如果放入时已满或取出时为空，我们将被阻塞。
- en: Even though `MVar`s are the fastest blocking concurrent structure in the industry
    (they made the the Kessel Run in less than twelve parsecs!), we don't always want
    blocking semantics.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`MVar`是行业中最快的阻塞并发结构（它在不到十二秒的时间内完成了Kessel跑道！），但我们并不总是希望阻塞语义。
- en: For cases where we want *non-*blocking updates, there's the `IORef` type, which
    gives us mutable references.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要*非*阻塞更新的情况，有`IORef`类型，它提供了可变引用。
- en: '[PRE57]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Managing mutation
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理变异
- en: 'Application writers are often faced with a question like this:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序编写者经常面临这样的问题：
- en: I have a big app, and parts of it need their behaviour tweaked by an administrator
    at runtime.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我有一个大型应用程序，其中的部分需要在运行时由管理员调整其行为。
- en: There are of course many ways to address this sort of problem.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，解决这种问题的方法有很多种。
- en: Let's consider one where we use a reference to a piece of config data.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个使用配置数据片段引用的情况。
- en: 'Any code that''s executing in the `IO` monad can, if it knows the name of the
    config reference, retrieve the current config:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在`IO`单子中执行的任何代码，如果知道配置引用的名称，都可以检索当前配置：
- en: '[PRE58]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The trouble is, ill-behaved code could clearly also *modify* the current configuration,
    and leave us with a debugging nightmare.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 麻烦的是，不规范的代码显然也可能*修改*当前配置，并让我们陷入调试噩梦。
- en: Phantom types to the rescue!
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 幻影类型来拯救！
- en: Let's create a new type of mutable reference.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一种新类型的可变引用。
- en: We use a phantom type `t` to statically track whether a piece of code is allowed
    to modify the reference or not.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用幻影类型`t`来静态跟踪代码是否被允许修改引用。
- en: '[PRE59]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Remember, our use of `newtype` here means that the `Ref` type only exists at
    compile time: it imposes *no* runtime cost.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们在这里使用`newtype`意味着`Ref`类型仅在编译时存在：它不会产生*任何*运行时成本。
- en: 'Since we are using a phantom type, we don''t even need values of our access
    control types:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了幻影类型，我们甚至不需要访问控制类型的值：
- en: '[PRE60]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: We're already in a good spot! Not only are we creating compiler-enforced access
    control, but it will have *zero* runtime cost.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经处于一个良好的位置！我们不仅创建了编译器强制执行的访问控制，而且它将*零*运行时成本。
- en: Creating a mutable reference
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个可变引用
- en: To create a new reference, we just have to ensure that it has the right type.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新引用，我们只需确保它具有正确的类型。
- en: '[PRE61]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Reading and writing a mutable reference
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取和写入可变引用
- en: Since we want to be able to read both read-only and read-write references, we
    don't need to mention the access mode when writing a type signature for `readRef`.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们希望能够读取只读和读写引用，因此在为`readRef`编写类型签名时不需要提及访问模式。
- en: '[PRE62]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Of course, code can only write to a reference if the compiler can statically
    prove (via the type system) that it has write access.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，只有编译器可以通过类型系统静态证明代码具有写访问权限时，代码才能写入引用。
- en: '[PRE63]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Converting a reference to read-only
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将引用转换为只读
- en: 'This function allows us to convert any kind of reference into a read-only reference:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数允许我们将任何类型的引用转换为只读引用：
- en: '[PRE64]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: In order to prevent clients from promoting a reference from read-only to read-write,
    we do *not* provide a function that goes in the opposite direction.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止客户端将只读引用提升为读写引用，我们*不*提供相反方向的函数。
- en: 'We also use the familiar technique of constructor hiding at the top of our
    source file:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在源文件顶部使用熟悉的构造函数隐藏技术：
- en: '[PRE65]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Further reading
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'A *really* good read:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 一篇*非常*好的阅读：
- en: '[Data analysis with monoids](http://twdkz.wordpress.com/2013/05/31/data-analysis-with-monoids/)'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用单子进行数据分析](http://twdkz.wordpress.com/2013/05/31/data-analysis-with-monoids/)'
- en: 'Monoids for MapReduce:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 用于MapReduce的单子：
- en: '[Google’s MapReduce Programming Model---Revisited](http://userpages.uni-koblenz.de/~laemmel/MapReduce/paper.pdf)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Google的MapReduce编程模型---再探](http://userpages.uni-koblenz.de/~laemmel/MapReduce/paper.pdf)'
