- en: 'Reading 27: Team Version Control'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读27：团队版本控制
- en: Software in 6.005
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.005中的软件
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| 免受错误影响 | 易于理解 | 准备好变化 |'
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 今天正确，未来也正确。 | 与未来的程序员清晰沟通，包括未来的自己。 | 设计以适应变化而无需重写。 |'
- en: Objectives
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目标
- en: Review Git basics and the commit graph
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复习Git基础知识和提交图
- en: Practice multi-user Git scenarios
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习多用户Git场景
- en: Git workflow
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git工作流程
- en: You’ve been using Git for problem sets and in-class exercises for a while now.
    Most of the time, you haven’t had to coordinate with other people pushing and
    pulling to and from the same repository as you at the same time. For the group
    projects, that will change.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经使用Git进行问题集和课堂练习一段时间了。大多数情况下，您不必与其他人协调推送和拉取到同一存储库，并且与您同时进行。对于团队项目，情况将发生变化。
- en: In this reading, prepare for some in-class Git exercises by reviewing what you
    know and brushing up on some commands. Now that you’re more comfortable with Git
    basics, it’s a good time to go back and review some of the resources from the
    beginning of the semester.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本阅读中，通过回顾您所了解的内容并熟悉一些命令，为课堂Git练习做好准备。现在您对Git基础知识更加熟悉，是时候回顾本学期初的一些资源了。
- en: 'Review [Inventing version control](../05-version-control/#inventing_version_control):
    one developer, multiple developers, and branches.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[发明版本控制](../05-version-control/#inventing_version_control)：一个开发人员，多个开发人员和分支。
- en: If you need to, review [Learn the Git workflow](../../getting-started/#git)
    from the *Getting Started* page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以查看[学习Git工作流程](../../getting-started/#git)来自*入门*页面。
- en: Viewing commit history
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看提交历史
- en: Review **[2.3 Viewing the Commit History](http://git-scm.com/book/en/Git-Basics-Viewing-the-Commit-History)**
    from *Pro Git*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从*Pro Git*中查看**[2.3 查看提交历史](http://git-scm.com/book/en/Git-Basics-Viewing-the-Commit-History)**。
- en: You don’t need to remember all the different command-line options presented
    in the book! Instead, learn what’s possible so you know what to search for when
    you need it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要记住书中介绍的所有不同命令行选项！相反，了解可能的操作，这样当您需要时就知道要搜索什么。
- en: 'Clone the example repo from [*Version Control*](../05-version-control/#copy_an_object_graph_with_git_clone):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从[*版本控制*](../05-version-control/#copy_an_object_graph_with_git_clone)克隆示例存储库：
- en: '**`https://github.com/mit6005/fa16-ex05-hello-git.git`**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**`https://github.com/mit6005/fa16-ex05-hello-git.git`**'
- en: Use `log` commands to make sure you understand the history of the repo.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`log`命令确保您了解存储库的历史。
- en: Graph of commits
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交的图表
- en: Recall that the history recorded in a Git repository is a directed acyclic graph.
    The history of any particular branch in the repo (such as the default `master`
    branch) starts at some initial commit, and then its history may split apart and
    come back together, if multiple developers made changes in parallel (or if a single
    developer worked on two different machines without committing-pushing-pulling
    before the switch).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Git存储库中记录的历史是一个有向无环图。存储库中任何特定分支（如默认的`master`分支）的历史始于某个初始提交，然后如果多个开发人员并行进行更改（或者单个开发人员在切换之前在两台不同的机器上工作而没有提交-推送-拉取），则其历史可能会分裂并重新汇合。
- en: 'Here’s the output of [`git lol`](../../getting-started/#config-git) for the
    example repository, which shows an ASCII-art graph:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是示例存储库的[`git lol`](../../getting-started/#config-git)输出，显示了一个ASCII艺术图：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And here is a diagram of the DAG:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是DAG的图表：
- en: '![](http://web.mit.edu/6.005/www/fa16/classes/27-team-version-control../05-version-control/figures/hello-git-history-trees.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](http://web.mit.edu/6.005/www/fa16/classes/27-team-version-control../05-version-control/figures/hello-git-history-trees.png)'
- en: In the `ex05-hello-git` example repo, make sure you can explain where the history
    of `master` splits apart, and where it comes back together.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ex05-hello-git`示例存储库中，确保您能解释`master`历史何时分裂，何时重新汇合。
- en: Review [Merging](../05-version-control/#merging) from the *Version Control*
    reading.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从*版本控制*阅读中查看[合并](../05-version-control/#merging)。
- en: You should understand every step of the process, and how it relates to the result
    in the example repo.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该理解整个过程的每一步，以及它与示例存储库中的结果之间的关系。
- en: Review the [Getting Started section on merges](../../getting-started/#merges),
    including merging and merge conflicts.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[合并](../../getting-started/#merges)部分，包括合并和合并冲突。
- en: reading exercises
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Merge
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 合并
- en: 'Alice and Bob both start with the same Java file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Alice和Bob都从相同的Java文件开始：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| Alice changes `greet(..)`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '| Alice更改`greet(..)`：'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '| Bob changes `greeting()`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '| Bob 改变 `greeting()`：'
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Dangerous Merge Ahead
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 危险的合并在前方
- en: 'Same starting program:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的起始程序：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| Alice changes `greeting()`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '| Alice 改变 `greeting()`：'
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| Bob changes how the functions work together:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '| Bob 改变了函数如何一起工作：'
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Continue Merging
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 继续合并
- en: 'Same starting program:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的起始程序：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Alice changes `greet(..)` to return instead of print:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Alice 改变 `greet(..)` 以返回而不是打印：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Bob creates a new file, `Main.java`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Bob 创建了一个新文件，`Main.java`：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Using version control in a team
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在团队中使用版本控制
- en: 'Every team develops its own standards for version control, and the size of
    the team and the project they’re working on is a major factor. Here are some guidelines
    for a small-scope team project of the kind you will undertake in 6.005:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个团队都为版本控制制定了自己的标准，团队的规模和他们正在处理的项目是一个主要因素。以下是适用于你将在 6.005 中进行的小范围团队项目的一些指导方针：
- en: '**Communicate.** Tell your teammates what you’re going to work on. Tell them
    that you’re working on it. And tell them that you worked on it. Communication
    is the best way to avoid wasted time and effort cleaning up broken code.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**沟通。** 告诉您的队友您将要做什么。告诉他们您正在做这件事。告诉他们您已经做过了。沟通是避免浪费时间和精力清理破损代码的最佳方式。'
- en: '**Write specs.** Necessary for the things we care about in 6.005, and part
    of good communication.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**撰写规范。** 对于我们在 6.005 中关心的事项是必要的，也是良好沟通的一部分。'
- en: '**Write tests.** Don’t wait for a giant pile of code to accumulate before you
    try to test it. Avoid having one person write tests while another person writes
    implementation (unless the implementation is a prototype you plan to throw away).
    Write tests first to make sure you agree on the specs. Everyone should take responsibility
    for the correctness of their code.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编写测试。** 不要等待大量代码堆积起来才尝试进行测试。避免一个人编写测试，另一个人编写实现（除非实现是你计划放弃的原型）。首先编写测试以确保您对规范的理解一致。每个人都应对其代码的正确性负责。'
- en: '**Run the tests.** Tests can’t help you if you don’t run them. Run them before
    you start working, run them again before you commit.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行测试。** 如果不运行测试，测试是无法帮助您的。在开始工作之前运行它们，再次在提交之前运行它们。'
- en: '**Automate.** You’ve already automated your tests with a tool like JUnit, but
    now you want to automate running those tests whenever the project changes. For
    6.005 group projects, we provide Didit as a way to automatically run your tests
    every time a team member pushes to Athena. This also removes “it worked on my
    machine” from the equation: either it works in the automated build, or it needs
    to be fixed.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化。** 您已经使用像 JUnit 这样的工具自动化了您的测试，但现在您希望在项目更改时自动运行这些测试。对于 6.005 组项目，我们提供
    Didit 作为一种在团队成员向 Athena 推送时自动运行测试的方式。这也消除了“它在我的机器上运行正常”的问题：它要么在自动构建中正常工作，要么需要修复。'
- en: '**Review what you commit.** Use `git diff --staged` or a GUI program to see
    what you’re about to commit. Run the tests. Don’t use `commit -a`, that’s a great
    way to fill your repo with `println`s and other stuff you didn’t mean to commit.
    Don’t annoy your teammates by committing code that doesn’t compile, spews debug
    output, isn’t actually used, etc.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查您提交的内容。** 使用 `git diff --staged` 或 GUI 程序查看您即将提交的内容。运行测试。不要使用 `commit -a`，这是填充您的仓库与
    `println` 和其他您不打算提交的内容的绝佳方式。不要通过提交无法编译、产生调试输出、实际上未使用等代码来惹恼您的队友。'
- en: '**Pull before you start working.** Otherwise, you probably don’t have the latest
    version as your starting point — you’re editing an old version of the code! You’re
    guaranteed to have to merge your changes later, and you’re in danger of having
    to waste time resolving a merge conflict.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开始工作前先拉取最新版本。** 否则，您可能没有最新版本作为起点 —— 您正在编辑旧版本的代码！您肯定要稍后合并您的更改，并且有可能浪费时间解决合并冲突。'
- en: '**Sync up.** At the end of a day or at the end of a work session, make sure
    everyone has pushed and pulled all the changes, you’re all at the same commit,
    and everyone is satisfied with the state of the project.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**同步。** 在一天结束或工作会话结束时，确保每个人都已推送和拉取所有更改，大家都处于相同的提交状态，并且每个人对项目状态满意。'
- en: We don’t recommend using features like branching or rebasing for 6.005-sized
    projects.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不建议在 6.005 大型项目中使用分支或变基等功能。
- en: We do strongly recommend working together in the same place at the same time,
    especially if this is your first group software engineering experience.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议在同一时间、同一地点一起工作，特别是如果这是你第一次进行团队软件工程体验。
- en: reading exercises
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Team version control
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 团队版本控制
- en: Which of these demonstrate good team software development practice?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些哪些展示了良好的团队软件开发实践？
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）（缺少答案）（缺少答案）（缺少答案）（缺少答案）（缺少答案）
- en: (missing explanation)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: Team project
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 团队项目
- en: Most class times during the project phase will be devoted to group work.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 项目阶段的大部分课时将用于团队合作。
- en: These classes are required, just as normal classes are, and you must check in
    with your project mentor TA during class.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些课程是必修课，就像普通课程一样，你必须在课堂上与你的项目导师 TA 进行沟通。
