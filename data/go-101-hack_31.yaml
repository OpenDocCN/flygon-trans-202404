- en: Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: Debugging
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试
- en: 'No one can write bug-free code, so debugging is a requisite skill for every
    software engineer. Here are some tips about debugging `Go` programs:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 没有人能写出无bug的代码，所以调试是每个软件工程师必备的技能。以下是关于调试`Go`程序的一些技巧：
- en: (1) Print
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: (1) 打印
- en: Yes! Printing logs seems the easiest method, but it is indeed the most effective
    approach in most cases. `Go` has provided a big family of printing functions in
    [fmt](https://golang.org/pkg/fmt/) package, and using them neatly is an expertise
    you should grasp.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！打印日志似乎是最简单的方法，但实际上在大多数情况下它是最有效的方法。`Go`在[fmt](https://golang.org/pkg/fmt/)包中提供了一大家族的打印函数，而且整洁地使用它们是你应该掌握的专业技能。
- en: (2) Debugger
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: (2) 调试器
- en: In some scenarios, maybe you need the specialized debugger tools to help you
    spot the root cause. You can use `gdb`, but since "`GDB does not understand Go
    programs well.`" (from [here](https://golang.org/doc/gdb)), I suggest taking [Delve](https://github.com/derekparker/delve),
    a dedicated debugger for `Go`, instead.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，也许你需要专门的调试工具来帮助你找出根本原因。你可以使用`gdb`，但由于"`GDB对Go程序的理解不够好。`"（来自[这里](https://golang.org/doc/gdb)），我建议使用[Delve](https://github.com/derekparker/delve)，一个专门为`Go`设计的调试器。
- en: No matter using `gdb` or `Delve`, if you want to debug the executable file,
    you must pass `-gcflags "-N -l"` during compiling binary to disable code optimization,
    else some weird things can happen during debugging, such as you can't print the
    value of an already declared variable.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是使用`gdb`还是`Delve`，如果你想调试可执行文件，你必须在编译二进制文件时传递`-gcflags "-N -l"`来禁用代码优化，否则在调试过程中可能会发生一些奇怪的事情，比如你无法打印已声明变量的值。
- en: 'Except debugging the precompiled file, `Delve` can compile and debug the code
    on the fly, see the following example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 除了调试预编译文件，`Delve`可以即时编译和调试代码，看下面的例子：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Debugging flow is like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 调试流程如下：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Compared with `gdb`, `Delve` doesn't provide `start` command, so you need to
    set breakpoint first, then run `continue` command. You can see, `Delve` provides
    fruitful commands, e.g., you can check every goroutine status, so I think you
    should practice it frequently, and you will love it!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与`gdb`相比，`Delve`不提供`start`命令，所以你需要先设置断点，然后运行`continue`命令。你可以看到，`Delve`提供了丰富的命令，例如，你可以检查每个goroutine的状态，所以我认为你应该经常练习它，你会喜欢它的！
- en: Happy debugging!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 开心调试！
