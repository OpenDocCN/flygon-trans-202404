- en: Homework 3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业 3
- en: Template
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板
- en: 'Type the following command at the terminal to copy the template file to the
    current directory (note the period at the end):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端输入以下命令将模板文件复制到当前目录（注意末尾的句点）：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Or you can download the template [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw3.rkt).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以在[这里](http://inst.eecs.berkeley.edu/~cs61as/templates/hw3.rkt)下载模板。
- en: Autograder
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动评分程序
- en: If you are working on the lab computers, the `grader` command will run the autograder.
    If you are working on your own personal machine, you should download [grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)
    and the [HW 3 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw3-tests.rkt).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在实验室计算机上工作，`grader` 命令将运行自动评分程序。如果你在自己的个人机器上工作，你应该下载[grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)和[HW
    3 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw3-tests.rkt)。
- en: 'Exercise 1: Invariant for Fast Exponentiation'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '练习 1: 快速指数不变量'
- en: 'Here is the `fast-expt` procedure from earlier in this lesson:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是之前课程中的`fast-expt`过程：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Design a procedure that evolves an iterative exponentiation process that uses
    successive squaring and uses a logarithmic number of steps, as does `fast-expt`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个过程，演变出一个使用连续平方的迭代求幂过程，并使用对数数量的步骤，就像`fast-expt`一样。
- en: '(Hint: Using the observation that (*b*^(*n*/2))² = (*b*²)^(*n*/2), keep, along
    with the exponent *n* and the base *b*, an additional state variable *a*, and
    define the state transformation in such a way that the product *a b^n* is unchanged
    from state to state. At the beginning of the process *a* is taken to be 1, and
    the answer is given by the value of *a* at the end of the process. In general,
    the technique of defining an invariant quantity that remains unchanged from state
    to state is a powerful way to think about the design of iterative algorithms.)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: （提示：利用观察到的事实(*b*^(*n*/2))² = (*b*²)^(*n*/2)，保持，连同指数*n*和基数*b*，一个额外的状态变量*a*，并定义状态转换，使得乘积*a
    b^n*从一个状态到另一个状态保持不变。在过程开始时*a*被取为 1，答案由过程结束时的*a*的值给出。一般来说，定义一个在状态之间保持不变的不变量数量是思考设计迭代算法的强大方式。）
- en: 'Exercise 2: Golden Ratio (Optional)'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '练习 2: 黄金比例（可选）'
- en: Read the subsection on [finding fixed points of functions](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_Temp_106)
    in SICP, and do [Exercise 1.35](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.35).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读 SICP 中关于[查找函数的不动点](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_Temp_106)的子章节，并完成[练习
    1.35](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%25_thm_1.35)。
- en: 'Exercise 3: `cont-frac`'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '练习 3: `cont-frac`'
- en: Part 1
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 1 部分
- en: 'An infinite *continued* fraction is an expression of the form:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 无限*连分数*是一个形式为：
- en: '[mathjax]f=\frac{N_1}{D_1+\frac{N_2}{D_2+\frac{N_3}{D_3+\cdots}}}[/mathjax]'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[mathjax]f=\frac{N_1}{D_1+\frac{N_2}{D_2+\frac{N_3}{D_3+\cdots}}}[/mathjax]'
- en: As an example, one can show that
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，可以证明
- en: '[mathjax]\frac{1}{\phi}=\frac{1}{1+\frac{1}{1+\frac{1}{1+\cdots}}}[/mathjax]'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[mathjax]\frac{1}{\phi}=\frac{1}{1+\frac{1}{1+\frac{1}{1+\cdots}}}[/mathjax]'
- en: 'where [mathjaxinline]\phi=\frac{1+\sqrt{5}}{2}[/mathjaxinline] is the golden
    ratio. One way to approximate an infinite continued fraction is to truncate the
    expansion after a given number of terms. Such a truncation—a so-called *[mathjaxinline]k[/mathjaxinline]-term
    finite continued fraction*—has the form:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 其中[mathjaxinline]\phi=\frac{1+\sqrt{5}}{2}[/mathjaxinline]是黄金比例。近似无限连分数的一种方法是在给定项数后截断展开。这种截断——所谓的*[mathjaxinline]k[/mathjaxinline]项有限连分数*——具有以下形式：
- en: '[mathjax]\frac{N_1}{D_1+\frac{N_2}{\ddots+\frac{N_k}{D_k}}}[/mathjax]'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[mathjax]\frac{N_1}{D_1+\frac{N_2}{\ddots+\frac{N_k}{D_k}}}[/mathjax]'
- en: Suppose that `n` and `d` are procedures of one argument (the term index [mathjaxinline]i[/mathjaxinline])
    that return the [mathjaxinline]N[/mathjaxinline] and [mathjaxinline]D[/mathjaxinline]
    of the [mathjaxinline]i[/mathjaxinline]-th term of the continued fraction. Define
    a procedure `cont-frac` such that evaluating `(cont-frac n d k)` computes the
    value of the [mathjaxinline]k[/mathjaxinline]-term finite continued fraction.
    Check your procedure by approximating [mathjaxinline]\frac{1}{\phi}[/mathjaxinline]
    using
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`n`和`d`是一个参数（项索引[mathjaxinline]i[/mathjaxinline]）的过程，返回连分数的第[mathjaxinline]i[/mathjaxinline]项的[mathjaxinline]N[/mathjaxinline]和[mathjaxinline]D[/mathjaxinline]。定义一个过程`cont-frac`，使得评估`(cont-frac
    n d k)`计算[mathjaxinline]k[/mathjaxinline]项有限连分数的值。通过近似[mathjaxinline]\frac{1}{\phi}[/mathjaxinline]来检查你的过程
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: for successive values of `k`. How large must you make `k` in order to get an
    approximation that is accurate to 4 decimal places?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于连续的`k`值。为了获得精确到小数点后 4 位的近似值，你需要将`k`设定为多大？
- en: Part 2
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 2 部分
- en: If your `cont-frac` procedure generates a recursive process, write one that
    generates an iterative process. If it generates an iterative process, write one
    that generates a recursive process.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的`cont-frac`过程生成了一个递归过程，请写一个生成迭代过程的过程。如果它生成了一个迭代过程，请写一个生成递归过程的过程。
- en: Part 3
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第3部分
- en: In 1737, Swiss mathematician Leonhard Euler showed that
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 1737年，瑞士数学家莱昂哈德·欧拉表明
- en: '[mathjax] e - 2=\frac{N_1}{D_1+\frac{N_2}{D_2+\frac{N_3}{D_3+\cdots}}} [/mathjax]'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[mathjax] e - 2=\frac{N_1}{D_1+\frac{N_2}{D_2+\frac{N_3}{D_3+\cdots}}} [/mathjax]'
- en: for the parameters
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于参数
- en: '[mathjax] \begin{cases} N_i = 1\\ D_i = 1,2,1,1,4,1,1,6,1,1,8,\cdots \end{cases}
    [/mathjax]'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[mathjax] \begin{cases} N_i = 1\\ D_i = 1,2,1,1,4,1,1,6,1,1,8,\cdots \end{cases}
    [/mathjax]'
- en: where [mathjaxinline]e[/mathjaxinline] is the base of natural logarithms. Write
    a program that uses your `cont-frac` procedure to approximate [mathjaxinline]e[/mathjaxinline]
    using Euler's expansion.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 其中[mathjaxinline]e[/mathjaxinline]是自然对数的底。编写一个程序，使用你的`cont-frac`过程来近似[mathjaxinline]e[/mathjaxinline]，使用欧拉展开。
- en: 'Exercise 4: `next-perf`'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4：`next-perf`
- en: A *perfect number* is defined as a number equal to the sum of all its factors
    less than itself. For example, the first perfect number is 6, because its factors
    are 1, 2, 3, and 6, and 1+2+3=6\. The second perfect number is 28, because 1+2+4+7+14=28\.
    What is the third perfect number?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*完美数*被定义为等于所有小于自身的因子之和的数。例如，第一个完美数是6，因为它的因子是1、2、3和6，而1+2+3=6。第二个完美数是28，因为1+2+4+7+14=28。第三个完美数是多少？'
- en: Write a procedure `(next-perf n)` that tests consecutive integers starting with
    `n` until a perfect number is found. Then you can evaluate `(next-perf 29)` to
    solve the problem. Note that your procedure should be able to handle any non-negative
    integer input.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个过程`(next-perf n)`，从`n`开始测试连续整数，直到找到一个完美数。然后你可以评估`(next-perf 29)`来解决问题。注意，你的过程应该能够处理任何非负整数输入。
- en: 'Hint: you’ll need a `sum-of-factors` subprocedure.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：你会需要一个`sum-of-factors`子过程。
- en: 'Note: If you run this program when the system is heavily loaded, it may take
    half an hour to compute the answer! Try tracing helper procedures to make sure
    your program is on track, or start by computing `(next-perf 1)` and see if you
    get 6.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果在系统负载繁重时运行此程序，可能需要半小时来计算答案！尝试跟踪辅助过程，确保你的程序正常运行，或者从计算`(next-perf 1)`开始，看看是否得到6。
- en: 'Exercise 5: Interchanging Base Cases'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5：交换基本情况
- en: 'Here is the definition of `count-change` program from earlier in this lesson:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本课程中较早时的`count-change`程序的定义：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: (define (cc amount kinds-of-coins) (cond [(= amount 0) 1] [(or (< amount 0)
    (empty? kinds-of-coins)) 0] [else (+ (cc amount (bf kinds-of-coins)) (cc (- amount
    (first kinds-of-coins)) kinds-of-coins))] ))
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: (define (cc amount kinds-of-coins) (cond [(= amount 0) 1] [(or (< amount 0)
    (empty? kinds-of-coins)) 0] [else (+ (cc amount (bf kinds-of-coins)) (cc (- amount
    (first kinds-of-coins)) kinds-of-coins))] ))
- en: Explain the effect of interchanging the order in which the base cases in the
    `cc` procedure are checked.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 解释在`cc`过程中交换基本情况检查顺序的影响。
- en: That is, describe completely the set of arguments for which the original `cc`
    procedure would return a different value or behave differently from a `cc` procedure
    coded as given below, and explain how the returned values would differ.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，完全描述原始`cc`过程将返回不同值或行为不同于下面给出的`cc`过程编码的参数集，并解释返回值的差异。
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Exercise 6: Invariant for Exponentiation'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习6：求幂的不变量
- en: 'Here is the iterative exponentiation procedure from earlier in this lesson:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本课程中较早时的迭代求幂过程：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Give an algebraic formula relating the values of the parameters `b`, `n`, `counter`,
    and `product` of the iterative exponentiation procedure defined above.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 给出一个代数公式，将迭代求幂过程的参数`b`、`n`、`counter`和`product`的值联系起来。
- en: (The kind of answer we're looking for is "the sum of `b`, `n`, and `counter`
    times `product` is always equal to 37.")
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: (我们要找的答案是“`b`、`n`和`counter`乘以`product`的和总是等于37”。)
- en: Submit Your Homework!
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交你的作业！
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有关说明，请参见[此指南](../submit.html)。它涵盖了基本的终端命令和作业提交。
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在提交作业时遇到任何问题，请不要犹豫向助教求助！
