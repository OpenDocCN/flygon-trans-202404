- en: Recursive EnvironmentsTuesday, February 21st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归环境星期二，2月21日
- en: '[PLAI §11.5](plai.pdf#section.11.5 "Procedural Representation of Recursive
    Environments")'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §11.5](plai.pdf#section.11.5 "递归环境的过程表示")'
- en: 'What we really need for recursion, is a special kind of an environment, one
    that can refer to itself. So instead of doing (note: `call`s removed for readability):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于递归，我们真正需要的是一种特殊类型的环境，一种可以引用自身的环境。因此，我们不再这样做（注意：为了可读性而删除了`call`）：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: which does not work for the usual reasons, we want to use some
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这不适用于通常的原因，我们想使用一些
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: that will do the necessary magic.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行必要的魔法。
- en: 'One way to achieve this is using the Y combinator as we have seen — a kind
    of a “constructor” for recursive functions. We can do that in a similar way to
    the `rewrite` rule that we have seen in Schlac — translate the above expression
    to:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的一种方法是使用我们之前看到的Y组合子——一种递归函数的“构造器”。我们可以以与我们在Schlac中看到的`rewrite`规则类似的方式进行——将上述表达式转换为：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'or even:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 或者甚至：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, we will see how it can be used in *our* code to implement a recursive environment.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到如何在*我们的*代码中使用它来实现一个递归环境。
- en: If we look at what `with` does in
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下`with`在
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'then we can say that to evaluate this expression, we evaluate the body expression
    in an extended environment that contains `fact`, even if a bogus one that is good
    for `0` only — the new environment is created with something like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们可以说为了评估这个表达式，我们在一个扩展的环境中评估主体表达式，该环境包含`fact`，即使是一个仅适用于`0`的虚假环境——新环境是这样创建的：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: so we can take this whole thing as an operation over `env`
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以把整个过程看作是对`env`的一个操作
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This gives us the first-level fact. But `fact` itself is still undefined in
    `env`, so it cannot call itself. We can try this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们第一级的事实。但`fact`本身在`env`中仍然未定义，因此无法调用自身。我们可以尝试这样做：
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'but that still doesn’t work, and it will never work no matter how far we go:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但这仍然不起作用，而且无论我们走多远，它永远都不会起作用：
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'What we really want is infinity: a place where add-fact works and the result
    is the same as what we’ve started with — we want to create a “magical” environment
    that makes this possible:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正想要的是无限：一个让`add-fact`工作且结果与我们开始的相同的地方——我们想要创建一个“神奇”的环境，使这成为可能：
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'which basically gives us the illusion of being at the infinity point. This
    magic-env thing is exactly the *fixed-point* of the `add-fact` operation. We can
    use:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上给了我们处于无限点的幻觉。这个magic-env东西恰好是`add-fact`操作的*不动点*。我们可以使用：
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'and following the main property of the Y combinator, we know that:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 并且根据Y组合子的主要属性，我们知道：
- en: '[PRE11]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What does all this mean? It means that if we have a fixed-point operator at
    the level of the implementation of our environments, then we can use it to implement
    a recursive binder. In our case, this means that a fixpoint in Racket can be used
    to implement a recursive language. But we have that — Racket does have recursive
    functions, so we should be able to use that to implement our recursive binder.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这一切意味着什么？这意味着如果我们在我们的环境实现层次上有一个不动点运算符，那么我们可以使用它来实现一个递归绑定器。在我们的情况下，这意味着Racket中的一个不动点可以用来实现一个递归语言。但我们有——Racket确实有递归函数，所以我们应该能够使用它来实现我们的递归绑定器。
- en: 'There are two ways that make it possible to write recursive functions in Racket.
    One is to define a function, and use its name to do a recursive call — using the
    Racket formal rules, we can see that we said that we mark that we now *know* that
    a variable is bound to a value. This is essentially a side-effect — we modify
    what we know, which corresponds to modifying the global environment. The second
    way is a new form: `letrec`. This form is similar to `let`, except that the scope
    that is established includes the named expressions — it is exactly what we want
    `rec` to do. A third way is using recursive local definitions, but that is equivalent
    to using `letrec`, more on this soon.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以在Racket中编写递归函数。一种是定义一个函数，并使用其名称进行递归调用——使用Racket的形式规则，我们可以看到，我们说过我们标记我们现在*知道*一个变量绑定到一个值。这本质上是一种副作用——我们修改了我们所知道的东西，这对应于修改全局环境。第二种方法是一种新形式：`letrec`。这个形式类似于`let`，只是建立的范围包括命名表达式——这正是我们希望`rec`能做的。第三种方法是使用递归局部定义，但这等价于使用`letrec`，稍后会详细讨论。
