- en: 関数と宣言
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数和声明
- en: 原文：[https://jsprimer.net/basic/function-declaration/](https://jsprimer.net/basic/function-declaration/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/basic/function-declaration/](https://jsprimer.net/basic/function-declaration/)
- en: 関数とは、ある一連の手続き（文の集まり）を1つの処理としてまとめる機能です。 関数を利用することで、同じ処理を毎回書くのではなく、一度定義した関数を呼び出すことで同じ処理を実行できます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是将一系列操作（一组语句）作为一个处理单元组合在一起的功能。 通过使用函数，可以通过调用一次定义的函数来执行相同的操作，而不是每次都重复编写。
- en: これまで利用してきたコンソール表示をするConsole APIも関数です。 `console.log`は「受け取った値をコンソールへ出力する」という処理をまとめた関数です。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用的控制台输出Console API也是一个函数。 `console.log`将“将接收到的值输出到控制台”这一过程封装为一个函数。
- en: この章では、関数の定義方法や呼び出し方について見ていきます。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论函数的定义和调用方式。
- en: '[](#function-declaration)*関数宣言*'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#function-declaration)*函数声明*'
- en: '*JavaScriptでは、関数を定義するために`function`キーワードを使います。 `function`からはじまる文は**関数宣言**と呼び、次のように関数を定義できます。'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*在JavaScript中，使用`function`关键字来定义函数。 以`function`开头的语句称为**函数声明**，可以定义如下函数。'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 関数は次の4つの要素で構成されています。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 函数由以下4个元素组成。
- en: 関数名 - 利用できる名前は変数名と同じ（「[変数名に使える名前のルール](../variables/#variable-name)」を参照）
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数名 - 可用的名称与变量名相同（参考“[变量名规则](../variables/#variable-name)”）
- en: 仮引数 - 関数の呼び出し時に渡された値が入る変数。複数ある場合は`,`（カンマ）で区切る
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形式参数 - 传递给函数调用的值存储在的变量中。 如果有多个，则用`,`（逗号）分隔
- en: 関数の中身 - `{`と`}`で囲んだ関数の処理を書く場所
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数体 - 写有`{`和`}`的函数处理的地方
- en: 関数の返り値 - 関数を呼び出したときに、呼び出し元へ返される値
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数的返回值 - 调用函数时返回给调用者的值
- en: 宣言した関数は、`関数名()`と関数名にカッコをつけることで呼び出せます。 関数を引数と共に呼ぶ際は、`関数名(引数1, 引数2)`とし、引数が複数ある場合は`,`（カンマ）で区切ります。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 声明的函数可以通过在函数名后加括号来调用。 当调用函数时与参数一起调用时，应该使用`函数名(参数1, 参数2)`，如果有多个参数，则用`,`（逗号）分隔。
- en: 関数の中身では`return`文によって、関数の実行結果として任意の値を返せます。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数体中，可以通过`return`语句返回任意值作为函数的执行结果。
- en: 次のコードでは、引数で受け取った値を2倍にして返す`double`という関数を定義しています。 `double`関数には`num`という仮引数が定義されており、`10`という値を引数として渡して関数を呼び出しています。
    仮引数の`num`には`10`が代入され、その値を2倍にしたものを`return`文で返しています。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，定义了一个名为`double`的函数，该函数将接收到的值加倍返回。 `double`函数定义了一个名为`num`的形式参数，并将值`10`作为参数传递给函数调用。
    参数`num`被赋值为`10`，然后将其加倍的值通过`return`语句返回。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 関数で`return`文が実行されると、関数内ではそれ以降の処理は行われません。 また関数が値を返す必要がない場合は、`return`文では返り値を省略できます。
    `return`文の返り値を省略した場合は、未定義の値である`undefined`を返します。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数执行`return`语句时，函数内部将不再执行后续操作。 此外，如果函数不需要返回值，则可以省略`return`语句。 省略`return`语句时，将返回未定义的值`undefined`。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 関数が何も値を返す必要がない場合は、`return`文そのものを省略できます。 `return`文を省略した場合は、`undefined`という値を返します。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数不需要返回任何值，则可以省略`return`语句。 省略`return`语句时，将返回值`undefined`。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[](#function-arguments)*関数の引数*'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#function-arguments)*函数的参数*'
- en: '*JavaScriptでは、関数に定義した仮引数の個数と実際に呼び出したときの引数の個数が違っても、関数を呼び出せます。 そのため、引数の個数が合っていないときの挙動を知る必要があります。
    また、引数が省略されたときに、デフォルトの値を指定するデフォルト引数という構文についても見ていきます。'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*在JavaScript中，即使定义函数时的形式参数数量与实际调用时的参数数量不同，也可以调用函数。 因此，需要了解参数数量不匹配时的行为。 此外，还将看到关于为省略参数指定默认值的默认参数语法。'
- en: '[](#function-less-arguments)*呼び出し時の引数が少ないとき*'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#function-less-arguments)*呼叫时的参数过少*'
- en: '*定義した関数の仮引数よりも呼び出し時の引数が少ない場合、余った仮引数には`undefined`という値が代入されます。'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果调用定义函数时的形式参数比实际调用时的参数少，则多余的形式参数将被赋值为`undefined`。'
- en: 次のコードでは、引数として渡した値をそのまま返す`echo`関数を定義しています。 `echo`関数は仮引数`x`を定義していますが、引数を渡さずに呼び出すと、仮引数`x`には`undefined`が入ります。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，定义了一个简单地返回传递值的`echo`函数。 `echo`函数定义了形式参数`x`，但如果在调用时没有传递参数，则形式参数`x`将包含`undefined`。
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 複数の引数を受けつける関数でも同様に、余った仮引数には`undefined`が入ります。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是接受多个参数的函数，多余的形式参数也将包含`undefined`。
- en: 次のコードでは、2つの引数を受け取り、それを配列として返す`argumentsToArray`関数を定義しています。 このとき、引数として1つの値しか渡していない場合、残る仮引数には`undefined`が代入されます。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，定义了一个接收两个参数并将它们作为数组返回的`argumentsToArray`函数。 在这种情况下，如果只传递一个值作为参数，则剩余的形式参数将被赋值为`undefined`。
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[](#function-default-parameters)*[ES2015] デフォルト引数*'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#function-default-parameters)*[ES2015] 默认参数*'
- en: '*デフォルト引数（デフォルトパラメータ）は、仮引数に対応する引数が渡されていない場合に、デフォルトで代入される値を指定できます。 次のように、仮引数に対して`仮引数
    = デフォルト値`という構文で、仮引数ごとにデフォルト値を指定できます。'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*默认参数允许在未传递与形式参数对应的参数时指定默认分配的值。 可以通过为每个形式参数指定默认值的语法`形式参数 = 默认值`来指定默认值。'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 次のコードでは、渡した値をそのまま返す`echo`関数を定義しています。 先ほどの`echo`関数とは異なり、仮引数`x`に対してデフォルト値を指定しています。
    そのため、引数を渡さずに`echo`関数を呼び出すと、`x`には`"デフォルト値"`が代入されます。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，定义了一个简单地返回传递值的`echo`函数。 与之前的`echo`函数不同，这里为形式参数`x`指定了默认值。 因此，如果调用`echo`函数��没有传递参数，则形式参数`x`将被赋值为`"默认值"`。
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ES2015でデフォルト引数が導入されるまでは、OR演算子（`||`）を使ったデフォルト値の指定がよく利用されていました。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在ES2015之前，经常使用OR运算符（`||`）来指定默认值。
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: しかし、OR演算子（`||`）を使ったデフォルト値の指定にはひとつ問題があります。 OR演算子（`||`）では、左辺のオペランドがfalsyな値の場合に右辺のオペランドを評価します。
    falsyな値とは、真偽値へと変換すると`false`となる次のような値のことです。（「[暗黙的な型変換](../implicit-coercion/)」の章を参照）。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用OR运算符（`||`）指定默认值存在一个问题。 使用OR运算符（`||`）时，如果左操作数为falsy值，则将评估右操作数。 falsy值是指在转换为布尔值后为`false`的值。（参考“[隐式类型转换](../implicit-coercion/)”章节）。
- en: '`false`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`false`'
- en: '`undefined`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`undefined`'
- en: '`null`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`null`'
- en: '`0`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`'
- en: '`0n`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0n`'
- en: '`NaN`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NaN`'
- en: '`""`（空文字列）'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`""`（空字符串）'
- en: OR演算子（`||`）を使った場合、次のように`prefix`に空文字列を指定した場合にもデフォルト値が入ります。 これは書いた人が意図した挙動なのかがとてもわかりにくく、このような挙動はバグにつながることがあります。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OR运算符（`||`）时，即使将`prefix`指定为空字符串，也会使用默认值。 这种行为非常难以理解，可能导致错误。
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: デフォルト引数を使って書くことで、このような挙動は起きなくなるため安全です。 デフォルト引数では、引数が渡されなかった場合にデフォルト値が入ります。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认参数编写可以避免这种行为，因此更加安全。 默认参数将在未传递参数时使用默认值。
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: また、ES2020から導入されたNullish coalescing演算子(`??`)を利用することでも、 OR演算子（`||`）の問題を避けつつデフォルト値を指定できます。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，从ES2020开始，还可以使用Nullish coalescing运算符(`??`)来避免OR运算符（`||`）的问题并指定默认值。
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[](#function-more-arguments)*呼び出し時の引数が多いとき*'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#function-more-arguments)*呼叫时的参数过多*'
- en: '*関数の仮引数に対して引数の個数が多い場合、あふれた引数は単純に無視されます。'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果函数的形式参数比调用时的参数多，则多余的参数将被简单地忽略。'
- en: 次のコードでは、2つの引数を足し算した値を返す`add`関数を定義しています。 この`add`関数には仮引数が2つしかありません。 そのため、3つ以上の引数を渡しても3番目以降の引数は単純に無視されます。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，定义了一个接收两个参数并返回它��之和的`add`函数。 `add`函数只有两个形式参数。 因此，即使传递了3个或更多的参数，第三个参数及以后的参数都将被简单地忽略。
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[](#variable-arguments)*可変長引数*'
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#variable-arguments)*可变参数*'
- en: '*関数において引数の数が固定ではなく、任意の個数の引数を受け取りたい場合があります。 たとえば、`Math.max(...args)`は引数を何個でも受け取り、受け取った引数の中で最大の数値を返す関数です。
    このような、固定した数ではなく任意の個数の引数を受け取れることを**可変長引数**と呼びます。'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*在函数中，参数的数量可能不固定，可能希望接受任意数量的参数。 例如，`Math.max(...args)`接受任意数量的参数，并返回接收到的参数中的最大数字的函数。
    这种接受任意数量而不是固定数量的参数称为**可变参数**。'
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 可変長引数を実現するためには、Rest parametersか関数の中でのみ参照できる`arguments`という特殊な変数を利用します。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现可变参数，可以使用特殊变量`arguments`，该变量仅在函数内部可引用。
- en: '[](#rest-parameters)*[ES2015] Rest parameters*'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#rest-parameters)*[ES2015] Rest parameters*'
- en: '*Rest parametersは、仮引数名の前に`...`をつけた仮引数のことで、残余引数とも呼ばれます。 Rest parametersには、関数に渡された値が配列として代入されます。'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*Rest parameters*是指在虚拟参数名之前加上`...`的虚拟参数，也称为剩余参数。 Rest parameters将传递给函数的值分配为数组。'
- en: 次のコードでは、`fn`関数に`...args`というRest parametersが定義されています。 この`fn`関数を呼び出したときの引数の値が、`args`という変数に配列として代入されます。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，`fn`函数定义了`...args`作为Rest parameters。 当调用`fn`函数时，参数的值将被分配给`args`作为数组。
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Rest parametersは、通常の仮引数と組み合わせても定義できます。 ほかの仮引数と組み合わせる際には、必ずRest parametersを末尾の仮引数として定義する必要があります。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Rest parameters可以与常规参数一起定义。 在与其他参数组合时，Rest parameters必须作为最后一个参数进行定义。
- en: 次のコードでは、1番目の引数は`arg1`に代入され、残りの引数が`restArgs`に配列として代入されます。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，第一个参数被分配给`arg1`，其余的参数被分配给`restArgs`作为数组。
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Rest parametersは、引数をまとめた配列を仮引数に定義する構文でした。 一方で、配列を展開して関数の引数に渡すSpread構文もあります。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Rest parameters是指将参数收集到数组中的语法。
- en: Spread構文は、配列の前に`...`をつけた構文のことで、関数には配列の値を展開したものが引数として渡されます。 次のコードでは、`array`の配列を展開して`fn`関数の引数として渡しています。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Spread语法是指在数组前面加上`...`的语法，将数组的值展开作为函数的参数传递。 在下面的代码中，我们展开了`array`数组，并将其作为参数传递给`fn`函数。
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[](#arguments)*`arguments`*'
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#arguments)*`arguments`*'
- en: '*可変長引数を扱う方法として、`arguments`という関数の中でのみ参照できる特殊な変数があります。 `arguments`は関数に渡された引数の値がすべて入った**Array-like**なオブジェクトです。
    **Array-like**なオブジェクトは、配列のようにインデックスで要素へアクセスできます。 しかし、`Array`ではないため、実際の配列とは異なり`Array`のメソッドは利用できないという特殊なオブジェクトです。'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*处理可变参数的方法之一是使用函数内部可以引用的特殊变量`arguments`。 `arguments`是包含传递给函数的参数值的类似数组的对象。 类似数组的对象可以通过索引访问其元素，但不是`Array`，因此是一种特殊的对象，无法使用`Array`方法。'
- en: 次のコードでは、`fn`関数に仮引数が定義されていません。 しかし、関数の内部では`arguments`という変数で、実際に渡された引数を配列のように参照できます。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，`fn`函数没有定义参数。 但是，在函数内部，可以使用名为`arguments`的变量引用传递的参数，就像数组一样。
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Rest parametersが利用できる環境では、`arguments`変数を使うべき理由はありません。 `arguments`変数には次のような問題があります。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Rest parameters的环境中，没有必要使用`arguments`变量。 `arguments`变量存在以下问题。
- en: Arrow Functionでは利用できない（Arrow Functionについては後述）
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箭头函数中无法使用（有关箭头函数的详细信息，请参见下文）
- en: Array-likeオブジェクトであるため、Arrayのメソッドを利用できない
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于是类似数组的对象，因此无法使用Array的方法
- en: 関数が可変長引数を受けつけるのかを仮引数だけを見て判断できない
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法仅通过参数来判断函数是否接受可变长度参数
- en: '`arguments`変数は仮引数の定義とは関係なく、実際に渡された引数がすべて含まれています。 そのため、関数の仮引数の定義部分だけ見ても、実際に関数の要求する引数がわからないという問題を作りやすいです。
    Rest parametersであれば、仮引数で可変長を受け入れるかが明確になります。'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`arguments`变量与参数定义无关，而是包含所有传递的参数。 因此，在仅查看函数参数定义部分时，很难知道实际函数需要的参数。 Rest parameters则可以清楚地表示是否接受可变长度参数。'
- en: このように、可変長引数が必要な場合は`arguments`変数よりも、Rest parametersでの実装を推奨します。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果需要可变长度参数，请使用Rest parameters而不是`arguments`变量进行实现。
- en: '[](#function-destructuring)*[ES2015] 関数の引数と分割代入*'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#function-destructuring)*[ES2015] 函数的参数和解构*'
- en: '*関数の引数においても分割代入（Destructuring assignment）が利用できます。 分割代入はオブジェクトや配列からプロパティを取り出し、変数として定義し直す構文です。'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*在函数参数中，也可以使用解构赋值（Destructuring assignment）。 解构赋值是一种语法，用于从对象或数组中获取属性，并重新定义为变量。*'
- en: 次のコードでは、関数の引数として`user`オブジェクトを渡し、`id`プロパティをコンソールへ出力しています。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、関数の引数として`user`オブジェクトを渡し、`id`プロパティをコンソールへ出力しています。
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 関数の引数に分割代入を使うことで、このコードは次のように書けます。 次のコードの`printUserId`関数はオブジェクトを引数として受け取ります。
    この受け取った`user`オブジェクトの`id`プロパティを変数`id`として定義しています。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过函数参数使用解构赋值，可以将此代码写为下面的样子。 下面的代码中，`printUserId`函数接收一个对象作为参数。 我们将传入的`user`对象的`id`属性定义为变量`id`。
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 代入演算子（`=`）におけるオブジェクトの分割代入では、左辺に定義したい変数を定義し、右辺のオブジェクトから対応するプロパティを代入していました。 関数の仮引数が左辺で、関数に渡す引数を右辺と考えるとほぼ同じ構文であることがわかります。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象分解赋值的赋值运算符（`=`）中，左侧定义要定义的变量，右侧从对象中分配相应的属性。 将函数参数视为左侧，要传递给函数的参数视为右侧，就可以看到它们的语法几乎相同。
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 関数の引数における分割代入は、オブジェクトだけではなく配列についても利用できます。 次のコードでは、引数に渡された配列の1番目の要素が`first`に、2番目の要素が`second`に代入されます。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 函数参数中的解构赋值也适用于数组。 在下面的代码中，传递给参数的数组的第一个元素将分配给`first`，第二个元素将分配给`second`。
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[](#first-class-function)*関数はオブジェクト*'
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#first-class-function)*函数是对象*'
- en: '*JavaScriptでは、関数は関数オブジェクトとも呼ばれ、オブジェクトの一種です。 関数はただのオブジェクトとは異なり、関数名に`()`をつけることで、関数としてまとめた処理を呼び出すことができます。'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*在JavaScript中，函数被称为函数对象，是一种对象。 函数不同于普通对象，因为您可以通过在函数名称后加上`()`来调用函数并调用封装的处理。*'
- en: 一方で、`()`をつけて呼び出されなければ、関数をオブジェクトとして参照できます。 また、関数はほかの値と同じように変数へ代入したり、関数の引数として渡すことが可能です。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果没有附加`()`调用，则可以引用函数作为对象。 此外，函数可以与其他值一样分配给变量或传递给函数作为参数。
- en: 次のコードでは、定義した`fn`関数を`myFunc`変数へ代入してから、呼び出しています。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们先将定义的`fn`函数分配给变量`myFunc`，然后调用它。
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: このように関数が値として扱えることを、**ファーストクラスファンクション**（第一級関数）と呼びます。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以作为值进行操作，这称为**第一类函数**。
- en: 先ほどのコードでは、関数宣言をしてから変数へ代入していましたが、最初から関数を値として定義できます。 関数を値として定義する場合には、関数宣言と同じ`function`キーワードを使った方法とArrow
    Functionを使った方法があります。 どちらの方法も、関数を式（代入する値）として扱うため**関数式**と呼びます。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们先声明了函数，然后将其分配给变量。 但是，您也可以直接定义函数作为值。 当定义函数作为值时，可以使用与函数声明相同的`function`关键字方法和箭头函数方法。
    这两种方法都被称为**函数表达式**，因为它们将函数视为表达式（分配给的值）。
- en: '[](#function-expression)*関数式*'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#function-expression)*函数表达式*'
- en: '*関数式とは、関数を値として変数へ代入している式のことを言います。 関数宣言は文でしたが、関数式では関数を値として扱っています。 これは、文字列や数値などの変数宣言と同じ定義方法です。'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数表达式是指将函数作为值分配给变量的表达式。 函数声明是语句，而函数表达式则将函数视为值。 这与字符串或数字等变量声明的方式相同。*'
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 関数式では`function`キーワードの右辺に書く関数名は省略できます。 なぜなら、定義した関数式は変数名で参照できるためです。 一方、関数宣言では`function`キーワードの右辺の関数名は省略できません。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数表达式中，右侧的函数名可以省略`function`关键字。 这是因为定义的函数表达式可以通过变量名引用。 另一方面，在函数声明中，无法省略右侧的函数名。
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: このように関数式では、名前を持たない関数を変数に代入できます。 このような名前を持たない関数を**無名関数**（または匿名関数）と呼びます。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数表达式中，您可以将无名称的函数分配给变量。 此类无名称函数称为**匿名函数**（或者无名函数）。
- en: もちろん関数式でも関数に名前をつけることができます。 しかし、この関数の名前は関数の外からは呼ぶことができません。 一方、関数の中からは呼ぶことができるため、再帰的に関数を呼び出す際などに利用されます。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以为函数表达式命名。 但是，无法从外部调用该函数。 由于可以从函数内部调用，因此用于递归调用函数等。
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[](#arrow-function)*[ES2015] Arrow Function*'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#arrow-function)*[ES2015] Arrow Function*'
- en: '*関数式には`function`キーワードを使った方法以外に、Arrow Functionと呼ばれる書き方があります。 名前のとおり矢印のような`=>`（イコールと大なり記号）を使い、無名関数を定義する構文です。
    次のように、`function`キーワードを使った関数式とよく似た書き方をします。'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*関数式には`function`キーワードを使った方法以外に、Arrow Functionと呼ばれる書き方があります。 名前のとおり矢印のような`=>`（イコールと大なり記号）を使い、無名関数を定義する構文です。
    次のように、`function`キーワードを使った関数式とよく似た書き方をします。'
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Arrow Functionには書き方にいくつかのパターンがありますが、`function`キーワードに比べて短く書けるようになっています。 また、Arrow
    Functionには省略記法があり、次の場合にはさらに短く書けます。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Arrow Functionには書き方にいくつかのパターンがありますが、`function`キーワードに比べて短く書けるようになっています。 また、Arrow
    Functionには省略記法があり、次の場合にはさらに短く書けます。
- en: 関数の仮引数が1つのときは`()`を省略できる
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 関数の仮引数が1つのときは`()`を省略できる
- en: 関数の処理が1つの式である場合に、ブロックと`return`文を省略できる
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 関数の処理が1つの式である場合に、ブロックと`return`文を省略できる
- en: その式の評価結果を`return`の返り値とする
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: その式の評価結果を`return`の返り値とする
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Arrow Functionについては次のような特徴があります。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Arrow Functionについては次のような特徴があります。
- en: 名前をつけることができない（常に無名関数）
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名前をつけることができない（常に無名関数）
- en: '`this`が静的に決定できる（詳細は「[関数とスコープ](../function-scope/)」の章で解説します）'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this`が静的に決定できる（詳細は「[関数とスコープ](../function-scope/)」の章で解説します）'
- en: '`function`キーワードに比べて短く書くことができる'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function`キーワードに比べて短く書くことができる'
- en: '`new`できない（コンストラクタ関数ではない）'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new`できない（コンストラクタ関数ではない）'
- en: '`arguments`変数を参照できない'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arguments`変数を参照できない'
- en: たとえば`function`キーワードの関数式では、値を返すコールバック関数を次のように書きます。 配列の`map`メソッドは、配列の要素を順番にコールバック関数へ渡し、そのコールバック関数が返した値を新しい配列にして返します。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: たとえば`function`キーワードの関数式では、値を返すコールバック関数を次のように書きます。 配列の`map`メソッド��、配列の要素を順番にコールバック関数へ渡し、そのコールバック関数が返した値を新しい配列にして返します。
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Arrow Functionでは処理が1つの式だけである場合に、`return`文を省略し暗黙的にその式の評価結果を`return`の返り値とします。
    また、Arrow Functionは仮引数が1つである場合は`()`を省略できます。 このような省略はコールバック関数を多用する場合にコードの見通しを良くします。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Arrow Functionでは処理が1つの式だけである場合に、`return`文を省略し暗黙的にその式の評価結果を`return`の返り値とします。
    また、Arrow Functionは仮引数が1つである場合は`()`を省略できます。 このような省略はコールバック関数を多用する場合にコードの見通しを良くします。
- en: 次のコードは、先ほどの`function`キーワードで書いたコールバック関数と同じ結果になります。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードは、先ほどの`function`キーワードで書いたコールバック関数と同じ結果になります。
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Arrow Functionは`function`キーワードの関数式に比べて、できることとできないことがはっきりしています。 たとえば、`function`キーワードでは非推奨としていた`arguments`変数を参照できますが、Arrow
    Functionでは参照できなくなっています。 Arrow Functionでは、人による解釈や実装の違いが生まれにくくなります。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Arrow Functionは`function`キーワードの関数式に比べて、できることとできないことがはっきりしています。 たとえば、`function`キーワードでは非推奨としていた`arguments`変数を参照できますが、Arrow
    Functionでは参照できなくなっています。 Arrow Functionでは、人による解釈や実装の違いが生まれにくくなります。
- en: また、`function`キーワードとArrow Functionの大きな違いとして、`this`という特殊なキーワードに関する挙動の違いがあります。
    `this`については「[関数とスコープ](../function-scope/)」の章で解説しますが、Arrow Functionではこの`this`の問題の多くを解決できるという利点があります。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: また、`function`キーワードとArrow Functionの大きな違いとして、`this`という特殊なキーワードに関する挙動の違いがあります。
    `this`については「[関数とスコープ](../function-scope/)」の章で解説しますが、Arrow Functionではこの`this`の問題の多くを解決できるという利点があります。
- en: そのため、Arrow Functionで問題ない場合はArrow Functionで書き、そうでない場合は`function`キーワードを使うことを推奨します。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: そのため、Arrow Functionで問題ない場合はArrow Functionで書き、そうでない場合は`function`キーワードを使うことを推奨します。
- en: '[](#function-overwrite)*[コラム] 同じ名前の関数宣言は上書きされる*'
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#function-overwrite)*[コラム] 同じ名前の関数宣言は上書きされる*'
- en: '*関数宣言で定義した関数は、関数の名前でのみ区別されます。 そのため、同じ名前の関数を複数回宣言した場合には、後ろで宣言された関数によって上書きされます。'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*関数宣言で定義した関数は、関数の名前でのみ区別されます。 そのため、同じ名前の関数を複数回宣言した場合には、後ろで宣言された関数によって上書きされます。'
- en: 次のコードでは、`fn`という関数名を2つ定義していますが、最後に定義された`fn`関数が優先されています。 また、仮引数の定義が異なっていても、関数の名前が同じなら上書きされます。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、`fn`という関数名を2つ定義していますが、最後に定義された`fn`関数が優先されています。 また、仮引数の定義が異なっていても、関数の名前が同じなら上書きされます。
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: このように、同じ関数名で複数の関数を定義することは、関数を上書きしてしまうため避けるべきです。 引数の違いで関数を呼び分けたい場合は、別々の名前で関数を定義するか関数の内部で引数の値で処理を分岐する必要があります。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: このように、同じ関数名で複数の関数を定義することは、関数を上書きしてしまうため避けるべきです。 引数の違いで関数を呼び分けたい場合は、別々の名前で関数を定義するか関数の内部で引数の値で処理を分岐する必要があります。
- en: この関数定義の上書きは`function`キーワードでの関数宣言と`var`キーワードを使った関数式のみで発生します。 一方で、`const`や`let`では同じ変数名の定義はエラーとなるため、このような関数定義の上書きもエラーとなります。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: この関数定義の上書きは`function`キーワードでの関数宣言と`var`キーワードを使った関数式のみで発生します。 一方で、`const`や`let`では同じ変数名の定義はエラーとなるため、このような関数定義の上書きもエラーとなります。
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 関数の上書きを避けたい場合は、`const`と関数式を使って関数を定義することで、意図しない上書きが発生しにくくなります。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 関数の上書きを避けたい場合は、`const`と関数式を使って関数を定義することで、意図しない上書きが発生しにくくなります。
- en: '[](#callback)*コールバック関数*'
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#callback)*コールバック関数*'
- en: '*関数はファーストクラスであるため、その場で作った無名関数を関数の引数（値）として渡すことができます。 引数として渡される関数のことを**コールバック関数**と呼びます。
    一方、コールバック関数を引数として使う関数やメソッドのことを**高階関数**と呼びます。'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*関数はファーストクラスであるため、その場で作った無名関数を関数の引数（値）として渡すことができます。 引数として渡される関数のことを**コールバック関数**と呼びます。
    一方、コールバック関数を引数として使う関数やメソッドのことを**高階関数**と呼びます。'
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: たとえば、配列の`forEach`メソッドはコールバック関数を引数として受け取る高階関数です。 `forEach`メソッドは、配列の各要素に対してコールバック関数を一度ずつ呼び出します。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: たとえば、配列の`forEach`メソッドはコールバック関数を引数として受け取る高階関数です。 `forEach`メソッドは、配列の各要素に対してコールバック関数を一度ずつ呼び出します。
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 毎回、関数を定義してその関数をコールバック関数として渡すのは、少し手間がかかります。 そこで、関数はファーストクラスであることを利用して、コールバック関数となる無名関数をその場で定義して渡せます。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 毎回、関数を定義してその関数をコールバック関数として渡すのは、少し手間がかかります。 そこで、関数はファーストクラスであることを利用して、コールバック関数となる無名関数をその場で定義して渡せます。
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: コールバック関数は非同期処理においてもよく利用されます。 非同期処理におけるコールバック関数の利用方法については「[非同期処理](../async/)」の章で解説します。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: コールバック関数は非同期処理においてもよく利用されます。 非同期処理におけるコールバック関数の利用方法については「[非同期処理](../async/)」の章で解説します。
- en: '[](#method)*メソッド*'
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#method)*メソッド*'
- en: '*オブジェクトのプロパティである関数を**メソッド**と呼びます。 JavaScriptにおいて、関数とメソッドの機能的な違いはありません。 しかし、呼び方を区別したほうがわかりやすいため、ここではオブジェクトのプロパティである関数をメソッドと呼びます。'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*オブジェクトのプロパティである関数を**メソッド**と呼びます。 JavaScriptにおいて、関数とメソッドの機能的な違いはありません。 しかし、呼び方を区別したほうがわかりやすいため、ここではオブジェクトのプロパティである関数をメソッドと呼びます。'
- en: 次のコードでは、`obj`の`method1`プロパティと`method2`プロパティに関数を定義しています。 この`obj.method1`プロパティと`obj.method2`プロパティがメソッドです。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 次のコードでは、`obj`の`method1`プロパティと`method2`プロパティに関数を定義しています。 この`obj.method1`プロパティと`obj.method2`プロパティがメソッドです。
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 次のように空オブジェクトの`obj`を定義してから、`method`プロパティへ関数を代入してもメソッドを定義できます。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 次のように空オブジェクトの`obj`を定義してから、`method`プロパティへ関数を代入してもメソッドを定義できます。
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: メソッドを呼び出す場合は、関数呼び出しと同様に`オブジェクト.メソッド名()`と書くことで呼び出せます。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: メソッドを呼び出す場合は、関数呼び出しと同様に`オブジェクト.メソッド名()`と書くことで呼び出せます。
- en: '[PRE37]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[](#shorthand-for-method)*[ES2015] メソッドの短縮記法*'
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#shorthand-for-method)*[ES2015] メソッドの短縮記法*'
- en: '*先ほどの方法では、プロパティに関数を代入するという書き方になっていました。 ES2015からは、メソッドとしてプロパティを定義するための短縮した書き方が追加されています。'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*先ほどの方法では、プロパティに関数を代入するという書き方になっていました。 ES2015からは、メソッドとしてプロパティを定義するための短縮した書き方が追加されています。'
- en: 次のように、オブジェクトリテラルの中で `メソッド名(){ /*メソッドの処理*/ }` と書くことができます。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 次のように、オブジェクトリテラルの中で `メソッド名(){ /*メソッドの処理*/ }` と書くことができます。
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: この書き方はオブジェクトのメソッドだけではなく、クラスのメソッドと共通の書き方となっています。 メソッドを定義する場合は、できるだけこの短縮記法に統一したほうがよいでしょう。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: この書き方はオブジェクトのメソッドだけではなく、クラスのメソッドと共通の書き方となっています。 メソッドを定義する場合は、できるだけこの短縮記法に統一したほうがよいでしょう。
- en: '[](#function-declaration-summary)*まとめ*'
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#function-declaration-summary)*まとめ*'
- en: '*この章では、次のことについて学びました。'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*この章では、次のことについて学びました。'
- en: 関数の宣言方法
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 関数の宣言方法
- en: 関数を値として使う方法
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 関数を値として使う方法
- en: 関数式とArrow Function
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 関数式とArrow Function
- en: コールバック関数
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: コールバック関数
- en: メソッドの定義方法
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: メソッドの定義方法
- en: 基本的な関数の定義や値としての関数について学びました。 JavaScriptでは、非同期処理を扱うことが多く、その場合にコールバック関数が使われます。
    Arrow Functionを使うことで、コールバック関数を短く簡潔に書くことができます。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了基本函数的定义和函数作为值。在JavaScript中，经常处理异步处理，在这种情况下会使用回调函数。通过使用箭头函数，可以将回调函数编写得更加简洁。
- en: JavaScriptでのメソッドは、オブジェクトのプロパティである関数のことです。 ES2015からは、メソッドを定義する構文が追加されているため活用していきます。*****************
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的方法是指对象属性中的函数。从ES2015开始，已经添加了定义方法的语法，因此我们将利用它。
