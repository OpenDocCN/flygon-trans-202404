- en: Lecture 13 - Hardware Interrupts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13讲 - 硬件中断
- en: Public Service Annoucements
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共服务公告
- en: Assignment 3
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作业3
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Hardware Interrupts
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件中断
- en: Vectored Operation
  id: totrans-5
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 向量操作
- en: General Idea
  id: totrans-6
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 总体思路
- en: The standard way of programming the ICU requires the kernel to query the ICU.
    Sometimes (!), this is unacceptably inefficient. Then, you have another alternative,
    vectored interrupts.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 编程ICU的标准方式要求内核查询ICU。有时（！），这是不可接受的低效率。然后，你有另一种选择，即向量中断。
- en: 'Relevant registers:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 相关寄存器：
- en: there are 16 pairs that you write
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有16对你要写的
- en: '| Register Name | Offset | R/W | Description | Comments |'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 寄存器名称 | 偏移 | R/W | 描述 | 注释 |'
- en: '| VICxVectAddry | 0x100+4y | R/W | Vector address for interrupt y | Entry point
    of ISR for interrupt y |'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| VICxVectAddry | 0x100+4y | R/W | 中断y的向量地址 | 中断y的ISR入口点 |'
- en: '| VICxVectCntly | 0x200+4y | R/W | Control register for interrupt y | Bit[0-4]:
    interrupt source for interrupt y Bit[5]: enable vectored interrupt y |'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| VICxVectCntly | 0x200+4y | R/W | 中断y的控制寄存器 | 位[0-4]：中断y的中断源 位[5]：启用向量中断y
    |'
- en: There is one pair used by the program
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序使用了一对
- en: '| Register Name | Offset | R/W | Description |'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 寄存器名称 | 偏移 | R/W | 描述 |'
- en: '| VICxVectAddr | 0x030 | R/W | Read: address of vector for highest priority
    interruptWrite: service complete, enable priority hardware |'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| VICxVectAddr | 0x030 | R/W | 读取：最高优先级中断的向量地址写入：服务完成，启用优先级硬件 |'
- en: '| VICxDefVectAddr | 0x034 | R/W | Default vector address |'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| VICxDefVectAddr | 0x034 | R/W | 默认向量地址 |'
- en: The first is the address (ISR entry point) of the highest priority interrupt.
    Write it during interrupt processing to get the current highest priority interrupt.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是最高优先级中断的地址（ISR入口点）。在中断处理期间写入以获取当前最高优先级中断。
- en: The second would normally be 0x34, the entry point of the kernel.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个通常是0x34，内核的入口点。
- en: Procedure
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 过程
- en: Initialization
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化
- en: Write kernel entry point into VICxDefVectAddr
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将内核入口点写入VICxDefVectAddr
- en: If desired write special entry point into VICxVectAddry
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，将特殊入口点写入VICxVectAddry
- en: When ready to accept interrupts write source and enable into VICxVectCntly
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备好接受中断时，将源和使能写入VICxVectCntly
- en: When an interrupt occurs
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当中断发生时
- en: Read VICxVectAddr to find address
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取VICxVectAddr以查找地址
- en: Move result to PC
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将结果移动到PC
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: (Note that this is similar to the instruction in 0x014\. Could we do it all
    in one?)
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （请注意，这类似于0x014中的指令。我们能否一次完成所有操作？）
- en: Before interrupts are re-enabled write VICxVectAddr to start priority hardware
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在重新启用中断之前，将VICxVectAddr写入以启动优先级硬件
- en: Answer to question.
  id: totrans-30
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 回答问题。
- en: Look carefully at what's in 0x18
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看看0x18中的内容
- en: 'Usually, `ldr pc, [pc, #offset]`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '通常，`ldr pc, [pc, #offset]`'
- en: 'Can you make `[pc, #offset]` calculate `<VicVectAddr>`?'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '你能让`[pc, #offset]`计算`<VicVectAddr>`吗？'
- en: How is the instruction encoded
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指令如何编码
- en: 31:28 - condition codes
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 31:28 - 条件码
- en: 27:20 - op code and flags, 0101<offset sign>001
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 27:20 - 操作码和标志，0101<偏移符号>001
- en: 19:16 - base register
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 19:16 - 基址寄存器
- en: 15:12 - destination register
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15:12 - 目的寄存器
- en: 11:00 - 12-bit offset
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 11:00 - 12位偏移
- en: With a 12 bit offset and pc=0x18 you can address
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有了12位偏移和pc=0x18，你可以寻址
- en: from `0x18 + 0x8 - 0xffc = -0xfdc =``0xfffff020`
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自`0x18 + 0x8 - 0xffc = -0xfdc =``0xfffff020`
- en: to `0x18 + 0x8 + 0xffc = 0x1020`
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到`0x18 + 0x8 + 0xffc = 0x1020`
- en: You could have the kernel entry point in
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将内核入口点放在
- en: either `0x800b0030`
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要么`0x800b0030`
- en: or `0x800c0030`
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者`0x800c0030`
- en: Both are out of range. What could you do?
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者都超出范围。你能做什么？
- en: Map the ICU into the range by placing it at, for example, `0xfffff000`.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将ICU映射到范围内，例如将其放置在`0xfffff000`处。
- en: '* * *'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Clock Server
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时钟服务器
- en: Primitives
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原语
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Clock server starts at zero when it initializes
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时钟服务器在初始化时从零开始
- en: Unit of time is tick
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间单位是滴答
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note error returns
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意错误返回
- en: You might want to add an error for negative arguments
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能想为负参数添加一个错误
- en: ticks is usually calculated, and a negative value is an early warning of falling
    behind.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常计算滴答声，负值是落后的早期警告。
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Can be constructed from the above two primitives.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以从上述两个原语构建。
- en: Implementation
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实施
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Comments:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注释：
- en: You need a common request type, or possibly a union.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要一个常见的请求类型，或者可能是一个联合体。
- en: You should notice a typical server pattern.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该注意到一个典型的服务器模式。
- en: Notifier updates data
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知者更新数据
- en: Client who can be serviced now is serviced
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以提供服务的客户端已经得到服务
- en: Client who needs service in the future is suspended
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未来需要服务的客户端被挂起
- en: List of suspended tasks is checked regularly
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挂起任务列表定期检查
- en: It's normal to sort the list of suspended tasks. Why?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对挂起任务列表进行排序是正常的。为什么？
- en: '* * *'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: HALT versus an Idle Task
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HALT与空闲任务
- en: What do you do when there are no tasks to run?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有任务可运行时，你会怎么做？
- en: Idle task
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空闲任务
- en: lowest priority
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低优先级
- en: diagnose system
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诊断系统
- en: Philosophical problem. It's easy to detect an error; but what do you do when
    you detect an error.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哲学问题。检测错误很容易；但当你检测到错误时该怎么办。
- en: 'Extreme example: incomplete transaction versus explosion'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极端例子：不完整的交易与爆炸
- en: Practical solution is to divide errors into two categories
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将错误分为两类的实际解决方案
- en: 'Recover without stopping. Extreme example is Magellan spacecraft:'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在不停止的情况下恢复。极端例子是麦哲伦号航天器：
- en: In behind Venus, silence; out from behind Venus, talking again
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金星后面是寂静；金星后面又开始交谈
- en: 'During orbit insertion: out from behind Venus, nothing'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在轨道插入期间：从金星后面出来，什么都没有
- en: Wait six weeks, "I'm here."
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等六周，“我在这里。”
- en: Wait three weeks, nothing
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等三周，什么都没有
- en: Wait six weeks, "I'm here."
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等六周，“我在这里。”
- en: Wait three weeks, "I'm stabilized."
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等三周，“我稳定了。”
- en: What was going on?
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: Stop, diagnose, re-program, re-run
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止，诊断，重新编程，重新运行
- en: 'Extreme example is Magellan spacecraft:'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 极端例子是麦哲伦号航天器：
- en: In behind Venus, silence; out from behind Venus, talking again
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 金星后面是寂静；金星后面又开始交谈
- en: 'During orbit insertion: out from behind Venus, nothing'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在轨道插入期间：从金星后面出来，什么都没有
- en: Wait six weeks, "I'm here." Wait three weeks, nothing
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等六周，“我在这里。” 等三周，什么都没有
- en: Wait six weeks, "I'm here."
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等六周，“我在这里。”
- en: Wait three weeks, "I'm stabilized."
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等三周，“我稳定了。”
- en: What was going on?
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: Now enter second category in the standard two box development model.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在进入标准的两箱开发模型中的第二类别。
- en: search for ETI
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索ETI
- en: STANDBY/HALT
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 待机/停止
- en: turns off CPU clock
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭CPU时钟
- en: save power (battery)
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节省电力（电池）
- en: provided two ways
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供两种方式
- en: through System Controller Co-processor
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过系统控制器协处理器
- en: Use MCR instruction, to access co-processor 15.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MCR指令，访问协处理器15。
- en: can only be executed in privileged modes
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只能在特权模式下执行
- en: through EP9302
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过EP9302
- en: write location `0x80930008` (HALT) or `0x8093000c` (STANDBY)
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入位置`0x80930008`（停止）或`0x8093000c`（待机）
- en: bit must be set in `0x80930080`
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位必须设置为`0x80930080`
- en: IRQ path is asynchronous, so it works when the clock is off
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: IRQ路径是异步的，因此在时钟关闭时起作用
- en: but interrupts must be enabled
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但必须启用中断
- en: therefore you want to be in user mode
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此你想要处于用户模式
- en: See [pdf](../../pdf/halt.pdf) for some details.
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看[pdf](../../pdf/halt.pdf)以获取一些细节。
- en: '* * *'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Serial I/O
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 串行I/O
- en: See [pdf](../../s10/pdf/sio.pdf).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[pdf](../../s10/pdf/sio.pdf)。
- en: FIFO
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: FIFO
- en: Why do FIFOs exist in UARTS?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么UART中存在FIFO？
- en: The Big Blunder
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大错误
- en: To use the FIFO effectively you must be able to turn off the transmitter & receiver
    independently.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要有效使用FIFO，必须能够独立关闭发射机和接收机。
- en: But look at UARTE in UARTxCtrl
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 但看看UARTxCtrl中的UARTE
- en: UART Enable.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UART启用。
- en: If this bit is set to 1, the UART is enabled.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果此位设置为1，则UART已启用。
- en: Data transmission and reception occurs for UART signals.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UART信号进行数据传输和接收。
- en: The Little Blunder
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小错误
- en: '`It is assumed that various configuration registers for the UART are not written
    more than once in quick succession, in order to insure proper synchronization
    of configuration information across the implementation. Such registers include
    UART1Ctrl and UART1LinCtrlHigh. ... In between the two writes, at least two UARTCLK
    periods must occur. Under worst case conditions, at least 55 HCLK periods must
    separate the two writes. The simplest way to due [sic] this is separate the two
    writes by 55 NOPs.'''
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: “假设UART的各种配置寄存器不会连续写入多次，以确保在实现中跨配置信息的正确同步。这些寄存器包括UART1Ctrl和UART1LinCtrlHigh。...在两次写入之间，至少必须经过两个UARTCLK周期。在最坏的情况下，两次写入之间必须至少有55个HCLK周期。最简单的方法是通过55个NOP分隔两次写入。”
- en: Why does this occur?
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会发生这种情况？
- en: CPU clocked by CPU clock
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU由CPU时钟驱动
- en: System buses clocked by several different clocks
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统总线由几个不同的时钟驱动
- en: UART clocked by its own clock
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UART由自己的时钟驱动
- en: The clocks were not suitably synchronized
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时钟未适当同步
- en: Why doesn't anybody care?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么没有人在乎？
- en: UARTs are used at the beginning of the development process
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UART在开发过程的开始阶段使用
- en: Once other I/O (ethernet, USB, etc.) is working, UARTs are no longer used, except
    by the boot loader
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦其他I/O（以太网，USB等）工作正常，UART就不再被使用，除了启动加载程序
- en: Interrupts
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中断
- en: Five interrupts in the device
  id: totrans-133
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 设备中有五个中断
- en: These interrupts are separately enabled and disabled.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这些中断可以单独启用和禁用。
- en: Transmit
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发射
- en: FIFO enabled
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用FIFO
- en: Asserted when transmit FIFO is less than half full.
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当传输FIFO少于一半时断言。
- en: Cleared when transmit FIFO is more than half full.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当传输FIFO超过一半时清除。
- en: FIFO disabled
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用FIFO
- en: Asserted when holding register is empty
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当保持寄存器为空时断言
- en: Cleared on write to the holding register
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入保持寄存器时清除
- en: Not conditioned by enable.
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不受启用条件限制。
- en: Receive
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接收
- en: FIFO enabled
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: FIFO已启用
- en: Asserted when receive FIFO is half full
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当接收FIFO半满时断言
- en: Cleared when receive FIFO is read to less than half full.
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当接收FIFO读取至不足半满时清除
- en: FIFO disabled
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: FIFO已禁用
- en: Asserted when receive buffer is full
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当接收缓冲区已满时断言
- en: Cleared when receive buffer is read
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当接收缓冲区被读取时清除
- en: Modem status
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调制解调器状态
- en: Asserted when hardware flow control bits change
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当硬件流控位发生变化时断言
- en: Cleared when the modem status register is written
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当调制解调器状态寄存器被写入时清除
- en: Receive timeout
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接收超时
- en: Asserted when receive FIFO is not empty and 32 bit periods pass with no new
    data
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当接收FIFO非空且经过32个位周期没有新数据时断言
- en: Cleared when all data has been read from FIFO
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当所有数据从FIFO中读取完毕时清除
- en: Combined
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组合
- en: OR of the four above interrupts
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上述四个中断的OR
- en: Asserted when at least one of the above interrupts is asserted
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当上述任一中断被断言时断言
- en: Cleared when all the above interrupts are not asserted.
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当上述所有中断都未被断言时清除
- en: Three inputs to the PIC
  id: totrans-160
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: PIC的三个输入
- en: Transmit
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传输
- en: Receive
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接收
- en: Combined
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组合
- en: Easy way to use interrupts
  id: totrans-164
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用中断的简单方法
- en: Enable only combined; read UART registers to decide what to do.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 仅启用组合；读取UART寄存器以决定下一步操作。
- en: Think of the receive and transmit parts of the UART as separate state machines
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 将UART的接收和发送部分视为独立的状态机
- en: Base the state machine on bits in the status registers
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于状态寄存器中的位来构建状态机
- en: Make a separate state machine for flow control
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作一个独立的状态机用于流量控制
- en: '* * *'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Return to:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 返回至：
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan在s12的CS452课程讲义](index.html)'
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan 2012年春季CS452页面](../index.html)'
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan的CS452页面](../../index.html)'
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan的教学页面](../../../index.html)'
- en: '[Bill Cowan''s home page](../../../../index.html)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan的主页](../../../../index.html)'
