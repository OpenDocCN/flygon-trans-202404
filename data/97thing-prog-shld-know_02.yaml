- en: Apply Functional Programming Principles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用函数式编程原则
- en: Apply Functional Programming Principles
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用函数式编程原则
- en: Functional programming has recently enjoyed renewed interest from the mainstream
    programming community. Part of the reason is because *emergent properties* of
    the functional paradigm are well positioned to address the challenges posed by
    our industry's shift toward multi-core. However, while that is certainly an important
    application, it is not the reason this piece admonishes you to *know thy functional
    programming*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程最近受到主流编程社区的重新关注。部分原因是因为函数式范式的新兴属性很好地适应了我们行业向多核转变所带来的挑战。然而，虽然这确实是一个重要的应用，但这并不是本文告诫您*了解您的函数式编程*的原因。
- en: Mastery of the functional programming paradigm can greatly improve the quality
    of the code you write in other contexts. If you deeply understand and apply the
    functional paradigm, your designs will exhibit a much higher degree of *referential
    transparency*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 精通函数式编程范式可以极大地提高您在其他情境下编写的代码质量。如果您深刻理解并应用函数式范式，您的设计将表现出更高程度的*引用透明度*。
- en: 'Referential transparency is a very desirable property: It implies that functions
    consistently yield the same results given the same input, irrespective of where
    and when they are invoked. That is, function evaluation depends less — ideally,
    not at all — on the side effects of mutable state.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 引用透明度是一个非常可取的属性：它意味着函数在给定相同输入时一致产生相同的结果，不管它们何时何地被调用。也就是说，函数的评估减少了 —— 理想情况下，完全不依赖于可变状态的副作用。
- en: A leading cause of defects in imperative code is attributable to mutable variables.
    Everyone reading this will have investigated why some value is not as expected
    in a particular situation. Visibility semantics can help to mitigate these insidious
    defects, or at least to drastically narrow down their location, but their true
    culprit may in fact be the providence of designs that employ inordinate mutability.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令式代码中缺陷的主要原因之一归因于可变变量。阅读此文的每个人都会调查为什么在特定情况下某个值不如预期那样。可见性语义可以帮助减轻这些隐匿的缺陷，或者至少大大缩小它们的位置范围，但其真正罪魁祸首实际上可能是采用过度可变性的设计。
- en: And we certainly don't get much help from industry in this regard. Introductions
    to object orientation tacitly promote such design, because they often show examples
    composed of graphs of relatively long-lived objects that happily call mutator
    methods on each other, which can be dangerous. However, with astute test-driven
    design, particularly when being sure to ["Mock Roles, not Objects"](http://www.jmock.org/oopsla2004.pdf),
    unnecessary mutability can be designed away.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 而我们在这方面确实没有得到行业的太多帮助。面向对象的介绍潜在地促进了这种设计，因为它们经常显示由相对长寿的对象组成的图形示例，这些对象愉快地调用彼此的变异方法，这可能是危险的。然而，通过敏锐的测试驱动设计，特别是当确保["Mock
    Roles, not Objects"](http://www.jmock.org/oopsla2004.pdf)时，可以设计掉不必要的可变性。
- en: The net result is a design that typically has better responsibility allocation
    with more numerous, smaller functions that act on arguments passed into them,
    rather than referencing mutable member variables. There will be fewer defects,
    and furthermore they will often be simpler to debug, because it is easier to locate
    where a rogue value is introduced in these designs than to otherwise deduce the
    particular context that results in an erroneous assignment. This adds up to a
    much higher degree of referential transparency, and positively nothing will get
    these ideas as deeply into your bones as learning a functional programming language,
    where this model of computation is the norm.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 其净结果是一种设计，通常具有更好的责任分配，具有更多的、更小的函数，这些函数作用于传递给它们的参数，而不是引用可变成员变量。缺陷会更少，而且它们通常更容易调试，因为在这些设计中定位引入异常值的位置比推断导致错误赋值的特定上下文更容易。这累加到一个更高程度的引用透明度，而且没有什么比学习函数式编程语言更能让这些理念深入人心的了，在这种计算模型是常态的地方。
- en: Of course, this approach is not optimal in all situations. For example, in object-oriented
    systems this style often yields better results with domain model development (i.e.,
    where collaborations serve to break down the complexity of business rules) than
    with user-interface development.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种方法并不是在所有情况下都是最优的。例如，在面向对象的系统中，这种风格通常在领域模型开发（即，协作用于分解业务规则的复杂性）方面比在用户界面开发方面产生更好的结果。
- en: Master the functional programming paradigm so you are able to judiciously apply
    the lessons learned to other domains. Your object systems (for one) will resonate
    with referential transparency goodness and be much closer to their functional
    counterparts than many would have you believe. In fact, some would even assert
    that the apex of functional programming and object orientation are *merely a reflection
    of each other*, a form of computational yin and yang.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握函数式编程范式，这样你就能明智地将所学到的经验应用到其他领域。你的对象系统（其中之一）将会 resonant with referential transparency
    goodness，并且比许多人所认为的更接近它们的函数式对应物。事实上，有些人甚至会断言函数式编程和面向对象的顶点*仅仅是彼此的反射*，一种计算上的阴阳之形。
- en: By [Edward Garson](http://programmer.97things.oreilly.com/wiki/index.php/Edward_Garson)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[Edward Garson](http://programmer.97things.oreilly.com/wiki/index.php/Edward_Garson)
