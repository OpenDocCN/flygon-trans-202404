- en: Implementing First Class Functions (contd.)Tuesday, January 31st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现一流函数（续）星期二，1月31日
- en: 'Quick Example: the following is working JavaScript code, that uses first class
    functions.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 快速示例：以下是可工作的 JavaScript 代码，使用了一流函数。
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the above definition of `foo` does *not* use an anonymous “lambda
    expression” — in Racket terms, it’s translated to
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意上述 `foo` 的定义 *不* 使用匿名的“lambda 表达式” —— 用 Racket 术语来说，它被翻译为
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The returned function is not anonymous, but it’s not really named either: the
    `bar` name is bound only inside the body of `foo`, and outside of it that name
    no longer exists since it’s not its scope. It gets used in the printed form if
    the function value is displayed, but this is merely a debugging aid. The anonymous
    `lambda` version that is common in Racket can be used in JavaScript too:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的函数不是匿名的，但也不是真正的命名：`bar` 名称仅在 `foo` 的主体内绑定，在外部不存在，因为它不在其范围内。如果显示函数值，它会以打印形式使用，但这仅仅是一种调试辅助工具。在
    Racket 中常见的匿名 `lambda` 版本也可以在 JavaScript 中使用：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Side-note: GCC includes extensions that allow internal function definitions,
    but it still does not have first class functions — trying to do the above is broken:'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 侧面说明：GCC 包含允许内部函数定义的扩展，但仍然没有一流函数 —— 尝试上述操作会失败：
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
