- en: 'Reading 2: Basic Java'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读2：基本Java
- en: '**Due the night before class:** you must complete the reading exercises in
    this reading by Thursday, September 8 at 10:00 pm. The reading exercises are graded
    solely on completion, never on correctness, as described in the [course general
    info](../../general/#classes_readings_and_nanoquizzes).'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**上课前晚完成：**你必须在9月8日星期四晚上10:00之前完成本次阅读中的阅读练习。 阅读练习仅根据完成情况评分，永远不会根据正确性评分，详情请参阅[课程概况](../../general/#classes_readings_and_nanoquizzes)。'
- en: '**Getting credit for reading exercises:** on the right is a big red ***log
    in*** button. You will only receive credit for reading exercises if you are logged
    in when you do them.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**获取阅读练习学分：**右侧有一个大大的红色***登录***按钮。只有在做练习时登录才能获得阅读练习的学分。'
- en: '**Due before class:** you must complete [Problem Set 0 Part I](../../psets/ps0/)
    before class on Friday, September 9 at 1:00 pm.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**上课前完成：**你必须在9月9日星期五下午1:00之前完成[问题集0部分I](../../psets/ps0/)。'
- en: '**Due Sunday:** you must complete the [*Basic Java* exercises in the Java Tutor](../../getting-started/java-tutor/#required)
    by Sunday, September 11 at 10:00 pm.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**周日前完成：**你必须在9月11日星期日晚上10:00之前完成Java导师中的[*基本Java*练习](../../getting-started/java-tutor/#required)。'
- en: '**Optionally, due Monday:** complete [the first three levels of Java Tutor
    exercises](../../getting-started/java-tutor/#optional) by Monday, September 12
    at 10:00 pm to earn a free slack day on [Problem Set 0](../../psets/ps0/).'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选，截止到周一：**完成[Java导师练习的前三个级别](../../getting-started/java-tutor/#optional)来赚取[问题集0](../../psets/ps0/)的一个免费slack日。'
- en: Objectives
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目标
- en: Learn basic Java syntax and semantics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习基本的Java语法和语义
- en: Transition from writing Python to writing Java
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从编写Python转向编写Java
- en: Software in 6.005
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在6.005中的软件
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 免受错误干扰 | 易于理解 | 准备好应对变化 |'
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 今天正确，未来也正确。 | 与未来的程序员清晰沟通，包括未来的你。 | 设计以适应未来的变化而不需要重写。 |'
- en: Getting started with the Java Tutorials
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用Java教程
- en: The next few sections link to the **[Java Tutorials](http://docs.oracle.com/javase/tutorial/index.html)**
    web site to get you up to speed with the basics, with reading exercises to check
    your understanding.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几节将链接到**[Java教程](http://docs.oracle.com/javase/tutorial/index.html)**网站，以帮助您快速掌握基础知识，并提供阅读练习以检查您的理解。
- en: After reading the tutorial pages and trying these reading exercises, use 6.005’s
    **[Java Tutor](../../getting-started/java-tutor/)** in Eclipse to practice what
    you’ve learned.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读教程页面并尝试这些阅读练习后，使用6.005的**[Java导师](../../getting-started/java-tutor/)**在Eclipse中练习您所学的内容。
- en: This reading and other resources will frequently refer you to the [Java API
    documentation](http://docs.oracle.com/javase/8/docs/api/) which describes all
    the classes built in to Java.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本阅读和其他资源将经常引导您查阅[Java API文档](http://docs.oracle.com/javase/8/docs/api/)，该文档描述了Java内置的所有类。
- en: Language basics
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语言基础
- en: Read **[Language Basics](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/index.html)**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读**[语言基础](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/index.html)**。
- en: You should be able to answer the questions on the *Questions and Exercises*
    pages for all four of the langage basics topics.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够回答关于四个语言基础主题的*问题与练习*页面上的问题。
- en: '[Questions: Variables](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/QandE/questions_variables.html)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[问题：变量](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/QandE/questions_variables.html)'
- en: '[Questions: Operators](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/QandE/questions_operators.html)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[问题：运算符](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/QandE/questions_operators.html)'
- en: '[Questions: Expressions, Statements, Blocks](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/QandE/questions_expressions.html)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[问题：表达式、语句、代码块](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/QandE/questions_expressions.html)'
- en: '[Questions: Control Flow](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/QandE/questions_flow.html)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[问题：控制流程](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/QandE/questions_flow.html)'
- en: Note that each *Questions and Exercises* page has a link at the bottom to solutions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个*问题与练习*页面底部都有指向解决方案的链接。
- en: 'Also check your understanding by answering some questions about how the basics
    of Java compare to the basics of Python:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 还通过回答一些关于Java基础与Python基础相比较的问题来检查您的理解：
- en: reading exercises
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Language basics
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 语言基础
- en: Suppose we’re editing the body of a function in Java, declaring and using local
    variables.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在编辑Java中一个函数的主体，声明和使用局部变量。
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <select class="form-control"><option>1</option>,<option>2</option>,<option>3</option>,<option>4</option>,<option>5</option>,<option>6</option>,<option>7</option></select>(missing
    answer)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>1</option>,<option>2</option>,<option>3</option>,<option>4</option>,<option>5</option>,<option>6</option>,<option>7</option></select>(缺少答案)
- en: (missing explanation)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: (缺少解释)
- en: Fix the bug(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 修复错误(缺少答案)(缺少答案)(缺少答案)(缺少答案)(缺少答案)
- en: (missing explanation)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: (缺少解释)
- en: Who are you again?(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你是谁？(缺少答案)(缺少答案)(缺少答案)(缺少答案)(缺少答案)(缺少答案)
- en: (missing explanation)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: (缺少解释)
- en: Numbers and strings
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字和字符串
- en: Read **[Numbers and Strings](http://docs.oracle.com/javase/tutorial/java/data/index.html)**.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读**[数字和字符串](http://docs.oracle.com/javase/tutorial/java/data/index.html)**。
- en: Don’t worry if you find the `Number` wrapper classes confusing. They are.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得`Number`包装类令人困惑，不要担心。它们确实如此。
- en: You should be able to answer the questions on both *Questions and Exercises*
    pages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够回答*问题和练习*页面上的所有问题。
- en: '[Questions: Numbers](http://docs.oracle.com/javase/tutorial/java/data/QandE/numbers-questions.html)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[问题：数字](http://docs.oracle.com/javase/tutorial/java/data/QandE/numbers-questions.html)'
- en: '[Questions: Characters, Strings](http://docs.oracle.com/javase/tutorial/java/data/QandE/characters-questions.html)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[问题：字符，字符串](http://docs.oracle.com/javase/tutorial/java/data/QandE/characters-questions.html)'
- en: reading exercises
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Numbers and strings
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 数字和字符串
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (missing answer)(missing answer)(missing answer)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: (缺少答案)(缺少答案)(缺少答案)
- en: (missing explanation)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: (缺少解释)
- en: Double shot(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 双重射击(缺少答案)(缺少答案)(缺少答案)(缺少答案)(缺少答案)(缺少答案)(缺少答案)(缺少答案)(缺少答案)
- en: (missing explanation)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: (缺少解释)
- en: Fit to print(missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 适合打印(缺少答案)(缺少答案)(缺少答案)(缺少答案)
- en: (missing explanation)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: (缺少解释)
- en: Classes and objects
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类和对象
- en: Read **[Classes and Objects](http://docs.oracle.com/javase/tutorial/java/javaOO/index.html)**.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读**[类和对象](http://docs.oracle.com/javase/tutorial/java/javaOO/index.html)**。
- en: You should be able to answer the questions on the first two *Questions and Exercises*
    pages.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够回答前两个*问题和练习*页面上的问题。
- en: '[Questions: Classes](http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/creating-questions.html)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[问题：类](http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/creating-questions.html)'
- en: '[Questions: Objects](http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/objects-questions.html)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[问题：对象](http://docs.oracle.com/javase/tutorial/java/javaOO/QandE/objects-questions.html)'
- en: Don’t worry if you don’t understand everything in *Nested Classes* and *Enum
    Types* right now. You can go back to those constructs later in the semester when
    we see them in class.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在不理解*嵌套类*和*枚举类型*中的一切，不要担心。当我们在课堂上看到它们时，你可以在本学期后期回顾这些构造。
- en: reading exercises
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Classes and objects
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 类和对象
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <select class="form-control"><option>public Tortoise()</option>,<option>new
    Tortoise()</option>,<option>Tortoise t = new Tortoise()</option>,<option>public
    class Tortoise</option>,<option>public class MyTortoise implements Tortoise</option></select>(missing
    answer)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>public Tortoise()</option>,<option>new
    Tortoise()</option>,<option>Tortoise t = new Tortoise()</option>,<option>public
    class Tortoise</option>,<option>public class MyTortoise implements Tortoise</option></select>(缺少答案)
- en: (missing explanation)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: (缺少解释)
- en: Under construction
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正在建设中
- en: In Python we declare an `__init__` function to initialize new objects.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们声明一个`__init__`函数来初始化新对象。
- en: <select class="form-control"><option>public Tortoise()</option>,<option>new
    Tortoise()</option>,<option>Tortoise t = new Tortoise()</option>,<option>public
    class Tortoise</option>,<option>public class MyTortoise implements Tortoise</option></select>(missing
    answer)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>public Tortoise()</option>,<option>new
    Tortoise()</option>,<option>Tortoise t = new Tortoise()</option>,<option>public
    class Tortoise</option>,<option>public class MyTortoise implements Tortoise</option></select>(缺少答案)
- en: (missing explanation)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: (缺少解释)
- en: <select class="form-control"><option>public Tortoise()</option>,<option>new
    Tortoise()</option>,<option>Tortoise t = new Tortoise()</option>,<option>public
    class Tortoise</option>,<option>public class MyTortoise implements Tortoise</option></select>(missing
    answer)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>public Tortoise()</option>,<option>new
    Tortoise()</option>,<option>Tortoise t = new Tortoise()</option>,<option>public
    class Tortoise</option>,<option>public class MyTortoise implements Tortoise</option></select>(缺少答案)
- en: (missing explanation)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: Methodical
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 方法论
- en: 'To declare the `forward` method on `Tortoise` objects in Java:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java上声明`Tortoise`对象上的`forward`方法：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)(缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: On your mark
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好
- en: In Python, we used `self.position = 0` to give `Tortoise` objects a `position`
    that starts at zero.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们使用`self.position = 0`给`Tortoise`对象一个从零开始的`position`。
- en: 'In Java, we can do this either in one line:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，我们可以一行完成这个操作：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '(missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer) … or in a combination of lines:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)(缺失答案)(缺失答案)(缺失答案)(缺失答案) … 或者结合几行：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)
    (missing explanation)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)(缺失答案)(缺失答案)(缺失答案) (缺失解释)
- en: Hello, world!
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你好，世界！
- en: Read **[Hello World!](http://docs.oracle.com/javase/tutorial/getStarted/application/index.html)**
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读**[Hello World！](http://docs.oracle.com/javase/tutorial/getStarted/application/index.html)**
- en: You should be able to create a new `HelloWorldApp.java` file, enter the code
    from that tutorial page, and compile and run the program to see `Hello World!`
    on the console.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够创建一个新的`HelloWorldApp.java`文件，输入来自该教程页面的代码，然后编译和运行程序，在控制台上看到`Hello World!`。
- en: '* * *'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Snapshot diagrams
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快照图
- en: Many readings include optional videos from the MITx version of 6.005\.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 许多阅读包括来自 6.005 版本的 MITx 的可选视频。
- en: '[More info about the videos](../../general/#classes_readings_and_nanoquizzes)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[有关视频的更多信息](../../general/#classes_readings_and_nanoquizzes)'
- en: 'Note: this video uses a **different version** of the text.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：此视频使用**不同版本**的文本。
- en: '[**▶ Play MITx video**](https://courses.csail.mit.edu/6.005/video/reading_2_basic_java,snapshot_diagrams/nLk1sWJthcg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[**▶ 播放 MITx 视频**](https://courses.csail.mit.edu/6.005/video/reading_2_basic_java,snapshot_diagrams/nLk1sWJthcg)'
- en: It will be useful for us to draw pictures of what’s happening at runtime, in
    order to understand subtle questions. **Snapshot diagrams** represent the internal
    state of a program at runtime – its stack (methods in progress and their local
    variables) and its heap (objects that currently exist).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们有用的是，在运行时绘制发生的情况的图片，以便理解微妙的问题。**快照图**表示程序在运行时的内部状态 - 其堆栈（正在进行的方法及其局部变量）和其堆（当前存在的对象）。
- en: 'Here’s why we use snapshot diagrams in 6.005:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在 6.005 中使用快照图的原因：
- en: To talk to each other through pictures (in class and in team meetings)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过图片互相交流（在课堂上和团队会议中）
- en: To illustrate concepts like primitive types vs. object types, immutable values
    vs. immutable references, pointer aliasing, stack vs. heap, abstractions vs. concrete
    representations.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于说明概念，如原始类型 vs. 对象类型，不可变值 vs. 不可变引用，指针别名，堆栈 vs. 堆，抽象 vs. 具体表示。
- en: To help explain your design for your team project (with each other and with
    your TA).
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助解释你的团队项目的设计（与团队和TA互相之间）。
- en: To pave the way for richer design notations in subsequent courses. For example,
    snapshot diagrams generalize into object models in 6.170.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为后续课程中更丰富的设计符号铺平道路。例如，快照图在 6.170 中概括成对象模型。
- en: Although the diagrams in this course use examples from Java, the notation can
    be applied to any modern programming language, e.g., Python, Javascript, C++,
    Ruby.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本课程中的图表使用Java的示例，但这种符号可以应用于任何现代编程语言，例如Python、Javascript、C++、Ruby。
- en: Primitive values
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原始值
- en: '![primitive values in snapshot diagram](../Images/8ffc744796b72355996d948ed89a79bf.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![快照图中的原始值](../Images/8ffc744796b72355996d948ed89a79bf.jpg)'
- en: Primitive values are represented by bare constants. The incoming arrow is a
    reference to the value from a variable or an object field.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 原始值由裸露的常量表示。传入的箭头是来自变量或对象字段的值的引用。
- en: Object values
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象值
- en: '![object values in snapshot diagram](../Images/f5986785ea4e0ffd958409cf0ca2acbe.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![快照图中的对象值](../Images/f5986785ea4e0ffd958409cf0ca2acbe.jpg)'
- en: An object value is a circle labeled by its type. When we want to show more detail,
    we write field names inside it, with arrows pointing out to their values. For
    still more detail, the fields can include their declared types. Some people prefer
    to write `x:int` instead of `int x`, but both are fine.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对象值是一个以其类型标记的圆圈。当我们想要显示更多细节时，我们将字段名称写在里面，并用箭头指向它们的值。为了更多细节，字段可以包括它们声明的类型。有些人更喜欢写`x:int`而不是`int
    x`，但两者都可以。
- en: Mutating values vs. reassigning variables
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变异值 vs. 重新分配变量
- en: 'Snapshot diagrams give us a way to visualize the distinction between changing
    a variable and changing a value:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 快照图为我们提供了一种可视化的方式来区分改变变量和改变值之间的区别：
- en: When you assign to a variable or a field, you’re changing where the variable’s
    arrow points. You can point it to a different value.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你将一个变量或字段分配给一个值时，你正在改变变量的箭头指向的位置。你可以将它指向一个不同的值。
- en: When you assign to the contents of a mutable value – such as an array or list
    – you’re changing references inside that value.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你分配给可变值的内容时（比如数组或列表），你正在改变该值内部的引用。
- en: Reassignment and immutable values
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重新分配和不可变值
- en: '![reassigning a variable](../Images/c8ea1836cff0d824cdbaa220bd352469.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![重新分配变量](../Images/c8ea1836cff0d824cdbaa220bd352469.jpg)'
- en: For example, if we have a [`String`](http://docs.oracle.com/javase/8/docs/api/?java/lang/String.html)
    variable `s`, we can reassign it from a value of `"a"` to `"ab"`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个[`String`](http://docs.oracle.com/javase/8/docs/api/?java/lang/String.html)变量`s`，我们可以将其从值`"a"`重新分配为`"ab"`。
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`String` is an example of an *immutable* type, a type whose values can never
    change once they have been created. Immutability (immunity from change) is a major
    design principle in this course, and we’ll talk much more about it in future readings.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`String`是*不可变*类型的示例，一旦创建后其值就永远不会改变。不可变性（免疫于变化）是本课程的一个重要设计原则，在未来的阅读中我们将更多地讨论它。'
- en: Immutable objects (intended by their designer to always represent the same value)
    are denoted in a snapshot diagram by a double border, like the `String` objects
    in our diagram.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变对象（由其设计者设计为始终表示相同值）在快照图中用双边框表示，就像我们图中的`String`对象一样。
- en: Mutable values
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 可变值
- en: '![mutating an object](../Images/13735d91ebf80ad8f461f5a12fc35103.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![改变对象的状态](../Images/13735d91ebf80ad8f461f5a12fc35103.jpg)'
- en: 'By contrast, [`StringBuilder`](http://docs.oracle.com/javase/8/docs/api/?java/lang/StringBuilder.html)
    (another built-in Java class) is a *mutable* object that represents a string of
    characters, and it has methods that change the value of the object:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，[`StringBuilder`](http://docs.oracle.com/javase/8/docs/api/?java/lang/StringBuilder.html)（另一个内置Java类）是一个*可变*对象，表示一串字符，并且它有改变对象值的方法：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'These two snapshot diagrams look very different, which is good: the difference
    between mutability and immutability will play an important role in making our
    code *safe from bugs*.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个快照图看起来非常不同，这很好：可变性和不可变性之间的差异将在使我们的代码*免受错误*方面发挥重要作用。
- en: Immutable references
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 不可变引用
- en: 'Java also gives us immutable references: variables that are assigned once and
    never reassigned. To make a reference immutable, declare it with the keyword `final`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Java还为我们提供了不可变引用：只分配一次并且不再重新分配的变量。要使引用不可变，使用关键字`final`声明它：
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![final reference is a double arrow](../Images/abee6b9961349e677c3fdbf95e62d277.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![最终参考是双箭头](../Images/abee6b9961349e677c3fdbf95e62d277.jpg)'
- en: If the Java compiler isn’t convinced that your `final` variable will only be
    assigned once at runtime, then it will produce a compiler error. So `final` gives
    you static checking for immutable references.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Java编译器不确信你的`final`变量在运行时只会被分配一次，那么它将产生编译错误。所以`final`为不可变引用提供了静态检查。
- en: In a snapshot diagram, an immutable reference (`final`) is denoted by a double
    arrow. Here’s an object whose `id` never changes (it can’t be reassigned to a
    different number), but whose `age` can change.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在快照图中，不可变引用（`final`）用双箭头表示。这里有一个对象，它的`id`永远不会改变（它不能被重新分配到一个不同的数字），但`age`可以改变。
- en: 'Notice that we can have an *immutable reference* to a *mutable value* (for
    example: `final StringBuilder sb`) whose value can change even though we’re pointing
    to the same object.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以有一个对*可变值*的*不可变引用*（例如：`final StringBuilder sb`），尽管我们指向同一个对象，其值也可以改变。
- en: We can also have a *mutable reference* to an *immutable value* (like `String
    s`), where the value of the variable can change because it can be re-pointed to
    a different object.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以有一个对*不可变值*的*可变引用*（比如`String s`），其中变量的值可以改变，因为它可以被重新指向一个不同的对象。
- en: '* * *'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Java Collections
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java集合
- en: 'The very first Language Basics tutorial discussed [**arrays**](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html),
    which are *fixed-length* containers for a sequence of objects or primitive values.
    Java provides a number of more powerful and flexible tools for managing *collections*
    of objects: the **Java Collections Framework**.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个语言基础教程讨论了[**数组**](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html)，它们是一个包含一系列对象或基本值的*固定长度*容器。Java提供了一些更强大和灵活的工具来管理对象的*集合*：**Java集合框架**。
- en: Lists, Sets, and Maps
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表、集合和映射
- en: '**A [Java `List`](http://docs.oracle.com/javase/8/docs/api/?java/util/List.html)
    is similar to a [Python list](https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range).**
    A `List` contains an ordered collection of zero or more objects, where the same
    object might appear multiple times. We can add and remove items to and from the
    `List`, which will grow and shrink to accomodate its contents.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Java `List`](http://docs.oracle.com/javase/8/docs/api/?java/util/List.html)
    类似于 [Python 列表](https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range)。**
    一个 `List` 包含一个有序的零个或多个对象的集合，其中同一个对象可能多次出现。 我们可以向 `List` 添加和删除项目，它将根据其内容增长和缩小。'
- en: 'Example `List` operations:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 `List` 操作：
- en: '| Java | description | Python |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| Java | 描述 | Python |'
- en: '| --- | --- | --- |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `int count = lst.size();` | count the number of elements | `count = len(lst)`
    |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `int count = lst.size();` | 计算元素数量 | `count = len(lst)` |'
- en: '| `lst.add(e);` | append an element to the end | `lst.append(e)` |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `lst.add(e);` | 将元素追加到末尾 | `lst.append(e)` |'
- en: '| `if (lst.isEmpty()) ...` | test if the list is empty | `if not lst: ...`
    |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `if (lst.isEmpty()) ...` | 测试列表是否为空 | `if not lst: ...` |'
- en: 'In a snapshot diagram, we represent a `List` as an object with indices drawn
    as fields:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在快照图中，我们将 `List` 表示为具有索引绘制为字段的对象：
- en: This list of `cities` might represent a trip from Boston to Bogotá to Barcelona.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `cities` 列表可能代表从波士顿到波哥大再到巴塞罗那的旅程。
- en: '**A [`Set`](http://docs.oracle.com/javase/8/docs/api/?java/util/Set.html) is
    an unordered collection of zero or more unique objects.** Like a mathematical
    *set* or a [Python set](https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset)
    – and unlike a `List` – an object cannot appear in a set multiple times. Either
    it’s in or it’s out.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**[`Set`](http://docs.oracle.com/javase/8/docs/api/?java/util/Set.html) 是一个无序的零个或多个唯一对象的集合。**
    像数学 *集合* 或 [Python set](https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset)
    —— 与 `List` 不同 —— 对象不能多次出现在集合中。 它要么在里面，要么在外面。'
- en: 'Example `Set` operations:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 `Set` 操作：
- en: '| Java | description | Python |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| Java | 描述 | Python |'
- en: '| --- | --- | --- |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `s1.contains(e)` | test if the set contains an element | `e in s1` |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `s1.contains(e)` | 测试集合是否包含元素 | `e in s1` |'
- en: '| `s1.containsAll(s2)` | test whether *s1 ⊇ s2* | `s1.issuperset(s2)` `s1 >=
    s2` |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `s1.containsAll(s2)` | 测试 *s1 ⊇ s2* | `s1.issuperset(s2)` `s1 >= s2` |'
- en: '| `s1.removeAll(s2)` | remove *s2* from *s1* | `s1.difference_update(s2)` `s1
    -= s2` |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `s1.removeAll(s2)` | 从 *s1* 中删除 *s2* | `s1.difference_update(s2)` `s1 -=
    s2` |'
- en: 'In a snapshot diagram, we represent a `Set` as an object with no-name fields:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在快照图中，我们将 `Set` 表示为没有名称字段的对象：
- en: 'Here we have a set of integers, in no particular order: 42, 1024, and -7.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们有一组整数，顺序不限：42、1024 和 -7。
- en: '**A [`Map`](http://docs.oracle.com/javase/8/docs/api/?java/util/Map.html) is
    similar to a [Python dictionary](https://docs.python.org/3/library/stdtypes.html#mapping-types-dict).**
    In Python, the **keys** of a map must be [hashable](https://docs.python.org/3/glossary.html#term-hashable).
    Java has a similar requirement that we’ll discuss when we confront how equality
    works between Java objects.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**[`Map`](http://docs.oracle.com/javase/8/docs/api/?java/util/Map.html) 类似于
    [Python 字典](https://docs.python.org/3/library/stdtypes.html#mapping-types-dict)。**
    在 Python 中，地图的 **键** 必须是 [可散列的](https://docs.python.org/3/glossary.html#term-hashable)。
    Java 有类似的要求，我们将在面对 Java 对象之间的相等性时讨论。'
- en: 'Example `Map` operations:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 `Map` 操作：
- en: '| Java | description | Python |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| Java | 描述 | Python |'
- en: '| --- | --- | --- |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `map.put(key, val)` | add the mapping *key → val* | `map[key] = val` |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `map.put(key, val)` | 添加映射 *key → val* | `map[key] = val` |'
- en: '| `map.get(key)` | get the value for a key | `map[key]` |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `map.get(key)` | 获取键的值 | `map[key]` |'
- en: '| `map.containsKey(key)` | test whether the map has a key | `key in map` |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `map.containsKey(key)` | 测试地图是否有键 | `key in map` |'
- en: '| `map.remove(key)` | delete a mapping | `del map[key]` |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `map.remove(key)` | 删除映射 | `del map[key]` |'
- en: 'In a snapshot diagram, we represent a `Map` as an object that contains key/value
    pairs:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在快照图中，我们将 `Map` 表示为包含键/值对的对象：
- en: 'This `turtles` map contains `Turtle` objects assigned to `String` keys: Bob,
    Buckminster, and Buster.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `turtles` 地图包含分配给 `String` 键的 `Turtle` 对象：Bob，Buckminster 和 Buster。
- en: '### Literals'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '### 字面值'
- en: 'Python provides convenient syntax for creating lists:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了方便的语法来创建列表：
- en: '[PRE9]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And maps:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 和地图：
- en: '[PRE10]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Java does not.** It does provide a literal syntax for arrays:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java 不提供。** 它确实提供了一个数组的文字语法：'
- en: '[PRE11]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'But this creates an *array*, not a `List`. We can use [the utility function
    `Arrays.asList`](http://docs.oracle.com/javase/8/docs/api/?java/util/Arrays.html)
    to create a `List` from the array:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 但这会创建一个 *数组*，而不是 `List`。 我们可以使用 [实用函数 `Arrays.asList`](http://docs.oracle.com/javase/8/docs/api/?java/util/Arrays.html)
    从数组创建 `List`：
- en: '[PRE12]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '… or directly from arguments:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: … 或直接从参数中：
- en: '[PRE13]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'A `List` created with `Arrays.asList` does come with a restriction: its length
    is fixed.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Arrays.asList` 创建的 `List` 来自带一个限制：它的长度是固定的。
- en: 'Generics: declaring List, Set, and Map variables'
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 泛型：声明 List、Set 和 Map 变量
- en: Unlike Python collection types, with Java collections we can restrict the type
    of objects contained in the collection. When we add an item, the compiler can
    perform *static checking* to ensure we only add items of the appropriate type.
    Then, when we pull out an item, we are guaranteed that its type will be what we
    expect.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 集合类型不同，使用 Java 集合，我们可以限制集合中包含的对象的类型。当我们添加一个项目时，编译器可以执行*静态检查*以确保我们只添加适当类型的项目。然后，当我们取出一个项目时，我们可以确保它的类型是我们期望的。
- en: 'Here’s the syntax for declaring some variables to hold collections:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这是声明一些变量以容纳集合的语法：
- en: '[PRE14]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Because of the way generics work, we cannot create a collection of primitive
    types. For example, `Set<int>` does *not* work. However, as we saw earlier, `int`s
    have an `Integer` wrapper we can use (e.g. `Set<Integer> numbers`).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 由于泛型的工作方式，我们无法创建原始类型的集合。例如，`Set<int>` 是*不*起作用的。然而，正如我们之前看到的，`int` 有一个我们可以使用的`Integer`包装器（例如
    `Set<Integer> numbers`）。
- en: 'In order to make it easier to use collections of these wrapper types, Java
    does some automatic conversion. If we have declared `List<Integer> sequence`,
    this code works:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易使用这些包装类型的集合，Java 进行了一些自动转换。如果我们声明了 `List<Integer> sequence`，这段代码可以工作：
- en: '[PRE15]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'ArrayLists and LinkedLists: creating Lists'
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArrayLists 和 LinkedLists：创建 List
- en: As we’ll see soon enough, Java helps us distinguish between the *specification*
    of a type – what does it do? – and the *implementation* – what is the code?
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们很快就会看到的那样，Java 帮助我们区分类型的*规范*——它是做什么的？——和*实现*——代码是什么？
- en: '`List`, `Set`, and `Map` are all *interfaces*: they define how these respective
    types work, but they don’t provide implementation code. There are several advantages,
    but one potential advantage is that we, the users of these types, get to choose
    different implementations in different situations.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`List`、`Set` 和 `Map` 都是*接口*：它们定义了这些相应类型的工作方式，但它们不提供实现代码。有几个优点，但一个潜在的优点是我们，这些类型的用户，可以在不同的情况下选择不同的实现。'
- en: 'Here’s how to create some actual `List`s:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何创建一些实际的 `List`：
- en: '[PRE16]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If the generic type parameters are the same on the left and right, Java can
    infer what’s going on and save us some typing:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果左右的泛型类型参数相同，Java 可以推断出正在发生的情况，并为我们节省一些输入：
- en: '[PRE17]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[`ArrayList`](http://docs.oracle.com/javase/8/docs/api/?java/util/ArrayList.html)
    and [`LinkedList`](http://docs.oracle.com/javase/8/docs/api/?java/util/LinkedList.html)
    are two implementations of `List`. Both provide all the operations of `List`,
    and those operations must work as described in the documentation for `List`. In
    this example, `firstNames` and `lastNames` will behave the same way; if we swapped
    which one used `ArrayList` vs. `LinkedList`, our code will not break.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ArrayList`](http://docs.oracle.com/javase/8/docs/api/?java/util/ArrayList.html)
    和 [`LinkedList`](http://docs.oracle.com/javase/8/docs/api/?java/util/LinkedList.html)
    是 `List` 的两种实现。两者都提供了 `List` 的所有操作，并且这些操作必须按照 `List` 的文档中描述的方式工作。在这个例子中，`firstNames`
    和 `lastNames` 将表现相同；如果我们交换了哪一个使用了 `ArrayList` vs. `LinkedList`，我们的代码不会出错。'
- en: 'Unfortunately, this ability to choose is also a burden: we didn’t care how
    Python lists worked, why should we care whether our Java lists are `ArrayLists`
    or `LinkedLists`? Since the only difference is performance, for 6.005 *we don’t*.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这种选择的能力也是一种负担：我们不关心 Python 列表的工作方式，为什么我们要关心我们的 Java 列表是 `ArrayLists` 还是
    `LinkedLists`？由于唯一的区别是性能，对于 6.005 *我们不*关心。
- en: When in doubt, use `ArrayList`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不确定，使用 `ArrayList`。
- en: 'HashSets and HashMaps: creating Sets and Maps'
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HashSet 和 HashMaps：创建 Set 和 Map
- en: '[`HashSet`](http://docs.oracle.com/javase/8/docs/api/?java/util/HashSet.html)
    is our default choice for `Set`s:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HashSet`](http://docs.oracle.com/javase/8/docs/api/?java/util/HashSet.html)
    是我们默认选择的 `Set`：'
- en: '[PRE18]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Java also provides [sorted sets](http://docs.oracle.com/javase/8/docs/api/?java/util/SortedSet.html)
    with the [`TreeSet`](http://docs.oracle.com/javase/8/docs/api/?java/util/TreeSet.html)
    implementation.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Java 还提供了[有序集合](http://docs.oracle.com/javase/8/docs/api/?java/util/SortedSet.html)与
    [`TreeSet`](http://docs.oracle.com/javase/8/docs/api/?java/util/TreeSet.html)
    实现。
- en: 'And for a `Map` the default choice is [`HashMap`](http://docs.oracle.com/javase/8/docs/api/?java/util/HashMap.html):'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `Map`，默认选择是[`HashMap`](http://docs.oracle.com/javase/8/docs/api/?java/util/HashMap.html)：
- en: '[PRE19]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Iteration
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代
- en: 'So maybe we have:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 所以也许我们有：
- en: '[PRE20]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A very common task is iterating through our cities/numbers/turtles/etc.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历我们的城市/数字/乌龟等是一项非常常见的任务。
- en: 'In Python:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中：
- en: '[PRE21]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Java provides a similar syntax for iterating over the items in `List`s and `Set`s.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Java为遍历`List`和`Set`中的项目提供了类似的语法。
- en: 'Here’s the Java:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Java的代码：
- en: '[PRE22]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can’t iterate over `Map`s themselves this way, but we can iterate over the
    keys as we did in Python:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法用这种方式遍历`Map`本身，但我们可以像在Python中那样遍历键：
- en: '[PRE23]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Under the hood this kind of `for` loop uses an [`Iterator`](http://docs.oracle.com/javase/8/docs/api/?java/util/Iterator.html),
    a design pattern we’ll see later in the class.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这种`for`循环底层使用[`Iterator`](http://docs.oracle.com/javase/8/docs/api/?java/util/Iterator.html)，这是我们在课程中稍后会看到的一种设计模式。
- en: Iterating with indices
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用索引进行迭代
- en: 'If you want to, Java provides different `for` loops that we can use to iterate
    through a list using its indices:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，Java提供了不同的`for`循环，我们可以用来使用其索引迭代列表：
- en: '[PRE24]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Unless we actually need the index value `ii`, this code is verbose and has more
    places for bugs to hide. Avoid.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 除非我们实际上需要索引值`ii`，否则这段代码冗长且有更多隐藏bug的地方。避免。
- en: reading exercises
  id: totrans-207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Collections
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 集合
- en: Rewrite these variable declarations using `List` instead of arrays. We’re only
    declaring the variables, not initializing them with any value.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 用`List`重写这些变量声明，而不是使用数组。我们只声明变量，而不给它们赋任何值。
- en: (missing answer)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）
- en: (missing explanation)
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: (missing answer)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）
- en: (missing explanation)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: (missing answer)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）
- en: (missing explanation)
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: X marks the spot
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: X标记着地点
- en: Java `Map`s work like Python dictionaries.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Java的`Map`工作原理类似于Python的字典。
- en: 'After we run this code:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行此代码后：
- en: '[PRE25]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: What is the value of…
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: …的值是多少…
- en: (missing answer)(missing answer)(missing answer)
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）
- en: Java API documentation
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java API文档
- en: The previous section has a number of links to documentation for classes that
    are part of the [Java platform API](http://docs.oracle.com/javase/8/docs/api/).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的部分有许多链接指向[Java平台API](http://docs.oracle.com/javase/8/docs/api/)中的类的文档。
- en: API stands for *application programming interface*. If you want to program an
    app that talks to Facebook, Facebook publishes an API (more than one, in fact,
    for different languages and frameworks) you can program against. The Java API
    is a large set of generally useful tools for programming pretty much anything.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: API代表*应用程序编程接口*。如果你想编写一个与Facebook交互的应用程序，Facebook发布了一个API（实际上不止一个，对于不同的语言和框架有不同的API），你可以针对其进行编程。Java
    API是一个大型的通用工具集，几乎可以用于编程的任何事情。
- en: '[**`java.lang.String`**](http://docs.oracle.com/javase/8/docs/api/?java/lang/String.html)
    is the full name for `String`. We can create objects of type `String` just by
    using `"double quotes"`.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**`java.lang.String`**](http://docs.oracle.com/javase/8/docs/api/?java/lang/String.html)是`String`的全名。我们可以通过使用“双引号”来创建`String`类型的对象。'
- en: '[**`java.lang.Integer`**](http://docs.oracle.com/javase/8/docs/api/?java/lang/Integer.html)
    and the other primitive wrapper classes. Java automagically converts between primitive
    and wrapped (or “boxed”) types in most situations.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**`java.lang.Integer`**](http://docs.oracle.com/javase/8/docs/api/?java/lang/Integer.html)和其他原始包装类。Java在大多数情况下自动在原始类型和包装（或“装箱”）类型之间转换。'
- en: '[**`java.util.List`**](http://docs.oracle.com/javase/8/docs/api/?java/util/List.html)
    is like a Python list, but in Python, lists are part of the language. In Java,
    `List`s are implemented in… Java!'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**`java.util.List`**](http://docs.oracle.com/javase/8/docs/api/?java/util/List.html)就像Python中的列表，但在Python中，列表是语言的一部分。在Java中，`List`是用Java实现的！'
- en: '[**`java.util.Map`**](http://docs.oracle.com/javase/8/docs/api/?java/util/Map.html)
    is like a Python dictionary.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**`java.util.Map`**](http://docs.oracle.com/javase/8/docs/api/?java/util/Map.html)就像一个Python字典。'
- en: '[**`java.io.File`**](http://docs.oracle.com/javase/8/docs/api/?java/io/File.html)
    represents a file on disk. Take a look at the methods provided by `File`: we can
    test whether the file is readable, delete the file, see when it was last modified…'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**`java.io.File`**](http://docs.oracle.com/javase/8/docs/api/?java/io/File.html)表示磁盘上的文件。看看`File`提供的方法：我们可以测试文件是否可读，删除文件，查看上次修改时间…'
- en: '[**`java.io.FileReader`**](http://docs.oracle.com/javase/8/docs/api/?java/io/FileReader.html)
    lets us read text files.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**`java.io.FileReader`**](http://docs.oracle.com/javase/8/docs/api/?java/io/FileReader.html)让我们可以读取文本文件。'
- en: '[**`java.io.BufferedReader`**](http://docs.oracle.com/javase/8/docs/api/?java/io/BufferedReader.html)
    lets us read in text efficiently, and it also provides a very useful feature:
    reading an entire line at a time.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**`java.io.BufferedReader`**](http://docs.oracle.com/javase/8/docs/api/?java/io/BufferedReader.html)让我们可以高效地读取文本，并且还提供了一个非常有用的功能：一次读取一整行。'
- en: Let’s take a closer look at the documentation for [`BufferedReader`](http://docs.oracle.com/javase/8/docs/api/?java/io/BufferedReader.html).
    There are many things here that relate to features of Java we haven’t discussed!
    Keep your head and focus on the **things in bold** below.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地查看[`BufferedReader`](http://docs.oracle.com/javase/8/docs/api/?java/io/BufferedReader.html)的文档。这里有很多与我们尚未讨论的Java特性相关的东西！保持头脑清醒，专注于下面**加粗的内容**。
- en: '![](../Images/199701b51a34b8053327da2a91c21ceb.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/199701b51a34b8053327da2a91c21ceb.jpg)'
- en: At the top of the page is the *class hierarchy* for `BufferedReader` and a list
    of *implemented interfaces*. A `BufferedReader` object has all of the methods
    of all those types (plus its own methods) available to use.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 页面顶部是`BufferedReader`的*类层次结构*和*已实现接口*的列表。`BufferedReader`对象具有所有这些类型的方法（加上自己的方法），可供使用。
- en: Next we see *direct subclasses*, and for an interface, *implementing classes*.
    This can help us find, for example, that [`HashMap`](http://docs.oracle.com/javase/8/docs/api/?java/util/HashMap.html)
    is an implementation of [`Map`](http://docs.oracle.com/javase/8/docs/api/?java/util/Map.html).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们看到*直接子类*，对于一个接口来说，是*实现类*。这可以帮助我们找到，例如，[`HashMap`](http://docs.oracle.com/javase/8/docs/api/?java/util/HashMap.html)是[`Map`](http://docs.oracle.com/javase/8/docs/api/?java/util/Map.html)的实现。
- en: 'Next up: **a description of the class**. Sometimes these descriptions are a
    little obtuse, but **this is the first place you should go** to understand a class.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是：**类的描述**。有时这些描述有点晦涩，但**这是你应该去了解一个类的第一个地方**。
- en: '![](../Images/86bcd1d0cd9b53ee3f64a07a2493f077.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/86bcd1d0cd9b53ee3f64a07a2493f077.jpg)'
- en: If you want to make a new `BufferedReader` the **constructor summary** is the
    first place to look. Constructors aren’t the only way to get a new object in Java,
    but they are the most common.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要创建一个新的`BufferedReader`，**构造方法概要**是第一个需要查看的地方。构造方法并不是在Java中获取新对象的唯一方式，但它们是最常见的。
- en: '![](../Images/070b096486c3385b73dec63f73760ca3.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/070b096486c3385b73dec63f73760ca3.jpg)'
- en: 'Next: **the method summary lists all the methods we can call** on a `BufferedReader`
    object.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来：**方法概要列出了我们可以调用的所有方法**在`BufferedReader`对象上。
- en: Below the summary are detailed descriptions of each method and constructor.
    **Click a constructor or method to see the detailed description.** This is the
    first place you should go to understand what a method does.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要下面是每个方法和构造函数的详细描述。**点击构造函数或方法以查看详细描述。**这是了解方法功能的第一个地方。
- en: 'Each detailed description includes:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 每个详细描述包括：
- en: 'The **method signature**: we see the return type, the method name, and the
    parameters. We also see *exceptions*. For now, those usually mean errors the method
    can run into.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法签名**：我们看到返回类型、方法名和参数。我们还看到*异常*。目前，这些通常意味着方法可能遇到的错误。'
- en: The full **description**.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的**描述**。
- en: '**Parameters**: descriptions of the method arguments.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数**：方法参数的描述。'
- en: And a description of what the method **returns**.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及方法的返回**描述**。
- en: Specifications
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规格
- en: These detailed descriptions are **specifications**. They allow us to use tools
    like `String`, `Map`, or `BufferedReader` *without* having to read or understand
    the code that implements them.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这些详细描述是**规格**。它们使我们能够使用像`String`、`Map`或`BufferedReader`这样的工具，而不必阅读或理解实现它们的代码。
- en: Reading, writing, understanding, and analyzing specifications will be one of
    our first major undertakings in 6.005, starting in a few classes.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读、编写、理解和分析规格将是我们在6.005中的首要任务之一，从几节课开始。
- en: reading exercises
  id: totrans-250
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Reading Javadocs
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读Javadocs
- en: Use the Java API docs to answer…
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Java API文档来回答……
- en: 'Suppose we have a class `TreasureChest`. After we run this code:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个类`TreasureChest`。在我们运行此代码后：
- en: '[PRE26]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Avast!
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 阿斯特！
- en: 'After we run this code, where `???` is the appropriate type:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行此代码后，其中`???`是适当的类型：
- en: '[PRE27]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: '* * *'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Reading exercises
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读练习
- en: At this point you should have completed all the reading exercises above.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经完成了以上所有的阅读练习。
- en: To check your reading exercise status, see [classes/02-basic-java on Omnivore](https://omni.csail.mit.edu/6.005/fa16/user/classes/02-basic-java).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查你的阅读练习状态，请参阅[Omnivore上的classes/02-basic-java](https://omni.csail.mit.edu/6.005/fa16/user/classes/02-basic-java)。
- en: Completing the reading exercises prepares you for the *nanoquiz* at the beginning
    of each class meeting, and submitting the exercises is required by 10pm the evening
    before class.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 完成阅读练习可以为每次课程开始时的*纳米测验*做准备，并且提交练习是每晚10点之前的必须要求。
