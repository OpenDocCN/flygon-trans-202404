- en: Vectors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向量
- en: Vectors
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量
- en: So far, we've programmed mostly in pairs, which we've used to make linked lists.
    We used lists to represent **sequences**, an abstract data type. While lists are
    great, they have one big disadvantage - referring to the nth element of a list
    takes `Θ(n)` time because we have to call `cdr` `n` times.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们主要是成对编程，我们用它们来创建链表。我们使用列表来表示**序列**，这是一种抽象数据类型。虽然列表很棒，但它们有一个很大的缺点 - 引用列表的第n个元素需要`Θ(n)`的时间，因为我们必须调用`cdr`
    `n`次。
- en: We want a way to be able to refer to the nth element of a sequence while taking
    constant (`Θ(1)`) time. In Scheme, **vectors** provide a mechanism of doing this.
    If you've programmed in Java or other C-like languages, it's essentially the same
    idea as an array.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够在常数时间（`Θ(1)`）内引用序列的第n个元素。在Scheme中，**向量**提供了这样做的机制。如果你在Java或其他类似C的语言中编程过，这本质上与数组的概念相同。
- en: Unfortunately, vectors have a drawback. In a linked list (which is essentially
    the list structure you've been working with so far this semester), adding to the
    end of a list can be done `Θ(1)` time, since all we have to do is `cons` to the
    end of a list. However, adding to a vector takes `Θ(n)` time, where `n` is the
    length of the vector.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，向量有一个缺点。在一个链表中（这基本上是你这学期一直在使用的列表结构），在列表末尾添加元素只需要`Θ(1)`的时间，因为我们只需在列表末尾`cons`。然而，在向量中添加元素需要`Θ(n)`的时间，其中`n`是向量的长度。
- en: How Vectors Work
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量的工作原理
- en: How do vectors work? What is the black magic that allows you to reference elements
    in constant time? Well, it turns out that it's not, in fact, black magic.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 向量是如何工作的？是什么黑魔法让你能够在常数时间内引用元素？事实上，原来并不是黑魔法。
- en: When you create a vector, you must specify the size of the vector you would
    like. Creating a vector of size n sets aside a chunk of memory n size long. Since
    we know the address of the first "block" of memory, we can add k to that address
    to get the kth element of the vector. This is how we can access any element in
    constant time!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个向量时，你必须指定你想要的向量大小。创建大小为n的向量会分配一个n大小的内存块。由于我们知道第一个内存块的地址，我们可以将k添加到该地址以获得向量的第k个元素。这就是我们如何在常数时间内访问任何元素的方式！
- en: The downside is that in order to get all the elements in a single chunk of memory,
    we have to allocate the chunk all at once. This is why adding an element to a
    vector takes `Θ(n)` time -- we would have to allocate a new chuck of memory (i.e.
    create a new array) and copy all of the old elements over!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不利之处在于，为了将所有元素放在单个内存块中，我们必须一次性分配整个块。这就是为什么向向量添加元素需要`Θ(n)`的时间 - 我们必须分配一个新的内存块（即创建一个新数组）并复制所有旧元素！
- en: Vector Primitives
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量原语
- en: '**NOTE: Vectors index from 0.**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：向量从0开始索引。**'
- en: By this we mean the first element is referred to as the 0th element. That means
    that in the vector `#(1 2 3 4)`, 1 is at the 0th index, 2 is at the 1st index,
    and so on.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着第一个元素被称为第0个元素。这意味着在向量`#(1 2 3 4)`中，1位于第0个索引，2位于第1个索引，依此类推。
- en: 'Some of the vector primitives are analogous to the primitives for lists:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一些向量原语类似于列表的原语：
- en: '| Vectors | Lists |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 向量 | 列表 |'
- en: '| --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `(vector a b c d...)` | `(list a b c d...)` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `(vector a b c d...)` | `(list a b c d...)` |'
- en: '| `(vector-ref vec n)` | `(list-ref lst n)` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `(vector-ref vec n)` | `(list-ref lst n)` |'
- en: '| `(vector-length vec)` | `(length lst)` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `(vector-length vec)` | `(length lst)` |'
- en: But what about `cons` and `append`? Since adding an element to a vector takes
    `Θ(n)` time, there are no primitives to add to the end of a vector. There are,
    however, different constructers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是`cons`和`append`呢？由于向量添加元素需要`Θ(n)`的时间，所以没有原语可以在向量末尾添加元素。不过，有不同的构造器。
- en: As discussed before, one of the main weaknesses of vectors is that we have to
    declare how long the vector is going to be when we create it. Therefore, the way
    to create an empty vector of length `len` is `(make-vector len)`. If you want
    all the elements to be initially set to a certain value, you can instead say `(make-vector
    len val)`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前讨论的，向量的主要弱点之一是我们在创建时必须声明向量的长度。因此，创建长度为`len`的空向量的方法是`(make-vector len)`。如果你希望所有元素最初都设置为某个值，你可以使用`(make-vector
    len val)`。
- en: So far, we can either create a vector with empty elements or a vector with all
    the same elements. That's not very useful. So, how do we change the elements of
    a vector? We do it with mutation! Specifically, we use `(vector-set! vec n value)`
    in order to set the nth element of a vector to a certain value. This is similar
    to `set-car!` and `set-cdr!`
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们可以创建一个带有空元素或所有相同元素的向量。这并不是很有用。那么，我们如何改变向量的元素呢？我们使用变异！具体来说，我们使用 `(vector-set!
    vec n value)` 来将向量的第 n 个元素设置为特定值。这类似于 `set-car!` 和 `set-cdr!`。
- en: '**Note:** There exist procedures `list->vector` and `vector->list` that convert
    between the two types. However, in the lesson and homework, you will not be using
    these procedures since the purpose of this lesson is to learn vectors.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 存在将两种类型之间转换的过程 `list->vector` 和 `vector->list`。但是，在课程和作业中，您不会使用这些过程，因为本课程的目的是学习向量。'
- en: Vector Programming
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量编程
- en: When you're programming with vectors, you're usually going to use [iterative
    processes](/textbook/space.html#sub1) to loop through a vector. Here are a few
    examples of coding with vectors so that you can get your feet wet.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用向量进行编程时，通常会使用[迭代过程](/textbook/space.html#sub1)来循环遍历向量。以下是一些使用向量编码的示例，让您可以尝试一下。
- en: 'Here''s the `map` function for lists:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是列表的 `map` 函数：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now let''s make the same function for vectors, called `vector-map`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为向量编写相同的函数，称为 `vector-map`：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It's a lot more complicated than `map` for lists! For one, our `vector-map`
    has an extra index variable `i` that keeps track of where we are in the vector
    at all times. We also have to know the length of our vector, because that is how
    our function knows when to stop.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这比列表的 `map` 要复杂得多！首先，我们的 `vector-map` 有一个额外的索引变量 `i`，始终跟踪我们在向量中的位置。我们还必须知道我们向量的长度，因为这是我们的函数知道何时停止的方式。
- en: '`map` for lists was done with recursion, while `vector-map` is done with iteration.
    At the beginning of the semester, we mentioned that recursion is usually considered
    more elegant than iteration. Hopefully you now see why.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的 `map` 是通过递归完成的，而向量的 `vector-map` 是通过迭代完成的。在学期初，我们提到递归通常被认为比迭代更优雅。希望您现在明白为什么了。
- en: '**Test Your Understanding**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验您的理解**'
- en: Write a function `vector-addup` that takes in a vector of numbers and returns
    the sum of all the numbers. Test it out in STk to check your answer.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数 `vector-addup`，它接受一个数字向量并返回所有数字的总和。在 STk 中测试一下以检查您的答案。
- en: Vectors vs. Lists
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量 vs. 列表
- en: Here are some comparisons between the running times for list and vector procedures.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是列表和向量过程的运行时间比较。
- en: '| Operation | Lists | Vectors |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 列表 | 向量 |'
- en: '| --- | --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Finding the nth element | `(list-ref lst n)` Runs in Θ(n) | `(vector-ref
    vec n)` Runs in Θ(1) |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 查找第 n 个元素 | `(list-ref lst n)` 运行时间为 Θ(n) | `(vector-ref vec n)` 运行时间为 Θ(1)
    |'
- en: '| Adding an element | `cons` Runs in Θ(1) | `N/A` Runs in Θ(n) |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 添加元素 | `cons` 运行时间为 Θ(1) | `N/A` 运行时间为 Θ(n) |'
- en: '| Finding the length | `(length lst)` Runs in Θ(n) | `(vector-length vec)`
    Runs in Θ(1) |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 查找长度 | `(length lst)` 运行时间为 Θ(n) | `(vector-length vec)` 运行时间为 Θ(1) |'
- en: There's no one best way to represent sequences - vectors and lists are good
    for different things. If you're going to be adding and removing elements frequently
    from your sequence, it's best to use a list, since `cons` runs in constant time.
    On the other hand, if you're going to have a fixed number of elements but plan
    on changing a lot of them, vectors are better, since `vector-ref` runs in constant
    time.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表示序列没有一种最佳方式 - 向量和列表适用于不同的情况。如果您要经常添加和删除序列中的元素，最好使用列表，因为 `cons` 运行时间为常数。另一方面，如果您将有固定数量的元素但计划更改许多元素，则向量更好，因为
    `vector-ref` 运行时间为常数。
- en: 'Example: Shuffling'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：洗牌
- en: Suppose we have a deck of cards and we want to shuffle it. What would be the
    best sequence to represent this?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一副牌，我们想要洗牌。什么样的序列最适合表示这个过程？
- en: First, let's use a list and use mutation to shuffle the deck.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用一个列表，并使用变异来洗牌。
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This does what we want, but it's very slow - Θ(n²) time. In fact, any list-based
    solution would take Θ(n²) time, because it takes Θ(n) time to find a random element,
    and we have to do that n times.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做可以达到我们想要的效果，但非常慢 - Θ(n²) 时间。事实上，任何基于列表的解决方案都会花费 Θ(n²) 时间，因为找到一个随机元素需要 Θ(n)
    时间，而我们必须这样做 n 次。
- en: Let's try the same thing, but use a vector instead of a list.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试相同的方法，但使用向量而不是列表。
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is essentially the same algorithm, but performed on a vector instead of
    a list. However, this takes Θ(n) time because it performs n constant time operations,
    since `vector-ref` is in constant time.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这本质上是相同的算法，但是在向量上执行而不是在列表上执行。然而，这需要Θ(n)的时间，因为它执行n个常量时间操作，由于`vector-ref`是在常量时间内完成的。
- en: Quiz Tips
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测验提示
- en: Working with vectors might feel different at first, especially with all of the
    new functions. We highly suggest to write notes in your cheat sheet on various
    function primitives we used (e.g. `make-vect`, `vector-ref`, etc.) as well as
    helper procedures you are going to define in the homework exercises (e.g. `vector-append`)
    and [these notes](http://www-inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#61)
    (e.g., `vector-map`).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与向量一起工作可能一开始会感觉有些不同，特别是有了所有新的函数。我们强烈建议在你的备忘单上写下我们使用的各种函数原语（例如`make-vect`，`vector-ref`等），以及你将在作业练习中定义的辅助程序（例如`vector-append`）和[这些笔记](http://www-inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#61)（例如`vector-map`）。
