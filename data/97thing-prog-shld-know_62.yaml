- en: Only the Code Tells the Truth
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只有代码能够传达真相
- en: Only the Code Tells the Truth
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只有代码能够传达真相
- en: 'The ultimate semantics of a program is given by the running code. If this is
    in binary form only, it will be a difficult read! The source code should, however,
    be available if it is your program, any typical commercial software development,
    an open source project, or code in a dynamically interpreted language. Looking
    at the source code, the meaning of the program should be apparent. To know what
    a program does, the source is ultimately all you can be sure of looking at. Even
    the most accurate requirements document does not tell the whole truth: It does
    not contain the detailed story of what the program is actually doing, only the
    high-level intentions of the requirements analyst. A design document may capture
    a planned design, but it will lack the necessary detail of the implementation.
    These documents may be lost sync with the current implementation... or may simply
    have been lost. Or never written in the first place. The source code may be the
    only thing left.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的最终语义由运行的代码给出。如果这仅仅是以二进制形式存在，那将是一本难读的书！然而，如果是你的程序，任何典型的商业软件开发，一个开源项目或者是一个动态解释语言中的代码，源代码应该是可用的。查看源代码，程序的含义应该是显而易见的。要知道程序做什么，源代码最终是你能够确信的唯一选择。即使是最准确的需求文档也不能完全揭示真相：它不包含程序实际在做什么的详细故事，只有需求分析员的高层意图。设计文档可能捕捉到一个计划中的设计，但它将缺乏实现的必要细节。这些文档可能会与当前实现不同步……或者根本就不存在。源代码可能是唯一留下的东西。
- en: With this in mind, ask yourself how clearly is your code telling you or any
    other programmer what it is doing?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个理念，问问自己你的代码对你或其他程序员的表述清晰吗？
- en: You might say, "Oh, my comments will tell you everything you need to know."
    But keep in mind that comments are not running code. They can be just as wrong
    as other forms of documentation. There has been a tradition saying comments are
    unconditionally a good thing, so unquestioningly some programmers write more and
    more comments, even restating and explaining trivia already obvious in the code.
    This is the wrong way to clarify your code. If your code needs comments, consider
    refactoring it so it doesn't. Lengthy comments can clutter screen space and might
    even be hidden automatically by your IDE. If you need to explain a change, do
    so in the version control system check-in message and not in the code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会说：“哦，我的注释会告诉你所有你需要知道的。” 但请记住，注释不是运行的代码。它们可能和其他形式的文档一样错误。有一个传统认为注释无条件是一件好事，所以一些程序员毫不犹豫地写下越来越多的注释，甚至重申和解释在代码中已经明显的琐事。这是澄清你的代码的错误方式。如果你的代码需要注释，考虑重构它，使其不需要。冗长的注释会占用屏幕空间，甚至可能被你的IDE自动隐藏。如果你需要解释一个改变，请在版本控制系统的提交消息中这样做，而不是在代码中。
- en: What can you do to actually make your code tell the truth as clearly as possible?
    Strive for good names. Structure your code with respect to cohesive functionality,
    which also eases naming. Decouple your code to achieve orthogonality. Write automated
    tests explaining the intended behavior and check the interfaces. Refactor mercilessly
    when you learn how to code a simpler, better solution. Make your code as simple
    as possible to read and understand.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你究竟能做些什么来确保你的代码尽可能清晰地传达真相？追求良好的命名。按照内聚功能结构化你的代码，这也有助于命名。解耦你的代码以实现正交性。编写自动化测试来解释预期行为并检查接口。当你学会如何编写更简单、更好的解决方案时，无情地重构。让你的代码尽可能简单易读易懂。
- en: Treat your code like any other composition, such as a poem, an essay, a public
    blog, or an important email. Craft what you express carefully, so that it does
    what it should and communicates as directly as possible what it is doing, so that
    it still communicates your intention when you are no longer around. Remember that
    useful code is used much longer than ever intended. Maintenance programmers will
    thank you. And, if you are a maintenance programmer and the code you are working
    on does not tell the truth easily, apply the guidelines above in a proactive manner.
    Establish some sanity in the code and keep your own sanity.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 把你的代码像对待其他作品一样，比如一首诗、一篇文章、一个公开博客或一封重要的邮件。精心制作你的表达，让它做到应该做的事情，并尽可能直接地传达它正在做什么，这样当你不在的时候仍然能够传达你的意图。记住，有用的代码被使用的时间比预期的要长得多。维护程序员会感谢你。如果你是一个维护程序员，而你正在处理的代码不容易传达真相，那么请积极地应用上述准则。在代码中建立一些理智，并保持你自己的理智。
- en: by [Peter Sommerlad](http://programmer.97things.oreilly.com/wiki/index.php/Peter_Sommerlad)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由[彼得·索默拉德](http://programmer.97things.oreilly.com/wiki/index.php/Peter_Sommerlad)所著
