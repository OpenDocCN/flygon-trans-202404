- en: WET Dilutes Performance Bottlenecks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WET会削弱性能瓶颈
- en: WET Dilutes Performance Bottlenecks
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WET会削弱性能瓶颈
- en: The importance of the DRY principle (Don't Repeat Yourself) is that it codifies
    the idea that every piece of knowledge in a system should have a singular representation.
    In other words, knowledge should be contained in a single implementation. The
    antithesis of DRY is WET (Write Every Time). Our code is WET when knowledge is
    codified in several different implementations. The performance implications of
    DRY versus WET become very clear when you consider their numerous effects on a
    performance profile.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: DRY原则（Don't Repeat Yourself）的重要性在于它规范了一个系统中的每一条知识都应该有一个单一的表现形式的思想。换句话说，知识应该包含在单一的实现中。DRY的反义词是WET（Write
    Every Time）。当知识被编码在几个不同的实现中时，我们的代码就是WET的。考虑到DRY与WET在性能配置文件上的众多影响，DRY与WET的性能影响变得非常明显。
- en: Let's start by considering a feature of our system, say *X*, that is a CPU bottleneck.
    Let's say feature *X* consumes 30% of the CPU. Now let's say that feature *X*
    has ten different implementations. On average, each implementation will consume
    3% of the CPU. As this level of CPU utilization isn't worth worrying about if
    we are looking for a quick win, it is likely that we'd miss that this feature
    is our bottleneck. However, let's say that we somehow recognized feature *X* as
    a bottleneck. We are now left with the problem of finding and fixing every single
    implementation. With WET we have ten different implementations that we need to
    find and fix. With DRY we'd clearly see the 30% CPU utilization and we'd have
    a tenth of the code to fix. And did I mention that we don't have to spend time
    hunting down each implementation?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先考虑我们系统的一个特性，比如*X*，它是一个CPU瓶颈。假设特性*X*占用了CPU的30%。现在假设特性*X*有十种不同的实现。平均而言，每个实现将占用CPU的3%。如果我们想要快速取得成功，那么这个CPU利用率水平是不值得担心的，很可能我们会忽视这个特性是我们的瓶颈。然而，假设我们以某种方式识别出特性*X*是一个瓶颈。现在我们面临的问题是找到并修复每一个实现。在WET中，我们有十个不同的实现需要找到并修复。而在DRY中，我们会清楚地看到30%的CPU利用率，而且我们只需要修复十分之一的代码。我提到了我们不必花时间去寻找每一个实现吗？
- en: 'There is one use case where we are often guilty of violating DRY: our use of
    collections. A common technique to implement a query would be to iterate over
    the collection and then apply the query in turn to each element:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个使用案例，我们经常违反DRY的：我们对集合的使用。一个常见的实现查询的技巧是迭代集合，然后依次对每个元素应用查询：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By exposing this raw collection to clients, we have violated encapsulation.
    This not only limits our ability to refactor, it forces users of our code to violate
    DRY by having each of them re-implement potentially the same query. This situation
    can easily be avoided by removing the exposed raw collections from the API. In
    this example we can introduce a new, domain-specific collective type called `CustomerList`.
    This new class is more semantically in line with our domain. It will act as a
    natural home for all our queries.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向客户暴露这个原始集合，我们违反了封装。这不仅限制了我们重构的能力，还迫使我们代码的用户违反DRY原则，因为他们每个人都要重新实现可能相同的查询。通过将暴露的原始集合从API中移除，我们可以轻松避免这种情况。在这个例子中，我们可以引入一个新的、与我们的领域语义更加一致的集合类型，称为`CustomerList`。这个新类更符合我们领域的语义。它将成为我们所有查询的自然容器。
- en: 'Having this new collection type will also allow us to easily see if these queries
    are a performance bottleneck. By incorporating the queries into the class we eliminate
    the need to expose representation choices, such as `ArrayList`, to our clients.
    This gives us the freedom to alter these implementations without fear of violating
    client contracts:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这种新的集合类型，我们还可以轻松地查看这些查询是否是性能瓶颈。通过将查询合并到类中，我们消除了向客户暴露表示选择（如`ArrayList`）的需要。这使我们可以自由地更改这些实现，而不必担心违反客户合同：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, adherence to DRY allowed us to introduce an alternate indexing
    scheme with SortedList keyed on our customers level of spending. More important
    than the specific details of this particular example, following DRY helped us
    to find and repair a performance bottleneck that would have been more difficult
    to find were the code to be WET.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，遵循DRY原则使我们能够引入一个基于客户消费水平的SortedList的替代索引方案。比这个特定例子的具体细节更重要的是，遵循DRY原则帮助我们找到并修复了一个性能瓶颈，如果代码是WET的话，那么要找到这个瓶颈将更加困难。
- en: By [Kirk Pepperdine](http://programmer.97things.oreilly.com/wiki/index.php/Kirk_Pepperdine)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[柯克·佩珀丁](http://programmer.97things.oreilly.com/wiki/index.php/Kirk_Pepperdine)
