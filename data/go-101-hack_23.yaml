- en: Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型
- en: Types
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Types in `Go` are divided into `2` categories: named and unnamed. Besides predeclared
    types (such as `int`, `rune`, etc), you can also define named type yourself. E.g.:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`Go`中的类型分为`2`类：命名和未命名。除了预声明类型（如`int`、`rune`等），你也可以自己定义命名类型。例如：'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Unnamed types are defined by type literal. I.e., `[]int` is an unnamed type.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 未命名类型是由类型字面量定义的。即，`[]int`是一个未命名类型。
- en: 'According to [Go spec](https://golang.org/ref/spec#Types), there is an underlying
    type of every type:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[Go规范](https://golang.org/ref/spec#Types)，每种类型都有一个基础类型：
- en: 'Each type T has an underlying type: If T is one of the predeclared boolean,
    numeric, or string types, or a type literal, the corresponding underlying type
    is T itself. Otherwise, T''s underlying type is the underlying type of the type
    to which T refers in its type declaration.'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每种类型T都有一个基础类型：如果T是预声明的布尔、数值或字符串类型之一，或者是一个类型字面量，那么相应的基础类型就是T本身。否则，T的基础类型是T在其类型声明中引用的类型的基础类型。
- en: 'So, in above example, both named type `mySlice` and unnamed type `[]int` have
    the same underlying type: `[]int`.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在上面的示例中，命名类型`mySlice`和未命名类型`[]int`都有相同的基础类型：`[]int`。
- en: '`Go` has strict rules of assigning values of variables. For example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`Go`对变量赋值有严格的规则。例如：'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The compilation will complain the following error:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 编译将会报以下错误：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Although the underlying type of `s1` and `s2` are same: `[]int`, but they belong
    to `2` different named types (`mySlice1` and `mySlice2`), so they can''t assign
    values each other. But if you modify `s2`''s type to `[]int`, the compilation
    will be OK:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`s1`和`s2`的基础类型相同：`[]int`，但它们属于`2`个不同的命名类型（`mySlice1`和`mySlice2`），所以它们不能相互赋值。但如果你修改`s2`的类型为`[]int`，则编译将会通过：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The magic behind it is one rule of [assignability](https://golang.org/ref/spec#Assignability):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 其中的魔法是[可赋值性](https://golang.org/ref/spec#Assignability)的一个规则：
- en: x's type V and T have identical underlying types and at least one of V or T
    is not a named type.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x的类型V和T具有相同的基础类型，且V或T中至少有一个不是命名类型。
- en: 'References:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：
- en: '[Go spec](https://golang.org/ref/spec#Types);'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go规范](https://golang.org/ref/spec#Types)；'
- en: '[Learning Go - Types](http://www.laktek.com/2012/01/27/learning-go-types/);'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[学习Go - 类型](http://www.laktek.com/2012/01/27/learning-go-types/)；'
- en: '[Golang pop quiz](https://twitter.com/davecheney/status/734646224696016901).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[Golang智力测验](https://twitter.com/davecheney/status/734646224696016901)。'
