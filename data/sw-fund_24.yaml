- en: StlcThe Simply Typed Lambda-Calculus
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stlc 简单类型 λ 演算
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Require Import Maps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导入映射。
- en: Require Import Smallstep.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导入 Smallstep。
- en: Require Import Types.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导入类型。
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Overview
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: 'The STLC is built on some collection of *base types*:'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: STLC 建立在一些*基本类型*的集合上：
- en: booleans, numbers, strings, etc.  The exact choice of base types
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值、数字、字符串等。基本类型的确切选择
- en: doesn't matter much — the construction of the language and its
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并不重要 — 语言的构建及其
- en: theoretical properties work out the same no matter what we
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 理论性质都是一样的，不管我们
- en: choose — so for the sake of brevity let's take just Bool for
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择 — 所以为了简洁起见，让我们只取 Bool 作为
- en: the moment.  At the end of the chapter we'll see how to add more
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此刻。在本章结束时，我们将看到如何添加更多
- en: base types, and in later chapters we'll enrich the pure STLC with
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基本类型，并在后面的章节中我们将用纯 STLC 丰富
- en: other useful constructs like pairs, records, subtyping, and
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他有用的构造，如对、记录、子类型和
- en: mutable state.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可变状态。
- en: Starting from boolean constants and conditionals, we add three
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从布尔常量和条件开始，我们添加了三个
- en: 'things:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事物：
- en: variables
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量
- en: function abstractions
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数抽象
- en: application
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用
- en: This gives us the following collection of abstract syntax
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这给我们带来了以下抽象语法的集合
- en: constructors (written out first in informal BNF notation — we'll
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构造函数（首先以非正式 BNF 符号表示 — 我们将
- en: formalize it below).
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面形式化它）。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: T ::= Bool
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: T ::= Bool
- en: '| T[1] → T[2]'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '| T[1] → T[2]'
- en: 'For example:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: \x:Bool. false has type Bool→Bool
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \x:Bool. false 的类型为 Bool→Bool
- en: \x:Bool. x has type Bool→Bool
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \x:Bool. x 的类型为 Bool→Bool
- en: (λx:Bool. x) true has type Bool
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (λx:Bool. x) true 的类型为 Bool
- en: \x:Bool. \y:Bool. x has type Bool→Bool→Bool (i.e., Bool → (Bool→Bool))
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \x:Bool. \y:Bool. x 的类型为 Bool→Bool→Bool（即，Bool → (Bool→Bool)）
- en: (λx:Bool. \y:Bool. x) false has type Bool→Bool
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (λx:Bool. \y:Bool. x) false 的类型为 Bool→Bool
- en: (λx:Bool. \y:Bool. x) false true has type Bool
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (λx:Bool. \y:Bool. x) false true 的类型为 Bool
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Module STLC.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 STLC。
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Inductive ty : Type :='
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '归纳类型：ty : Type :='
- en: '| TBool  : ty'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '| TBool  : ty'
- en: '| TArrow : ty → ty → ty.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '| TArrow : ty → ty → ty。'
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Inductive tm : Type :='
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '归纳类型 tm : Type :='
- en: '| tvar : id → tm'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '| tvar : id → tm'
- en: '| tapp : tm → tm → tm'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '| tapp : tm → tm → tm'
- en: '| tabs : id → ty → tm → tm'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '| tabs : id → ty → tm → tm'
- en: '| ttrue : tm'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '| ttrue : tm'
- en: '| tfalse : tm'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '| tfalse : tm'
- en: '| tif : tm → tm → tm → tm.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '| tif : tm → tm → tm → tm。'
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Definition x := (Id "x").
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 x := (Id "x").
- en: Definition y := (Id "y").
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 y := (Id "y").
- en: Definition z := (Id "z").
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 z := (Id "z").
- en: Hint Unfold x.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 提示展开 x。
- en: Hint Unfold y.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 提示展开 y。
- en: Hint Unfold z.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 提示展开 z。
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notation idB :=
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 idB :=
- en: (tabs x TBool (tvar x)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: (tabs x TBool (tvar x)).
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notation idBB :=
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 idBB :=
- en: (tabs x (TArrow TBool TBool) (tvar x)).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: (tabs x (TArrow TBool TBool) (tvar x)).
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notation idBBBB :=
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 idBBBB :=
- en: (tabs x (TArrow (TArrow TBool TBool)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: (tabs x (TArrow (TArrow TBool TBool)
- en: (TArrow TBool TBool))
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: （TArrow TBool TBool））
- en: (tvar x)).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: (tvar x)).
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notation k := (tabs x TBool (tabs y TBool (tvar x))).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 k := (tabs x TBool (tabs y TBool (tvar x))).
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notation notB := (tabs x TBool (tif (tvar x) tfalse ttrue)).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 notB := (tabs x TBool (tif (tvar x) tfalse ttrue)).
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Operational Semantics
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作语义
- en: To define the small-step semantics of STLC terms, we begin,
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要定义 STLC 术语的小步语义，我们从
- en: as always, by defining the set of values.  Next, we define the
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 始终通过定义值的集合来定义。接下来，我们定义
- en: critical notions of *free variables* and *substitution*, which are
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*自由变量*和*替换*的关键概念，这些概念'
- en: used in the reduction rule for application expressions.  And
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在应用表达式的减少规则中使用。而
- en: finally we give the small-step relation itself.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后我们给出了小步关系本身。
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Compute (fun x:bool ⇒ 3 + 4)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Compute (fun x:bool ⇒ 3 + 4)
- en: yields fun x:bool ⇒ 7.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 产生 fun x:bool ⇒ 7。
- en: Most real-world functional programming languages make the second
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大多数现实世界的函数式编程语言都采用第二种
- en: choice — reduction of a function's body only begins when the
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择 — 函数的主体只有在
- en: function is actually applied to an argument.  We also make the
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数实际应用于参数时。我们还做出
- en: second choice here.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的第二个选择。
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finally, we must consider what constitutes a *complete* program.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，我们必须考虑什么构成了一个*完整*的程序。
- en: Intuitively, a "complete program" must not refer to any undefined
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 直观地说，“完整的程序”不得引用任何未定义的
- en: variables.  We'll see shortly how to define the *free* variables
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变量。我们很快将看到如何定义*自由*变量
- en: in a STLC term.  A complete program is *closed* — that is, it
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 STLC 术语中。一个完整的程序是*封闭*的 — 即，
- en: contains no free variables.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不包含任何自由变量。
- en: (Conversely, a term with free variables is often called an *open term*.)
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （相反，一个带有自由变量的术语通常被称为*开放术语*。）
- en: Having made the choice not to reduce under abstractions, we don't
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择不在抽象下减少后，我们不会
- en: need to worry about whether variables are values, since we'll
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不需要担心变量是否是值，因为我们将
- en: always be reducing programs "from the outside in," and that means
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总是从“外部向内部”减少程序，这意味着
- en: the step relation will always be working with closed terms.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 步骤关系将始终处理封闭术语。
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: (λx:Bool. if x then true else x) false
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: （λx：Bool。如果x那么true否则x）假
- en: to
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 至
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[x:=s]x               = s'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[x:=s]x               = s'
- en: '[x:=s]y               = y                      if x ≠ y'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[x:=s]y               = y                      if x ≠ y'
- en: '[x:=s](λx:T[11]. t[12])   = \x:T[11]. t[12]'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[x:=s]（λx:T[11]. t[12]）   = \x:T[11]. t[12]'
- en: '[x:=s](λy:T[11]. t[12])   = \y:T[11]. [x:=s]t[12]      if x ≠ y'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[x:=s]（λy:T[11]. t[12]）   = \y:T[11]. [x:=s]t[12]      如果x ≠ y'
- en: '[x:=s](t[1] t[2])         = ([x:=s]t[1]) ([x:=s]t[2])'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[x:=s]（t[1] t[2]）         = （[x:=s]t[1]） （[x:=s]t[2]）'
- en: '[x:=s]true            = true'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[x:=s]true            = true'
- en: '[x:=s]false           = false'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[x:=s]false           = false'
- en: '[x:=s](if t[1] then t[2] else t[3]) ='
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[x:=s]（如果t[1]那么t[2]否则t[3]） ='
- en: if [x:=s]t[1] then [x:=s]t[2] else [x:=s]t[3]
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[x:=s]t[1]那么[x:=s]t[2]否则[x:=s]t[3]
- en: '... and formally:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...并正式地：'
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Technical note*: Substitution becomes trickier to define if we'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*技术说明*：如果我们'
- en: consider the case where s, the term being substituted for a
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑替换的术语s的情况
- en: variable in some other term, may itself contain free variables.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他一些术语中的变量，本身可能包含自由变量。
- en: Since we are only interested here in defining the step relation
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们这里只关心定义步骤关系
- en: on closed terms (i.e., terms like \x:Bool. x that include
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对封闭术语（即包括\x：Bool。x这样的术语
- en: binders for all of the variables they mention), we can avoid this
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 绑定所有提到的变量），我们可以避免这种情况
- en: extra complexity here, but it must be dealt with when formalizing
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里有额外的复杂性，但在形式化时必须处理
- en: richer languages.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更丰富的语言。
- en: See, for example, [[Aydemir 2008]](Bib.html#Aydemir 2008) for further discussion
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，参见[[Aydemir 2008]](Bib.html#Aydemir 2008)以获取进一步讨论
- en: of this issue.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个问题的讨论。
- en: 'Exercise: 3 stars (substi)'
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：3星（substi）
- en: The definition that we gave above uses Coq's Fixpoint facility
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们上面给出的定义使用了Coq的Fixpoint功能
- en: to define substitution as a *function*.  Suppose, instead, we
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将替换定义为*函数*。 假设我们
- en: wanted to define substitution as an inductive *relation* substi.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 想要将替换定义为归纳关系substi。
- en: We've begun the definition by providing the Inductive header and
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已经通过提供归纳标题和
- en: one of the constructors; your job is to fill in the rest of the
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中一个构造函数；您的任务是填写其余部分
- en: constructors and prove that the relation you've defined coincides
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构造并证明您定义的关系与之重合
- en: with the function given above.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用上面给出的函数。
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: ☐
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: (λx:T.t12) v[2] ⇒ [x:=v[2]]t[12]
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: (λx:T.t12) v[2] ⇒ [x:=v[2]]t[12]
- en: is traditionally called "beta-reduction".
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传统上称为“β-还原”。
- en: value v[2]
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值v[2]
- en: '|'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (ST_AppAbs)
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (ST_AppAbs)
- en: '|'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (λx:T.t12) v[2] ⇒ [x:=v[2]]t[12]
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: （λx：T.t12）v[2] ⇒ [x:=v[2]]t[12]
- en: '|'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: t[1] ⇒ t[1]'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: t[1] ⇒ t[1]'
- en: '|'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (ST_App1)
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (ST_App1)
- en: '|'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: t[1] t[2] ⇒ t[1]' t[2]
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: t[1] t[2] ⇒ t[1]' t[2]
- en: '|'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: value v[1]
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值v[1]
- en: '|'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: t[2] ⇒ t[2]'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: t[2] ⇒ t[2]'
- en: '|'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (ST_App2)
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (ST_App2)
- en: '|'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: v[1] t[2] ⇒ v[1] t[2]'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: v[1] t[2] ⇒ v[1] t[2]'
- en: '|'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '... plus the usual rules for booleans:'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...再加上布尔值的常规规则：'
- en: '|'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (ST_IfTrue)
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: （ST_IfTrue）
- en: '|'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (if true then t[1] else t[2]) ⇒ t[1]
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: （如果true那么t[1]否则t[2]） ⇒ t[1]
- en: '|'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (ST_IfFalse)
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: （ST_IfFalse）
- en: '|'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (if false then t[1] else t[2]) ⇒ t[2]
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (如果false则t[1]否则t[2]) ⇒ t[2]
- en: '|'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: t[1] ⇒ t[1]'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: t[1] ⇒ t[1]'
- en: '|'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (ST_If)
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: （ST_If）
- en: '|'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (if t[1] then t[2] else t[3]) ⇒ (if t[1]' then t[2] else t[3])
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: （如果t[1]那么t[2]否则t[3]） ⇒ （如果t[1]'那么t[2]否则t[3]）
- en: '|'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Formally:'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正式地：
- en: '[PRE20]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Examples
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: 'Example:'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE21]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: idBB idB ⇒* idB
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: idBB idB ⇒* idB
- en: '[PRE22]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Example:'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE23]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: (idBB (idBB idB)) ⇒* idB.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: （idBB（idBB idB）） ⇒* idB。
- en: '[PRE24]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Example:'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE25]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: (idBB notB) ttrue ⇒* tfalse.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: （idBB notB）ttrue ⇒* tfalse。
- en: '[PRE26]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Example:'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE27]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: idBB (notB ttrue) ⇒* tfalse.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: idBB（notB ttrue） ⇒* tfalse。
- en: '[PRE28]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We can use the normalize tactic defined in the [Types](Types.html) chapter
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以使用[Types](Types.html)章节中定义的normalize策略
- en: to simplify these proofs.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化这些证明。
- en: '[PRE29]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Exercise: 2 stars (step_example3)'
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2星（step_example3）
- en: Try to do this one both with and without normalize.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试使用和不使用normalize来做这个。
- en: '[PRE30]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: ☐
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: '[PRE31]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Contexts
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上下文
- en: '*Question*: What is the type of the term "x y"?'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*问题*：术语“xy”的类型是什么？'
- en: '*Answer*: It depends on the types of x and y!'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：这取决于x和y的类型！'
- en: I.e., in order to assign a type to a term, we need to know
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即，为了给一个术语分配一个类型，我们需要知道
- en: what assumptions we should make about the types of its free
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们应该对其自由变量的类型做出什么假设
- en: variables.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变量。
- en: This leads us to a three-place *typing judgment*, informally
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将引导我们进入一个三元*类型判断*，非正式地
- en: written Γ ⊢ t ∈ T, where Γ is a
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 写作Γ ⊢ t ∈ T，其中Γ是一个
- en: '"typing context" — a mapping from variables to their types.'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “类型上下文” - 从变量到其类型的映射。
- en: Informally, we'll write Γ, x:T for "extend the partial
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非正式地，我们将写作Γ，x：T表示“扩展部分
- en: function Γ to also map x to T."  Formally, we use the
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数Γ也将x映射到T。”形式上，我们使用
- en: function extend to add a binding to a partial map.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数扩展以向部分映射添加绑定。
- en: '[PRE32]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Typing Relation
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型关系
- en: Γ x = T
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ x = T
- en: '|'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_Var)
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: （T_Var）
- en: '|'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: Γ ⊢ x ∈ T
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ ⊢ x ∈ T
- en: '|'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: Γ , x:T[11] ⊢ t[12] ∈ T[12]
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ , x:T[11] ⊢ t[12] ∈ T[12]
- en: '|'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_Abs)
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (T_Abs)
- en: '|'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: Γ ⊢ \x:T[11].t12 ∈ T[11]->T[12]
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ ⊢ \x:T[11].t12 ∈ T[11]->T[12]
- en: '|'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: Γ ⊢ t[1] ∈ T[11]->T[12]
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ ⊢ t[1] ∈ T[11]->T[12]
- en: '|'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: Γ ⊢ t[2] ∈ T[11]
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ ⊢ t[2] ∈ T[11]
- en: '|'
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_App)
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (T_App)
- en: '|'
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: Γ ⊢ t[1] t[2] ∈ T[12]
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ ⊢ t[1] t[2] ∈ T[12]
- en: '|'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_True)
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (T_True)
- en: '|'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: Γ ⊢ true ∈ Bool
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ ⊢ true ∈ Bool
- en: '|'
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_False)
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (T_False)
- en: '|'
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: Γ ⊢ false ∈ Bool
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ ⊢ false ∈ Bool
- en: '|'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: Γ ⊢ t[1] ∈ Bool    Γ ⊢ t[2] ∈ T    Γ ⊢ t[3] ∈ T
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ ⊢ t[1] ∈ Bool    Γ ⊢ t[2] ∈ T    Γ ⊢ t[3] ∈ T
- en: '|'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: (T_If)
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (T_If)
- en: '|'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: Γ ⊢ if t[1] then t[2] else t[3] ∈ T
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ ⊢ if t[1] then t[2] else t[3] ∈ T
- en: '|'
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'We can read the three-place relation Γ ⊢ t ∈ T as:'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以将三元关系 Γ ⊢ t ∈ T 理解为：
- en: '"to the term t we can assign the type T using as types for'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"对于项 t，我们可以使用类型 T 作为类型，使用如下类型'
- en: the free variables of t the ones specified in the context
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: t 的自由变量是上下文中指定的变量
- en: Γ."
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Γ。"
- en: '[PRE33]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Examples
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE34]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note that since we added the has_type constructors to the hints
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，由于我们将 has_type 构造函数添加到提示中
- en: database, auto can actually solve this one immediately.
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库，auto 实际上可以立即解决这个问题。
- en: '[PRE35]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Another example:'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个例子：
- en: '[PRE36]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Example typing_example_2 :'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示�� typing_example_2：
- en: '[empty](Maps.html#empty) ⊢'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '[empty](Maps.html#empty) ⊢'
- en: ([tabs](Stlc.html#STLC.tabs) [x](Stlc.html#STLC.x) [TBool](Stlc.html#STLC.TBool)
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: ([tabs](Stlc.html#STLC.tabs) [x](Stlc.html#STLC.x) [TBool](Stlc.html#STLC.TBool)
- en: ([tabs](Stlc.html#STLC.tabs) [y](Stlc.html#STLC.y) ([TArrow](Stlc.html#STLC.TArrow)
    [TBool](Stlc.html#STLC.TBool) [TBool](Stlc.html#STLC.TBool))
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: ([tabs](Stlc.html#STLC.tabs) [y](Stlc.html#STLC.y) ([TArrow](Stlc.html#STLC.TArrow)
    [TBool](Stlc.html#STLC.TBool) [TBool](Stlc.html#STLC.TBool))
- en: ([tapp](Stlc.html#STLC.tapp) ([tvar](Stlc.html#STLC.tvar) [y](Stlc.html#STLC.y))
    ([tapp](Stlc.html#STLC.tapp) ([tvar](Stlc.html#STLC.tvar) [y](Stlc.html#STLC.y))
    ([tvar](Stlc.html#STLC.tvar) [x](Stlc.html#STLC.x)))))) ∈
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: ([tapp](Stlc.html#STLC.tapp) ([tvar](Stlc.html#STLC.tvar) [y](Stlc.html#STLC.y))
    ([tapp](Stlc.html#STLC.tapp) ([tvar](Stlc.html#STLC.tvar) [y](Stlc.html#STLC.y))
    ([tvar](Stlc.html#STLC.tvar) [x](Stlc.html#STLC.x)))))) ∈
- en: ([TArrow](Stlc.html#STLC.TArrow) [TBool](Stlc.html#STLC.TBool) ([TArrow](Stlc.html#STLC.TArrow)
    ([TArrow](Stlc.html#STLC.TArrow) [TBool](Stlc.html#STLC.TBool) [TBool](Stlc.html#STLC.TBool))
    [TBool](Stlc.html#STLC.TBool))).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: ([TArrow](Stlc.html#STLC.TArrow) [TBool](Stlc.html#STLC.TBool) ([TArrow](Stlc.html#STLC.TArrow)
    ([TArrow](Stlc.html#STLC.TArrow) [TBool](Stlc.html#STLC.TBool) [TBool](Stlc.html#STLC.TBool))
    [TBool](Stlc.html#STLC.TBool))。
- en: Proof with auto using [update_eq](Maps.html#update_eq).
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明，使用 [update_eq](Maps.html#update_eq) 自动完成。
- en: apply [T_Abs](Stlc.html#STLC.T_Abs).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [T_Abs](Stlc.html#STLC.T_Abs)。
- en: apply [T_Abs](Stlc.html#STLC.T_Abs).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [T_Abs](Stlc.html#STLC.T_Abs)。
- en: eapply [T_App](Stlc.html#STLC.T_App). apply [T_Var](Stlc.html#STLC.T_Var)...
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [T_App](Stlc.html#STLC.T_App)。应用 [T_Var](Stlc.html#STLC.T_Var)...
- en: eapply [T_App](Stlc.html#STLC.T_App). apply [T_Var](Stlc.html#STLC.T_Var)...
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [T_App](Stlc.html#STLC.T_App)。应用 [T_Var](Stlc.html#STLC.T_Var)...
- en: apply [T_Var](Stlc.html#STLC.T_Var)...
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 [T_Var](Stlc.html#STLC.T_Var)...
- en: Qed.
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证毕。
- en: '[PRE37]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Example typing_example_2_full :'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 typing_example_2_full：
- en: empty ⊢
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: empty ⊢
- en: (tabs x TBool
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: (tabs x TBool
- en: (tabs y (TArrow TBool TBool)
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: (tabs y (TArrow TBool TBool)
- en: (tapp (tvar y) (tapp (tvar y) (tvar x))))) ∈
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: (tapp (tvar y) (tapp (tvar y) (tvar x))))) ∈
- en: (TArrow TBool (TArrow (TArrow TBool TBool) TBool)).
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: (TArrow TBool (TArrow (TArrow TBool TBool) TBool))。
- en: Proof.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写*) 已承认。
- en: '[PRE38]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: empty ⊢ \x:Bool→B. λy:Bool→Bool. λz:Bool.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: empty ⊢ \x:Bool→B. λy:Bool→Bool. λz:Bool.
- en: y (x z)
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: y (x z)
- en: ∈ T.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: ∈ T。
- en: '[PRE39]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: ☐
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: We can also show that terms are *not* typable.  For example, let's
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还可以展示项是*不*可类型化的。例如，让我们
- en: formally check that there is no typing derivation assigning a type
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正式检查是否没有类型推导分配类型
- en: to the term \x:Bool. \y:Bool, x y — i.e.,
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于项 \x:Bool。 \y:Bool，x y — 即，
- en: '[PRE40]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Example typing_nonexample_1 :'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例 typing_nonexample_1：
- en: ¬ ∃T,
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: ¬ ∃T，
- en: '[empty](Maps.html#empty) ⊢'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '[empty](Maps.html#empty) ⊢'
- en: ([tabs](Stlc.html#STLC.tabs) [x](Stlc.html#STLC.x) [TBool](Stlc.html#STLC.TBool)
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: ([tabs](Stlc.html#STLC.tabs) [x](Stlc.html#STLC.x) [TBool](Stlc.html#STLC.TBool)
- en: ([tabs](Stlc.html#STLC.tabs) [y](Stlc.html#STLC.y) [TBool](Stlc.html#STLC.TBool)
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: ([tabs](Stlc.html#STLC.tabs) [y](Stlc.html#STLC.y) [TBool](Stlc.html#STLC.TBool)
- en: ([tapp](Stlc.html#STLC.tapp) ([tvar](Stlc.html#STLC.tvar) [x](Stlc.html#STLC.x))
    ([tvar](Stlc.html#STLC.tvar) [y](Stlc.html#STLC.y))))) ∈
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: ([tapp](Stlc.html#STLC.tapp) ([tvar](Stlc.html#STLC.tvar) [x](Stlc.html#STLC.x))
    ([tvar](Stlc.html#STLC.tvar) [y](Stlc.html#STLC.y))))) ∈
- en: '[T](Stlc.html#T).'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '[T](Stlc.html#T)。'
- en: Proof.
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明。
- en: intros Hc. inversion Hc.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 Hc。反演 Hc。
- en: (* The clear tactic is useful here for tidying away bits of      the context that we're not going to need again. *)
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里清除策略对于整理我们将不再需要的上下文部分非常有用。*)
- en: inversion H. subst. clear H.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 H。替换。清除 H。
- en: inversion H[5]. subst. clear H[5].
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 H[5]。替换。清除 H[5]。
- en: inversion H[4]. subst. clear H[4].
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 H[4]。替换。清除 H[4]。
- en: inversion H[2]. subst. clear H[2].
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 H[2]。替换。清除 H[2]。
- en: inversion H[5]. subst. clear H[5].
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 H[5]。替换。清除 H[5]。
- en: inversion H[1]. Qed.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 反演 H[1]。证毕。
- en: '[PRE41]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: ¬ (∃S, ∃T,
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: ¬ (∃S, ∃T,
- en: empty ⊢ \x:S. x x ∈ T).
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: empty ⊢ \x:S. x x ∈ T)。
- en: '[PRE42]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: ☐
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: '[PRE43]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
