- en: Add more features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加更多功能
- en: Add more features
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加更多功能
- en: Now that you've connected to a database using Entity Framework Core, you're
    ready to add some more features to the application. First, you'll make it possible
    to mark a to-do item as complete by checking its checkbox.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经使用Entity Framework Core连接到了数据库，可以开始向应用程序添加一些更多功能。首先，您将使得可以通过选中复选框来标记待办事项为已完成。
- en: Add new to-do items
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新的待办事项
- en: Add new to-do items
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新的待办事项
- en: 'The user will add new to-do items with a simple form below the list:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将通过列表下方的简单表单添加新的待办事项：
- en: '![Final form](final-form.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![最终形式](final-form.png)'
- en: 'Adding this feature requires a few steps:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此功能需要执行几个步骤：
- en: Adding JavaScript that will send the data to the server
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加将数据发送到服务器的JavaScript代码
- en: Creating a new action on the controller to handle this request
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制器上创建一个新操作来处理此请求
- en: Adding code to the service layer to update the database
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加代码到服务层以更新数据库
- en: Add JavaScript code
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加JavaScript代码
- en: The `Todo/Index.cshtml` view already includes an HTML form that has a textbox
    and a button for adding a new item. You'll use jQuery to send a POST request to
    the server when the Add button is clicked.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`Todo/Index.cshtml`视图已经包含一个HTML表单，其中有一个文本框和一个用于添加新项目的按钮。当单击添加按钮时，您将使用jQuery向服务器发送一个POST请求。'
- en: 'Open the `wwwroot/js/site.js` file and add this code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`wwwroot/js/site.js`文件并添加以下代码：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, write the `addItem` function at the bottom of the file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在文件底部编写`addItem`函数：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function will send a POST request to `http://localhost:5000/Todo/AddItem`
    with the name the user typed. The third parameter passed to the `$.post` method
    (the function) is a success handler that will run if the server responds with
    `200 OK`. The success handler function uses `window.location` to refresh the page
    (by setting the location to `/Todo`, the same page the browser is currently on).
    If the server responds with `400 Bad Request`, the `fail` handler attached to
    the `$.post` method will try to pull out an error message and display it in a
    the `<div>` with id `add-item-error`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能将向`http://localhost:5000/Todo/AddItem`发送一个POST请求，其中包含用户输入的名称。传递给`$.post`方法（函数）的第三个参数是一个成功处理程序，如果服务器以`200
    OK`响应，则将运行该处理程序。成功处理程序函数使用`window.location`来刷新页面（通过将位置设置为`/Todo`，与浏览器当前所在的页面相同）。如果服务器以`400
    Bad Request`响应，则附加到`$.post`方法的`fail`处理程序将尝试提取错误消息并在具有id`add-item-error`的`<div>`中显示它。
- en: Add an action
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个操作
- en: The above JavaScript code won't work yet, because there isn't any action that
    can handle the `/Todo/AddItem` route. If you try it now, ASP.NET Core will return
    a `404 Not Found` error.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以上JavaScript代码目前无法工作，因为没有任何操作可以处理`/Todo/AddItem`路由。如果现在尝试，ASP.NET Core将返回`404
    Not Found`错误。
- en: 'You''ll need to create a new action called `AddItem` on the `TodoController`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在`TodoController`上创建一个名为`AddItem`的新操作：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The method signature defines a `NewTodoItem` parameter, which is a new model
    that doesn''t exist yet. You''ll need to create it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 方法签名定义了一个`NewTodoItem`参数，这是一个尚不存在的新模型。您需要创建它：
- en: '**`Models/NewTodoItem.cs`**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Models/NewTodoItem.cs`**'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This model definition (one property called `Title`) matches the data you''re
    sending to the action with jQuery:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型定义（一个名为`Title`的属性）与您使用jQuery发送到操作的数据匹配：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ASP.NET Core uses a process called **model binding** to match up the parameters
    submitted in the POST request to the model definition you created. If the parameter
    names match (ignoring things like case), the request data will be placed into
    the model.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core使用一种称为**模型绑定**的过程，将提交的参数与您创建的模型定义匹配起来。如果参数名称匹配（忽略大小写等因素），请求数据将被放入模型中。
- en: After binding the request data to the model, ASP.NET Core also performs **model
    validation**. The `[Required]` attribute on the `Title` property informs the validator
    that the `Title` property should not be missing (blank). The validator won't throw
    an error if the model fails validation, but the validation status will be saved
    so you can check it in the controller.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在将请求数据绑定到模型后，ASP.NET Core还执行**模型验证**。`Title`属性上的`[Required]`属性通知验证器`Title`属性不应该丢失（空白）。如果模型未通过验证，验证器不会抛出错误，但验证状态将被保存，以便您可以在控制器中检查它。
- en: 'Sidebar: It would have been possible to reuse the `TodoItem` model instead
    of creating the `NewTodoItem` model, but `TodoItem` contains properties that will
    never be submitted by the user (ID and done). It''s cleaner to declare a new model
    that represents the exact set of properties that are relevant when adding a new
    item.'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 侧边栏：可以重用`TodoItem`模型而不是创建`NewTodoItem`模型，但`TodoItem`包含用户永远不会提交的属性（ID和done）。声明一个代表在添加新项目时相关属性集的确切模型更清晰。
- en: 'Back to the `AddItem` action method on the `TodoController`: the first block
    checks whether the model passed the model validation process. It''s customary
    to do this right at the beginning of the method:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`TodoController`上的`AddItem`操作方法：第一个块检查模型是否通过了模型验证过程。习惯上在方法的开头就这样做：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the `ModelState` is invalid (because the required property is empty), the
    action will return 400 Bad Request along with the model state, which is automatically
    converted into an error message that tells the user what is wrong.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`ModelState`无效（因为必需属性为空），操作将返回400 Bad Request以及模型状态，该状态会自动转换为告诉用户出了什么问题的错误消息。
- en: 'Next, the controller calls into the service layer to do the actual database
    operation:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，控制器调用服务层执行实际的数据库操作：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `AddItemAsync` method will return `true` or `false` depending on whether
    the item was successfully added to the database. If it fails for some reason,
    the action will return `400 Bad Request` along with an object that contains an
    `error` property.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddItemAsync`方法将根据项目是否成功添加到数据库返回`true`或`false`。如果由于某种原因失败，操作将返回`400 Bad Request`以及包含`error`属性的对象。'
- en: Finally, if everything completed without errors, the action returns `200 OK`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果一切顺利完成，操作将返回`200 OK`。
- en: Add a service method
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个服务方法
- en: If you're using a code editor that understands C#, you'll see red squiggely
    lines under `AddItemAsync` because the method doesn't exist yet.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用了理解C#的代码编辑器，您会看到`AddItemAsync`下面有红色波浪线，因为该方法尚不存在。
- en: 'As a last step, you need to add a method to the service layer. First, add it
    to the interface definition in `ITodoItemService`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步，您需要在服务层添加一个方法。首先，在`ITodoItemService`中的接口定义中添加它：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, the actual implementation in `TodoItemService`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`TodoItemService`中的实际实现：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method creates a new `TodoItem` (the model that represents the database
    entity) and copies the `Title` from the `NewTodoItem` model. Then, it adds it
    to the context and uses `SaveChangesAsync` to persist the entity in the database.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法创建一个新的`TodoItem`（代表数据库实体的模型），并从`NewTodoItem`模型中复制`Title`。然后，将其添加到上下文中，并使用`SaveChangesAsync`将实体持久化到数据库中。
- en: 'Sidebar: The above is just one way to build this functionality. If you want
    to display a separate page for adding a new item (for a complicated entity that
    contains a lot of properties, for example), you could create a new view that''s
    bound to the model you need the user to provide values for. ASP.NET Core can render
    a form automatically for the properties of the model using a feature called **tag
    helpers**. You can find examples in the ASP.NET Core documentation at [https://docs.asp.net](https://docs.asp.net).'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 侧边栏：上述只是构建此功能的一种方式。如果要为添加新项目显示单独的页面（例如，包含许多属性的复杂实体），可以创建一个新视图，该视图绑定到需要用户提供值的模型。ASP.NET
    Core可以使用称为**标签助手**的功能自动为模型的属性呈现表单。您可以在ASP.NET Core文档中找到示例，网址为[https://docs.asp.net](https://docs.asp.net)。
- en: Try it out
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 试一试
- en: Run the application and add some items to your to-do list with the form. Since
    the items are being stored in the database, they'll still be there even after
    you stop and start the application again.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序并使用表单向待办事项列表添加一些项目。由于项目存储在数据库中，即使您停止并重新启动应用程序，它们仍将存在。
- en: As a further challenge, try adding a date picker using HTML and JavaScript,
    and let the user choose an (optional) date for the `DueAt` property. Then, use
    that date instead of always making new tasks that are due in 3 days.
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为进一步的挑战，尝试使用HTML和JavaScript添加日期选择器，并让用户为`DueAt`属性选择一个（可选）日期。然后，使用该日期而不是总是创建在3天内到期的新任务。
- en: Complete items with a checkbox
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用复选框完成项目
- en: Complete items with a checkbox
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用复选框完成项目
- en: 'Adding items to your to-do list is great, but eventually you''ll need to get
    things done, too. In the `Views/Todo/Index.cshtml` view, a checkbox is rendered
    for each to-do item:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目添加到待办事项列表很好，但最终您也需要完成任务。在`Views/Todo/Index.cshtml`视图中，为每个待办事项呈现一个复选框：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The item's ID (a guid) is saved in the `name` attribute of the element. You
    can use this ID to tell your ASP.NET Core code to update that entity in the database
    when the checkbox is checked.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的 ID（一个 guid）保存在元素的`name`属性中。您可以使用此 ID 告诉 ASP.NET Core 代码在复选框被选中时更新数据库中的实体。
- en: 'This is what the whole flow will look like:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 整个流程将如下所示：
- en: The user checks the box, which triggers a JavaScript function
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户勾选复选框，触发一个 JavaScript 函数
- en: JavaScript is used to make an API call to an action on the controller
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JavaScript 发起对控制器上的操作的 API 调用
- en: The action calls into the service layer to update the item in the database
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作调用服务层来更新数据库中的项目
- en: A response is sent back to the JavaScript function to indicate the update was
    successful
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送响应回JavaScript函数，指示更新成功
- en: The HTML on the page is updated
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面上的 HTML 被更新
- en: Add JavaScript code
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 JavaScript 代码
- en: 'First, open `site.js` and add this code to the `$(document).ready` block:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开`site.js`并将此代码添加到`$(document).ready`块中：
- en: '**wwwroot/js/site.js**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**wwwroot/js/site.js**'
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, add the `markCompleted` function at the bottom of the file:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在文件底部添加`markCompleted`函数：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This code uses jQuery to send an HTTP POST request to `http://localhost:5000/Todo/MarkDone`.
    Included in the request will be one parameter, `id`, containing the item's ID
    (pulled from the `name` attribute).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码使用 jQuery 发送 HTTP POST 请求到`http://localhost:5000/Todo/MarkDone`。请求中将包含一个名为`id`的参数，其中包含项目的
    ID（从`name`属性中提取）。
- en: 'If you open the Network Tools in your web browser and click on a checkbox,
    you''ll see a request like:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 Web 浏览器中打开网络工具并单击复选框，您将看到一个类似于以下的请求：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The success handler function passed to `$.post` uses jQuery to add a class to
    the table row that the checkbox sits in. With the row marked with the `done` class,
    a CSS rule in the page stylesheet will change the way the row looks.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`$.post`的成功处理程序函数使用 jQuery 向包含复选框的表行添加一个类。通过将带有`done`类的行标记，页面样式表中的 CSS 规则将更改行的外观。
- en: Add an action to the controller
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向控制器添加一个操作
- en: 'As you''ve probably guessed, you need to add a `MarkDone` action on the `TodoController`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经猜到的那样，您需要在`TodoController`上添加一个`MarkDone`操作：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let's step through each piece of this action method. First, the method accepts
    a `Guid` parameter called `id` in the method signature. Unlike the `AddItem` action,
    which used a model (the `NewTodoItem` model) and model binding/validation, the
    `id` parameter is very simple. If the incoming request includes a parameter called
    `id`, ASP.NET Core will try to parse it as a guid.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解这个操作方法的每个部分。首先，在方法签名中，该方法接受一个名为`id`的`Guid`参数。与使用模型（`NewTodoItem`模型）和模型绑定/验证的`AddItem`操作不同，`id`参数非常简单。如果传入的请求包含一个名为`id`的参数，ASP.NET
    Core将尝试将其解析为一个 guid。
- en: 'There''s no `ModelState` to check for validity, but you can still check to
    make sure the guid was valid. If for some reason the `id` parameter in the request
    was missing couldn''t be parsed as a guid, it will have a value of `Guid.Empty`.
    If that''s the case, the action can return early:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 没有`ModelState`可供检查有效性，但仍然可以检查确保 guid 是有效的。如果由于某种原因请求中的`id`参数丢失或无法解析为 guid，则其值将为`Guid.Empty`。如果是这种情况，操作可以提前返回：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `BadRequest()` method is a helper method that simply returns the HTTP status
    code `400 Bad Request`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`BadRequest()`方法是一个简单返回 HTTP 状态码`400 Bad Request`的辅助方法。'
- en: 'Next, the controller needs to call down into the service to update the database.
    This will be handled by a new method called `MarkDoneAsync` on the `ITodoItemService`,
    which will return true or false depending on if the update succeeded:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，控制器需要调用服务来更新数据库。这将由`ITodoItemService`上的新方法`MarkDoneAsync`处理，根据更新是否成功返回 true
    或 false：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finally, if everything looks good, the `Ok()` method is used to return status
    code `200 OK`. More complex APIs might return JSON or other data as well, but
    for now returning a status code is all you need.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果一切看起来正常，`Ok()`方法用于返回状态码`200 OK`。更复杂的 API 可能还会返回 JSON 或其他数据，但目前只需返回状态码即可。
- en: Add a service method
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个服务方法
- en: 'First, add `MarkDoneAsync` to the interface definition:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在接口定义中添加`MarkDoneAsync`：
- en: '**`Services/ITodoItemService.cs`**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Services/ITodoItemService.cs`**'
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, add the concrete implementation to the `TodoItemService`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`TodoItemService`中添加具体实现：
- en: '**`Services/TodoItemService.cs`**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Services/TodoItemService.cs`**'
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This method uses Entity Framework Core and `Where` to find an entity by ID in
    the database. The `SingleOrDefaultAsync` method will return either the item (if
    it exists) or `null` if the ID was bogus. If it didn't exist, the code can return
    early.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法使用 Entity Framework Core 和 `Where` 在数据库中通过 ID 查找实体。`SingleOrDefaultAsync`
    方法会返回项（如果存在），或者如果 ID 是虚假的则返回 `null`。如果不存在，代码可以提前返回。
- en: 'Once you''re sure that `item` isn''t null, it''s a simple matter of setting
    the `IsDone` property:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定 `item` 不为 null，设置 `IsDone` 属性就是一件简单的事情了：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Changing the property only affects the local copy of the item until `SaveChangesAsync`
    is called to persist your changes back to the database. `SaveChangesAsync` returns
    an integer that reflects how many entities were updated during the save operation.
    In this case, it'll either be 1 (the item was updated) or 0 (something went wrong).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 更改属性只会影响到项目的本地副本，直到调用 `SaveChangesAsync` 将更改持久化到数据库。`SaveChangesAsync` 返回一个反映保存操作期间更新了多少个实体的整数。在这种情况下，它要么是
    1（项目已更新），要么是 0（出现了问题）。
- en: Try it out
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 试一试
- en: Run the application and try checking some items off the list. Refresh the page
    and they'll disappear completely, because of the `Where` filter in the `GetIncompleteItemsAsync`
    method.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序并尝试勾选一些项目。刷新页面后，它们将完全消失，因为 `GetIncompleteItemsAsync` 方法中的 `Where` 过滤器。
- en: Right now, the application contains a single, shared to-do list. It'd be even
    more useful if it kept track of individual to-do lists for each user. In the next
    chapter, you'll use ASP.NET Core Identity to add security and authentication features
    to the project.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，应用程序包含一个单一的、共享的待办事项列表。如果它能为每个用户跟踪个人待办事项列表，那就更有用了。在下一章中，您将使用 ASP.NET Core
    Identity 为项目添加安全性和身份验证功能。
