- en: Error handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: Error handling
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: There are two major approaches how to handle errors in streams. You can retry
    your stream and how it eventually will work or you can take the error and transform
    it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种主要方法来处理流中的错误。你可以重试你的流，看看最终是否能够工作，或者你可以接受错误并将其转换。
- en: Retry - how bout now?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重试 - 现在怎么样？
- en: This approach makes sense when you believe the error is temporary for some reason.
    Usually *shaky connections* is a good candidate for this. With a *shaky connection*
    the endpoint might be there to answer like for example every 5th time you try.
    Point is the first time you try it *might* fail, but retrying x times, with a
    certain time between attempts, will lead to the endpoint finally answering.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当你出于某种原因相信错误是暂时的时，这种方法是有道理的。通常*不稳定的连接*是一个很好的候选对象。使用*不稳定的连接*，终点可能会有答复，比如每第5次尝试一次。重点是第一次尝试可能会失败，但重试x次，尝试之间有一定的时间，最终会得到终点的答复。
- en: retry
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重试
- en: 'The `retry()` operator lets us retry the whole stream, value for value x number
    of times having a signature like this :'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`retry()`操作符让我们重试整个流，每个值重试x次，具有以下签名：'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The important thing to note with the `retry()` operator is that it delays when
    the error callback is being called. Given the following code the error callback
    is being hit straight away:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`retry()`操作符的重要事项是它延迟了当错误回调被调用时。给定以下代码，错误回调会立即被调用：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The stream effectively dies when the error callback is being hit and this is
    where the `rety()` operator comes in. By appending it like so:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当错误回调被调用时，流实际上会死掉，这就是`retry()`操作符的作用。通过像这样附加它：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will run the sequence of values 5 more times before finally giving up
    and hitting the error callback. However in this case, the way the code is written,
    it will just generate `1,2` five times. So our code isn''t really utilizing the
    operator to its fullest potential. What you probably want is to be able to change
    something between attempts. Imagine your observable looked like this instead:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后放弃并触发错误回调之前，这将运行值序列5次。然而，在这种情况下，代码的编写方式只会生成`1,2`五次。因此，我们的代码并没有充分利用这个运算符的潜力。你可能想要的是在尝试之间能够改变一些东西。想象一下，你的observable看起来是这样的：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this its clearly so that an endpoint might have answered badly or not at
    all on your first attempt and it makes sense to retry them x number of times.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下很明显，一个终点在第一次尝试时可能会回答不好，或者根本不会回答，因此有意义的是重试x次。
- en: However in the case of ajax calls, and imagining our business case is *shaky
    connections* it makes no sense to do the retry immediately so we have to look
    elsewhere for a better operator, we need to look to `retryWhen()`
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在ajax调用的情况下，假设我们的业务情景是*不稳定的连接*，立即重试是没有意义的，所以我们必须在其他地方寻找更好的操作符，我们需要寻找`retryWhen()`
- en: retryWhen
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: retryWhen
- en: A `retryWhen()` operator gives us the chance to operate on our stream and handle
    it appropriately
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`retryWhen()`操作符给了我们在流上操作和适当处理它的机会'
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Lets' write a piece of naive code for a second
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一段简单的代码片段
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The way it''s written it will return `1` until we run out of memory cause the
    algorithm will always crash on the value `2` and will keep retrying the stream
    forever, due to our lack of end condition. What we need to do is to somehow say
    that the error is fixed. If the stream were trying to hit urls instead of emitting
    numbers a responding endpoint would be the fix but in this case we have to write
    something like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这种写法会返回`1`，直到我们用尽内存为止，因为算法在值`2`上总是崩溃，并且会无限期地重试流，由于我们缺乏结束条件。我们需要做的是以某种方式表明错误已经被修复。如果流尝试击中的是URL而不是发出数字，那么一个响应的终点就是解决方案，但在这种情况下，我们必须写出这样的东西：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This however resembles a lot of what we did with the `retry()` operator, the
    code above will just retry once. The real benefit is being to change the stream
    we return inside the `retryWhen()` namely to involve a delay like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但这与我们使用`retry()`操作符所做的非常相似，上面的代码只会重试一次。真正的好处是能够改变我们在`retryWhen()`内返回的流，即像这样涉及延迟：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This ensures there is a 200ms delay before sequence is retried, which in an
    ajax scenario could be enough for our endpoint to *get it's shit together* and
    start responding.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这样确保序列在重试之前有200ms的延迟，对于ajax场景来说，这可能足够让我们的终点*整理好*并开始响应。
- en: '**GOTCHA**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**小心**'
- en: The `delay()` operator is used within the `retryWhen()` to ensure that the retry
    happens a while later to in this case give the network a chance to recover.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`delay()`操作符在`retryWhen()`内部使用，以确保重试在稍后的某个时候发生，以此给网络一个恢复的机会。'
- en: retryWhen with delay and no of times
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 带延迟和次数的重试
- en: 'So far `retry()` operator has been used when we wanted to retry the sequence
    x times and `retryWhen()` has been used when we wanted to delay the time between
    attempts, but what if we want both. Can we do that? We can. We need to think about
    us somehow remembering the number of attempts we have made so far. It''s very
    tempting to introduce an external variable and keep that count, but that''s not
    how we do things the functional way, remember side effects are forbidden. So how
    do we solve it? There is an operator called `scan()` that will allow us to accumulate
    values for every iteration. So if you use scan inside of the `retryWhen()` we
    can track our attempts that way:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，当我们想要重试序列 x 次时，我们使用了`retry()`操作符，当我们想要延迟尝试之间的时间时，我们使用了`retryWhen()`，但是如果我们两者都想要怎么办。我们可以。我们需要考虑如何记住我们迄今为止尝试的次数。引入一个外部变量并保留计数是非常诱人的，但这不是我们以函数式方式处理事务的方式，记住副作用是被禁止的。那么我们该如何解决呢？有一个名为`scan()`的操作符，它允许我们为每次迭代累积值。因此，如果你在`retryWhen()`内部使用
    scan，我们可以通过这种方式跟踪我们的尝试：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Transform - nothing to see here folks
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换 - 这里没有什么可看的。
- en: This approach is when you get an error and you choose to remake it into a valid
    Observable.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遇到错误并选择将其重新制作成有效的 Observable 时，就采用这种方法。
- en: So lets exemplify this by creating an Observable who's mission in life is to
    fail miserably
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们通过创建一个使命在于惨败的 Observable 来举例说明这一点。
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This code will only execute the error callback and NOT reach the complete callback.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码只会执行错误回调，而不会触发完成回调。
- en: Patching it
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修补它
- en: 'We can patch this by introducing the `catch()` operator. It is used like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过引入`catch()`操作符来修补这个问题。用法如下：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see `patching it` with `.catch()` and returning a new Observable
    *fixes* the stream. Question is if that is what you want. Sure the stream survives
    and reaches completion and can emit any values that happened after the point of
    crash.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，通过使用`.catch()`并返回一个新的 Observable 来“修补它”，修复了流。问题是这是否是你想要的。当然，流会存活并达到完成，并且可以在崩溃点之后发出任何值。
- en: If this is not what you want then maybe the Retry approach above suits you better,
    you be the judge.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这不是你想要的，也许上面的重试方法更适合你，你来判断。
- en: What about multiple streams?
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多个流怎么办？
- en: You didn't think it would be that easy did you? Usually when coding Rxjs code
    you deal with more than one stream and using `catch()` operator approach is great
    if you know where to place your operator.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你没想到会这么容易吧？通常在编写 Rxjs 代码时，你会处理多个流，并且使用`catch()`操作符的方法很棒，只要你知道在哪里放置你的操作符。
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Care to guess what happened? 1) crash + values is emitted + complete 2) crash
    + values is emitted 3) crash only is emitted
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 猜猜发生了什么？1) crash + 值被发出 + 完成 2) crash + 值被发出 3) 仅发出 crash
- en: Sadly 3) is what happens. Which means we have virtually no handling of the error.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是发生了第3种情况。这意味着我们几乎没有处理错误。
- en: '**Lets patch it** S we need to patch the error. We do patching with `catch()`
    operator. Question is where?'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们修补它** 所以我们需要修补错误。我们使用`catch()`操作符进行修补。问题是在哪里？'
- en: Let's try this?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试这个？
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this case we get 'crash' and 'patchedMerged completed'. Ok so we reach complete
    but it still doesn't give us the values from `goodStream$`. So better approach
    but still not good enough.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们得到了'crash'和'patchedMerged completed'。好吧，我们达到了完成，但它仍然没有给我们`goodStream$`的值。所以这是一个更好的方法，但仍然不够好。
- en: '**Patch it better** So adding the `catch()` operator after the `merge()` ensured
    the stream completed but it wasn''t good enough. Let''s try to change the placement
    of `catch()`, pre merge.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**更好地修补它** 因此，在`merge()`之后添加`catch()`操作符确保了流完成，但这还不够好。让我们尝试改变`catch()`的放置位置，放在合并之前。'
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: And voila, we get values, our error emits its error message as a new nice Observable
    and we get completion.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们得到了值，我们的错误发出其错误消息作为一个新的很好的 Observable，并且我们得到了完成。
- en: '**GOTCHA** It matters where the `catch()` is placed.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意** 放置`catch()`的位置很重要。'
- en: Survival of the fittest
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 适者生存
- en: There is another scenario that might be of interest. The above scenario assumes
    you want everything emitted, error messages, values, everything.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种可能感兴趣的情况。上面的情况假设你希望一切都被发出，错误消息、值，一切。
- en: What if that is not the case, what if you only care about values from streams
    that behave? Let's say thats your case, there is an operator for that `onErrorResumeNext()`
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是这种情况，如果你只关心行为正常的流中的值呢？假设这是你的情况，有一个操作符可以做到这一点`onErrorResumeNext()`
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The only thing emitted here is 'I will survive' and 'Survival of the fittest,
    completed'.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里唯一发出的是'I will survive'和'Survival of the fittest, completed'。
