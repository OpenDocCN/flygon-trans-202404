- en: Writing Python programs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 Python 程序
- en: Writing Python programs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 Python 程序
- en: A program consists of multiple lines that are executed in one go.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 程序由多行组成，一次执行所有行。
- en: 'Usually a program contains the following sections:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，程序包含以下几部分：
- en: '![input-processing-output](IPO.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![input-processing-output](IPO.png)'
- en: Of course, programs can grow a lot more complicated than that.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，程序可能变得更加复杂。
- en: In this chapter, we will learn to know the `print()` function for producing
    output, loops and branching statements.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习使用 `print()` 函数生成输出、循环和分支语句。
- en: Turing Completeness
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图灵完备性
- en: In the second part of the tutorial, you will learn a basic set of Python commands.
    Theoretically, they are sufficient to write any program on the planet (this is
    called *Turing completeness*).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在教程的第二部分，您将学习一组基本的 Python 命令。从理论上讲，它们足以在地球上编写任何程序（这称为*图灵完备性*）。
- en: Practically, you will need shortcuts that make programs prettier, faster, and
    less painful to write. We will save these shortcuts for the later parts.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您将需要一些能够使程序更美观、更快速且更不痛苦地编写的快捷方式。我们将在后面的部分保存这些快捷方式。
- en: My first program
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我的第一个程序
- en: My first program
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我的第一个程序
- en: Using the interactive IPython shell alone is exciting only for a while. To write
    more complex programs, you need to store your instructions in *programs*, so that
    you can *execute* them later.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用交互式 IPython shell 一段时间后会变得令人兴奋。要编写更复杂的程序，您需要将指令存储在*程序*中，以便以后*执行*它们。
- en: In this section we will write our first Python program. It is going to simply
    write a few names of babies to the screen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写我们的第一个 Python 程序。它将简单地将几个婴儿的名字写到屏幕上。
- en: Exercise 1
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 1
- en: 'Open a text editor (e.g. Spyder) and create a new file. Write into it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文本编辑器（例如 Spyder）并创建一个新文件。写入其中：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save the file with the name `output.py` ab.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 用名称 `output.py` 保存文件。
- en: Exercise 2
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 2
- en: Now let's execute our program.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们执行我们的程序。
- en: In **Anaconda Spyder** you can use the *"Play"* button or press `F5`.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **Anaconda Spyder** 中，您可以使用 *"Play"* 按钮或按 `F5` 键。
- en: 'In **Unix** open a terminal, change to the directory with the Python file and
    type:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **Unix** 中打开终端，切换到包含 Python 文件的目录，并键入：
- en: python3 output.py
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: python3 output.py
- en: Exercise 3
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 3
- en: 'Explain the following program:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 解释以下程序：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Exercise 4
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4
- en: 'Write the following program:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 编写以下程序：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What happens when you execute the code?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当您执行代码时会发生什么？
- en: Repeating instructions
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复指令
- en: Repeating instructions
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复指令
- en: In our early programs, each Python instruction was executed only once. That
    makes programming a bit pointless, because our programs are limited by our typing
    speed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的早期程序中，每个 Python 指令只执行一次。这使得编程有点没有意义，因为我们的程序受到我们的打字速度的限制。
- en: In this section we will take a closer look at the `for` statement that repeats
    one or more instructions several times.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更仔细地查看重复执行一条或多条指令的 `for` 语句。
- en: Exercise 1
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1
- en: What does the following program do?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序做什么？
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Exercise 2
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 2
- en: What advantages does the `for` loop have over the following one?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环相比以下内容有什么优势？'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Exercise 3
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 3
- en: Write a for loop that creates the following output
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 `for` 循环，创建以下输出
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Exercise 4
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4
- en: 'Explain the difference between the following two programs:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 解释以下两个程序之间的区别：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: and
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Exercise 5
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 5
- en: What does the following program do?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序做什么？
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Exercise 6
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 6
- en: Write a program that calculates the number of characters in `Stefani Joanne
    Angelina Germanotta`. **Spaces count as well!**
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个计算 `Stefani Joanne Angelina Germanotta` 中字符数的程序。**空格也要计数！**
- en: Making decisions
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做决定
- en: Making decisions
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做决定
- en: The last missing piece in our basic set of commands is the ability to make decisions
    in a program. This is done in Python using the `if` command.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序中做出决定的最后一块缺失的部分是具有分支语句的能力。在 Python 中，使用 `if` 命令来实现。
- en: '![making decisions](list.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![making decisions](list.png)'
- en: Exercise 1
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 1
- en: Execute the following program and explain its output.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下程序并解释其输出。
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Exercise 2
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 2
- en: Set `name` to such a value that one, two or all three conditions apply.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `name` 设置为一个值，使得一个、两个或全部三个条件都适用。
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Exercise 3
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 3
- en: 'The following program writes the positions of all letters *"n"* in the name
    to the screen. Unfortunately, it contains **three errors**. Make the program execute
    correctly:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序将名称中所有字母“n”的位置写入屏幕。不幸的是，它包含**三个错误**。使程序能够正确执行：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Exercise 4
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4
- en: Which of these `if` statements are syntactically correct?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 哪些 `if` 语句在语法上是正确的？
- en: '`if a and b:`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if a and b:`'
- en: '`if len(s) == 23:`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if len(s) == 23:`'
- en: '`if a but not b < 3:`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if a but not b < 3:`'
- en: '`if a ** 2 >= 49:`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if a ** 2 >= 49:`'
- en: '`if a != 3`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if a != 3`'
- en: '`if (a and b) or (c and d):`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if (a and b) or (c and d):`'
