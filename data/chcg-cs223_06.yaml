- en: Buttons, Channels, and 2D Graphics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按钮、通道和 2D 图形
- en: In this tutorial, we will work through several more examples of FRP in Elm.
    Our motivating application will be building an integer counter that can be updated
    with buttons.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将通过 Elm 中的几个 FRP 示例进行更多实例讲解。我们的激励应用程序将是构建一个可以使用按钮更新的整数计数器。
- en: 'We will start with the application `State`:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从应用程序 `State` 开始：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To warm up the development process, we will first define `main` in terms of
    a dummy constant signal.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快开发进程，我们将首先以虚拟常量信号的形式定义`main`。
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And, to set up the basis for our GUI, we start with a simple rendering function
    that writes the current value of the counter to the middle of the screen. We bind
    some libraries to single letter names for brevity (e.g. `E` for [`Graphics.Element`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element),
    `T` for [`Text`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Text),
    and `C` for [`Graphics.Collage`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Collage)).
    Notice how `E.container` is used to define a sized `Element` with content placed
    in a particular `Position` within, and `E.flow` places a list of `Elements` next
    to one another in a particular `Direction`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，为了为我们的 GUI 建立基础，我们首先要设置一个简单的渲染函数，将计数器的当前值写入屏幕中央。我们将一些库绑定到单个字母名称以便简洁（例如 `E`
    对应 [`Graphics.Element`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element)，`T`
    对应 [`Text`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Text)，以及
    `C` 对应 [`Graphics.Collage`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Collage)）。注意
    `E.container` 如何用于定义具有特定位置的内容的已调整大小的 `Element`，而 `E.flow` 则将一组 `Elements` 沿着特定的
    `Direction` 放置在一起。
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Underneath the counter display, we want to draw two buttons, one for incrementing
    and one for clearing. The [`Graphics.Input`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Input)
    library offers the following to build buttons:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在计数器显示下面，我们想要绘制两个按钮，一个用于递增，一个用于清除。[`Graphics.Input`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Input)
    库提供以下内容来构建按钮：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What is a `Signal.Message`? This type describes a value that gets sent over
    a `Channel` (also defined in [`Signal`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Signal)).
    Okay, so what is a `Channel`?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`Signal.Message` 是什么？这种类型描述了通过 `Channel`（也在 [`Signal`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Signal)
    中定义）发送的值。好的，那么 `Channel` 是什么呢？'
- en: Channels
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通道
- en: 'Channels provide a way to create "pipes" through which messages (of a specified
    type) can be sent from one part of an Elm application to another. They are created
    by the function:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通道提供了一种通过其中传递消息（指定类型）的“管道”来创建的方式，这些消息可以从 Elm 应用程序的一部分发送到另一部分。它们是通过函数创建的：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I like to think of channels as "dynamically generated signals." But why is there
    a need for a separate mechanism?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢把通道看作是“动态生成的信号”。但是为什么需要一个单独的机制呢？
- en: In the programming we have done so far, we start with the bunch of primitive
    signals that Elm provides, and then we derive other signals in terms of them.
    But these derived signals do not generate new kinds of events or messages. Instead,
    an entire program can be thought of as propagating the updates to primitive signals.
    This program structure is exhibited by the acylic nature of signal graphs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们迄今所做的编程中，我们首先使用 Elm 提供的一堆基本信号，然后我们根据它们导出其他信号。但是这些衍生信号不会生成新的事件或消息。相反，整个程序可以被认为是将对基本信号的更新传播开来。这种程序结构通过信号图的无环性得以体现。
- en: But what if the programmer wants to define new signals? For example, say the
    programmer wants to draw *n* buttons to the screen, each of which should have
    its own events, such as `Mouse.clicks` only that it is "local" to the button rather
    the entire window. Well, if the programmer knew exactly what the number *n* is,
    and if Elm provided enough separate button signals (`Button1.clicks`, `Button2.clicks`,
    `Button3.clicks`, etc.), then these primitive signals could be used. But what
    if this number is large, and what if it's not known before running the program?
    For this, we need a way to dynamically generate signals.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果程序员想要定义新的信号呢？例如，假设程序员想要将 *n* 个按钮绘制到屏幕上，每个按钮都应该有自己的事件，例如 `Mouse.clicks`，但它是“本地”于按钮而不是整个窗口。那么，如果程序员确切地知道数字
    *n* 是多少，并且如果 Elm 提供了足够多的单独按钮信号（`Button1.clicks`、`Button2.clicks`、`Button3.clicks`
    等），那么就可以使用这些原始信号。但是如果这个数字很大，而且在运行程序之前是不知道的呢？为此，我们需要一种动态生成信号的方法。
- en: Channels are the solution that Elm provides. They are a separate mechanism than
    signals, and they are impure. Every time the `channel` function is invoked, it
    creates a new pipe in the world that can be used by application components to
    communicate.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通道是Elm提供的解决方案。它们是信号之外的一个单独机制，并且它们是不纯的。每次调用`channel`函数时，它都会在世界中创建一个新的管道，可以被应用程序组件用来通信。
- en: Gasp! We are already breaking outside of the purely functional model? Other,
    more expressive formulations of FRP do not require a separate mechanism like this.
    In these "higher-order" FRP systems, *signals of signals* can be used to encode
    dynamically generated signals. But along with this expressiveness comes other
    challenges, both in design and efficient implementation, that are the subject
    of ongoing research.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！我们已经超出了纯函数模型的范围？FRP的其他更具表现力的表述不需要像这样单独的机制。在这些“高阶”FRP系统中，*信号的信号*可以用来编码动态生成的信号。但是，随着这种表现力的增强，设计和有效实现方面也带来了其他挑战，这些挑战是正在进行研究的主题。
- en: 'In contrast, Elm strikes a balance of "first-order" FRP that prohibits signals
    of signals, and instead provides this separate channel mechanism for the common
    case of dynamically generated buttons and HTML elements that need to respond to
    typical browser events. Once a `Channel` has been created, it can then be converted
    to a `Signal` using the function:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Elm采用了“一阶”FRP的平衡，禁止了信号的信号，而是为常见情况提供了单独的通道机制，用于动态生成的按钮和需要响应典型浏览器事件的HTML元素。一旦创建了`Channel`，它就可以使用函数转换为`Signal`：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Part of the novelty in Elm is that it provides an increasingly practical implementation
    of this language design choice. Time will tell whether the balance it strikes
    is a good fit!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Elm的新颖之处之一在于它提供了对此语言设计选择的日益实用的实现。时间将告诉我们它是否取得了良好的平衡！
- en: Back to Buttons
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回到按钮
- en: Now, going back to the `button` function, we need to define `Signal.Message`s
    (using the [`Signal.send`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Signal)
    function) that will be sent when each button is clicked.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到`button`函数，我们需要定义`Signal.Message`（使用[`Signal.send`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Signal)函数）在每次单击按钮时发送的消息。
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that this function defines a channel (of type `Channel a`) and the message
    (of type `a`) to send upon some request, but this function itself does not "send"
    the message. Instead, the library functions in [`Graphics.Input`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Input)
    (such as `button`) and [`Graphics.Input.Field`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Input-Field)
    that take `Signal.Message`s as arguments are the ones that initiate message sends
    upon certain browser events.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此函数定义了一个通道（类型为`Channel a`）和在某个请求上发送的消息（类型为`a`），但此函数本身不会“发送”消息。相反，以`Signal.Message`作为参数的库函数（如[`Graphics.Input`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Input)中的`button`和[`Graphics.Input.Field`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Input-Field)）是在某些浏览器事件上启动消息发送的函数。
- en: Recall that our `upstate` function above ignored its first argument and simply
    incremented the `State`. So, let's start by defining a `Channel` on which to send
    dummy values, each of which will trigger an update.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请回忆我们上面的`upstate`函数忽略了它的第一个参数，并简单地递增了`State`。所以，让我们从定义一个`Channel`开始，用它发送虚拟值，每个值都会触发更新。
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then, we'll add two buttons to our view that send the dummy message `()` over
    the channel `ch`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将向我们的视图添加两个按钮，这些按钮通过通道`ch`发送虚拟消息`()`。
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finally, we will `subscribe` to `ch` in `main` in order to `upstate` every time
    a message is sent (that is, every time one of the two buttons is clicked).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在`main`中`subscribe`到`ch`以便在每次发送消息时进行`upstate`（也就是说，每次单击其中一个两个按钮时）。
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is a useful checkpoint because we have two "working" buttons. But we clearly
    need to restructure things so that the second button resets the counter rather
    than increments it. To achieve this, we need to distinguish between the two different
    kinds of messages that our buttons may send and define our `upstate` function
    to update the `State` accordingly.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有用的检查点，因为我们有了两个“工作中”的按钮。但我们显然需要重新组织事物，以便第二个按钮重置计数器而不是增加它。为了实现这一点，我们需要区分我们的按钮可能发送的两种不同类型的消息，并定义我们的`upstate`函数来相应地更新`State`。
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Lastly, we need to update the messages that are sent by each button. While we're
    at it, let's also add some space in between the counter and buttons (using [`List.intersperse`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/List)
    and [`E.spacer`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element)).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要更新每个按钮发送的消息。顺便说一句，让我们也在计数器和按钮之间添加一些空间（使用[`List.intersperse`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/List)和[`E.spacer`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element)）。
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now we have a working counter! Check out the [source](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/Buttons0.elm)
    and the [demo](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/Buttons0.html).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个可以工作的计数器了！查看[源代码](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/Buttons0.elm)和[演示](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/Buttons0.html)。
- en: Styling Buttons
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置按钮样式
- en: Having gotten the basic functionality of our counter working, let's now make
    it look better. The function
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 已经让我们的计数器基本功能正常运行了，现在让我们让它看起来更好看一点吧。这个功能
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: in [`Graphics.Input`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Input)
    takes three `Elements` to draw depending on whether the button is up, hovered
    over, or down, respectively. We can make use of this to use different colors for
    each.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Graphics.Input`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Input)中，根据按钮的状态（向上、悬停或向下），需要三个`Elements`来绘制。我们可以利用这一点来使用不同的颜色。
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Calling `myButton` instead of `button` in `view` then renders our slightly fancier
    buttons. This is cool, but the default styles are still not very pretty. It would
    be nice to have borders around the buttons and also change the font style to make
    it more readable. Looking through the type signatures in [`Graphics.Input`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Input),
    [`Graphics.Element`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element)
    and [`Text`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Text), there
    do not seem to be library functions that will do exactly what we want. So, we'll
    have to work with a lower-level "unstructured" graphics library.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在`view`中调用`myButton`而不是`button`然后就会呈现出我们稍微花哨一点的按钮。这很酷，但默认样式仍然不太好看。最好在按钮周围加上边框，并且改变字体样式使其更易读。在[`Graphics.Input`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Input)、[`Graphics.Element`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element)和[`Text`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Text)的类型签名中查找，似乎没有库函数能够完全满足我们的要求。因此，我们必须使用一个更低级别的“无结构”图形库。
- en: Unstructured 2D Graphics
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无结构的2D图形
- en: '`Graphics.Element` has many useful layout functions, but if we want to do more
    freeform drawing, we need to use the [`Graphics.Collage`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Collage)
    library. The working type is a `Form` and there are many ways to create them.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`Graphics.Element`有许多有用的布局函数，但如果我们想要进行更自由的绘图，我们需要使用[`Graphics.Collage`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Collage)库。工作类型是一个`Form`，有许多创建它们的方法。'
- en: Functions like `circle` and `rect` create `Shape` values.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`circle`和`rect`等函数会创建`Shape`值。'
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How do we convert `Shape`s to `Form`s? Searching the documentation for the type
    signature "`Shape -> Form`" reveals several functions, such as `filled` and `outlined`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何将`Shape`转换为`Form`？在文档中搜索类型签名"`Shape -> Form`"可以找到几个函数，比如`filled`和`outlined`。
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once we are done building some `Form`s, how do we convert them to `Element`s
    so that they can be rendered? Ah, searching for the type signature "`Form -> Element`"
    reveals the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了一些`Form`的构建，如何将它们转换为`Element`以便进行渲染呢？啊，搜索类型签名"`Form -> Element`"会发现以下内容：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And what if we have an `Element` that we want to mix into an unstructured graphics
    canvas. Searching for "`Element -> Form`" reveals:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个`Element`想要混入到无结构的图形画布中怎么办呢。搜索"`Element -> Form`"会发现：
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Let's now put some of these tools to use in order to style our counter buttons.
    First, let's use the [`Text`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Text)
    library to format strings more nicely.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们利用一些工具来为我们的计数器按钮添加样式。首先，让我们使用[`Text`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Text)库来更好地格式化字符串。
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Next, let's define a custom line style for drawing borders rather than the default
    one provided called `defaultLineStyle`. These values are described by the [record
    type](http://elm-lang.org/learn/Syntax.elm#records) `LineStyle` that contains
    several parameters. We only want to customize a subset of these parameters, so
    we can use record update syntax to create a new record that is just like `defaultLineStyle`
    except for a couple changes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们为绘制边框定义一个自定义行样式，而不是使用称为 `defaultLineStyle` 的默认样式。这些值由包含多个参数的[记录类型](http://elm-lang.org/learn/Syntax.elm#records)
    `LineStyle` 描述。我们只想自定义其中的一部分参数，因此我们可以使用记录更新语法创建一个新记录，它与 `defaultLineStyle` 几乎相同，只是有一些改变。
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that here we use the let binding `ls` as a workaround, because right now
    the parser allows only a syntactic variable (without a module qualifier, such
    as "`C.`" here) to be used for the record being copied.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这里我们使用了 `ls` 作为一个变通方法，因为目前解析器只允许在复制记录时使用一个语法变量（没有模块限定符，比如这里的 "`C.`"）。
- en: We will now draw custom buttons, but we will define each of the three `Elements`
    using collages rather than ordinary buttons like before.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将绘制自定义按钮，但我们将使用画廊而不是以前的普通按钮来定义每个三个 `Elements`。
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `myButton` function draws a button in three steps: first, the solid color,
    then the border, and then the button label. The list of `Form`s passed to `collage`
    is interpreted to be in increasing z-order, meaning each successive element is
    rendered on top of the previous. As a result, we must put the label after the
    solid rectangle so that it does not get hidden.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`myButton` 函数以三个步骤绘制一个按钮：首先是实心颜色，然后是边框，最后是按钮标签。传递给 `collage` 的 `Form` 列表被解释为按增加的
    z-顺序排列，这意味着每个后续元素都会在前一个元素的顶部呈现。因此，我们必须将标签放在实心矩形之后，这样它就不会被隐藏。'
- en: As a final tweak, let's change the style of the counter display to match our
    buttons. So that the display is centered, we create a container of the same width
    as the buttons and center the text within it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个微调是，让我们改变计数器显示的样式以匹配我们的按钮。为了使显示居中，我们创建一个与按钮宽度相同的容器，并在其中居中文本。
- en: '[PRE21]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[![](../Images/ef4e5a5828c9d15fe7f05bfd1d0ae6f4.jpg)](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/Buttons1.html)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](../Images/ef4e5a5828c9d15fe7f05bfd1d0ae6f4.jpg)](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/Buttons1.html)'
- en: Our counter is now much more stylish than before! Check out the [source](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/Buttons1.elm)
    and the [demo](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/Buttons1.html).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的计数器现在比以前更时尚！查看[源代码](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/Buttons1.elm)和[演示](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/Buttons1.html)。
- en: '"Pure Buttons"'
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '"纯按钮"'
- en: Some of you may not have been able to fully enjoy our button example, due to
    the discussion of channels and impurity earlier. If you have been wondering to
    yourself whether there is some other way, I applaud you for your purity when it
    comes to purity. There is an alternative to using channels to define buttons in
    Elm, but it comes with other major downsides.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于之前讨论了通道和不纯性，你们中的一些人可能无法完全享受我们的按钮示例。如果你一直在想是否有其他方法，我为你在纯度方面的纯洁感鼓掌。在 Elm 中定义按钮的另一种方法，但它也有其他主要缺点。
- en: The idea is to use only primitive mouse signals, and keep track of where buttons
    are in the window manually in our own code. In other words, we can roll our own
    little event system and renderer. This approach will throw out many of the benefits
    provided by the abstractions in [`Graphics.Element`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element).
    But, we could follow this approach if we are really determined. We will work through
    part of what it would is required to implement the counter application using "pure"
    buttons.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是只使用原始鼠标信号，并手动在我们自己的代码中跟踪窗口中的按钮位置。换句话说，我们可以自己编写一个小的事件系统和渲染器。这种方法将放弃[`Graphics.Element`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Element)中提供的许多抽象的好处。但是，如果我们真的下决心，我们可以遵循这种方法。我们将解决实现计数器应用程序所需的部分内容。
- en: Whenever the mouse is clicked, we need to determine whether its position is
    within a "button" or not. So we will have to keep track of the button's boundaries
    (in pixels). In addition to the counter, let's display the position of the last
    click for development purposes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每当鼠标被点击时，我们需要确定其位置是否在一个“按钮”内。因此，我们必须跟踪按钮的边界（以像素为单位）。除了计数器，为了开发目的，让我们显示最后一次点击的位置。
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The positions reported by `Mouse.positions` treat `(0,0)` as the upper-left
    corner of the window, so we use negative x- and y-values to denote the initial
    state when there have been no clicks.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mouse.positions`报告的位置将`(0,0)`视为窗口的左上角，因此我们使用负的x和y值来表示没有点击时的初始状态。'
- en: For simplicity, let's position the counter display and buttons in the upper-left
    corner one on top of the other with no space in between. This will simplify our
    pixel calculuations. After defining the width and height of our display and buttons,
    we can then update the counter in `State` only if the click appears within the
    boundaries of a "button."
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，让我们将计数器显示和按钮放在左上角，彼此之间没有间隔。这将简化我们的像素计算。在定义了显示和按钮的宽度和高度之后，我们可以仅在点击出现在“按钮”的边界内时才在`State`中更新计数器。
- en: '[PRE23]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We then set up the controller to trigger updates based on changes in the most
    recent mouse click position.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们设置控制器以根据最近鼠标点击位置的更改触发更新。
- en: '[PRE24]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Lastly, the view. When using the [`Graphics.Collage`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Collage)
    library, it is important to realize that the coordinate system for `collage` is
    centered in the middle of the collage, and `move` (supplied with positive arguments)
    translates `Shapes` in a collage up and to the right. (You probably discovered
    this on your own while working through Homework 1.)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是视图。在使用[`Graphics.Collage`](http://package.elm-lang.org/packages/elm-lang/core/1.0.0/Graphics-Collage)库时，重要的是要意识到`collage`的坐标系是以collage的中心为中心，而`move`（提供正参数）会将`Shapes`在collage中向上和向右移动。（在完成作业1时，您可能已经自己发现了这一点。）
- en: Here's a really quick-and-dirty rendering of the counter and buttons that takes
    these two factors into account.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常快速粗糙的计数器和按钮的渲染，考虑到这两个因素。
- en: '[PRE25]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here is the [source](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/PureButtons.elm)
    and [demo](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/PureButtons.html).
    For fun, you may want to continue down this path and implement the entire application
    from before in the `Channel`-less style. If you do, take a moment to reflect on
    whether your views have become any less pure.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[源代码](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/PureButtons.elm)和[演示](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Buttons/PureButtons.html)。为了好玩，您可能希望继续沿着这条路继续实现之前的整个应用程序，采用无`Channel`风格。如果您这样做了，请花点时间思考一下您的视图是否变得不那么纯粹。
