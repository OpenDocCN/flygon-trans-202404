- en: Lesson 11 Intro
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11课简介
- en: Metacircular Evaluator
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元循环评估器
- en: Do you remember Racket-1/Scheme-1 in Lesson 6? Now it's time to explore how
    Racket and Scheme evaluate expressions!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得第6课中的Racket-1/Scheme-1吗？现在是时候探索Racket和Scheme如何评估表达式了！
- en: 'You can download the code for this lesson by typing the following into your
    terminal:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在终端中键入以下内容来下载本课程的代码：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code is also online [here](http://inst.eecs.berkeley.edu/~cs61as/library/mceval.scm)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 代码也可以在线查看[这里](http://inst.eecs.berkeley.edu/~cs61as/library/mceval.scm)
- en: Prerequisites and What to Expect
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件和期望
- en: A good understanding of how Racket-1/Scheme-1 works will be helpful in this
    chapter. You should also be comfortable with the environment model of evaluation
    from Lesson 8. The material covered in this lesson will be quite different from
    the other material covered so far, so be prepared!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对Racket-1/Scheme-1如何工作有一个良好的理解将有助于本章。你还应该熟悉第8课中的评估环境模型。本课程涵盖的材料将与迄今为止涵盖的其他材料有很大不同，所以要做好准备！
- en: Readings
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读材料
- en: 'These are the relevant readings for this lesson:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是本课程的相关阅读材料：
- en: '[SICP Intro to Chapter 4](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-25.html)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SICP第4章简介](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-25.html)'
- en: '[SICP 4.1.1-6](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SICP 4.1.1-6](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html)'
- en: '[Lectures Notes](http://www-inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=78)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[讲座笔记](http://www-inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=78)'
- en: What Is An Evaluator?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是评估器？
- en: So far, we have learned how to write procedures that output what we want. Once
    we define those procedures and type them in the Scheme prompt, we get the value.
    But have you wondered how those procedures actually get evaluated and work in
    Scheme? How does Scheme know what the expression means? This is what an **evaluator**
    does.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何编写输出我们想要的过程。一旦我们定义了这些过程并在Scheme提示符中键入它们，我们就得到了值。但是你是否想过这些过程实际上是如何被评估和在Scheme中工作的？Scheme如何知道表达式的含义？这就是**评估器**的作用。
- en: An **evaluator** (or **interpreter**) for a programming language is a procedure
    that, when applied to an expression of the language, performs the actions required
    to evaluate that expression.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**评估器**（或**解释器**）用于编程语言是一个过程，当应用于语言的表达式时，执行评估该表达式所需的操作。
- en: '*Wait, what? The evaluator is just a procedure?*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*等等，什么？评估器只是一个过程？*'
- en: Yes, it is. The evaluator is just another program!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，就是这样。评估器只是另一个程序！
- en: What is the Metacircular Evaluator?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是元循环评估器？
- en: '![](http://mitpress.mit.edu/sicp/full-text/sicp/book/chapter-4/figs/eval- apply.gif)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](http://mitpress.mit.edu/sicp/full-text/sicp/book/chapter-4/figs/eval- apply.gif)'
- en: Our evaluator for Scheme will be implemented as a Scheme program. It may seem
    circular to think about evaluating Scheme programs using an evaluator that is
    itself implemented in Scheme. However, evaluation is a process, so it is appropriate
    to describe the evaluation process using Scheme, which, after all, is our tool
    for describing processes. An evaluator that is written in the same language that
    it evaluates is said to be metacircular.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为Scheme编写的评估器将作为一个Scheme程序实现。考虑到使用一个在Scheme中实现的评估器来评估Scheme程序可能看起来循环。然而，评估是一个过程，因此用Scheme来描述评估过程是合适的，毕竟，Scheme是我们描述过程的工具。用相同语言编写的评估器来评估自身的语言被称为元循环。
- en: 'The metacircular evaluator is essentially a Scheme formulation of the environment
    model of evaluation described in Lesson 8\. Recall that the model has two basic
    parts:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 元循环评估器本质上是在第8课中描述的评估环境模型的Scheme公式。回想一下，该模型有两个基本部分：
- en: To evaluate a combination (a compound expression other than a special form),
    evaluate the subexpressions and then apply the value of the operator subexpression
    to the values of the operand subexpressions.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要评估一个组合（一个除了特殊形式之外的复合表达式），需要评估子表达式，然后将运算子子表达式的值应用于操作数子表达式的值。
- en: To apply a compound procedure to a set of arguments, evaluate the body of the
    procedure in a new environment. To construct this environment, extend the environment
    part of the procedure object by a frame in which the formal parameters of the
    procedure are bound to the arguments to which the procedure is applied.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将一个复合过程应用于一组参数，需要在一个新环境中评估过程的主体。为了构建这个环境，需要通过一个框架扩展过程对象的环境部分，其中过程的形式参数绑定到过程应用的参数。
- en: These two rules describe the essence of the evaluation process, a basic cycle
    in which expressions to be evaluated in environments are reduced to procedures
    to be applied to arguments, which in turn are reduced to new expressions to be
    evaluated in new environments, and so on, until we get down to symbols, whose
    values are looked up in the environment, and to primitive procedures, which are
    applied directly. This evaluation cycle will be embodied by the interplay between
    the two critical procedures in the evaluator, `eval` and `apply`. We will go through
    the details of `eval` and `apply` soon.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这两条规则描述了评估过程的本质，一个基本循环，在这个循环中，要在环境中评估的表达式被简化为要应用于参数的过程，然后又被简化为要在新环境中评估的新表达式，依此类推，直到我们到达符号，其值在环境中查找，以及原始过程，这些过程直接应用。这个评估循环将由评估器中两个关键过程
    `eval` 和 `apply` 之间的互动体现出来。我们将很快详细介绍 `eval` 和 `apply`。
- en: The implementation of the evaluator will depend upon procedures that define
    the syntax of the expressions to be evaluated. We will use data abstraction to
    make the evaluator independent of the representation of the language. For example,
    rather than committing to a choice that an assignment is to be represented by
    a list beginning with the symbol `set!` we use an abstract predicate `assignment?`
    to test for an assignment, and we use abstract selectors `assignment-variable`
    and `assignment-value` to access the parts of an assignment. We will learn the
    implementation of expressions and operations that specify the representation of
    procedures and environments. For example, `make-procedure` constructs compound
    procedures, `lookup-variable-value` accesses the values of variables, and `apply-primitive-procedure`
    applies a primitive procedure to a given list of arguments.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 评估器的实现将依赖于定义要评估的表达式的语法的过程。我们将使用数据抽象使评估器独立于语言的表示。例如，我们不会选择将赋值表示为以符号 `set!` 开头的列表，而是使用抽象谓词
    `assignment?` 来测试赋值，并使用抽象选择器 `assignment-variable` 和 `assignment-value` 来访问赋值的部分。我们将学习表达式和操作的实现，这些操作指定了过程和环境的表示。例如，`make-procedure`
    构造复合过程，`lookup-variable-value` 访问变量的值，`apply-primitive-procedure` 将原始过程应用于给定的参数列表。
- en: Takeaways
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: 'In this subsection, you learned:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个小节中，你学到了：
- en: The definition of evaluator
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估器的定义
- en: The definition of metacircular evaluator
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 元循环评估器的定义
- en: What's Next?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: Now it's time to understand how Scheme actually works! Exciting!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候了解 Scheme 是如何实际工作的！令人兴奋！
