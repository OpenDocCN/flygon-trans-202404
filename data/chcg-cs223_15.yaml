- en: Queues
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 队列
- en: The `Queue` abstraction employs a First-In-First-Out (FIFO) policy for removing
    ("dequeing") elements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`Queue`抽象使用先进先出（FIFO）策略来移除（“出列”）元素。'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Without having *O(1)* time access to the last element in a `List`, special care
    must be taken to provide efficient `Queue` operations in a purely functional language.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有*O(1)*时间访问`List`中最后一个元素的情况下，在纯函数语言中提供高效的`Queue`操作需要特别注意。
- en: First Attempt — [`SlowQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/SlowQueue.elm)
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一次尝试 — [`SlowQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/SlowQueue.elm)
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Running times:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时间：
- en: '`enqueue` : *Θ(n)*'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enqueue` : *Θ(n)*'
- en: '`dequeue` : *O(1)*'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dequeue` : *O(1)*'
- en: '`peek` : *O(1)*'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`peek` : *O(1)*'
- en: Second Attempt — [`AnotherSlowQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/AnotherSlowQueue.elm)
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二次尝试 — [`AnotherSlowQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/AnotherSlowQueue.elm)
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Running times:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时间：
- en: '`enqueue` : *O(n)*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enqueue` : *O(n)*'
- en: '`dequeue` : *O(n)*'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dequeue` : *O(n)*'
- en: '`peek` : *O(n)*'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`peek` : *O(n)*'
- en: Third Attempt — [`MediumQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/MediumQueue.elm)
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第三次尝试 — [`MediumQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/MediumQueue.elm)
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Running times:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时间：
- en: '`enqueue` : *O(1)*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enqueue` : *O(1)*'
- en: '`dequeue` : *O(n)*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dequeue` : *O(n)*'
- en: '`peek` : *O(n)*'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`peek` : *O(n)*'
- en: Final Version — [`FastQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/FastQueue.elm)
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最终版本 — [`FastQueue.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Queues/FastQueue.elm)
- en: Same representation `Q {front, back}` as previous version, but with the invariant
    `front = []` implies `back = []`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一个版本相同的表示`Q {front, back}`，但具有不变性`front = []`意味着`back = []`。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can factor out a common pattern from `enqueue` and `dequeue`. Notice that
    arguments `f` and `b` to `checkFront` do *not* necessarily satisfy the invariant,
    but the output `Queue` does.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从`enqueue`和`dequeue`中提取出一个共同的模式。注意到`checkFront`的参数`f`和`b`不一定满足不变性，但输出的`Queue`满足。
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Running times:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时间：
- en: '`enqueue` : *O(1)*'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enqueue` : *O(1)*'
- en: '`dequeue` : *O(n)*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dequeue` : *O(n)*'
- en: '`peek` : *O(1)*'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`peek` : *O(1)*'
- en: The worst-case bound for `dequeue` does not tell the whole story, however, since
    it often runs in *O(1)* time and only occasionally runs in *O(n)* time. Using
    amortized asymptotic analysis, we will be able to argue that `dequeue` runs in
    *O(1)* on average.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`dequeue`的最坏情况边界并不能完全说明问题，因为它通常在*O(1)*时间内运行，只偶尔在*O(n)*时间内运行。通过摊销渐近分析，我们将能够证明`dequeue`平均运行时间为*O(1)*。
- en: Reading
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: Required
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 必需的
- en: Okasaki, Chapter 5.2
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Okasaki，第5.2章
