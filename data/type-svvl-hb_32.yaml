- en: ジェネリクス (generics)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 泛型 (generics)
- en: 原文：[https://typescriptbook.jp/reference/generics](https://typescriptbook.jp/reference/generics)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/reference/generics](https://typescriptbook.jp/reference/generics)
- en: 型の安全性とコードの共通化の両立は難しいものです。あらゆる型で同じコードを使おうとすると、型の安全性が犠牲になります。逆に、型の安全性を重視しようとすると、同じようなコードを量産する必要が出てコードの共通化が達成しづらくなります。こうした問題を解決するために導入された言語機能がジェネリクスです。ジェネリクスを用いると、**型の安全性とコードの共通化を両立する**ことができます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时实现类型的安全性和代码的通用化是困难的。当尝试在所有类型上使用相同的代码时，类型的安全性会受到损害。相反，如果重视类型的安全性，就需要大量重复类似的代码，从而难以实现代码的通用化。为解决这些问题，引入了泛型这一语言特性。使用泛型，可以**同时实现类型的安全性和代码的通用化**。
- en: ジェネリクスが解決する問題[​](#ジェネリクスが解決する問題 "ジェネリクスが解決する問題 への直接リンク")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决的问题[​](#ジェネリクスが解決する問題 "ジェネリクスが解決する問題 への直接リンク")
- en: ジェネリクスが具体的にどのような問題を解決するのか見ていきましょう。ここに、`chooseRandomlyString()`という普通の関数があります。この関数は、2つの文字列を引数に受け取り、五分五分の確率で第1引数か第2引数の値を抽選して返します。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们具体看看泛型是如何解决问题的。这里有一个名为`chooseRandomlyString()`的普通函数。该函数接受两个字符串作为参数，并以五五开的概率返回第一个参数或第二个参数的值。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`chooseRandomlyString`は文字列の抽選に限っては、この関数を再利用していくことができます。'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`chooseRandomlyString`仅限于字符串的抽选时，可以重复使用这个函数。'
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 次に、文字列だけでなく数値の抽選も同じロジックで行う必要が出てきたと考えてみましょう。`chooseRandomlyString()`は文字列にしか対応していないので、数値用の関数を新設しないとなりません。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们考虑一下不仅仅是字符串，还需要进行数字抽选的情况。由于`chooseRandomlyString()`仅支持字符串，因此需要新增一个专门用于数字的函数。
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: さらに、五分五分抽選のロジックは汎用的なので、広告のA/Bテストのために`URL`オブジェクト向けの実装も作ることになりました。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，五五开的抽选逻辑是通用的，所以我们还需要为`URL`对象创建一个实现以进行广告A/B测试。
- en: '[PRE6]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ここまでで、`chooseRandomly()`関数は二度複製され、型だけが異なる同じ関数が3つもできてしまいました。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经复制了`chooseRandomly()`函数两次，并创建了三个类型不同的相同函数。
- en: '[PRE8]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: では、コードを共通化するにはどうしたらいいのでしょうか？まず考えられる方法としては、型を`any`にしてしまう方法です。この方法の問題点としては、戻り値の型も`any`になってしまうため、コンパイラのチェックが行われなくなり、バグを生みやすくなることです。つまり、型の安全性が損なわれるということです。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，要想实现代码的通用化，应该怎么做呢？首先可以考虑的方法是将类型设为`any`。这种方法的问题在于，返回值的类型也会变为`any`，因此编译器不再进行检查，容易产生错误。换句话说，就是牺牲了类型的安全性。
- en: '下のサンプルコードでは、`chooseRandomly()`に`number`型を渡していますが、戻り値は`string`型のつもりで扱っています。このコードはコンパイルエラーにはなりませんが、コンパイル後のコードを実行してみると5行目で「TypeError:
    str.toLowerCase is not a function」というエラーが発生します。'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '在下面的示例代码中，我们将`number`类型传递给了`chooseRandomly()`，但实际上我们打算将返回值视为`string`类型处理。尽管这段代码不会导致编译错误，但在运行编译后的代码时，会在第5行报错：“TypeError:
    str.toLowerCase is not a function”。'
- en: '[PRE10]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: コードの共通化と型の安全性の両方を達成するにはどうしたらいいのでしょうか？ここで、役に立つのがジェネリクスです。ジェネリクスの発想は実はとてもシンプルで、「型も変数のように扱えるようにする」というものです。どういうことでしょうか？先に取り上げた重複した3つの関数を「どの部分がそれぞれ異なっているのか？」という視点で見てみましょう。すると、次のように`<>`で強調した部分が違うことに気がつくはずです。それ以外はまったく同じコードです。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时实现代码的通用化和类型的安全性，应该怎么做呢？这时就要依赖泛型了。其实，泛型的概念非常简单，即“将类型视为变量”。这是什么意思呢？让我们以“这三个重复的函数有何不同？”的角度来看待先前提到的问题。你可能会想到，除了用`<>`突出显示的部分不同外，其他部分都是相同的代码。
- en: '[PRE12]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: このそれぞれ違う部分は型に関するところです。この部分を変数のように扱いたいとしたら、ジェネリクスの文法を知らなくても、プログラマーなら次のようなコードを想像するのではないでしょうか？
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不同的部分都涉及到类型。如果想要将这些部分视为变量，那么即使不了解泛型的语法，作为程序员也应该能够想象出以下代码吧？
- en: '[PRE14]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`<type>`に置き換えたところが「型の引数」を表した部分です。値の引数と同様に、この例では型も引数なので`chooseRandomly()`関数を呼び出すときは、`chooseRandomly<string>`のように型を関数に渡します。型をまるで引数のように扱ったコードがここで誕生したわけです。「ジェネリクスは、型も変数のように扱えるようにすること」だと説明しましたが、もうその意味がお分かりなのではないでしょうか。'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`<type>`被替换成了表示“类型参数”的部分。与值参数一样，在这个例子中，将类型作为参数传递给函数时，应该像`chooseRandomly<string>`一样传递类型。通过将类型视为参数，就产生了如下代码。解释过“泛型是将类型视为变量”的意思后，您现在应该明白了吧。'
- en: 上のコードは、あくまでジェネリクスの発想を理解するためにでっち上げた架空のコードでした。このままではTypeScriptは理解できないので、TypeScriptのジェネリクスの文法で書き直してみましょう。架空のコードともそこまでかけ離れてはいません。次のように書きます。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码只是为了理解泛型的概念而虚构的代码。现在，我们将其改写为TypeScript泛型的语法。这些代码并非纯属虚构。可以这样写：
- en: '[PRE16]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`chooseRandomly`の`<T>`は型変数名の定義です。慣習として`T`がよく使われますが、`A`でも`Type`でも構いません。関数の引数の型や戻り値の型として書かれた`T`は型変数を参照しています。'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`<T>`在`chooseRandomly`中是类型变量的定义。通常情况下，`T`被广泛使用，但也可以使用`A`或`Type`等。在函数的参数类型和返回值类型中写的`T`是引用类型变量。'
- en: 先ほどコンパイル時には気づけなかったバグコードに、ジェネリクス化した`chooseRandomly`を使ってみましょう。すると、「Argument of
    type '0' is not assignable to parameter of type 'string'.」というコンパイルエラーが発生するようになり、`string`型を入れなければならないところに`0`を代入しているバグに気づくことができるようになりました。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用泛型化的`chooseRandomly`来重新编写之前在编译时无法察觉的错误代码。这样做后，会出现编译错误：“Argument of
    type '0' is not assignable to parameter of type 'string'.”，这样就能发现错误地将`0`赋给了应该接受`string`类型的地方。
- en: '[PRE18]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: これまでで、ジェネリックではない関数たちを共通化した上で、さらに型の安全性を確保していく過程を見ながら、ジェネリクスが解決する問題点について説明してきました。ジェネリクスはコードの共通化と型の安全性を両立してくれる言語機能です。汎用的なコードをさまざまな型で使えるようにしたい際に、ジェネリクスを使うことを考えてみてください。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述的例子，我们已经了解了在将非泛型函数通用化的同时，如何确保类型的安全性。泛型是一种能够同时实现代码的通用化和类型的安全性的语言特性。在希望能够在多种类型上使用通用代码时，可以考虑使用泛型。
- en: まとめ[​](#まとめ "まとめ への直接リンク")
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结[​](#まとめ "まとめ への直接リンク")
- en: コードの共通化すると、型の安全性が弱まる。
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果通用化代码，类型的安全性就会降低。
- en: 型の安全性を高めると、コードの共通化が難しくなる。
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 型的安全性提高了，代码的通用化就变得困难。
- en: ジェネリクスは、コードの共通化と型の安全性を両立するための言語機能。
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 泛型既能实现代码的通用化，又能保证类型的安全性。
- en: ジェネリクスは、型も引数のように扱うという発想。
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 泛型的概念是将类型也视为参数。
