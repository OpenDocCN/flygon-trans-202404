- en: Dynamic versus Lexical ScopeTuesday, February 7th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态与词法作用域 Tuesday, February 7th
- en: 'And back to the discussion of whether we should use dynamic or lexical scope:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 再回到动态或词法作用域的讨论：
- en: 'The most important fact is that we want to view programs as executed by the
    normal substituting evaluator. Our original motivation was to optimize evaluation
    only — not to *change* the semantics! It follows that we want the result of this
    optimization to behave in the same way. All we need is to evaluate:'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最重要的事实是，我们希望将程序视为由正常的替换求值器执行。我们最初的动机是仅优化评估 - 而不是*更改*语义！由此可见，我们希望此优化的结果行为方式相同。我们只需要评估：
- en: '[PRE0]'
  id: totrans-3
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: in the original evaluator to get convinced that `7` should be the correct result
    (note also that the same code, when translated into Racket, evaluates to `7`).
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在原始求值器中，以确信`7`应该是正确的结果（还要注意，相同的代码在转换为 Racket 时评估为`7`）。
- en: (Yet, this is a very important optimization, which without it lots of programs
    become too slow to be feasible, so you might claim that you’re fine with the modified
    semantics…)
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （然而，这是一个非常重要的优化，没有它很多程序变得太慢而不可行，所以你可能会声称你对修改后的语义很满意...）
- en: 'It does not allow using functions as objects, for example, we have seen that
    we have a functional representation for pairs:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不允许将函数用作对象，例如，我们已经看到我们对于对（pairs）有一个函数表示：
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If this is evaluated in a dynamically-scoped language, we do get a function
    as a result, but the values bound to `x` and `y` are now gone! Using the substitution
    model we substituted these values in, but now they were only held in a cache which
    no has no entries for them…
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在动态作用域语言中评估这个，我们会得到一个函数作为结果，但绑定到`x`和`y`的值现在消失了！使用替换模型我们替换了这些值，但现在它们只存在于一个不再有任何条目的缓存中...
- en: In the same way, currying would not work, our nice `deriv` function would not
    work etc etc etc.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样，柯里化也不起作用，我们漂亮的`deriv`函数也不起作用等等等等。
- en: 'Makes reasoning impossible, because any piece of code behaves in a way that
    *cannot* be predicted until run-time. For example, if dynamic scoping was used
    in Racket, then you wouldn’t be able to know what this function is doing:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使推理变得不可能，因为任何一段代码的行为方式*在运行时*是无法预测的。例如，如果在 Racket 中使用动态作用域，则无法知道此函数在做什么：
- en: '[PRE2]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As it is, it will cause a run-time error, but if you call it like this:'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前，它将导致运行时错误，但如果您这样调用它：
- en: '[PRE3]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'then it will return `1`, and if you later do this:'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后它将返回`1`，如果您稍后执行此操作：
- en: '[PRE4]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: then you would get `2`!
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后你会得到`2`！
- en: 'These problems can be demonstrated in Emacs Lisp too, but Racket goes one step
    further — it uses the same rule for evaluating a function as well as its values
    (Lisp uses a different name-space for functions). Because of this, you cannot
    even rely on the following function:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些问题在 Emacs Lisp 中也可以演示，但 Racket 更进一步 - 它使用相同的规则来评估函数及其值（Lisp 使用不同的名称空间来表示函数）。因此，您甚至不能依赖以下函数：
- en: '[PRE5]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'to always add `x` and `y`! — A similar example to the above:'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总是添加`x`和`y`！ - 与上述类似的例子：
- en: '[PRE6]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: would return `-1`!
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将返回`-1`！
- en: Many so-called “scripting” languages begin their lives with dynamic scoping.
    The main reason, as we’ve seen, is that implementing it is extremely simple (no,
    *nobody* does substitution in the real world! (Well, *almost* nobody…)).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多所谓的“脚本”语言以动态作用域开始它们的生活。正如我们所见，主要原因是实现它非常简单（不，*在现实世界中没有人*做替换！（好吧，*几乎*没有人...））。
- en: Another reason is that these problems make life impossible if you want to use
    functions as object like you do in Racket, so you notice them very fast — but
    in a `normal` language without first-class functions, problems are not as obvious.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个原因是，如果你想在像 Racket 中一样使用函数作为对象，那么这些问题将使生活变得不可能，所以你会很快注意到它们 - 但在一个没有一等函数的“普通”语言中，问题并不那么明显。
- en: 'For example, bash has `local` variables, but they have dynamic scope:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，bash 有`local`变量，但它们具有动态作用域：
- en: '[PRE7]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Perl began its life with dynamic scope for variables that are declared `local`:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Perl 以对于声明为`local`的变量具有动态作用域开始其生活：
- en: '[PRE8]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When faced with this problem, “the Perl way” was, obviously, not to remove or
    fix features, but to pile them up — so `local` *still* behaves in this way, and
    now there is a `my` declaration which achieves proper lexical scope (and every
    serious Perl programmer knows that you should always use `my`)…
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 面对这个问题，“Perl 的方式”显然不是删除或修复功能，而是堆叠它们 - 所以`local`仍然以这种方式行为，现在有了一个`my`声明，它实现了适当的词法作用域（每个严肃的
    Perl 程序员都知道你应该始终使用`my`）...
- en: There are other examples of languages that changed, and languages that want
    to change (e.g, nobody likes dynamic scope in Emacs Lisp, but there’s just too
    much code now).
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有其他一些语言的示例发生了变化，以及希望发生变化的语言（例如，没有人喜欢Emacs Lisp中的动态作用域，但现在已经有太多的代码了）。
- en: 'This is still a tricky issue, like any other issue with bindings. For example,
    googling got me quickly to [a Python blog post](http://www.hetland.org/python/instant-python.php)
    which is confused about what “dynamic scoping” is… It claims that Python uses
    dynamic scope (Search for “Python uses dynamic as opposed to lexical scoping”),
    yet python always used lexical scope rules, as can be seen by translating their
    code to Racket (ignore side-effects in this computation):'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这仍然是一个棘手的问题，就像任何与绑定相关的问题一样。例如，我很快就通过搜索找到了[一篇关于Python的博文](http://www.hetland.org/python/instant-python.php)，其中对“动态作用域”是什么感到困惑...
    它声称Python使用动态作用域（搜索“Python uses dynamic as opposed to lexical scoping”），但Python始终使用词法作用域规则，可以通过将它们的代码转换为Racket来看到（在此计算中忽略副作用）：
- en: '[PRE9]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'or by trying this in Python:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者尝试在Python中执行此操作：
- en: '[PRE10]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The real problem of python (pre 2.1, and pre 2.2 without the funny
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Python的真正问题（2.1之前，以及没有这个有趣的 '
- en: '[PRE11]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: line) is that it didn’t create closures, which we will talk about shortly.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 行）是它没有创建闭包，我们很快会谈论到。
- en: 'Another example, which is an indicator of how easy it is to mess up your scope
    is the following Ruby bug — running in `irb`:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个示例，表明容易搞乱你的作用域的是以下Ruby bug — 在`irb`中运行：
- en: '[PRE12]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: (This is a bug due to weird scoping rules for variables, which was fixed in
    newer versions of Ruby. See [this Ruby rant](http://innig.net/software/ruby/closures-in-ruby)
    for details, or read about [Ruby and the principle of unwelcome surprise](http://ceaude.twoticketsplease.de/articles/ruby-and-the-principle-of-unwelcome-surprise.html)
    for additional gems.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （这是由于变量的奇怪作用域规则而导致的错误，这在较新版本的Ruby中已修复。有关详细信息，请参阅[此处的Ruby rant](http://innig.net/software/ruby/closures-in-ruby)，或阅读有关[Ruby和不受欢迎惊喜原则](http://ceaude.twoticketsplease.de/articles/ruby-and-the-principle-of-unwelcome-surprise.html)的其他宝石。
- en: Another thing to consider is the fact that compilation is something that you
    do based only on the lexical structure of programs, since compilers never actually
    run code. This means that dynamic scope makes compilation close to impossible.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一件要考虑的事情是编译是基于程序的词法结构进行的，因为编译器实际上从不运行代码。这意味着动态作用域使得编译几乎不可能。
- en: 'There are some advantages for dynamic scope too. Two notable ones are:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态作用域也有一些优点。两个值得注意的优点是：
- en: Dynamic scope makes it easy to have a “configuration variable” easily change
    for the extend of a calling piece of code (this is used extensively in Emacs,
    for example). The thing is that usually we want to control which variables are
    “configurable” in this way, statically scoped languages like Racket often choose
    a separate facility for these. To rephrase the problem of dynamic scoping, it’s
    that *all* variables are modifiable.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态作用域使得在调用代码片段的范围内轻松地改变“配置变量”变得容易（例如，在Emacs中广泛使用）。问题在于通常我们希望控制以这种方式“可配置”的变量，而词法作用域语言通常选择了一个单独的工具来处理这些问题。换句话说，动态作用域的问题在于
    *所有* 变量都是可修改的。
- en: 'The same can be said about functions: it is sometimes desirable to change a
    function dynamically (for example, see “Aspect Oriented Programming”), but if
    there is no control and all functions can change, we get a world where no code
    can every be reliable.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对函数也可以说同样的话：有时候动态更改函数是可取的（例如，参见“面向方面的编程”），但如果没有控制，而且所有函数都可以更改，那么我们将得到一个没有代码可以可靠的世界。
- en: It makes recursion immediately available — for example,
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使递归立即可用 - 例如，
- en: '[PRE13]'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: is an infinite loop with a dynamically scoped language. But in a lexically scoped
    language we will need to do some more work to get recursion going.
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是一个在动态作用域语言中的无限循环。但在词法作用域语言中，我们需要做更多工作来使递归正常运行。
