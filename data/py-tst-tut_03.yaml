- en: Unit Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit Tests
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'Exercise 1: Test a Python function'
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 1：测试 Python 函数
- en: The function **main()** in the module **word_counter.py** calculates the number
    of words in a text body.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 模块**word_counter.py**中的函数**main()**计算文本主体中的单词数。
- en: 'For instance, the following sentence contains **three** words:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下句子包含**三**个单词：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Your task is to prove that the **TextCorpus** class calculates the number of
    words in the sentence correctly with **three**.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你的任务是证明**TextCorpus**类正确计算了句子中的单词数为**三**。
- en: Run the example test in **test_unit_test.py** with
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 运行**test_unit_test.py**中的示例测试
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Exercise 2: Test proves if code is broken'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 2：测试证明代码是否有问题
- en: The test in the module **test_failing_code.py** fails, because there is a bug
    in the function **word_counter.average_word_length()**. In the sentence
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 模块**test_failing_code.py**中的测试失败了，因为函数**word_counter.average_word_length()**中有一个错误。在句子中
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The words are **four, two,** and **seven** characters long. This gives an average
    of:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些单词分别为**四、二**和**七**个字符长。这给出了一个平均值：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Fix the code in `test_broken_code.py`, so that the test passes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 修复`test_broken_code.py`中的代码，使测试通过。
- en: 'Exercise 3: Code proves if tests are broken'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 3：代码证明测试是否有问题
- en: The test in the module **test_broken_test.py** fails, because there is a bug
    in the test file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 模块**test_broken_test.py**中的测试失败了，因为测试文件中存在一个错误。
- en: Your task is to fix the test, so that the test passes. Use the example in **test_broken_test.py**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你的任务是修复测试，使测试通过。使用**test_broken_test.py**中的示例。
- en: 'Exercise 4: Test border cases'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4：测试边界情况
- en: 'High quality tests cover many different situations. The most common situations
    for the program **word_counter.py** include:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 高质量的测试涵盖了许多不同的情况。程序**word_counter.py**最常见的情况包括：
- en: '| test case | description | example input | expected output |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 测试用例 | 描述 | 示例输入 | 预期输出 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| empty | input is valid, but empty | "" | 0 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 空 | 输入有效，但为空 | "" | 0 |'
- en: '| minimal | smallest reasonable input | "whale" | 1 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 最小 | 最小合理输入 | "鲸鱼" | 1 |'
- en: '| typical | representative input | "whale eats captain" | 3 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 典型 | 代表性输入 | "鲸鱼吃船长" | 3 |'
- en: '| invalid | input is supposed to fail | 777 | *Exception raised* |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 无效 | 输入应该失败 | 777 | *引发异常* |'
- en: '| maximum | largest reasonable input | *Melville''s entire book* | *more than
    200000* |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 最大 | 最大的合理输入 | *梅尔维尔的整本书* | *超过 200000* |'
- en: '| sanity | program recycles its own output | *TextBody A created from another
    TextBody B* | *A equals B* |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 理智 | 程序重复利用自己的输出 | *从另一个文本正文 B 创建的 TextBody A* | *A 等于 B* |'
- en: '| nasty | difficult example | "That #~&%* program still doesn''t work!" | 6
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 恶毒 | 困难的例子 | "那个 #~&%* 程序仍然不工作！" | 6 |'
- en: Your task is to make all tests in **test_border_cases.py** pass.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你的任务是使**test_border_cases.py**中的所有测试都通过。
