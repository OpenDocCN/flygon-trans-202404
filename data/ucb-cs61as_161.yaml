- en: Mapreduce
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mapreduce
- en: Introduction to Mapreduce
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mapreduce简介
- en: In this section, we will revisit higher order functions from Unit 2 (`map` and
    `accumulate`) and combine it with parallelism which enables us to process a huge
    amount of data efficiently.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将重新访问第2单元的高阶函数（`map`和`accumulate`）并将其与并行性结合起来，从而使我们能够高效地处理大量数据。
- en: Background to Mapreduce
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mapreduce背景
- en: Engineers in Google noticed that a majority of their computations could be broken
    down into a `map` of some function over data, followed by an `accumulate` (also
    known as `reduce`, hence the name) afterwards. The result is a library procedure
    named `mapreduce` that takes two functions as arguments; one that acts as a `mapper`
    and another that acts as a `reducer`. It accepts a large chunk of data, divide
    them into smaller parts, apply the `mapper` to the smaller sized data and combines
    the results with a `reducer`. Mapreduce handles everything related to parallelism,
    and we only have to provide the 2 functions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Google的工程师们注意到他们的大部分计算可以分解为对数据的某个函数的`map`，然后是之后的`accumulate`（也称为`reduce`，因此得名）。结果是一个名为`mapreduce`的库过程，它接受两个函数作为参数；一个充当`mapper`，另一个充当`reducer`。它接受大量数据，将它们分成较小的部分，将`mapper`应用于较小的数据，并使用`reducer`组合结果。Mapreduce处理与并行性有关的一切，我们只需提供这两个函数。
- en: 'Although this may *seem* like what `mapreduce` is doing, this is **not** `mapreduce`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这可能*看起来*像`mapreduce`正在做的事情，但这**不是**`mapreduce`：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Why is that not mapreduce? Because it doesn''t handle dividing the data, applying
    the mapper parallelism and sorting them before reducing them. What it gets right
    though is that whoever wants to use mapreduce only needs to pass four arguments:
    `mapper, reducer, base-case` and the `data`we want to process to the `mapreduce`
    function.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不是mapreduce呢？因为它没有处理数据的划分，应用映射器并行性以及在减少之前对它们进行排序。不过，它做对的是，想要使用mapreduce的人只需要传递四个参数：`mapper,
    reducer, base-case`和我们要处理的`data`给`mapreduce`函数。
- en: If you are interested, [here](http://static.googleusercontent.com/media/research.google.com/en/us/archive
    /mapreduce-osdi04.pdf) is an paper written by the Google employees who came up
    with mapreduce. It is not required, but it is pretty readable and interesting.
    [The old lecture notes](http://inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=24)
    also have a good explanation, and you should read those if you feel like you don't
    understand mapreduce.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您感兴趣，[这里](http://static.googleusercontent.com/media/research.google.com/en/us/archive/mapreduce-osdi04.pdf)是由提出mapreduce的Google员工撰写的一篇论文。这不是必需的，但它非常易读和有趣。[旧的讲义](http://inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=24)也有很好的解释，如果您觉得不理解mapreduce，应该阅读这些内容。
- en: Breakdown of Mapreduce
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mapreduce的分解
- en: '![](/static/mapreduce.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/mapreduce.jpg)'
- en: Map the `mapper` to the smaller data (done in parallel). This involves selecting
    parts of the input we want to process and "attaching" a key to each results
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`mapper`映射到较小的数据（并行完成）。这涉及选择我们要处理的输入部分并为每个结果“附加”一个键
- en: Sort the result to 'buckets' based on their keys
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据它们的键将结果排序到“桶”中
- en: Each 'bucket' is passed to a `reducer` that accumulates the values
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个“桶”都传递给一个`reducer`来累积值
- en: We will look at each of these steps into more detail in subsequence sections.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续部分更详细地查看这些步骤。
- en: Throughout this lesson, we will use the example of searching through a text
    file and find the frequency of the words.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程中，我们将使用搜索文本文件并查找单词频率的示例。
- en: 'This will act as our test files:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这将作为我们的测试文件：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that every line is 'tagged' with their titles. We recommend keeping this
    tab open somewhere so that you know what our input looks like.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每一行都带有它们的标题。我们建议将此标签打开在某个地方，以便您知道我们的输入是什么样子的。
- en: You can get this data and the other functions of our implementation of mapreduce
    [here](/static/mapreduce.scm). Note that this implementation does not involve
    parallelism.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处获取我们的mapreduce实现的数据和其他函数[这里](/static/mapreduce.scm)。请注意，此实现不涉及并行性。
- en: Mapper
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射器
- en: '![](/static/mapreduce_mapper.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/mapreduce_mapper.jpg)'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Input**: (smaller) A key-value pair'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**：（较小的）键-值对'
- en: '**Output**: list of key-value pairs'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出**：键-值对列表'
- en: 'A `mapper` is a function that accepts data (as a key-value pair), and returns
    a **list** of key-value pairs. A list of key-value pairs is the same as associative
    lists (also known as a-lists) that we played with in lesson 9\. The keys are used
    to keep track of where the data is from; this is important for the parallelization.
    Note that the key of the input is not neccessarily the same as the key(s) that
    the mapper outputs. This will be our ADT for kv-pair:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`映射器`是一个接受数据（作为键值对）并返回**键值对列表**的函数。键值对列表与我们在第9课中玩过的关联列表（也称为a-lists）相同。键用于跟踪数据的来源；这对于并行化很重要。请注意，输入的键不一定与映射器输出的键相同。这将是我们的键值对的ADT：'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we look at the first item of our sample input, the result is the following
    :'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看样本输入的第一项，结果如下：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Why do we output a list of key-value pairs instead of a single key-value pair?
    Here are some reasons:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们输出键值对列表而不是单个键值对？以下是一些原因：
- en: '**no key-value**: There will be cases where our data does not contain a key
    that is of an interest to us. For example imagine a case where you want to count
    number of vowels in a word, and you encounter the word ''fly''. We would return
    the empty list in this case.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无键值**：有时我们的数据中可能没有我们感兴趣的键。例如，想象一种情况，你想要统计一个单词中元音字母的数量，然后遇到了单词''fly''。在这种情况下，我们将返回空列表。'
- en: '**multiple key-value**: There will be cases where our data corresponds to 2
    or more keys that we want to produce. This is applicable to our song lyrics example
    (shown below)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多个键值**：有时我们的数据对应于我们想要生成的2个或更多个键。这适用于我们的歌词示例（如下所示）'
- en: 'Extended Example: Word-Count'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展示例：单词计数
- en: Here is the definition of a mapper for our example.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们示例中映射器的定义。
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What does our mapper do? It accepts a key-value pair (its key is the song title,
    its value is a line from the song). For every word in the lines, use the word
    as the new key, and pair that with the value 1\. Note that even if a word appears
    twice in the line, like '(please please me), it outputs (please . 1) twice and
    NOT (please . 2). That is fine, because here we are only starting the count for
    each at 1\. We add them up later.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的映射器做什么？它接受一个键值对（其键是歌曲标题，其值是歌曲中的一行）。对于行中的每个单词，将该单词用作新键，并将其与值1配对。请注意，即使单词在行中出现两次，比如'(please
    please me)'，它也会输出'(please . 1)'两次而不是'(please . 2)'。这没问题，因为这里我们只是从1开始计数。我们稍后将它们相加。
- en: sort-into-buckets
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按桶排序
- en: '![](/static/mapreduce_sort.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/mapreduce_sort.jpg)'
- en: 'Before we actually get into the `reducer`, there is an intermediary step that
    sorts the keys, and group the same keys together. Fortunately, we can take advantage
    of abstraction and use the function `**sort-into-buckets**` to sort them into
    ''buckets''for us. key-value pairs with the same keys are grouped under the same
    ''bucket''. This is the result of calling the mapper from the previous step:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实际进入`减少器`之前，有一个中间步骤对键进行排序，并将相同的键分组在一起。幸运的是，我们可以利用抽象化，并使用函数`**按桶排序**`将它们排序到'桶'中。具有相同键的键值对被分组到同一个'桶'下。这是调用上一步映射器的结果：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Calling sort-into-buckets results inthe following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 调用按桶排序的结果如下：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Some parts of the result is ommited to keep it short. Note how the keys and
    values are organized here. The result is a list of buckets, where a bucket is
    a list of kv-pair with the same keys. `((i . 1) (i . 1) (i . 1) (i . 1))` is an
    example of a bucket, where each kv-pair has the key 'i'.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简洁，结果的某些部分被省略了。请注意这里的键和值是如何组织的。结果是一个桶列表，其中一个桶是具有相同键的键值对列表。`((i . 1) (i .
    1) (i . 1) (i . 1))`是一个桶的示例，其中每个键值对具有键'i'。
- en: Reducer
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少器
- en: '![](/static/mapreduce_reduce.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](/static/mapreduce_reduce.jpg)'
- en: '**Input**: two "values"'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**：两个“值”'
- en: '**Output**: a value'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出**：一个值'
- en: A `reducer` accepts two values(without the keys), and outputs a single value.
    This will be the output associated with that particular key.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`减少器`接受两个值（没有键），并输出一个单个值。'
- en: 'Extended Example: Word-Count'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展示例：单词计数
- en: Here is the definition for our reducer
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们减少器的定义
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Reducing One Bucket
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少一个桶
- en: 'Note that our reducer accepts two values while the result of our previous step
    (sort-into-buckets) is a list of buckets (where a bucket is a list of key- value
    pairs). Let''s look at how we can use our `reducer` to a single key- value. Let
    us use our first list of key-value:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的减少器接受两个值，而我们之前步骤的结果（按桶排序）是一个桶列表（其中一个桶是一个键值对列表）。让我们看看如何使用我们的`减少器`将其减少到单个键值对。让我们使用我们的第一个键值对列表：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`> (accumulate reducer 0 (map kv-value ''((i . 1) (i . 1) (i . 1) (i . 1) (i
    . 1))))`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`> (accumulate reducer 0 (map kv-value ''((i . 1) (i . 1) (i . 1) (i . 1) (i
    . 1))))`'
- en: 'this simplifies to:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这简化为：
- en: '`> (accumulate reducer 0 ''(1 1 1 1 1))`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`> (accumulate reducer 0 ''(1 1 1 1 1))`'
- en: '`5`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`5`'
- en: 'Before we call accumulate, we have to obtain the values from the list of kv-
    pairs by using map. Note that the result of calling accumulate is a single value
    (the 5) associated with the key (which is ''i'' in this case). Because our end
    result needs to be a kv-pair, we have to return `(i . 5)` in the end. The expression
    then becomes:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 accumulate 之前，我们必须通过使用 map 从 kv- 对列表中获取值。请注意，调用 accumulate 的结果是与键相关联的单个值（在本例中为
    'i' 的 5）。因为我们最终的结果需要是一个 kv- 对，所以最终我们必须返回 `(i . 5)`。表达式变为：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can generalize the expression above into any other "bucket" besides '((i
    . 1) (i . 1) (i . 1) (i . 1) (i . 1)).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将上面的表达式推广到除了 '((i . 1) (i . 1) (i . 1) (i . 1) (i . 1))' 之外的任何其他“桶”。
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Reducing a List of Buckets
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少一个桶的列表
- en: The procedure `reduce-bucket` above reduces one bucket. Our result from the
    previous step, `(sort-into-buckets (map mapper data))` is a list of buckets. To
    reduce a list of buckets, we can use map again. We are going to define the function
    `group-reduce` that does exactly that.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的 `reduce-bucket` 过程减少一个桶。我们从上一步的结果 `(sort-into-buckets (map mapper data))`
    是一个桶的列表。要减少一个桶的列表，我们可以再次使用 map。我们将定义函数 `group-reduce` 来实现这一点。
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If we use what we have so far, it evaluates into the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用到目前为止的内容，它会计算为以下内容：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Some values are omitted for conciseness. The final result is again, a list
    of kv-pairs: the key is the word, the value is how many times those words appear
    in our data. We have just used mapreduce to construct word counts for words in
    our data!'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，某些值被省略。最终的结果再次是一个 kv- 对的列表：键是单词，值是这些单词在我们的数据中出现的次数。我们刚刚使用 mapreduce 构建了数据中单词计数！
- en: 'This is the final (hand-wavy, approximated) definition of our mapreduce:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的 mapreduce 的最终（手势模糊，近似）定义：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Why is it not the actual mapreduce? The actual one will involve mapping and
    reducing our kv-pairs parallely and we have to take into account of concurrency
    issues. The definition above captures the major parts that we are concerned with.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不是实际的 mapreduce？实际的方法将涉及并行地映射和减少我们的 kv- 对，并且我们必须考虑并发问题。上面的定义捕捉了我们关注的主要部分。
- en: Practice with Mapreduce
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 Mapreduce
- en: Writing a mapreduce function is all about defining your mapper and reducer.
    We have series of different scenarios and want you guys to define the corresponding
    mapper, reducer and at the end the call to mapreduce.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 mapreduce 函数就是定义您的映射器和减少器。我们有一系列不同的场景，希望您定义相应的映射器、减少器，并最终调用 mapreduce。
- en: 'Remember:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 记住：
- en: The input to your mapper is a key-value-pair and it outputs a **list** of key-value
    pairs.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的映射器的输入是一个键值对，输出是一个键值对的**列表**。
- en: The input to your reducer are two values and it outputs one value
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的减少器的输入是两个值，输出是一个值
- en: Chaining Mapreduce
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链接 Mapreduce
- en: 'As hinted before, since mapreduce takes as an input a list of key-value pairs
    and outputs a list of key-value pairs, it is possible to chain mapreduce together.
    It would look something like this: `(mapreduce some-mapper some- reducer some-base-case
    (mapreduce another-mapper another-reducer another-base- case actual-input))`.
    Note that the keys and values for the first mapreduce may be totally different
    from your second mapreduce.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，由于 mapreduce 的输入是一个键值对列表，输出也是一个键值对列表，因此可以将 mapreduce 链接在一起。它看起来像这样：`(mapreduce
    some-mapper some-reducer some-base-case (mapreduce another-mapper another-reducer
    another-base-case actual-input))`。请注意，第一个 mapreduce 的键和值可能与第二个 mapreduce 的完全不同。
- en: Most Frequent Word
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最常见的单词
- en: Let's write another mapreduce function (We're not chaining yet). This time,
    our input has a key of 'words' and the value are numbers, representing how many
    times they appeared in a document. We want our output to be a list of a **single**
    key-value pair where just like the input, our key is a word and our value is a
    number such that it is the highest number encountered.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写另一个 mapreduce 函数（我们还没有链接）。这次，我们的输入的键是 'words'，值是数字，表示它们在文档中出现的次数。我们希望输出是一个仅有一个键值对的列表，就像输入一样，我们的键是一个单词，值是一个数字，表示遇到的最高数字。
- en: 'Note: our solution isn''t ideal, and it''s a little contrived. It doesn''t
    take advantage of the parallelism that mapreduce offers.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我们的解决方案并不理想，有点牵强。它没有充分利用 mapreduce 提供的并行性。
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now We're Chaining
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在我们开始链接
- en: Our function above works, if we pass the pairs with the key as a word, and value
    as a number. In real life, we might not have direct access to the word counts
    of each word; we have to process that from the original document.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面的函数是有效的，如果我们传递键为单词，值为数字的对。在现实生活中，我们可能无法直接访问每个单词的单词计数；我们必须从原始文档中处理它。
- en: Write the function `real-most-frequent` that accepts a list of key-value pairs
    where the key is the name of the file, and the values are lines from that file
    (just like our all-songs example) . Our output is again, a list of **single**
    key-value pair. You may want to reuse any functions we have defined so far in
    the lesson.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 编写函数`real-most-frequent`，接受一个键值对列表，其中键是文件名，而值是来自该文件的行（就像我们所有歌曲示例一样）。我们的输出再次是一个**单一**键值对列表。你可能想要重用我们在本课程中已经定义的任何函数。
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The reader does not contain MapReduce exercises. If you want to get more practices,
    there are MapReduce questions on the Lesson 14 discussion.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 读者不包含MapReduce练习。如果你想获得更多练习，Lesson 14讨论中有MapReduce问题。
