- en: 5Adding Functions to the Language
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5将函数添加到语言中
- en: Let’s start turning this into a real programming language. We could add intermediate
    features such as conditionals, but to do almost anything interesting we’re going
    to need functions or their moral equivalent, so let’s get to it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始将这些转换为一个真正的编程语言。我们可以添加诸如条件语句之类的中间特性，但要做任何有趣的事情，我们都需要函数或它们的道德等价物，所以让我们开始吧。
- en: Exercise
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: Add conditionals to your language. You can either add boolean datatypes or,
    if you want to do something quicker, add a conditional that treats 0 as false
    and everything else as true.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 向你的语言中添加条件语句。你可以添加布尔数据类型，或者，如果想快速完成，可以添加一个将 0 视为 false 而其他一切视为 true 的条件语句。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What are the important test cases you should write?
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你应该编写哪些重要的测试用例？
- en: Imagine, therefore, that we’re modeling a system like DrRacket. The developer
    defines functions in the definitions window, and uses them in the interactions
    window. For now, let’s assume all definitions go in the definitions window only
    (we’ll relax this soon [REF]), and all expressions in the interactions window
    only. Thus, running a program simply loads definitions. Because our interpreter
    corresponds to the interactions window prompt, we’ll therefore assume it is supplied
    with a set of definitions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，想象我们正在模拟一个像 DrRacket 这样的系统。开发者在定义窗口中定义函数，并在交互窗口中使用它们。现在，让我们假设所有的定义都只在定义窗口中（我们很快会放宽这一限制
    [REF]），而所有的表达式都只在交互窗口中。因此，运行程序只是加载定义。因为我们的解释器对应于交互窗口提示符，所以我们假设它提供了一组定义。
- en: A set of definitions suggests no ordering, which means, presumably, any definition
    can refer to any other. That’s what I intend here, but when you are designing
    your own language, be sure to think about this.
  id: totrans-7
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一组定义暗示着没有顺序，这意味着，据推测，任何定义都可以引用任何其他定义。这是我在这里的意图，但当你设计自己的语言时，一定要考虑这一点。
- en: 5.1Defining Data Representations
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.1 定义数据表示
- en: 'To keep things simple, let’s just consider functions of one argument. Here
    are some Racket examples:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简单，让我们只考虑一个参数的函数。下面是一些 Racket 示例：
- en: '| (define (double x) (+ x x)) |'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define (double x) (+ x x)) |'
- en: '|   |'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   |'
- en: '| (define (quadruple x) (double (double x))) |'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define (quadruple x) (double (double x))) |'
- en: '|   |'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   |'
- en: '| (define (const5 _) 5) |'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define (const5 _) 5) |'
- en: Exercise
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: When a function has multiple arguments, what simple but important criterion
    governs the names of those arguments?
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当一个函数有多个参数时，什么简单但重要的标准决定了这些参数的名称？
- en: 'What are the parts of a function definition? It has a name (above, double,
    quadruple, and const5), which we’ll represent as a symbol (’double, etc.); its
    formal parameter or argument has a name (e.g., x), which too we can model as a
    symbol (’x); and it has a body. We’ll determine the body’s representation in stages,
    but let’s start to lay out a datatype for function definitions:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 函数定义的各部分是什么？它有一个名称（如上所示，double、quadruple 和 const5），我们将其表示为一个符号（'double 等）；它的形式参数或参数有一个名称（例如，x），我们也可以将其建模为一个符号（'x）；它有一个主体。我们将逐步确定主体的表示方法，但让我们开始制定函数定义的数据类型：
- en: '[<fundef>](#(elem._(chunk._~3cfundef~3e~3a1))) ::='
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[<fundef>](#(elem._(chunk._~3cfundef~3e~3a1))) ::='
- en: '| (define-type FunDefC |'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define-type FunDefC |'
- en: '|   [fdC (name : symbol) (arg : symbol) (body : ExprC)]) |'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [fdC (name : symbol) (arg : symbol) (body : ExprC)]) |'
- en: 'What is the body? Clearly, it has the form of an arithmetic expression, and
    sometimes it can even be represented using the existing ArithC language: for instance,
    the body of const5 can be represented as (numC 5). But representing the body of
    double requires something more: not just addition (which we have), but also “x”.
    You are probably used to calling this a variable, but we will not use that term
    for now. Instead, we will call it an identifier.I promise we’ll return to this
    issue of nomenclature later [REF].'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 主体是什么？显然，它具有算术表达式的形式，有时甚至可以使用现有的 ArithC 语言来表示：例如，const5 的主体可以表示为 (numC 5)。但表示
    double 的主体需要更多的东西：不仅仅是加法（我们已经有了），还有“x”。你可能习惯称其为变量，但我们现在不会使用这个术语。相反，我们将其称为标识符。我保证我们以后会回到这个命名问题上
    [REF]。
- en: Do Now!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 立即行动！
- en: Anything else?
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还有其他吗？
- en: 'Finally, let’s look at the body of quadruple. It has yet another new construct:
    a function application. Be very careful to distinguish between a function definition,
    which describes what the function is, and an application, which uses it. These
    are uses. The argument (or actual parameter) in the inner application of double
    is x; the argument in the outer application is (double x). Thus, the argument
    can be any complex expression.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看quadruple的主体。它有一个全新的构造：函数应用。非常小心地区分函数定义（描述函数是什么）和应用（使用函数）。这些是用途。double的内部应用的参数（或实际参数）是x；外部应用的参数是(double
    x)。因此，参数可以是任何复杂的表达式。
- en: 'Let’s commit all this to a crisp datatype. Clearly we’re extending what we
    had before (because we still want all of arithmetic). We’ll give a new name to
    our datatype to signify that it’s growing up:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将所有这些都提交到一个清晰的数据类型中。显然，我们正在扩展之前的内容（因为我们仍然希望拥有所有的算术）。我们将为我们的数据类型取一个新名字，以表明它正在成长：
- en: '[<exprC>](#(elem._(chunk._~3cexpr.C~3e~3a1))) ::='
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[<exprC>](#(elem._(chunk._~3cexpr.C~3e~3a1))) ::='
- en: '| (define-type ExprC |'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define-type ExprC |'
- en: '|   [numC (n : number)] |'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [numC (n : number)] |'
- en: '|   [<idC-def>](#(elem._(chunk._~3cid.C-def~3e~3a1))) |'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [<idC-def>](#(elem._(chunk._~3cid.C-def~3e~3a1))) |'
- en: '|   [<app-def>](#(elem._(chunk._~3capp-def~3e~3a1))) |'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [<app-def>](#(elem._(chunk._~3capp-def~3e~3a1))) |'
- en: '|   [plusC (l : ExprC) (r : ExprC)] |'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [plusC (l : ExprC) (r : ExprC)] |'
- en: '|   [multC (l : ExprC) (r : ExprC)]) |'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [multC (l : ExprC) (r : ExprC)]) |'
- en: 'Identifiers are closely related to formal parameters. When we apply a function
    by giving it a value for its parameter, we are in effect asking it to replace
    all instances of that formal parameter in the body—<wbr>i.e., the identifiers
    with the same name as the formal parameter—<wbr>with that value.Observe that we
    are being coy about a few issues: what kind of “value” [REF] and when to replace
    [REF]. To simplify this process of search-and-replace, we might as well use the
    same datatype to represent both. We’ve already chosen symbols to represent formal
    parameters, so:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 标识符与形式参数密切相关。当我们通过为其参数提供一个值来应用一个函数时，实际上我们正在要求它替换体中所有该形式参数的实例——即，与形式参数同名的标识符——为该值。请注意，我们对一些问题保持了含糊不清：是什么样的“值”
    [REF]，以及何时替换 [REF]。为了简化这个搜索和替换的过程，我们可能会使用同一种数据类型来表示两者。我们已经选择了符号来表示形式参数，所以：
- en: '[<idC-def>](#(elem._(chunk._~3cid.C-def~3e~3a1))) ::='
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[<idC-def>](#(elem._(chunk._~3cid.C-def~3e~3a1))) ::='
- en: '[idC (s : symbol)]'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[idC (s : symbol)]'
- en: 'Finally, applications. They have two parts: the function’s name, and its argument.
    We’ve already agreed that the argument can be any full-fledged expression (including
    identifiers and other applications). As for the function name, it again makes
    sense to use the same datatype as we did when giving the function its name in
    a function definition. Thus:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，应用。它们有两部分：函数的名称和其参数。我们已经同意参数可以是任何完整的表达式（包括标识符和其他应用）。至于函数名称，再次使用与我们在函数定义中给函数命名时使用的相同的数据类型是合理的。因此：
- en: '[<app-def>](#(elem._(chunk._~3capp-def~3e~3a1))) ::='
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[<app-def>](#(elem._(chunk._~3capp-def~3e~3a1))) ::='
- en: '[appC (fun : symbol) (arg : ExprC)]'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[appC (fun : symbol) (arg : ExprC)]'
- en: identifying which function to apply, and providing its argument.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 确定要应用哪个函数，并提供其参数。
- en: 'Using these definitions, it’s instructive to write out the representations
    of the examples we defined above:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些定义，写出我们上面定义的示例的表示是很有启发性的：
- en: (fdC ’double ’x (plusC (idC ’x) (idC ’x)))
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (fdC ’double ’x (plusC (idC ’x) (idC ’x)))
- en: (fdC ’quadruple ’x (appC ’double (appC ’double (idC ’x))))
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (fdC ’quadruple ’x (appC ’double (appC ’double (idC ’x))))
- en: (fdC ’const5 ’_ (numC 5))
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (fdC ’const5 ’_ (numC 5))
- en: We also need to choose a representation for a set of function definitions. It’s
    convenient to represent these by a list.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要选择一种表示一组函数定义的表示方法。用列表表示这些是方便的。
- en: Look out! Did you notice that we spoke of a set of function definitions, but
    chose a list representation? That means we’re using an ordered collection of data
    to represent an unordered entity. At the very least, then, when testing, we should
    use any and all permutations of definitions to ensure we haven’t subtly built
    in a dependence on the order.
  id: totrans-45
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意！你是否注意到我们谈到了一组函数定义，但选择了列表表示？这意味着我们使用有序数据集表示无序实体。至少，在测试时，我们应该使用所有的排列组合来确保我们没有微妙地构建了对顺序的依赖。
- en: 5.2Growing the Interpreter
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.2扩展解释器
- en: 'Now we’re ready to tackle the interpreter proper. First, let’s remind ourselves
    of what it needs to consume. Previously, it consumed only an expression to evaluate.
    Now it also needs to take a list of function definitions:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好处理解释器了。首先，让我们回顾一下它需要消耗什么。之前，它仅消耗要评估的表达式。现在，它还需要接受一个函数定义的列表：
- en: '[<interp>](#(elem._(chunk._~3cinterp~3e~3a1))) ::='
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[<interp>](#(elem._(chunk._~3cinterp~3e~3a1))) ::= '
- en: '| (define (interp [e : ExprC] [fds : (listof FunDefC)]) : number |'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (定义 (interp [e : ExprC] [fds : (listof FunDefC)]) : 数字 |'
- en: '|   [<interp-body>](#(elem._(chunk._~3cinterp-body~3e~3a1)))) |'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [<interp-body>](#(elem._(chunk._~3cinterp-body~3e~3a1)))) |'
- en: Let’s revisit our old interpreter ([A First Look at Interpretation](first-interp.html)).
    In the case of numbers, clearly we still return the number as the answer. In the
    addition and multiplication case, we still need to recur (because the sub-expressions
    might be complex), but which set of function definitions do we use? Because the
    act of evaluating an expression neither adds nor removes function definitions,
    the set of definitions remains the same, and should just be passed along unchanged
    in the recursive calls.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新审视一下我们的旧解释器（[首次看解释](first-interp.html)）。对于数字的情况，显然我们仍然将数字作为答案返回。在加法和乘法情况下，我们仍然需要递归（因为子表达式可能很复杂），但我们使用哪一组函数定义？因为评估表达式的行为既不添加也不删除函数定义，因此定义集合保持不变，并且在递归调用中应该保持不变。
- en: '[<interp-body>](#(elem._(chunk._~3cinterp-body~3e~3a1))) ::='
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[<interp-body>](#(elem._(chunk._~3cinterp-body~3e~3a1))) ::= '
- en: '| (type-case ExprC e |'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (类型分支 ExprC e |'
- en: '|   [numC (n) n] |'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [numC (n) n] |'
- en: '|   [<idC-interp-case>](#(elem._(chunk._~3cid.C-interp-case~3e~3a1))) |'
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [<idC-interp-case>](#(elem._(chunk._~3cid.C-interp-case~3e~3a1))) |'
- en: '|   [<appC-interp-case>](#(elem._(chunk._~3capp.C-interp-case~3e~3a1))) |'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [<appC-interp-case>](#(elem._(chunk._~3capp.C-interp-case~3e~3a1))) |'
- en: '|   [plusC (l r) (+ (interp l fds) (interp r fds))] |'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [plusC (l r) (+ (interp l fds) (interp r fds))] |'
- en: '|   [multC (l r) (* (interp l fds) (interp r fds))]) |'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [multC (l r) (* (interp l fds) (interp r fds))]) |'
- en: 'Now let’s tackle application. First we have to look up the function definition,
    for which we’ll assume we have a helper function of this type available:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来处理应用。首先我们必须查找函数定义，对此我们假设我们有一个此类型的辅助函数可用：
- en: '| ; get-fundef : symbol * (listof FunDefC) -> FunDefC |'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ; get-fundef : symbol * (listof FunDefC) -> FunDefC |'
- en: Assuming we find a function of the given name, we need to evaluate its body.
    However, remember what we said about identifiers and parameters? We must “search-and-replace”,
    a process you have seen before in school algebra called substitution. This is
    sufficiently important that we should talk first about substitution before returning
    to the interpreter ([The Interpreter, Resumed](#(part._fof-interp-resumed))).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们找到了给定名称的函数，我们需要评估它的主体。然而，记得我们关于标识符和参数所说的吗？我们必须进行“搜索和替换”，这是一个你在学校代数中见过的过程，称为替换。这是非常重要的，我们应该先谈论替换，然后再回到解释器（[恢复的解释器](#(part._fof-interp-resumed))）。
- en: 5.3Substitution
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.3替换
- en: 'Substitution is the act of replacing a name (in this case, that of the formal
    parameter) in an expression (in this case, the body of the function) with another
    expression (in this case, the actual parameter). Let’s define its type:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 替换是用另一个表达式（在本例中为实际参数）替换表达式中的名称（在本例中为形式参数）的行为。让我们定义它的类型：
- en: '| ; subst : ExprC * symbol * ExprC -> ExprC |'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ; subst : ExprC * symbol * ExprC -> ExprC |'
- en: 'It helps to also give its parameters informative names:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还给它的参数起一个有意义的名字是很有帮助的：
- en: '[<subst>](#(elem._(chunk._~3csubst~3e~3a1))) ::='
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[<subst>](#(elem._(chunk._~3csubst~3e~3a1))) ::= '
- en: '| (define (subst [what : ExprC] [for : symbol] [in : ExprC]) : ExprC |'
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (定义 (subst [what : ExprC] [for : symbol] [in : ExprC]) : ExprC |'
- en: '|   [<subst-body>](#(elem._(chunk._~3csubst-body~3e~3a1)))) |'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [<subst-body>](#(elem._(chunk._~3csubst-body~3e~3a1)))) |'
- en: The first argument is what we want to replace the name with; the second is for
    what name we want to perform substitution; and the third is in which expression
    we want to do it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是我们想要替换的名称；第二个是我们想要执行替换的名称；第三个是我们想要在其中执行替换的表达式。
- en: Do Now!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就做吧！
- en: Suppose we want to substitute 3 for the identifier x in the bodies of the three
    example functions above. What should it produce?
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 假设我们想要在上述三个示例函数的主体中将3替换为标识符x。它应该产生什么？
- en: In double, this should produce (+ 3 3); in quadruple, it should produce (double
    (double 3)); and in const5, it should produce 5 (i.e., no substitution happens
    because there are no instances of x in the body).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在双中，这应该产生(+ 3 3)；在四倍中，它应该产生(double (double 3))；在const5中，它应该产生5（即，不发生替换，因为主体中没有x的实例）。
- en: A common mistake is to assume that the result of substituting, e.g., 3 for x
    in double is (define (double x) (+ 3 3)). This is incorrect. We only substitute
    at the point when we apply the function, at which point the function’s invocation
    is replaced by its body. The header enables us to find the function and ascertain
    the name of its parameter; but only its body remains for evaluation. Examine how
    substitution is used to notice the type error that would result from returning
    a function definition.
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个常见的错误是假设在double中替换x为3的结果是（define (double x) (+ 3 3)）。这是不正确的。我们只在应用函数时进行替换，在那时函数的调用被其主体替换。标头使我们能够找到函数并确定其参数的名称；但只有其主体保留用于评估。检查替换如何用于注意到返回函数定义会导致类型错误。
- en: 'These examples already tell us what to do in almost all the cases. Given a
    number, there’s nothing to substitute. If it’s an identifier, we haven’t seen
    an example with a different identifier but you’ve guessed what should happen:
    it stays unchanged. In the other cases, descend into the sub-expressions, performing
    substitution.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例已经告诉我们在几乎所有情况下该怎么做。给定一个数字，没有什么需要替换的。如果它是一个标识符，我们还没有看到一个不同标识符的示例，但你已经猜到应该发生什么：它保持不变。在其他情况下，进入子表达式，执行替换。
- en: Before we turn this into code, there’s an important case to consider. Suppose
    the name we are substituting happens to be the name of a function. Then what should
    happen?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将这转化为代码之前，有一个重要的情况需要考虑。假设我们要替换的名称恰好是一个函数的名称。那么应该发生什么？
- en: Do Now!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在动起来！
- en: What, indeed, should happen?
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 究竟应该发生什么？
- en: 'There are many ways to approach this question. One is from a design perspective:
    function names live in their own “world”, distinct from ordinary program identifiers.
    Some languages (such as C and Common Lisp, in slightly different ways) take this
    perspective, and partition identifiers into different namespaces depending on
    how they are used. In other languages, there is no such distinction; indeed, we
    will examine such languages soon [REF].'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法来解决这个问题。其中一种是从设计的角度来看：函数名存在于它们自己的“世界”中，与普通程序标识符不同。一些语言（如C和Common Lisp，稍有不同）采取这种观点，并根据它们的使用方式将标识符划分为不同的命名空间。在其他语言中，没有这样的区别；事实上，我们很快将研究这样的语言[REF]。
- en: For now, we will take a pragmatic viewpoint. Because expressions evaluate to
    numbers, that means a function name could turn into a number. However, numbers
    cannot name functions, only symbols can. Therefore, it makes no sense to substitute
    in that position, and we should leave the function name unmolested irrespective
    of its relationship to the variable being substituted. (Thus, a function could
    have a parameter named x as well as refer to another function called x, and these
    would be kept distinct.)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将采取一种实用的观点。因为表达式会被计算为数字，这意味着函数名可能会变成一个数字。然而，数字不能命名函数，只有符号可以。因此，在那个位置进行替换是没有意义的，无论它与被替换的变量的关系如何，我们都应该保持函数名不变。（因此，一个函数可以有一个名为x的参数，也可以引用另一个名为x的函数，这两者应该保持不同。）
- en: 'Now we’ve made all our decisions, and we can provide the body code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经做出了所有决定，我们可以提供主体代码：
- en: '[<subst-body>](#(elem._(chunk._~3csubst-body~3e~3a1))) ::='
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[<subst-body>](#(elem._(chunk._~3csubst-body~3e~3a1))) ::='
- en: '| (type-case ExprC in |'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (type-case ExprC in |'
- en: '|   [numC (n) in] |'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [numC (n) in] |'
- en: '|   [idC (s) (cond |'
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [idC (s) (cond |'
- en: '|              [(symbol=? s for) what] |'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|              [(symbol=? s for) what] |'
- en: '|              [else in])] |'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|              [else in])] |'
- en: '|   [appC (f a) (appC f (subst what for a))] |'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [appC (f a) (appC f (subst what for a))] |'
- en: '|   [plusC (l r) (plusC (subst what for l) |'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [plusC (l r) (plusC (subst what for l) |'
- en: '|                       (subst what for r))] |'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                       (subst what for r))] |'
- en: '|   [multC (l r) (multC (subst what for l) |'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [multC (l r) (multC (subst what for l) |'
- en: '|                       (subst what for r))]) |'
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                       (subst what for r))]) |'
- en: Exercise
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: Observe that, whereas in the numC case the interpreter returned n, substitution
    returns in (i.e., the original expression, equivalent at that point to writing
    (numC n). Why?
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意，与numC情况不同，解释器在numC情况下返回n，而替换返回in（即，原始表达式，在那一点上等同于写（numC n）。为什么？
- en: 5.4The Interpreter, Resumed
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.4解释器，继续
- en: Phew! Now that we’ve completed the definition of substitution (or so we think),
    let’s complete the interpreter. Substitution was a heavyweight step, but it also
    does much of the work involved in applying a function. It is tempting to write
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 哦！现在我们已经完成了替换的定义（或者我们认为完成了），让我们完成解释器。替换是一个繁重的步骤，但它也完成了应用函数所涉及的大部分工作。很容易写成
- en: '[<appC-interp-case-take-1>](#(elem._(chunk._~3capp.C-interp-case-take-1~3e~3a1)))
    ::='
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[<appC-interp-case-take-1>](#(elem._(chunk._~3capp.C-interp-case-take-1~3e~3a1)))
    ::='
- en: '| [appC (f a) (local ([define fd (get-fundef f fds)]) |'
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [appC (f a) (local ([define fd (get-fundef f fds)]) |'
- en: '|               (subst a |'
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|               (subst a |'
- en: '|                      (fdC-arg fd) |'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                      (fdC-arg fd) |'
- en: '|                      (fdC-body fd)))] |'
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                      (fdC-body fd)))] |'
- en: Tempting, but wrong.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 诱人，但是错了。
- en: Do Now!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就做！
- en: Do you see why?
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你明白为什么了吗？
- en: 'Reason from the types. What does the interpreter return? Numbers. What does
    substitution return? Oh, that’s right, expressions! For instance, when we substituted
    in the body of double, we got back the representation of (+ 5 5). This is not
    a valid answer for the interpreter. Instead, it must be reduced to an answer.
    That, of course, is precisely what the interpreter does:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从类型推理。解释器返回什么？数字。替换返回什么？哦，对了，表达式！例如，当我们在 double 的主体中进行替换时，我们得到了表示 (+ 5 5) 的表示形式。这对解释器来说不是一个有效的答案。相反，它必须被归约为一个答案。当然，这正是解释器所做的：
- en: '[<appC-interp-case>](#(elem._(chunk._~3capp.C-interp-case~3e~3a1))) ::='
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[<appC-interp-case>](#(elem._(chunk._~3capp.C-interp-case~3e~3a1))) ::='
- en: '| [appC (f a) (local ([define fd (get-fundef f fds)]) |'
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [appC (f a) (local ([define fd (get-fundef f fds)]) |'
- en: '|               (interp (subst a |'
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|               (interp (subst a |'
- en: '|                              (fdC-arg fd) |'
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                              (fdC-arg fd) |'
- en: '|                              (fdC-body fd)) |'
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                              (fdC-body fd)) |'
- en: '|                       fds))] |'
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                       fds))] |'
- en: 'Okay, that leaves only one case: identifiers. What could possibly be complicated
    about them? They should be just about as simple as numbers! And yet we’ve put
    them off to the very end, suggesting something subtle or complex is afoot.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，只剩下一个情况了：标识符。它们可能会有什么复杂的地方？它们应该和数字一样简单！但是我们把它们推到最后，暗示着有什么微妙或复杂的事情正在发生。
- en: Do Now!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就做！
- en: Work through some examples to understand what the interpreter should do in the
    identifier case.
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通过一些例子来理解解释器在标识符情况下应该做什么。
- en: 'Let’s suppose we had defined double as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们将 double 定义如下：
- en: '| (define (double x) (+ x y)) |'
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define (double x) (+ x y)) |'
- en: When we substitute 5 for x, this produces the expression (+ 5 y). So far so
    good, but what is left to substitute y? As a matter of fact, it should be clear
    from the very outset that this definition of double is erroneous. The identifier
    y is said to be free, an adjective that in this setting has negative connotations.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将 5 代入 x 时，这产生了表达式 (+ 5 y)。到目前为止一切顺利，但是还剩下什么要替代 y 呢？事实上，从一开始就应该清楚，这个 double
    的定义是错误的。说标识符 y 是自由的，这个形容词在这种情境中有负面含义。
- en: 'In other words, the interpreter should never confront an identifier. All identifiers
    ought to be parameters that have already been substituted (known as bound identifiers—<wbr>here,
    a positive connotation) before the interpreter ever sees them. As a result, there
    is only one possible response given an identifier:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，解释器永远不应该遇到一个标识符。所有的标识符都应该是在解释器看到它们之前就已经被替换（称为绑定标识符——这里是一个积极的内涵）的参数。因此，对于一个标识符只有一种可能的响应：
- en: '[<idC-interp-case>](#(elem._(chunk._~3cid.C-interp-case~3e~3a1))) ::='
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[<idC-interp-case>](#(elem._(chunk._~3cid.C-interp-case~3e~3a1))) ::='
- en: '[idC (_) (error ''interp "shouldn''t get here")]'
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[idC (_) (error ''interp "shouldn''t get here")]'
- en: And that’s it!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！
- en: 'Finally, to complete our interpreter, we should define get-fundef:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了完成我们的解释器，我们应该定义 get-fundef：
- en: '| (define (get-fundef [n : symbol] [fds : (listof FunDefC)]) : FunDefC |'
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define (get-fundef [n : symbol] [fds : (listof FunDefC)]) : FunDefC |'
- en: '|   (cond |'
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (cond |'
- en: '|     [(empty? fds) (error ''get-fundef "reference to undefined function")]
    |'
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [(empty? fds) (error ''get-fundef "reference to undefined function")]
    |'
- en: '|     [(cons? fds) (cond |'
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [(cons? fds) (cond |'
- en: '|                    [(equal? n (fdC-name (first fds))) (first fds)] |'
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                    [(equal? n (fdC-name (first fds))) (first fds)] |'
- en: '|                    [else (get-fundef n (rest fds))])])) |'
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                    [else (get-fundef n (rest fds))])])) |'
- en: 5.5Oh Wait, There’s More!
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.5噢，等等，还有更多！
- en: 'Earlier, we gave the following type to subst:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们给 subst 分配了以下类型：
- en: '| ; subst : ExprC * symbol * ExprC -> ExprC |'
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ; subst : ExprC * symbol * ExprC -> ExprC |'
- en: Sticking to surface syntax for brevity, suppose we apply double to (+ 1 2).
    This would substitute (+ 1 2) for each x, resulting in the following expression—<wbr>(+
    (+ 1 2) (+ 1 2))—<wbr>for interpretation. Is this necessarily what we want?
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，我们坚持使用表面语法，假设我们将 double 应用于 (+ 1 2)。这将为每个 x 替换为 (+ 1 2)，导致以下表达式—(+ (+
    1 2) (+ 1 2))—供解释。这一定是我们想要的吗？
- en: 'When you learned algebra in school, you may have been taught to do this differently:
    first reduce the argument to an answer (in this case, 3), then substitute the
    answer for the parameter. This notion of substitution might have the following
    type instead:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在学校学习代数时，可能被教导以不同的方式进行：首先将参数简化为一个答案（在这种情况下为3），然后用答案替换参数。这种替换概念可能会有以下类型：
- en: '| ; subst : number * symbol * ExprC -> ExprC |'
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ; subst : number * symbol * ExprC -> ExprC |'
- en: 'Careful now: we can’t put raw numbers inside expressions, so we’d have to constantly
    wrap the number in an invocation of numC. Thus, it would make sense for subst
    to have a helper that it invokes after wrapping the first parameter. (In fact,
    our existing subst would be a perfectly good candidate: because it accepts any
    ExprC in the first parameter, it will certainly work just fine with a numC.)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我们不能在表达式中放入原始数字，因此我们必须不断地将数字包装在numC的调用中。因此，subst应该在包装第一个参数后调用一个辅助函数。 （实际上，我们现有的subst将是一个非常好的候选者：因为它接受第一个参数中的任何ExprC，所以它肯定可以很好地与numC一起使用。）
- en: In fact, we don’t even have substitution quite right! The version of substitution
    we have doesn’t scale past this language due to a subtle problem known as “name
    capture”. Fixing substitution is complex, subtle, and an exciting intellectual
    endeavor, but it’s not the direction I want to go in here. We’ll instead sidestep
    this problem in this book. If you’re interested, however, read about the lambda
    calculus, which provides the tools for defining substitution correctly.
  id: totrans-135
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 实际上，我们甚至没有完全正确的替换！我们目前的替换版本由于一个被称为“名称捕获”的微妙问题而无法扩展到这种语言之外。修复替换是一个复杂、微妙且令人兴奋的智力努力，但这不是我想在这里探讨的方向。在本书中，我们将绕过这个问题。然而，如果你感兴趣，可以阅读关于λ演算的内容，它提供了正确定义替换的工具。
- en: Exercise
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: Modify your interpreter to substitute names with answers, not expressions.
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 修改你的解释器，用答案而不是表达式替换名称。
- en: We’ve actually stumbled on a profound distinction in programming languages.
    The act of evaluating arguments before substituting them in functions is called
    eager application, while that of deferring evaluation is called lazy—<wbr>and
    has some variations. For now, we will actually prefer the eager semantics, because
    this is what most mainstream languages adopt. Later [REF], we will return to talking
    about the lazy application semantics and its implications.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们已经发现了编程语言中的一个深刻区别。在将参数替换到函数中之前评估参数的行为称为急切应用，而推迟评估的行为称为惰性<wbr>应用，并且有一些变体。目前，我们实际上更喜欢急切语义，因为这是大多数主流语言采用的方式。稍后[REF]，我们将回到讨论惰性应用语义及其影响。
