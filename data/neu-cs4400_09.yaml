- en: Note on TypesTuesday, January 17th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型注释，星期二，1月17日
- en: 'Types can become interesting when dealing with higher-order functions. For
    example, `map` receives a function and a list of some type, and applies the function
    over this list to accumulate its output, so its type is:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 处理高阶函数时，类型会变得有趣。例如，`map`接收一个函数和某种类型的列表，并将该函数应用于此列表以累积其输出，因此其类型是：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Actually, `map` can use more than a single list, it will apply the function
    on the first element in all lists, then the second and so on. So the type of `map`
    with two lists can be described as:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`map`可以使用多个列表，它将在所有列表的第一个元素上应用函数，然后是第二个元素，依此类推。因此，具有两个列表的`map`的类型可以描述为：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here’s a hairy example — what is the type of this function:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个复杂的例子 —— 这个函数的类型是什么：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Begin by what we know — both `map`s, call them `map1` and `map2`, have the
    double- and single-list types of `map` respectively, here they are, with different
    names for types:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们知道的开始 —— 两个`map`，称它们为`map1`和`map2`，具有`map`的双列表和单列表类型，这里它们是，类型名称不同：
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we know that `map2` is the first argument to `map1`, so the type of `map1`s
    first argument should be the type of `map2`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道`map2`是`map1`的第一个参数，因此`map1`的第一个参数的类型应该是`map2`的类型：
- en: '[PRE4]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: From here we can conclude that
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里我们可以得出结论
- en: '[PRE5]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we use these equations in `map1`’s type, we get:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在`map1`的类型中使用这些方程式，我们会得到：
- en: '[PRE6]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, `foo`’s two arguments are the 2nd and 3rd arguments of `map1`, and its
    result is `map1`s result, so we can now write the type of `foo`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`foo`的两个参数是`map1`的第2个和第3个参数，其结果是`map1`的结果，因此我们现在可以写出`foo`的类型：
- en: '[PRE7]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This should help you understand why, for example, this will cause a type error:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该可以帮助你理解为什么，例如，这会导致类型错误：
- en: '[PRE8]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'and why this is valid:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以及为什么这是有效的：
- en: '[PRE9]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Side-note: Names are importantTuesday, January 17th'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附注：名称很重要，星期二，1月17日
- en: 'An important “discovery” in computer science is that we *don’t* need names
    for every intermediate sub-expression — for example, in almost any language we
    can write the equivalent of:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机科学中的一个重要“发现”是，我们*不*需要为每个中间子表达式命名 —— 例如，在几乎任何语言中，我们都可以写出等价的代码：
- en: '[PRE10]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: instead of
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是
- en: '[PRE11]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Such languages are put in contrast to assembly languages, and were all put under
    the generic label of “high level languages”.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语言与汇编语言形成对比，并且全部都被归类为“高级语言”。
- en: (Here’s an interesting idea — why not do the same for function values?)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: （这是一个有趣的想法 —— 为什么不对函数值做同样的事情呢？）
