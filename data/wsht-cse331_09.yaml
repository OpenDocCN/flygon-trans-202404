- en: CSE 331 Software Design and Implementation
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: CSE 331软件设计与实现
- en: How to Debug
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何调试
- en: 'Contents:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 内容：
- en: '[Introduction](#intro)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[介绍](#intro)'
- en: '[Localizing the failure](#localize)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[定位故障](#localize)'
- en: '[Understanding the failure](#understand)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解故障](#understand)'
- en: '[Fixing the bug](#fix)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[修复错误](#fix)'
- en: '[Hints for debugging](#Hints-debugging)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[调试提示](#Hints-debugging)'
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Debugging is the process of understanding why your code is erroneous, then fixing
    the code. You typically begin debugging after you have written [tests](testing.html)
    and one of the tests fails, or after a user reports a bug to you.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是理解代码为何出错，然后修复代码的过程。通常在编写[测试](testing.html)后一个测试失败，或用户向你报告错误后，你开始调试。
- en: 'You should think of debugging as several separate steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该将调试视为几个独立的步骤：
- en: determine what part of your code is defective
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定代码的哪部分有问题
- en: determine why that code is defective
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定代码为何有问题
- en: change the code to fix the defect
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改代码以修复缺陷
- en: This document addresses each of these three steps in turn.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本文依次讨论了这三个步骤。
- en: Localizing the failure
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定位故障
- en: To “localize” a failure is to determine which parts of your code might be defective
    and which are correct, so that you can focus your attention just on the places
    the defect might be.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “定位”故障是确定代码的哪些部分可能有问题，哪些是正确的，这样你就可以将注意力集中在可能有问题的地方。
- en: 1\. Your testing framework, such as JUnit, will generally inform you what test
    case is failing. Since you know what code is executed by that test case, you have
    narrowed down the parts of your code that might be buggy.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 你的测试框架，如JUnit，通常会告诉你哪个测试用例失败了。由于你知道该测试用例执行了哪些代码，你已经缩小了可能有问题的代码部分。
- en: You might want to narrow down the problem more. For example, a given test case
    might execute multiple methods in your code, and you might want to know which
    one of them is buggy. A less common reason is that the testing framework does
    not indicate which test fails, which could happen when your code suffers an infinite
    loop. (See below for more about this situation.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想进一步缩小问题的范围。例如，给定的测试用例可能在你的代码中执行多个方法，你可能想知道其中哪个有问题。一个不太常见的原因是测试框架没有指示哪个测试失败，这可能发生在你的代码陷入无限循环时。（有关此情况的更多信息，请参见下文。）
- en: A good way to further isolate the problem is by writing more tests. If you have
    a large test that fails for a reason you do not understand, then create new tests,
    each of which exercises just part of the functionality of the original test. Then,
    run those tests to see which part is problematic. An advantage of this is that
    you can re-run your new tests as often as you like, and they will be of value
    in the future.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步隔离问题的好方法是编写更多的测试。如果你有一个大型测试因你不理解的原因而失败，那么创建新的测试，每个测试只测试原始测试功能的一部分。然后运行这些测试，看看哪个部分有问题。这样做的好处是你可以随意重新运行新的测试，并且它们将在未来有价值。
- en: Another way to isolate the problem is to execute the test step-by-step, manually
    observe the values it computes, and decide whether those results are correct.
    This can be a quick way to reduce the scope of your investigation, because it
    doesn't require you to write new tests. On the other hand, it can be tedious,
    you can easily make errors, and you may have to repeat that manual effort many
    times rather than being able to easily re-run a test. It's typically a good idea
    to start with this “manually observe the execution” strategy — then, if it doesn't
    yield insight quickly, you should create tests.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种隔离问题的方法是逐步执行测试，手动观察它计算的值，并决定这些结果是否正确。这是减少调查范围的快速方法，因为它不需要你编写新的测试。另一方面，这可能会很烦人，你可能会轻易出错，并且可能不得不重复这种手动努力多次，而不是能够轻松重新运行测试。通常建议从这种“手动观察执行”策略开始——然后，如果不能迅速得出结论，你应该创建测试。
- en: Executing the test step-by-step can be done in several ways.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步执行测试可以通过几种方式完成。
- en: Play computer and manually execute your code with paper and pencil.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扮演计算机的角色，用纸和铅笔手动执行你的代码。
- en: Use the debugger to step through your program one statement at a time, examining
    the values computed as you go.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用调试器逐条执行程序，检查计算���值。
- en: Add logging (print statements) to your program that output key values, run the
    program, and then examine the console log with all the output. Common places to
    add logging are the beginning and end of methods.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向程序添加日志（打印语句）输出关键数值，运行程序，然后检查带有所有输出的控制台日志。常见的添加日志的地方是方法的开头和结尾。
- en: Any of these approaches is also useful for debugging an infinite loop. If you
    use logging, the console output will indicate which functions or tests started
    but never completed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 任何这些方法对于调试无限循环也是有用的。如果你使用日志记录，控制台输出将指示哪些函数或测试已启动但从未完成。
- en: Understanding the failure
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解失败
- en: To determine why the test case is failing, your best approach is manual reasoning
    about all the parts of the code that are executed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定测试用例失败的原因，最好的方法是手动推理所有执行的代码部分。
- en: For example, suppose that you are debugging an infinite loop. What is the decrementing
    function for the loop? Can you show that it is reduced every time through the
    loop and that the loop exits when it is minimal? What is the loop invariant? Can
    you show it is maintained?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你正在调试一个无限循环。该循环的递减函数是什么？你能展示每次循环时它都减少，并且当它最小时循环退出吗？循环不变量是什么？你能展示它是如何保持的吗？
- en: If you are debugging an incorrect computed value, then similar reasoning approaches
    apply.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在调试一个计算错误的值，那么类似的推理方法也适用。
- en: 'If you have trouble with reasoning, you might find it helpful to execute the
    test case manually and examine the values computed. This may give you the insight
    to return to manual reasoning. To execute the test case manually, you can play
    computer, simulating the execution of the test case with paper and pencil. You
    can also use the debugger to help with this: the debugger can execute your code
    one line at a time, which lets you observe your code''s execution in a way similar
    to you playing computer. Playing computer or running the debugger will yield the
    same result as the actual execution that is freezing up your computer.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在推理方面遇到困难，可能会发现手动执行测试用例并检查计算出的值会有所帮助。这可能会让你回到手动推理。要手动执行测试用例，你可以扮演计算机的角色，用纸和铅笔模拟执行测试用例。你也可以使用调试器来帮助：调试器可以逐行执行你的代码，让你观察代码的执行方式，类似于你扮演计算机。扮演计算机或运行调试器将产生与实际执行冻结计算机的相同结果。
- en: Fixing the bug
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修复错误
- en: To correct a defect, you should follow the same process as you do when writing
    code in the first place. In fact, in many cases the best approach, when faced
    with confusing, buggy code, is to throw it out and start over in a disciplined
    way with a better design.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要纠正一个缺陷，你应该遵循与首次编写代码时相同的过程。事实上，在许多情况下，当面对令人困惑、有错误的代码时，最好的方法是将其丢弃，并以更好的设计纪律性地重新开始。
- en: Hints for debugging
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试提示
- en: One good way to go about debugging is to construct an argument that states that
    the output that you saw is impossible. Oftentimes, just stating this argument
    will make clear where it is wrong. Or, you may find that you can't make the argument,
    in which case you can determine an input that does produce that output. If you
    can make the argument, then you can examine it for mistaken assumptions or incorrect
    logic. If you can make the argument but can't determine why it is incorrect, then
    you can present it to someone who can help you (such as the course staff).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 进行调试的一个好方法是构建一个论点，说明你看到的输出是不可能的。通常，仅仅陈述这个论点就会清楚地表明哪里出错了。或者，你可能会发现自己无法提出这个论点，这时你可以确定一个能产生该输出的输入。如果你能提出这个论点，那么你可以检查其中的错误假设或不正确的逻辑。如果你能提出这个论点但无法确定为什么它是错误的，那么你可以将其提交给可以帮助你的人（比如课程工作人员）。
- en: In any event, please don't blindly write a lot of tests — this is a terrible
    use of your time! Instead, follow the scientific method. First form a hypothesis
    that is grounded in what you know so far, then perform an experiment to test the
    hypothesis. The experiment might involve writing a test, but don't write a test
    if you don't have a concrete reason for believing why it might fail or otherwise
    yield insight.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，请不要盲目地编写大量测试 —— 这是对你时间的可怕浪费！相反，请遵循科学方法。首先提出一个根据你目前所知的假设，然后进行实验来测试这个假设。实验可能涉及编写一个测试，但如果你没有一个具体的理由相信它可能失败或产生其他见解，就不要编写测试。
- en: Before you start debugging, it is worthwhile to fix all style and documentation
    weakenesses in your program. You may find that doing so fixes errors; even if
    it does not, it is likely to help you to understand your design better and may
    give insight into its flaws. Cleaning up your code will also make it easier for
    other people to help you.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始调试之前，值得修复程序中所有的样式和文档弱点。你可能会发现这样做会修复错误；即使没有修复，这样做很可能会帮助你更好地理解你的设计，并可能揭示其缺陷。清理代码也会使其他人更容易帮助你。
