- en: 'Reading 25: Graphical User Interfaces'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读25：图形用户界面
- en: Software in 6.005
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.005中的软件
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| 免于错误 | 易于理解 | 准备好改变 |'
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 今天正确，未来未知时也正确。 | 与未来的程序员清晰沟通，包括未来的自己。 | 设计以适应变化，无需重写。 |'
- en: Objectives
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目标
- en: 'Today we’ll take a high-level look at the software architecture of GUI software,
    focusing on the design patterns that have proven most useful. Three of the most
    important patterns are:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们将高层次地审视GUI软件的软件架构，重点关注已被证明最有用的设计模式。其中三个最重要的模式是：
- en: the view tree, which is a central feature in the architecture of every important
    GUI toolkit;
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图树，是每个重要GUI工具包架构中的核心特性之一；
- en: the model-view-controller pattern, which separates input, output, and data;
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型-视图-控制器模式，将输入、输出和数据分离；
- en: the listener pattern, which is essential to decoupling the model from the view
    and controller.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听器模式，对于解耦模型与视图和控制器至关重要。
- en: View Tree
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图树
- en: '![a graphical user interface with views labeled](http://web.mit.edu/6.005/www/fa16/classes/25-graphical-user-interfacesfigures/view-tree-screenshot.png)
    ![snapshot diagram of the view tree](http://web.mit.edu/6.005/www/fa16/classes/25-graphical-user-interfacesfigures/view-tree-snapshot.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![一个带有标签的图形用户界面](http://web.mit.edu/6.005/www/fa16/classes/25-graphical-user-interfacesfigures/view-tree-screenshot.png)
    ![视图树的快照图](http://web.mit.edu/6.005/www/fa16/classes/25-graphical-user-interfacesfigures/view-tree-snapshot.png)'
- en: Graphical user interfaces are composed of view objects, each of which occupies
    a certain portion of the screen, generally a rectangular area called its bounding
    box. The view concept goes by a variety of names in various UI toolkits. In [Java
    Swing](https://en.wikipedia.org/wiki/Swing_(Java)), they’re `JComponent` objects;
    in HTML, they’re elements or nodes; in other toolkits, they may be called widgets,
    controls, or interactors.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图形用户界面由视图对象组成，每个对象占据屏幕的一部分，通常是一个被称为其边界框的矩形区域。在各种UI工具包中，视图概念以各种名称命名。在[Java Swing](https://en.wikipedia.org/wiki/Swing_(Java))中，它们是`JComponent`对象；在HTML中，它们是元素或节点；在其他工具包中，它们可能被称为小部件、控件或交互器。
- en: 'This leads to the first important pattern we’ll talk about today: the view
    tree. Views are arranged into a hierarchy of containment, in which some views
    contain other views. Typical containers are windows, panels, and toolbars. The
    view tree is not just an arbitrary hierarchy, but is in fact a spatial one: child
    views are nested inside their parent’s bounding box.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了我们今天将要讨论的第一个重要模式：视图树。视图被排列成包含的层次结构，其中一些视图包含其他视图。典型的容器有窗口、面板和工具栏。视图树不仅仅是一个任意的层次结构，实际上是一个空间层次结构：子视图嵌套在其父视图的边界框内。
- en: How the View Tree is Used
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用视图树
- en: 'Virtually every GUI system has some kind of view tree. The view tree is a powerful
    structuring idea, which is loaded with responsibilities in a typical GUI:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个GUI系统都有一种视图树。视图树是一个强大的结构化思想，在典型的GUI中承担着很多责任：
- en: '**Output**. Views are responsible for displaying themselves, and the view tree
    directs the display process. GUIs change their output by mutating the view tree.
    For example, to show a new set of photos in a photo album GUI, the current thumbnails
    are removed from the view tree and a new set of thumbnails is added in their place.
    A redraw algorithm built into the GUI toolkit automatically redraws the affected
    parts of the subtree. In Java Swing, every view in the tree has a `paint()` method
    that knows how to draw itself on the screen. The repaint process is driven by
    calling `paint()` on the root of the tree, which recursively calls `paint()` down
    through all the descendent nodes of the view tree.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**。视图负责显示自己，并且视图树指导显示过程。GUI通过改变视图树来改变输出。例如，在照片相册GUI中显示一组新照片，当前的缩略图将从视图树中移除，然后新的缩略图将添加到相同位置。GUI工具包中内置的重绘算法会自动重绘受影响的子树部分。在Java
    Swing中，树中的每个视图都有一个`paint()`方法，知道如何在屏幕上绘制自己。重新绘制过程通过在树的根上调用`paint()`来驱动，该方法递归调用所有视图树的后代节点的`paint()`方法。'
- en: '**Input**. Views can have input handlers, and the view tree controls how mouse
    and keyboard input is processed. More on this in a moment.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**。视图可以有输入处理程序，而视图树控制鼠标和键盘输入的处理方式。稍后会详细介绍。'
- en: '**Layout**. The view tree controls how the views are laid out on the screen,
    i.e. how their bounding boxes are assigned. An automatic layout algorithm automatically
    calculates positions and sizes of views. Specialized containers (like [`JSplitPane`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/JSplitPane.html),
    [`JScrollPane`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/JScrollPane.html))
    do layout themselves. More generic containers ([`JPanel`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/JPanel.html),
    [`JFrame`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/JFrame.html))
    delegate layout decisions to a layout manager (e.g. [`GroupLayout`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/GroupLayout.html),
    [`BorderLayout`](http://docs.oracle.com/javase/8/docs/api/?java/awt/BorderLayout.html),
    [`BoxLayout`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/BoxLayout.html),
    …).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**布局**。视图树控制视图在屏幕上的布局，即分配它们的边界框的方式。自动布局算法会自动计算视图的位置和大小。专用容器（如[`JSplitPane`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/JSplitPane.html)，[`JScrollPane`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/JScrollPane.html)）自行布局。更通用的容器（[`JPanel`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/JPanel.html)，[`JFrame`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/JFrame.html)）将布局决策委托给布局管理器（例如[`GroupLayout`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/GroupLayout.html)，[`BorderLayout`](http://docs.oracle.com/javase/8/docs/api/?java/awt/BorderLayout.html)，[`BoxLayout`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/BoxLayout.html)，……）。'
- en: reading exercises
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: View Tree
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 视图树
- en: 'Swing’s view tree type, [`JComponent`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/JComponent.html),
    is a recursive data type. Here’s a partial data type definition for it:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Swing 的视图树类型，[`JComponent`](http://docs.oracle.com/javase/8/docs/api/?javax/swing/JComponent.html)，是一个递归数据类型。这里是它的部分数据类型定义：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This definition is partial because it omits some of the details of the reps
    (e.g. `JLabel` has many fields, not just a string label), and because it omits
    many of the variant classes that implement `JComponent`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义是部分的，因为它省略了一些 reps 的细节（例如，`JLabel` 不仅有一个字符串标签，还有许多字段），并且因为它省略了许多实现 `JComponent`
    的变体类。
- en: Let’s fill in some more of the “…” on the righthand side of this definition.
    To answer the questions below, you may need to look at the documentation for the
    particular classes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们填写这个定义右侧的“…”。为了回答下面的问题，您可能需要查看特定类的文档。
- en: (missing answer)(missing answer)(missing answer)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: （答案缺失）（答案缺失）（答案缺失）
- en: (missing explanation)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: （解释缺失）
- en: (missing answer)(missing answer)(missing answer)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: （答案缺失）（答案缺失）（答案缺失）
- en: (missing explanation)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: （解释缺失）
- en: (missing answer)(missing answer)(missing answer)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: （答案缺失）（答案缺失）（答案缺失）
- en: (missing explanation)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: （解释缺失）
- en: Input Handling
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入处理
- en: 'Input is handled somewhat differently in GUIs than we’ve been handling it in
    parsers and servers. In those systems, we’ve seen a single parser that peels apart
    the input and decides how to direct it to different modules of the program. If
    a GUI were written that way, it might look like this (in pseudocode):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GUI 中，输入的处理方式与我们在解析器和服务器中处理的方式略有不同。在那些系统中，我们看到了一个单独的解析器，它会解析输入并决定如何将其定向到程序的不同模块。如果以这种方式编写
    GUI，它可能会像这样（伪代码中）：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In a GUI, we don’t directly write this kind of method, because it’s not modular
    – it mixes up responsibilities for button, listbox, and textbox all in one place.
    Instead, GUIs exploit the spatial separation provided by the view tree to provide
    functional separation as well. Mouse clicks and keyboard events are distributed
    around the view tree, depending on where they occur.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GUI 中，我们不直接编写这种方法，因为它不是模块化的 - 它混合了按钮、列表框和文本框的责任。相反，GUI 利用视图树提供的空间分隔来提供功能分离。鼠标点击和键盘事件根据它们发生的位置分布在视图树周围。
- en: 'GUI input event handling is an instance of the **Listener pattern** (also known
    as Publish-Subscribe). In the Listener pattern:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: GUI 输入事件处理是**监听器模式**（也称为发布-订阅）的一个实例。在监听器模式中：
- en: An event source generates a stream of discrete events, which correspond to state
    transitions in the source.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件源生成一系列离散事件，这些事件对应于源中的状态转换。
- en: One or more listeners register interest (subscribe) to the stream of events,
    providing a function to be called when a new event occurs.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个或多个监听器注册对事件流的兴趣（订阅），提供在发生新事件时调用的函数。
- en: 'In this case, the mouse is the event source, and the events are changes in
    the state of the mouse: its x,y position or the state of its buttons (whether
    they are pressed or released). Events often include additional information about
    the transition (such as the x,y position of mouse), which might be bundled into
    an event object or passed as parameters.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，鼠标是事件源，事件是鼠标状态的变化：它的 x、y 位置或其按钮的状态（它们是否被按下或释放）。事件通常包括有关过渡的其他信息（例如鼠标的
    x、y 位置），这些信息可能被捆绑到事件对象中或作为参数传递。
- en: When an event occurs, the event source distributes it to all subscribed listeners,
    by calling their callback methods.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当事件发生时，事件源通过调用它们的回调方法将其分发给所有订阅的监听器。
- en: 'The control flow through a graphical user interface proceeds like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图形用户界面的控制流程如下：
- en: A top-level event loop reads input from mouse and keyboard. In Java Swing, and
    most graphical user interface toolkits, this loop is actually hidden from you.
    It’s buried inside the toolkit, and listeners appear to be called magically.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶层事件循环从鼠标和键盘读取输入。在 Java Swing 和大多数图形用户界面工具包中，这个循环实际上对你是隐藏的。它被隐藏在工具包内部，监听器似乎被神奇地调用。
- en: For each input event, it finds the right view in the tree (by looking at the
    x,y position of the mouse) and sends the event to that view’s listeners.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个输入事件，它通过查看鼠标的 x、y 位置在树中找到正确的视图，并将事件发送给该视图的监听器。
- en: Each listener does its thing (which might involve e.g. modifying objects in
    the view tree), and then *returns immediately to the event loop*.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个监听器都会执行其操作（可能涉及修改视图树中的对象），然后*立即返回到事件循环*。
- en: The last part – listeners return to the event loop as fast as possible – is
    very important, because it preserves the responsiveness of the user interface.
    We’ll come back to this later in the reading.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一部分 - 监听器尽快返回到事件循环中 - 非常重要，因为它保持了用户界面的响应性。我们稍后会在阅读中回到这个问题。
- en: 'The Listener pattern isn’t just used for low-level input events like mouse
    clicks and keyboard keypresses. Many GUI objects generate their own higher-level
    events, often as a result of some combination of low-level input events. For example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 监听器模式不仅用于低级输入事件（如鼠标点击和键盘按键）。许多 GUI 对象生成它们自己的更高级事件，通常是作为一些低级输入事件的组合的结果。例如：
- en: '`JButton` sends an action event when it is pressed (whether by mouse or keyboard)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当按下 `JButton` 时，它发送一个动作事件（无论是通过鼠标还是键盘）
- en: '`JList` sends a selection event when the selected element changes (whether
    by mouse or by keyboard)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当选定元素更改时，`JList` 发送一个选择事件（无论是通过鼠标还是键盘）
- en: '`JTextField` sends change events when the text inside it changes for any reason'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当文本框内的文本因任何原因而更改时，`JTextField` 发送更改事件
- en: A button can be pressed either by the mouse (with a mouse down and mouse up
    event) or by the keyboard (which is important for people who can’t use a mouse,
    like blind users). So you should always listen for these high-level events, not
    the low-level input events. Use an [`ActionListener`](http://docs.oracle.com/javase/8/docs/api/?java/awt/event/ActionListener.html)
    to respond to a `JButton` press, not a mouse listener.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮可以通过鼠标（通过鼠标按下和鼠标释放事件）或键盘（对于无法使用鼠标的人，如盲人用户）来按下。因此，您应该始终监听这些高级事件，而不是低级输入事件。使用
    [`ActionListener`](http://docs.oracle.com/javase/8/docs/api/?java/awt/event/ActionListener.html)
    来响应 `JButton` 的按下，而不是鼠标监听器。
- en: reading exercises
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Listeners
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 监听器
- en: Put the following items in order according to when they would happen during
    the execution of a Swing graphical user interface.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Swing 图形用户界面执行时发生的顺序，将以下项目按顺序排列。
- en: '`launchButton = new JButton("Launch the Missiles");`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`launchButton = new JButton("发射导弹");`'
- en: <select class="form-control"><option>1</option>,<option>2</option>,<option>3</option>,<option>4</option></select>(missing
    answer)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>1</option>,<option>2</option>,<option>3</option>,<option>4</option></select>（缺失答案）
- en: '`launchButton.addActionListener(launchMissiles);`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`launchButton.addActionListener(launchMissiles);`'
- en: <select class="form-control"><option>1</option>,<option>2</option>,<option>3</option>,<option>4</option></select>(missing
    answer)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>1</option>,<option>2</option>,<option>3</option>,<option>4</option></select>（缺失答案）
- en: '`launchMissiles`’ `actionPerformed()` method is called'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `launchMissiles` 的 `actionPerformed()` 方法
- en: <select class="form-control"><option>1</option>,<option>2</option>,<option>3</option>,<option>4</option></select>(missing
    answer)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>1</option>,<option>2</option>,<option>3</option>,<option>4</option></select>（缺失答案）
- en: Mouse click event on the launch button is handled by the Swing event loop
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标点击启动按钮的事件由 Swing 事件循环处理。
- en: <select class="form-control"><option>1</option>,<option>2</option>,<option>3</option>,<option>4</option></select>(missing
    answer)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <select class="form-control"><option>1</option>,<option>2</option>,<option>3</option>,<option>4</option></select>（缺失答案）
- en: (missing explanation)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Separating Frontend from Backend
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将前端与后端分离开来
- en: We’ve seen how GUI programs are structured around a view tree, and how input
    events are handled by attaching listeners to views. This is the start of a separation
    of concerns – output handled by views, and input handled by listeners.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到 GUI 程序是围绕视图树结构组织的，以及如何通过将监听器附加到视图来处理输入事件。这是关注点分离的开始 - 输出由视图处理，输入由监听器处理。
- en: But we’re still missing the application itself – the backend that represents
    the data and logic that the user interface is showing and editing. (Why do we
    want to separate this from the user interface?)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们仍然缺少应用程序本身 - 表示用户界面显示和编辑的数据和逻辑的后端。 （为什么我们要将其与用户界面分离？）
- en: The **Model-View-Controller pattern** has this separation of concerns as its
    primary goal. It separates the user interface frontend from the application backend,
    by putting backend code into the model and frontend code into the view and controller.
    MVC also separates input from output; the controller is supposed to handle input,
    and the view is supposed to handle output.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Model-View-Controller 模式**的主要目标是将关注点分离。它通过将后端代码放入模型中并将前端代码放入视图和控制器中，将用户界面前端与应用程序后端分离开来。MVC
    还将输入与输出分离; 控制器应该处理输入，而视图应该处理输出。'
- en: '![Model-View-Controller pattern](http://web.mit.edu/6.005/www/fa16/classes/25-graphical-user-interfacesfigures/mvc.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Model-View-Controller 模式](http://web.mit.edu/6.005/www/fa16/classes/25-graphical-user-interfacesfigures/mvc.png)'
- en: The **model** is responsible for maintaining application-specific data and providing
    access to that data. Models are often mutable, and they provide methods for changing
    the state safely, preserving its representation invariants. OK, all mutable objects
    do that. But a model must also notify its clients when there are changes to its
    data, so that dependent views can update their displays, and dependent controllers
    can respond appropriately. Models do this notification using the listener pattern,
    in which interested views and controllers register themselves as listeners for
    change events generated by the model.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型（Model）**负责维护特定于应用程序的数据并提供对该数据的访问。模型通常是可变的，并且它们提供了用于安全更改状态的方法，保留其表示不变式。好吧，所有可变对象都是这样做的。但是模型还必须在其数据发生变化时通知其客户端，以便依赖视图可以更新其显示，依赖控制器可以做出适当的响应。模型使用监听器模式进行此通知，其中感兴趣的视图和控制器注册自己作为模型生成的更改事件的监听器。'
- en: '**View** objects are responsible for output. A view usually occupies some chunk
    of the screen, usually a rectangular area. Basically, the view queries the model
    for data and draws the data on the screen. It listens for changes from the model
    so that it can update the screen to reflect those changes.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**View（视图）**对象负责输出。视图通常占据屏幕的某个区域，通常是一个矩形区域。基本上，视图会向模型查询数据，并将数据绘制在屏幕上。它会监听来自模型的变化，以便能够更新屏幕以反映这些变化。'
- en: Finally, the **controller** handles the input. It receives keyboard and mouse
    events, and instructs the model to change accordingly.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**控制器（controller）**处理输入。它接收键盘和鼠标事件，并指示模型相应地进行更改。
- en: '![Model-View-Controller pattern as shown in a JTextField](http://web.mit.edu/6.005/www/fa16/classes/25-graphical-user-interfacesfigures/mvc-textfield.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Model-View-Controller 模式在 JTextField 中的显示](http://web.mit.edu/6.005/www/fa16/classes/25-graphical-user-interfacesfigures/mvc-textfield.png)'
- en: A simple example of the MVC pattern is a text field. The figure at right shows
    Java Swing’s text field, called `JTextField`. Its model is a mutable string of
    characters. The view is an object that draws the text on the screen (usually with
    a rectangle around it to indicate that it’s an editable text field). The controller
    is an object that receives keystrokes typed by the user and inserts them into
    the mutable string.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: MVC 模式的一个简单示例是文本字段。右侧的图显示了 Java Swing 的文本字段，称为 `JTextField`。其模型是一个可变的字符字符串。视图是一个对象，用于在屏幕上绘制文本（通常用矩形框围绕它以表示它是一个可编辑的文本字段）。控制器是一个接收用户键入的按键并将其插入可变字符串的对象。
- en: Instances of the MVC pattern appear at many scales in GUI software. At a higher
    level, this text field might be part of a view (like an address book editor),
    with a different controller listening to it (for text-changed events), for a different
    model (like the address book). But when you drill down to a lower level, the text
    field itself is an instance of MVC.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: MVC模式的实例在GUI软件中出现在许多规模上。在更高的层面上，这个文本字段可能是视图的一部分（如地址簿编辑器），有一个不同的控制器监听它（用于文本更改事件），有一个不同的模型（如地址簿）。但是当您深入到更低的层次时，文本字段本身就是MVC的一个实例。
- en: '![Model-View-Controller pattern as shown in a filesystem browser](http://web.mit.edu/6.005/www/fa16/classes/25-graphical-user-interfacesfigures/mvc-filesystem.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![模型-视图-控制器模式在文件系统浏览器中的显示](http://web.mit.edu/6.005/www/fa16/classes/25-graphical-user-interfacesfigures/mvc-filesystem.png)'
- en: Here’s a larger example, in which the view is a filesystem browser (like the
    Mac Finder or Windows Explorer), the model is the disk filesystem, and the controller
    is an input handler that translates the user’s keystrokes and mouse clicks into
    operations on the model and view.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个更大的例子，其中视图是一个文件系统浏览器（类似于Mac Finder或Windows资源管理器），模型是磁盘文件系统，控制器是一个输入处理程序，将用户的按键和鼠标点击转换为对模型和视图的操作。
- en: The separation of model and view has several benefits. First, it allows the
    interface to have multiple views showing the same application data. For example,
    a database field might be shown in a table and in an editable form at the same
    time. Second, it allows views and models to be reused in other applications. The
    MVC pattern enables the creation of user interface toolkits, which are libraries
    of reusable views. Java Swing is such a toolkit. You can easily reuse view classes
    from this library (like `JButton` and `JTree`) while plugging your own models
    into them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 模型和视图的分离有几个好处。首先，它允许界面具有显示相同应用程序数据的多个视图。例如，数据库字段可以同时显示在表格和可编辑表单中。其次，它允许视图和模型在其他应用程序中被重用。MVC模式实现了用户界面工具包的创建，这些工具包是可重用视图的库。Java
    Swing就是这样一个工具包。您可以轻松地从这个库中重用视图类（如`JButton`和`JTree`），同时将自己的模型插入其中。
- en: reading exercises
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Model-View-Controller
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 模型-视图-控制器
- en: Thinking about the separation of concerns implied by the model-view-controller
    pattern, which of the following design decisions make sense, knowing nothing else
    about the programs in question?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑模型-视图-控制器模式所暗示的关注点分离，不知道有关问题程序的其他信息，哪些设计决策是有意义的？
- en: “All the data is kept in `JTextField` objects in the window, and other classes
    can look it up just by getting a reference to the `JTextField` and calling `getText()`.”
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: “所有数据都保存在窗口中的`JTextField`对象中，其他类可以通过获取对`JTextField`的引用并调用`getText()`来查找它。”
- en: (missing answer)(missing answer)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: “If the view listens for ball-moved events from the pinball board, then we can
    have multiple views showing the same board.”
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: “如果视图监听来自弹球板的球移动事件，那么我们可以有多个视图显示相同的板。”
- en: (missing answer)(missing answer)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: “Let’s put the double-click listener in the model class.”
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: “让我们把双击监听器放在模型类中。”
- en: (missing answer)(missing answer)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: “Looks like the model is the best place to store the name of the pinball board.”
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: “看起来模型是存储弹球板名称的最佳位置。”
- en: (missing answer)(missing answer)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Background Processing in Graphical User Interfaces
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形用户界面中的后台处理
- en: The last major topic for today connects back to concurrency.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的最后一个主要话题与并发有关。
- en: 'First, some motivation. Why do we need to do background processing in graphical
    user interfaces? Even though computer systems are steadily getting faster, we’re
    also asking them to do more. Many programs need to do operations that may take
    some time: retrieving URLs over the network, running database queries, scanning
    a filesystem, doing complex calculations, etc.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，一些动机。为什么我们需要在图形用户界面中进行后台处理？尽管计算机系统正在变得越来越快，但我们也要求它们做更多的事情。许多程序需要执行可能需要一些时间的操作：从网络检索URL，运行数据库查询，扫描文件系统，进行复杂计算等。
- en: But graphical user interfaces are event-driven programs, which means (generally
    speaking) everything is triggered by an input event handler. For example, in a
    web browser, clicking a hyperlink starts loading a new web page. But if the click
    handler is written so that it actually retrieves the web page itself, then the
    web browser will be very painful to use. Why? Because its interface will appear
    to freeze up until the click handler finishes retrieving the web page and returns
    to the event loop. Here’s why.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 但是图形用户界面是事件驱动程序，这意味着（一般来说）一切都是由输入事件处理程序触发的。例如，在 Web 浏览器中，点击超链接会开始加载一个新的网页。但是，如果点击处理程序被编写成实际上是检索网页本身，那么
    Web 浏览器将非常难以使用。为什么？因为其界面将会在点击处理程序完成检索网页并返回到事件循环之前冻结。原因如下。
- en: 'This happens because input handling and screen repainting is all handled from
    a single thread. That thread (called the event-dispatch thread) has a loop that
    reads an input event from the queue and dispatches it to listeners on the view
    tree. When there are no input events left to process, it repaints the screen.
    But if an input handler you’ve written delays returning to this loop – because
    it’s blocking on a network read, or because it’s searching for the solution to
    a big Sudoku puzzle – then input events stop being handled, and the screen stops
    updating. So long tasks need to run in the background: on a different thread,
    not the event-dispatch thread.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为输入处理和屏幕重绘都是由单个线程处理的。该线程（称为事件分发线程）有一个循环，从队列中读取输入事件并将其分派给视图树上的监听器。当没有输入事件需要处理时，它会重新绘制屏幕。但是，如果您编写的输入处理程序延迟返回到此循环
    - 因为它在网络读取上阻塞，或者因为它正在寻找一个大数独难题的解决方案 - 那么输入事件将停止处理，屏幕将停止更新。因此，长时间运行的任务需要在后台运行：在不同的线程上，而不是事件分发线程上。
- en: In Java, the event-dispatch thread is distinct from the main thread of the program
    (see below). It is started automatically when a user interface object is created.
    As a result, every Java GUI program is automatically multithreaded. Many programmers
    don’t notice, because the main thread typically doesn’t do much in a GUI program
    – it starts creation of the view, and then the main thread just exits, leaving
    only the event-dispatch thread to do the main work of the program.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 中，事件分发线程与程序的主线程是不同的（见下文）。当创建用户界面对象时，它会自动启动。因此，每个 Java GUI 程序都自动是多线程的。许多程序员没有注意到，因为主线程在
    GUI 程序中通常不做太多事情 - 它开始创建视图，然后主线程只是退出，只留下事件分发线程来完成程序的主要工作。
- en: 'The fact that Swing programs are multithreaded by default creates risks. There’s
    very often a shared mutable datatype in your GUI: the model. If you use background
    threads to modify the model without blocking the event-dispatch thread, then you
    have to make sure your data structure is threadsafe.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Swing 程序默认是多线程的，这会带来风险。在您的 GUI 中很常见的一个共享可变数据类型是模型。如果您使用后台线程修改模型而不阻塞事件分发线程，那么您必须确保您的数据结构是线程安全的。
- en: But another important shared mutable datatype in your GUI is the view tree.
    Java Swing’s view tree is not threadsafe. In general, you cannot safely call methods
    on a Swing object from anywhere but the event-dispatch thread.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在您的 GUI 中，另一个重要的共享可变数据类型是视图树。Java Swing 的视图树不是线程安全的。一般来说，您不能安全地从任何地方调用 Swing
    对象的方法，除非是在事件分发线程中。
- en: The view tree is a big meatball of shared state, and the Swing specification
    doesn’t guarantee that there’s any lock protecting it. Instead the view tree is
    **confined to the event-dispatch thread**, by specification. So it’s ok to access
    view objects from the event-dispatch thread (i.e., in response to input events),
    but the Swing specification forbids touching – reading or writing – any `JComponent`
    objects from a different thread. See [Swing threading and the event-dispatch thread](http://www.javaworld.com/javaworld/jw-08-2007/jw-08-swingthreading.html).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 视图树是一个大的共享状态的复杂结构，并且 Swing 规范并不保证有任何锁来保护它。相反，根据规范，视图树**限定在事件分发线程**中。因此，从事件分发线程（即响应输入事件）访问视图对象是可以的，但
    Swing 规范禁止从不同线程触及 - 读取或写入 - 任何 `JComponent` 对象。请参阅[Swing threading and the event-dispatch
    thread](http://www.javaworld.com/javaworld/jw-08-2007/jw-08-swingthreading.html)。
- en: In the actual Swing implementation, there is one big lock ([`Component.getTreeLock()`](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getTreeLock--))
    but only some Swing methods use it, so it’s not effective as a synchronization
    mechanism.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际的 Swing 实现中，有一个大锁（[`Component.getTreeLock()`](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getTreeLock--)），但只有一些
    Swing 方法使用它，所以它不是一个有效的同步机制。
- en: 'The safe way to access the view tree is to do it from the event-dispatch thread.
    So Swing takes a clever approach: it uses the event queue itself as a message-passing
    queue. In other words, you can put your own custom messages on the event queue,
    the same queue used for mouse clicks, keypresses, button action events, and so
    forth. Your custom message is actually a piece of executable code, an object that
    implements `Runnable`, and you put it on the queue using [`SwingUtilities.invokeLater`](https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingUtilities.html#invokeLater-java.lang.Runnable-).
    For example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 安全地访问视图树的方法是从事件分派线程中进行。 因此，Swing 采用了一种巧妙的方法：它将事件队列本身用作消息传递队列。 换句话说，你可以将自己的定制消息放在事件队列上，与鼠标点击、按键、按钮动作事件等相同的队列。
    你的自定义消息实际上是一段可执行代码，一个实现了 `Runnable` 接口的对象，你可以使用 [`SwingUtilities.invokeLater`](https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingUtilities.html#invokeLater-java.lang.Runnable-)
    将它放在队列上。 例如：
- en: '[PRE2]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `invokeLater()` drops this `Runnable` object at the end of the queue, and
    when Swing’s event loop reaches it, it simply calls `run()`. Thus the body of
    `run()` ends up run by the event-dispatch thread, where it can safely call observers
    and mutators on the view tree.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`invokeLater()` 在队列末尾放置了这个 `Runnable` 对象，当 Swing 的事件循环到达它时，它简单地调用 `run()`。
    因此，`run()` 的主体最终由事件分派线程运行，它可以安全地调用视图树上的观察者和变化器。'
- en: 'In the Java Tutorials, read:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 教程中阅读：
- en: '[Concurrency in Swing](http://docs.oracle.com/javase/tutorial/uiswing/concurrency/index.html)
    (1 page)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Swing 中的并发性](http://docs.oracle.com/javase/tutorial/uiswing/concurrency/index.html)
    (1 页)'
- en: '[Initial Threads](http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html)
    (1 page)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[初始线程](http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html)
    (1 页)'
- en: '[The Event Dispatch Thread](http://docs.oracle.com/javase/tutorial/uiswing/concurrency/dispatch.html)
    (1 page)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[事件分派线程](http://docs.oracle.com/javase/tutorial/uiswing/concurrency/dispatch.html)
    (1 页)'
- en: reading exercises
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Background Processing
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 后台处理
- en: Suppose you’re using a graphical user interface written in Java Swing. You press
    a button, and the UI just locks up – you can’t scroll, press other buttons, even
    type anything into a textbox. Which of the following are likely explanations?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在使用用 Java Swing 编写的图形用户界面。 你按下一个按钮，UI 就死锁了 - 你不能滚动，按其他按钮，甚至输入任何内容到文本框。 以下哪些是可能的解释？
- en: '**Deadlock** – two different parts of the UI are trying to acquire locks on
    the view tree, and are deadlocking with each other.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**死锁** - UI 的两个不同部分试图在视图树上获取锁，并且彼此死锁。'
- en: (missing answer)(missing answer)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: '**Event queue blocking** – the event loop is waiting for an input event on
    the event queue, but the queue is empty, so nothing is happening in the program.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件队列阻塞** - 事件循环正在等待事件队列上的输入事件，但队列为空，因此程序中没有任何操作。'
- en: (missing answer)(missing answer)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: '**Too much work in the event-dispatch thread** – the UI is doing a lot of computation
    in response to your button press, and it hasn’t returned to the event loop to
    handle more input events yet.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件分派线程中的工作过多** - UI 在响应您的按钮按下时正在进行大量计算，并且它还没有返回到事件循环以处理更多的输入事件。'
- en: (missing answer)(missing answer)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: '**Network delay on the event-dispatch thread** – the UI is trying to fetch
    data from the network in response to your button press, and it hasn’t returned
    to the event loop to handle more input events yet.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件分派线程上的网络延迟** - UI 正试图在响应您的按钮按下时从网络获取数据，并且它还没有返回到事件循环以处理更多的输入事件。'
- en: (missing answer)(missing answer)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: The view tree organizes the screen into a tree of nested rectangles, and it
    is used in dispatching input events as well as displaying output.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图树将屏幕组织成嵌套矩形的树，它用于分派输入事件以及显示输出。
- en: The Listener pattern sends a stream of events (like mouse or keyboard events,
    or button action events) to registered listeners.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听器模式将事件流（如鼠标或键盘事件，或按钮动作事件）发送到注册的监听器。
- en: 'The Model-View-Controller pattern separates responsibilities: model = data,
    view = output, controller = input.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型-视图-控制器模式分离了责任：模型 = 数据，视图 = 输出，控制器 = 输入。
- en: Long-running processing should be moved to a background thread, but the Swing
    view tree is confined to the event-dispatch thread. So accessing Swing objects
    from another thread requires using the event loop as a message-passing queue,
    to get back to the event-dispatch thread.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长时间运行的处理应该移到后台线程，但 Swing 视图树被限制在事件调度线程中。因此，从另一个线程访问 Swing 对象需要使用事件循环作为消息传递队列，以返回到事件调度线程。
