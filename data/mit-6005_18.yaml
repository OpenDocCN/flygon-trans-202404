- en: 'Reading 18: Parser Generators'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读18：解析器生成器
- en: Software in 6.005
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.005中的软件
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| 免受错误困扰 | 易于理解 | 为变化做好准备 |'
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 今天正确，未来也正确。 | 与未来程序员清晰沟通，包括未来的你。 | 设计以适应变化而无需重写。 |'
- en: Objectives
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目标
- en: 'After today’s class, you should:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的课后，你应该：
- en: Be able to use a grammar in combination with a parser generator, to parse a
    character sequence into a parse tree
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够使用语法与解析器生成器结合，将字符序列解析为解析树
- en: Be able to convert a parse tree into a useful data type
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够将解析树转换为有用的数据类型
- en: Parser Generators
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析器生成器
- en: A *parser generator* is a good tool that you should make part of your toolbox.
    A parser generator takes a grammar as input and automatically generates source
    code that can parse streams of characters using the grammar.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*解析器生成器*是一个很好的工具，你应该将其作为工具箱的一部分。解析器生成器接受语法作为输入，并自动生成可以使用语法解析字符流的源代码。'
- en: The generated code is a *parser*, which takes a sequence of characters and tries
    to match the sequence against the grammar. The parser typically produces a *parse
    tree*, which shows how grammar productions are expanded into a sentence that matches
    the character sequence. The root of the parse tree is the starting nonterminal
    of the grammar. Each node of the parse tree expands into one production of the
    grammar. We’ll see how a parse tree actually looks in the next section.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的代码是一个*解析器*，它接受一系列字符并尝试将该序列与语法匹配。解析器通常生成一个*解析树*，显示了语法产生如何扩展为与字符序列匹配的句子。解析树的根是语法的起始非终结符。解析树的每个节点扩展为语法的一个产生式。我们将在下一节看到解析树实际上是什么样子。
- en: The final step of parsing is to do something useful with this parse tree. We
    are going to translate it into a value of a recursive data type. Recursive abstract
    data types are often used to represent an expression in a language, like HTML,
    or Markdown, or Java, or algebraic expressions. A recursive abstract data type
    that represents a language expression is called an *abstract syntax tree* (AST).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 解析的最后一步是对这个解析树执行一些有用的操作。我们将把它转换为递归数据类型的值。递归抽象数据类型通常用于表示语言中的表达式，如HTML、Markdown、Java或代数表达式。表示语言表达式的递归抽象数据类型称为*抽象语法树*（AST）。
- en: For this class, we are going to use “ParserLib”, a parser generator for Java
    that we have developed specifically for 6.005\. The parser generator is similar
    in spirit to more widely used parser generators like [Antlr](http://www.antlr.org/),
    but it has a simpler interface and is generally easier to use.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这门课程，我们将使用“ParserLib”，这是我们专门为6.005开发的Java解析器生成器。该解析器生成器在精神上类似于更广泛使用的解析器生成器，如[Antlr](http://www.antlr.org/)，但它具有更简单的界面，通常更容易使用。
- en: A ParserLib Grammar
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个ParserLib语法
- en: The code for the examples that follow can be found on GitHub as [fa16-ex18-parser-generators](https://github.com/mit6005/fa16-ex18-parser-generators).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的示例代码可以在GitHub上找到，名称为[fa16-ex18-parser-generators](https://github.com/mit6005/fa16-ex18-parser-generators)。
- en: 'Here is what our HTML grammar looks like as a ParserLib source file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的HTML语法作为ParserLib源文件的样子：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let’s break it down.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分解一下。
- en: Each ParserLib rule consists of a name, followed by a `::=`, followed by its
    definition, terminated by a semicolon. The ParserLib grammar can also include
    Java-style comments, both single line and multiline.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个ParserLib规则由一个名称组成，后跟一个`::=`，然后是其定义，以分号结尾。ParserLib语法还可以包括Java风格的注释，包括单行和多行。
- en: 'By convention, we use lower-case for non-terminals: `root`, `html`, `normal`,
    `italic`. (The ParserLib library is actually case insensitive with respect to
    non-terminal names; internally, it canonicalizes names to all-lowercase, so even
    if you don’t write all your names into lowercase, you will see them as lowercase
    when you print your grammar). Terminals are either quoted strings, like `''<i>''`,
    or names like `text` defined in terms of regular expressions over strings.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，我们使用小写字母表示非终结符：`root`、`html`、`normal`、`italic`。（ParserLib库实际上对于非终结符名称是不区分大小写的；在内部，它将名称规范化为全小写，因此即使您没有将所有名称写成小写，当您打印您的语法时，您将看到它们为小写）。终结符可以是带引号的字符串，如`'<i>'`，或者根据字符串的正则表达式定义的名称，如`text`。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`root` is the entry point of the grammar. This is the nonterminal that the
    whole input needs to match. We don’t have to call it `root`. When loading the
    grammar into our program, we will tell the library which nonterminal to use as
    the entry point.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`root`是语法的入口点。这是整个输入需要匹配的非终结符。我们不必称其为`root`。当将语法加载到我们的程序中时，我们将告诉库使用哪个非终结符作为入口点。'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This rule shows that ParserLib rules can have the alternation operator `|`,
    the repetition operators `*` and `+`, and parentheses for grouping, in the same
    way we’ve been using in the [grammars reading](../17-regex-grammars/#grammars).
    Optional parts can be marked with `?`, just like we did earlier, but this particular
    grammar doesn’t use `?`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此规则显示ParserLib规则可以具有交替运算符`|`，重复运算符`*`和`+`，以及用于分组的括号，方式与我们在[语法阅读](../17-regex-grammars/#grammars)中使用的方式相同。可选部分可以用`?`标记，就像我们之前所做的那样，但是这个特定的语法不使用`?`。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that the terminal `text` uses the notation `[^<>]` from before to represent
    all characters except `<` and `>`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，终端`text`使用之前的表示法`[^<>]`来表示除了`<`和`>`之外的所有字符。
- en: 'In general, terminal symbols do not have to be a fixed string; they can be
    a regular expression as in the example. For example, here are some other terminal
    patterns we used in the URL grammar earlier in the reading, now written in ParserLib
    syntax:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，终结符号不必是固定的字符串；它们可以是正则表达式，就像示例中的那样。例如，这里是我们在前文中使用的URL语法中使用的一些其他终结符模式，现在用ParserLib语法编写：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Whitespace
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空格
- en: Consider the grammar shown below.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑下面显示的语法。
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This grammar will accept an expression like `42+2+5`, but will reject a similar
    expression that has any spaces between the numbers and the `+` signs. We could
    modify the grammar to allow white space around the plus sign by modifying the
    production rule for `sum` like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此语法将接受像`42+2+5`这样的表达式，但将拒绝类似的表达式，其中数字和`+`符号之间有任何空格。我们可以修改`sum`的产生规则以允许加号周围的空白，如下所示：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: However, this can become cumbersome very quickly once the grammar becomes more
    complicated. ParserLib allows a shorthand to indicate that certain kinds of characters
    should be skipped.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，一旦语法变得更复杂，这可能会变得很麻烦。ParserLib允许使用一种简写来指示应跳过某些类型的字符。
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `@skip whitespace` notation indicates that any text matching the whitespace
    nonterminal should be skipped in between the parts that make up the definitions
    of `sum` `root` and `primitive`. Two things are important to note. First, there
    is nothing special about `whitespace`. The `@skip` directive works with any nonterminal
    or terminal defined in the grammar. Second, note how the definition of `number`
    was intentionally left outside the `@skip` block. This is because we want to accept
    expressions like `42 + 2 + 5`, but we want to reject expressions like `4 2 + 2
    + 5`. In the rest of the text, we refer to this grammar as the *IntegerExpression*
    grammar.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`@skip whitespace`表示应该跳过与空格非终结符匹配的任何文本，这些文本位于构成`sum` `root`和`primitive`定义的部分之间。有两件事值得注意。首先，`whitespace`没有任何特殊之处。`@skip`指令与语法中定义的任何非终结符或终结符一起工作。其次，需要注意`number`的定义被故意留在`@skip`块之外。这是因为我们想要接受像`42
    + 2 + 5`这样的表达式，但我们想要拒绝像`4 2 + 2 + 5`这样的表达式。在接下来的文本中，我们将这个语法称为*IntegerExpression*语法。'
- en: Generating the parser
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成解析器
- en: The rest of this reading will use as a running example the *IntegerExpression*
    grammar defined earlier, which we’ll store in a file called [`IntegerExpression.g`](https://github.com/mit6005/fa16-ex18-parser-generators/blob/master/IntegerExpression.g).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的其余部分将以之前定义的*IntegerExpression*语法为运行示例，我们将其存储在名为[`IntegerExpression.g`](https://github.com/mit6005/fa16-ex18-parser-generators/blob/master/IntegerExpression.g)的文件中。
- en: 'The ParserLib parser generator tool converts a grammar source file like `IntegerExpression.g`
    into a parser. In order to do this, you need to follow three steps. First, you
    need to import the ParserLib library, which resides in a package `lib6005.parser`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ParserLib解析器生成工具将语法源文件（如`IntegerExpression.g`）转换为解析器。为了做到这一点，您需要遵循三个步骤。首先，您需要导入ParserLib库，该库位于一个包`lib6005.parser`中：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The second step is to define an `Enum` type that contains all the terminals
    and non-terminals used by your grammar. This will tell the compiler which definitions
    to expect in the grammar and will allow it to check for any missing ones.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是定义一个`Enum`类型，其中包含语法中使用的所有终结符和非终结符。这将告诉编译器在语法中期望哪些定义，并允许它检查任何缺失的定义。
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that ParserLib itself is case insensitive, but by convention, the names
    of `enum` values are all upper case.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，ParserLib 本身不区分大小写，但按照惯例，`enum` 值的名称全部大写。
- en: From within your code, you can create a parser by calling the `compile` static
    method in `GrammarCompiler`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的代码中，您可以通过调用 `GrammarCompiler` 中的 `compile` 静态方法来创建解析器。
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[The code](https://github.com/mit6005/fa16-ex18-parser-generators/blob/master/src/intexpr/Main.java#L34)
    opens the file `IntegerExpression.g` and compiles it using the `GrammarCompiler`
    into a `Parser` object. The `compile` method takes as a second argument the name
    of the nonterminal to use as the entry point of the grammar; `root` in the case
    of this example.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[代码](https://github.com/mit6005/fa16-ex18-parser-generators/blob/master/src/intexpr/Main.java#L34)
    打开文件 `IntegerExpression.g` 并使用 `GrammarCompiler` 将其编译为 `Parser` 对象。`compile` 方法的第二个参数是要用作语法入口点的非终结符的名称；在此示例中是
    `root`。'
- en: Assuming you don’t have any syntax errors in your grammar file, the result will
    be a `Parser` object that can be used to parse text in either a string or a file.
    Notice that the Parser is a *generic* type that is parameterized by the `enum`
    you defined earlier.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的语法文件中没有语法错误，则结果将是一个可以用于解析字符串或文件中的文本的 `Parser` 对象。请注意，解析器是一个 *泛型* 类型，由您之前定义的
    `enum` 进行参数化。
- en: Calling the parser
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用解析器
- en: 'Now that you’ve generated the parser object, you are ready to parse your own
    text. The parser has a method called `parse` that takes in the text to be parsed
    (in the form of either a `String`, an `InputStream`, a `File` or a `Reader`) and
    returns a `ParseTree`. Calling it produces a parse tree:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经生成了解析器对象，可以开始解析您自己的文本了。解析器有一个名为 `parse` 的方法，该方法接受要解析的文本（以 `String`、`InputStream`、`File`
    或 `Reader` 的形式）并返回一个 `ParseTree`。调用它会产生一个解析树：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that the `ParseTree` is also a generic type that is parameterized by the
    enum type `IntegerGrammar`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`ParseTree` 也是一个泛型类型，由枚举类型 `IntegerGrammar` 进行参数化。
- en: 'For debugging, we can then print this tree out:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调试，我们可以打印出这棵树：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can also try calling the method `display()` which will attempt to open a
    browser window that will show you a visualization of your parse tree. If for any
    reason it is not able to open the browser window, the method will print a URL
    to the terminal which you can copy and paste to your browser to view the visualization.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以尝试调用 `display()` 方法，它将尝试打开一个浏览器窗口，显示解析树的可视化效果。如果由于任何原因无法打开浏览器窗口，则该方法将在终端打印一个
    URL，您可以将其复制并粘贴到浏览器中查看可视化效果。
- en: 'In the example code: [`Main.java` lines 34-35](https://github.com/mit6005/fa16-ex18-parser-generators/blob/master/src/intexpr/Main.java#L34-L35),
    which use the enum in [lines 13-17](https://github.com/mit6005/fa16-ex18-parser-generators/blob/master/src/intexpr/Main.java#L13-L17).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例代码中：[`Main.java` 第 34-35 行](https://github.com/mit6005/fa16-ex18-parser-generators/blob/master/src/intexpr/Main.java#L34-L35)，使用了枚举中的
    [第 13-17 行](https://github.com/mit6005/fa16-ex18-parser-generators/blob/master/src/intexpr/Main.java#L13-L17)。
- en: reading exercises
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Parse trees(missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 解析树（缺少答案）（缺少答案）（缺少答案）（缺少答案）
- en: (missing explanation)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: Traversing the parse tree
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历解析树
- en: So we’ve used the parser to turn a stream of characters into a parse tree, which
    shows how the grammar matches the stream. Now we need to do something with this
    parse tree. We’re going to translate it into a value of a recursive abstract data
    type.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们使用解析器将字符流转换为解析树，该树显示了语法与流的匹配情况。现在我们需要对这个解析树做一些事情。我们将把它翻译成递归抽象数据类型的值。
- en: The first step is to learn how to traverse the parse tree. The `ParseTree` object
    has four methods that you need to be most familiar with.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是学习如何遍历解析树。`ParseTree` 对象有四个您需要熟悉的方法。
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Additionally, you can query the ParseTree for all children that match a particular
    production rule:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，您可以查询 ParseTree，找出所有与特定产生式规则匹配的子节点：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that like the `Parser` itself, the `ParseTree` is also parameterized by
    the type of the `Symbols`, which is expected to be an `enum` type that lists all
    the symbols in the grammar.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，像解析器本身一样，`ParseTree` 也是通过 `Symbols` 的类型进行参数化的，该类型预期是一个列出语法中所有符号的 `enum` 类型。
- en: The `ParseTree` implements the iterable inerface, so you can iterate over all
    the children using a `for` loop. One way to visit all the nodes in a parse tree
    is to write a recursive function. For example, the recursive function below prints
    all nodes in the parse tree with proper indentation.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`ParseTree`实现了可迭代接口，因此您可以使用`for`循环遍历所有子节点。遍历解析树中所有节点的一种方法是编写一个递归函数。例如，下面的递归函数打印解析树中所有节点，并正确缩进。'
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Constructing an abstract syntax tree
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建抽象语法树
- en: 'We need to convert the parse tree into a recursive data type. Here’s the definition
    of the recursive data type that we’re going to use to represent integer arithmetic
    expressions:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将解析树转换为递归数据类型。这里是我们将用来表示整数算术表达式的递归数据类型的定义：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If this syntax is mysterious, review [recursive data type definitions](../16-recursive-data-types/recursive/#recursive_datatype_definitions).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个语法看起来很神秘，请查看[递归数据类型定义](../16-recursive-data-types/recursive/#recursive_datatype_definitions)。
- en: When a recursive data type represents a language this way, it is often called
    an *abstract syntax tree*. An [`IntegerExpression`](https://github.com/mit6005/fa16-ex18-parser-generators/blob/master/src/intexpr/IntegerExpression.java)
    value captures the important features of the expression – its grouping and the
    integers in it – while omitting unnecessary details of the sequence of characters
    that created it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当递归数据类型以这种方式表示一种语言时，通常被称为*抽象语法树*。一个[`IntegerExpression`](https://github.com/mit6005/fa16-ex18-parser-generators/blob/master/src/intexpr/IntegerExpression.java)值捕捉了表达式的重要特征
    - 它的分组和其中的整数 - 同时省略了创建它的字符序列的不必要细节。
- en: 'By contrast, the parse tree that we just generated with the *IntegerExpression*
    parser is a *concrete syntax tree*. It’s called concrete, rather than abstract,
    because it contains more details about how the expression is represented in actual
    characters. For example, the strings `2+2`, `((2)+(2))`, and `0002+0002` would
    each produce a different concrete syntax tree, but these trees would all correspond
    to the same abstract `IntegerExpression` value: `Plus(Number(2), Number(2))`.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，我们刚刚用*IntegerExpression*解析器生成的解析树是一个*具体语法树*。它被称为具体，而不是抽象，是因为它包含了关于表达式如何在实际字符中表示的更多细节。例如，字符串`2+2`，`((2)+(2))`和`0002+0002`将分别产生不同的具体语法树，但这些树都对应于相同的抽象`IntegerExpression`值：`Plus(Number(2),
    Number(2))`。
- en: Now, we can create a simple recursive function that walks the `ParseTree` to
    produce an `IntegerExpression` as follows.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建一个简单的递归函数，遍历`ParseTree`以生成`IntegerExpression`如下。
- en: 'Here’s the code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码：
- en: '[`Main.java` line 41](https://github.com/mit6005/fa16-ex18-parser-generators/blob/master/src/intexpr/Main.java#L41-L106)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Main.java` 第41行](https://github.com/mit6005/fa16-ex18-parser-generators/blob/master/src/intexpr/Main.java#L41-L106)'
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The function is quite simple, and very much follows the structure of the grammar.
    An important thing to note is that there is a very strong assumption that the
    code will process a `ParseTree` that corresponds to the grammar in `IntegerExpression.g`.
    If you feed it a different kind of ParseTree, the code will likely fail with a
    `RuntimeException`, but it will always terminate and will never return a null
    reference.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数非常简单，并且非常遵循语法的结构。需要注意的一点是，代码非常强烈地假设将处理与`IntegerExpression.g`中的语法对应的`ParseTree`。如果您提供了不同类型的`ParseTree`，代码可能会因为`RuntimeException`而失败，但它总是会终止，永远不会返回空引用。
- en: reading exercises
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 读取练习
- en: String to AST 1
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串转换为AST 1
- en: If the input string is `"19+23+18"`, which abstract syntax tree would be produced
    by `buildAST` above?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入字符串是`"19+23+18"`，那么`buildAST`会产生哪个抽象语法树？
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)(缺失答案)(缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: String to AST 2
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串转换为AST 2
- en: 'Which of the following input strings would produce:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪个输入字符串会产生：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失答案)(缺失答案)(缺失答案)(缺失答案)
- en: (missing explanation)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: (缺失解释)
- en: Handling errors
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理错误
- en: Several things can go wrong when parsing a file.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 解析文件时可能会出现几种问题。
- en: Your grammar file may fail to open.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的语法文件可能打不开。
- en: Your grammar may be syntactically incorrect.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的语法可能在语法上有错误。
- en: The string you are trying to parse may not be parseable with your given grammar,
    either because your grammar is incorrect, or because your string is incorrect.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您尝试解析的字符串可能无法使用您提供的语法解析，要么是因为您的语法不正确，要么是因为您的字符串不正确。
- en: In the first case, the `compile` method will throw an `IOException`. In the
    second case, it will throw an `UnableToParseException`. In the third case, the
    `UnableToParseException` will be thrown by the `parse` method. The `UnableToParseException`
    exception will contain some information about the possible location of the error,
    although parse errors are sometimes inherently difficult to localize, since the
    parser cannot know what string you intended to write, so you may need to search
    a little to find the true location of the error.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，`compile`方法将抛出`IOException`。在第二种情况下，它将抛出`UnableToParseException`。在第三种情况下，`parse`方法将抛出`UnableToParseException`。`UnableToParseException`异常将包含有关错误可能位置的一些信息，尽管解析错误有时本质上很难定位，因为解析器无法知道您打算写入什么字符串，因此您可能需要搜索一下才能找到错误的真实位置。
- en: Left recursion and other ParserLib limitations
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 左递归和其他 ParserLib 的限制
- en: ParserLib works by generating a top-down [Recursive Descent Parser](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-035-computer-language-engineering-spring-2010/lecture-notes/MIT6_035S10_lec04.pdf).
    These kind of parsers have a few limitations in terms of the grammars that they
    can parse. There are two in particular that are worth pointing out.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ParserLib 通过生成自顶向下的[递归下降解析器](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-035-computer-language-engineering-spring-2010/lecture-notes/MIT6_035S10_lec04.pdf)来工作。这种类型的解析器在解析语法方面有一些限制。有两个特别值得指出的限制。
- en: '**Left recursion.** A recursive descent parser can go into an infinite loop
    if the grammar involves [left recursion](https://en.wikipedia.org/wiki/Left_recursion).
    This is a case where a definition for a non-terminal involves that non-terminal
    as its leftmost symbol. For example, the grammar below includes left recursion
    because one of the possible definitions of `sum` is `sum ''+'' number` which has
    `sum` as its leftmost symbol.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**左递归。** 如果语法涉及[左递归](https://en.wikipedia.org/wiki/Left_recursion)，递归下降解析器可能会陷入无限循环。这是一个情况，其中一个非终结符的定义包含该非终结符作为其最左边的符号。例如，下面的语法包括左递归，因为`sum`的可能定义之一是`sum
    ''+'' number`，其中`sum`是其最左边的符号。'
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Left recursion can also happen indirectly. For example, changing the grammar
    above to the one below does not address the problem because the definition of
    `sum` still indirectly involves a symbol that has `sum` as its first symbol.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 左递归也可能间接发生。例如，将上面的语法更改为下面的语法并不能解决问题，因为`sum`的定义仍然间接涉及一个具有`sum`作为其第一个符号的符号。
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you give any of these grammars to ParserLib and then try to use them to parse
    a symbol, ParserLib will fail with an `UnableToParse` exception listing the offending
    non-terminal.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将任何这些语法提供给 ParserLib，然后尝试使用它们来解析一个符号，ParserLib 将以`UnableToParse`异常失败，并列出有问题的非终结符。
- en: 'There are some [general techniques](https://en.wikipedia.org/wiki/Left_recursion)
    to eliminate left recursion; for our purposes, the simplest approach will be to
    replace left recursion with repetition (`*`), so the grammar above becomes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些[通用技术](https://en.wikipedia.org/wiki/Left_recursion)来消除左递归；对于我们的目的，最简单的方法是用重复(`*`)替换左递归，因此上面的语法变为：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Greediness.** This is not an issue that you will run into in this class,
    but it is a limitation of ParserLib you should be aware of. The ParserLib parsers
    are greedy in that at every point they try to match a maximal string for any rule
    they are currently considering. For example, consider the following grammar.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**贪婪性。** 这不是你在这门课上会遇到的问题，但这是 ParserLib 的一个限制，你应该注意到。ParserLib 解析器是贪婪的，因为在任何时候，它们都试图匹配当前考虑的任何规则的最大字符串。例如，考虑以下语法。'
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The string `'aaaabbb'` is clearly in the grammar, but a greedy parser cannot
    parse it because it will try to parse a maximal substring that matches the `ab`
    symbol, and then it will find that it cannot parse `threeb` because it has already
    consumed the entire string. Unlike left recursion, which is easy to fix, this
    is a more fundamental limitation of the type of parser implemented by ParserLib,
    but as mentioned before, this is not something you should run into in this class.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串`'aaaabbb'`显然符合语法，但贪婪解析器无法解析它，因为它将尝试解析与`ab`符号匹配的最大子字符串，然后发现它无法解析`threeb`，因为它已经消耗了整个字符串。与左递归不同，这是
    ParserLib 实现的解析器类型的更基本限制，但如前所述，在这门课程中不会遇到这种情况。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: 'The topics of today’s reading connect to our three properties of good software
    as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 今天阅读的主题与我们对好软件的三个属性有关，如下所示：
- en: '**Safe from bugs.** A grammar is a declarative specification for strings and
    streams, which can be implemented automatically by a parser generator. These specifications
    are often simpler, more direct, and less likely to be buggy than parsing code
    written by hand.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**免受错误影响。** 一个语法是对字符串和流的声明性规范，可以由解析器生成器自动实现。这些规范通常比手写的解析代码更简单、更直接，更不容易出错。'
- en: '**Easy to understand.** A grammar captures the shape of a sequence in a form
    that is compact and easier to understand than hand-written parsing code.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于理解。** 一个语法以一种紧凑且比手写解析代码更容易理解的形式捕捉序列的形状。'
- en: '**Ready for change.** A grammar can be easily edited, then run through a parser
    generator to regenerate the parsing code.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准备好改变。** 一个语法可以很容易地被编辑，然后通过解析器生成器运行以重新生成解析代码。'
