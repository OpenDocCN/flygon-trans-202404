- en: 'Rust''s std:: library'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Rust 的 std:: 库'
- en: Rust's standard library
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rust 标准库
- en: The core functionality in Rust is provided by a module called `std`. This is
    the standard runtime library.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 的核心功能由一个名为 `std` 的模块提供。这是标准运行时库。
- en: As with its C++ namesake, everything can be referenced through a `std::` namespace
    prefix or via a `use std::{foo}` import.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与其 C++ 同名的情况类似，一切都可以通过 `std::` 命名空间前缀或通过 `use std::{foo}` 导入来引用。
- en: 'Some of std is implicitly available by a special [`std::prelude`](https://doc.rust-lang.org/beta/std/prelude/)
    that is automatically used (along with a reference to the std crate) without declaration.
    The prelude contains functionality that virtually all code is likely to use and
    therefore Rust spares code from having to import it:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 的标准库中的一些内容通过特殊的 [`std::prelude`](https://doc.rust-lang.org/beta/std/prelude/)
    隐式可用，自动使用（以及对 std crate 的引用）而无需声明。预设包含几乎所有代码可能使用的功能，因此 Rust 可以避免代码导入它：
- en: String and ToString trait
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串和 ToString 特性
- en: Iterators traits of various kinds - Iterator, Exten, IntoIterator etc.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种迭代器特性 - Iterator、Exten、IntoIterator 等。
- en: Result<> and Option<> enums
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Result<> 和 Option<> 枚举
- en: Conversion traits AsRef, AsMut, Into, From
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换特性 AsRef、AsMut、Into、From
- en: Vec heap allocated vector
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vec 堆分配的向量
- en: Other traits such as Drop, Fn, FnMut, FnOnce, Box, Clone, Copy, Send, Sized,
    Sync, PartialEq, PartialOrd etc.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他特性如 Drop、Fn、FnMut、FnOnce、Box、Clone、Copy、Send、Sized、Sync、PartialEq、PartialOrd
    等。
- en: Macros such as println!, format!, assert! etc.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宏例如 println!、format!、assert! 等。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are various sub-modules under std that concern themselves with aspects
    of development. Here are just some of them:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: std 下有各种关注开发方面的子模块。以下只是其中一些：
- en: clone – the Clone trait
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆 - 克隆特性
- en: cmp – Eq, Ord, PartialEq, PartialOrd traits. These traits are used for equality
    and ordering functionality.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: cmp - Eq、Ord、PartialEq、PartialOrd 特性。这些特性用于相等性和排序功能。
- en: collections - contains the standard collection types for sequences, maps, sets,
    and miscellaneous. e.g. Vec and HashMap are members of this module.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集合 - 包含序列、映射、集合和其他标准集合类型。例如 Vec 和 HashMap 属于这个模块。
- en: env – environmental helpers - command line arguments, status codes, environment
    variables, temporary folder
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: env - 环境辅助工具 - 命令行参数、状态码、环境变量、临时文件夹
- en: fmt – utilities for formatting and printing strings
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 格式化和打印字符串的实用工具
- en: fs - filesystem manipulation
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: fs - 文件系统操作
- en: io – Read and Write traits that are implemented by streams / buffers in file
    system and networking, stdio functionality
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: io - 由文件系统和网络中的流/缓冲区实现的 Read 和 Write 特性，stdio 功能
- en: mem – memory primitives
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内存原语
- en: net – networking
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络 - 网络操作
- en: path – path manipulation
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路径操作
- en: process – spawn, fork, exec etc.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程 - spawn、fork、exec 等
- en: C / C++ lib to Rust lib cross reference
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C / C++ 到 Rust 库的交叉参考
- en: TODO
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: Note that Rust's std namespace contains a lot of stuff not in the standard C
    or C++ libraries and a lot of things are not directly analogous. For example the
    standard C / C++ library have very little to say about sockets, or path manipulation,
    or atomically incrementing numbers, or creating threads.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 Rust 的 std 命名空间包含许多标准 C 或 C++ 库中没有的内容，许多内容也没有直接类似。例如标准 C / C++ 库对套接字、路径操作、原子递增数字或创建线程几乎没有什么可说的。
- en: '| C | C++ | Rust |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| C | C++ | Rust |'
- en: '| --- | --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| T [S], e.g. char foo[20] | std::array (C++11) | [T; S], e.g. let foo: [u8;
    20] = [0; 20] |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| T [S], 例如 char foo[20] | std::array (C++11) | [T; S], 例如 let foo: [u8; 20]
    = [0; 20] |'
- en: '| char * or char[] with functions such as strcmp, strcpy, strstr, strdup etc.
    Plus wide equivalents to these. | std::string, std::wstring, std::u16string (C++11),
    std::u32string (C++11) | &str or String as appropriate |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| char * 或带有函数如 strcmp、strcpy、strstr、strdup 等的 char[]。还有这些的宽字符等价物。 | std::string、std::wstring、std::u16string
    (C++11)、std::u32string (C++11) | 根据情况使用 &str 或 String |'
- en: '| - | std::vector | std::vec::Vec or std::collections::VecDeque |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| - | std::vector | std::vec::Vec 或 std::collections::VecDeque |'
- en: '| - | std::list | std::collections::LinkedList |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| - | std::list | std::collections::LinkedList |'
- en: '| - | std::set | std::collections::HashSet, std::collections::BTreeSet |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| - | std::set | std::collections::HashSet, std::collections::BTreeSet |'
- en: '| - | std::map | std::collections::HashMap, std::collections::BTreeMap |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| - | std::map | std::collections::HashMap, std::collections::BTreeMap |'
- en: '| fopen, fclose, fread / fwrite, fseek etc. | std::ofstream, std::ifstream,
    std::fstream | TODO |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| fopen、fclose、fread / fwrite、fseek 等 | std::ofstream、std::ifstream、std::fstream
    | 待办事项 |'
- en: '| Math functions such as cos, sin, tan, acos, asin, atan, pow, abs, log, log10,
    floor, ceil are defined in<math.h class="hljs-meta"></math.h> | - | Math functions
    are direction accessible from f64\. f32 types., e.g. 1.0f64.cos(). |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 诸如 cos、sin、tan、acos、asin、atan、pow、abs、log、log10、floor、ceil 等数学函数在<math.h
    class="hljs-meta"></math.h>中定义 | - | 数学函数可以从 f64\. f32 类型中直接访问，例如 1.0f64.cos()。
    |'
- en: Note that because due to the decimal point being used on a float, you have to
    prefix f32 or f64 to literals when you call them so the compiler can figure out
    what you're doing.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于浮点数使用了小数点，因此在调用它们时必须给字面值加上 f32 或 f64 前缀，以便编译器能够理解你的意图。
- en: Standard Traits
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准特质
- en: Some traits are system defined and in some cases can be derived automatically.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一些特质是系统定义的，在某些情况下可以自动派生。
- en: In others they cause the compiler to generate additional code for you such as
    the Drop trait (described in class destructor section)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，它们会导致编译器为你生成额外的代码，例如 Drop 特质（在类析构函数部分描述）。
- en: Drop
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Drop
- en: The Drop trait allows you do something when an object is dropped, such as add
    additional logging or whatever.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Drop 特质允许在对象被丢弃时执行一些操作，例如添加额外的日志记录或其他操作。
- en: Copy
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Copy
- en: 'A struct implementing a Copy trait can be copied through assignment, i.e. if
    you assign a to b then a and b now how copies of the object, independent of each
    other. The Copy trait really only useful when you have small amounts of data that
    represent a type or value of some kind. TODO copy example, e.g. struct PlayingCard
    { suit: Suit, rank: Rank } If you find yourself with a type that is larger, or
    contains heap allocated memory then you should use clone.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '实现 Copy 特质的结构体可以通过赋值进行复制，即如果你将 a 赋给 b，则 a 和 b 现在都有对象的副本，彼此独立。只有在你拥有表示某种类型或值的少量数据时，Copy
    特质才真正有用。TODO 复制示例，例如结构体 PlayingCard { suit: Suit, rank: Rank } 如果你发现自己拥有的类型较大，或包含堆分配的内存，那么你应该使用
    clone。'
- en: Clone
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Clone
- en: A struct implementing the Clone trait has a .clone() method. Unlike Copy you
    must explicitly .clone() the instance to create another. TODO clone example
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 Clone 特质的结构体具有 .clone() 方法。与 Copy 不同，你必须显式地使用 .clone() 方法来创建另一个实例。TODO 克隆示例
- en: Eq, PartialEq
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Eq、PartialEq
- en: TODO equality
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: TODO 相等性
- en: Ord, PartialOrd
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ord、PartialOrd
- en: TODO ordering
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: TODO 排序
