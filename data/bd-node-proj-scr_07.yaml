- en: Bower
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bower
- en: Bower all the things
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用Bower管理所有事情
- en: Unless you live in a hole, you are well aware that the JavaScript revolution
    is all around us. Many of the amazing concepts I discovered in the Rails ecosystem
    are now bursting out into the JavaScript space allowing for a greater distribution
    of awesome. The three pillars are; Yeoman, Bower and Grunt.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除非您生活在洞里，您应该很清楚JavaScript革命已经无处不在。我在Rails生态系统中发现的许多令人惊奇的概念现在正在爆发到JavaScript空间，允许更广泛地分发令人敬畏的内容。三大支柱是;
    Yeoman、Bower和Grunt。
- en: The problem I need to solve is; what is the best way to get some library code
    up on Github and make it easily accessible to users without having to clone the
    project? Because, that's pretty lame, right?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要解决的问题是; 如何以最佳方式将一些库代码放到Github上，并使其对用户易于访问，而无需克隆项目？因为，那真的很糟糕，对吧？
- en: Yeoman generators
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yeoman生成器
- en: Initially I came across [generator-sass-boilerplate](https://github.com/srsgores/generator-sass-boilerplate),
    a 'Yeoman generator for quickly scaffolding out Sass styles'. This is a very interesting
    approach for creating a complex library and allowing the user to customize the
    install. But for a simpler library of code, maybe just some functions and mixins,
    this is way to much overhead.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最初我遇到了[generator-sass-boilerplate](https://github.com/srsgores/generator-sass-boilerplate)，一个'快速搭建Sass样式的Yeoman生成器'。这是一种非常有趣的方法，用于创建一个复杂的库，并允许用户定制安装。但对于一个更简单的代码库，也许只是一些函数和混合，这就太繁琐了。
- en: Bower is the answer
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bower就是答案
- en: Fast forward to now. I recently came across new posts that really break down
    what Bower is and what it is best at. And it hit me, this IS the answer!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 快进到现在。我最近看到了一些新的帖子，真正解释了Bower是什么以及它最擅长什么。我恍然大悟，这就是答案！
- en: For those not in the know, Bower is an extremely simple solution for front-end
    package management.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不了解的人来说，Bower是前端包管理的极其简单的解决方案。
- en: It offers a generic, unopinionated solution to the problem of front-end package
    management, while exposing the package dependency model via an API that can be
    consumed by a more opinionated build stack.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它提供了一个通用的、无偏见的解决方案来解决前端包管理的问题，同时通过一个API公开了包依赖模型，这个API可以被更具偏见的构建堆栈所使用。
- en: The beauty of Bower is held within it's simplicity. Bower has a registry, but
    it's not 100% necessary. The common command is `bower install <package>` where
    `<package>` can refer to a [large number of options](http://bower.io/#using-a-different-name-and-a-specific-version-of-a-package),
    thus making it dirt simple to just share some code. NICE!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Bower之美在于其简洁性。Bower有一个注册表，但这并非必需。常见命令是`bower install <package>`，其中`<package>`可以指代[大量选项](http://bower.io/#using-a-different-name-and-a-specific-version-of-a-package)，因此只需分享一些代码就变得非常简单。不错！
- en: Sticking with the 'dirt simple' theme, you can use Bower to easily pull a repo
    into your project without having to clone it. Even if it doesn't have a `bower.json`
    file.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 坚持'非常简单'的主题，您可以使用Bower轻松将一个仓库拉入项目中，而无需克隆它。即使没有`bower.json`文件。
- en: For example Stipe, a Compass Extension library I wrote, is not Bower aware at
    all.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如Stipe，一个我编写的Compass扩展库，根本不了解Bower。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Run that command in any folder and you will pull in the entire repo with no
    Github history. This alone is pretty interesting.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何文件夹中运行该命令，您将获取整个仓库，没有Github历史记录。这本身就相当有趣。
- en: Getting started with Bower
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bower入门
- en: 'To get started, it''s simple really. Assuming that Node and npm is installed
    on your local box, run:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，实际上很简单。假设您的本地计算机已安装了Node和npm，运行：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Install Bower package
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Bower包
- en: 'I won''t go into exhaustive detail here, but 99% of the time you simply need
    to run:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我这里不会详细说明，但99%的情况下，您只需运行：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As stated above, there are alternate install options, but the primary solution
    is to have a `bower.json` file in the repo and have it registered with Bower.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，还有其他安装选项，但主要解决方案是在仓库中有一个`bower.json`文件，并将其注册到Bower中。
- en: If you have a `bower.json` file in your project, explained in the next section,
    you can add the `--save` flag with the install and this will add the library as
    a dependency in your project. Sweet.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的项目中有一个`bower.json`文件，在下一节中解释，您可以在安装时添加`--save`标志，这将将库添加为项目的依赖项。太棒了。
- en: When you distribute the project, a user who clones it only has to run `$ bower
    install` and it will pull in all the external resources. Nice!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当您分发项目时，只需运行`$ bower install`，克隆它的用户就能拉取所有外部资源。不错！
- en: Commit or not to commit!?
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交还是不提交！？
- en: This new system of creating and distributing resources raises an interesting
    question; do you commit all your bower packages or not? In the Ruby world, Gems
    are not actually part of the project, but dependencies of the project, and never
    committed to the project's version control. In this new JavaScript world, Node
    and Bower package dependencies are referenced via a manifest, much like the Gemfile
    in Ruby, but are actually installed into the root of the project directory.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这种创建和分发资源的新系统提出了一个有趣的问题；你是否提交所有的 bower 包？在 Ruby 的世界中，Gem 实际上不是项目的一部分，而是项目的依赖项，从不提交到项目的版本控制。在这个新的
    JavaScript 世界中，Node 和 Bower 包依赖项通过一个清单引用，就像 Ruby 中的 Gemfile 一样，但实际上是安装在项目目录的根目录中。
- en: There is a [whole discussion](http://addyosmani.com/blog/checking-in-front-end-dependencies/)
    on this topic. I look at it this way, when you install a Bower library, are you
    leaving this as a dependency or are you making modifications?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个话题有一个[完整的讨论](http://addyosmani.com/blog/checking-in-front-end-dependencies/)。我是这样看待的，当你安装一个
    Bower 库时，你是将其作为依赖项留下，还是进行修改？
- en: The choice is up to you, the arguments are strong on either side. In a situation
    where you are actually forking the code you installed, then the answer is pretty
    clear, it should be committed to the project or you need to fork the dependency.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 选择权在你手中，双方的论点都很有说服力。在你实际分叉安装的代码的情况下，答案是相当明确的，它应该被提交到项目中，或者你需要分叉依赖项。
- en: Generate new Bower package
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成新的 Bower 包
- en: Creating a new Bower package is again, really simple.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 再次创建一个新的 Bower 包，真的很简单。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the CLI, this will initiate a series of questions, the answers of which
    will be plugged into the new `bower.json` file it creates. Put as much in as you
    want, but all you really need is:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CLI 中，这将启动一系列问题，它的答案将填入它创建的新`bower.json`文件中。你可以尽情添加，但你真正需要的只有：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And that's it really. You have just created your first Bower resource library.
    Now go forth and build! Build out your resources, documentation, etc ... your
    package is ready to go at any time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。你刚刚创建了你的第一个 Bower 资源库。现在前进吧！扩展你的资源、文档等等... 你的包随时准备就绪。
- en: For easy testing, remember the `$ bower install git://github.com/ ...` trick?
    Run this against a new repo and see how it installs.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化测试，记住`$ bower install git://github.com/ ...`的技巧？对着一个新存储库运行这个命令，看看它是如何安装的。
- en: 'Be mindful of this step and what the package contains. In my opinion, I see
    Bower as a great way to distribute smaller, specific libraries of code. When I
    pull in your Bower package, do I really want all your documentation, tests, demonstration
    resources, etc ... As an example, I am going to pick on the Bourbon kids here,
    run:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这一步以及包含的内容。在我看来，我认为 Bower 是分发较小、具体代码库的好方法。当我引入你的 Bower 包时，我真的需要你的所有文档、测试、演示资源等等吗？举个例子，我要把
    Bourbon 举出来，运行：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Running this installer, you will get the whole repo. I don''t want the whole
    repo, all I really want is what is in the `dist/` dir. To solve this, another
    developer forked Bourbon and created a new repo called [bower-bourbon](https://github.com/hmps/bourbon):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个安装程序，你将获得整个存储库。我不想要整个存储库，我真正想要的只是`dist/`目录中的内容。为了解决这个问题，另一位开发者分叉了 Bourbon
    并创建了一个名为 [bower-bourbon](https://github.com/hmps/bourbon) 的新存储库：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Running this install you actually only get what is in the `dist/` dir. But are
    these forks reliable? Ohh open source, you are a wild one.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个安装，你实际上只会得到`dist/`目录中的内容。但这些分叉可靠吗？哦，开源世界，你是一个狂野的存在。
- en: '**UPDATE:** It''s been brought to my attention that using the Bower install
    of Bourbon pulls in it''s 3.2 Beta and appears not to be fully functional. This
    section was not intended to say "bad Bourbon" but to simply illustrate that in
    some cases, using Bower, you will get more of the library then you really want.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新：** 有人提醒我使用 Bower 安装 Bourbon 时会拉取它的 3.2 Beta 版本，并且似乎不完全可用。本节并非意在指责“糟糕的
    Bourbon”，而只是简单说明在某些情况下，使用 Bower 会得到比实际需要更多的库。'
- en: Bower registration
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bower 注册
- en: 'Once you are ready for release, [register it with Bower](http://bower.io/#registering-packages).
    The criteria is pretty simple:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦准备好发布，[在 Bower 中注册它](http://bower.io/#registering-packages)。标准非常简单：
- en: Make sure your repo has the `bower.json` file
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的存储库有`bower.json`文件
- en: You must use [semantic versioning](http://semver.org/)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须使用[语义版本](http://semver.org/)
- en: Your package must be available at a Git endpoint, e.g. Github
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的包必须在一个 Git 终端上可用，比如 Github
- en: 'Once you have all of that, run this command with your new package name and
    the Git endpoint:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你准备好了所有这些，用你的新包名称和 Git 终端运行这个命令：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Registration is painless. Once you get the green light on everything, give it
    a test and do a `$ bower install <my-package-name>`
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注册是无痛的。一旦你对一切都有了绿灯，测试一下，运行`$ bower install <my-package-name>`
- en: Bower and Sass
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bower 和 Sass
- en: Bower and Sass libraries are an amazing pairing. There are small repos all over
    Github where the complexity of making them a Ruby Gem/Compass Extension was just
    to much overhead. You are required to either fork, clone, or god forbid, copy
    and paste code into your project. What? Are we not civilized?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Bower 和 Sass 库是一个令人惊叹的组合。Github 上到处都是小仓库，将它们制作成 Ruby Gem/Compass 扩展的复杂性太大了。你必须要么
    fork，要么 clone，或者天哪，复制粘贴代码到你的项目中。什么？我们难道不是文明社会吗？
- en: In the Ruby world, developers are used to having Gems and Compass Extensions
    installed in a safe, *untouchable location. The new Gem is added to the Gemfile
    and we simply reference the library in the project.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ruby 世界中，开发者习惯于在一个安全的、*不可触摸的位置安装 Gems 和 Compass 扩展。新的 Gem 被添加到 Gemfile 中，我们只需在项目中引用这个库。
- en: '*Untouchable is a frustration with many developers. Importing Sass libraries
    that they did not have control over, or were unable to modify, that actually output
    CSS can be very frustrating.'
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '*不可触摸对许多开发者来说是一个挫败感。导入他们无法控制或无法修改的 Sass 库，实际上输出 CSS 可能非常令人沮丧。'
- en: In the new JavaScipt world, the library is added to the `bower.json` manifest
    or simply installed, but instead of it being in a obscured location, it is installed
    into the root of the project. This keeps things simple from an install perspective,
    but this means our Sass imports are in relative directories. Not a big deal, but
    different from what we are used to.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的 JavaScript 世界中，库被添加到`bower.json`清单中或者直接安装，但是它不是安装在一个模糊的位置，而是安装在项目的根目录中。从安装的角度来看，这保持了事情的简单性，但这意味着我们的
    Sass 导入位于相对目录中。这并不是什么大问题，但与我们习惯的方式有所不同。
- en: So, what does a Sass Bower package look like? Let's take a simple project I
    created called, [sass-icon-fonts](https://github.com/anotheruiguy/sass-icon-fonts).
    This package is simply a couple of mixins, one that allows the developer to easily
    create a `@font-face` set of rules and another is the ability to quickly generate
    a series of icon-font rules. The mini library comes with instructions and a very
    simple API.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，一个 Sass Bower 包是什么样子的呢？让我们看一个我创建的简单项目，称为 [sass-icon-fonts](https://github.com/anotheruiguy/sass-icon-fonts)。这个包简单地包含了一些
    mixin，其中一个允许开发者轻松创建`@font-face`规则集，另一个是快速生成一系列图标字体规则的能力。这个小型库附带了说明和一个非常简单的 API。
- en: 'Now, let''s imagine you are building a Node project and you want to use this
    package as a resource, run:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们想象一下你正在构建一个 Node 项目，你想将这个包作为资源使用，运行：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This installs the package and adds the dependency to your `bower.json` file.
    Located at the root level of the project is your `sass/` directory, within that
    is your `application.scss` file. At your root is the `bower_components` directory.
    For your `application.scss` file to access the new library, you will need to import
    a relative path to the library, as illustrated in the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装包并将依赖项添加到你的`bower.json`文件中。项目的根目录下是你的`sass/`目录，在其中是你的`application.scss`文件。在你的根目录下是`bower_components`目录。为了让你的`application.scss`文件访问新库，你需要导入到库的相对路径，如下所示：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: While the previous example works, while I found this acceptable, I didn't really
    find it awesome. Digging more into the Grint-Sass API I discovered the [includePaths](https://github.com/sindresorhus/grunt-sass#includepaths)
    function. This allows you to set an import path to include.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然之前的例子可以工作，虽然我觉得这是可以接受的，但我并没有觉得它真的很棒。深入研究 Grint-Sass API 我发现了 [includePaths](https://github.com/sindresorhus/grunt-sass#includepaths)
    函数。这允许你设置一个导入路径以包含。
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that you have this in your Grunt file, you can simply reference the library''s
    main manifest file with a simply Sass import, like so:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你在你的 Grunt 文件中有了这个，你只需用简单的 Sass 导入引用库的主清单文件，就像这样：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Bower in your npm
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在你的 npm 中的 Bower
- en: One of the things that I find slightly annoying about using Bower is that I
    have to run separate commands when initialing a new project. I already have to
    use npm, can't I just bind these things together?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件事情让我稍微有点烦恼，那就是使用 Bower 时我必须运行单独的命令来初始化一个新项目。我已经在使用 npm 了，我不能把这些东西绑在一起吗？
- en: Yes, yes you can. In your `package.json` file, simply extend the `scripts` object
    and pass in the the `bower install` command. This is why I really LOVE this stuff!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，是的，你可以。在你的`package.json`文件中，简单地扩展`scripts`对象并传入`bower install`命令。这就是为什么我真的很喜欢这些东西！
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, when you run `npm install` this will not only install all your Node packages,
    but install your Bower packages as well. NICE!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你运行 `npm install` 时，这不仅会安装所有的 Node 包，还会安装你的 Bower 包。不错！
- en: Bower behind the firewall
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防火墙后的 Bower
- en: 'If you find yourself behind a firewall that does not allow for the `git://[repo]`
    protocol, there is a fix for this. First, I suggest maually doing a clone using
    the `https://[repo]` protocol to make sure that this is really the issue. If the
    `https://[repo]` protocol works, then you may want to make the following update:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己身处不允许 `git://[repo]` 协议的防火墙后，有一个解决方法。首先，我建议手动使用 `https://[repo]` 协议进行克隆，以确保这真的是问题所在。如果
    `https://[repo]` 协议有效，则可能需要进行以下更新：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Thank you [Stack Overflow](http://stackoverflow.com/questions/15669091/bower-install-using-only-https)!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢 [Stack Overflow](http://stackoverflow.com/questions/15669091/bower-install-using-only-https)!
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: When I say I want to Bower all the things, I mean just that. Now understanding
    Bower, I am looking at simple package management in a whole new light and I hope
    that you do to.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当我说我想要 Bower 包管理所有东西时，我就是这个意思。现在了解了 Bower，我对简单的包管理有了全新的认识，我希望你也能有。
- en: No more forking, cloning, deleting `.git/` directories just to include a library
    into a project. I am looking at creating Sass modules in a whole new light as
    well. Not that Compass extensions were difficult, but Bower frees me of multiple
    dependencies. Something that has been a real issue on many projects.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不再分叉、克隆、删除 `.git/` 目录，只是为了将库包含到项目中。我也在全新的光芒下看待创建 Sass 模块。不是说 Compass 扩展很困难，但
    Bower 让我摆脱了多重依赖。这在许多项目中是一个真正的问题。
- en: Bower + Grunt + Sass
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bower + Grunt + Sass
- en: Bower - Grunt - Sass
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bower - Grunt - Sass
- en: Now that we know the powers of Bower to easily manage our front-end development
    dependencies, what do we need to do to add a Bower package of Sass code to our
    project?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了 Bower 轻松管理我们的前端开发依赖的力量，我们需要做什么来将 Sass 代码的 Bower 包添加到我们的项目中？
- en: Bower install
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Bower
- en: 'First off, let''s install a simple Bower package for illustration:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们安装一个简单的 Bower 包作为示例：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There, we now have the library of code in our project.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们现在在项目中有了代码库。
- en: Update Gruntfile.js
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 Gruntfile.js
- en: Next we want to update the `Gruntfile.js` so that we can easily include the
    library into our Sass files. Without this step, we would need to write fill paths
    in our Sass file to this and that's simply lame.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要更新 `Gruntfile.js`，以便我们可以轻松地将库包含到我们的 Sass 文件中。如果没有这一步，我们将需要在我们的 Sass
    文件中写入完整路径，这简直太烦人了。
- en: In the Grunt-Sass API we have options and the one we need to use is `includePaths`.
    Here we can pass in a string that is the full path from root to the Bower package
    into an array.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Grunt-Sass API 中，我们有选项，我们需要使用的是 `includePaths`。在这里，我们可以传入一个字符串，该字符串是从根目录到
    Bower 包的完整路径。
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Update style.scss
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 style.scss
- en: To make use of this new Bower package library, we simply need to use a Sass
    convention to import the code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个新的 Bower 包库，我们只需要使用一种 Sass 约定来导入代码。
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To test that this is working, let's add a little bit of code that references
    the Bower library.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试这是否有效，让我们添加一点引用 Bower 库的代码。
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Back in the CLI, run `grunt` and we should see green lights all day long!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 CLI，运行 `grunt`，我们应该看到一整天的绿灯！
