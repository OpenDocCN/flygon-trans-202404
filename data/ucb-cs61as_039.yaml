- en: HOFs - Procedures as Arguments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HOFs - 将过程作为参数
- en: 'A **higher order function** (**HOF**) is a function that does one or both of
    the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**高阶函数**（**HOF**）是一个执行以下一项或两项操作的函数：'
- en: Takes a function as an argument.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个函数作为参数。
- en: Returns a function as its output.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个函数作为输出返回。
- en: Before we jump in, let's have a quick refresher.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入之前，让我们快速复习一下。
- en: The Substitution Model Revisited
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新审视替换模型
- en: 'You should already be very familiar with defining functions like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经非常熟悉定义这样的函数：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this function definition, the parameter of `f` is `x`, which is fed into
    the body as an argument to the built-in procedure `plus1`. If we bring back our
    substitution model from Lesson 1, we can say that a call to `f`, say, `(f 5)`,
    would be evaluated with the following steps:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数定义中，`f`的参数是`x`，它被作为参数传递给内置过程`plus1`。如果我们从第1课中恢复我们的替换模型，我们可以说对`f`的调用，比如`(f
    5)`，将通过以下步骤进行评估：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The argument `5` is substituted into the body of `f` and we call `plus1` on
    `5` to get `6`. Alright, that was too easy. But what if, instead of using `x`
    as an argument to the function in the body, we use it as the *function*?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`5`被替换到`f`的主体中，我们调用`plus1`得到`6`。好吧，这太容易了。但是，如果我们不将`x`作为主体中的函数参数，而是将其作为*函数*呢？
- en: A Simple Higher Order Function
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的高阶函数
- en: Let's look at an example.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Do you see how `g` is in front? Hmm. What happens if we call `(f 5)` this time?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到了`g`在前面吗？嗯。如果这次我们调用`(f 5)`会发生什么？
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Whoops. Looks like we need to feed `f` a procedure instead.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕。看起来我们需要给`f`传递一个过程。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We could also feed `f` a lambda function!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将`f`传递给一个lambda函数！
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Would you look at that! We just defined a function, `f`, that takes a procedure,
    `g`, as its argument and applies `g` to `2`. There it is, your first higher order
    function. Play around and see if you can define your own procedures that take
    other procedures as arguments.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 看那个！我们刚刚定义了一个函数`f`，它接受一个过程`g`作为参数，并将`g`��用于`2`。这就是你的第一个高阶函数。尝试一下，看看你是否可以定义自己的过程，接受其他过程作为参数。
- en: Uses of Passing Functions as Arguments
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将函数作为参数传递的用途
- en: Now that we've seen how functions can be passed around, let's actually explore
    how this can be useful.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到函数如何被传递，让我们实际探讨一下这如何有用。
- en: 'Consider the following three functions:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下三个函数：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These three functions compute the sum of the doubles, squares, and cubes of
    all integers between a and b, respectively.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个函数分别计算a和b之间所有整数的双倍、平方和立方的和。
- en: For example, `(sum-squares 5 8)` computes 5² + 6² + 7² + 8².
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`(sum-squares 5 8)`计算5² + 6² + 7² + 8²。
- en: Defining all three of these functions seems a bit redundant. Do you see how
    these three functions are nearly identical in definition, except for the underlined
    portions of the code? It's time to build some abstraction.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 定义这三个函数似乎有点多余。你是否注意到这三个函数在定义上几乎相同，除了代码中的下划线部分？是时候建立一些抽象了。
- en: We know that for each of the three functions, we apply some operation to every
    element between `a` and `b`. So instead of having a specific function for each
    operation, let's abstract it away and put it in the function parameters!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，对于这三个函数中的每一个，我们对`a`和`b`之间的每个元素应用某种操作。因此，我们不再为每个操作定义一个特定的函数，而是将其抽象化并放入函数参数中！
- en: 'So instead of having a specialized `sum-[op]` function for every possible operator,
    we''ll just have a general function called `sum`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们不再为每个可能的运算符专门定义`sum-[op]`函数，而是只有一个名为`sum`的通用函数：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We've underlined the major differences in the code above. In this definition
    of `sum`, we apply some input function `fn` to each number between `a` and `b`,
    as you can see in the recursive call.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上面的代码中划出了主要的差异。在这个`sum`的定义中，我们将一些输入函数`fn`应用于`a`和`b`之间的每个数字，正如你在递归调用中所看到的。
- en: 'Now, we can do this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以这样做：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'and this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 和这个：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'and this too:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 还有这个：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Having only written one procedure, `sum`, we get the functionality of all three
    procedures above. What a deal!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 只编写了一个过程`sum`，我们就获得了上面所有三个过程的功能。多么划算啊！
- en: 'If you like, the initial three procedures can be redefined using `sum` as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果愿意，可以使用`sum`重新定义初始的三个过程如下：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In your homework, we will take the abstraction of `sum` even further with an
    extremely useful and well-known HOF called `accumulate`. **Make sure you understand
    how `accumulate` works, as you will need it in future exercises!**
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的作业中，我们将通过一个非常有用且广为人知的高阶函数`accumulate`进一步抽象`sum`。**确保你理解`accumulate`的工作原理，因为你将在未来的练习中用到它！**
