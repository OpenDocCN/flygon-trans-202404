- en: The Substitution Model for Procedure Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过程应用的替换模型
- en: Applying Compound Procedures
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用复合过程
- en: 'So far we have seen how Racket breaks down and evaluates expressions such as:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了Racket如何分解和评估诸如：
- en: '`(+ 1 2)`'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 1 2)`'
- en: '`(+ 3 4 (* 2 5))`'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`(+ 3 4 (* 2 5))`'
- en: 'by following these steps:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤：
- en: Evaluate the procedure
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估过程
- en: Evaluate the arguments
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估参数
- en: Apply the procedure to the arguments.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将过程应用于参数。
- en: 'We have been slightly handwavy with step 3\. How exactly do you ''apply'' procedures?
    For primitive functions like `+`, `-` , `quote`, `or`, `and`, `not`, we can assume
    that it is built into the interpreter . We are more interested in something more
    complex: how do we apply compound (i.e. user defined) procedures? Since we can
    define arbitarily many compound procedures, they can''t all be built into the
    interpreter. There needs to be a a common step-by-step way to apply compound procedures.
    One way to think about this is the Substitution Model, which we will explore in
    this subsection.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第3步中有些含糊。如何确切地“应用”过程？对于像`+`、`-`、`quote`、`or`、`and`、`not`这样的原始函数，我们可以假设它们内置于解释器中。我们更感兴趣的是更复杂的东西：如何应用复合（即用户定义的）过程？由于我们可以定义任意多个复合过程，它们不能全部内置于解释器中。需要有一种共同的逐步方式来应用复合过程。一种思考这个问题的方法是替换模型，我们将在本小节中探讨。
- en: Substitution Model
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换模型
- en: 'To apply a compound procedure with the Substitution Model, you substitute each
    formal parameter in the body with the corresponding argument''s value and evaluate
    it normally. What does this actually mean? It''s easier to see through an example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用替换模型应用复合过程，您需要用相应参数的值替换主体中的每个形式参数，并正常评估它。这实际上意味着什么？通过一个例子更容易理解：
- en: 'Consider the `sum-of-squares` procedure from the very first lab, which can
    be defined as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑第一个实验室中的`sum-of-squares`过程，可以定义如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How does the Substitution Model handle `(sum-of-squares 3 4)` ?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 替换模型如何处理`(sum-of-squares 3 4)`？
- en: We have a formal parameter, x which is called with the [argument](https://edge.edx.org/courses/uc-berkeley/cs61as-1x/SICP/wiki/cs61as-1x/argument/)
    3 and another formal parameter y which is called with the argument 4.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有一个形式参数x，用参数3调用，另一个形式参数y，用参数4调用。
- en: We substitute every occurence of x and y in the body with 3 and 4 respectively
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在主体中用3和4分别替换x和y的每个出现
- en: The body then becomes `(+ (square 3) (square 4))`
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后主体变为`(+ (square 3) (square 4))`
- en: Using the definition of square, this reduces to `(+ (* 3 3) (* 4 4)).`
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用square的定义，这简化为`(+ (* 3 3) (* 4 4))。`
- en: Applying both multiplications gives `(+ 9 16)`
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用两个乘法得到`(+ 9 16)`
- en: Applying addition gives the result of `25`
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用加法得到`25`的结果
- en: 'Step 1 and 2 are the most crucial part of the Substitution Model: finding what
    values are passed into the function, and substituting every occurence of a variable
    in the body with its corresponding value.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤1和2是替换模型最关键的部分：找到传递给函数的值，并用相应值替换主体中的每个变量。
- en: Formal Parameters' Names
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 形式参数的名称
- en: 'You might have noticed by now that the names of formal parameters are arbitary.
    For example all of the followings are equivalent:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可能已经注意到形式参数的名称是任意的。例如，以下所有内容都是等效的：
- en: '`(define (square x) (* x x))`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define (square x) (* x x))`'
- en: '`(define (square apple) (* apple apple))`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define (square apple) (* apple apple))`'
- en: '`(define (square magikarp) (* magikarp magikarp))`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define (square magikarp) (* magikarp magikarp))`'
- en: 'The Substitution Model handles all three equivalently, though it is best to
    pick a name that is easy to understand (In this case, the first definition is
    ideal). The main point is to stay consistent within the body. The following for
    example, might cause an error:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 替换模型处理这三个等效，尽管最好选择一个易于理解的名称（在这种情况下，第一个定义是理想的）。主要问题是在主体内保持一致。例如，以下内容可能会导致错误：
- en: '`(define (square x) (* apple apple))`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define (square x) (* apple apple))`'
- en: '![cube-shaped apple](http://foundersgrp.files.wordpress.com/2011/01/apple-cube.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![立方体形状的苹果](http://foundersgrp.files.wordpress.com/2011/01/apple-cube.jpg)'
- en: When we use Substitution Model with `(square 4)` with the definition above,
    you can notice that things are not properly defined. The procedure `square` accepts
    an argument, x which in this case is 4\. What do we do in the body? We need to
    find the value of `apple` and do `(* apple apple)`. What is the value of `apple`?
    We don't know! We only know what `x` is!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用上述定义的Substitution Model与`(square 4)`时，你会注意到事情并没有得到正确定义。过程`square`接受一个参数，这里是4。在函数体内我们需要找到`apple`的值并执行`(*
    apple apple)`。`apple`的值是多少？我们不知道！我们只知道`x`是多少！
- en: Substitution Model & Racket
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Substitution Model & Racket
- en: Does Racket actually use the Substitution Model to apply compound procedures?
    Not quite. We use the Substitution Model to help us think about procedure application.
    Racket does something slightly more complicated, which we will explore in Unit
    3 and 4\. Later on, we will find that the Substitution Model is not sufficient
    to explain some functions in Racket. This model will serve as a framework which
    we will build on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Racket是否实际使用Substitution Model来应用复合过程？并非完全如此。我们使用Substitution Model来帮助我们思考过程应用。Racket做了稍微复杂一点的事情，我们将在第3和第4单元中探讨。后来，我们会发现Substitution
    Model无法解释Racket中的一些函数。这个模型将作为我们将构建的框架。
- en: Applicative Order vs Normal Order
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Applicative Order vs Normal Order
- en: 'Our method of evaluation by evaluating operator, evaluating the operands and
    then applying the operator is just one possible rule of evaluation. The ordering
    we have been using is called "Applicative Order". An alternative method of evaluation
    would be to not evaluate the operand until the value is needed. This method is
    called "Normal Order". We can see the difference between these 2 from the following
    example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过评估运算符、评估操作数，然后应用运算符的方法只是一种可能的评估规则。我们一直在使用的排序被称为“Applicative Order”。另一种评估方法是在需要值之前不评估操作数。这种方法被称为“Normal
    Order”。我们可以从以下示例中看到这两者之间的区别：
- en: '`(square (+ 3 2))`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`(square (+ 3 2))`'
- en: Note that the input to square is (`+ 3 2).`
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，square的输入是(`+ 3 2)。
- en: 'Applicative Order:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Applicative Order:'
- en: '`(square (+ 3 2))`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`(square (+ 3 2))`'
- en: '`(square 5)`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`(square 5)`'
- en: '`(* 5 5)`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`(* 5 5)`'
- en: '`25`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`25`'
- en: In Applicative Order, you would evaluate the parameter `x`, before you go the
    body of square, which is `(* x x)`. When you evaluate `(+ 3 2)`, you get `5` and
    this is what you pass into square. So `x` is bound to `5`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Applicative Order中，你会在进入square的函数体`(* x x)`之前评估参数`x`。当你评估`(+ 3 2)`时，你得到`5`，这就是你传递给square的值。所以`x`绑定到`5`。
- en: 'Normal Order:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Normal Order:'
- en: '`(square (+ 3 2))`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`(square (+ 3 2))`'
- en: '`(* (+ 3 2) (+ 3 2))`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`(* (+ 3 2) (+ 3 2))`'
- en: '`(* 5 5)`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`(* 5 5)`'
- en: '`25`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`25`'
- en: In Normal Order, you don't evaluate `(+ 3 2)` until you absolutely need to.
    So in this case, the `x` in `(square x)` is bound to `(+ 3 2)`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Normal Order中，你不会评估`(+ 3 2)`直到绝对需要。所以在这种情况下，`(square x)`中的`x`绑定到`(+ 3 2)`。
- en: Notice that, in Normal Order, since you don't evaluate the `x`, which is `(+
    3 2)`, until it's needed, you need to evaluate it twice. On the other hand, in
    Applicative Order, since you evaluate the operand `x` before applying the procedure,
    you only evaluate `(+ 3 2)` once.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在Normal Order中，由于你不评估`x`，即`(+ 3 2)`，直到需要它时，你需要评估两次。另一方面，在Applicative Order中，由于你在应用过程之前评估操作数`x`，你只评估`(+
    3 2)`一次。
- en: 'Consider the following piece of code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码片段：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In Applicative Order, how many times is (+ 1 1) evaluated?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Applicative Order中，(+ 1 1)被评估了多少次？
- en: <ans text="2" explanation="Try again!" u00026gtu0003bu0003c="" ans=""></ans>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <ans text="2" explanation="再试一次！" u00026gtu0003bu0003c="" ans=""></ans>
