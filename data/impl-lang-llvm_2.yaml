- en: Parser
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析器
- en: Implementing a Parser and AST
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现解析器和AST
- en: Welcome to Chapter 2 of the "Implementing a language with LLVM" tutorial. This
    chapter shows you how to use the lexer, built in Chapter 1, to build a full parser
    for our Kaleidoscope language. Once we have a parser, we'll define and build an
    Abstract Syntax Tree (AST).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到“使用LLVM实现语言”教程的第2章。本章将向您展示如何使用第1章中构建的词法分析器来为我们的Kaleidoscope语言构建一个完整的解析器。一旦我们有了解析器，我们将定义并构建一个抽象语法树（AST）。
- en: 'The parser we will build uses a combination of Recursive Descent Parsing and
    Operator-Precedence Parsing to parse the Kaleidoscope language (the latter for
    binary expressions and the former for everything else). Before we get to parsing
    though, lets talk about the output of the parser: the Abstract Syntax Tree.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建的解析器使用递归下降解析和运算符优先级解析的组合来解析Kaleidoscope语言（后者用于二元表达式，前者用于其他所有内容）。在我们开始解析之前，让我们先谈谈解析器的输出：抽象语法树。
- en: 2.1 The Abstract Syntax Tree (AST)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.1 抽象语法树（AST）
- en: 'The AST for a program captures its behavior in such a way that it is easy for
    later stages of the compiler (e.g. code generation) to interpret. We basically
    want one object for each construct in the language, and the AST should closely
    model the language. In Kaleidoscope, we have expressions, a prototype, and a function
    object. We''ll start with expressions first:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的AST以一种易于编译器后续阶段（例如代码生成）解释的方式捕获其行为。我们基本上希望语言中的每个构造都有一个对象，并且AST应该紧密模拟语言。在Kaleidoscope中，我们有表达式、原型和函数对象。我们将首先从表达式开始：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code above shows the definition of the base ExprAST class and one subclass
    which we use for numeric literals. The important thing to note about this code
    is that the NumberExprAST class captures the numeric value of the literal as an
    instance variable. This allows later phases of the compiler to know what the stored
    numeric value is.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码显示了基本ExprAST类的定义以及我们用于数字文字的一个子类。关于这段代码的重要事情是，NumberExprAST类将文字的数值作为实例变量捕获。这使得编译器的后续阶段能够知道存储的数值是什么。
- en: 'Right now we only create the AST, so there are no useful accessor methods on
    them. It would be very easy to add a virtual method to pretty print the code,
    for example. Here are the other expression AST node definitions that we''ll use
    in the basic form of the Kaleidoscope language:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们只创建了AST，所以它们上面没有有用的访问器方法。例如，添加一个虚拟方法来漂亮地打印代码将非常容易。以下是我们将在Kaleidoscope语言的基本形式中使用的其他表达式AST节点定义：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is all (intentionally) rather straight-forward: variables capture the
    variable name, binary operators capture their opcode (e.g. `+`), and calls capture
    a function name as well as a list of any argument expressions. One thing that
    is nice about our AST is that it captures the language features without talking
    about the syntax of the language. Note that there is no discussion about precedence
    of binary operators, lexical structure, etc.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切（故意）相当直接：变量捕获变量名，二元运算符捕获其操作码（例如，`+`），调用捕获函数名以及任何参数表达式的列表。我们的AST的一个好处是，它捕获了语言特性，而不涉及语言的语法。请注意，没有讨论二元运算符的优先级、词法结构等。
- en: 'For our basic language, these are all of the expression nodes we''ll define.
    Because it doesn''t have conditional control flow, it isn''t Turing-complete;
    we''ll fix that in a later installment. The two things we need next are a way
    to talk about the interface to a function, and a way to talk about functions themselves:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的基本语言，这些是我们将定义的所有表达式节点。因为它没有条件控制流，所以它不是图灵完备的；我们将在以后的安装中修复这个问题。接下来我们需要的是一种讨论函数接口的方法，以及一种讨论函数本身的方法：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In Kaleidoscope, functions are typed with just a count of their arguments. Since
    all values are double precision floating point, the type of each argument doesn't
    need to be stored anywhere. In a more aggressive and realistic language, the `ExprAST`
    class would probably have a type field.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kaleidoscope中，函数仅用其参数的计数进行类型化。由于所有值都是双精度浮点数，每个参数的类型不需要存储在任何地方。在一个更积极和现实的语言中，`ExprAST`类可能会有一个类型字段。
- en: With this scaffolding, we can now talk about parsing expressions and function
    bodies in Kaleidoscope.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个支架，我们现在可以谈论在Kaleidoscope中解析表达式和函数体。
- en: 2.2 Parser Basics
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.2 解析器基础知识
- en: 'Now that we have an AST to build, we need to define the parser code to build
    it. The idea here is that we want to parse something like `x+y` (which is returned
    as three tokens by the lexer) into an AST that could be generated with calls like
    this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个要构建的AST，我们需要定义构建它的解析器代码。这里的想法是，我们想解析类似于`x+y`的东西（由词法分析器返回为三个标记），并将其转换为可以通过类似于这样的调用生成的AST：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This implements a simple token buffer around the lexer. This allows us to look
    one token ahead at what the lexer is returning. Every function in our parser will
    assume that CurTok is the current token that needs to be parsed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这实现了围绕词法分析器的简单标记缓冲区。这使我们能够提前查看词法分析器返回的一个标记。我们解析器中的每个函数都将假定CurTok是需要解析的当前标记。
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The Error routines are simple helper routines that our parser will use to handle
    errors. The error recovery in our parser will not be the best and is not particular
    user-friendly, but it will be enough for our tutorial. These routines make it
    easier to handle errors in routines that have various return types: they always
    return null.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Error例程是我们解析器将用于处理错误的简单辅助例程。我们解析器中的错误恢复不会是最佳的，也不是特别用户友好的，但它对于我们的教程来说已经足够了。这些例程使在具有各种返回类型的例程中处理错误变得更容易：它们总是返回null。
- en: 'With these basic helper functions, we can implement the first piece of our
    grammar: numeric literals.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些基本的辅助函数，我们可以实现我们语法的第一部分：数值字面量。
- en: 2.3 Basic Expression Parsing
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.3 基本表达式解析
- en: 'We start with numeric literals, because they are the simplest to process. For
    each production in our grammar, we''ll define a function which parses that production.
    For numeric literals, we have:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从数值字面量开始，因为它们是最简单的处理。对于我们语法中的每个产生式，我们将定义一个函数来解析该产生式。对于数值字面量，我们有：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This routine is very simple: it expects to be called when the current token
    is a tok_number token. It takes the current number value, creates a NumberExprAST
    node, advances the lexer to the next token, and finally returns.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此例程非常简单：它期望在当前标记是tok_number标记时调用。它获取当前数字值，创建一个NumberExprAST节点，将词法分析器推进到下一个标记，最后返回。
- en: 'There are some interesting aspects to this. The most important one is that
    this routine eats all of the tokens that correspond to the production and returns
    the lexer buffer with the next token (which is not part of the grammar production)
    ready to go. This is a fairly standard way to go for recursive descent parsers.
    For a better example, the parenthesis operator is defined like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这有一些有趣的方面。最重要的是，此例程会吃掉与产生式对应的所有标记，并返回带有下一个标记（不是语法产生的一部分）的词法分析器缓冲区，准备好使用。这是递归下降解析器的一种相当标准的方法。作为更好的例子，括号运算符是这样定义的：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This function illustrates a number of interesting things about the parser:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数说明了解析器的许多有趣之处：
- en: '1) It shows how we use the Error routines. When called, this function expects
    that the current token is a `(` token, but after parsing the subexpression, it
    is possible that there is no `)` waiting. For example, if the user types in `(4
    x` instead of `(4)`, the parser should emit an error. Because errors can occur,
    the parser needs a way to indicate that they happened: in our parser, we return
    null on an error.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 1) 它展示了我们如何使用Error例程。当调用时，此函数期望当前标记是一个`（`标记，但在解析子表达式之后，可能没有等待的`）`。例如，如果用户键入了`(4
    x`而不是`(4)`，解析器应该发出错误。因为错误可能会发生，解析器需要一种指示它们发生的方法：在我们的解析器中，错误时我们返回null。
- en: 2) Another interesting aspect of this function is that it uses recursion by
    calling ParseExpression (we will soon see that ParseExpression can call ParseParenExpr).
    This is powerful because it allows us to handle recursive grammars, and keeps
    each production very simple. Note that parentheses do not cause construction of
    AST nodes themselves. While we could do it this way, the most important role of
    parentheses are to guide the parser and provide grouping. Once the parser constructs
    the AST, parentheses are not needed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 此函数的另一个有趣之处在于它通过调用ParseExpression使用了递归（我们很快会看到ParseExpression可以调用ParseParenExpr）。这很强大，因为它允许我们处理递归语法，并保持每个产生式非常简单。请注意，括号本身并不会导致AST节点的构造。虽然我们可以这样做，但括号的最重要作用是指导解析器并提供分组。一旦解析器构造了AST，括号就不再需要了。
- en: 'The next simple production is for handling variable references and function
    calls:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 处理变量引用和函数调用的下一个简单产生式是：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This routine follows the same style as the other routines. (It expects to be
    called if the current token is a tok_identifier token). It also has recursion
    and error handling. One interesting aspect of this is that it uses look-ahead
    to determine if the current identifier is a stand alone variable reference or
    if it is a function call expression. It handles this by checking to see if the
    token after the identifier is a `(` token, constructing either a VariableExprAST
    or CallExprAST node as appropriate.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例程遵循与其他例程相同的风格。（它期望在当前标记为tok_identifier标记时被调用）。它还具有递归和错误处理。其中一个有趣的方面是它使用前瞻来确定当前标识符是独立的变量引用还是函数调用表达式。它通过检查标识符后面的标记是否为`(`标记来处理，根据情况构造VariableExprAST或CallExprAST节点。
- en: 'Now that we have all of our simple expression-parsing logic in place, we can
    define a helper function to wrap it together into one entry point. We call this
    class of expressions "primary" expressions, for reasons that will become more
    clear later in the tutorial. In order to parse an arbitrary primary expression,
    we need to determine what sort of expression it is:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所有简单表达式解析逻辑，我们可以定义一个辅助函数将它们包装在一起成为一个入口点。我们将这类表达式称为“主要”表达式，原因将在本教程后面更清晰地展现。为了解析任意主要表达式，我们需要确定它是什么类型的表达式：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now that you see the definition of this function, it is more obvious why we
    can assume the state of CurTok in the various functions. This uses look-ahead
    to determine which sort of expression is being inspected, and then parses it with
    a function call.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您看到这个函数的定义，更容易理解为什么我们可以假设各个函数中CurTok的状态。这使用前瞻来确定正在检查的表达式类型，然后通过函数调用解析它。
- en: Now that basic expressions are handled, we need to handle binary expressions.
    They are a bit more complex.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在基本表达式已经处理完毕，我们需要处理二进制表达式。它们稍微复杂一些。
- en: 2.4 Binary Expression Parsing
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.4 二进制表达式解析
- en: Binary expressions are significantly harder to parse because they are often
    ambiguous. For example, when given the string `x+y*z`, the parser can choose to
    parse it as either `(x+y)*z` or `x+(y*z)`. With common definitions from mathematics,
    we expect the later parse, because `*` (multiplication) has higher precedence
    than `+` (addition).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制表达式通常更难解析，因为它们经常存在歧义。例如，当给定字符串`x+y*z`时，解析器可以选择将其解析为`(x+y)*z`或`x+(y*z)`。根据数学中的常见定义，我们期望后一种解析，因为`*`（乘法）比`+`（加法）具有更高的优先级。
- en: 'There are many ways to handle this, but an elegant and efficient way is to
    use Operator-Precedence Parsing. This parsing technique uses the precedence of
    binary operators to guide recursion. To start with, we need a table of precedences:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这个问题的方法有很多种，但一种优雅且高效的方法是使用运算符优先级解析。这种解析技术使用二元运算符的优先级来引导递归。首先，我们需要一个优先级表：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For the basic form of Kaleidoscope, we will only support 4 binary operators
    (this can obviously be extended by you, our brave and intrepid reader). The GetTokPrecedence
    function returns the precedence for the current token, or -1 if the token is not
    a binary operator. Having a map makes it easy to add new operators and makes it
    clear that the algorithm doesn't depend on the specific operators involved, but
    it would be easy enough to eliminate the map and do the comparisons in the GetTokPrecedence
    function. (Or just use a fixed-size array).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Kaleidoscope的基本形式，我们只支持4个二元运算符（显然，您可以扩展）。GetTokPrecedence函数返回当前标记的优先级，如果标记不是二元运算符，则返回-1。使用映射使添加新运算符变得容易，并清楚地表明算法不依赖于特定的运算符，但也可以很容易地消除映射，并在GetTokPrecedence函数中进行比较（或者只使用固定大小的数组）。
- en: With the helper above defined, we can now start parsing binary expressions.
    The basic idea of operator precedence parsing is to break down an expression with
    potentially ambiguous binary operators into pieces. Consider ,for example, the
    expression `a+b+(c+d)*e*f+g`. Operator precedence parsing considers this as a
    stream of primary expressions separated by binary operators. As such, it will
    first parse the leading primary expression `a`, then it will see the pairs [+,
    b] [+, (c+d)] [*, e] [*, f] and [+, g]. Note that because parentheses are primary
    expressions, the binary expression parser doesn't need to worry about nested subexpressions
    like (c+d) at all.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有了上面定义的辅助函数，我们现在可以开始解析二进制表达式了。运算符优先级解析的基本思想是将具有潜在模糊二进制运算符的表达式分解为片段。例如，考虑表达式
    `a+b+(c+d)*e*f+g`。运算符优先级解析将其视为一系列由二进制运算符分隔的主表达式流。因此，它首先解析前导主表达式 `a`，然后它将看到对流 [+,
    b] [+, (c+d)] [*, e] [*, f] 和 [+, g]。注意，因为括号是主表达式，所以二进制表达式解析器根本不需要担心像 (c+d) 这样的嵌套子表达式。
- en: 'To start, an expression is a primary expression potentially followed by a sequence
    of [binop,primaryexpr] pairs:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，一个表达式是一个主表达式，后面可能跟着一系列 [binop, primaryexpr] 对：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'ParseBinOpRHS is the function that parses the sequence of pairs for us. It
    takes a precedence and a pointer to an expression for the part that has been parsed
    so far. Note that `x` is a perfectly valid expression: As such, `binoprhs` is
    allowed to be empty, in which case it returns the expression that is passed into
    it. In our example above, the code passes the expression for `a` into ParseBinOpRHS
    and the current token is `+`.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ParseBinOpRHS 是为我们解析对流的函数。它接受一个优先级和一个指向到目前为止已解析部分的表达式的指针。注意 `x` 是一个完全有效的表达式：因此，`binoprhs`
    允许为空，在这种情况下，它会返回传入它的表达式。在我们上面的例子中，代码将 `a` 的表达式传递给 ParseBinOpRHS，当前标记是 `+`。
- en: 'The precedence value passed into ParseBinOpRHS indicates the minimal operator
    precedence that the function is allowed to eat. For example, if the current pair
    stream is [+, x] and ParseBinOpRHS is passed in a precedence of 40, it will not
    consume any tokens (because the precedence of `+` is only 20). With this in mind,
    ParseBinOpRHS starts with:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 传入 ParseBinOpRHS 的优先级值指示了该函数被允许吞食的最低运算符优先级。例如，如果当前的对流是 `[+, x]`，并且 ParseBinOpRHS
    被传入一个优先级为 40，那么它不会消耗任何标记（因为 `+` 的优先级只有 20）。有了这个想法，ParseBinOpRHS 从以下开始：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This code gets the precedence of the current token and checks to see if if
    is too low. Because we defined invalid tokens to have a precedence of -1, this
    check implicitly knows that the pair-stream ends when the token stream runs out
    of binary operators. If this check succeeds, we know that the token is a binary
    operator and that it will be included in this expression:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码获取当前标记的优先级并检查是否过低。因为我们定义了无效标记的优先级为 -1，所以这个检查隐式地知道当标记流耗尽二进制运算符时，对流也将结束。如果此检查成功，我们知道该标记是一个二进制运算符，并且它将包含在此表达式中：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As such, this code eats (and remembers) the binary operator and then parses
    the primary expression that follows. This builds up the whole pair, the first
    of which is [+, b] for the running example.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，此代码吃掉（并记住）二进制运算符，然后解析后面的主表达式。这构建了整个对流，对于运行示例来说，第一个对流是 [+, b]。
- en: 'Now that we parsed the left-hand side of an expression and one pair of the
    RHS sequence, we have to decide which way the expression associates. In particular,
    we could have `(a+b) binop unparsed` or `a + (b binop unparsed)`. To determine
    this, we look ahead at `binop` to determine its precedence and compare it to BinOp''s
    precedence (which is `+` in this case):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经解析了表达式的左侧和一对 RHS 序列，我们必须决定表达式的关联方式。特别地，我们可以有 `(a+b) binop unparsed` 或者
    `a + (b binop unparsed)`。为了确定这一点，我们向前看 `binop` 来确定其优先级，并将其与 BinOp 的优先级（在本例中为 `+`）进行比较：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If the precedence of the binop to the right of "RHS" is lower or equal to the
    precedence of our current operator, then we know that the parentheses associate
    as `(a+b) binop ...`. In our example, the current operator is `+` and the next
    operator is `+`, we know that they have the same precedence. In this case we''ll
    create the AST node for `a+b`, and then continue parsing:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 "RHS" 右侧的 binop 的优先级低于或等于我们当前运算符的优先级，那么我们知道括号的关联方式是 `(a+b) binop ...`。在我们的例子中，当前运算符是
    `+`，下一个运算符是 `+`，我们知道它们具有相同的优先级。在这种情况下，我们将创建 `a+b` 的 AST 节点，然后继续解析：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In our example above, this will turn `a+b+` into `(a+b)` and execute the next
    iteration of the loop, with `+` as the current token. The code above will eat,
    remember, and parse `(c+d)` as the primary expression, which makes the current
    pair equal to [+, (c+d)]. It will then evaluate the `if` conditional above with
    `*` as the binop to the right of the primary. In this case, the precedence of
    `*` is higher than the precedence of `+` so the if condition will be entered.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上面的示例中，这将把`a+b+`转换为`(a+b)`并执行循环的下一次迭代，`+`作为当前的标记。上面的代码将吞下、记住并解析`(c+d)`作为主要表达式，这使得当前的对等于[+,
    (c+d)]。然后，它将使用`*`作为主要右侧的二进制运算符来评估上面的`if`条件。在这种情况下，`*`的优先级高于`+`的优先级，因此将进入if条件。
- en: 'The critical question left here is "how can the if condition parse the right
    hand side in full"? In particular, to build the AST correctly for our example,
    it needs to get all of `(c+d)*e*f` as the RHS expression variable. The code to
    do this is surprisingly simple (code from the above two blocks duplicated for
    context):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键问题是“if条件如何解析右手边的完整内容”？特别是，为了为我们的示例正确构建AST，它需要将所有的`(c+d)*e*f`作为RHS表达式变量。执行此操作的代码非常简单（从上述两个块中复制的代码以获得上下文）：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: At this point, we know that the binary operator to the RHS of our primary has
    higher precedence than the binop we are currently parsing. As such, we know that
    any sequence of pairs whose operators are all higher precedence than `+` should
    be parsed together and returned as "RHS". To do this, we recursively invoke the
    ParseBinOpRHS function specifying "TokPrec+1" as the minimum precedence required
    for it to continue. In our example above, this will cause it to return the AST
    node for `(c+d)*e*f` as RHS, which is then set as the RHS of the `+` expression.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们知道主要右手边的二进制运算符的优先级高于我们当前解析的二进制运算符。因此，我们知道任何操作符的序列，其优先级都高于`+`，应该一起解析并作为"RHS"返回。为此，我们递归调用ParseBinOpRHS函数，指定"TokPrec+1"作为继续执行所需的最小优先级。在我们上面的示例中，这将导致它返回`(c+d)*e*f`的AST节点作为RHS，然后将其设置为`+`表达式的RHS。
- en: Finally, on the next iteration of the while loop, the `+g` piece is parsed and
    added to the AST. With this little bit of code (14 non-trivial lines), we correctly
    handle fully general binary expression parsing in a very elegant way. This was
    a whirlwind tour of this code, and it is somewhat subtle. I recommend running
    through it with a few tough examples to see how it works.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在while循环的下一次迭代中，`+g`部分被解析并添加到AST中。通过这小段代码（14行非平凡代码），我们以非常优雅的方式正确处理了完全一般的二进制表达式解析。这是对这段代码的一次风驰电掣的演示，它有些微妙。我建议使用一些复杂的示例运行它，看看它是如何工作的。
- en: This wraps up handling of expressions. At this point, we can point the parser
    at an arbitrary token stream and build an expression from it, stopping at the
    first token that is not part of the expression. Next up we need to handle function
    definitions, etc.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是表达式的处理。在这一点上，我们可以将解析器指向任意的标记流，并从中构建一个表达式，在遇到不是表达式的第一个标记时停止。接下来我们需要处理函数定义等等。
- en: 2.5 Parsing the Rest
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.5 解析剩余部分
- en: 'The next thing missing is handling of function prototypes. In Kaleidoscope,
    these are used both for `extern` function declarations as well as function body
    definitions. The code to do this is straight-forward and not very interesting
    (once you''ve survived expressions):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个缺失的东西是处理函数原型。在Kaleidoscope中，这些既用于`extern`函数声明，也用于函数主体定义。要执行此操作的代码很简单，也不是很有趣（一旦您完成了表达式）：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Given this, a function definition is very simple, just a prototype plus an
    expression to implement the body:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于此，函数定义非常简单，只是一个原型加上一个实现主体的表达式：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In addition, we support `extern` to declare functions like `sin` and `cos`
    as well as to support forward declaration of user functions. These ‘extern''s
    are just prototypes with no body:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们支持`extern`来声明函数，如`sin`和`cos`，以及支持用户函数的前向声明。这些'extern'只是没有主体的原型：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we''ll also let the user type in arbitrary top-level expressions and
    evaluate them on the fly. We will handle this by defining anonymous nullary (zero
    argument) functions for them:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还将让用户输入任意顶级表达式，并在运行时对其进行评估。我们将通过为它们定义匿名的零参数函数来处理这个问题：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now that we have all the pieces, let's build a little driver that will let us
    actually execute this code we've built!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了所有的部分，让我们构建一个小型驱动程序，让我们实际执行我们构建的这段代码！
- en: 2.6 The Driver
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.6 驱动程序
- en: The driver for this simply invokes all of the parsing pieces with a top-level
    dispatch loop. There isn't much interesting here, so I'll just include the top-level
    loop. See below for full code in the "Top-Level Parsing" section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个驱动程序只是通过一个顶层分发循环调用所有的解析部分。这里没有太多有趣的内容，所以我将只包含顶层循环。请参见下面的“顶层解析”部分中的完整代码。
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The most interesting part of this is that we ignore top-level semicolons. Why
    is this, you ask? The basic reason is that if you type `4 + 5` at the command
    line, the parser doesn't know whether that is the end of what you will type or
    not. For example, on the next line you could type `def foo...` in which case `4+5`
    is the end of a top-level expression. Alternatively you could type `* 6`, which
    would continue the expression. Having top-level semicolons allows you to type
    `4+5;`, and the parser will know you are done.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最有趣的部分是我们忽略了顶层分号。你会问为什么，这是为什么呢？基本原因是，如果你在命令行上输入`4 + 5`，解析器不知道这是否是你要输入的内容的结尾。例如，下一行你可能会输入`def
    foo...`，这样`4+5`就是顶层表达式的结尾。或者你可能会输入`* 6`，这将继续表达式。有了顶层分号，你可以输入`4+5;`，解析器就会知道你已经完成了。
- en: 2.8\. Conclusions
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.8\. 结论
- en: 'With just under 400 lines of commented code (240 lines of non-comment, non-blank
    code), we fully defined our minimal language, including a lexer, parser, and AST
    builder. With this done, the executable will validate Kaleidoscope code and tell
    us if it is grammatically invalid. For example, here is a sample interaction:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 仅有不到400行的注释代码（240行非注释、非空白代码），我们完全定义了我们的最小语言，包括词法分析器、语法分析器和抽象语法树构建器。完成后，可执行文件将验证万花筒代码，并告诉我们它是否在语法上无效。例如，这是一个示例交互：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There is a lot of room for extension here. You can define new AST nodes, extend
    the language in many ways, etc. In the next installment, we will describe how
    to generate LLVM Intermediate Representation (IR) from the AST.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多扩展的空间。你可以定义新的抽象语法树节点，以多种方式扩展语言等。在下一部分中，我们将描述如何从抽象语法树生成LLVM中间表示（IR）。
