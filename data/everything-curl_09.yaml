- en: Building and installing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和安装
- en: Building and installing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和安装
- en: The source code for this project is written in a way that allows it to get compiled
    and built on just about any operating system and platform, with as few restraints
    and requirements as possible.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的源代码以一种允许在几乎任何操作系统和平台上编译和构建的方式编写，尽可能少地限制和要求。
- en: If you have a 32bit (or larger) CPU architecture, if you have a C89 compliant
    compiler and if you have roughly a POSIX supporting sockets API, then you can
    most likely build curl and libcurl for your target system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有32位（或更大）的CPU架构，如果您有一个符合C89标准的编译器，并且您大致有一个支持POSIX套接字API的系统，那么您很可能可以为您的目标系统构建curl和libcurl。
- en: For the most popular platforms, the curl project comes with build systems already
    done and prepared to allow you to easily build it yourself.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最流行的平台，curl项目已经准备好并准备好了构建系统，以允许您轻松地自行构建。
- en: There are also friendly people and organizations who put together binary packages
    of curl and libcurl and make them available for download. The different options
    will be explored below.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 也有友好的个人和组织会打包curl和libcurl的二进制包，并提供下载。下面将探讨不同的选项。
- en: The latest version?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最新版本？
- en: Looking at the curl web site at [https://curl.haxx.se](https://curl.haxx.se)
    you can see the latest curl and libcurl version released from the project. That's
    the latest source code package you can get.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 查看curl网站[https://curl.haxx.se](https://curl.haxx.se)，您可以看到该项目发布的最新curl和libcurl版本。那是您可以获取的最新源代码包。
- en: When you opt for a prebuilt and prepackaged version for your operating system
    or distribution of choice, you may not always find the latest version but you
    might have to either be satisfied with the latest version someone has packaged
    for your environment, or you need to build it yourself from source.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择预先构建和打包版本以供您选择的操作系统或分发版本时，您可能不会总是找到最新版本，但您可能必须要么满足于某人为您的环境打包的最新版本，要么需要自己从源代码构建。
- en: 'The curl project also provides info about the latest version in a somewhat
    more machine-readable format on this URL: `https://curl.haxx.se/info`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: curl项目还在此URL提供了关于最新版本的稍微更加机器可读的信息：`https://curl.haxx.se/info`。
- en: off git!
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从git上获取！
- en: Of course, when building from source you can also always opt to build the very
    latest version that exist in the [git repository](https://github.com/curl/curl).
    It could however be a bit more fragile and probably requires slightly more attention
    to detail.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，当从源代码构建时，您也可以选择构建最新的版本，该版本存在于[git存储库](https://github.com/curl/curl)中。但这可能会更加脆弱，并且可能需要更多的注意细节。
- en: Installing prebuilt binaries
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装预编译的二进制文件
- en: Installing prebuilt binaries
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装预编译的二进制文件
- en: There are many friendly people and organizations who put together binary packages
    of curl and libcurl and make them available for download.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多友好的个人和组织会打包curl和libcurl的二进制包，并提供下载。
- en: Many operating systems offer a "package repository" that is populated with software
    packages for you to install. From the [curl download page](https://curl.haxx.se/download.html)
    you can also follow links to plain binary packages for popular operating systems.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 许多操作系统提供了一个“软件包存储库”，其中包含了可供您安装的软件包。您还可以从[curl下载页面](https://curl.haxx.se/download.html)跟随链接到流行操作系统的纯二进制包。
- en: Installing from your package repository
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从您的软件包存储库安装
- en: curl and libcurl have been around for a very long time and most Linux distributions,
    BSD versions and other *nix versions have package repositories that allow you
    to install curl packages.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: curl和libcurl已经存在很长时间了，大多数Linux发行版、BSD版本和其他*nix版本都有包存储库，允许您安装curl包。
- en: The most common ones are described below.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的描述如下。
- en: apt
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: apt
- en: '`apt` is a tool to install prebuilt packages on Debian Linux and Ubuntu Linux
    distributions and derivates.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`apt`是在Debian Linux和Ubuntu Linux发行版及其派生版本上安装预编译软件包的工具。'
- en: To install the curl command-line tool, you usually just
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装curl命令行工具，通常只需执行
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: …and that then makes sure the dependencies are installed and usually libcurl
    is then also installed as an individual package.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: …然后确保安装了依赖项，通常还会单独安装libcurl作为一个单独的包。
- en: 'If you want to build applications against libcurl, you need a development package
    installed to get the include headers and some additional documentation, etc. You
    can then select a libcurl with the TLS backend you prefer:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要针对libcurl构建应用程序，则需要安装一个开发包以获取包含头文件和一些额外文档等内容。然后您可以选择您喜欢的带有TLS后端的libcurl：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: or
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: or
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: yum
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: yum
- en: 'With Redhat Linux and CentOS Linux derivates, you use `yum` to install packages.
    Install the command-line tool with:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Redhat Linux 和 CentOS Linux 的衍生系统，你可以使用 `yum` 来安装软件包。使用以下命令来安装命令行工具：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You install the libcurl development package (with include files and some docs,
    etc.) with this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令来安装 libcurl 开发包（包括头文件和一些文档等）：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: (The Redhat family of Linux systems usually ship curl built to use NSS as TLS
    backend.)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: (Redhat 系列的 Linux 系统通常使用 NSS 作为 TLS 后端来构建 curl。)
- en: nix
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: nix
- en: '[Nix](https://nixos.org/nix/) is a package manager default to the NixOS distribution,
    but it can also be used on any Linux distribution.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[Nix](https://nixos.org/nix/) 是 NixOS 发行版默认的包管理器，但它也可以在任何 Linux 发行版上使用。'
- en: 'In order to install command-line tool:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装命令行工具：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: homebrew
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: homebrew
- en: '[Homebrew](https://brew.sh/) is an OSX package manager. It does not come by
    default, but one can install it easily.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[Homebrew](https://brew.sh/) 是一个 OSX 的软件包管理器。它不是默认安装的，但是可以很容易地安装。'
- en: 'To install the command-line tool:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装命令行工具：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: cygwin
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: cygwin
- en: TBD
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
- en: Binary packages for Windows
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows 的二进制包
- en: TBD
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
- en: Build from source
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码构建
- en: Build from source
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码构建
- en: The curl project creates source code that can be built to produce the two products
    curl and libcurl. The conversion from source code to binaries is often referred
    to as "building". You build curl and libcurl from source.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: curl 项目创建的源代码可以构建出两个产品 curl 和 libcurl。从源代码转换为二进制文件通常被称为 "构建"。你需要从源代码构建 curl
    和 libcurl。
- en: The curl project doesn't provide any built binaries at all, it only ships the
    source code. The binaries which can be found on the download page of the curl
    web and installed from other places on the Internet are all built and provided
    to the world by other friendly people and organizations.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: curl 项目根本不提供任何已构建的二进制文件，它只提供源代码。可以在 curl 网站的下载页面找到的二进制文件以及从互联网上其他地方安装的二进制文件都是由其他友好的人和组织构建并提供给世界的。
- en: The source code consists of a large number of files containing C code. Generally
    speaking, the same set of files are used to build binaries for all platforms and
    computer architectures that curl supports. curl can be built and run on a vast
    number of different platforms. If you use a rare operating system yourself, chances
    are that building curl from source is the easiest or perhaps the only way to get
    curl.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码包含大量包含 C 代码的文件。一般来说，相同的文件集用于构建 curl 支持的所有平台和计算机架构的二进制文件。curl 可以在大量不同的平台上构建和运行。如果你自己使用的是一种罕见的操作系统，那么从源代码构建
    curl 可能是获得 curl 的最简单或者唯一的方法。
- en: Making it easy to build curl is a priority to the curl project, although we
    don't always necessarily succeed!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使 curl 易于构建是 curl 项目的首要任务，尽管我们并不总是成功！
- en: git vs tarballs
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: git vs 压缩包
- en: When release tarballs are created, a few files are generated and included in
    the final release file. Those generated files are not present in the git repository,
    because they are generated and there is no need to store them in git.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建发布的压缩包时，会生成一些文件并将它们包含在最终的发布文件中。这些生成的文件在 git 存储库中不存在，因为它们是生成的，不需要将它们存储在 git
    中。
- en: So, if you want to build curl from git you need to generate some of those files
    yourself before you can build. On Linux and Unix systems, do this by running `./buildconf`
    and on Windows you run `buildconf.bat`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你想要从 git 构建 curl，你需要在构建之前自己生成一些文件。在 Linux 和 Unix 系统上，通过运行 `./buildconf`
    来执行这个操作，而在 Windows 上，你需要运行 `buildconf.bat`。
- en: On Linux and Unix-like systems
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Linux 和类 Unix 系统上
- en: There are two distinctly different ways to build curl on Linux and other Unix-like
    systems. There's the one using the configure script and there's the CMake approach.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 和其他类 Unix 系统上，构建 curl 有两种明显不同的方式。一种是使用 configure 脚本，另一种是使用 CMake 方法。
- en: There are two different build environments to cater for people's different opinions
    and tastes. The configure based build is arguably the more mature and more complete
    build system and should probably be considered the default one.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种不同的构建环境来满足人们不同的意见和喜好。基于 configure 的构建可能是更成熟、更完整的构建系统，并且可能被认为是默认的构建系统。
- en: Autotools
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Autotools
- en: 'The "Autotools" is a collection of different tools that used together generate
    the `configure` script. The configure script is run by the user who wants to build
    curl and it does a whole bunch of things:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '"Autotools" 是一组不同的工具，它们一起用来生成 `configure` 脚本。用户想要构建 curl 时会运行 configure 脚本，它会做很多事情：'
- en: it checks for features and functions present in your system
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它会检查你系统中是否存在的功能和函数
- en: it offers command-line options so that you as a builder can decide what to enable
    and disable in the build. Features and protocols, etc., can be toggled on/off.
    Or even compiler warning levels and more.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了命令行选项，因此作为构建者，您可以决定在构建中启用和禁用什么。功能和协议等可以切换打开/关闭。甚至可以切换编译器警告级别等。
- en: it offers command-line options to let the builder point to specific installation
    paths for various third-party dependencies that curl can be built to use.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了命令行选项，让构建者指向各种第三方依赖项的特定安装路径，以便curl可以构建以使用它们。
- en: specifies on which file path the generated installation should be placed when
    ultimately the build is made and "make install" is invoked
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定生成的安装应该放置在哪个文件路径上，当最终进行构建并调用“make install”时
- en: In the most basic usage, just running `./configure` in the source directory
    is enough. When the script completes, it outputs a summary of what options it
    has detected/enabled and what features that are still disabled, some of them possibly
    because it failed to detect the presence of necessary third-party dependencies
    that are needed for those functions to work.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在最基本的用法中，只需在源代码目录中运行`./configure`即可。当脚本完成时，它会输出一个摘要，列出它检测到/启用的选项以及仍然禁用的功能，其中一些可能是因为它未能检测到必要的第三方依赖项的存在而禁用的，这些依赖项是这些功能正常工作所必需的。
- en: Then you invoke `make` to build the entire thing and `make install` to install
    curl, libcurl and associated things. `make install` requires that you have the
    correct rights in your system to create and write files in the installation directory
    or you will get some errors.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你调用`make`来构建整个项目，使用`make install`来安装curl、libcurl及其相关组件。`make install`需要你在系统中拥有正确的权限来创建和写入安装目录中的文件，否则会出现一些错误。
- en: cross-compiling
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交叉编译
- en: Cross-compiling means that you build the source on one architecture but the
    output is created to be run on a different one. For example, you could build the
    source on a Linux machine but have the output work to run on a Windows machine.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉编译意味着您在一个架构上构建源代码，但输出是为在不同架构上运行而创建的。例如，您可以在Linux机器上构建源代码，但输出却能在Windows机器上运行。
- en: For cross-compiling to work, you need a dedicated compiler and build system
    setup for the particular target system for which you want to build. How to get
    and install that system is not covered in this book.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要使交叉编译生效，您需要为您要构建的特定目标系统设置专用的编译器和构建系统。如何获取和安装该系统不在本书的范围之内。
- en: Once you have a cross compiler, you can instruct configure to use that compiler
    instead of the "native" compiler when it builds curl so that the end result then
    can be moved over and used on the other machine.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了交叉编译器，你可以指示configure在构建curl时使用该编译器，而不是使用“本地”编译器，这样最终结果就可以移植并在其他机器上使用。
- en: CMake
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CMake
- en: TBD
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
- en: static linking
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态链接
- en: TBD
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
- en: On Windows
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上
- en: TBD
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
- en: make
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: make
- en: TBD
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
- en: CMake
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CMake
- en: TBD
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
- en: other compilers
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他编译器
- en: TBD
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
- en: On other systems
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在其他系统上
- en: TBD
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
- en: Porting curl to non-supported systems
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将curl移植到不受支持的系统
- en: TBD
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 待定
- en: Select TLS backend
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择TLS后端
- en: The configure based build offers the user to select from a wide variety of different
    TLS libraries when building. You select them by using the correct command line
    options.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 基于configure的构建允许用户在构建时从各种不同的TLS库中进行选择。您可以通过使用正确的命令行选项来选择它们。
- en: The default OpenSSL configure check will also detect and use BoringSSL or libressl.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的OpenSSL配置检查也将检测并使用BoringSSL或libressl。
- en: 'GnuTLS: `--without-ssl --with-gnutls`.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GnuTLS：`--without-ssl --with-gnutls`。
- en: 'Cyassl: `--without-ssl --with-cyassl`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cyassl：`--without-ssl --with-cyassl`
- en: 'NSS: `--without-ssl --with-nss`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NSS：`--without-ssl --with-nss`
- en: 'PolarSSL: `--without-ssl --with-polarssl`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PolarSSL：`--without-ssl --with-polarssl`
- en: 'mbedTLS: `--without-ssl --with-mbedtls`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mbedTLS：`--without-ssl --with-mbedtls`
- en: 'axTLS: `--without-ssl --with-axtls`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: axTLS：`--without-ssl --with-axtls`
- en: 'schannel: `--without-ssl --with-winssl`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: schannel：`--without-ssl --with-winssl`
- en: 'secure transport: `--with-winssl --with-darwinssl`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全传输：`--with-winssl --with-darwinssl`
- en: Dependencies
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖项
- en: Dependencies
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖项
- en: A key to making good software is to build on top of other great software. By
    using libraries that many others use, we reinvent the same things fewer times
    and we get more reliable software as there are more people using the same code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 制作优秀软件的关键是在其他优秀软件的基础上构建。通过使用许多其他人使用的库，我们减少了重复造轮子的次数，我们得到的软件更可靠，因为有更多的人使用相同的代码。
- en: A whole slew of features that curl provides require that it is built to use
    one or more external libraries. They are then dependencies of curl. None of them
    are *required*, but most users will want to use at least some of them.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: curl提供的许多功能都需要构建以使用一个或多个外部库。然后它们是curl的依赖项。它们都不是*必需*的，但大多数用户都希望至少使用其中一些。
- en: zlib
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**zlib**'
- en: '[http://zlib.net/](http://zlib.net/)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://zlib.net/](http://zlib.net/)'
- en: curl can do automatic decompression of data transferred over HTTP if built with
    zlib. Getting compressed data over the wire will use less bandwidth.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用zlib构建，curl可以自动解压通过HTTP传输的数据。通过传输压缩数据，可以使用更少的带宽。
- en: c-ares
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**c-ares**'
- en: '[https://c-ares.haxx.se/](https://c-ares.haxx.se/)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://c-ares.haxx.se/](https://c-ares.haxx.se/)'
- en: curl can be built with c-ares to be able to do asynchronous name resolution.
    Another option to enable asynchronous name resolution is to build curl with the
    threaded name resolver backend, which will then instead create a separate helper
    thread for each name resolve. c-ares does it all within the same thread.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: curl可以使用c-ares构建以执行异步名称解析。启用异步名称解析的另一种方法是使用线程化名称解析后端构建curl，然后为每个名称解析创建一个单独的辅助线程。
    c-ares在同一个线程中完成所有操作。
- en: libssh2
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**libssh2**'
- en: '[https://libssh2.org/](https://libssh2.org/)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://libssh2.org/](https://libssh2.org/)'
- en: When curl is built with libssh2, it enables support for the SCP and SFTP protocols.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当curl使用libssh2构建时，它会启用对SCP和SFTP协议的支持。
- en: nghttp2
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**nghttp2**'
- en: '[https://nghttp2.org/](https://nghttp2.org/)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://nghttp2.org/](https://nghttp2.org/)'
- en: This is a library for handling HTTP/2 framing and is a prerequisite for curl
    to support HTTP version 2.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于处理HTTP/2帧的库，是curl支持HTTP版本2所必需的先决条件。
- en: openldap
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**openldap**'
- en: '[https://www.openldap.org/](https://www.openldap.org/)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.openldap.org/](https://www.openldap.org/)'
- en: This library is one option to allow curl to get support for the LDAP and LDAPS
    URL schemes. On Windows, you can also opt to build curl to use the winssl library.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库是一个选项，允许curl支持LDAP和LDAPS URL方案。在Windows上，您还可以选择构建curl以使用winssl库。
- en: librtmp
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**librtmp**'
- en: '[https://rtmpdump.mplayerhq.hu/](https://rtmpdump.mplayerhq.hu/)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://rtmpdump.mplayerhq.hu/](https://rtmpdump.mplayerhq.hu/)'
- en: To enable curl's support for the RTMP URL scheme, you must build curl with the
    librtmp library that comes from the RTMPDump project.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要使curl支持RTMP URL方案，您必须使用来自RTMPDump项目的librtmp库构建curl。
- en: libmetalink
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**libmetalink**'
- en: '[https://launchpad.net/libmetalink](https://launchpad.net/libmetalink)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://launchpad.net/libmetalink](https://launchpad.net/libmetalink)'
- en: Build curl with libmetalink to have it support the [metalink](http://www.metalinker.org/)
    format, which allows curl to download the same file from multiple places. It includes
    checksums and more. See curl's [--metalink](https://curl.haxx.se/docs/manpage.html#--metalink)
    option.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用libmetalink构建curl以支持[metalink](http://www.metalinker.org/)格式，该格式允许curl从多个位置下载相同的文件。它包括校验和等内容。请参阅curl的[--metalink](https://curl.haxx.se/docs/manpage.html#--metalink)选项。
- en: libpsl
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**libpsl**'
- en: '[https://rockdaboot.github.io/libpsl/](https://rockdaboot.github.io/libpsl/)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://rockdaboot.github.io/libpsl/](https://rockdaboot.github.io/libpsl/)'
- en: When you build curl with support for libpsl, the cookie parser will know about
    the Public Suffix List and thus handle such cookies appropriately.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当您构建支持libpsl的curl时，cookie解析器将了解公共后缀列表，从而适当地处理此类cookie。
- en: libidn2
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**libidn2**'
- en: '[https://www.gnu.org/software/libidn/libidn2/manual/libidn2.html](https://www.gnu.org/software/libidn/libidn2/manual/libidn2.html)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.gnu.org/software/libidn/libidn2/manual/libidn2.html](https://www.gnu.org/software/libidn/libidn2/manual/libidn2.html)'
- en: curl handles International Domain Names (IDN) with the help of the libidn2 library.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: curl借助libidn2库处理国际化域名（IDN）。
- en: TLS libraries
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TLS库
- en: There are many different TLS libraries to choose from, so they are covered in
    a [separate section](building-tls.html).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的TLS库可供选择，因此它们在[单独的部分](building-tls.html)中进行了介绍。
- en: TLS libraries
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TLS库
- en: Build to use a TLS library
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建以使用TLS库
- en: To make curl support TLS based protocols, such as HTTPS, FTPS, SMTPS, POP3S,
    IMAPS and more, you need to build with a third-party TLS library since curl doesn't
    implement the TLS protocol itself.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要使curl支持基于TLS的协议（如HTTPS，FTPS，SMTPS，POP3S，IMAPS等），您需要使用第三方TLS库构建，因为curl本身不实现TLS协议。
- en: 'curl is written to work with a large number of TLS libraries:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: curl被设计用于与大量TLS库一起工作：
- en: BoringSSL
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BoringSSL**'
- en: GSkit (OS/400 specific)
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GSkit（仅限OS/400）
- en: GnuTLS
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GnuTLS**'
- en: NSS
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NSS**'
- en: OpenSSL
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenSSL**'
- en: Secure Transport (native macOS)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Secure Transport（本地macOS）
- en: WolfSSL
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WolfSSL**'
- en: axTLS
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**axTLS**'
- en: libressl
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**libressl**'
- en: mbedTLS
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mbedTLS**'
- en: Schannel (native Windows)
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Schannel（本地Windows）
- en: When you build curl and libcurl to use one of these libraries, it is important
    that you have the library and its include headers installed on your build machine.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当您构建curl和libcurl以使用这些库之一时，重要的是您在构建机器上安装了库及其包含头文件。
- en: configure
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: Below, you will learn how to tell configure to use the different libraries.
    Note that for all libraries except OpenSSL and its siblings, you must *disable*
    the check for OpenSSL by using `--without-ssl`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，您将学习如何告诉configure使用不同的库。请注意，对于除OpenSSL及其同类外的所有库，您必须通过使用`--without-ssl`来*禁用*对OpenSSL的检查。
- en: OpenSSL, BoringSSL, libressl
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenSSL，BoringSSL，libressl
- en: '[PRE8]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'configure will detect OpenSSL in its default path by default. You can optionally
    point configure to a custom install path prefix where it can find openssl:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，configure将在默认路径中检测到OpenSSL。您可以选择将configure指向自定义安装路径前缀，以便它找到openssl：
- en: '[PRE9]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The alternatives [BoringSSL](building-boringssl.html) and libressl look similar
    enough that configure will detect them the same way as OpenSSL but it will use
    some additional measures to find out which of the particular flavors it is using.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 备选项[BoringSSL](building-boringssl.html)和libressl看起来相似，因此configure将以与OpenSSL相同的方式检测它们，但它将使用一些额外的措施来确定它使用的特定风格。
- en: GnuTLS
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GnuTLS
- en: '[PRE10]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'configure will detect GnuTLS in its default path by default. You can optionally
    point configure to a custom install path prefix where it can find gnutls:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，configure将在默认路径中检测到GnuTLS。您可以选择将configure指向自定义安装路径前缀，以便它找到gnutls：
- en: '[PRE11]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: NSS
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NSS
- en: '[PRE12]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'configure will detect NSS in its default path by default. You can optionally
    point configure to a custom install path prefix where it can find nss:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，configure将在默认路径中检测到NSS。您可以选择将configure指向自定义安装路径前缀，以便它找到nss：
- en: '[PRE13]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: WolfSSL
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WolfSSL
- en: '[PRE14]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '(cyassl was the former name of the library) configure will detect WolfSSL in
    its default path by default. You can optionally point configure to a custom install
    path prefix where it can find WolfSSL:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: （cyassl是该库的以前名称）默认情况下，configure将在默认路径中检测到WolfSSL。您可以选择将configure指向自定义安装路径前缀，以便它找到WolfSSL：
- en: '[PRE15]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: axTLS
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: axTLS
- en: '[PRE16]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'configure will detect axTLS in its default path by default. You can optionally
    point configure to a custom install path prefix where it can find axTLS:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，configure将在默认路径中检测到axTLS。您可以选择将configure指向自定义安装路径前缀，以便它找到axTLS：
- en: '[PRE17]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: mbedTLS
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mbedTLS
- en: '[PRE18]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'configure will detect mbedTLS in its default path by default. You can optionally
    point configure to a custom install path prefix where it can find mbedTLS:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，configure将在默认路径中检测到mbedTLS。您可以选择将configure指向自定义安装路径前缀，以便它找到mbedTLS：
- en: '[PRE19]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Secure Transport
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Secure Transport
- en: '[PRE20]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '(DarwinSSL is an alternative name for Secure Transport) configure will detect
    Secure Transport in its default path by default. You can optionally point configure
    to a custom install path prefix where it can find DarwinSSL:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: （DarwinSSL是Secure Transport的另一个名称）默认情况下，configure将在默认路径中检测到Secure Transport。您可以选择将configure指向自定义安装路径前缀，以便它找到DarwinSSL：
- en: '[PRE21]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Schannel
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Schannel
- en: '[PRE22]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '(WinSSL is an alternative name for Schannel) configure will detect Schannel
    in its default path by default. You can optionally point configure to a custom
    install path prefix where it can find WinSSL:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: （WinSSL是Schannel的另一个名称）默认情况下，configure将在默认路径中检测到Schannel。您可以选择将configure指向自定义安装路径前缀，以便它找到WinSSL：
- en: '[PRE23]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: BoringSSL
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BoringSSL
- en: Build curl with boringssl
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用boringssl构建curl
- en: build boringssl
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建boringssl
- en: $HOME/src is where I put the code in this example. You can pick wherever you
    like.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: $HOME/src是我在这个示例中放置代码的地方。您可以选择任何地方。
- en: '[PRE24]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: set up the build tree to get detected by curl's configure
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置构建树以被curl的configure检测到
- en: In the boringssl source tree root, make sure there's a `lib` and an `include`
    dir. The `lib` dir should contain the two libs (I made them symlinks into the
    build dir). The `include` dir is already present by default. Make and populate
    `lib` like this (commands issued in the source tree root, not in the `build/`
    subdirectory).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在boringssl源代码树根目录下，请确保存在`lib`和`include`目录。`lib`目录应包含两个库（我将它们设置为了构建目录中的符号链接）。`include`目录已经默认存在。像这样创建和填充`lib`（命令在源代码树根目录中执行，而不是在`build/`子目录中）。
- en: '[PRE25]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: configure curl
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置curl
- en: '`LIBS=-lpthread ./configure --with-ssl=$HOME/src/boringssl` (where I point
    out the root of the boringssl tree)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`LIBS=-lpthread ./configure --with-ssl=$HOME/src/boringssl`（其中我指出了boringssl树的根目录）'
- en: Verify that at the end of the configuration, it says it detected BoringSSL to
    be used.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 验证配置结束时，是否显示检测到将使用BoringSSL。
- en: build curl
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建curl
- en: Run `make` in the curl source tree.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在curl源代码树中运行`make`。
- en: Now you can install curl normally with `make install` etc.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以像平常一样使用`make install`等命令来安装curl。
