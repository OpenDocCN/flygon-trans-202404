- en: Functional literals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数字面量
- en: Functional literals
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数字面量
- en: 'A functional literal just represents an anonymous function. You can assign
    functional literal to a variable:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 函数字面量只是表示一个匿名函数。你可以将函数字面量赋值给一个变量：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or invoke functional literal directly (Please notice the `()` at the end of
    functional literal):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 或直接调用函数字面量（请注意函数字面量末尾的`()`）：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The above `2` programs both output "`Hello, 中国！`".
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的`2`个程序都输出"`Hello, 中国！`"。
- en: 'Functional literal is also a closure, so it can access the variables of its
    surrounding function. Check the following example which your real intention is
    `1` and `2` are printed:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 函数字面量也是一个闭包，因此它可以访问其周围函数的变量。检查以下示例，你真正想要的是打印`1`和`2`：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But the output is:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但输出是：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The cause is the `func` goroutines don''t get the opportunity to run until
    the `main` goroutine sleeps, and at that time, the variable `i` has been changed
    to `3`. Modify the above program as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是`func`协程在`main`协程休眠之前没有运行的机会，而在那时，变量`i`已经被改变为`3`。将上述程序修改如下：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `func` goroutine can run before `i` is changed, so the running result is
    what you expect:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`func`协程可以在`i`被改变之前运行，因此运行结果是你期望的：'
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But the idiom method should be passing `i` as an argument of the functional
    literal:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但惯用方法应该是将`i`作为函数字面量的参数传递：
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In above program, When "`go func(i int) {fmt.Println(i)}(i)`" is executed (Note:
    not goroutine is executed.), `i` defined in `main()` is assigned to `func`''s
    local parameter `i`. And the result is:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，当执行"`go func(i int) {fmt.Println(i)}(i)`"时（注意：不是执行协程。），`main()`中定义的`i`被赋值给`func`的局部参数`i`。结果是：
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'P.S. You should notice, If you pass an argument while not use it, the `Go`
    compiler doesn''t complain, but the closure will use the variable inherited from
    the parent function. That means the following statement:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: P.S. 你应该注意，如果你传递了一个参数但没有使用它，`Go` 编译器不会报错，但闭包会使用从父函数继承的变量。这意味着以下语句：
- en: '[PRE8]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'equals to:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE9]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'References:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：
- en: '[The Go Programming Language Specification](https://golang.org/ref/spec#Function_literals);'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go编程语言规范](https://golang.org/ref/spec#Function_literals);'
- en: '[A question about passing arguments to closure](https://groups.google.com/forum/#!topic/golang-nuts/JXTEYyoPLio);'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[关于向闭包传递参数的问题](https://groups.google.com/forum/#!topic/golang-nuts/JXTEYyoPLio);'
- en: '[Why add “()” after closure body in Golang?](http://stackoverflow.com/questions/16008604/why-add-after-closure-body-in-golang).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[为什么在Golang中在闭包体后面添加“()”？](http://stackoverflow.com/questions/16008604/why-add-after-closure-body-in-golang)。'
