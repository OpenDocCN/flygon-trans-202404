- en: JavaScriptにおける非同期処理
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript中的异步处理
- en: 原文：[https://typescriptbook.jp/reference/asynchronous](https://typescriptbook.jp/reference/asynchronous)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/reference/asynchronous](https://typescriptbook.jp/reference/asynchronous)
- en: 非同期処理
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步处理
- en: もしJavaScriptで本格的に何かを作りたいのであれば、非同期処理とは切っても切れない関係になるでしょう。初めのうちは理解に苦しむことが多いですが今では非同期処理を直観的に操作できる機能が実装されたのでハードルは大きく下がりました。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要在JavaScript中真正地构建一些东西，那么异步处理将成为不可或缺的关系。起初可能会很难理解，但现在已经实现了直观操作异步处理的功能，因此难度大大降低了。
- en: JavaScriptはシングルプロセス、シングルスレッドで動作する言語です。この特徴については別のページにもありますが、これはすべてのプログラムは直列に処理されるということを意味します。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种单进程、单线程运行的语言。虽然这个特点在其他页面中也有提到，但这意味着所有程序都是按顺序处理的。
- en: '[## 📄️ シングルプロセス・シングルスレッドとコールバック'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ 单进程单线程和回调'
- en: コンピューティング。特に並列、並行処理をするプログラミングに入ってくるとプロセス、スレッドという言葉を耳にするようになります。](/reference/single-process-and-callback)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[计算机。特别是在涉及并行和并发编程时，您会开始听到进程和线程这些词语。](/reference/single-process-and-callback)'
- en: これだけ聞けばすべてのJavaScriptのプログラムは上から下に同期的に処理されるようにも聞こえます。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅听到这些可能会让人觉得所有JavaScript程序都是按顺序同步处理的。
- en: ですがこの特徴には弱点があります。直列に処理されるため時間のかかる処理があるとその間は他の処理が実行されません。たとえばAPIリクエストの場合処理の大部分は待ち時間ですが、この待ち時間も直列に処理されるとその間は何もできないことになってしまいます。これをブロッキングといいます。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这个特点也有弱点。由于是按顺序处理，如果有耗时的处理，那么在此期间将不会执行其他处理。例如，在API请求的情况下，大部分处理时间都是等待时间，但如果这段等待时间也按顺序处理，那么在此期间将无法做任何事情。这被称为阻塞。
- en: この問題を回避するためにJavaScriptではノンブロッキングを扱います。ノンブロッキングでは処理を受けたあと即座に処理を返し、あとで別の方法で結果を伝えます。この方法をコールバックと呼ぶこともあります。コールバックの言葉は折り返しの電話を意味します。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这个问题，JavaScript使用非阻塞方式处理。非阻塞意味着在接收到处理后立即返回处理，并在稍后以另一种方式传达结果。这种方法有时也被称为回调。回调一词意味着回电话。
- en: Promiseの誕生[​](#promiseの誕生 "Promiseの誕生 への直接リンク")
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Promise的诞生[​](#promise的诞生 "跳转至Promise的诞生")
- en: JavaScriptにおける非同期処理にはコードの見通しが悪くなる(コールバック地獄)という弊害があります。ES2015から追加されたPromiseはその打開策ともいえ、JavaScriptのコードをコールバック地獄から解き放ちました。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的异步处理会导致代码变得难以理解（回调地狱）。从ES2015开始引入的Promise可以说是一种解决方案，将JavaScript代码从回调地狱中解放出来。
- en: そしてそのPromiseをさらに使いやすくするためにasync/awaitがES2017で追加されました。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步简化Promise的使用，ES2017引入了async/await。
- en: 本章で取り上げる内容について[​](#本章で取り上げる内容について "本章で取り上げる内容について への直接リンク")
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于本章内容的更多信息[​](#本章内容 "跳转至本章内容")
- en: 本章ではこれらPromise/async/awaitの使いかたや特徴をそれぞれのページに分けて取り上げていきます。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将分别介绍Promise/async/await的用法和特点。
