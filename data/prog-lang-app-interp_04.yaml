- en: 4A First Taste of Desugaring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4A 解糖的第一次尝试
- en: We’ve begun with a very spartan arithmetic language. Let’s look at how we might
    extend it with more arithmetic operations that can nevertheless be expressed in
    terms of existing ones. We’ll add just two, because these will suffice to illustrate
    the point.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个非常简约的算术语言开始。让我们看看如何通过更多可以用现有操作来表达的算术操作来扩展它。我们只会添加两个，因为这些足以说明问题。
- en: '4.1Extension: Binary Subtraction'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.1扩展：二进制减法
- en: 'First, we’ll add subtraction. Because our language already has numbers, addition,
    and multiplication, it’s easy to define subtraction: \(a - b = a + -1 \times b\).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加减法。因为我们的语言已经有了数字、加法和乘法，所以定义减法很容易：\(a - b = a + -1 \times b\)。
- en: 'Okay, that was easy! But now we should turn this into concrete code. To do
    so, we face a decision: where does this new subtraction operator reside? It is
    tempting, and perhaps seems natural, to just add one more rule to our existing
    ArithC datatype.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这很容易！但现在我们应该将其转化为具体的代码。为此，我们面临一个决定：这个新的减法运算符应该放在哪里？诱人的做法，也许看起来很自然，就是在我们现有的
    ArithC 数据类型中添加一条规则。
- en: Do Now!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就做！
- en: What are the negative consequences of modifying ArithC?
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 修改 ArithC 的负面后果是什么？
- en: This creates a few problems. The first, obvious, one is that we now have to
    modify all programs that process ArithC. So far that’s only our interpreter, which
    is pretty simple, but in a more complex implementation, that could already be
    a concern. Second, we were trying to add new constructs that we can define in
    terms of existing ones; it feels slightly self-defeating to do this in a way that
    isn’t modular. Third, and most subtly, there’s something conceptually wrong about
    modifying ArithC. That’s because ArithC represents our core language. In contrast,
    subtraction and other additions represent our user-facing, surface language. It’s
    wise to record conceptually different ideas in distinct datatypes, rather than
    shoehorn them into one. The separation can look a little unwieldy sometimes, but
    it makes the program much easier for future developers to read and maintain. Besides,
    for different purposes you might want to layer on different extensions, and separating
    the core from the surface enables that.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这会带来一些问题。首先，显而易见的问题是，我们现在必须修改所有处理 ArithC 的程序。到目前为止，只有我们的解释器，它非常简单，但在更复杂的实现中，这可能已经是一个问题。其次，我们试图添加可以根据现有构造定义的新构造；以一种非模块化的方式这样做似乎有点自我打击。第三，最微妙的是，在修改
    ArithC 方面存在概念上的错误。这是因为 ArithC 代表我们的核心语言。相比之下，减法和其他附加项代表我们面向用户的表面语言。在不同的数据类型中记录概念上不同的想法比将它们硬塞到一个数据类型中更明智。有时分离可能看起来有点笨拙，但这使得未来开发人员更容易阅读和维护程序。此外，出于不同的目的，您可能希望添加不同的扩展，将核心与表面分开使这成为可能。
- en: 'Therefore, we’ll define a new datatype to reflect our intended surface syntax
    terms:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将定义一个新的数据类型来反映我们预期的表面语法术语：
- en: '| (define-type ArithS |'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (定义类型 ArithS |'
- en: '|   [numS (n : number)] |'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [numS (n : number)] |'
- en: '|   [plusS (l : ArithS) (r : ArithS)] |'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [plusS (l : ArithS) (r : ArithS)] |'
- en: '|   [bminusS (l : ArithS) (r : ArithS)] |'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [bminusS (l : ArithS) (r : ArithS)] |'
- en: '|   [multS (l : ArithS) (r : ArithS)]) |'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [multS (l : ArithS) (r : ArithS)]) |'
- en: This looks almost exactly like ArithC, other than the added case, which follows
    the familiar recursive pattern.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来几乎和 ArithC 一样，除了添加的情况，遵循熟悉的递归模式。
- en: Given this datatype, we should do two things. First, we should modify our parser
    to also parse - expressions, and always construct ArithS terms (rather than any
    ArithC ones). Second, we should implement a desugar function that translates ArithS
    values into ArithC ones.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这个数据类型，我们应该做两件事。首先，我们应该修改我们的��析器，以便解析 - 表达式，并始终构造 ArithS 术语（而不是任何 ArithC 术语）。其次，我们应该实现一个解糖函数，将
    ArithS 值转换为 ArithC 值。
- en: 'Let’s write the obvious part of desugar:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写出解糖的明显部分：
- en: '[<desugar>](#(elem._(chunk._~3cdesugar~3e~3a1))) ::='
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[<解糖>](#(elem._(chunk._~3cdesugar~3e~3a1))) ::='
- en: '| (define (desugar [as : ArithS]) : ArithC |'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (定义 (解糖 [as : ArithS]) : ArithC |'
- en: '|   (type-case ArithS as |'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (type-case ArithS as |'
- en: '|     [numS (n) (numC n)] |'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [numS (n) (numC n)] |'
- en: '|     [plusS (l r) (plusC (desugar l) |'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [plusS (l r) (plusC (解糖 l) |'
- en: '|                         (desugar r))] |'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                         (解糖 r))] |'
- en: '|     [multS (l r) (multC (desugar l) |'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [multS (l r) (multC (解糖 l) |'
- en: '|                         (desugar r))] |'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                         (解糖 r))] |'
- en: '|     [<bminusS-case>](#(elem._(chunk._~3cbminus.S-case~3e~3a1))))) |'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [<bminusS-case>](#(elem._(chunk._~3cbminus.S-case~3e~3a1))))) |'
- en: Now let’s convert the mathematical description of subtraction above into code:[<bminusS-case>](#(elem._(chunk._~3cbminus.S-case~3e~3a1)))
    ::=
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将上面的减法数学描述转换为代码：[<bminusS-case>](#(elem._(chunk._~3cbminus.S-case~3e~3a1)))
    ::=
- en: '| [bminusS (l r) (plusC (desugar l) |'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [bminusS (l r) (plusC (desugar l) |'
- en: '|                       (multC (numC -1) (desugar r)))] |'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                       (multC (numC -1) (desugar r)))] |'
- en: Do Now!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在动手！
- en: It’s a common mistake to forget the recursive calls to desugar on l and r. What
    happens when you forget them? Try for yourself and see.
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 忘记在 l 和 r 上的 desugar 递归调用是一个常见的错误。当你忘记它们时会发生什么？自己试试看。
- en: '4.2Extension: Unary Negation'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.2扩展：一元否定
- en: 'Now let’s consider another extension, which is a little more interesting: unary
    negation. This forces you to do a little more work in the parser because, depending
    on your surface syntax, you may need to look ahead to determine whether you’re
    in the unary or binary case. But that’s not even the interesting part!'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑另一个更有趣的扩展：一元否定。这会使你在解析器中做更多的工作，因为根据你的表面语法，你可能需要向前查看来确定你是处于一元还是二元的情况。但那甚至不是有趣的部分！
- en: 'There are many ways we can desugar unary negation. We can define it naturally
    as \(-b = 0 - b\), or we could abstract over the desugaring of binary subtraction
    with this expansion: \(-b = 0 + -1 \times b\).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以许多方式解开一元否定。我们可以自然地将其定义为 \(-b = 0 - b\)，或者我们可以通过这个展开来抽象二元减法的解糖：\(-b = 0
    + -1 \times b\)。
- en: Do Now!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在动手！
- en: Which one do you prefer? Why?
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你更喜欢哪一个？为什么？
- en: 'It’s tempting to pick the first expansion, because it’s much simpler. Imagine
    we’ve extended the ArithS datatype with a representation of unary negation:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 选择第一个扩展很诱人，因为它简单得多。想象一下，我们已经扩展了 ArithS 数据类型，其中包含一种表示一元否定的方法：
- en: '| [uminusS (e : ArithS)] |'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [uminusS (e : ArithS)] |'
- en: 'Now the implementation in desugar is straightforward:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 desugar 中的实现很简单：
- en: '| [uminusS (e) (desugar (bminusS (numS 0) e))] |'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [uminusS (e) (desugar (bminusS (numS 0) e))] |'
- en: 'Let’s make sure the types match up. Observe that e is a ArithS term, so it
    is valid to use as an argument to bminusS, and the entire term can legally be
    passed to desugar. It is therefore important to not desugar e but rather embed
    it directly in the generated term. This embedding of an input term in another
    one and recursively calling desugar is a common pattern in desugaring tools; it
    is called a macro (specifically, the “macro” here is this definition of uminusS).However,
    there are two problems with the definition above:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们确保类型匹配。观察到 e 是一个 ArithS 术语，因此可以将其用作 bminusS 的参数，并且整个术语可以合法地传递给 desugar。因此，重要的是不要解糖
    e，而是直接将其嵌入到生成的术语中。这种在解糖工具中嵌入输入术语并递归调用 desugar 的模式是常见的模式；这被称为宏（具体来说，在这里，“宏”是 uminusS
    的定义）。但是，上述定义存在两个问题： '
- en: 'The first is that the recursion is generative, which forces us to take extra
    care.If you haven’t heard of generative recursion before, read the section on
    it in [How to Design Programs](http://www.htdp.org/). Essentially, in generative
    recursion the sub-problem is a computed function of the input, rather than a structural
    piece of it. This is an especially simple case of generative recursion, because
    the “function” is simple: it’s just the bminusS constructor. We might be tempted
    to fix this by using a different rewrite:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一，递归是生成式的，这迫使我们格外小心。如果你之前没听说过生成式递归，请阅读[《如何设计程序》](http://www.htdp.org/)中的相关部分。本质上，在生成式递归中，子问题是输入的计算函数，而不是其结构的一部分。这是生成式递归的一个特别简单的情况，因为“函数”很简单：它只是
    bminusS 构造函数。我们可能会想通过使用不同的重写来修复这个问题：
- en: '| [uminusS (e) (bminusS (numS 0) (desugar e))] |'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| [uminusS (e) (bminusS (numS 0) (desugar e))] |'
- en: which does indeed eliminate the generativity.Do Now!
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确实消除了生成性。现在动手！
- en: Unfortunately, this desguaring transformation won’t work at all! Do you see
    why? If you don’t, try to run it.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不幸的是，这个展开转换根本行不通！你知道为什么吗？如果不知道，尝试运行它。
- en: The second is that we are implicitly depending on exactly what bminusS means;
    if its meaning changes, so will that of uminusS, even if we don’t want it to.
    In contrast, defining a functional abstraction that consumes two terms and generates
    one representing the addition of the first to -1 times the second, and using this
    to define the desugaring of both uminusS and bminusS, is a little more fault-tolerant.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个问题是，我们在隐式地依赖于 bminusS 的确切含义；如果其含义发生变化，uminusS 的含义也会改变，即使我们不希望如此。相比之下，定义一个功能抽象，该抽象接受两个术语并生成一个代表第一个术语加上第二个术语的负数的抽象，并使用此来定义
    uminusS 和 bminusS 的展开，更具有容错性。
- en: You might say that the meaning of subtraction is never going to change, so why
    bother? Yes and no. Yes, it’s meaning is unlikely to change; but no, its implementation
    might. For instance, the developer may decide to log all uses of binary subtraction.
    In the macro expansion, all uses of unary negation would also get logged, but
    they would not in the second expansion.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会说减法的含义永远不会改变，所以为什么要费心呢？是的和不是。是的，它的含义不太可能改变；但不是，它的实现可能会改变。例如，开发者可能决定记录所有二进制减法的使用情况。在宏展开中，所有一元否定的使用情况也会被记录下来，但在第二次展开中则不会。
- en: Fortunately, in this particular case we have a much simpler option, which is
    to define \(-b = -1 \times b\). This expansion works with the primitives we have,
    and follows structural recursion. The reason we took the above detour, however,
    is to alert you to these problems, and warn that you might not always be so fortunate.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在这种特殊情况下，我们有一个更简单的选项，即定义\(-b = -1 \times b\)。这种展开适用于我们拥有的原语，并遵循结构递归。然而，我们上面的绕道之所以有所警示，是为了提醒您这些问题，并警告您可能并不总是如此幸运。
