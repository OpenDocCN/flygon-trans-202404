- en: Beauty Is in Simplicity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简约即美
- en: Beauty Is in Simplicity
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简约即美
- en: 'There is one quote that I think is particularly good for all software developers
    to know and keep close to their hearts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为有一句话特别适合所有软件开发人员牢记于心：
- en: '*Beauty of style and harmony and grace and good rhythm depends on simplicity.*
    — Plato'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*风格的美丽、和谐、优美和良好的节奏取决于简约。* — 柏拉图'
- en: In one sentence I think this sums up the values that we as software developers
    should aspire to.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 用一句话概括，我认为这些就是我们作为软件开发人员应该追求的价值观。
- en: 'There are a number of things we strive for in our code:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的代码中努力追求的一些东西有：
- en: Readability
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可读性
- en: Maintainability
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可维护性
- en: Speed of development
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发速度
- en: The elusive quality of beauty
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 美丽的难以捉摸之处
- en: Plato is telling us that the enabling factor for all of these qualities is simplicity.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 柏拉图告诉我们，所有这些品质的启示因素都是简约。
- en: What is beautiful code? This is potentially a very subjective question. Perception
    of beauty depends heavily on individual background, just as much of our perception
    of anything depends on our background. People educated in the arts have a different
    perception of (or at least approach to) beauty than people educated in the sciences.
    Arts majors tend to approach beauty in software by comparing software to works
    of art, while science majors tend to talk about symmetry and the golden ratio,
    trying to reduce things to formulae. In my experience, simplicity is the foundation
    of most of the arguments from both sides.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是美丽的代码？这可能是一个非常主观的问题。美的感知在很大程度上取决于个人的背景，就像我们对任何事物的感知一样取决于我们的背景。艺术专业的人对美的感知（或者至少对待美的方式）与科学专业的人不同。艺术专业的人倾向于将软件与艺术作品进行比较，而科学专业的人则倾向于谈论对称性和黄金分割比，试图将事物归纳为公式。在我看来，简约是双方大多数争论的基础。
- en: Think about source code that you have studied. If you haven't spent time studying
    other people's code, stop reading this right now and find some open source code
    to study. Seriously! I mean it! Go search the web for some code in your language
    of choice, written by some well-known, acknowledged expert.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 想想你学过的源代码。如果你还没有花时间研究其他人的代码，请立即停止阅读，并找一些开放源代码来研究。说真的！我是认真的！去搜索一些你所选择语言的代码，由一些知名的、公认的专家编写。
- en: You're back? Good. Where were we? Ah yes... I have found that code that resonates
    with me and that I consider beautiful has a number of properties in common. Chief
    among these is simplicity. I find that no matter how complex the total application
    or system is, the individual parts have to be kept simple. Simple objects with
    a single responsibility containing similarly simple, focused methods with descriptive
    names. Some people think the idea of having short methods of five to ten lines
    of code is extreme, and some languages make it very hard to do this, but I think
    that such brevity is a desirable goal nonetheless.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你回来了？很好。我们上次说到哪了？啊是的...我发现那些与我产生共鸣并且我认为美丽的代码具有一些共同的特性。其中最重要的是简约。我发现无论总体应用程序或系统有多么复杂，单个部分都必须保持简单。简单的对象具有单一的职责，包含同样简单的、专注的方法和描述性的名称。有些人认为每个方法只有五到十行代码的想法太极端了，而有些语言使得这样做非常困难，但我认为这样的简洁仍然是一个值得追求的目标。
- en: The bottom line is that beautiful code is simple code. Each individual part
    is kept simple with simple responsibilities and simple relationships with the
    other parts of the system. This is the way we can keep our systems maintainable
    over time, with clean, simple, testable code, keeping the speed of development
    high throughout the lifetime of the system. Beauty is born of and found in simplicity.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 底线是美丽的代码是简单的代码。每个单独的部分都保持简单，具有简单的职责，并与系统的其他部分保持简单的关系。这是我们可以随着系统生命周期的发展保持系统可维护性的方式，使用干净、简单、可测试的代码，在系统的整个生命周期内保持开发速度高。美丽源自于简约。
- en: By Jørn Ølmheim
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：Jørn Ølmheim
