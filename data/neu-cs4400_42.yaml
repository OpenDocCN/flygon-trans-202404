- en: Feature EmbeddingTuesday, February 14th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特征嵌入星期二，2月14日
- en: 'We saw that the difference between lazy evaluation and eager evaluation is
    in the evaluation rules for `with` forms, function applications, etc:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了惰性求值和急切求值之间的区别在于`with`形式、函数应用等的求值规则：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: is eager, and
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 急于，而且
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: is lazy. But is the first rule *really* eager? The fact is that the only thing
    that makes it eager is the fact that our understanding of the mathematical notation
    is eager — if we were to take math as lazy, then the description of the rule becomes
    a description of lazy evaluation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 是惰性的。但是第一个规则*真的*是急切的吗？事实是，唯一使其急切的是我们对数学符号的理解是急切的事实 — 如果我们将数学视为惰性，那么规则的描述就变成了对惰性求值的描述。
- en: 'Another way to look at this is — take the piece of code that implements this
    evaluation:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种看待这个问题的方式是——考虑一下实现这个评估的代码片段：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and the same question applies: is this really implementing eager evaluation?
    We know that this is indeed eager — we can simply try it and check that it is,
    but it is only eager because we are using an eager language for the implementation!
    If our own language was lazy, then the evaluator’s implementation would run lazily,
    which means that the above applications of the the `eval` and the `subst` functions
    would also be lazy, making our evaluator lazy as well.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的问题也适用：这真的实现了急切求值吗？我们知道这确实是急切的——我们只需简单尝试一下并检查它是否是，但这只是急切的因为我们在实现中使用了急切的语言！如果我们自己的语言是惰性的，那么求值器的实现也将以惰性方式运行，这意味着上述`eval`和`subst`函数的应用也将是惰性的，使得我们的求值器也是惰性的。
- en: This is a general phenomena where some of the semantic features of the language
    we use (math in the formal description, Racket in our code) gets *embedded* into
    the language we implement.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种普遍现象，其中我们使用的语言的一些语义特征（在正式描述中是数学，在我们的代码中是 Racket）被*嵌入*到我们实现的语言中。
- en: 'Here’s another example — consider the code that implements arithmetics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个例子——考虑一下实现算术的代码：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'what if it was written like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它是这样写的：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Would it still implement unlimited integers and exact fractions? That depends
    on the language that was used to implement it: the above syntax suggests C, C++,
    Java, or some other relative, which usually come with limited integers and no
    exact fractions. But this really depends on the language — even our own code has
    unlimited integers and exact rationals only because Racket has them. If we were
    using a language that didn’t have such features (there are such Scheme implementations),
    then our implemented language would absorb these (lack of) features too, and its
    own numbers would be limited in just the same way. (And this includes the syntax
    for numbers, which we embedded intentionally, like the syntax for identifiers).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它仍然会实现无限整数和精确分数吗？这取决于用来实现它的语言：上述语法建议使用 C、C++、Java 或其他相关语言，通常带有有限的整数和没有精确分数。但这实际上取决于语言——即使是我们自己的代码也仅仅因为
    Racket 有它们才具有无限整数和精确分数。如果我们使用的语言没有这些功能（有这样的 Scheme 实现），那么我们实现的语言也将吸收这些（缺乏）功能，并且它自己的数字将以同样的方式受限制。
    （这包括数字的语法，我们有意嵌入了它们，就像标识符的语法一样）。
- en: The bottom line is that we should be aware of such issues, and be very careful
    when we talk about semantics. Even the language that we use to communicate (semi-formal
    logic) can mean different things.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 底线是，我们应该意识到这样的问题，并在谈论语义时要非常小心。即使是我们用来交流的语言（半正式逻辑）也可能意味着不同的事情。
- en: '* * *'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Aside: read “Reflections on Trusting Trust” by Ken Thompson (You can skip to
    the “Stage II” part to get to the interesting stuff.)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 附注：阅读肯·汤普森的《对“信任信任”的反思》（您可以跳到“第二阶段”部分以找到有趣的内容）。
- en: (And when you’re done, look for “XcodeGhost” to see a relevant example, and
    don’t miss the leaked document on the wikipedia page…)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: （完成后，寻找“XcodeGhost”以查看相关示例，并不要错过维基百科页面上的泄露文档...）
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Here is yet another variation of our evaluator that is even closer to a meta-circular
    evaluator. It uses Racket values directly to implement values, so arithmetic operations
    become straightforward. Note especially how the case for function application
    is similar to arithmetics: a FLANG function application translates to a Racket
    function application. In both cases (applications and arithmetics) we don’t even
    check the objects since they are simple Racket objects — if our language happens
    to have some meaning for arithmetics with functions, or for applying numbers,
    then we will inherit the same semantics in our language. This means that we now
    specify less behavior and fall back more often on what Racket does.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们评估器的另一种变体，甚至更接近于元循环评估器。它直接使用 Racket 值来实现值，因此算术运算变得简单明了。特别要注意函数应用情况与算术的类似性：FLANG
    函数应用转换为 Racket 函数应用。在这两种情况下（应用和算术运算），我们甚至不检查对象，因为它们是简单的 Racket 对象——如果我们的语言碰巧对带有函数的算术或应用数字具有某种意义，那么我们将继承我们的语言中相同的语义。这意味着我们现在规定的行为更少，更多地依赖于
    Racket 的行为。
- en: 'We use Racket values with this type definition:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下类型定义的 Racket 值：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And the evaluation function can now be:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 而且评估函数现在可以是：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note how the arithmetics implementation is simple — it’s a direct translation
    of the FLANG syntax to Racket operations, and since we don’t check the inputs
    to the Racket operations, we let Racket throw type errors for us. Note also how
    function application is just like the arithmetic operations: a FLANG application
    is directly translated to a Racket application.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意算术运算的实现是简单的——它直接将 FLANG 语法转换为 Racket 操作，并且由于我们不检查 Racket 操作的输入，因此让 Racket
    为我们抛出类型错误。还要注意函数应用与算术操作的相似性：FLANG 应用直接转换为 Racket 应用。
- en: 'However, this does not work quite as simply in Typed Racket. The whole point
    of typechecking is that we never run into type errors — so we cannot throw back
    on Racket errors since code that might produce them is forbidden! A way around
    this is to perform explicit checks that guarantee that Racket cannot run into
    type errors. We do this with the following two helpers that are defined inside
    `eval`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 Typed Racket 中，情况并不那么简单。类型检查的整个重点在于我们永远不会遇到类型错误——因此我们不能依赖于 Racket 的错误，因为可能产生错误的代码是被禁止的！绕过这一点的方法是执行明确的检查，以确保
    Racket 不会遇到类型错误。我们在 `eval` 中定义了以下两个辅助函数来实现这一点：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that Typed Racket is “smart enough” to figure out that in `evalF` the result
    of the recursive evaluation has to be either `Number` or `(VAL -> VAL)`; and since
    the `if` throws out on numbers, we’re left with `(VAL -> VAL)` functions, not
    just any function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 Typed Racket 是“足够智能”的，它能够推断出在 `evalF` 中递归评估的结果必须是 `Number` 或 `(VAL -> VAL)`；而且由于
    `if` 会排除数字，所以我们只剩下 `(VAL -> VAL)` 函数，而不是任意函数。
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
