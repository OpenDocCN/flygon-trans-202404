- en: Higher-order functions and function literals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高阶函数和函数字面量
- en: 'Here is a function that computes the sum of the integers from \(a\) to \(b\)
    ([higher1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/40-lambda/higher1.kts)):'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '这是一个计算从 \(a\) 到 \(b\) 的整数和的函数（[higher1.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/40-lambda/higher1.kts)):'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And here is code to compute the sum of the cubes of the integers from \(a\)
    to \(b\):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是计算从 \(a\) 到 \(b\) 的整数立方和的代码：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that sumInt and sumCubes are nearly identical—they only differ in the
    expression that is added to s in every iteration of the loop.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意sumInt和sumCubes几乎相同——它们只在每次循环迭代中添加到s的表达式上有所不同。
- en: These two functions are special cases of computing the expression
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个函数是计算表达式的特殊情况
- en: \[ \sum_{i=a}^b f(i) \]for different choices of the function \(f\).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: \[ \sum_{i=a}^b f(i) \]对于不同选择的函数 \(f\)。
- en: If mathematics has a notation for this kind of common expression, then so should
    computer science. We should be able to write a function sum that takes the function \(f\)
    as a parameter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数学有一种表示这种常见表达式的符号，那么计算机科学也应该有。我们应该能够编写一个以函数 \(f\) 作为参数的函数 sum。
- en: 'In Kotlin, we can do this as follows: ([higher2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/40-lambda/higher2.kts)):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '在Kotlin中，我们可以这样做：([higher2.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/40-lambda/higher2.kts)):'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note the types of the three parameters: a and b are integers, but f has a more
    interesting type: (Int) -> Int. This type denotes a function from integers to
    integers. In general, the notation (A, B, ...) -> R denotes a function that takes
    arguments of types A, B, etc., and returns a result of type R.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意三个参数的类型：a和b是整数，但f有一个更有趣的类型：(Int) -> Int。这种类型表示从整数到整数的函数。一般来说，表示 (A, B, ...)
    -> R 的符号表示一个接受类型为 A、B 等的参数并返回类型为 R 的结果的函数。
- en: To call the function sum, we need to provide an argument value for the parameter f.
    Modern programming languages like Kotlin (and Scala, Swift, Java since Java 8,
    and C++ since C++11) make it possible to define a function without having to give
    it a name. This is called a function literal, an anonymous function, or a lambda.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用函数sum，我们需要为参数 f 提供一个参数值。现代编程语言如Kotlin（以及Scala、Swift、Java自Java 8以来，以及C++自C++11以来）使得可以定义一个函数而无需给它命名。这被称为函数字面量、匿名函数或lambda。
- en: 'Note that for other basic objects, we define "nameless" objects all the time:
    We do not need to name every string or every integer. For instance, we don''t
    have to write this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意对于其他基本对象，我们经常定义"无名称"对象：我们不需要为每个字符串或每个整数命名。例如，我们不必写成这样：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Instead, we simply write:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们只需写成：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The value of an object written directly in the program is called a literal.
    For instance, writing 1234 is an integer literal, writing "CS109" is a string
    literal.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 直接写在程序中的对象的值称为字面量。例如，写入1234是一个整数字面量，写入"CS109"是一个字符串字面量。
- en: The syntax for function literals consists of braces containing the parameters,
    a right arrow, and some code to compute the result. For example, the function
    that raises an integer to its cube is written as
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 函数字面量的语法包含包含参数的大括号，一个右箭头，以及一些计算结果的代码。例如，将整数提升到其立方的函数写为
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A function literal that computes the sum of two integers looks like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两个整数的和的函数字面量如下所示：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The effect of executing a function literal is to create a function object (without
    giving it a name):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 执行函数字面量的效果是创建一个函数对象（不给它命名）：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A function object exists on the heap, like every other object. We can assign
    a name to it, or store a reference to it in a collection or in another object.
    And, since it is a function object, we can call it like a function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数对象存在于堆上，就像其他对象一样。我们可以为其指定一个名称，或将其引用存储在集合或另一个对象中。而且，由于它是一个函数对象，我们可以像调用函数一样调用它。
- en: 'Here we create a function object and immediately call it with an argument:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们创建一个函数对象并立即使用一个参数调用它：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here we assign a name to the function object and use that to call it with different
    arguments:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们为函数对象指定一个名称，并使用它来使用不同的参数调用它：
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And here we store several function objects in a list:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们在列表中存储了几个函数对象：
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Coming back to our function sum, we can now use it to compute the sum of integers
    and the sum of cubes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的函数sum，现在我们可以使用它来计算整数的和以及立方的和：
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In fact, in this case the compiler can determine the type of the arguments
    in the function literal automatically. The compiler knows that the last argument
    of sum is a function of type (Int) -> Int, and so it knows that the type of any
    function literal written as an argument should be of this type. Therefore we can
    omit the type in the function literal:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在这种情况下，编译器可以自动确定函数文字中参数的类型。编译器知道 sum 的最后一个参数是类型为 (Int) -> Int 的函数，因此它知道作为参数编写的任何函数文字的类型应该是此类型。因此，我们可以在函数文字中省略类型：
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Furthermore, the tangle of closing parentheses at the end is a bit confusing,
    and so Kotlin has a nice convention: If the last argument in a function call is
    a function literal, we can write it after the closing parenthesis of the function
    call:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，末尾的括号闭合混乱了一点，因此 Kotlin 有一个很好的约定：如果函数调用中的最后一个参数是函数文字，则可以在函数调用的括号之后写它：
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, another convention often simplifies the code: When a function literal
    has only one parameter, then we can omit the parameter and the right-arrow, and
    use the magic name it inside the function literal as the parameter: ([higher3.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/40-lambda/higher3.kts)):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，另一个常规经常简化代码：当函数文字只有一个参数时，我们可以省略参数和右箭头，并在函数文字中使用魔术名称 it 作为参数：（[higher3.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/40-lambda/higher3.kts)）：
- en: '[PRE14]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Functions like sum are called higher-order functions because they take another
    function object as an argument: A higher-order function is a "meta-function" that
    works on other functions.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 像 sum 这样的函数被称为高阶函数，因为它们接受另一个函数对象作为参数：高阶函数是一个作用于其他函数的“元函数”。
- en: 'Higher-order functions allow us to naturally express ideas where a function
    is part of the input to a problem, such as:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 高阶函数使我们能够自然地表达一个函数是问题输入的一部分的想法，例如：
- en: print a table of function values for a given function (see [table.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/40-lambda/table.kts))
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印给定函数的函数值表（参见[table.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/40-lambda/table.kts)）。
- en: integrating a function numerically (see [table.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/40-lambda/integrate.kts))
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对函数进行数值积分（参见[table.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/40-lambda/integrate.kts)）。
- en: finding a fixed point of a function.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找函数的不动点。
