- en: Missing Opportunities for Polymorphism
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未利用多态性的机会
- en: Missing Opportunities for Polymorphism
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未利用多态性的机会
- en: 'Polymorphism is one of the grand ideas that is fundamental to OO. The word,
    taken from Greek, means many (*poly*) forms (*morph*). In the context of programming
    polymorphism refers to many forms of a particular class of objects or method.
    But polymorphism isn''t simply about alternate implementations. Used carefully,
    polymorphism creates tiny localized execution contexts that let us work without
    the need for verbose *if-then-else* blocks. Being in a context allows us to do
    the right thing directly, whereas being outside of that context forces us to reconstruct
    it so that we can then do the right thing. With careful use of alternate implementations,
    we can capture context that can help us produce less code that is more readable.
    This is best demonstrated with some code, such as the following (unrealistically)
    simple shopping cart:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 多态性是面向对象编程中基本的伟大思想之一。这个词源于希腊语，意思是多 (*poly*) 种形式 (*morph*)。在编程的语境中，多态性指的是特定类的对象或方法的多种形式。但多态性不仅仅是关于替代实现。谨慎使用多态性可以创建微小的局部执行环境，让我们能够在不需要冗长的
    *if-then-else* 块的情况下工作。处于上下文中使我们能够直接做正确的事情，而处于上下文之外则迫使我们重新构造上下文，以便我们随后能够做正确的事情。通过谨慎使用替代实现，我们可以捕获可以帮助我们生成更少但更可读的代码的上下文。这最好通过一些代码来演示，比如下面（不现实地）简单的购物车：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s say our webshop offers items that can be downloaded and items that need
    to be shipped. Let''s build another object that supports these operations:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的网店提供可以下载的物品和需要邮寄的物品。让我们构建另一个支持这些操作的对象：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When a client has completed checkout we need to ship the goods:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户完成结账时，我们需要发货：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The *???* parameter isn't some new fancy elvis operator, it's asking should
    I email or snail-mail the item? The context needed to answer this question no
    longer exists. We have could captured the method of shipment in a boolean or enum
    and then use an *if-then-else* to fill in the missing parameter. Another solution
    would be create two classes that both extend Item. Let's call these DownloadableItem
    and SurfaceItem. Now let's write some code. I'll promote Item to be an interface
    that supports a single method, ship. To ship the contents of the cart, we will
    call `item.ship(shipper)`. Classes `DownloadableItem` and `SurfaceItem` will both
    implement ship.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*???*参数不是某种新的花哨的 Elvis 操作符，而是在询问我应该通过电子邮件还是普通邮件发送物品？回答这个问题所需的上下文已经不存在。我们本可以在布尔值或枚举中捕获运输方式，然后使用
    *if-then-else* 填充缺少的参数。另一种解决方案是创建两个都扩展自 Item 的类。我们将它们称为 DownloadableItem 和 SurfaceItem。现在让我们写一些代码。我将提升
    Item 为支持单个方法 ship 的接口。为了发送购物车的内容，我们将调用`item.ship(shipper)`。类`DownloadableItem`和`SurfaceItem`都将实现
    ship。'
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this example we''ve delegated the responsibility of working with `Shipping`
    to each Item. Since each item knows hows it''s best shipped, this arrangement
    allows us to get on with it without the need for an *if-then-else*. The code also
    demonstrates a use of two patterns that often play well together: Command and
    Double Dispatch. Effective use of these patterns relies on careful use of polymorphism.
    When that happens there will be a reduction in the number of *if-then-else* blocks
    in our code.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们已经委托每个物品处理`Shipping`的责任。由于每个物品都知道如何最好地发货，这种安排使我们能够继续进行而无需 *if-then-else*。该代码还演示了两种经常一起使用的模式：命令和双重分派。对这些模式的有效使用依赖于对多态性的谨慎使用。当这种情况发生时，我们的代码中将减少
    *if-then-else* 块的数量。
- en: While there are cases where it's much more practical to use *if-then-else* instead
    of polymorphism, it is more often the case that a more polymorphic coding style
    will yield a smaller, more readable and less fragile code base. The number of
    missed opportunities is a simple count of the *if-then-else* statements in our
    code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有些情况下使用 *if-then-else* 比使用多态性更实际，但更多情况下，更多态的编码风格将产生一个更小、更可读且更不脆弱的代码库。错过的机会数量是我们代码中
    *if-then-else* 语句的简单计数。
- en: By [Kirk Pepperdine](http://programmer.97things.oreilly.com/wiki/index.php/Kirk_Pepperdine)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 作者为[Kirk Pepperdine](http://programmer.97things.oreilly.com/wiki/index.php/Kirk_Pepperdine)。
