- en: Streams as Lazy Lists
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 惰性列表中的流
- en: Streams Revisited
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流再访
- en: In section Lesson 11, we showed how to implement streams as delayed lists. We
    introduced special forms `delay` and `cons-stream`, which allowed us to construct
    a "promise" to compute the `cdr` of a stream, without actually fulfilling that
    promise until later. We could use this general technique of introducing special
    forms whenever we need more control over the evaluation process, but this is awkward.
    For one thing, a special form is not a first-class object like a procedure, so
    we cannot use it together with higher-order procedures. Additionally, we were
    forced to create streams as a new kind of data object similar but not identical
    to lists, and this required us to reimplement many ordinary list operations (`map`,
    `append`, and so on) for use with streams.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在第11课中，我们展示了如何将流实现为延迟列表。我们引入了特殊形式`delay`和`cons-stream`，这使我们能够构造一个“承诺”来计算流的`cdr`，而不实际履行该承诺直到以后。每当我们需要更多控制评估过程时，我们可以使用这种一般技术引入特殊形式，但这很笨拙。首先，特殊形式不像过程那样是一流对象，因此我们无法与高阶过程一起使用它。此外，我们被迫将流创建为一种类似但不完全相同于列表的新数据对象，这要求我们重新实现许多用于流的普通列表操作（`map`，`append`等）。
- en: Streams in Lazy Evaluator
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 惰性求值器中的流
- en: With lazy evaluation, streams and lists can be identical, so there is no need
    for special forms or for separate list and stream operations. All we need to do
    is to arrange matters so that `cons` is non-strict. One way to accomplish this
    is to extend the lazy evaluator to allow for non-strict primitives, and to implement
    `cons` as one of these. An easier way is to recall Lesson 4 that there is no fundamental
    need to implement `cons` as a primitive at all. Instead, we can represent pairs
    as procedures
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用惰性求值，流（streams）和列表（lists）可以是相同的，因此不需要特殊形式或单独的列表和流操作。我们所需要做的就是安排`cons`是非严格的。实现这一点的一种方法是扩展惰性求值器以允许非严格的原语，并将`cons`实现为其中之一。更简单的方法是回顾第4课，根本没有必要将`cons`实现为原语。相反，我们可以将对偶表示为过程
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In terms of these basic operations, the standard definitions of the list operations
    will work with infinite lists (streams) as well as finite ones, and the stream
    operations can be implemented as list operations. Here are some examples:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些基本操作，列表操作的标准定义将适用于无限列表（流）以及有限列表，并且流操作可以实现为列表操作。以下是一些示例：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Note that these lazy lists are *even lazier* than the streams of Lesson 11:
    The `car` of the list, as well as the `cdr`, is delayed. In fact, even accessing
    the `car` or `cdr` of a lazy pair need not force the value of a list element.
    The value will be forced only when it is really needed -- e.g., for use as the
    argument of a primitive, or to be printed as an answer.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些惰性列表比第11课的流*更懒惰*：列表的`car`和`cdr`都是延迟的。实际上，即使访问惰性对的`car`或`cdr`也不需要强制列表元素的值。只有在真正需要时才会强制该值--例如，用作原语的参数，或作为答案打印。
