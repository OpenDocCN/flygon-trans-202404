- en: Hot n Cold Observables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热和冷可观察
- en: Hot n Cold Observables
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热和冷可观察
- en: 'There are hot and cold observables. Let''s talk about what a cold observable
    is. In a cold observable two subscribers get their own copies of values like so:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有热和冷可观察。让我们谈谈什么是冷可观察。在冷可观察中，两个订阅者各自获得值的副本，如下所示：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In a hot observable a subscriber receives values when it starts to subscribe,
    it is however more like a live streaming in football, if you start subscribing
    5 minutes in the game, you will have missed the first 5 minutes of action and
    you start receiving data from that moment on:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在热可观察中，订阅者在开始订阅时接收值，但更像是足球的直播流，如果你在比赛开始后5分钟开始订阅，你将错过前5分钟的比赛，并且你将从那一刻开始接收数据：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: From cold to hot - Katy Perry mode
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从冷到热 - 凯蒂·佩里模式
- en: In the example above it isn't really hot, as a matter of fact both subscribers
    of the values will each receive `0,1,2,3,4`. As this is the live streaming of
    a football game it doesn't really act like we want it to, so how to fix it?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，它实际上并不是热的，事实上，值的两个订阅者将分别收到`0,1,2,3,4`。由于这是足球比赛的直播，它并不像我们想要的那样行动，那么如何修复呢？
- en: Two components are needed to make something go from cold to hot. `publish()`
    and `connect()`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个组件需要使某物从冷到热。`publish()`和`connect()`。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case we see that the output for the first stream that starts to subscribe
    straight away is `0,1,2,3,4` whereas the second stream is emitting `3,4`. It's
    clear it matters when the subscription happens.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们看到第一个立即开始订阅的流的输出是`0,1,2,3,4`，而第二个流正在发出`3,4`。很明显，订阅发生的时间很重要。
- en: Warm observables
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 温暖可观察
- en: There is another type of observables that acts a lot like a hot observable but
    is in a way *lazy*. What I mean with this is that they are essentially not emitting
    any values until a subscriber arrives. Let's compare a hot and a warm observable
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种行为类似于热可观察但在某种程度上*懒惰*的可观察。我的意思是它们实质上不会发出任何值，直到有订阅者到来。让我们比较一下热和温暖可观察
- en: '**hot observable**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**热可观察**'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we can see that the hot observable will loose the first value being emitted
    as the subscribe arrives late to the party.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到，热可观察将丢失第一个被发出的值，因为订阅者晚到了。
- en: Let's contrast this to our warm observable
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这与我们的温暖可观察进行对比
- en: '**warm observable**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**温暖可观察**'
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `refCount()` operator ensures this observable becomes warm, i.e no values
    are emitted until `sub1` subscribes. `sub2` on the other hand arrives late to
    the party, i.e that subscription receives the value its currently on and not the
    values from the beginning.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`refCount()`运算符确保这个可观察变得温暖，即在`sub1`订阅之前不会发出任何值。另一方面，`sub2`晚到了，也就是说该订阅接收当前所在的值，而不是从一开始的值。'
- en: So an output from this is
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这个输出是
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This shows the following, first subscriber starts from 0\. Had it been hot it
    would have started at a higher number, i/e it would have been late to the party.
    When the second subscriber arrives it doesn't get 0 but rather 1 as the first
    number showing it has indeed become hot.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了以下情况，第一个订阅者从0开始。如果它是热的，它将从更高的数字开始，也就是说它会晚到一点。当第二个订阅者到来时，它不会得到0，而是1，显示第一个数字，表明它确实变热了。
- en: Naturally hot observables
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自然热可观察
- en: Generally something is considered hot if the values are emitted straight away
    without the need for a subscriber to be present. A naturally occuring example
    of a hot observable is `mousemove`. Most other hot observables are the result
    of cold observables being turned hot by using `publish()` and `connect()` or by
    using the `share()` operator.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，如果值立即发出而无需订阅者在场，那么某些东西被认为是热的。一个自然发生的热可观察的例子是`mousemove`。大多数其他热可观察是通过使用`publish()`和`connect()`或使用`share()`运算符将冷可观察变为热可观察。
- en: Sharing
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共享
- en: 'Sharing means using a useful operator called `share()`. Imagine you have the
    following normal cold observable case :'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 共享意味着使用一个有用的运算符称为`share()`。想象一下，你有以下正常的冷可观察案例：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you set a breakpoint on `observer.next(1)` you will notice that it's being
    hit twice, once for every subscriber. This is the behaviour we expect from a cold
    observable. Sharing operator is a different way of turning something into a hot
    observable, in fact it not only turns something hot under the right conditions
    but it falls back to being a cold observable under certain conditions. So what
    are these conditions ?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在`observer.next(1)`上设置断点，你会注意到它被触发两次，每个订阅者一次。这是我们从冷 Observable 期望的行为。共享操作符是将某物转换为热
    Observable 的另一种方式，事实上，它不仅在适当条件下将某物变为热 Observable，而且在某些条件下会回退为冷 Observable。那么这些条件是什么呢？
- en: '1) **Created as hot Observable** : An Observable has not completed when a new
    subscription comes and subscribers > 0'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 1) **Created as hot Observable**：当新订阅到来且订阅者数量 > 0 时，Observable 尚未完成
- en: 2) **Created as Cold Observable** Number of subscribers becomes 0 before a new
    subscription takes place. I.e a scenario where one or more subscriptions exist
    for a time but is being unsubscribed before a new one has a chance to happen
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 2) **Created as Cold Observable** 在新订阅发生之前，订阅者数量变为0。即存在一个或多个订阅一段时间，但在新订阅发生之前被取消订阅的情况。
- en: 3) **Created as Cold Observable** when an Observable completed before a new
    subscription
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 3) **Created as Cold Observable** 当 Observable 在新订阅之前完成
- en: Bottom line here is an *active* Observable producing values still and have at
    least one preexisting subscriber. We can see that the Observable in case 1) is
    dormant before a second subscriber happens and it suddenly becomes hot on the
    second subscriber and thereby starts sharing the data where it is.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键是一个*活跃*的 Observable 仍在产生值，并且至少有一个现有的订阅者。我们可以看到，在情况 1) 中，Observable 在第二个订阅者到来之前是休眠的，而在第二个订阅者到来时突然变为热
    Observable，并开始共享数据。
