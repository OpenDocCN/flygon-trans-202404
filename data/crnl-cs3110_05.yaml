- en: 'Lecture 4: Scope, Currying, and Lists'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四讲：作用域、柯里化和列表
- en: Scope and binding
  id: totrans-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作用域和绑定
- en: Curried functions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柯里化函数
- en: OCaml lists
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OCaml列表
- en: Scope
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作用域
- en: Variable declarations in OCaml **bind** variables within a **scope**, the part
    of the program where the variable stands for the value it is bound to. For example,
    when we write `let` *x* = *e*[1] `in` *e*[2], the scope of the identifier *x*
    is the expression *e*[2]. Within that scope, the identifier *x* stands for whatever
    value *v* the expression *e*[1] evaluated to. Since *x* = *v*, OCaml evaluates
    the `let` expression by rewriting it to *e*[2], but with the value *v* substituted
    for the occurrences of *x*. For example, the expression `let x = 2 in x + 3` is
    evaluated to `2 + 3`, and then arithmetic is used to obtain the result value `5`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: OCaml中的变量声明**绑定**变量到**作用域**，程序的一部分，变量在其中代表绑定到的值。例如，当我们写`let` *x* = *e*[1] `in`
    *e*[2]时，标识符 *x* 的作用域是表达式 *e*[2]。在该作用域内，标识符 *x* 代表表达式 *e*[1] 计算得到的任何值 *v*。由于 *x*
    = *v*，OCaml通过将 *x* 的出现替换为值 *v* 重写`let`表达式来评估它。例如，表达式`let x = 2 in x + 3`被评估为`2
    + 3`，然后使用算术运算得到结果值`5`。
- en: 'Functions also bind variables. When we write a function definition in OCaml,
    we introduce new variables for the function name and for function arguments. For
    example, in this expression two variables are bound:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 函数也绑定变量。当我们在OCaml中编写函数定义时，我们为函数名和函数参数引入新变量。例如，在此表达式中，绑定了两个变量：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The scope of the formal parameter x is exactly the expression e[1]. The scope
    of the variable f (which is bound to a function value) is the body of the let,
    e[2].
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 形式参数`x`的作用域正好是表达式`e[1]`。变量`f`（它绑定到函数值）的作用域是`let`的主体，即`e[2]`。
- en: 'A `let` expression can introduce multiple variables at once, as in the following
    example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`let`表达式可以一次引入多个变量，如下例所示：'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here both `x` and `y` have the body of the `let` as their scope. Even though
    `y` is declared after `x`, the definition of `y` cannot refer to the variable
    `x`—it isn't in scope.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`x`和`y`都将`let`的主体作为它们的作用域。即使`y`在`x`之后声明，`y`的定义也不能引用变量`x`——它不在作用域内。
- en: 'To declare a recursive function, the function must be in scope within its own
    body. In OCaml, this requires using a `let rec` instead of a `let`. With `let
    rec`, every variable it declares is in scope within its own definition and within
    the definitions of all the other variables. To make this work, all the definitions
    that use these variables must be functions. For example, here is how we could
    define **mutually** recursive functions `even` and `odd`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明递归函数，函数必须在其自身的主体中处于作用域内。在OCaml中，这需要使用`let rec`而不是`let`。使用`let rec`，它声明的每个变量都在其自身的定义以及所有其他变量的定义中都是在作用域内的。为使其正常工作，使用这些变量的所有定义都必须是函数。例如，下面是如何定义**相互**递归函数`even`和`odd`的方法：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are two variables named `x` in this example, both of which are in scope
    only within the respective functions that bind them. However, the variables `even`
    and `odd` are in scope in each other's definitions and within the body of the
    `let`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中有两个名为`x`的变量，它们仅在绑定它们的各自函数内部作用域中。但是，变量`even`和`odd`在彼此的定义以及`let`的主体内都是在作用域内的。
- en: Qualified identifiers
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限定符标识符
- en: 'It is possible to name things defined in a module without using a qualified
    identifier, using the `open` expression:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`open`表达式命名模块中定义的事物，而不使用限定符标识符：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There are a number of pre-defined library modules provided by OCaml that are
    extremely useful.  For instance, the `String` module provides a number of useful
    operations on strings, and the `List` module provides operations on lists. Many
    useful operations are in the `Pervasives` module, which is already open by default.
    To find out more about the OCaml libraries and the operations they provide, see
    [the Objective Caml Reference Manual, part IV](http://caml.inria.fr/pub/docs/manual-ocaml/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: OCaml提供了许多预定义的库模块，非常有用。例如，`String`模块提供了许多有用的字符串操作，而`List`模块提供了列表操作。许多有用的操作位于`Pervasives`模块中，默认情况下已经打开。要了解有关OCaml库及其提供的操作的更多信息，请参阅[Objective
    Caml参考手册，第IV部分](http://caml.inria.fr/pub/docs/manual-ocaml/)。
- en: For example, there is a built-in operation for calculating the absolute value
    of an integer called `Pervasives.abs`, which can be called simply as `abs`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有一个用于计算整数绝对值的内置操作称为`Pervasives.abs`，可以简单地称为`abs`。
- en: Take some time to browse through the libraries and find out what they provide. 
    You shouldn't recode something that's available in the library (unless we ask
    you to do so explicitly.)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 花些时间浏览库，并找出它们提供了什么。你不应该重新编写库中已有的东西（除非我们明确要求你这样做）。
- en: Curried functions
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 柯里化函数
- en: We saw that a function with multiple parameters is really just syntactic sugar
    for a function that is passed a tuple as an argument. For example,
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，具有多个参数的函数实际上只是传递元组作为参数的函数的语法糖。例如，
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: is sugar for
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 是糖语法，表示
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: which in turn is sugar for
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这反过来又是糖语法表示
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When we apply this function, say to the tuple `(2, 3)`, evaluation proceeds
    as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们应用此函数时，比如对元组 `(2, 3)`，评估过程如下：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It turns out that OCaml has another way to declare functions with multiple
    formal arguments, and in fact it is the usual way. The above declaration can be
    given in **curried** form as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 原来，OCaml 还有另一种声明具有多个形式参数的函数的方式，事实上，这是通常的方式。上述声明可以以**柯里化**形式给出如下：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'or with all the types written explicitly:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 或者将所有类型明确写出：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Notice that there is no comma between the parameters. Similarly, when applying
    a curried function, we write no comma:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意参数之间没有逗号。同样，当应用柯里化函数时，我们不写逗号：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There is more going on here than it might seem. Recall we said that functions
    really only have one argument. When we write `plus 2 3`, the function `plus` is
    only being passed one argument, the number 2\. We can parenthesize the term as
    `(plus 2) (3)`, because application is left-associative. In other words, `plus
    2` must return a function that can be applied to 3 to obtain the result 5\. In
    fact, `plus 2` returns a function that adds 2 to its argument.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的事情比看起来的要复杂。回想一下我们说过函数实际上只有一个参数。当我们写 `plus 2 3` 时，函数 `plus` 只被传递了一个参数，即数字
    2。我们可以将该术语括起来，如 `(plus 2) (3)`，因为应用是左结合的。换句话说，`plus 2` 必须返回一个函数，该函数可以应用于 3 以获得结果
    5。实际上，`plus 2` 返回一个将 2 添加到其参数的函数。
- en: 'How does this work? The curried declaration above is syntactic sugar for the
    creation of a **higher-order function**. It stands for:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何工作的？上述柯里化声明是为了创建一个**高阶函数**的语法糖。它代表着：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Evaluation of `plus 2 3` proceeds as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对 `plus 2 3` 的评估过程如下：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So `plus` is really a function that takes in an `int` as an argument, and returns
    a new function of type `int -> int`. Therefore, the type of `plus` is `int ->
    (int -> int)`. We can write this simply as `int -> int -> int` because the type
    operator `->` is right-associative.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`plus` 实际上是一个以 `int` 作为参数的函数，并返回一个类型为 `int -> int` 的新函数。因此，`plus` 的类型是 `int
    -> (int -> int)`。我们可以简单地写为 `int -> int -> int`，因为类型运算符 `->` 是右结合的。
- en: 'It turns out that we can view binary operators like `+` as functions, and they
    are curried just like `plus`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 原来，我们可以将诸如 `+` 这样的二元运算符视为函数，并且它们像 `plus` 一样进行柯里化：
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Lists
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表
- en: So far the only real data structures we can build are made of tuples. But tuples
    don't let us make data structures whose size is not known at compile time. For
    that we need a new language feature.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们唯一能构建的真正数据结构是由元组构成的。但元组不允许我们构建在编译时大小未知的数据结构。为此，我们需要一种新的语言特性。
- en: One simple data structure that we're used to is singly linked lists. It turns
    out that OCaml has lists built in. For example, in OCaml the expression `[]` is
    an empty list. The expression `[1;2;3]` is a list containing three integers.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们熟悉的一个简单数据结构是单链表。原来 OCaml 中已经内置了列表。例如，在 OCaml 中，表达式 `[]` 是一个空列表。表达式 `[1;2;3]`
    是一个包含三个整数的列表。
- en: In OCaml, all the elements of a list have to have the same type. For example,
    a list of integers has the type `int list`. Similarly, the list `["hi"; "there";
    "3110"]` would have the type `string list`. But `[1; "hi"]` is not a legal list.
    Lists in OCaml are **homogeneous lists**, as opposed to **heterogeneous lists**
    in which each element can have a different type.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OCaml 中，列表的所有元素都必须具有相同的类型。例如，整数列表的类型为 `int list`。类似地，列表 `["hi"; "there"; "3110"]`
    的类型将为 `string list`。但 `[1; "hi"]` 不是合法列表。在 OCaml 中，列表是**同质列表**，而不是**异质列表**，其中每个元素可以具有不同的类型。
- en: 'Lists are **immutable**: you cannot change the elements of a list, unlike an
    array in Java. Once a list is constructed, it never changes.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是**不可变**的：你不能改变列表的元素，不像 Java 中的数组。一旦列表被构造，它就不会改变。
- en: Constructing lists
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构造列表
- en: Often we want to make a list out of smaller lists. We can concatenate two lists
    with the `@` operator. For example, `[1;2;3] @ [4;5]` = `[1;2;3;4;5]`. However,
    this operator isn't very fast because it needs to build a copy of the entire first
    list. (It doesn't make a copy of the second list because the storage of the second
    list is shared with the storage of the concatenated list.)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常想要用较小的列表构造一个列表。我们可以使用 `@` 运算符连接两个列表。例如，`[1;2;3] @ [4;5]` = `[1;2;3;4;5]`。然而，这个运算符并不是很快，因为它需要构建整个第一个列表的副本。（它不会复制第二个列表，因为第二个列表的存储与连接列表的存储是共享的。）
- en: 'More often when building up lists we use the `::` operator, which prepends
    an element to the front of an existing list (“prepend” means “append onto the
    front”). The expression `1::[2;3]` is `1` prepended onto the list `[2;3]`. This
    is just the list `[1;2;3]`. If we use `::` on the empty list, it makes a one-element
    list: `1::[]` = `[1]`.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建列表时，我们更经常使用 `::` 运算符，它将一个元素添加到现有列表的前面（“前置”意味着“添加到前面”）。表达式 `1::[2;3]` 是 `1`
    添加到列表 `[2;3]` 的前面。这就是列表 `[1;2;3]`。如果我们对空列表使用 `::`，它会生成一个单元素列表：`1::[]` = `[1]`。
- en: For historical reasons going back to the language Lisp, we usually call the
    `::` operator “cons”.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 出于历史原因，回到 Lisp 语言，我们通常将 `::` 运算符称为“cons”。
- en: The fact that lists are immutable is in keeping with OCaml being a functional
    language. It is also actually useful for making OCaml more efficient, because
    it means that different list data structures can share parts of their representation
    in the computer's memory. For example, evaluating `h::t` only requires allocating
    space for a single extra list node in the computer's memory. It shares the rest
    of the list with the existing list `t`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是不可变的事实符合 OCaml 是函数式语言的特性。这实际上也有助于提高 OCaml 的效率，因为这意味着不同的列表数据结构可以在计算机内存中共享部分表示。例如，评估
    `h::t` 只需要在计算机内存中为一个额外的列表节点分配空间。它与现有列表 `t` 共享其余部分。
- en: Pattern matching on lists
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表的模式匹配
- en: 'The best way to extract elements from a list is to use pattern matching. The
    operator `::` and the bracket constructor can be used as patterns in a `match`
    expression. For example, if we had a list `lst` and wanted to get the value 0
    if `lst` was empty, 1 if `lst` had one element, and 2 if `lst` had 2 or more elements,
    we could write:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中提取元素的最佳方法是使用模式匹配。运算符 `::` 和括号构造函数可以在 `match` 表达式中用作模式。例如，如果我们有一个列表 `lst`，并且希望在
    `lst` 为空时得到值 0，在 `lst` 有一个元素时得到值 1，在 `lst` 有 2 个或更多元素时得到值 2，我们可以编写：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, `x` would be bound to the single element of the list if the second match
    arm were evaluated.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果评估第二个匹配分支，则 `x` 将绑定到列表的单个元素。
- en: 'Often, functions that manipulate lists are recursive, because they need to
    do something to every element. For example, suppose that we wanted to compute
    the length of a list of strings. We could write a recursive function that accomplishes
    this (in fact, the library function `List.length` does just this):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 经常，操作列表的函数是递归的，因为它们需要对每个元素执行一些操作。例如，假设我们想要计算字符串列表的长度。我们可以编写一个递归函数来实现这个目标（实际上，库函数
    `List.length` 就是这样做的）：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The logic here is that if a list is empty (`[]`), its length is clearly zero.
    Otherwise, if it is the appending of an element h onto another list t, its length
    must be one greater than the length of t.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的逻辑是，如果列表为空（`[]`），它的长度显然是零。否则，如果它是将元素 h 添加到另一个列表 t 中，其长度必须比 t 的长度大一。
- en: 'It''s possible to write patterns using the bracket syntax. This is exactly
    the same as writing a similar pattern using the `::` operator. For example, the
    following patterns are all equivalent: `[x;2]`, `x::2::[]`, `x::[2]`. These expressions
    are also all equivalent when used as terms.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用括号语法编写模式。这与使用 `::` 运算符编写类似模式完全相同。例如，以下模式都是等价的：`[x;2]`、`x::2::[]`、`x::[2]`。当用作项时，这些表达式也都是等价的。
- en: Library functions
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 库函数
- en: The OCaml structure [`List`](http://www.standardml.org/Basis/list.html) contains
    many useful functions for manipulating lists. Before using lists, it's worth taking
    a look. Some of them we'll talk about later in more detail. Two functions that
    should be used with caution are `hd` and `tl`. These functions get the head and
    tail of a list, respectively. However, they raise an exception if applied to an
    empty list. They make it easy to forget about the possibility that the list might
    be empty, creating expected exceptions that crash your program. So it's usually
    best to avoid them.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: OCaml 结构体[`List`](http://www.standardml.org/Basis/list.html) 包含许多用于操作列表的实用函数。在使用列表之前，值得一看。我们稍后会更详细地讨论其中一些。两个应该谨慎使用的函数是
    `hd` 和 `tl`。这些函数分别获取列表的头部和尾部。然而，如果应用于空列表，则会引发异常。它们很容易让人忘记列表可能为空的可能性，从而创建出现预期异常的情况，导致程序崩溃。因此，通常最好避免使用它们。
- en: List examples
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表示例
- en: 'We can use pattern matching to implement other useful functions on lists. Suppose
    we wanted a function that would extract a list element by its index within the
    list, with the first element at index zero. We can implement this neatly by doing
    a pattern match on the list and the integer n at the same time:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用模式匹配来实现列表上的其他有用函数。假设我们想要一个函数，该函数通过列表中的索引提取列表元素，其中第一个元素的索引为零。我们可以通过同时对列表和整数
    n 进行模式匹配来整洁地实现这一点：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: A `Not_found` exception is raised if `n` is less than 0 or greater than or equal
    to the length of `lst`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `n` 小于 0 或大于或等于 `lst` 的长度，则会引发 `Not_found` 异常。
