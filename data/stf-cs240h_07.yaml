- en: Functors, monads, and whatnot
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函子，单子，等等
- en: In our lecture on testing, we visited with the humble functor.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们关于测试的讲座中，我们与谦卑的函子交谈。
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: But how good is our intuition for what a functor is?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们对函子的直觉有多好？
- en: Functors over lists
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对列表的函子
- en: 'Please tell me what the following computes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请告诉我以下内容计算什么：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Functors over lists
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对列表的函子
- en: 'Please tell me what the following computes:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请告诉我以下内容计算什么：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Functors over Maybe
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对`Maybe`的函子
- en: 'Let''s avoid name clash with the standard `Functor` class:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们避免与标准的`Functor`类发生名称冲突：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Please write a `MyFunctor` instance for `Maybe`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请为`Maybe`编写一个`MyFunctor`实例。
- en: You have 2 minutes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你有2分钟。
- en: Functors over Maybe
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对`Maybe`的函子
- en: 'Let''s avoid name clash with the standard `Functor` class:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们避免与标准的`Functor`类发生名称冲突：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here is a `MyFunctor` instance for `Maybe`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个`Maybe`的`MyFunctor`实例。
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Functors over Identity
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对单位元的函子
- en: Please dictate to me a `MyFunctor` instance for `Identity`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请向我口述一个`Identity`的`MyFunctor`实例。
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: (You can find this type in `Data.Functor.Identity`.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: （你可以在`Data.Functor.Identity`中找到这种类型。）
- en: One view of functors
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函子的一种观点
- en: Suppose we think of a functor as a container.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将函子看作一个容器。
- en: What do we know about what a functor does to the things inside the container?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道函子对容器内部的事物有什么影响？
- en: How about the structure of the container itself?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 容器本身的结构如何？
- en: Constructing a tuple
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造一个元组
- en: 'You may not have come across the "tupling" operator yet:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还没有遇到“成对”运算符：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Given two arguments, it returns a pair consisting of those arguments.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 给定两个参数，它返回由这些参数组成的对。
- en: Partial application of a pair
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对对的部分应用
- en: Since `(,)` is a operator, we can surround it in parentheses to use it as a
    function.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`(,)`是一个运算符，我们可以用括号将其包围以将其用作函数。
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In typical Haskell fashion, we can partially apply the function to yield another
    function:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的 Haskell 风格，我们可以部分应用函数以产生另一个函数：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Type signatures and tuples
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型签名和元组
- en: OK, we can use `(,)` in prefix position as a function.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们可以在前缀位置使用`(,)`作为一个函数。
- en: We can also write `(,)` as a *type constructor*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将`(,)`写成*类型构造函数*。
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This means *exactly the same thing* as the following signature:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着*完全相同*的签名：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Functors over tuples
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对元组的函子
- en: What should a `MyFunctor` instance for pairs look like?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对的`MyFunctor`实例应该是什么样子的？
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Remember, for a type to be an instance of `MyFunctor`, we need one free type
    parameter:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，对于一个类型成为`MyFunctor`的实例，我们需要一个自由类型参数：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: By convention, we choose the second element of the pair to be free in our `MyFunctor`
    instance.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，我们选择对的第二个元素在我们的`MyFunctor`实例中是自由的。
- en: What should `myfmap` look like?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`myfmap`应该是什么样子？'
- en: Getting weirder
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变得更奇怪
- en: How useful is our functors-as-containers metaphor?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的函子作为容器的隐喻有多有用？
- en: Recall the enigmatic `Identity` type.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下神秘的`Identity`类型。
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Since this is a `newtype`, it has no runtime representation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个`newtype`，它没有运行时表示。
- en: 'So strictly speaking, it''s not really a container:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，它并不是真正的容器：
- en: Apart from type system machinery, there's no "outside" for something to be "inside"
    of.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了类型系统机制，没有什么“外部”可以“内部”。
- en: Why talk about prefix operators?
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要谈论前缀运算符？
- en: I had a purpose in talking about `(,)` as a prefix operator.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到`(,)`作为前缀运算符有一个目的。
- en: We can do the same with the `(->)` operator for describing functions.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用`(->)`运算符描述函数做同样的事。
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Since we were able to write a `MyFunctor` instance for pairs:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们能够为对写一个`MyFunctor`实例：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Can we do the same for functions?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能为函数做同样的事吗？
- en: Functors for functions
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数的函子
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Anyone want to take a crack at this?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有人想试试吗？
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Functors for functions
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数的函子
- en: 'A definition wasn''t too hard to come up with:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 定义并不难想出：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: But what does this *mean*?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 但这意味着什么？
- en: It is clearly *not* a container.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显然*不*是一个容器。
- en: Functors for IO
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对 IO 的函子
- en: We already touched on functors in the context of `IO`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在`IO`的上下文中涉及了函子。
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This executes a real-world action, and gives us back a `String`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这执行一个真实世界的动作，并给我们一个`String`。
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This executes the same real-world action, and gives us back...*what?*
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这执行相同的真实世界动作，并给我们...*什么*？
- en: Functor laws
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函子定律
- en: Mapping the identity function has no effect on the result.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 映射恒等函数对结果没有影响。
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Mapping the composition of two functions is the same as composing the mapping
    of the same functions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 映射两个函数的组合与组合相同函数的映射是相同的。
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Lifting, revisited
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新审视提升
- en: 'The standard way of writing the type of `fmap` can be a bit obscure:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 编写`fmap`类型的标准方式可能有点晦涩：
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Lifting, revisited
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新审视提升
- en: Functions in Haskell are always *curried*, so `fmap` "is really" a function
    of one argument that returns another function.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell 中的函数总是*柯里化*的，所以 `fmap` “实际上是”一个参数的函数，返回另一个函数。
- en: Let's add parentheses to make this clear.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们加上括号以澄清这一点。
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It *lifts* its first argument from being a normal function to one that operates
    in this universe where everything is shrouded in `f`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 它将第一个参数从普通函数提升到在这个一切都被 `f` 遮蔽的宇宙中运行的函数。
- en: Why focus on functors?
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要专注于函子？
- en: You'll come across the damn things everywhere in Haskell.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在 Haskell 中到处看到这些该死的东西。
- en: Next to `Monoid`, `Functor` is one of the simplest abstractions in Haskell.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `Monoid`，`Functor` 是 Haskell 中最简单的抽象之一。
- en: 'The fact that `(->) a` is a `Functor` (but *not* a container) is *invaluable*:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`(->) a` 是一个 `Functor`（但*不是*一个容器）是*无价的*：'
- en: It dislodges us from using limiting container-focused metaphors to think about
    these abstractions.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它让我们不再使用限制性的容器为中心的隐喻来思考这些抽象。
- en: Giving `f` a name
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给 `f` 一个名字
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: So containers are only a training-wheels metaphor.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因此容器只是一个训练轮的隐喻。
- en: It'll still be helpful to generically refer to this `f` thing by a name.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 用一个名字来泛指这个 `f` 东西仍然是有帮助的。
- en: We'll call it a *context*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其称为*上下文*。
- en: Contexts
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上下文
- en: 'The `[]` functor:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`[]` 函子：'
- en: The context is a list.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下文是一个列表。
- en: 'The `(->) a` functor:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`(->) a` 函子：'
- en: Our context is a function that has a first argument of type `a` (a "read-only
    environment").
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的上下文是一个具有类型 `a` 的第一个参数的函数（一个“只读环境”）。
- en: 'The `IO` functor:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`IO` 函子：'
- en: Our context is computations that may have real-world effects.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的上下文是可能具有真实世界影响的计算。
- en: Applicative
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Applicative
- en: Here's our next step up the expressive ladder.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在表达上的下一个阶梯。
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `pure` function takes a value and lifts it into our new context.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`pure` 函数接受一个值并将其提升到我们的新上下文中。'
- en: Where "applicative" comes from
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “applicative”一词的来源
- en: What about `(<*>)`?
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`(<*>)` 怎么样？'
- en: Consider its similarity to both `fmap` and `($)`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑它与 `fmap` 和 `($)` 的相似之处。
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '*They''re clearly all related!*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*它们显然都有关联！*'
- en: '`($)` is function application'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`($)` 是函数应用'
- en: '`fmap` is function application lifted to functors'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fmap` 是函数应用提升到函子'
- en: '`(<*>)` is function application lifted to functors, but where the initial function
    is wrapped in our context `f` too'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(<*>)` 是函数应用提升到函子，但初始函数也被包裹在我们的上下文 `f` 中'
- en: This is the origin of the name "applicative".
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是“applicative”这个名字的起源。
- en: Applicative laws
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Applicative laws
- en: Just as with monoids and functors, instances of `Applicative` must follow some
    laws.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 就像单子和函子一样，`Applicative` 的实例也必须遵循一些规律。
- en: In this case, there are 4 laws.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，有 4 条规律。
- en: You can refer to them [at the Typeclassopedia](http://www.haskell.org/haskellwiki/Typeclassopedia#Laws_2)
    if you're interested.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣，可以在 [Typeclassopedia](http://www.haskell.org/haskellwiki/Typeclassopedia#Laws_2)
    上查看。
- en: Just one Applicative instance
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只有一个 `Applicative` 实例
- en: '[PRE29]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This will give us the flavour of the `Applicative` class.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将让我们感受到 `Applicative` 类的风格。
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: What should the implementation of `(<*>)` look like?
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`(<*>)` 的实现应该是什么样的？'
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Take 2 minutes to write your own.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 花 2 分钟写下你自己的。
- en: Just one Applicative instance
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只有一个 `Applicative` 实例
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This will give us the flavour of the `Applicative` class.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这将让我们感受到 `Applicative` 类的风格。
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: What should the implementation of `(<*>)` look like?
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`(<*>)` 的实现应该是什么样的？'
- en: '[PRE34]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Further study
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步研究
- en: 'If you want to gain some good understanding of `Applicative`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想对 `Applicative` 有一些很好的理解：
- en: Write instances for lists, `Identity`, and `(->) a`
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写出列表、`Identity` 和 `(->) a` 的实例
- en: 'Bonus material:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 附加材料：
- en: '[PRE35]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Write `Functor` and `Applicative` instances for the `MyConst` type above.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为上面的 `MyConst` 类型编写 `Functor` 和 `Applicative` 实例。
- en: Why all the fuss?
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么这么麻烦？
- en: Here's a tiny `Applicative`-powered parser for URL-encoded bytes such as `%27`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个小小的 `Applicative` 驱动的解析器，用于 URL 编码的字节，如 `%27`。
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This depends on:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这取决于：
- en: '[PRE37]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Going deeper
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入探讨
- en: Let's parse an entire `application/x-www-form-urlencoded` string.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解析一个完整的 `application/x-www-form-urlencoded` 字符串。
- en: 'They look like this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 它们看起来像这样：
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Top-level parser:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 顶层解析器：
- en: '[PRE39]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We'll revisit `sepBy` in a moment.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会重新讨论 `sepBy`。
- en: '[PRE40]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: First, we must grok `Alternative`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须理解 `Alternative`。
- en: The `Alternative` class
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Alternative` 类'
- en: 'This class combines monoids with applicative functors:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类将单子与应用函子结合起来：
- en: '[PRE41]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '`empty` corresponds to `mempty`.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`empty` 对应于 `mempty`。'
- en: When parsing, think of this as "the parse failed".
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在解析时，把它看作“解析失败”。
- en: '`(<|>)` corresponds to `mappend`/`(<>)`.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`(<|>)` 对应于 `mappend`/`(<>)`。'
- en: When parsing, think of this as "try the first parse; if it fails, try the second".
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在解析时，把它看作“尝试第一个解析；如果失败，尝试第二个”。
- en: Some handy combinators
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些方便的组合子
- en: Notice that
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[PRE42]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: More parsing
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多解析
- en: '[PRE43]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'New combinators:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 新的组合子：
- en: '[PRE44]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Our complete parser
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们完整的解析器
- en: This code is amazingly compact and readable!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码非常紧凑和可读！
- en: '[PRE45]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: And finally, on to `Monad`
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后，进入`Monad`
- en: Every `Applicative` is a `Functor`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`Applicative`都是一个`Functor`。
- en: And every `Monad` is an `Applicative`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`Monad`都是一个`Applicative`。
- en: '[PRE46]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '`return` is the same as `pure`.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`return`与`pure`相同。'
- en: What about `(>>=)` ("bind")?
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 那么`(>>=)`（"bind"）呢？
- en: Where does it fit into our mental universe?
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 它在我们的思维世界中的位置是什么？
- en: A convenient variation
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个方便的变体
- en: There's a standard function named `(=<<)` which is exactly `(>>=)`, but with
    its arguments flipped.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为`(=<<)`的标准函数，它与`(>>=)`完全相同，但其参数顺序被翻转。
- en: '[PRE47]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Why should we care?
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么要在意呢？
- en: Let's revisit an earlier slide
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们重新审视之前的幻灯片
- en: Remember this?
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得这个吗？
- en: '[PRE48]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: These are all different ways of applying a function to a value.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是将函数应用于值的不同方式。
- en: Let's revisit an earlier slide
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们重新审视之前的幻灯片
- en: 'A small change: add `(=<<)`.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一个小的变化：添加`(=<<)`。
- en: '[PRE49]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: So really, the `(>>=)` operator is "just" another application operator, but
    its flipped argument order obscures this.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，实际上，`(>>=)`运算符只是另一种应用运算符，但是它翻转的参数顺序使这一点变得模糊。
- en: What `Functor` and `Applicative` cannot do
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Functor`和`Applicative`不能做什么'
- en: 'Consider application with functors and applicative functors:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑带有函子和应用函子的应用场景：
- en: '[PRE50]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: How do we ensure that they can only operate on the *elements* of a container?
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何确保它们只能在容器的*元素*上操作？
- en: Their function argument *cannot see or influence* `f` at all.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们的函数参数*完全看不到或影响*`f`。
- en: As a result, they *must* be oblivious to the enclosing structure of the container
    (or computational context, or whatever).
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，它们*必须*对容器的封闭结构（或计算上下文，或其他任何东西）毫不在意。
- en: From `Applicative` to `Monad`
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从`Applicative`到`Monad`
- en: 'The key to `Monad` is that the `a -> m b` function can take a normal Haskell
    value *and use it to decide* what `m b` to give back:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`Monad`的关键在于`a -> m b`函数可以接受一个普通的 Haskell 值，并*用它来决定*返回什么`m b`：'
- en: It is able to influence the container's structure, change the context, launch
    the nukes, or what have you.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它能够影响容器的结构，改变上下文，启动核弹，或者其他什么。
- en: '[PRE51]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Compared to `Applicative`, `Monad` is both more powerful *and* harder to reason
    about.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Applicative`相比，`Monad`既更强大*又*更难理解。
- en: The present and future of these classes
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这些类的现在和将来
- en: '`Applicative` and `Functor` are related. `Monad` is independent of the other
    two due to accidents of history.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`Applicative`和`Functor`是相关的。 `Monad`与其他两者无关，这是历史的偶然。'
- en: This will change with GHC 7.10.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这将随着 GHC 7.10 改变。
- en: A useful rule of thumb
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个有用的经验法则
- en: Always try to use the *least powerful* abstraction you can.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 总是尽量使用*最不强大的*抽象。
- en: Use `Applicative` in preference to `Monad`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 优先使用`Applicative`而不是`Monad`。
- en: Use `Functor` in preference to `Applicative`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 优先使用`Functor`而不是`Applicative`。
- en: (Unless you can't, of course.)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: (当然，除非你不能。)
- en: Why?
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？
- en: The less powerful the abstraction, the easier its behaviour is to reason about.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象越不强大，理解其行为就越容易。
- en: It becomes harder for you and your users to perform foot-shooting.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对你和你的用户来说，执行踩脚事件变得更加困难。
