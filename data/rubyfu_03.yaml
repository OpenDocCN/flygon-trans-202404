- en: Module 0x3 | Network Kung Fu
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块 0x3 | 网络功夫
- en: Module 0x3 | Network Kung Fu
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块 0x3 | 网络功夫
- en: IP Address Operation
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IP 地址操作
- en: In network programming, we always perform some operations on IP addresses. Following
    are some examples.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络编程中，我们总是对 IP 地址执行一些操作。以下是一些示例。
- en: Calculating network prefix of an IP address from IP address and subnet mask.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 IP 地址和子网掩码计算 IP 地址的网络前缀。
- en: Calculating the host part of an IP address from IP address and subnet mask.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 IP 地址和子网掩码计算 IP 地址的主机部分。
- en: Calculating the number of hosts in a subnet.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算子网中的主机数量。
- en: Check whether an IP address belongs to a subnet or not.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 IP 地址是否属于子网。
- en: Converting subnet mask from dot-decimal notation to integer.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将点十进制表示法的子网掩码转换为整数。
- en: Ruby provides class(IPAddr) for basic operations on IP address that can be used
    to perform all operations mentioned above.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby 提供了用于 IP 地址基本操作的类(IPAddr)，可用于执行上述所有操作。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Calculating network prefix of an IP address from IP address and subnet mask.
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 IP 地址和子网掩码计算 IP 地址的网络前缀。
- en: A simple mask method call will give us the network prefix part of IP address.
    It is simply a bitwise mask of IP address with subnet mask.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的 mask 方法调用将给出 IP 地址的网络前缀部分。它只是 IP 地址与子网掩码的按位掩码。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Run it
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Calculating the host part of an IP address from IP address and subnet mask.
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 IP 地址和子网掩码计算 IP 地址的主机部分。
- en: calculating the host part is not as trivial as the network part of the IP address.
    We first calculate the complement of subnet mask.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 计算主机部分并不像 IP 地址的网络部分那样简单。我们首先计算子网掩码的补码。
- en: 'Subnet(24) : 11111111.11111111.11111111.00000000'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '子网(24) : 11111111.11111111.11111111.00000000'
- en: 'neg_subnet(24) : 00000000.00000000.00000000.11111111'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 'neg_subnet(24) : 00000000.00000000.00000000.11111111'
- en: we used negation(~) and mask method to calculate complement of subnet mask then
    simply performed a bitwise AND between the IP and complement of subnet
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用否定(~)和掩码方法来计算子网掩码的补码，然后简单地在 IP 和子网掩码的补码之间执行按位 AND 操作
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Run it
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Calculating the number of hosts in a subnet.
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算子网中的主机数量。
- en: We used to_range method to create a range of all the IPs then count method to
    count the IPs in range. We reduced the number by two to exclude the gateway and
    broadcast IP address.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 to_range 方法创建所有 IP 的范围，然后使用 count 方法计算范围内的 IP 数。我们将数字减少两个以排除网关和广播 IP 地址。
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run it
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Check whether an IP address belong to a subnet or not.
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查 IP 地址是否属于子网。
- en: '`===` is an alias of include? which returns true if ip address belongs to the
    range otherwise it returns false.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`===` 是 include? 的别名，如果 IP 地址属于范围，则返回 true，否则返回 false。'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Run it
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Converting subnet mask from dot-decimal notation to integer.
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将点十进制表示法的子网掩码转换为整数。
- en: We treated subnet mask as ip address and converted it into an integer by using
    `to_i` then used `to_s(2)` to convert the integer into binary form. Once we had
    the binary we counted the number of occurrence of digit 1 with `count("1")`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将子网掩码视为 IP 地址，并使用 `to_i` 将其转换为整数，然后使用 `to_s(2)` 将整数转换为二进制形式。一旦我们有了二进制形式，我们就使用
    `count("1")` 计算数字 1 的出现次数。
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run it
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Converting IP to another formats
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 IP 转换为其他格式
- en: IP Decimal to Dotted notation
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: IP 十进制转换为点分十进制表示法
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: or
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: IP Dotted notation to Decimal
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: IP 点分十进制表示法转换为十进制
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This part has been pretty quoted from [IP address Operations in Ruby](http://www.brownfort.com/2014/09/ip-operations-ruby/)
    topic
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分内容基本引用自 [Ruby 中的 IP 地址操作](http://www.brownfort.com/2014/09/ip-operations-ruby/)
    主题
- en: IP Geolocation
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IP 地理位置
- en: you may need to know more information about IP location due attack investigation
    or any other reason.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于攻击调查或其他原因，您可能需要了解有关 IP 位置的更多信息。
- en: GeoIP
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GeoIP
- en: The special thing about geoip lib is that it's an API for offline database you
    download from [www.maxmind.com](http://www.maxmind.com). There are few free databases
    from MaxMind whoever you can have a subscription database version though.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: geoip 库的特殊之处在于它是一个离线数据库的 API，您可以从 [www.maxmind.com](http://www.maxmind.com)
    下载。MaxMind 有一些免费数据库，您也可以订阅数据库版本。
- en: Download one of the free GeoLite country, city or ASN databases
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载免费的 GeoLite 国家、城市或 ASN 数据库之一
- en: '[GeoLiteCountry](geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz)'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GeoLiteCountry](geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz)'
- en: '[GeoLiteCity](geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz)'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GeoLiteCity](geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz)'
- en: '[GeoIPASNum](geolite.maxmind.com/download/geoip/database/asnum/GeoIPASNum.dat.gz)'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GeoIPASNum](geolite.maxmind.com/download/geoip/database/asnum/GeoIPASNum.dat.gz)'
- en: Install geoip gem
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 geoip gem
- en: '[PRE15]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Usage
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用法
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '* * *'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[RubyDoc | IPAddr](http://ruby-doc.org/stdlib-1.9.3/libdoc/ipaddr/rdoc/IPAddr.html)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[RubyDoc | IPAddr](http://ruby-doc.org/stdlib-1.9.3/libdoc/ipaddr/rdoc/IPAddr.html)'
- en: Ruby Socket
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ruby Socket
- en: Ruby Socket
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ruby Socket
- en: Lightweight Introduction
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轻量级介绍
- en: Ruby Socket Class Hierarchy
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ruby Socket类层次结构
- en: To know the socket hierarchy in ruby here a simple tree explains it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Ruby中的套接字层次结构，这里有一个简单的树来解释它。
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: I'll verbosely mention some of `Socket::Constants` here since I didn't find
    an obvious reference listing it except [Programming Ruby1.9 *The Pragmatic Programmers'
    Guide*](http://media.pragprog.com/titles/ruby3/app_socket.pdf); Otherwise you've
    to `ri Socket::Constants` from command line which is a good way to get the description
    of each constant.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我将详细提及一些`Socket::Constants`，因为我没有找到明显的参考列表，除了[Programming Ruby1.9 *The Pragmatic
    Programmers' Guide*](http://media.pragprog.com/titles/ruby3/app_socket.pdf)；否则，您可以从命令行中使用`ri
    Socket::Constants`，这是获取每个常量描述的好方法。
- en: Socket Types
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 套接字类型
- en: SOCK_RAW
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOCK_RAW
- en: SOCK_PACKET
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOCK_PACKET
- en: SOCK_STREAM
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOCK_STREAM
- en: SOCK_DRAM
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOCK_DRAM
- en: SOCK_RDM
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOCK_RDM
- en: SOCK_SEQPACKET
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOCK_SEQPACKET
- en: Address Families(Socket Domains)
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地址族（套接字域）
- en: AF_APPLETALK
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_APPLETALK
- en: AF_ATM
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_ATM
- en: AF_AX25
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_AX25
- en: AF_CCITT
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_CCITT
- en: AF_CHAOS
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_CHAOS
- en: AF_CNT
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_CNT
- en: AF_COIP
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_COIP
- en: AF_DATAKIT
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_DATAKIT
- en: AF_DEC
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_DEC
- en: AF_DLI
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_DLI
- en: AF_E164
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_E164
- en: AF_ECMA
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_ECMA
- en: AF_HYLINK
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_HYLINK
- en: AF_IMPLINK
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_IMPLINK
- en: AF_INET(IPv4)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_INET(IPv4)
- en: AF_INET6(IPv6)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_INET6(IPv6)
- en: AF_IPX
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_IPX
- en: AF_ISDN
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_ISDN
- en: AF_ISO
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_ISO
- en: AF_LAT
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_LAT
- en: AF_LINK
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_LINK
- en: AF_LOCAL(UNIX)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_LOCAL(UNIX)
- en: AF_MAX
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_MAX
- en: AF_NATM
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_NATM
- en: AF_NDRV
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_NDRV
- en: AF_NETBIOS
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_NETBIOS
- en: AF_NETGRAPH
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_NETGRAPH
- en: AF_NS
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_NS
- en: AF_OSI
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_OSI
- en: AF_PACKET
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_PACKET
- en: AF_PPP
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_PPP
- en: AF_PUP
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_PUP
- en: AF_ROUTE
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_ROUTE
- en: AF_SIP
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_SIP
- en: AF_SNA
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_SNA
- en: AF_SYSTEM
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_SYSTEM
- en: AF_UNIX
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_UNIX
- en: AF_UNSPEC
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AF_UNSPEC
- en: Socket Protocol
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 套接字协议
- en: IPPROTO_SCTP
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPPROTO_SCTP
- en: IPPROTO_TCP
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPPROTO_TCP
- en: IPPROTO_UDP
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPPROTO_UDP
- en: Protocol Families
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 协议族
- en: PF_APPLETALK
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_APPLETALK
- en: PF_ATM
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_ATM
- en: PF_AX25
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_AX25
- en: PF_CCITT
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_CCITT
- en: PF_CHAOS
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_CHAOS
- en: PF_CNT
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_CNT
- en: PF_COIP
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_COIP
- en: PF_DATAKIT
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_DATAKIT
- en: PF_DEC
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_DEC
- en: PF_DLI
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_DLI
- en: PF_ECMA
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_ECMA
- en: PF_HYLINK
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_HYLINK
- en: PF_IMPLINK
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_IMPLINK
- en: PF_INET
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_INET
- en: PF_INET6
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_INET6
- en: PF_IPX
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_IPX
- en: PF_ISDN
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_ISDN
- en: PF_ISO
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_ISO
- en: PF_KEY
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_KEY
- en: PF_LAT
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_LAT
- en: PF_LINK
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_LINK
- en: PF_LOCAL
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_LOCAL
- en: PF_MAX
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_MAX
- en: PF_NATM
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_NATM
- en: PF_NDRV
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_NDRV
- en: PF_NETBIOS
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_NETBIOS
- en: PF_NETGRAPH
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_NETGRAPH
- en: PF_NS
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_NS
- en: PF_OSI
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_OSI
- en: PF_PACKET
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_PACKET
- en: PF_PIP
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_PIP
- en: PF_PPP
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_PPP
- en: PF_PUP
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_PUP
- en: PF_ROUTE
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_ROUTE
- en: PF_RTIP
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_RTIP
- en: PF_SIP
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_SIP
- en: PF_SNA
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_SNA
- en: PF_SYSTEM
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_SYSTEM
- en: PF_UNIX
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_UNIX
- en: PF_UNSPEC
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_UNSPEC
- en: PF_XTP
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PF_XTP
- en: Socket options
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 套接字选项
- en: SO_ACCEPTCONN
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_ACCEPTCONN
- en: SO_ACCEPTFILTER
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_ACCEPTFILTER
- en: SO_ALLZONES
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_ALLZONES
- en: SO_ATTACH_FILTER
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_ATTACH_FILTER
- en: SO_BINDTODEVICE
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_BINDTODEVICE
- en: SO_BINTIME
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_BINTIME
- en: SO_BROADCAST
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_BROADCAST
- en: SO_DEBUG
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_DEBUG
- en: SO_DETACH_FILTER
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_DETACH_FILTER
- en: SO_DONTROUTE
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_DONTROUTE
- en: SO_DONTTRUNC
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_DONTTRUNC
- en: SO_ERROR
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_ERROR
- en: SO_KEEPALIVE
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_KEEPALIVE
- en: SO_LINGER
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_LINGER
- en: SO_MAC_EXEMPT
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_MAC_EXEMPT
- en: SO_NKE
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_NKE
- en: SO_NOSIGPIPE
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_NOSIGPIPE
- en: SO_NO_CHECK
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_NO_CHECK
- en: SO_NREAD
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_NREAD
- en: SO_OOBINLINE
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_OOBINLINE
- en: SO_PASSCRED
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_PASSCRED
- en: SO_PEERCRED
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_PEERCRED
- en: SO_PEERNAME
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_PEERNAME
- en: SO_PRIORITY
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_PRIORITY
- en: SO_RCVBUF
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_RCVBUF
- en: SO_RCVLOWAT
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_RCVLOWAT
- en: SO_RCVTIMEO
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_RCVTIMEO
- en: SO_RECVUCRED
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_RECVUCRED
- en: SO_REUSEADDR
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_REUSEADDR
- en: SO_REUSEPORT
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_REUSEPORT
- en: SO_SECURITY_AUTHENTICATION
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_SECURITY_AUTHENTICATION
- en: SO_SECURITY_ENCRYPTION_NETWORK
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_SECURITY_ENCRYPTION_NETWORK
- en: SO_SECURITY_ENCRYPTION_TRANSPORT
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_SECURITY_ENCRYPTION_TRANSPORT
- en: SO_SNDBUF
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_SNDBUF
- en: SO_SNDLOWAT
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_SNDLOWAT
- en: SO_SNDTIMEO
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_SNDTIMEO
- en: SO_TIMESTAMP
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_TIMESTAMP
- en: SO_TIMESTAMPNS
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_TIMESTAMPNS
- en: SO_TYPE
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_TYPE
- en: SO_USELOOPBACK
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_USELOOPBACK
- en: SO_WANTMORE
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_WANTMORE
- en: SO_WANTOOBFLAG
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SO_WANTOOBFLAG
- en: Creating Socket Template
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建套接字模板
- en: '[PRE19]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**domain(Address\/Protocol Families):** like AF_INET, PF_PACKET, etc'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**domain（地址/协议族）：**像AF_INET，PF_PACKET等'
- en: '**socktype:** like SOCK_RAW, SOCK_STREAM'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**socktype：**像SOCK_RAW，SOCK_STREAM'
- en: '**protocol:** by default, it''s `0`m it should be a protocol defined (we''ll
    manipulate that later)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**协议：**默认情况下，它是`0`，应该是一个定义的协议（我们稍后会操纵它）'
- en: TCP Socket
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TCP套接字
- en: '**Server\/Client life cycle**'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器/客户端生命周期**'
- en: '[PRE20]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: General Socket usage
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用套接字使用
- en: Get List of local IPaddreses
  id: totrans-214
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取本地IP地址列表
- en: '[PRE21]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Get Hostname
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取主机名
- en: '[PRE22]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: TCP Server
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TCP服务器
- en: Here we'll represent an absolute TCP server. This server will access connect
    from one client and send a message to it once connected then close the client
    and server connection
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们将展示一个绝对的TCP服务器。该服务器将接受来自一个客户端的连接，并在连接后向其发送一条消息，然后关闭客户端和服务器的连接。
- en: '[PRE23]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Note:** if you want to list on unused and random port, set to port 0, ruby
    will find vacancy port then use it. ex.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**如果要监听未使用和随机端口，请设置为端口0，Ruby将找到空闲端口然后使用它。例如。'
- en: '[PRE24]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: TCP Client
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TCP客户端
- en: '[PRE25]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You can put timeout/time interval for current connection in-case the server's
    response get delayed and the socket is still open.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为当前连接设置超时/时间间隔，以防服务器的响应延迟且套接字仍处于打开状态。
- en: '[PRE26]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: There are some alternatives for `puts` and `gets` methods.You can see the difference
    and its classes using method method in Pry interpreter console
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些`puts`和`gets`方法的替代方法。您可以使用Pry解释器控制台中的method方法查看差异及其类。
- en: '[PRE27]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: UDP Socket
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UDP套接字
- en: UDP Server
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: UDP服务器
- en: '[PRE29]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: UDP Client
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: UDP客户端
- en: '[PRE30]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: There alternative for sending and receiving too, figure it out, [RubyDoc](http://ruby-doc.org/stdlib-2.0.0/libdoc/socket/rdoc/UDPSocket.html).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 有用于发送和接收的替代方法，找出来，[RubyDoc](http://ruby-doc.org/stdlib-2.0.0/libdoc/socket/rdoc/UDPSocket.html)。
- en: GServer
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GServer
- en: 'GServer standard library implements a generic server, featuring thread pool
    management, simple logging, and multi-server management. Any kind of application-level
    server can be implemented using this class:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: GServer 标准库实现了一个通用服务器，具有线程池管理、简单日志记录和多服务器管理功能。可以使用这个类来实现任何类型的应用级服务器：
- en: It accepts multiple simultaneous connections from clients
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以接受来自客户端的多个同时连接
- en: Several services (i.e. one service per TCP port)
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个服务（即每个 TCP 端口一个服务）
- en: can be run simultaneously,
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可同时运行，
- en: can be stopped at any time through the class method `GServer.stop(port)`
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以通过类方法 `GServer.stop(port)` 随时停止
- en: All the threading issues are handled
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有线程问题都已处理
- en: All events are optionally logged
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有事件都可以选择记录
- en: Very basic GServer
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常基本的 GServer
- en: '[PRE31]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: SSL/TLS
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSL/TLS
- en: SSL/TLS
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSL/TLS
- en: Working with SSL/TLS connections is a very important job and it comes in tow
    shapes. **(1)** Secure HTTP connection. **(2)** Secure Socket. To reduce the redundancy,
    I'll deal with both in this section, instead of putting the http part under Web
    Kung Fu section.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 与 SSL/TLS 连接一起工作是一项非常重要的工作，有两种形式。**(1)** 安全的 HTTP 连接。**(2)** 安全套接字。为了减少冗余，我将在本节中处理这两种情况，而不是���
    http 部分放在 Web Kung Fu 部分下。
- en: Certificate Validation
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 证书验证
- en: Validate HTTPS Certificate
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证 HTTPS 证书
- en: '**validate_https_cert.rb**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**validate_https_cert.rb**'
- en: '[PRE32]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Validate Secure Socket Certificate
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证安全套接字证书
- en: '**validate_socket_cert.rb**'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '**validate_socket_cert.rb**'
- en: '[PRE33]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Putting all together
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: '**ssl_validator.rb**'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '**ssl_validator.rb**'
- en: '[PRE34]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Run it
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它
- en: '[PRE35]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: SSID Finder
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSID 查找器
- en: SSID Finder
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSID 查找器
- en: 'It''s good to know how you play with a lower level of Ruby socket and see how
    powerful it''s. As I''ve experienced, it''s a matter of your knowledge about the
    protocol you''re about to play with. I''ve tried to achieve this mission using
    `Packetfu` gem, but it''s not protocol aware, yet. So I fired-up my Wireshark(filter:
    `wlan.fc.type_subtype == 0x08`) and start inspecting the wireless beacon structure
    and checked how to go even deeper with Ruby socket to lower level socket not just
    playing with TCP and UDP sockets.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何使用 Ruby 套接字的较低级别，并看看它有多强大。正如我所经历的，这取决于你对即将使用的协议的了解程度。我尝试使用 `Packetfu` gem
    来实现这个任务，但它还不具备协议意识。所以我启动了我的 Wireshark（过滤器：`wlan.fc.type_subtype == 0x08`）并开始检查无线信标结构，查看如何通过
    Ruby 套接字进一步降低到更低级别套接字，而不仅仅是处理 TCP 和 UDP 套接字。
- en: The main task was
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 主要任务是
- en: Go very low level socket(Layer 2)
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入非常低级别的套接字（第二层）
- en: Receive every single packet no matter what protocol is it
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收每个数据包，无论是什么协议
- en: Receive packets as raw to process it as far as I learn from wireshark
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收原始数据包以便根据我从 Wireshark 学到的知识进行处理
- en: I went through all mentioned references below and also I had a look at `/usr/include/linux/if_ether.h`
    which gave me an idea about `ETH_P_ALL` meaning and more. In addition, `man socket`
    was really helpful to me.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我查阅了下面提到的所有参考资料，还查看了 `/usr/include/linux/if_ether.h`，这让我对 `ETH_P_ALL` 的含义有了一些了解。此外，`man
    socket` 对我非常有帮助。
- en: '**Note:** The Network card interface must be set in monitoring mode, to do
    so (using airmon-ng)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 网卡接口必须设置为监控模式，使用 airmon-ng 进行设置'
- en: '[PRE36]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '**References** - *very useful!*'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考资料** - *非常有用！*'
- en: '[raw_socket.rb](https://gist.github.com/k-sone/8036832#file-raw_sock-rb)'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[raw_socket.rb](https://gist.github.com/k-sone/8036832#file-raw_sock-rb)'
- en: '[wifi_sniffer.rb](https://gist.github.com/amejiarosario/5420854)'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[wifi_sniffer.rb](https://gist.github.com/amejiarosario/5420854)'
- en: '[packetter.rb](https://github.com/lrks/packetter/blob/master/ruby/packetter.rb)'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[packetter.rb](https://github.com/lrks/packetter/blob/master/ruby/packetter.rb)'
- en: '[Another git](https://gist.github.com/sam113101/aad031bcc50746956a29)'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[另一个 git](https://gist.github.com/sam113101/aad031bcc50746956a29)'
- en: '[Programming Ruby1.9](http://media.pragprog.com/titles/ruby3/app_socket.pdf)'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Ruby1.9 编程](http://media.pragprog.com/titles/ruby3/app_socket.pdf)'
- en: '[Rubydocs - class Socket](http://docs.ruby-lang.org/en/2.3.0/Socket.html)'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Rubydocs - class Socket](http://docs.ruby-lang.org/en/2.3.0/Socket.html)'
- en: '[Linux Kernel Networking – advanced topics (5)](http://www.haifux.org/lectures/217/netLec5.pdf)'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Linux 内核网络 - 高级主题（5）](http://www.haifux.org/lectures/217/netLec5.pdf)'
- en: '[PF_PACKET Protocol Family](http://curioushq.blogspot.com/2011/05/pfpacket-protocol-family.html)'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PF_PACKET Protocol Family](http://curioushq.blogspot.com/2011/05/pfpacket-protocol-family.html)'
- en: '[Ruby Raw Socket for Windows](http://curioushq.blogspot.com/2011/05/ruby-raw-socket-for-windows.html)'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Windows 下的 Ruby 原始套接字](http://curioushq.blogspot.com/2011/05/ruby-raw-socket-for-windows.html)'
- en: FTP
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FTP
- en: FTP
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FTP
- en: Dealing with FTP is something needed in many cases, Let's see how easy is that
    in Ruby with AIO example.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 FTP 在许多情况下是必需的，让我们看看在 Ruby 中使用 AIO 示例有多容易。
- en: FTP Client
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FTP 客户端
- en: '[PRE38]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Yep, it's simple as that, easy and familiar.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，就是这么简单，容易而熟悉。
- en: '**TIP:** You can do it all above way using pure socket library, it''s really
    easy. You may try to do it.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示:** 你可以使用纯套接字库以上述方式完成所有操作，这真的很容易。你可以尝试一下。'
- en: FTP Server
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FTP 服务器
- en: Install ftpd gem
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 ftpd gem
- en: '[PRE39]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Run it
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它
- en: '[PRE41]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: SSH
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSH
- en: SSH
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSH
- en: Here we'll show some SSH using ruby. We'll need to install net-ssh gem for that.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们将展示一些使用 ruby 的 SSH。为此，我们需要安装 net-ssh gem。
- en: Install net-ssh gem
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 net-ssh gem
- en: '[PRE42]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Simple SSH command execution
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单的 SSH 命令执行
- en: This is a very basic SSH client which sends and executes commands on a remote
    system
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常基本的 SSH 客户端，可以向远程系统发送和执行命令
- en: '[PRE43]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: SSH Client with PTY shell
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带有 PTY shell 的 SSH 客户端
- en: Here a simple SSH client which give you an interactive PTY
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的 SSH 客户端，可以为你提供一个交互式 PTY
- en: '[PRE44]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: SSH brute force
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SSH 暴力破解
- en: '**ssh-bf.rb**'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '**ssh-bf.rb**'
- en: '[PRE45]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: SSH Tunneling
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SSH 隧道
- en: Forward SSH Tunnel
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转发 SSH 隧道
- en: '[PRE46]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Run ssh-ftunnel.rb on the **SSH Server**
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在**SSH 服务器**上运行 ssh-ftunnel.rb
- en: '**ssh-ftunnel.rb**'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '**ssh-ftunnel.rb**'
- en: '[PRE47]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now connect to the **SSH Server** on port 3333 via your RDP client, you'll be
    prompt for the **WebServer**'s RDP log-in screen
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过 RDP 客户端连接到端口 3333 的**SSH 服务器**，你将被提示输入**WebServer**的 RDP 登录界面
- en: '[PRE48]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Reverse SSH Tunnel
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 反向 SSH 隧道
- en: '[PRE49]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Run ssh-rtunnel.rb on the **SSH Server**
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在**SSH 服务器**上运行 ssh-rtunnel.rb
- en: '**ssh-rtunnel.rb**'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '**ssh-rtunnel.rb**'
- en: '[PRE50]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now SSH from the **SSH Server** to **localhost** on the localhost's SSH port
    then connect from your localhost to your localhost on port 3333 via your RDP client,
    you'll be prompt for the **WebServer**'s RDP log-in screen
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 现在从**SSH 服务器**通过 localhost 的 SSH 端口 SSH 到**localhost**，然后通过 RDP 客户端从 localhost
    连接到端口 3333 的 localhost，你将被提示输入**WebServer**的 RDP 登录���面
- en: '[PRE51]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Copy files via SSH (SCP)
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 SSH 复制文件（SCP）
- en: To install scp gem
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 scp gem
- en: '[PRE52]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Upload file
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传文件
- en: '[PRE53]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Download file
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载文件
- en: '[PRE54]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '* * *'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[More SSH examples](http://ruby.about.com/sitesearch.htm?q=ruby+ssh&boost=3&SUName=ruby)'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更多 SSH 示例](http://ruby.about.com/sitesearch.htm?q=ruby+ssh&boost=3&SUName=ruby)'
- en: '[Capistranorb.com](http://capistranorb.com/)'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Capistranorb.com](http://capistranorb.com/)'
- en: '[Net:SSH old docs with example](http://net-ssh.github.io/ssh/v1/chapter-6.html)'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Net:SSH 旧文档及示例](http://net-ssh.github.io/ssh/v1/chapter-6.html)'
- en: Email
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件
- en: Email
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件
- en: Sending Email
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送邮件
- en: '**sendmail.rb**'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '**sendmail.rb**'
- en: '[PRE55]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Reading Email
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取邮件
- en: '**readmail.rb**'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '**readmail.rb**'
- en: '[PRE56]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '* * *'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[More useful mail operation example | alvinalexander.com](http://alvinalexander.com/search/node/ruby%20mail)'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更多有用的邮件操作示例 | alvinalexander.com](http://alvinalexander.com/search/node/ruby%20mail)'
- en: SMTP Enumeration
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SMTP 枚举
- en: SMTP Enumeration
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SMTP 枚举
- en: Interacting with SMTP is easy and since the protocol is straight forward.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 与 SMTP 交互很容易，因为该协议很直接。
- en: '[PRE57]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Results
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 结果
- en: '[PRE58]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '**Your turn**, there are other commands that can be used such as `EXPN`, `RCPT`.
    Enhance the above script to include all these commands to avoid restricted commands
    that might you face. Tweet your code and output to **@Rubyfu**.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '**轮到你了**，还有其他命令可以使用，比如`EXPN`，`RCPT`。增强上述脚本以包含所有这些命令，以避免可能遇到的受限制命令。将你的代码和输出发推给**@Rubyfu**。'
- en: Network Scanning
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络扫描
- en: Network Scanning
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络扫描
- en: Network ping sweeping
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络 ping 扫描
- en: required net-ping gem
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 需要 net-ping gem
- en: '[PRE59]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Port Scanner
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端口扫描
- en: If you got what we've represented in [Ruby Socket](module_0x3__network_kung_fu/ruby_socket.md)
    section, then here we wrapping up and do some application depends on it. **scanner.rb**
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你理解了我们在[Ruby Socket](module_0x3__network_kung_fu/ruby_socket.md)部分所展示的内容，那么在这里我们将总结并进行一些依赖于它的应用。**scanner.rb**
- en: '[PRE61]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Run it
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它
- en: '[PRE62]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '* * *'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Nmap
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nmap
- en: Nmap
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nmap
- en: '[PRE63]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: As far as you understand how to use nmap and how basically it works, you'll
    find this lib is easy to use. You can do most of nmap functionality
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你了解如何使用 nmap 以及其基本工作原理，你会发现这个库很容易使用。你可以完成大部分 nmap 的功能
- en: Basic Scan
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本扫描
- en: Ruby-nmap gem is a Ruby interface to nmap, the exploration tool and security
    / port scanner.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby-nmap gem 是 nmap 的 Ruby 接口，这是一个探索工具和安全/端口扫描器。
- en: Provides a Ruby interface for running nmap.
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了一个运行 nmap 的 Ruby 接口。
- en: Provides a Parser for enumerating nmap XML scan files.
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了一个解析 nmap XML 扫描文件的解析器。
- en: let's see how it dose work.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的。
- en: '[PRE64]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: SYN Scan
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SYN 扫描
- en: '[PRE65]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: each option like `nmap.syn_scan` or `nmap.xml` is considered as a *Task*. [Documentation](http://www.rubydoc.info/gems/ruby-nmap/frames
    "Official doc") shows the list of [scan tasks/options](http://www.rubydoc.info/gems/ruby-nmap/Nmap/Task)
    that are supported by the lib.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 每个选项如`nmap.syn_scan`或`nmap.xml`被视为一个*任务*。[文档](http://www.rubydoc.info/gems/ruby-nmap/frames
    "官方文档")显示了该库支持的[扫描任务/选项](http://www.rubydoc.info/gems/ruby-nmap/Nmap/Task)列表。
- en: Comprehensive scan
  id: totrans-377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全面扫描
- en: '[PRE66]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Parsing nmap XML scan file
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解析 nmap XML 扫描文件
- en: I made an aggressive scan on `scanme.nmap.org`
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 `scanme.nmap.org` 上进行了一个激进的扫描
- en: '[PRE67]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: I quoted the code from official documentation ([https://github.com/sophsec/ruby-nmap](https://github.com/sophsec/ruby-nmap))
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我从官方文档中引用了代码（[https://github.com/sophsec/ruby-nmap](https://github.com/sophsec/ruby-nmap)）
- en: '[PRE68]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Returns
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE69]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[https://github.com/ronin-ruby/ronin-scanners](https://github.com/ronin-ruby/ronin-scanners)'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ronin-ruby/ronin-scanners](https://github.com/ronin-ruby/ronin-scanners)'
- en: '* * *'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: DNS
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS
- en: DNS
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS
- en: DNS lookup
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DNS 查找
- en: Forward DNS lookup (Host to IP)
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正向 DNS 查找（主机到 IP）
- en: '[PRE70]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Returns array of all IPs
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有 IP 的数组
- en: '[PRE71]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: or use `Resolv.getaddress` to get one address only
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 或使用 `Resolv.getaddress` 只获取一个地址
- en: Reverse DNS lookup (IP to Host)
  id: totrans-396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 反向 DNS 查找（IP 到主机）
- en: '[PRE72]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Returns array of all hostnames, if PTR is assigned
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有主机名的数组，如果 PTR 被分配
- en: '[PRE73]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: or use `Resolv.name` to get one name only
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 或使用 `Resolv.name` 只获取一个名称
- en: DNS Data Exfiltration
  id: totrans-401
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DNS 数据外泄
- en: DNS out-band connection is usually allowed in local networks, which is the major
    benefits of using DNS to transfer data to external server.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: DNS 外部连接通常允许在本地网络中使用，这是使用 DNS 将数据传输到外部服务器的主要优势。
- en: '**dnsteal.rb**'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '**dnsteal.rb**'
- en: '[PRE74]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Run it
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它
- en: '[PRE75]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '* * *'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[dnsteal.py](https://github.com/m57/dnsteal)'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[dnsteal.py](https://github.com/m57/dnsteal)'
- en: DNS Enumeration
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS 枚举
- en: DNS Enumeration
  id: totrans-410
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS 枚举
- en: '[PRE76]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: In ruby script
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ruby 脚本中
- en: '[PRE77]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Forward DNS lookup
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正向 DNS 查找
- en: The main usage is
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 主要用途是
- en: '[PRE78]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Returns
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE79]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: As you can see from response above, there are 5 sections
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从上面的响应中可以看到的那样，有 5 个部分
- en: '**Header section:** DNS lookup headers'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**头部部分：** DNS 查找头部'
- en: '**Question section:** DNS question,'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题部分：** DNS 问题，'
- en: '**Answer section:** Array of the exact lookup answer (base on lookup type.
    ex. A, NS, MX , etc)'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**答案部分：** 精确查找答案的数组（根据查找类型。例如 A、NS、MX 等）'
- en: '**Authority section:** Array of authority nameserver'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权限部分：** 权威名称服务器数组'
- en: '**Additional section:** Array array of nameserver lookup'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附加部分：** 名字服务器查找的数组'
- en: Since its all are objects, we can call each section like that
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这都是对象，我们可以像这样调用每个部分
- en: '[PRE80]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: A record
  id: totrans-427
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: A 记录
- en: Because the *A* record is the default, we can do like above example
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 *A* 记录是默认的，我们可以像上面的示例那样操作
- en: '[PRE81]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: or in one line to get exact **`answer`**.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在一行中获得确切的**`答案`**。
- en: '[PRE82]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: will return an array with all IPs assigned to this domain
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 将返回一个包含分配给该域的所有 IP 的数组
- en: '[PRE83]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: MX lookup
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MX 查找
- en: '[PRE84]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: returns an array
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数组
- en: '[PRE85]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: All lookup
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 所有查找
- en: '[PRE86]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: returns
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE87]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: for list of types, please refer to the [gem docs](http://www.rubydoc.info/gems/net-dns/Net/DNS/RR/Types)
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 对于类型列表，请参阅 [gem 文档](http://www.rubydoc.info/gems/net-dns/Net/DNS/RR/Types)
- en: Reverse DNS lookup
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 反向 DNS 查找
- en: '[PRE88]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: If you want to specify the nameserver(s) to use, it support an array of nameserver
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想指定要使用的名称服务器，它支持名称服务器数组
- en: '[PRE89]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: or update the object
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 或更新对象
- en: '[PRE90]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '* * *'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[http://searchsignals.com/tutorials/reverse-dns-lookup/](http://searchsignals.com/tutorials/reverse-dns-lookup/)'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://searchsignals.com/tutorials/reverse-dns-lookup/](http://searchsignals.com/tutorials/reverse-dns-lookup/)'
- en: SNMP Enumeration
  id: totrans-451
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SNMP 枚举
- en: SNMP Enumeration
  id: totrans-452
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SNMP 枚举
- en: Install ruby-snmp
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 ruby-snmp
- en: '[PRE91]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Get Request
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取请求
- en: Miss configure an SNMP service would gives an attacker a huge mount of information.
    Let's to see you we can interact with the server to retrieve some info.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 错误配置 SNMP 服务会给攻击者带来大量信息。让我们看看我们如何与服务器交互以检索一些信息。
- en: '[PRE92]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Note: the OID names are case sensitive'
  id: totrans-458
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：OID 名称区分大小写
- en: Set Request
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置请求
- en: Sometimes we get luck and we get the private/management string of SNMP. At this
    moment we might be able to apply changes on the system, router, switches configurations.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们会得到 SNMP 的私有/管理字符串。此时，我们可能能够对系统、路由器、交换机配置进行更改。
- en: '[PRE93]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '* * *'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Packet Manipulation
  id: totrans-463
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据包操作
- en: Packet manipulation
  id: totrans-464
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据包操作
- en: In this chapter, we'll try to do variant implementations using the awesome lib,
    PacketFu^([1](#fn_1)).
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将尝试使用令人惊叹的 lib，PacketFu 进行变体实现^([1](#fn_1))。
- en: PacketFu - The packet manipulation
  id: totrans-466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PacketFu - 数据包操作
- en: '**PacketFu Features**'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '**PacketFu 特性**'
- en: Manipulating TCP protocol
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操纵 TCP 协议
- en: Manipulating UDP protocol
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操纵 UDP 协议
- en: Manipulating ICMP protocol
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操纵 ICMP 协议
- en: Packet Capturing - Support TCPdump style^([2](#fn_2))
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据包捕获 - 支持 TCPdump 风格^([2](#fn_2))
- en: Read and write PCAP files
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取和写入 PCAP 文件
- en: Installing PacketFu
  id: totrans-473
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 PacketFu
- en: Before installing packetfu gem you'll need to install `ruby-dev` and `libpcap-dev`
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 packetfu gem 之前，您需要安装 `ruby-dev` 和 `libpcap-dev`
- en: '[PRE94]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: then install packetfu and pcaprub(required for packet reading and writing from
    network interfaces)
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 然后安装 packetfu 和 pcaprub（用于从网络接口读取和写入数据包）
- en: Install packetfu & pcaprub gems
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 packetfu 和 pcaprub gems
- en: '[PRE95]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Basic Usage
  id: totrans-479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本用法
- en: Get your interface information
  id: totrans-480
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取您的接口信息
- en: '[PRE96]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Get MAC address of a remote host
  id: totrans-482
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取远程主机的 MAC 地址
- en: '[PRE97]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Read Pcap file
  id: totrans-484
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 读取 Pcap 文件
- en: '[PRE98]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Building TCP Syn packet
  id: totrans-486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建 TCP Syn 数据包
- en: '[PRE99]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Simple TCPdump
  id: totrans-488
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单的 TCPdump
- en: Lets see how we can
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何
- en: '[PRE100]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Simple IDS
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单IDS
- en: This is a simple IDS will print source and destination of any communication
    has "hacked" payload
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的IDS，将打印出任何通信的源和目的地，其中包含“被黑客入侵”的有效负载
- en: '[PRE101]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Now try to Netcat any open port then send hacked
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试使用Netcat打开的任何端口，然后发送被黑客入侵的信息
- en: '[PRE102]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: return
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE103]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '* * *'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ¹. [PacketFu Homepage](https://github.com/packetfu/packetfu) [↩](#reffn_1 "Jump
    back to footnote [1] in the text.")
  id: totrans-499
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. [PacketFu主页](https://github.com/packetfu/packetfu) [↩](#reffn_1 "跳回到文本中的脚注[1]")
- en: ². [TCPdump Cheat sheet](http://packetlife.net/media/library/12/tcpdump.pdf)
    [↩](#reffn_2 "Jump back to footnote [2] in the text.")
  id: totrans-500
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ². [TCPdump速查表](http://packetlife.net/media/library/12/tcpdump.pdf) [↩](#reffn_2
    "跳回到文本中的脚注[2]")
- en: ARP Spoofing
  id: totrans-501
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ARP欺骗
- en: ARP Spoofing
  id: totrans-502
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ARP欺骗
- en: As you know, ARP Spoofing attack in the core of MitM attacks. In this part we'll
    know how to write simple and effective ARP spoofer tool to use it in later spoofing
    attacks.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知，ARP欺骗攻击是中间人攻击的核心。在这部分中，我们将了解如何编写简单而有效的ARP欺骗工具，以便在以后的欺骗攻击中使用它。
- en: Scenario
  id: totrans-504
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 场景
- en: We have 3 machines in this scenario as shown below.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们有3台机器，如下所示。
- en: '[PRE104]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Here the list of IP and MAC addresses of each of theme in the following table^([1](#fn_1))
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是每��主题的IP和MAC地址的列表在下表中^([1](#fn_1))
- en: '| Host/Info | IP Address | MAC Address |'
  id: totrans-508
  prefs: []
  type: TYPE_TB
  zh: '| 主机/信息 | IP地址 | MAC地址 |'
- en: '| --- | --- | --- |'
  id: totrans-509
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Attacker | 192.168.0.100 | 3C:77:E6:68:66:E9 |'
  id: totrans-510
  prefs: []
  type: TYPE_TB
  zh: '| 攻击者 | 192.168.0.100 | 3C:77:E6:68:66:E9 |'
- en: '| Victim | 192.168.0.21 | 00:0C:29:38:1D:61 |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
  zh: '| 受害者 | 192.168.0.21 | 00:0C:29:38:1D:61 |'
- en: '| Router | 192.168.0.1 | 00:50:7F:E6:96:20 |'
  id: totrans-512
  prefs: []
  type: TYPE_TB
  zh: '| 路由器 | 192.168.0.1 | 00:50:7F:E6:96:20 |'
- en: To know our/attacker's interface information
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解我们/攻击者的接口信息
- en: '[PRE105]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: returns a hash
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个哈希
- en: '[PRE106]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: So you can extract these information like any hash `info[:iface]`, `info[:ip_saddr]`,
    `info[:eth_saddr]`, etc..
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以像任何哈希`info[:iface]`，`info[:ip_saddr]`，`info[:eth_saddr]`等提取这些信息。
- en: '**Building victim''s ARP packet**'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建受害者的ARP数据包**'
- en: '[PRE107]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '**Building router packet**'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建路由器数据包**'
- en: '[PRE108]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '**Run ARP Spoofing attack**'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行ARP欺骗攻击**'
- en: '[PRE109]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Source^([2](#fn_2))
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 来源^([2](#fn_2))
- en: Wrapping all together and run as `root`
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起并以`root`身份运行
- en: '[PRE110]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Note: Don''t forget to enable packet forwarding on your system to allow victim
    to browse internet.'
  id: totrans-527
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：不要忘记在系统上启用数据包转发，以允许受害者浏览互联网。
- en: ''
  id: totrans-528
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`echo "1" > /proc/sys/net/ipv4/ip_forward`'
  id: totrans-529
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`echo "1" > /proc/sys/net/ipv4/ip_forward`'
- en: Returns, time to wiresharking ;)
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 返回，是时候开始wiresharking了 ;)
- en: '[PRE111]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '* * *'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ¹. Create table the easy way - [Table Generator](http://www.tablesgenerator.com/markdown_tables)
    [↩](#reffn_1 "Jump back to footnote [1] in the text.")
  id: totrans-533
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. 创建表格的简便方法 - [表格生成器](http://www.tablesgenerator.com/markdown_tables) [↩](#reffn_1
    "跳回到文本中的脚注[1]")
- en: '². Source: [DNS Spoofing Using PacketFu](http://crushbeercrushcode.org/2012/10/ruby-dns-spoofing-using-packetfu/)
    [↩](#reffn_2 "Jump back to footnote [2] in the text.")'
  id: totrans-534
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ². 来源：[使用PacketFu进行DNS欺骗](http://crushbeercrushcode.org/2012/10/ruby-dns-spoofing-using-packetfu/)
    [↩](#reffn_2 "跳回到文本中的脚注[2]")
- en: DNS Spooging
  id: totrans-535
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS欺骗
- en: DNS Spoofing
  id: totrans-536
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS欺骗
- en: Continuing our attack through [ARP Spoofing](module_0x4__network_kung_fu/arp_spoofing.md),
    we want to change the victim's DNS request to whatever destination we like.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们的攻击通过[ARP欺骗](module_0x4__network_kung_fu/arp_spoofing.md)，我们希望将受害者的DNS请求更改为我们喜欢的任何目的地。
- en: Scenario
  id: totrans-538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 场景
- en: '[PRE112]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Keep the ARP spoof attack running
  id: totrans-540
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 保持ARP欺骗攻击持续进行
- en: The same IPs of ARP spoof attack
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: ARP欺骗攻击的相同IP
- en: '| Host | IP Address |'
  id: totrans-542
  prefs: []
  type: TYPE_TB
  zh: '| 主机 | IP地址 |'
- en: '| --- | --- |'
  id: totrans-543
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Attacker | 192.168.0.100 |'
  id: totrans-544
  prefs: []
  type: TYPE_TB
  zh: '| 攻击者 | 192.168.0.100 |'
- en: '| Victim | 192.168.0.21 |'
  id: totrans-545
  prefs: []
  type: TYPE_TB
  zh: '| 受害者 | 192.168.0.21 |'
- en: '| Router | 192.168.0.1 |'
  id: totrans-546
  prefs: []
  type: TYPE_TB
  zh: '| 路由器 | 192.168.0.1 |'
- en: Now we cant intercept DNS Query packet coming from victim's machine. Since PacketFu
    supports filters in capturing (to reduce mount of captured packets) we'll use
    `udp and port 53 and host` filter, then we'll inspect the captured packet to ensure
    that it's a query then find the requested domain. [**Download DNS packet**](../files/module03/dns_spoofing_dns-req_res.pcap.pcapng).
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以拦截来自受害者机器的DNS查询数据包。由于PacketFu支持捕获中的过滤器（以减少捕获的数据包数量），我们将使用`udp and port
    53 and host`过滤器，然后检查捕获的数据包以确保它是一个查询，然后找到请求的域名。[**下载DNS数据包**](../files/module03/dns_spoofing_dns-req_res.pcap.pcapng)。
- en: From Wireshark, if we take a deeper look at the DNS query payload in `Domain
    Name System (query)`, we can see its been presented in hexadecimal format.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 从Wireshark，如果我们深入研究`域名系统（查询）`中的DNS查询有效负载，我们可以看到它以十六进制格式呈现。
- en: '| ![](dns_spoofing_wireshark1.png) |'
  id: totrans-549
  prefs: []
  type: TYPE_TB
  zh: '| ![](dns_spoofing_wireshark1.png) |'
- en: '| --- |'
  id: totrans-550
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| **Figure 1.** DNS query Payload |'
  id: totrans-551
  prefs: []
  type: TYPE_TB
  zh: '| **图1.** DNS查询有效负载 |'
- en: Let's to anatomize our payload
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解剖我们的有效负载
- en: '[PRE113]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'The First 2 bytes is the **Transaction ID** and we don''t care about it for
    now. (Our case: `\xe7\x1d`)'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前两个字节是**事务ID**，我们现在不关心它。（我们的情况：`\xe7\x1d`）
- en: 'The next 2 bytes is the **Flags**^([3](#fn_3)). (We need: `\x01\x00` = \x10)'
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来的 2 个字节是**标志位**^([3](#fn_3))。（我们需要：`\x01\x00` = \x10）
- en: Furthermore, in **Queries** section which contains
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，在**查询**部分中包含
- en: '[PRE114]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: The **Queries** starts at *13 byte* of the payload.
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询**从有效载荷的 *第 13 个字节* 开始。'
- en: 'The 13th byte specifies the length of the domain name *before* the *very first
    dot* (without last dot com or whatever the top domain is). (Our case: `\x07`)
    **Try:**`[%w{ 74 77 69 74 74 65 72 }.join].pack("H*")`'
  id: totrans-559
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 13 个字节指定域名的长度 *在* *第一个点之前*（不包括最后一个点 com 或其他顶级域）。 （我们的情况：`\x07`）**尝试：**`[%w{
    74 77 69 74 74 65 72 }.join].pack("H*")`
- en: Notice The domain name of "twitter.com" equals `\x07` but "www.twitter.com"
    equals `\x03` the same consideration for subdomains
  id: totrans-560
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意 "twitter.com" 的域名等于 `\x07`，但是 "www.twitter.com" 的域名等于 `\x03`，子域名也是同样的考虑。
- en: Each dot after first dot will be replaced with the length of the followed characters
  id: totrans-561
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个点后的每个点都将被后面字符的长度替换。
- en: '**e.g.** www.google.co.uk'
  id: totrans-562
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**例如：** www.google.co.uk'
- en: First length (**www**) => will be replaced with `\x03`
  id: totrans-563
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个长度（**www**）=> 将被替换为 `\x03`
- en: First dot(**.google**) => will be replaced with `\x06`
  id: totrans-564
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个点（**.google**）=> 将被替换为 `\x06`
- en: Second dot(**.co**) => will be replaced with `\x02`
  id: totrans-565
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个点（**.co**）=> 将被替换为 `\x02`
- en: Third dot(**.uk**) => will be replaced with `\x02`
  id: totrans-566
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个点（**.uk**）=> 将被替换为 `\x02`
- en: The very end of the domain name string is terminated by a `\x00`.
  id: totrans-567
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域名字符串的最后以 `\x00` 结束。
- en: 'The next 2 bytes refers to the **type of the query**^([4](#fn_4)). (Our case:
    `\x00\x01`)'
  id: totrans-568
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来的 2 个字节指的是查询的**类型**^([4](#fn_4))。（我们的情况：`\x00\x01`）
- en: '**Now what?!**'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在怎么办？！**'
- en: We need to start capturing/sniffing on specific interface
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要开始在特定接口上捕获/嗅探数据包。
- en: We need to enable promiscuous mode on our interface
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要在我们的接口上启用混杂模式
- en: We need to capture UDP packets on port 53 only
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要仅捕获端口 53 上的 UDP 数据包。
- en: We need parse/analyze the valid UDP packets only
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要解析/分析仅有效的 UDP 数据包。
- en: We need to make sure this packet is a DNS query
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要确保此数据包是 DNS 查询
- en: We need to get the queried/requested domain
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要获取查询/请求的域名
- en: We need to know the domain length
  id: totrans-576
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要知道域名的长度
- en: We need to get the FQDN
  id: totrans-577
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要获取 FQDN
- en: Build a DNS response
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 DNS 响应
- en: Replace the requested domain with any domain we want
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用我们想要的任何域名替换请求的域名
- en: Re inject the packet into victim connection and send
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新注入数据包到受害者连接并发送
- en: I'll divide our tasks then wrap it up in one script
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将划分我们的任务，然后将其封装在一个脚本中。
- en: '[PRE115]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Till now we successfully finished [ARP Spoofing](module_0x3__network_kung_fu/arp_spoofing.md)
    then DNS capturing but still we need to replace/spoof the original response to
    our domain. e.g. attacker.zone, now we have to build a DNS response instead of
    spoofed to be sent. So what we need?
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已成功完成[ARP 欺骗](module_0x3__network_kung_fu/arp_spoofing.md)，然后是 DNS 捕获，但我们仍然需要替换/欺骗原始响应到我们的域。例如攻击者区域，现在我们必须构建一个
    DNS 响应，而不是伪造的发送。那么我们需要什么？
- en: taking the IP we are going to redirect the user to (the spoofing_ip)
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用取得的 IP（欺骗 IP）来重定向用户。
- en: converting it into hex using the `to_i` and `pack` methods.
  id: totrans-585
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `to_i` 和 `pack` 方法将其转换为十六进制。
- en: From there we create a new UDP packet using the data contained in `@ourInfo`
    (IP and MAC) and fill in the normal UDP fields.
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们使用 `@ourInfo` 中包含的数据（IP 和 MAC）创建一个新的 UDP 数据包，并填写正常的 UDP 字段。
- en: I take most of this information straight from the DNS Query packet.
  id: totrans-587
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我大部分信息直接来自 DNS 查询数据包。
- en: The next step is to create the DNS Response.
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一步是创建 DNS 响应。
- en: the best way to understand the code here is to look at a DNS header and then
  id: totrans-589
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最好的理解此处代码的方式是查看 DNS 标头，然后
- en: take the bit map of the HEX values and apply them to the header.
  id: totrans-590
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取十六进制值的位图并将其应用于标头。
- en: This will let you see what flags are being set.
  id: totrans-591
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将让你看到设置了哪些标志位。
- en: From here, we just calculate the checksum for the UDP packet and send it out
    to the target's machine.
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从这里，我们只需为 UDP 数据包计算校验和，然后发送到目标机器。
- en: '| ![Wireshark](dns_spoofing_wireshark2.png) |'
  id: totrans-593
  prefs: []
  type: TYPE_TB
  zh: '| ![Wireshark](dns_spoofing_wireshark2.png) |'
- en: '| --- |'
  id: totrans-594
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| **Figure 2.** DNS Response Payload |'
  id: totrans-595
  prefs: []
  type: TYPE_TB
  zh: '| **图 2.** DNS 响应有效载荷 |'
- en: '[PRE116]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Wrapping up
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 封装
- en: '[PRE117]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[https://github.com/SilverFoxx/Spoofa/blob/master/spoofa](https://github.com/SilverFoxx/Spoofa/blob/master/spoofa)'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/SilverFoxx/Spoofa/blob/master/spoofa](https://github.com/SilverFoxx/Spoofa/blob/master/spoofa)'
- en: Sources^([1](#fn_1)) ^([2](#fn_2)) - The code has been modified and fixed
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 资源^([1](#fn_1)) ^([2](#fn_2)) - 代码已修改和修复
- en: '* * *'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ¹. [DNS Spoofing Using PacketFu](http://crushbeercrushcode.org/2012/10/ruby-dns-spoofing-using-packetfu/)
    [↩](#reffn_1 "Jump back to footnote [1] in the text.")
  id: totrans-602
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. [使用 PacketFu 进行 DNS 欺骗](http://crushbeercrushcode.org/2012/10/ruby-dns-spoofing-using-packetfu/)
    [↩](#reffn_1 "返回到正文中的脚注 [1]")
- en: ². [Manipulating The Network with PacketFu](http://tuftsdev.github.io/DefenseOfTheDarkArts/assignments/manipulatingthenetworkwithpacketfu-110314111058-phpapp01.pdf)
    [↩](#reffn_2 "Jump back to footnote [2] in the text.")
  id: totrans-603
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ². [使用PacketFu操纵网络](http://tuftsdev.github.io/DefenseOfTheDarkArts/assignments/manipulatingthenetworkwithpacketfu-110314111058-phpapp01.pdf)
    [↩](#reffn_2 "跳回文本中的脚注[2]")
- en: ³. [DNS Header Flags](http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-12)
    [↩](#reffn_3 "Jump back to footnote [3] in the text.")
  id: totrans-604
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ³. [DNS头部标志](http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-12)
    [↩](#reffn_3 "跳回文本中的脚注[3]")
- en: '| Bit | Flag | Description | Reference |'
  id: totrans-605
  prefs: []
  type: TYPE_TB
  zh: '| 位 | 标志 | 描述 | 参考 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-606
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| bit 5 | AA | Authoritative Answer | [RFC1035] |'
  id: totrans-607
  prefs: []
  type: TYPE_TB
  zh: '| 位 5 | AA | 授权回答 | [RFC1035] |'
- en: '| bit 6 | TC | Truncated Response | [RFC1035] |'
  id: totrans-608
  prefs: []
  type: TYPE_TB
  zh: '| 位 6 | TC | 截断响应 | [RFC1035] |'
- en: '| bit 7 | RD | Recursion Desired | [RFC1035] |'
  id: totrans-609
  prefs: []
  type: TYPE_TB
  zh: '| 位 7 | RD | 期望递归 | [RFC1035] |'
- en: '| bit 8 | RA | Recursion Allowed | [RFC1035] |'
  id: totrans-610
  prefs: []
  type: TYPE_TB
  zh: '| 位 8 | RA | 允许递归 | [RFC1035] |'
- en: '| bit 9 |  | Reserved |  |'
  id: totrans-611
  prefs: []
  type: TYPE_TB
  zh: '| 位 9 |  | 保留 |  |'
- en: '| bit 10 | AD | Authentic Data | [RFC4035] |'
  id: totrans-612
  prefs: []
  type: TYPE_TB
  zh: '| 位 10 | AD | 真实数据 | [RFC4035] |'
- en: '| bit 11 | CD | Checking Disabled | [RFC4035] |'
  id: totrans-613
  prefs: []
  type: TYPE_TB
  zh: '| 位 11 | CD | 禁用检查 | [RFC4035] |'
- en: ⁴. [DNS Lookups Types](http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4)
    [↩](#reffn_4 "Jump back to footnote [4] in the text.")
  id: totrans-614
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ⁴. [DNS查找类型](http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4)
    [↩](#reffn_4 "跳回文本中的脚注[4]")
- en: '| Type | Value | Description |'
  id: totrans-615
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 值 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-616
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| A | 1 | IP Address |'
  id: totrans-617
  prefs: []
  type: TYPE_TB
  zh: '| A | 1 | IP地址 |'
- en: '| NS | 2 | Name Server |'
  id: totrans-618
  prefs: []
  type: TYPE_TB
  zh: '| NS | 2 | 名称服务器 |'
- en: '| CNAME | 5 | Alias of a domain name |'
  id: totrans-619
  prefs: []
  type: TYPE_TB
  zh: '| CNAME | 5 | 域名的别名 |'
- en: '| PTR | 12 | Reverse DNS Lookup using the IP Address |'
  id: totrans-620
  prefs: []
  type: TYPE_TB
  zh: '| PTR | 12 | 使用IP地址进行反向DNS查找 |'
- en: '| HINFO | 13 | Host Information |'
  id: totrans-621
  prefs: []
  type: TYPE_TB
  zh: '| HINFO | 13 | 主机信息 |'
- en: '| MX | 15 | MX Record |'
  id: totrans-622
  prefs: []
  type: TYPE_TB
  zh: '| MX | 15 | MX记录 |'
- en: '| AXFR | 252 | Request for Zone Transfer |'
  id: totrans-623
  prefs: []
  type: TYPE_TB
  zh: '| AXFR | 252 | 区域传输请求 |'
- en: '| ANY | 255 | Request for All Records |'
  id: totrans-624
  prefs: []
  type: TYPE_TB
  zh: '| ANY | 255 | 请求所有记录 |'
- en: MiTM Attack
  id: totrans-625
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MiTM攻击
- en: Man in the Middle Attack (MiTM)
  id: totrans-626
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中间人攻击（MiTM）
- en: Example of a more elaborate MiTM attack using ARP Poisoning with PacketFU and
    socket using source code in this book as base.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 通过ARP欺骗和PacketFU以及套接字使用本书中的源代码作为基础的更复杂的MiTM攻击示例。
- en: '[PRE118]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Source: [Ruby-MiTM](https://github.com/ChrisFernandez/ruby-mitm "Ruby-mitm")
    and Rubyfu [ARP Spoofing topic](arp_spoofing.html).'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[Ruby-MiTM](https://github.com/ChrisFernandez/ruby-mitm "Ruby-mitm") 和 Rubyfu
    [ARP欺骗主题](arp_spoofing.html)。
