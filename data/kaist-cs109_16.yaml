- en: Compiling programs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译程序
- en: We write programs in a high-level programming language like Kotlin, Java, C++,
    or C. A compiler translates the source code to object code (machine code).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用 Kotlin、Java、C++ 或 C 等高级编程语言编写程序。编译器将源代码转换为对象代码（机器代码）。
- en: For C and C++, it is customary to compile to native machine code. It can be
    executed directly by the processor. Native machine code is different for different
    processors, operating systems, and can depend on library versions. So a program
    compiled for Windows does not run on Mac OS, a program compiled for iOS does not
    run on Windows, and a program compiled for Mac OS 10.9 may not work on Mac OS
    10.10.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 C 和 C++，习惯上编译为本机机器代码。它可以直接由处理器执行。本机机器代码对于不同的处理器、操作系统有所不同，并且可能依赖于库版本。因此，为
    Windows 编译的程序无法在 Mac OS 上运行，为 iOS 编译的程序无法在 Windows 上运行，并且为 Mac OS 10.9 编译的程序可能无法在
    Mac OS 10.10 上运行。
- en: Java and Kotlin are normally translated to object code for the JVM (Java virtual
    machine). A Java runtime environment is needed on the computer to execute the
    program. The exact same object code works on any system. JVM is heavily used on
    servers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Java 和 Kotlin 通常被翻译为 JVM（Java 虚拟机）的对象代码。计算机上需要一个 Java 运行时环境来执行程序。完全相同的对象代码可以在任何系统上工作。JVM
    在服务器上被广泛使用。
- en: Until now we have written our programs as Kotlin scripts. Scripts are meant
    for quick programming tasks. Every time you run a script, it is compiled again
    and then executed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经将我们的程序编写为 Kotlin 脚本。脚本适用于快速编程任务。每次运行脚本时，它都会被重新编译，然后执行。
- en: For larger programs, it is better to write an application. It can consist of
    many separate source files that can be compiled individually (so you only have
    to compile the source file that you have changed). And once it has been compiled,
    an application starts much faster than a script.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较大的程序，最好编写一个应用程序。它可以由许多单独的源文件组成，这些文件可以单独编译（因此您只需编译您已更改的源文件）。一旦编译完成，应用程序启动速度比脚本快得多。
- en: Compiling
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编译
- en: 'Let''s start with a small example. We make a source file [point.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/48-compiling/point.kt)
    (note the file extension kt, different from the extension kts we used for scripts):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个小例子开始。我们创建一个源文件 [point.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/48-compiling/point.kt)（注意文件扩展名
    kt，与我们用于脚本的扩展名 kts 不同）：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I''ve made new directory that only contains this file now:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经创建了一个只包含此文件的新目录：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I will now compile point.kt using the Kotlin compiler ktc:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在将使用 Kotlin 编译器 ktc 编译 point.kt：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, one new file has been created in the classes subdirectory, namely
    Point.class. A file with extension class contains exactly one class definition
    for the JVM.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，classes 子目录中创建了一个新文件，即 Point.class。扩展名为 class 的文件正好包含 JVM 的一个类定义。
- en: 'We can now use this class from the interactive mode (or from a script):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从交互模式（或脚本）中使用这个类：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note that I did not define the Point class in this interactive session. Kotlin
    finds it automatically: When it sees the word Point which is currently not defined,
    it looks for the definition of a class or object with name Point. Therefore it
    checks all directories on its class path for files with the name Point.class.
    Since I added the subdirectory classes to the class path with the -cp option,
    Kotlin finds the file there and loads the class definition from that file. Note
    that the source file point.kt is not used—we can delete it and still use the Point
    class from Point.class.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这个交互式会话中，我没有定义 Point 类。Kotlin 会自动找到它：当它看到当前未定义的 Point 时，它会寻找名为 Point 的类或对象的定义。因此，它会在其类路径上检查所有目录，以查找具有名称
    Point.class 的文件。由于我使用 -cp 选项将子目录 classes 添加到类路径中，Kotlin 会在那里找到该文件并从该文件加载类定义。请注意，源文件
    point.kt 不会被使用——我们可以删除它，仍然可以使用 Point.class 中的 Point 类。
- en: What can be compiled
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 什么可以被编译
- en: 'When you write a script, you can place arbitrary Kotlin commands inside the
    file. For instance, this file [hello.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/48-compiling/hello.kt)
    would be perfectly fine as a script:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写脚本时，可以在文件中放置任意的 Kotlin 命令。例如，这个文件 [hello.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/48-compiling/hello.kt)
    作为脚本完全没有问题：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'However, it cannot be compiled:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，它无法被编译：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As the compiler already tells us, a source file can contain only top level declarations.
    This includes function definitions using fun, class definitions using class, and
    definitions of global variables using val and var.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如编译器已经告诉我们的那样，源文件只能包含顶级声明。这包括使用 fun 定义的函数定义、使用 class 定义的类定义以及使用 val 和 var 定义的全局变量的定义。
- en: Applications
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 应用
- en: 'This leaves the question: How can we actually run any code in our program if
    we are only allowed to put declarations? The answer goes back to the early 1970s:
    An application is started through a special function with the name main. It must
    take exactly one argument of type Array<String>, which will receive the command
    line arguments when the program starts.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出了一个问题：如果我们只允许放置声明，那么我们如何运行程序中的任何代码？答案可以追溯到 1970 年代初期：一个应用程序通过一个名为 main 的特殊函数启动。它必须接受一个类型为
    Array<String> 的参数，该参数将在程序启动时接收命令行参数。
- en: 'So the following source file can be compiled [hello-app.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/48-compiling/hello-app.kt):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以下面的源文件可以被编译 [hello-app.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/48-compiling/hello-app.kt)：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We compile it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对其进行编译：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that a class file for a class Hello_appKt has been created (there is also
    a new subdirectory called META_INF that contains information for the compiler—we
    can ignore this entirely).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，已经为类 Hello_appKt 创建了一个类文件（还有一个名为 META_INF 的新子目录，其中包含编译器的信息——我们完全可以忽略这一点）。
- en: 'To run our program, we need to "run the class" Hello_appKt:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行我们的程序，我们需要"运行类" Hello_appKt：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Remember that to run the program, you need to provide the class name, not the
    name of the source file. (And in fact the source file is not needed to run the
    program at all!)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，要运行程序，您需要提供类名，而不是源文件名。（事实上，根本不需要源文件来运行程序！）
- en: 'Here is a small example of full application: [number-game.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/48-compiling/number-game.kt):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个完整应用程序的小例子：[number-game.kt](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/48-compiling/number-game.kt)：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can compile and run the program:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编译并运行程序：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note again that to run the program, you have to provide the name of the class
    Number_gameKt (which Kotlin has created automatically from the name of the source
    file number-game.kt).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，要运行程序，你必须提供类名 Number_gameKt（这是 Kotlin 根据源文件 number-game.kt 自动创建的）。
- en: Multiple source files
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多个源文件
- en: 'A larger application will consist of several source files that define a number
    of functions and classes. At least one of the source files must define a function main(args:
    Array<String>) returning Unit. This function is the starting point of the program.
    The program is started through the class representing the source file containing
    the main function.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '一个更大的应用程序将由几个源文件组成，定义了许多函数和类。至少一个源文件必须定义一个返回 Unit 的函数 main(args: Array<String>)。这个函数是程序的起点。程序是通过表示包含主函数的源文件的类启动的。'
- en: 'The easiest way to compile such an application is to compile all files at once:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 编译这样一个应用程序的最简单方法是一次编译所有文件：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: However, when the program becomes larger, it makes sense to only recompile those
    parts that have changed, or that depend on the changed part. The easiest way to
    achieve this is to use a build tool such as gradle or maven, or an integrated
    development environment (IDE) such as [IntelliJ](https://www.jetbrains.com/idea/download/index.html)
    (which has the best support for Kotlin, since it is made by the same company that
    created Kotlin). This [tutorial](https://kotlinlang.org/docs/tutorials/getting-started.html)
    will get you started.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当程序变得更大时，只重新编译已更改或依赖已更改部分是有意义的。实现这一点的最简单方法是使用构建工具，如 gradle 或 maven，或者集成开发环境（IDE）如
    [IntelliJ](https://www.jetbrains.com/idea/download/index.html)（由与 Kotlin 创建者相同的公司制作，因此对
    Kotlin 的支持最佳）。 这个 [教程](https://kotlinlang.org/docs/tutorials/getting-started.html)
    将帮助您入门。
- en: Compiling for distribution
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为分发编译
- en: Imagine you have written a nice program, and you want to give it to your friends
    or post it on your website. Obviously, you don't want them to have to install
    the Kotlin compiler just to run your program. So you have to package your program
    in such a form that all they need is a JVM installation (which most computers
    already have).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你写了一个不错的程序，想要把它送给朋友或者发布到你的网站上。显然，你不希望他们为了运行你的程序而必须安装 Kotlin 编译器。所以你必须将你的程序打包成这样一种形式，只需
    JVM 安装（大多数计算机已经有了）即可。
- en: 'There are two things we need to do: First, instead of creating lots of class
    files, we will package them all together into a jar file. Second, we will add
    the Kotlin library into this package, so that it can be run without having Kotlin
    installed:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做两件事：首先，不再创建大量的类文件，我们将它们全部打包成一个 jar 文件。其次，我们将 Kotlin 库添加到这个包中，这样它就可以在没有安装
    Kotlin 的情况下运行：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The compiler will create a new file number-game.jar. You can run this directly
    with the Java virtual machine:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器将创建一个新文件 number-game.jar。您可以直接在Java虚拟机上运行它：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will work on any computer that has the JVM installed. If your program has
    a [graphical user interface](tutorial-cs109ui.html), you can probably also start
    it by just clicking on the jar file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在任何已安装JVM的计算机上运行。如果您的程序具有[图形用户界面](tutorial-cs109ui.html)，您可能也可以通过单击jar文件来启动它。
