- en: Infinite Streams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无限流
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: 'We have seen how to support the illusion of manipulating a stream as a complete
    sequence, when in actuality we only compute as much of the stream as we need.
    We can exploit this technique to represent sequences efficiently as streams, even
    if the sequences are very long. But more importantly, we can use streams to represent
    sequences that are infinitely long. For instance, suppose we define the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何支持操作流的幻觉，将其视为完整序列，而实际上我们只计算所需的流量。我们可以利用这种技术有效地将序列表示为流，即使序列非常长。但更重要的是，我们可以使用流来表示无限长的序列。例如，假设我们定义如下：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then `integers` represents the stream of all positive integers. More specifically,
    the `stream-car` of `integers` is 1 and the `stream-cdr` of `integers` is a promise
    equivalent to `(integers-starting-from 2)`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`integers`表示所有正整数的流。更具体地说，`integers`的`stream-car`为1，`integers`的`stream-cdr`是一个等价于`(integers-starting-from
    2)`的承诺。
- en: 'Using `integers`, we can define other infinite streams, such as the stream
    of integers that are not divisible by 7:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`integers`，我们可以定义其他无限流，例如不能被7整除的整数流：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can then find integers not divisible by 7 simply by accessing elements of
    this stream:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过访问此流的元素来找到不能被7整除的整数：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Stream Procedures
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流程
- en: The way we've been defining streams up until now is very similar to the way
    we define lists. Now we're going to take a more "streamy" approach.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在定义流的方式与我们定义列表的方式非常相似。现在我们将采取更“流式”的方法。
- en: 'We can take advantage of delayed evaluation to implicitly define streams. For
    example, we can define an infinite stream of all ones like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用延迟评估来隐式定义流。例如，我们可以这样定义一个全为1的无限流：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This works much like the definition of a recursive procedure: `ones` is a pair
    whose `car` is `1` and whose `cdr` is a promise to evaluate `ones`. Evaluating
    the `cdr` gives us again a `1` and a promise to evaluate `ones`, and so on.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这与递归过程的定义方式非常相似：`ones`是一个`car`为`1`且`cdr`为评估`ones`的承诺的对。评估`cdr`再次给我们一个`1`和评估`ones`的承诺，依此类推。
- en: 'We can also define a stream procedure `add-streams`, which produces the elementwise
    sum of two streams:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以定义一个流程`add-streams`，它产生两个流的逐元素和：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For example, `(add-streams ones ones)` would produce a stream of all twos.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`(add-streams ones ones)`将产生一个全为2的流。
- en: 'We can redefine then define `integers` implicitly:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重新定义然后隐式定义`integers`：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This defines `integers` to be a stream whose `stream-car` is 1 and whose `stream-cdr`
    is the sum of `ones` and `integers`. Thus, the second element of `integers` is
    1 plus the first element of `integers`, or 2; the third element of integers is
    1 plus the second element of integers, or 3; and so on. This definition works
    because, at any point, enough of the integers stream has been generated so that
    we can feed it back into the definition to produce the next integer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了`integers`为一个流，其`stream-car`为1，其`stream-cdr`为`ones`和`integers`的和。因此，`integers`的第二个元素是`integers`的第一个元素加1，或者2；`integers`的第三个元素是`integers`的第二个元素加1，或者3；依此类推。这个定义之所以有效，是因为在任何时刻，已经生成了足够多的整数流，以便我们可以将其反馈到定义中，以生成下一个整数。
- en: Note on `stream-map`
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于`stream-map`
- en: 'Note that in the example above, we called `stream-map` with two streams. Previously,
    we used stream-map with just one stream:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上面的示例中，我们使用两个流调用了`stream-map`。之前，我们只使用一个流调用了stream-map：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can use `stream-map` with any number of streams, given that the procedure
    you give has the corresponding number of arguments:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`stream-map`与任意数量的流，只要你提供的过程具有相应数量的参数：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Naturally, the actual definition of `stream-map` is slightly different, but
    don't worry about it for now.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`stream-map`的实际定义略有不同，但现在不用担心。
- en: 'We can also define the Fibonacci sequence in the same style:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以以相同的方式定义斐波那契数列：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This definition says that `fibs` is a stream beginning with 0 and 1, such that
    the rest of the stream can be generated by adding `fibs` to itself shifted by
    one place.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义表示`fibs`是以0和1开头的流，使得流的其余部分可以通过将`fibs`与自身向右移动一个位置相加来生成。
- en: 'Another stream operation that we can use is `scale-stream`. It takes in two
    arguments—a stream of integers and an integer—and multiplies all elements in the
    stream by the integer:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`scale-stream`定义另一个流操作。它接受两个参数——一个整数流和一个整数，并将流中的所有元素乘以该整数：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can now define a stream of all the powers of 2 like so:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以这样定义所有2的幂的流：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can define the infinite stream of primes in a different, implicit way now:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们可以以不同的、隐式的方式定义素数的无限流:'
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This might seem fairly straightforward—we start with the first prime, 2, and
    we then `cons-stream` the rest of the integers that are prime to it. However,
    the way that `prime?` is defined makes this problem a little more subtle.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来相当简单——我们从第一个素数2开始，然后我们通过`cons-stream`将其余的素数与之连接起来。然而，`prime?`的定义方式使得这个问题变得有点微妙。
- en: 'We check if a number is prime by seeing whether it is divisible by any prime
    (not just any integer!) less than √(n):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '我们通过查看一个数是否被小于√(n)的任何一个素数（而不仅仅是任何整数！）整除来检查一个数是否是素数:'
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is a recursive definition (much like you saw in trees!) since `primes`
    is defined in terms of the `prime?` predicate, which itself uses the `primes`
    stream. The reason this procedure works is that, at any point, enough of the `primes`
    stream has been generated to test the primality of the numbers we need to check
    next. That is, for every `n` we test for primality, either `n` is not prime (in
    which case there is a prime already generated that divides it) or `n` is prime
    (in which case there is a prime already generated -- i.e., a prime less than `n`
    -- that is greater than √(`n`))
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个递归定义（就像你在树中看到的那样！）因为`primes`是根据`prime?`谓词定义的，而`prime?`谓词本身使用了`primes`流。这个过程之所以有效是因为，在任何时刻，已经生成了足够多的`primes`流来测试我们需要检查的下一个数的素数性。也就是说，对于我们测试素数性的每个`n`，要么`n`不是素数（在这种情况下，已经生成了一个可以整除它的素数），要么`n`是素数（在这种情况下，已经生成了一个素数——即小于`n`的素数——它大于√(`n`))
- en: Takeaways
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: 'In this section, you learned:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '在本节中，您学到了:'
- en: What infinite streams are!
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无限流是什么！
- en: Some cool stuff we can make with them
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以用它们做一些很酷的东西
