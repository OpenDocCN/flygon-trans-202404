- en: Intro to Programming LanguagesTuesday, January 10th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程语言简介，周二，1月10日
- en: '[PLAI §1](plai.pdf#chapter.1 "Modeling Languages")'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PLAI §1](plai.pdf#chapter.1 "模拟语言")'
- en: Why should we care about programming languages? (Any examples of big projects
    *without* a little language?)
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们要关心编程语言？（有没有一些大型项目 *没有* 一点语言？）
- en: What defines a language?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么定义了一种语言？
- en: syntax
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法
- en: semantics
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义
- en: libraries
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库
- en: idioms
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 习语
- en: How important is each of these?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些各自有多重要？
- en: libraries give you the run-time support, not an important part of the language
    itself. (BTW, the line between “a library” and “part of the language” is less
    obvious than it seems.)
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库为您提供运行时支持，不是语言本身的重要部分。（顺便说一句，“库”和“语言的一部分”之间的界线并不像看起来那么明显。）
- en: 'idioms originate from both language design and culture. They are often misleading.
    For example, JavaScript programmers will often write:'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 习语源自语言设计和文化。 它们经常具有误导性。 例如，JavaScript 程序员经常会写：
- en: '[PRE0]'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: or
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE1]'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: or
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE2]'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: or
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE3]'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: or
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE4]'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'How many JavaScript programmers will know what this does:'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多少 JavaScript 程序员会知道这个做什么：
- en: '[PRE5]'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'or these:'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或这些：
- en: '[PRE6]'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ([Real example](https://www.websocket.org/echo.html))
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: （[真实例子](https://www.websocket.org/echo.html)）
- en: 'Compare:'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较：
- en: '`a[25]+5` (Java: exception)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a[25]+5`（Java：异常）'
- en: '`(+ (vector-ref a 25) 5)` (Racket: exception)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(+ (vector-ref a 25) 5)`（Racket：异常）'
- en: '`a[25]+5` (JavaScript: exception (or NaN))'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a[25]+5`（JavaScript：异常（或 NaN））'
- en: '`a[25]+5` (Python: exception)'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a[25]+5`（Python：异常）'
- en: '`$a[25]+5` (Perl: 5)'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$a[25]+5`（Perl：5）'
- en: '`a[25]+5` (C: ***BOOM***)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a[25]+5`（C：***BOOM***）'
- en: -> syntax is mostly in the cosmetics department; semantics is the real thing.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: -> 语法主要是外观上的东西；语义才是真正的东西。
- en: How should we talk about semantics?
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应该如何谈论语义？
- en: A few well-known formalisms for semantics.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些众所周知的语义形式主义。
- en: 'We will use programs to explain semantics: the best explanation *is* a program.'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用程序来解释语义：最好的解释 *就是* 一个程序。
- en: 'Ignore possible philosophical issues with circularity (but be aware of them).
    (Actually, they are solved: Scheme has a formal explanation that can be taken
    as a translation from Scheme to logic, which means that things that we write can
    be translated to logic.)'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忽略可能的循环问题（但要意识到它们）。 （实际上，它们已经解决了：Scheme 有一个可以被视为从 Scheme 到逻辑的翻译的正式解释，这意味着我们写的东西可以被翻译成逻辑。）
- en: We will use Racket for many reasons (syntax, functional, practical, simple,
    formal, statically typed, environment).
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们会使用 Racket 出于许多原因（语法，函数式，实用，简单，形式化，静态类型，环境）。
