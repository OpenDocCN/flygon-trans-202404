- en: Chapter 12 - Creating dom.js - a wishful jQuery inspired DOM Library for modern
    browers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章 - 创建 dom.js - 一个受 jQuery 启发的现代浏览器 DOM 库
- en: 12.1 dom.js overview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.1 dom.js 概述
- en: I want you to take the information and knowledge from this book and leverage
    it as I walk you through a foundation for a wishful, modern, jQuery like DOM library
    called dom.js. Think of dom.js as the foundation to a modern library for selecting
    DOM nodes and doing something with them. Not unlike jQuery the dom.js code will
    provide a function for selecting something from the DOM (or creating) and then
    doing something with it. I show some examples of the *dom()* function below which
    shouldn't look all that foreign if you are familiar with jQuery or really any
    DOM utility for selecting elements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你从这本书中获取信息和知识，并在我为你介绍一个名为 dom.js 的愿望、现代、类似 jQuery 的 DOM 库的基础时加以利用。将 dom.js
    视为一个用于选择 DOM 节点并对其进行操作的现代库的基础。与 jQuery 类似，dom.js 代码将提供一个用于从 DOM 中选择（或创建）某些内容，然后对其进行操作的函数。我在下面展示了一些
    *dom()* 函数的示例，如果你熟悉 jQuery 或任何用于选择元素的 DOM 工具，这些示例看起来应该不会陌生。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For most readers this chapter is simply an exercise in taking the information
    in this book and applying it to a JavaScript DOM library. For others, this might
    just shed some light on jQuery itself and any DOM manipulation logic used in JavaScript
    frameworks today. Ideally, in the end, I hope this exercise inspires readers to
    craft their own micro DOM abstractions on an as needed bases when the situation
    is right. With that said, lets begin.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数读者来说，本章节只是一个将本书中的信息应用到 JavaScript DOM 库的练习。对于其他人来说，这可能会让他们对 jQuery 本身以及当今
    JavaScript 框架中使用的任何 DOM 操作逻辑有所了解。理想情况下，我希望这个练习能激发读者在适当时候根据需要打造自己的微型 DOM 抽象。说了这么多，让我们开始吧。
- en: 12.2 Create a unique scope
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.2 创建一个独特的作用域
- en: To protect our dom.js code from the global scope, I will first create a unique
    scope to which it can live and operate within without fear of collisions in the
    global scope. In the code below I setup a pretty standard [Immediately-Invoked
    Function Expression](http://benalman.com/news/2010/11/immediately-invoked-function-expression/)
    to create this private scope. When the IIFE is invoked the value of *global* will
    be set to the current global scope (i.e. *window*).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护我们的 dom.js 代码不受全局作用域的影响，我将首先创建一个独特的作用域，让它可以在其中生存和运行，而不必担心在全局作用域中发生冲突。在下面的代码中，我设置了一个相当标准的[立即调用函数表达式](http://benalman.com/news/2010/11/immediately-invoked-function-expression/)来创建这个私有作用域。当调用
    IIFE 时，*global* 的值将设置为当前全局作用域（即 *window*）。
- en: 'github code: [https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: github 代码：[https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Inside of the IIFE we setup a reference to the *window* and *document* object
    (i.e. *doc*) to speed up the access to these objects inside of the IIFE.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*在 IIFE 中，我们设置了对 *window* 和 *document* 对象（即 *doc*）的引用，以加快在 IIFE 中访问这些对象的速度。'
- en: 12.3 Create the *dom()* and *GetOrMakeDom()* functions exposing *dom()* and
    *GetOrMakeDom.prototype* to the global scope
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.3 创建 *dom()* 和 *GetOrMakeDom()* 函数，将 *dom()* 和 *GetOrMakeDom.prototype* 暴露给全局作用域
- en: Just like jQuery we are going to create a function that will return a chain-able,
    wrapped set (i.e. custom array like object) of DOM nodes (e.g. *{0:ELEMENT_NODE,1:ELEMENT_NODE,length:2}*)
    based on the parameters sent into the function. In the code below I setup the
    *dom()* function and parameters which get passed on to the *GetOrMakeDOM* constructor
    function that when invoked will return the object containing the DOM nodes, that
    is then returned by from *dom()*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 jQuery 一样，我们将创建一个函数，该函数将根据传入的参数返回一个可链式调用的包装集合（即自定义类似数组的对象）的 DOM 节点（例如 *{0:ELEMENT_NODE,1:ELEMENT_NODE,length:2}*）。在下面的代码中，我设置了
    *dom()* 函数和传递给 *GetOrMakeDOM* 构造函数的参数，当调用时将返回包含 DOM 节点的对象，然后由 *dom()* 返回。
- en: 'github code: [https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: github 代码：[https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**In order for the *dom()* function to be accessed/called from outside of the
    private scope setup by the IIFE we have to expose the dom function (i.e. create
    a reference) to the global scope. This is done by creating a property in the global
    scope called *dom* and pointing that property to the local *dom()* function. When
    *dom* is accessed from the global scope it will point to my locally scoped *dom()*
    function. In the code below doing, *global.dom = dom;* does the trick.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**为了使*dom()*函数能够从IIFE设置的私有范围外部访问/调用，我们必须将dom函数暴露（即创建引用）到全局范围。这是通过在全局范围中创建一个名为*dom*的属性并将该属性指向本地*dom()*函数来完成的。当从全局范围访问*dom*时，它将指向我本地作用域的*dom()*函数。在下面的代码中，*global.dom
    = dom;*就是这样做的技巧。'
- en: 'github code: [https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: github 代码：[https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The last thing we need to do is expose the *GetOrMakeDom.prototype* property
    to the global scope. Not unlike jQuery (e.g. *jQuery.fn*) we are simply going
    to provide a shortcut reference from *dom.fn* to *GetOrMakeDOM.prototype*. This
    is shown in the code below.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一件事是将*GetOrMakeDom.prototype*属性暴露给全局范围。与jQuery类似（例如*jQuery.fn*），我们只需提供一个从*dom.fn*到*GetOrMakeDOM.prototype*的快捷引用。下面的代码显示了这一点。
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Now anything attached to the *dom.fn* is actually a property of the *GetOrMakeDOM.prototype*
    object and is inherited during property lookup for any object instance created
    from the *GetOrMakeDOM* constructor function.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在，任何附加到*dom.fn*的内容实际上都是*GetOrMakeDOM.prototype*对象的属性，并且在为从*GetOrMakeDOM*构造函数创建的任何对象实例进行属性查找时继承。'
- en: Notes
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The *getOrMakeDom* function is invoked with the *new* operator. Make sure you
    [understand](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/new)
    what happens when a function is invoked using the *new* operator.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*new*运算符调用*getOrMakeDom*函数。确保你[了解](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new)当使用*new*运算符调用函数时会发生什么。
- en: 12.4 Create optional context paramater passed to *dom()*
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.4 创建传递给*dom()*的可选上下文参数
- en: When *dom()* is invoked, it also invokes the *GetOrMakeDom* function passing
    it the parameters that are sent to *dom()*. When the *GetOrMakeDOM* constructor
    is invoked the first thing we need to do is determine context. The context for
    working with the DOM can be set by passing a selector string used to select a
    node or a node reference itself. If its not obvious the purpose of passing a context
    to the *dom()* function provides the ability to limit the search for element nodes
    to a specific branch of the DOM tree. This is very similar, almost identical,
    to the second parameter passed to the *jQuery* or *$* function. In the code below
    I default the context to the current document found in the global scope. If a
    context parameter is available, I determine what it is (i.e. string or node) and
    either make the node passed in the context or select a node via *querySelectorAll()*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用*dom()*时，它还会调用*GetOrMakeDom*函数，并将发送给*dom()*的参数传递给它。当调用*GetOrMakeDOM*构造函数时，我们需要做的第一件事是确定上下文。用于处理DOM的上下文可以通过传递用于选择节点的选择器字符串或节点引用本身来设置。如果不明显，将上下文传递给*dom()*函数的目的是提供将元素节点搜索限制到DOM树的特定分支的能力。这与传递给*jQuery*或*$*函数的第二个参数非常相似，几乎相同。在下面的代码中，我将上下文默认设置为全局范围中找到的当前文档。如果有上下文参数可用，我会确定它是什么（即字符串还是节点），然后要么使传递给上下文的节点，要么通过*querySelectorAll()*选择节点。
- en: 'github code: [https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: github 代码：[https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With the *context* parameter logic setup we can next add the logic required
    to deal with the *params* parameter used to actually select or created nodes.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置*context*参数逻辑，我们可以接下来添加处理*params*参数所需的逻辑，以实际选择或创建节点。
- en: 12.5 Populate object with DOM node references based on *params* and return object
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.5 根据*params*填充对象并返回DOM节点引用的对象
- en: 'The *params* parameter passed to *dom()*, then on to the *getOrMakeDom()* varies
    in the type of parameter that can be passed. Similar to jQuery the type''s of
    value''s passed can be any one of the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给*dom()*的*params*参数，然后传递给*getOrMakeDom()*，可以传递的参数类型不同。与jQuery类似，传递的值的类型可以是以下任何一种：
- en: css selector string (e.g. *dom('body')*)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: css 选择器字符串（例如*dom('body')*）
- en: html string (e.g. *dom('<p>Hellow</p><p> World!</p>')*)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: html字符串（例如*dom('<p>你好</p><p> 世界！</p>')*）
- en: '*Element* node (e.g. *dom(document.body)*)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Element* 节点 (例如 *dom(document.body)*)'
- en: array of element nodes (e.g. *dom([document.body])*)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素节点数组 (例如 *dom([document.body])*)
- en: a *NodeList* (e.g. *dom(document.body.children)*)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 *NodeList* (例如 *dom(document.body.children)*)
- en: a *HTMLcollection* (e.g. *dom(document.all)*)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 *HTMLcollection* (例如 *dom(document.all)*)
- en: a *dom()* object itself. (e.g. *dom(dom())*)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 *dom()* 对象本身。 (例如 *dom(dom())*)
- en: The result of passing *params* is the construction of a chain-able object containing
    references to nodes (e.g. *{0:ELEMENT_NODE,1:ELEMENT_NODE,length:2})* either in
    the DOM or in a document fragment. Lets examine how each of the above parameters
    can be used to produce an object containing node references.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 传递 *params* 的结果是构造一个包含节点引用的可链式对象 (例如 *{0:ELEMENT_NODE,1:ELEMENT_NODE,length:2})*，无论是在
    DOM 中还是在文档片段中。 让我们看看如何使用上述每个参数来生成包含节点引用的对象。
- en: The logic to permit such a wide variety of parameter types is shown below in
    the code and starts with a simple check to verify that *params* is not *undefined*,
    an empty string, or a string with empty spaces. If this is the case we add a *length*
    property with a value of *0* to the object constructed from calling *GetOrMakeDOM*
    and return the object so the execution of the function ends. If *params* is not
    a false ([or false like](http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/))
    value the execution of the function continues.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 允许如此多种参数类型的逻辑如下所示，并从简单检查 *params* 是否为 *undefined*、空字符串或带有空格的字符串开始。 如果是这种情况，我们向从调用
    *GetOrMakeDOM* 构造的对象添加一个值为 *0* 的 *length* 属性，并返回该对象，以便函数的执行结束。 如果 *params* 不是假值
    ([或类似假值](http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/))，则函数的执行继续。
- en: Next the *params* value, if a string, is checked to see if contains HTML. If
    the string contains HTML then a [document fragmen](https://developer.mozilla.org/en-US/docs/DOM/DocumentFragment)t
    is created and the string is used as the *innerHTML* value for a *<div>* contained
    in the document fragment so that the string is converted to a DOM structure. With
    the html string converted to a node tree, the structure is looped over accessing
    top level nodes, and references to these nodes are passed to the object being
    created by *GetOrMakeDom*. If the string does not contain HTML execution of the
    function continues.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 *params* 值，如果是字符串，则检查是否包含 HTML。 如果字符串包含 HTML，则创建一个 [文档片段](https://developer.mozilla.org/en-US/docs/DOM/DocumentFragment)，并将字符串用作包含在文档片段中的
    *<div>* 的 *innerHTML* 值，以便将字符串转换为 DOM 结构。 将 HTML 字符串转换为节点树后，循环访问顶级节点，并将对这些节点的引用传递给
    *GetOrMakeDom* 创建的对象。 如果字符串不包含 HTML，则继续执行函数。
- en: The next check simply verifies if *params* is a reference to a single node and
    if it is we wrap a reference to it up in an object and return it other wise at
    we are pretty sure the *params* value is a [html collection](https://developer.mozilla.org/en-US/docs/DOM/HTMLCollection),
    [node list](https://developer.mozilla.org/en-US/docs/DOM/NodeList), array, string
    [selector](http://www.quirksmode.org/css/contents.html), or an object created
    from *dom()*. If its a string selector, a node list is created by calling the
    *queryselectorAll()* method on the *currentContext*. If its not a string selector
    we loop over the html collection, node list, array, or object extracting the node
    references and using the references as values contained in the object sent back
    from calling the *GetOrMakeDom*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个检查简单地验证 *params* 是否是对单个节点的引用，如果是，则将其包装在对象中并返回，否则我们可以确定 *params* 的值是 [HTML
    集合](https://developer.mozilla.org/en-US/docs/DOM/HTMLCollection)、[节点列表](https://developer.mozilla.org/en-US/docs/DOM/NodeList)、数组、字符串
    [选择器](http://www.quirksmode.org/css/contents.html) 或从 *dom()* 创建的对象。 如果它是一个字符串选择器，则通过在
    *currentContext* 上调用 *queryselectorAll()* 方法创建一个节点列表。 如果它不是字符串选择器，我们遍历 HTML 集合、节点列表、数组或对象，提取节点引用，并使用这些引用作为从调用
    *GetOrMakeDom* 返回的对象中的值。
- en: All of this logic inside of *GetOrMakeDom()* function can be a bit overwhelming
    just realize that the point of the constructor function is to construct an object
    containing references to nodes (e.g. *{0:ELEMENT_NODE,1:ELEMENT_NODE,length:2}*)
    and returns this object to *dom()*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*GetOrMakeDom()* 函数内的所有逻辑可能有点压倒性，只需意识到构造函数的目的是构造一个包含节点引用的对象 (例如 *{0:ELEMENT_NODE,1:ELEMENT_NODE,length:2}*)
    并将此对象返回给 *dom()*。'
- en: 'github code: [https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 'github 代码: [https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)'
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 12.6 Create *each()* method and make it a chainable method
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.6 创建 *each()* 方法并使其成为可链式调用的方法
- en: When we invoke *dom()* we can access anything attached to *dom.fn* by way of
    prototypical inheritance. (e.g. *dom().each())*. Not unlike jQuery methods attached
    to *dom.fn* operate on the object created from the *GetOrMakeDom* constructor
    function. The code below setups the *each()* method.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用 *dom()* 时，我们可以通过原型继承访问任何附加到 *dom.fn* 的内容。 （例如 *dom().each()*）。与 jQuery
    方法附加到 *dom.fn* 类似，操作 *GetOrMakeDom* 构造函数创建的对象。下面的代码设置了 *each()* 方法。
- en: 'github code: [https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: github 代码：[https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you might expect the *each()* method takes a callback function as a parameter
    and invokes the function (setting the *this* value to the element node object
    with *call()*) for each node element in the *getOrMakeDom* object instance. The
    *this* value inside of the *each()* function is a reference to the *getOrMakeDom*
    object instance (e.g. *{0:ELEMENT_NODE,1:ELEMENT_NODE,length:2}*).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所预期的那样，*each()* 方法接受一个回调函数作为参数，并为 *getOrMakeDom* 对象实例中的每个节点元素调用该函数（使用 *call()*
    将 *this* 值设置为元素节点对象）。*each()* 函数内部的 *this* 值是对 *getOrMakeDom* 对象实例的引用（例如 *{0:ELEMENT_NODE,1:ELEMENT_NODE,length:2}*）。
- en: When a method does not return a value (e.g. *dom().length* returns a length)
    its possible to allow method chaning by simply returning the object the method
    belongs too instead of a specific value. Basically, we are returning the *GetOrMakeDom*
    object so another method can be called on this instance of the object. In the
    code below I would like the *each()* method to be chainable, meaning more methods
    can be called after calling *each()*, so I simply return *this*. The *this* in
    the code below is the object instance created from calling the *getOrMakeDom*
    function.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当方法不返回值时（例如 *dom().length* 返回长度），允许方法链接是可能的，只需简单地返回方法所属的对象而不是特定的值。基本上，我们返回 *GetOrMakeDom*
    对象，这样另一个方法就可以在该对象的实例上调用。在下面的代码中，我希望 *each()* 方法可以链接，意味着在调用 *each()* 后可以调用更多方法，所以我只需返回
    *this*。下面代码中的 *this* 是从调用 *getOrMakeDom* 函数创建的对象实例。
- en: 'github code: [https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: github 代码：[https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*## 12.7 Create *html()*, *append()*, & *text()* methods'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*## 12.7 创建 *html()*, *append()*, 和 *text()* 方法'
- en: 'With the core *each()* method created and implicit iteration avaliable we can
    now build out a few *dom()* methods that act on the nodes we select from an HTML
    document or create using document fragments. The three methods we are going to
    create are:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有了核心*each()*方法的创建和隐式迭代的支持，我们现在可以构建一些*dom()*方法，以便操作我们从 HTML 文档中选择的节点，或者使用文档片段创建的节点。我们将要创建的三种方法是：
- en: '*html()* / *html(''html string'')*'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*html()* / *html(''html string'')*'
- en: '*text()* / *text(''text string'')*'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*text()* / *text(''text string'')*'
- en: '*append(''html | text | dom() | nodelist/HTML collection | node | array'')*'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*append(''html | text | dom() | nodelist/HTML collection | node | array'')*'
- en: The *html()* and *text()* methods follow a very similar pattern. If the method
    is called with a parameter value we loop (using *dom.fn.each()* for implicit iteration
    ) over each element node in the *getOrMakeDom* object instance setting either
    the *innerHTML* value or *textContent* value. If no parameter is sent we simply
    return the *innerHTML* or *textContent* value for the first element node in the
    *getOrMakeDom* object instance. Below you will see this logic coded.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*html()* 和 *text()* 方法遵循非常相似的模式。如果方法带有参数值，我们会循环遍历（使用 *dom.fn.each()* 进行隐式迭代）*getOrMakeDom*
    对象实例中的每个元素节点，设置 *innerHTML* 值或 *textContent* 值。如果未发送参数，我们简单地返回 *getOrMakeDom*
    对象实例中第一个元素节点的 *innerHTML* 或 *textContent* 值。下面你将看到这个逻辑的代码化。'
- en: 'github code: [https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: github 代码：[https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The *append()* method leveraging *insertAdjacentHTML* will take a an html string,
    text string, *dom()* object, nodelist/HTML collection a single node or array of
    nodes and appends it to the nodes selected.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*append()* 方法利用 *insertAdjacentHTML* 将接受一个 html 字符串、文本字符串、*dom()* 对象、nodelist/HTML
    集合、单个节点或节点数组，并将其追加到所选节点。'
- en: 'github code: [https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: github 代码：[https://github.com/codylindley/domjs/blob/master/builds/dom.js](https://github.com/codylindley/domjs/blob/master/builds/dom.js)
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 12.8 Taking dom.js for a spin
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.8 **运用 dom.js**
- en: During the creation of [dom.js I created some very simple qunit tests](https://github.com/codylindley/domjs/tree/master/test)
    that we are now going to run outside of the testing framework. However, you can
    also [run the testing framework](https://github.com/codylindley/domjs/blob/master/test/index.html)
    to see dom.js in action. The follow code demostrates the code create in this chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建[dom.js我创建了一些非常简单的qunit测试](https://github.com/codylindley/domjs/tree/master/test)，我们现在将在测试框架之外运行这些测试。然而，你也可以[运行测试框架](https://github.com/codylindley/domjs/blob/master/test/index.html)来看dom.js的运行情况。以下代码演示了本章中创建的代码。
- en: 'live code: [http://jsfiddle.net/domenlightenment/7aqKm](http://jsfiddle.net/domenlightenment/7aqKm)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/7aqKm](http://jsfiddle.net/domenlightenment/7aqKm)
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 12.9 Summary & continuing on with dom.js
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.9 总结 & 继续dom.js
- en: This chapter has been about creating a foundation to a jQuery like DOM library.
    If you'd like to continue studying the building blocks to a jQuery-like DOM library
    I would suggest checking out [hippo.js](https://github.com/codylindley/hippojs),
    which is an exercise in re-creating the jQuery DOM methods for modern browsers.
    Both [dom.js](https://github.com/codylindley/domjs) and [hippo.js](https://github.com/codylindley/hippojs)
    make use of [grunt](http://gruntjs.com/), [QUnit](http://qunitjs.com/), and [JS
    Hint](http://jshint.com/) which I highly recommend looking into if building your
    own JavaScript libraries is of interest. In addition to the fore mentioned developer
    tools I highly recommending reading, "[Designing Better JavaScript APIs](http://coding.smashingmagazine.com/2012/10/09/designing-javascript-apis-usability/)".
    Now go build something for the DOM.*****
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要是关于创建类似于jQuery的DOM库的基础。如果你想继续学习构建类似于jQuery的DOM库的基础知识，我建议查看[hippo.js](https://github.com/codylindley/hippojs)，这是一个重新为现代浏览器创建jQuery
    DOM方法的练习。[dom.js](https://github.com/codylindley/domjs)和[hippo.js](https://github.com/codylindley/hippojs)都使用了[grunt](http://gruntjs.com/)、[QUnit](http://qunitjs.com/)和[JS
    Hint](http://jshint.com/)，如果你对构建自己的JavaScript库感兴趣，我强烈推荐你研究一下这些工具。除了上述开发工具，我还强烈建议阅读《[设计更好的JavaScript
    API](http://coding.smashingmagazine.com/2012/10/09/designing-javascript-apis-usability/)》。现在去为DOM构建一些东西吧。
