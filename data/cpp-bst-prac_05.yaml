- en: Considering Maintainability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑可维护性
- en: Considering Maintainability
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑可维护性
- en: Avoid Compiler Macros
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免使用编译器宏
- en: Compiler definitions and macros are replaced by the preprocessor before the
    compiler is ever run. This can make debugging very difficult because the debugger
    doesn't know where the source came from.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器定义和宏在编译器运行之前由预处理器替换。这可能会使调试变得非常困难，因为调试器不知道源代码的来处。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Consider Avoiding Boolean Parameters
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑避免布尔参数
- en: They do not provide any additional meaning while reading the code. You can either
    create a separate function that has a more meaningful name, or pass an enumeration
    that makes the meaning more clear.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 它们在阅读代码时不提供任何额外的含义。您可以创建一个具有更有意义名称的单独函数，或者传递一个使含义更清晰的枚举。
- en: See [http://mortoray.com/2015/06/15/get-rid-of-those-boolean-function-parameters/](http://mortoray.com/2015/06/15/get-rid-of-those-boolean-function-parameters/)
    for more information.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [http://mortoray.com/2015/06/15/get-rid-of-those-boolean-function-parameters/](http://mortoray.com/2015/06/15/get-rid-of-those-boolean-function-parameters/)
    获取更多信息。
- en: Avoid Raw Loops
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免使用原始循环
- en: Know and understand the existing C++ standard algorithms and put them to use.
    See [C++ Seasoning](https://www.youtube.com/watch?v=qH6sSOr-yk8) for more details.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 了解并掌握现有的 C++ 标准算法，并将它们应用起来。详情请参见 [C++ Seasoning](https://www.youtube.com/watch?v=qH6sSOr-yk8)。
- en: Never Use `assert` With Side Effects
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 永远不要在带有副作用的情况下使用`assert`
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `assert()` will be removed in release builds which will prevent the `set_value`
    call from every happening.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert()` 将在发布构建中被移除，这将阻止`set_value` 调用的发生。'
- en: So while the second version is uglier, the first version is simply not correct.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，虽然第二个版本更加丑陋，但第一个版本简直是不正确的。
- en: Properly Utilize 'override' and 'final'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正确地利用 'override' 和 'final'
- en: These keywords make it clear to other developers how virtual functions are being
    utilized, can catch potential errors if the signature of a virtual function changes,
    and can possibly [hint to the compiler](http://stackoverflow.com/questions/7538820/how-does-the-compiler-benefit-from-cs-new-final-keyword)
    of optimizations that can be performed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些关键词可以让其他开发人员清楚地了解虚拟函数的使用方式，如果虚拟函数的签名发生变化，它们可以捕获潜在的错误，并且可能会向编译器[提示](http://stackoverflow.com/questions/7538820/how-does-the-compiler-benefit-from-cs-new-final-keyword)可以执行的优化。
