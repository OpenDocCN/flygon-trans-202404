- en: ImpCEvalFunEvaluation Function for Imp
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ImpCEvalFunEvaluation Function for Imp
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A Broken Evaluator
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个破碎的评估器
- en: '[PRE1]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here was our first try at an evaluation function for commands,
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我们为命令编写的评估函数的第一次尝试，
- en: omitting WHILE.
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 省略 WHILE。
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As we remarked in chapter [Imp](Imp.html), in a traditional functional
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如我们在章节 [Imp](Imp.html) 中所述，在传统的功能性
- en: programming language like ML or Haskell we could write the WHILE
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: programming language like ML or Haskell we could write the WHILE
- en: 'case as follows:'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'case as follows:'
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Coq doesn''t accept such a definition (Error: Cannot guess decreasing argument
    of fix) because the function we want to'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Coq 不接受这样的定义（错误：无法猜测 fix 的递减参数），因为我们想要的函数
- en: define is not guaranteed to terminate. Indeed, the changed
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义不能保证终止。实际上，改变
- en: ceval_step1 function applied to the loop program from Imp.v
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ceval_step1 function applied to the loop program from Imp.v
- en: would never terminate. Since Coq is not just a functional
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 永远不会终止。由于 Coq 不仅仅是一个功能性的
- en: programming language, but also a consistent logic, any potentially
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: programming language, but also a consistent logic, any potentially
- en: non-terminating function needs to be rejected. Here is an
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非终止函数需要被拒绝。这里是一个
- en: invalid(!) Coq program showing what would go wrong if Coq allowed
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无效的(!) Coq 程序，展示了如果 Coq 允许
- en: 'non-terminating recursive functions:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非终止递归函数会出现什么问题：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That is, propositions like False would become
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 换句话说，像 False 这样的命题会变成
- en: provable (e.g., loop_false 0 would be a proof of False), which
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: provable (e.g., loop_false 0 would be a proof of False), which
- en: would be a disaster for Coq's logical consistency.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 Coq 的逻辑一致性将是一场灾难。
- en: Thus, because it doesn't terminate on all inputs, the full version
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，因为它不会在所有输入上终止，完整版本
- en: of ceval_step1 cannot be written in Coq — at least not without
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ceval_step1 的情况不能在 Coq 中写出 — 至少不会终止
- en: one additional trick...
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个额外的技巧...
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :='
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fixpoint ceval_step2 (st : state) (c : com) (i : nat) : state :='
- en: match i with
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: match i with
- en: '| O ⇒ empty_state'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '| O ⇒ empty_state'
- en: '| S i'' ⇒'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '| S i'' ⇒'
- en: match c with
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: match c with
- en: '| SKIP ⇒'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '| SKIP ⇒'
- en: st
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: st
- en: '| l ::= a[1] ⇒'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '| l ::= a[1] ⇒'
- en: t_update st l (aeval st a[1])
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: t_update st l (aeval st a[1])
- en: '| c[1] ;; c[2] ⇒'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '| c[1] ;; c[2] ⇒'
- en: let st' := ceval_step2 st c[1] i' in
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: let st' := ceval_step2 st c[1] i' in
- en: ceval_step2 st' c[2] i'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ceval_step2 st' c[2] i'
- en: '| IFB b THEN c[1] ELSE c[2] FI ⇒'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '| IFB b THEN c[1] ELSE c[2] FI ⇒'
- en: if (beval st b)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: if (beval st b)
- en: then ceval_step2 st c[1] i'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 ceval_step2 st c[1] i'
- en: else ceval_step2 st c[2] i'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: else ceval_step2 st c[2] i'
- en: '| WHILE b[1] DO c[1] END ⇒'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '| WHILE b[1] DO c[1] END ⇒'
- en: if (beval st b[1])
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: if (beval st b[1])
- en: then let st' := ceval_step2 st c[1] i' in
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: then let st' := ceval_step2 st c[1] i' in
- en: ceval_step2 st' c i'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ceval_step2 st' c i'
- en: else st
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: else st
- en: end
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: end。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Fixpoint ceval_step3 (st : state) (c : com) (i : nat)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fixpoint ceval_step3 (st : state) (c : com) (i : nat)'
- en: ': option state :='
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ': option state :='
- en: match i with
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: match i with
- en: '| O ⇒ None'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '| O ⇒ None'
- en: '| S i'' ⇒'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '| S i'' ⇒'
- en: match c with
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: match c with
- en: '| SKIP ⇒'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '| SKIP ⇒'
- en: Some st
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Some st
- en: '| l ::= a[1] ⇒'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '| l ::= a[1] ⇒'
- en: Some (t_update st l (aeval st a[1]))
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Some (t_update st l (aeval st a[1]))
- en: '| c[1] ;; c[2] ⇒'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '| c[1] ;; c[2] ⇒'
- en: match (ceval_step3 st c[1] i') with
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: match (ceval_step3 st c[1] i') with
- en: '| Some st'' ⇒ ceval_step3 st'' c[2] i'''
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some st'' ⇒ ceval_step3 st'' c[2] i'''
- en: '| None ⇒ None'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '| None ⇒ None'
- en: end
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: '| IFB b THEN c[1] ELSE c[2] FI ⇒'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '| IFB b THEN c[1] ELSE c[2] FI ⇒'
- en: if (beval st b)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: if (beval st b)
- en: then ceval_step3 st c[1] i'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: then ceval_step3 st c[1] i'
- en: else ceval_step3 st c[2] i'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: else ceval_step3 st c[2] i'
- en: '| WHILE b[1] DO c[1] END ⇒'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '| WHILE b[1] DO c[1] END ⇒'
- en: if (beval st b[1])
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: if (beval st b[1])
- en: then match (ceval_step3 st c[1] i') with
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: then match (ceval_step3 st c[1] i') with
- en: '| Some st'' ⇒ ceval_step3 st'' c i'''
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some st'' ⇒ ceval_step3 st'' c i'''
- en: '| None ⇒ None'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '| None ⇒ None'
- en: end
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: else Some st
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: else Some st
- en: end
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notation "'LETOPT' x <== e1 'IN' e2"
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Notation "'LETOPT' x <== e1 'IN' e2"
- en: := (match e[1] with
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: := (match e[1] with
- en: '| Some x ⇒ e[2]'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some x ⇒ e[2]'
- en: '| None ⇒ None'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '| None ⇒ None'
- en: end)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: end)
- en: (right associativity, at level 60).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: (右结合性，在级别 60)。
- en: 'Fixpoint ceval_step (st : state) (c : com) (i : nat)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fixpoint ceval_step (st : state) (c : com) (i : nat)'
- en: ': option state :='
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: ': option state :='
- en: match i with
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: match i with
- en: '| O ⇒ None'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '| O ⇒ None'
- en: '| S i'' ⇒'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '| S i'' ⇒'
- en: match c with
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: match c with
- en: '| SKIP ⇒'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '| SKIP ⇒'
- en: Some st
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Some st
- en: '| l ::= a[1] ⇒'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '| l ::= a[1] ⇒'
- en: Some (t_update st l (aeval st a[1]))
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Some (t_update st l (aeval st a[1]))
- en: '| c[1] ;; c[2] ⇒'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '| c[1] ;; c[2] ⇒'
- en: LETOPT st' <== ceval_step st c[1] i' IN
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: LETOPT st' <== ceval_step st c[1] i' IN
- en: ceval_step st' c[2] i'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: ceval_step st' c[2] i'
- en: '| IFB b THEN c[1] ELSE c[2] FI ⇒'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '| IFB b THEN c[1] ELSE c[2] FI ⇒'
- en: if (beval st b)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: if (beval st b)
- en: then ceval_step st c[1] i'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: then ceval_step st c[1] i'
- en: else ceval_step st c[2] i'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: else ceval_step st c[2] i'
- en: '| WHILE b[1] DO c[1] END ⇒'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '| WHILE b[1] DO c[1] END ⇒'
- en: if (beval st b[1])
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: if (beval st b[1])
- en: then LETOPT st' <== ceval_step st c[1] i' IN
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: then LETOPT st' <== ceval_step st c[1] i' IN
- en: ceval_step st' c i'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ceval_step st' c i'
- en: else Some st
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: else Some st
- en: end
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: end
- en: end.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: end。
- en: Definition test_ceval (st:state) (c:com) :=
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 test_ceval (st:state) (c:com) :=
- en: match ceval_step st c 500 with
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: match ceval_step st c 500 with
- en: '| None    ⇒ None'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '| None    ⇒ None'
- en: '| Some st ⇒ Some (st X, st Y, st Z)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '| Some st ⇒ Some (st X, st Y, st Z)'
- en: end.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: end。
- en: (* Compute      (test_ceval empty_state          (X ::= ANum 2;;           IFB BLe (AId X) (ANum 1)
                THEN Y ::= ANum 3             ELSE Z ::= ANum 4           FI)).    ====>
          Some (2, 0, 4)   *)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: (* 计算 （test_ceval empty_state （X ::= ANum 2;; IFB BLe （AId X）（ANum 1） THEN Y
    ::= ANum 3 ELSE Z ::= ANum 4 FI））。 ===》 Some（2，0，4） *)
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Definition pup_to_n : com'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: pup_to_n 的定义：com
- en: (* REPLACE THIS LINE WITH ":= _your_definition_ ." *). Admitted.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: (* 用“:= _your_definition_.” 替换此行 *）。已证明。
- en: '(*  Example pup_to_n_1 :   test_ceval (t_update empty_state X 5) pup_to_n   = Some (0, 15, 0).
    Proof. reflexivity. Qed. *)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: (* 示例 pup_to_n_1 ： test_ceval（t_update empty_state X 5）pup_to_n = Some（0，15，0）。
    证明。 reflexivity。 Qed。 *)
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: (* FILL IN HERE *)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写 *)
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Relational vs. Step-Indexed Evaluation
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系与步骤索引评估
- en: As for arithmetic and boolean expressions, we'd hope that
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 至于算术和布尔表达式，我们希望
- en: the two alternative definitions of evaluation would actually
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 两种替代定义的评估是否实际上
- en: amount to the same thing in the end.  This section shows that this
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终归结于同一件事。本节显示了这一点
- en: is the case.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是情况。
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Exercise: 4 stars (ceval_step__ceval_inf)'
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：4 星（ceval_step__ceval_inf）
- en: Write an informal proof of ceval_step__ceval, following the
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按照非正式证明 ceval_step__ceval 的方式写出证明
- en: usual template.  (The template for case analysis on an inductively
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 常规模板。（关于对归纳的情况分析的模板
- en: defined value should look the same as for induction, except that
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义的值看起来应该与归纳相同，只是
- en: there is no induction hypothesis.)  Make your proof communicate
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有归纳假设。）确保你的证明清晰易懂
- en: the main ideas to a human reader; do not simply transcribe the
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主要思想传达给读者；不要简单地转录
- en: steps of the formal proof.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正式证明的步骤。
- en: (* FILL IN HERE *)
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (* 在此填写 *)
- en: ☐
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: '[PRE12]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Exercise: 3 stars, recommended (ceval__ceval_step)'
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：3 星，建议（ceval__ceval_step）
- en: Finish the following proof.  You'll need ceval_step_more in a
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成下面的证明。 你将需要在几个地方使用 ceval_step_more
- en: few places, as well as some basic facts about ≤ and plus.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些基本事实，以及一些关于 ≤ 和 plus 的基本事实。
- en: '[PRE13]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: ☐
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: '[PRE14]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Determinism of Evaluation Again
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 再次评估的确定性
- en: Using the fact that the relational and step-indexed definition of
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 利用关系和步数索引定义的事实
- en: evaluation are the same, we can give a slicker proof that the
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 评估相同，我们可以给出一个更简洁的证明
- en: evaluation *relation* is deterministic.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 评估 *关系* 是确定性的。
- en: '[PRE15]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
