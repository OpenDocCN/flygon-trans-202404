- en: InductionProof by Induction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 归纳法证明
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Require Export Basics.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 需要导出基础知识。
- en: '[PRE1]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Proof by Induction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 归纳证明
- en: We proved in the last chapter that 0 is a neutral element
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在上一章证明了0是一个中性元素
- en: for + on the left, using an easy argument based on
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于+在左边，使用基于简单论据的简单论证
- en: simplification.  We also observed that proving the fact that it is
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化。我们还观察到证明它是事实
- en: also a neutral element on the *right*...
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也是一个中性元素在*右边*...
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '... can''t be done in the same simple way.  Just applying'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '... 不能以同样简单的方式完成。只需应用'
- en: reflexivity doesn't work, since the n in n + 0 is an arbitrary
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: reflexivity不起作用，因为n + 0中的n是任意的
- en: unknown number, so the match in the definition of + can't be
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 未知数，因此+的定义中的匹配不能
- en: simplified.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 简化。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And reasoning by cases using destruct n doesn't get us much
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并且通过使用destruct n进行情况推理并不能让我们得到太多
- en: 'further: the branch of the case analysis where we assume n = 0'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步：在假设n = 0的情况分析分支中
- en: goes through fine, but in the branch where n = S n' for some n' we
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进行得很好，但在n = S n'的分支中，我们
- en: get stuck in exactly the same way.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以完全相同的方式陷入困境。
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We could use destruct n' to get one step further, but,
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以使用destruct n'再走一步，但是，
- en: since n can be arbitrarily large, if we just go on like this
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于n可以任意大，如果我们继续这样下去
- en: we'll never finish.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们永远也无法完成。
- en: To prove interesting facts about numbers, lists, and other
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要证明关于数字，列表和其他有趣事实
- en: inductively defined sets, we usually need a more powerful
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在归纳定义的集合中，我们通常需要更强大的
- en: 'reasoning principle: *induction*.'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 情况推理原则：*归纳*。
- en: Recall (from high school, a discrete math course, etc.) the
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回想（从高中，离散数学课程等）这个
- en: '*principle of induction over natural numbers*: If P(n) is some'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*自然数归纳原理*：如果P(n)是某个'
- en: proposition involving a natural number n and we want to show
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 涉及自然数n的命题，我们想要展示
- en: 'that P holds for all numbers n, we can reason like this:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于所有数字n，我们可以这样推理：
- en: show that P(O) holds;
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表明P(O)成立；
- en: show that, for any n', if P(n') holds, then so does P(S n');
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表明，对于任何n'，如果P(n')成立，则P(S n')也成立；
- en: conclude that P(n) holds for all n.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 得出结论，对于所有n，P(n)都成立。
- en: 'In Coq, the steps are the same: we begin with the goal of proving'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Coq中，步骤是相同的：我们从证明目标开始
- en: P(n) for all n and break it down (by applying the induction
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: P(n)对于所有n并将其分解（通过应用归纳
- en: 'tactic) into two separate subgoals: one where we must show P(O)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 策略）成两个单独的子目标：一个我们必须展示P(O)
- en: and another where we must show P(n') → P(S n').  Here's how
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个我们必须展示P(n') → P(S n')的地方。这是如何
- en: 'this works for the theorem at hand:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这对于手头的定理有效：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Like destruct, the induction tactic takes an as...
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与destruct类似，归纳策略需要一个as...
- en: clause that specifies the names of the variables to be introduced
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指定要引入的变量的名称的子句
- en: in the subgoals.  Since there are two subgoals, the as... clause
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在子目标中。由于有两个子目标，as...子句
- en: has two parts, separated by |.  (Strictly speaking, we can omit
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有两部分，用|分隔。（严格来说，我们可以省略
- en: the as... clause and Coq will choose names for us.  In practice,
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: as...子句，Coq将为我们选择名称。实际上，
- en: this is a bad idea, as Coq's automatic choices tend to be
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个坏主意，因为Coq的自动选择往往是
- en: confusing.)
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 令人困惑。）
- en: In the first subgoal, n is replaced by 0.  No new variables
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第一个子目标中，n被替换为0。没有新变量
- en: are introduced (so the first part of the as... is empty), and
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 被引入（因此as...的第一部分为空），并且
- en: the goal becomes 0 + 0 = 0, which follows by simplification.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目标变为0 + 0 = 0，通过简化得出。
- en: In the second subgoal, n is replaced by S n', and the
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第二个子目标中，n被替换为S n'，而
- en: assumption n' + 0 = n' is added to the context with the name
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设n' + 0 = n'被添加到上下文中，并命名为
- en: IHn' (i.e., the Induction Hypothesis for n').  These two names
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IHn'（即n'的归纳假设）。这两个名称
- en: are specified in the second part of the as... clause.  The goal
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在as...子句的第二部分中指定。目标
- en: in this case becomes (S n') + 0 = S n', which simplifies to
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下变为(S n') + 0 = S n'，简化为
- en: S (n' + 0) = S n', which in turn follows from IHn'.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: S (n' + 0) = S n'，这又是由IHn'得出的。
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: (The use of the intros tactic in these proofs is actually
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （在这些证明中使用intros策略实际上是
- en: redundant.  When applied to a goal that contains quantified
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 冗余。当应用于包含量化的目标时
- en: variables, the induction tactic will automatically move them
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变量，归纳策略将自动移动它们
- en: into the context as needed.)
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据需要将其引入上下文。）
- en: 'Exercise: 2 stars, recommended (basic_induction)'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2星，推荐（basic_induction）
- en: Prove the following using induction. You might need previously
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用归纳证明以下内容。您可能需要先前
- en: proven results.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已经证明的结果。
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ☐
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 2 stars (double_plus)'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2星（double_plus）
- en: 'Consider the following function, which doubles its argument:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑以下函数，它将其参数加倍：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use induction to prove this simple fact about double:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用归纳来证明关于 double 的这个简单事实：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ☐
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 2 stars, optional (evenb_S)'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2星，可选（evenb_S）
- en: One inconveninent aspect of our definition of evenb n is the
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们定义 evenb n 的一个不方便的方面是
- en: recursive call on n - 2. This makes proofs about evenb n
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: n - 2 的递归调用。这使得关于 evenb n 的证明
- en: harder when done by induction on n, since we may need an
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在 n 上归纳时更难，因为我们可能需要一个
- en: induction hypothesis about n - 2. The following lemma gives an
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 n - 2 的归纳假设。以下引理给出了
- en: alternative characterization of evenb (S n) that works better
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: evenb（S n）的另一种更好的特征化
- en: 'with induction:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用归纳：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: ☐
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 1 starM (destruct_induction)'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：1星M（destruct_induction）
- en: Briefly explain the difference between the tactics destruct
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简要解释破坏之间的差异
- en: and induction.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和归纳。
- en: (* FILL IN HERE *)
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （*在这里填写*）
- en: ☐
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Theorem mult_0_plus'' : ∀n m : nat,'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 mult_0_plus'：∀n m：自然数，
- en: (0 + n) * m = n * m.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: （0 + n）* m = n * m。
- en: Proof.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: intros n m.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 n m。
- en: 'assert (H: 0 + n = n). { reflexivity. }'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 断言（H：0 + n = n）。{自反性。}
- en: rewrite → H.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 重写 → H。
- en: reflexivity. Qed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 自反性。Qed。
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Theorem plus_rearrange_firsttry : ∀n m p q : nat,'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 plus_rearrange_firsttry：∀n m p q：自然数，
- en: (n + m) + (p + q) = (m + n) + (p + q).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: （n + m）+（p + q）=（m + n）+（p + q）。
- en: Proof.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: intros n m p q.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 n m p q。
- en: (* We just need to swap (n + m) for (m + n)... seems      like plus_comm should do the trick! *)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: （*我们只需要交换（n + m）为（m + n）...似乎 plus_comm 应该能解决问题！*）
- en: rewrite → plus_comm.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 重写 → plus_comm。
- en: (* Doesn't work...Coq rewrote the wrong plus! *)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: （*不起作用...Coq 重写了错误的加法！*）
- en: Abort.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 放弃。
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Theorem plus_rearrange : ∀n m p q : nat,'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 plus_rearrange：∀n m p q：自然数，
- en: (n + m) + (p + q) = (m + n) + (p + q).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: （n + m）+（p + q）=（m + n）+（p + q）。
- en: Proof.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: intros n m p q.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 n m p q。
- en: 'assert (H: n + m = m + n).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 断言（H：n + m = m + n）。
- en: '{ rewrite → plus_comm. reflexivity. }'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '{重写 → plus_comm。自反性。} '
- en: rewrite → H. reflexivity. Qed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 重写 → H。自反性。Qed。
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Theorem plus_assoc'' : ∀n m p : nat,'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 plus_assoc'：∀n m p：自然数，
- en: n + (m + p) = (n + m) + p.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: n +（m + p）=（n + m）+ p。
- en: Proof. intros n m p. induction n as [| n' IHn']. reflexivity.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。引入 n m p。归纳 n 为 [| n' IHn']。自反性。
- en: simpl. rewrite → IHn'. reflexivity. Qed.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 简化。重写 → IHn'。自反性。Qed。
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Theorem plus_assoc'''' : ∀n m p : nat,'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 plus_assoc''：∀n m p：自然数，
- en: n + (m + p) = (n + m) + p.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: n +（m + p）=（n + m）+ p。
- en: Proof.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: intros n m p. induction n as [| n' IHn'].
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 引入 n m p。归纳 n 为 [| n' IHn']。
- en: '- (* n = 0 *)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '- （*n = 0*）'
- en: reflexivity.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 自反性。
- en: '- (* n = S n'' *)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '- （*n = S n''*）'
- en: simpl. rewrite → IHn'. reflexivity. Qed.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 简化。重写 → IHn'。自反性。Qed。
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: n + (m + p) = (n + m) + p.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: n + (m + p) = (n + m) + p。
- en: '*Proof*: By induction on n.'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*证明*：通过对 n 进行归纳。'
- en: First, suppose n = 0. We must show
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，假设 n = 0。我们必须展示
- en: '[PRE17]'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Next, suppose n = S n', where
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，假设 n = S n'，其中
- en: '[PRE18]'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: (S n') + (m + p) = ((S n') + m) + p.
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: （S n'）+（m + p）=（（S n'）+ m）+ p。
- en: By the definition of +, this follows from
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 + 的定义，这可以从
- en: '[PRE19]'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: More Exercises
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多练习
- en: 'Exercise: 3 stars, recommended (mult_comm)'
  id: totrans-137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：3星，推荐（mult_comm）
- en: Use assert to help prove this theorem.  You shouldn't need to
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用断言来帮助证明这个定理。你不应该需要
- en: use induction on plus_swap.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用对 plus_swap 进行归纳。
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now prove commutativity of multiplication.  (You will probably
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在证明乘法的交换律。（你可能会
- en: need to define and prove a separate subsidiary theorem to be used
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要定义和��明一个单独的辅助定理来使用
- en: in the proof of this one.  You may find that plus_swap comes in
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个证明中。你可能会发现 plus_swap 很有用
- en: handy.)
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方便。）
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: ☐
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 3 stars, optional (more_exercises)'
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：3星，可选（more_exercises）
- en: Take a piece of paper.  For each of the following theorems, first
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 拿一张纸。对于以下每个定理，首先
- en: '*think* about whether (a) it can be proved using only'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*思考*是否（a）只能使用'
- en: simplification and rewriting, (b) it also requires case
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化和重写，（b）还需要案例
- en: analysis (destruct), or (c) it also requires induction.  Write
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分析（破坏），或（c）还需要归纳。写
- en: down your prediction.  Then fill in the proof.  (There is no need
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预测下降。然后填写证明。（没有必要
- en: to turn in your piece of paper; this is just to encourage you to
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提交你的纸张；这只是为了鼓励你
- en: reflect before you hack!)
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在黑客之前反思！）
- en: '[PRE24]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: ☐
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 2 stars, optional (beq_nat_refl)'
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2星，可选（beq_nat_refl）
- en: Prove the following theorem.  (Putting the true on the left-hand
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明以下定理。（将真放在左手边
- en: side of the equality may look odd, but this is how the theorem is
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 等式的一侧可能看起来奇怪，但这就是定理的
- en: stated in the Coq standard library, so we follow suit.  Rewriting
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Coq 标准库中规定，因此我们也遵循。重写
- en: works equally well in either direction, so we will have no problem
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无论以哪种方式陈述，都可以正常工作，因此我们不会遇到问题。
- en: using the theorem no matter which way we state it.)
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用定理无论如何陈述，都可以正常工作。）
- en: '[PRE25]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: ☐
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 2 stars, optional (plus_swap'')'
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：2星，可选（plus_swap'）
- en: The replace tactic allows you to specify a particular subterm to
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 替换策略允许您指定特定的子项
- en: 'rewrite and what you want it rewritten to: replace (t) with (u)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 重写以及你想要它被重写成的内容：用 (t) 替换 (u)
- en: replaces (all copies of) expression t in the goal by expression
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 用表达式 u 替换目标中表达式 t（所有副本）。
- en: u, and generates t = u as an additional subgoal. This is often
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: u，并生成 t = u 作为一个额外的子目标。这通常
- en: useful when a plain rewrite acts on the wrong part of the goal.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个普通的重写作用在目标的错误部分时，这是有用的。
- en: Use the replace tactic to do a proof of plus_swap', just like
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 replace 策略来证明 plus_swap'，就像
- en: plus_swap but without needing assert (n + m = m + n).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要使用断言的 plus_swap（n + m = m + n）。
- en: '[PRE26]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: ☐
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ☐
- en: 'Exercise: 3 stars, recommendedM (binary_commute)'
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习：3 星，推荐（binary_commute）
- en: Recall the incr and bin_to_nat functions that you
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回想一下你写的 incr 和 bin_to_nat 函数
- en: wrote for the binary exercise in the [Basics](Basics.html) chapter.  Prove
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [Basics](Basics.html) 章节中编写的二进制练习中。 证明
- en: 'that the following diagram commutes:'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的图表是可交换的：
- en: '[PRE27]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: (* FILL IN HERE *)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: (* 填充在这里 *)
- en: '[PRE28]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: (* FILL IN HERE *)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: (* 填充在这里 *)
- en: '[PRE29]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
