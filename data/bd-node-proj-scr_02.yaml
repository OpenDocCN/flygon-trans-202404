- en: Express
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Express
- en: Express, the Node framework
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Express，Node 框架
- en: '[Expressjs](http://expressjs.com/) is the web application framework for Node.js
    apps.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[Expressjs](http://expressjs.com/) 是 Node.js 应用程序的 Web 应用程序框架。'
- en: Express is a minimal and flexible node.js web application framework, providing
    a robust set of features for building single and multi-page, and hybrid web applications.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Express 是一个简洁灵活的 Node.js Web 应用程序框架，提供了一套强大的功能，用于构建单页、多页和混合 Web 应用程序。
- en: It has a wealth of [APIs](http://expressjs.com/4x/api.html) and is FAST AS HELL!!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 它拥有丰富的 [API](http://expressjs.com/4x/api.html)，而且速度快得要命！
- en: Express is well known for NOT following after Rails as far as frameworks go,
    but more so it takes after another Ruby framework called [Sinatra](http://www.sinatrarb.com/).
    The concept is simple, the framework gives you enough to get things up and running
    as fast as possible and all without getting in your way.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Express 以不追随 Rails 为框架而闻名，而更多地是借鉴了另一个名为 [Sinatra](http://www.sinatrarb.com/)
    的 Ruby 框架。概念很简单，框架为您提供了足够的东西，让您尽快启动并运行，而且不会妨碍您。
- en: For the most part, Express continues to live up to this statement.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，Express 仍��符合这一说法。
- en: For this workshop, we will be using Express as the core tool for getting a web
    app up and running with a server, route support, error pages, loggers, etc ...
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个研讨会中，我们将使用 Express 作为核心工具，通过服务器、路由支持、错误页面、日志记录器等来快速启动 Web 应用程序。
- en: Install Express
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Express
- en: Installing Express with npm is really easy. Keep in mind that there are two
    parts to Express, the library that runs it and an awesome generator.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 npm 安装 Express 真的很容易。请记住，Express 有两个部分，一个是运行它的库，另一个是一个很棒的生成器。
- en: 'To install Express:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Express：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install the generator:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装生成器：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Generator version
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成器版本
- en: Express 4.0 was recently released and there are some who are not jiggy with
    that. So, npm has a way of specifying the version of generator you install.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最近发布了 Express 4.0，有些人对此并不熟悉。因此，npm 有一种指定要安装的生成器版本的方法。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create a new app
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新应用程序
- en: Crate a new Express app
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的 Express 应用程序
- en: At this point, you should be able to go forth and create an app. In this example,
    we will create a Node.js app with Express framework.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您应该能够继续创建一个应用程序。在这个示例中，我们将使用 Express 框架创建一个 Node.js 应用程序。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Running this command (using `demo-app` as the example), you should see the
    following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令（以 `demo-app` 为例），您应该看到以下内容：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: BOOM! Express takes care of most of the labor. Now, we do what the computer
    says, change directory into the app dir and run `npm install`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！Express 处理了大部分工作。现在，我们按照计算机的指示，切换到应用程序目录并运行 `npm install`。
- en: What's in the app?
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序中有什么？
- en: At this point, you should be able to do a `ls` and see the new structure that
    was created for you.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您应该能够执行 `ls` 命令并查看为您创建的新结构。
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: app.js
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: app.js
- en: 'This is the logical starting point for your app. Some of the things in there,
    lets talk about:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您应用程序的逻辑起点。让我们谈谈其中的一些内容：
- en: 'The following lines, for this type of app, we don''t need them:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种类型的应用程序，我们不需要以下行：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Sets the path to the dir where the view files are located:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 设置视图文件所在目录的路径：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Sets the path to the dir with static assets:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 设置静态资产目录的路径：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Sets the root route for the app:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 设置应用程序的根路由：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: node_modules/
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: node_modules/
- en: This is the dir where all your npm packages will reside.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您所有 npm 包将驻留的目录。
- en: public/
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: public/
- en: Directory for all static assets like images, JavaScript, CSS, fonts, etc ...
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 用于存放所有静态资产（如图像、JavaScript、CSS、字体等）的目录...
- en: views/
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: views/
- en: Where all your layout and view Jade files will live.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的布局和视图 Jade 文件的存放位置。
- en: bin/
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: bin/
- en: There is a single file here, `www` and this is what activate the Node server.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里只有一个文件，`www`，这是激活 Node 服务器的文件。
- en: package.json
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: package.json
- en: 'Project description, scripts manager and the app manifest. Notice the following
    object:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 项目描述、脚本管理器和应用程序清单。注意以下对象：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is the code that allows you to run `npm start` for the app.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是允许您为应用程序运行 `npm start` 的代码。
- en: routes/
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: routes/
- en: This is the directory where you will build out the RESTful routes for your app.
    With a base install there should be two files in there, `index.js` and `users.js`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您将为应用程序构建 RESTful 路由的目录。基本安装应该有两个文件，`index.js` 和 `users.js`。
- en: Routes
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: Fun with Routes
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由乐趣
- en: The `app.VERB()` methods provide the routing functionality in Express, where
    **VERB** is one of the HTTP verbs, such as `app.post()`. Multiple callbacks may
    be given, all are treated equally, and behave just like middleware, with the one
    exception that these callbacks may invoke `next('route')` to bypass the remaining
    route callback(s). This mechanism can be used to perform pre-conditions on a route
    then pass control to subsequent routes when there is no reason to proceed with
    the route matched.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.VERB()` 方法在 Express 中提供路由功能，其中**VERB**是HTTP动词之一，比如`app.post()`。可以提供多个回调函数，所有回调函数都会被平等对待，并且表现得像中间件一样，唯一的例外是这些回调函数可以调用`next(''route'')`来绕过剩余的路由回调函数。这种机制可以用于在路由上执行前提条件，然后在没有继续匹配路由的理由时将控制权传递给后续路由。'
- en: The following snippet illustrates the most simple route definition possible.
    Express translates the path strings to regular expressions, used internally to
    match incoming requests. Query strings are **not** considered when peforming these
    matches, for example `GET /` would match the following route, as would `GET /?name=tobi`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段说明了可能的最简单的路由定义。Express将路径字符串转换为正则表达式，内部用于匹配传入的请求。查询字符串在执行这些匹配时**不**被考虑，例如`GET
    /`将匹配以下路由，`GET /?name=tobi`也将匹配。
- en: '[source](http://expressjs.com/4x/api.html#app.VERB)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[来源](http://expressjs.com/4x/api.html#app.VERB)'
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Lets get into setting up some routes. In the `app.js` file the following line
    is how this comes together:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设置一些路由。在`app.js`文件中，以下行是如何组合在一起的：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What's happening here? Basically, Express is setting the `var` of `routes` to
    require the path and file of `./routes.index`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？基本上，Express将`routes`的`var`设置为需要`./routes.index`的路径和文件。
- en: This var is then used to set the root path of the app
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用这个变量来设置应用程序的根路径
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Another thing we can do is `res.send()` and what ever we put in there will
    get sent directly to the browser. For example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`res.send()`，无论我们放入其中的内容都将直接发送到浏览器。例如：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using the `res.send()` we can do fun things like even send in JSON objects.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`res.send()`，我们可以做一些有趣的事情，比如发送JSON对象。
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This method allows us to then keep all our routes in the `index.js` file if
    needed. There are better ways to address a more complicated routing solution,
    but for the scope of this workshop, this is great.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法允许我们在需要时将所有路由保留在`index.js`文件中。有更好的方法来解决更复杂的路由问题，但在这个研讨会的范围内，这是很好的。
- en: What's in the index.js file?
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`index.js`文件中有什么？'
- en: 'Looking at our `index.js` file you should see the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们的`index.js`文件，你应该看到以下内容：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: router.get
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: router.get
- en: This is the function that will 'get' the URL path of `/`. Then we need to create
    a function that will make a `req` (request) and `res` (response). The is another
    concept of `next` for chaining events would go here as well, but not shown in
    this example.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将'get' URL路径为`/`的函数。然后我们需要创建一个函数，该函数将进行`req`（请求）和`res`（响应）。这里还有一个关于链式事件的`next`的概念，但在这个例子中没有显示。
- en: What is module.exports?
  id: totrans-72
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 什么是module.exports？
- en: This is the object that's actually returned as the result of a require call.
    This is a Node feature, more on this at [nodejs.org/api](http://nodejs.org/api/modules.html#modules_module_exports).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实际作为require调用结果返回的对象。这是Node的一个特性，更多信息请参考[nodejs.org/api](http://nodejs.org/api/modules.html#modules_module_exports)。
- en: Build a new route
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建立一个新的路由
- en: 'Looking at the syntax pattern, if we wanted to add a new route to the app,
    we can simply do something like the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 查看语法模式，如果我们想要向应用程序添加一个新的路由，我们可以简单地做如下操作：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Keep in mind that the value of the URL, `/app`, does not need to be the same
    value of the file itself. If the name of the view was `foo.jade` we could do the
    following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，URL的值`/app`不需要与文件本身的值相同。如果视图的名称是`foo.jade`，我们可以这样做：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It's a route? It's a controller?
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这是一个路由？这是一个控制器？
- en: 'What''s interesting about this is that the route function is containing logic.
    Inside the route is a `res.render` function:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有趣的地方是路由函数包含逻辑。在路由内���有一个`res.render`函数：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the view template we see this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图模板中，我们看到了这个：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'These are two examples of how we can pull data from the ''controller/route''
    and display in the view. In this example we get the HTML output of:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可以从'controller/route'中提取数据并在视图中显示的两个示例。在这个例子中，我们得到了以下HTML输出：
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: All of this seems to be a bleed of concerns as the route may also contain controller
    info? This is true and there is a movement in the community to change the name
    of the dir from `routes` to `controllers`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些似乎是关注点的混合，因为路由也可能包含控制器信息？这是真的，社区中有一个运动，将目录的名称从`routes`更改为`controllers`。
- en: A great example of this can be seen at [Holowaychuk](https://github.com/visionmedia/express/tree/master/examples/mvc)'s
    Express MVC example repo.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子可以在[Holowaychuk](https://github.com/visionmedia/express/tree/master/examples/mvc)的
    Express MVC 示例仓库中看到。
- en: But for the sake of this workshop and consistency, we will keep the current
    convention.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了这个研讨会的完整性和一致性，我们将保持当前的惯例。
- en: 404 errors
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 404 错误
- en: 404 errors?
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 404 错误？
- en: 'Errors are already addressed in Express for you. In the `app.js` file, there
    is the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你，Express 已经处理了错误。在 `app.js` 文件中，有以下内容：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Then in the `views/` dir, there is `errors.jade`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 `views/` 目录中，有一个 `errors.jade` 文件。
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Simple. If you want to customize your 404 page, simply edit this view.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 简单。如果你想自定义你的 404 页面，只需编辑这个视图。
