- en: State and EnvironmentsTuesday, February 28th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态和环境星期二，2月28日
- en: 'A quick example of how mutation can be used:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用突变的一个快速示例：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and compare that to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其与之比较：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is a good idea if you follow the exact evaluation of
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遵循确切的评估
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and see how both bindings have separate environment so each one gets its own
    private state. The equivalent code in the homework interpreter extended with `set!`
    doesn’t need boxes:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 并且看看两个绑定是如何拥有各自独立的环境，因此每个都有自己的私有状态。使用`set!`扩展的作业解释器中的等效代码不需要盒子：
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: (To see multiple values from a single expression you can extend the language
    with a `list` binding.) Note that we cannot describe this behavior with substitution
    rules! We now use the environments to make it possible to change bindings — so
    finally an environment is actually an environment rather than a substitution cache.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: （要从单个表达式中看到多个值，可以通过`list`绑定扩展语言。）注意我们不能用替换规则来描述这种行为！现在我们使用环境来使改变绑定成为可能——所以最终一个环境实际上是一个环境而不是替换缓存。
- en: 'When you look at the above, note that we still use lexical scope — in fact,
    the local binding is actually a private state that nobody can access. For example,
    if we write this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当您查看上述内容时，请注意我们仍然使用词法作用域——实际上，局部绑定实际上是一个没有人可以访问的私有状态。例如，如果我们写道：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: then the resulting function that us bound to `counter` keeps a local integer
    state which no other code can access — you cannot modify it, reset it, or even
    know if it is really an integer that is used in there.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后绑定到`counter`的结果函数将保持一个局部整数状态，其他代码无法访问——您无法修改它，重置它，甚至知道其中是否真的是一个整数。
