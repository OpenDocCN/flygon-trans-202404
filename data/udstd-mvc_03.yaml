- en: Hierarchic MVC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分层 MVC
- en: Hierarchic MVC
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分层 MVC
- en: Until [](GLOSSARY.html) now, we [](GLOSSARY.html) have [](GLOSSARY.html) seen
    [](GLOSSARY.html) MVC [](GLOSSARY.html) applied [](GLOSSARY.html) to [](GLOSSARY.html)
    a [](GLOSSARY.html) single [](GLOSSARY.html) triad. This [](GLOSSARY.html) works
    [](GLOSSARY.html) well [](GLOSSARY.html) for individual [](GLOSSARY.html) widgets
    [](GLOSSARY.html) and [](GLOSSARY.html) dialogs, but [](GLOSSARY.html) how [](GLOSSARY.html)
    do [](GLOSSARY.html) we [](GLOSSARY.html) apply [](GLOSSARY.html) and [](GLOSSARY.html)
    scale [](GLOSSARY.html) MVC [](GLOSSARY.html) to [](GLOSSARY.html) an application
    [](GLOSSARY.html) level? Communication [](GLOSSARY.html) between [](GLOSSARY.html)
    controllers
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，我们看到 MVC 应用于单个三元组。这对单个小部件和对话框效果很好，但如何将 MVC 应用和扩展到应用程序级别呢？控制器之间的通信
- en: Application [](GLOSSARY.html) composed [](GLOSSARY.html) of [](GLOSSARY.html)
    tens, or [](GLOSSARY.html) hundreds [](GLOSSARY.html) of [](GLOSSARY.html) triads.
    Can [](GLOSSARY.html) we [](GLOSSARY.html) organize [](GLOSSARY.html) them somehow?
    Do [](GLOSSARY.html) we [](GLOSSARY.html) need [](GLOSSARY.html) to? Yes [](GLOSSARY.html)
    we [](GLOSSARY.html) do.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序由数十个或数百个三元组组成。我们能以某种方式组织它们吗？我们需要吗？是的，我们需要。
- en: Controller hierarchy
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器层次结构
- en: Controller hierarchy in Traditional MVC
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传统 MVC 中的控制器层次结构
- en: In [](GLOSSARY.html) order [](GLOSSARY.html) to [](GLOSSARY.html) handle [](GLOSSARY.html)
    the [](GLOSSARY.html) user [](GLOSSARY.html) events, traditional [](GLOSSARY.html)
    MVC [](GLOSSARY.html) had [](GLOSSARY.html) to [](GLOSSARY.html) organize [](GLOSSARY.html)
    controllers in [](GLOSSARY.html) a [](GLOSSARY.html) hierarchy. When [](GLOSSARY.html)
    a [](GLOSSARY.html) View [](GLOSSARY.html) received [](GLOSSARY.html) an [](GLOSSARY.html)
    event, it [](GLOSSARY.html) was [](GLOSSARY.html) handed [](GLOSSARY.html) out
    [](GLOSSARY.html) to [](GLOSSARY.html) its [](GLOSSARY.html) controller . Events
    [](GLOSSARY.html) are [](GLOSSARY.html) delivered [](GLOSSARY.html) according
    [](GLOSSARY.html) to [](GLOSSARY.html) the [](GLOSSARY.html) actual [](GLOSSARY.html)
    cursor [](GLOSSARY.html) presence (which [](GLOSSARY.html) basically indicates
    [](GLOSSARY.html) which [](GLOSSARY.html) View [](GLOSSARY.html) is [](GLOSSARY.html)
    in [](GLOSSARY.html) Focus) until [](GLOSSARY.html) they [](GLOSSARY.html) rare
    [](GLOSSARY.html) given [](GLOSSARY.html) to [](GLOSSARY.html) a [](GLOSSARY.html)
    controller [](GLOSSARY.html) that [](GLOSSARY.html) is willing [](GLOSSARY.html)
    to [](GLOSSARY.html) handle [](GLOSSARY.html) the [](GLOSSARY.html) event.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理用户事件，传统 MVC 必须以层次结构组织控制器。当视图接收到事件时，它会交给其控制器处理。事件根据实际光标位置（基本上指示哪个视图处于焦点）传递，直到它们被交给愿意处理事件的控制器。
- en: only [](GLOSSARY.html) one [](GLOSSARY.html) controller [](GLOSSARY.html) active
    [](GLOSSARY.html) at [](GLOSSARY.html) a [](GLOSSARY.html) time.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一次只有一个控制器处于活动状态。
- en: HMVC
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HMVC
- en: Hierarchic Model View Controller (HMVC, Recursive MVC)
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分层模型视图控制器（HMVC，递归 MVC）
- en: Hierarchic [](GLOSSARY.html) MVC [](GLOSSARY.html) is [](GLOSSARY.html) a [](GLOSSARY.html)
    strategy [](GLOSSARY.html) to [](GLOSSARY.html) apply [](GLOSSARY.html) MVC [](GLOSSARY.html)
    in [](GLOSSARY.html) large [](GLOSSARY.html) applications [](GLOSSARY.html) while
    [](GLOSSARY.html) keeping control [](GLOSSARY.html) of [](GLOSSARY.html) the [](GLOSSARY.html)
    granularity [](GLOSSARY.html) of [](GLOSSARY.html) data [](GLOSSARY.html) and
    [](GLOSSARY.html) communication. HMVC [](GLOSSARY.html) deploys [](GLOSSARY.html)
    a [](GLOSSARY.html) hierarchy of [](GLOSSARY.html) triads [](GLOSSARY.html) by
    [](GLOSSARY.html) connecting [](GLOSSARY.html) controllers. The [](GLOSSARY.html)
    triads [](GLOSSARY.html) work [](GLOSSARY.html) together [](GLOSSARY.html) by
    [](GLOSSARY.html) handling events [](GLOSSARY.html) they [](GLOSSARY.html) can
    [](GLOSSARY.html) handle, and [](GLOSSARY.html) forwarding [](GLOSSARY.html) them
    [](GLOSSARY.html) up [](GLOSSARY.html) in [](GLOSSARY.html) the [](GLOSSARY.html)
    hierarchy [](GLOSSARY.html) when [](GLOSSARY.html) they [](GLOSSARY.html) don't
    know [](GLOSSARY.html) how [](GLOSSARY.html) to [](GLOSSARY.html) handle
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 分层MVC是一种在大型应用程序中应用MVC的策略，同时保持对数据和通信粒度的控制。HMVC通过连接控制器部署了一个三重体系的层次结构。这些三重体系通过处理它们能够处理的事件并在不知道如何处理时将它们转发到层次结构中的上层，共同协作。
- en: '[IMAGE]'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[图像]'
- en: 'There [](GLOSSARY.html) are [](GLOSSARY.html) relevant [](GLOSSARY.html) differences
    [](GLOSSARY.html) when [](GLOSSARY.html) compared [](GLOSSARY.html) with [](GLOSSARY.html)
    traditional [](GLOSSARY.html) MVC: the [](GLOSSARY.html) view [](GLOSSARY.html)
    is [](GLOSSARY.html) responsible [](GLOSSARY.html) for [](GLOSSARY.html) handling
    [](GLOSSARY.html) user [](GLOSSARY.html) input [](GLOSSARY.html) events. These
    [](GLOSSARY.html) events [](GLOSSARY.html) are forwarded [](GLOSSARY.html) to
    [](GLOSSARY.html) the [](GLOSSARY.html) controller. The [](GLOSSARY.html) controller
    [](GLOSSARY.html) as [](GLOSSARY.html) usual [](GLOSSARY.html) performs [](GLOSSARY.html)
    modification [](GLOSSARY.html) on the [](GLOSSARY.html) model [](GLOSSARY.html)
    through [](GLOSSARY.html) direct [](GLOSSARY.html) method [](GLOSSARY.html) call
    [](GLOSSARY.html) on [](GLOSSARY.html) model [](GLOSSARY.html) objects [](GLOSSARY.html)
    To [](GLOSSARY.html) refresh [](GLOSSARY.html) the [](GLOSSARY.html) view state,
    the [](GLOSSARY.html) controller [](GLOSSARY.html) notifies [](GLOSSARY.html)
    the [](GLOSSARY.html) view [](GLOSSARY.html) that [](GLOSSARY.html) it [](GLOSSARY.html)
    needs [](GLOSSARY.html) refresh. The [](GLOSSARY.html) view [](GLOSSARY.html)
    then communicates [](GLOSSARY.html) directly [](GLOSSARY.html) with [](GLOSSARY.html)
    the [](GLOSSARY.html) model, pulling [](GLOSSARY.html) the [](GLOSSARY.html) data
    [](GLOSSARY.html) from [](GLOSSARY.html) it [](GLOSSARY.html) without involving
    [](GLOSSARY.html) the [](GLOSSARY.html) controller [](GLOSSARY.html) further.
    [4] Alternatively, the [](GLOSSARY.html) model [](GLOSSARY.html) notifies [](GLOSSARY.html)
    the view [](GLOSSARY.html) by [](GLOSSARY.html) providing [](GLOSSARY.html) its
    [](GLOSSARY.html) own [](GLOSSARY.html) state [5] The [](GLOSSARY.html) controller
    [](GLOSSARY.html) also [](GLOSSARY.html) acts [](GLOSSARY.html) as [](GLOSSARY.html)
    a [](GLOSSARY.html) hub [](GLOSSARY.html) in [](GLOSSARY.html) the controller
    [](GLOSSARY.html) hierarchy. If [](GLOSSARY.html) a [](GLOSSARY.html) controller
    [](GLOSSARY.html) receives [](GLOSSARY.html) an [](GLOSSARY.html) event [](GLOSSARY.html)
    from [](GLOSSARY.html) its [](GLOSSARY.html) associated view [](GLOSSARY.html)
    that [](GLOSSARY.html) cannot [](GLOSSARY.html) be [](GLOSSARY.html) handled,
    it [](GLOSSARY.html) is [](GLOSSARY.html) bubbled [](GLOSSARY.html) to [](GLOSSARY.html)
    the [](GLOSSARY.html) parent, which [](GLOSSARY.html) in [](GLOSSARY.html) turn
    [](GLOSSARY.html) can choose [](GLOSSARY.html) to [](GLOSSARY.html) handle [](GLOSSARY.html)
    it [](GLOSSARY.html) or [](GLOSSARY.html) delegate [](GLOSSARY.html) it [](GLOSSARY.html)
    further [](GLOSSARY.html) up [](GLOSSARY.html) or [](GLOSSARY.html) down [](GLOSSARY.html)
    in [](GLOSSARY.html) the [](GLOSSARY.html) tree. Any [](GLOSSARY.html) model at
    [](GLOSSARY.html) any [](GLOSSARY.html) level [](GLOSSARY.html) in [](GLOSSARY.html)
    the [](GLOSSARY.html) hierarchy [](GLOSSARY.html) can [](GLOSSARY.html) access
    [](GLOSSARY.html) data [](GLOSSARY.html) at [](GLOSSARY.html) any [](GLOSSARY.html)
    scope, and [](GLOSSARY.html) models [](GLOSSARY.html) can [](GLOSSARY.html) also
    talk [](GLOSSARY.html) to [](GLOSSARY.html) each [](GLOSSARY.html) other. Controllers
    [](GLOSSARY.html) at [](GLOSSARY.html) any [](GLOSSARY.html) level [](GLOSSARY.html)
    in [](GLOSSARY.html) the [](GLOSSARY.html) hierarchy [](GLOSSARY.html) can [](GLOSSARY.html)
    share [](GLOSSARY.html) these models.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统的MVC相比，存在相关的差异：视图负责处理用户输入事件。这些事件被转发给控制器。控制器通常通过直接调用模型对象的方法对模型进行修改。为了刷新视图状态，控制器通知视图需要刷新。视图然后直接与模型通信，从中提取数据，而不再涉及控制器。另外，模型通过提供自己的状态通知视图。控制器还充当控制器层次结构中的中心枢纽。如果控制器从其关联视图接收到无法处理的事件，则将其冒泡到父级，父级可以选择处理它或将其进一步委托给树中的上下级。层次结构中的任何级别的任何模型都可以访问任何范围的数据，模型也可以相互通信。层次结构中的任何级别的控制器都可以共享这些模型。
- en: controller [](GLOSSARY.html) has [](GLOSSARY.html) another [](GLOSSARY.html)
    controller [](GLOSSARY.html) as [](GLOSSARY.html) view controller [](GLOSSARY.html)
    handle [](GLOSSARY.html) multiple [](GLOSSARY.html) views [](GLOSSARY.html) or
    [](GLOSSARY.html) multiple [](GLOSSARY.html) sub [](GLOSSARY.html) controllers
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器[](GLOSSARY.html)作为视图控制器[](GLOSSARY.html)处理多个视图[](GLOSSARY.html)或多个子控制器[](GLOSSARY.html)。
- en: View-model [](GLOSSARY.html) in [](GLOSSARY.html) a [](GLOSSARY.html) observer
    [](GLOSSARY.html) pattern
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个观察者模式中的视图-模型[](GLOSSARY.html)
- en: PAC
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PAC
- en: Presentation Abstraction Control (PAC)
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 演示抽象控制（PAC）
- en: 'PAC [](GLOSSARY.html) is [](GLOSSARY.html) an [](GLOSSARY.html) older [](GLOSSARY.html)
    scheme, very [](GLOSSARY.html) similar [](GLOSSARY.html) to [](GLOSSARY.html)
    HMVC. Similar [](GLOSSARY.html) to [](GLOSSARY.html) MVC, PAC [](GLOSSARY.html)
    defines [](GLOSSARY.html) a triad (Agent [](GLOSSARY.html) in [](GLOSSARY.html)
    PAC [](GLOSSARY.html) terminology) as [](GLOSSARY.html) follows: Presentation,
    responsible [](GLOSSARY.html) for handling [](GLOSSARY.html) all [](GLOSSARY.html)
    interaction [](GLOSSARY.html) with [](GLOSSARY.html) the [](GLOSSARY.html) user,
    both [](GLOSSARY.html) input (mouse [](GLOSSARY.html) events) and [](GLOSSARY.html)
    output (visualization) Abstraction, represents [](GLOSSARY.html) only [](GLOSSARY.html)
    data [](GLOSSARY.html) that [](GLOSSARY.html) are [](GLOSSARY.html) contextually
    meaningful [](GLOSSARY.html) within [](GLOSSARY.html) the [](GLOSSARY.html) triad.
    Control, connects [](GLOSSARY.html) Presentation [](GLOSSARY.html) and [](GLOSSARY.html)
    Abstraction, plus [](GLOSSARY.html) acts [](GLOSSARY.html) as [](GLOSSARY.html)
    a [](GLOSSARY.html) communication [](GLOSSARY.html) hub [](GLOSSARY.html) in [](GLOSSARY.html)
    a [](GLOSSARY.html) Control-connected [](GLOSSARY.html) hierarchy [](GLOSSARY.html)
    of [](GLOSSARY.html) Agents. Controls [](GLOSSARY.html) are [](GLOSSARY.html)
    responsible [](GLOSSARY.html) for [](GLOSSARY.html) forwarding [](GLOSSARY.html)
    the [](GLOSSARY.html) messages [](GLOSSARY.html) in [](GLOSSARY.html) transit
    [](GLOSSARY.html) in [](GLOSSARY.html) the hierarchy, eventually [](GLOSSARY.html)
    after [](GLOSSARY.html) transforming [](GLOSSARY.html) them. When [](GLOSSARY.html)
    an [](GLOSSARY.html) agent [](GLOSSARY.html) wants [](GLOSSARY.html) to [](GLOSSARY.html)
    send [](GLOSSARY.html) an event [](GLOSSARY.html) to [](GLOSSARY.html) another
    [](GLOSSARY.html) agent, it [](GLOSSARY.html) forwards [](GLOSSARY.html) it [](GLOSSARY.html)
    to [](GLOSSARY.html) its [](GLOSSARY.html) parent [](GLOSSARY.html) agent. The
    [](GLOSSARY.html) parent [](GLOSSARY.html) agent either [](GLOSSARY.html) handles
    [](GLOSSARY.html) the [](GLOSSARY.html) event [](GLOSSARY.html) or, if [](GLOSSARY.html)
    it [](GLOSSARY.html) does [](GLOSSARY.html) not [](GLOSSARY.html) know [](GLOSSARY.html)
    what [](GLOSSARY.html) to [](GLOSSARY.html) do [](GLOSSARY.html) with [](GLOSSARY.html)
    it, sends [](GLOSSARY.html) the event [](GLOSSARY.html) to [](GLOSSARY.html) one
    [](GLOSSARY.html) of [](GLOSSARY.html) its [](GLOSSARY.html) other [](GLOSSARY.html)
    children [](GLOSSARY.html) or [](GLOSSARY.html) to [](GLOSSARY.html) its [](GLOSSARY.html)
    parent,, and [](GLOSSARY.html) so [](GLOSSARY.html) on. At [](GLOSSARY.html) first
    glance, there''s [](GLOSSARY.html) little [](GLOSSARY.html) or [](GLOSSARY.html)
    no [](GLOSSARY.html) difference [](GLOSSARY.html) between [](GLOSSARY.html) HMVC
    [](GLOSSARY.html) and [](GLOSSARY.html) PAC. If [](GLOSSARY.html) you [](GLOSSARY.html)
    think [](GLOSSARY.html) so, you [](GLOSSARY.html) are [](GLOSSARY.html) not [](GLOSSARY.html)
    the [](GLOSSARY.html) only [](GLOSSARY.html) one [4]. There [](GLOSSARY.html)
    are [](GLOSSARY.html) however [](GLOSSARY.html) certain [](GLOSSARY.html) important
    [](GLOSSARY.html) differences. First [](GLOSSARY.html) of [](GLOSSARY.html) all,
    HMVC is [](GLOSSARY.html) based [](GLOSSARY.html) on [](GLOSSARY.html) traditional
    [](GLOSSARY.html) MVC, meaning [](GLOSSARY.html) that [](GLOSSARY.html) there''s
    [](GLOSSARY.html) tight coupling [](GLOSSARY.html) between [](GLOSSARY.html) the
    [](GLOSSARY.html) model [](GLOSSARY.html) and [](GLOSSARY.html) the [](GLOSSARY.html)
    view, with [](GLOSSARY.html) the [](GLOSSARY.html) view [](GLOSSARY.html) having
    [](GLOSSARY.html) to [](GLOSSARY.html) inquire [](GLOSSARY.html) the model. In
    [](GLOSSARY.html) PAC, this [](GLOSSARY.html) communication [](GLOSSARY.html)
    is [](GLOSSARY.html) fully [](GLOSSARY.html) mediated [](GLOSSARY.html) by [](GLOSSARY.html)
    the [](GLOSSARY.html) controller. With this [](GLOSSARY.html) strategy, PAC [](GLOSSARY.html)
    keeps [](GLOSSARY.html) MV [](GLOSSARY.html) loose [](GLOSSARY.html) coupling,
    while [](GLOSSARY.html) HMVC [](GLOSSARY.html) has [](GLOSSARY.html) MV [](GLOSSARY.html)
    tight [](GLOSSARY.html) coupling.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: PAC [](GLOSSARY.html) 是一个较早的方案，与 HMVC 非常相似。类似于 MVC，PAC 将一个三元组（在 PAC 术语中称为 Agent）定义如下：Presentation，负责处理与用户的所有交互，包括输入（鼠标事件）和输出（可视化）Abstraction，仅表示在三元组内有意义的数据Control，连接
    Presentation 和 Abstraction，并充当控制连接层次结构中的通信中心。Controls 负责在层次结构中转发消息，最终在转换后传递。当一个
    agent 想要将事件发送给另一个 agent 时，它将其转发给其父代理。父代理要么处理事件，要么，如果不知道如何处理，将事件发送给其其他子代理之一或其父代理，依此类推。乍一看，HMVC
    和 PAC 之间几乎没有区别。如果你这样认为，你并不是唯一一个。然而，两者之间确实存在一些重要的区别。首先，HMVC 基于传统的 MVC，这意味着模型和视图之间存在紧密耦合，视图必须查询模型。在
    PAC 中，这种通信完全由控制器中介。通过这种策略，PAC 保持了 MV 的松耦合，而 HMVC 则具有 MV 的紧耦合。
- en: The [](GLOSSARY.html) second [](GLOSSARY.html) major [](GLOSSARY.html) difference
    [](GLOSSARY.html) is [](GLOSSARY.html) the [](GLOSSARY.html) scope [](GLOSSARY.html)
    of [](GLOSSARY.html) access [](GLOSSARY.html) of [](GLOSSARY.html) the [](GLOSSARY.html)
    triads. In [](GLOSSARY.html) HMVC, each triad [](GLOSSARY.html) is [](GLOSSARY.html)
    technically [](GLOSSARY.html) allowed [](GLOSSARY.html) to [](GLOSSARY.html) access
    [](GLOSSARY.html) all [](GLOSSARY.html) of [](GLOSSARY.html) the [](GLOSSARY.html)
    model. Not [](GLOSSARY.html) so [](GLOSSARY.html) in [](GLOSSARY.html) PAC. In
    [](GLOSSARY.html) PAC, it [](GLOSSARY.html) can [](GLOSSARY.html) only [](GLOSSARY.html)
    access [](GLOSSARY.html) data [](GLOSSARY.html) that [](GLOSSARY.html) is [](GLOSSARY.html)
    contextually [](GLOSSARY.html) meaningful [](GLOSSARY.html) to [](GLOSSARY.html)
    that [](GLOSSARY.html) triad. If [](GLOSSARY.html) it needs [](GLOSSARY.html)
    to [](GLOSSARY.html) access [](GLOSSARY.html) something [](GLOSSARY.html) that
    [](GLOSSARY.html) is [](GLOSSARY.html) not [](GLOSSARY.html) at [](GLOSSARY.html)
    its [](GLOSSARY.html) scope, it [](GLOSSARY.html) must [](GLOSSARY.html) forward
    [](GLOSSARY.html) an [](GLOSSARY.html) event [](GLOSSARY.html) to the [](GLOSSARY.html)
    controller, which [](GLOSSARY.html) will [](GLOSSARY.html) be [](GLOSSARY.html)
    routed [](GLOSSARY.html) to [](GLOSSARY.html) the [](GLOSSARY.html) proper [](GLOSSARY.html)
    context [](GLOSSARY.html) by [](GLOSSARY.html) the [](GLOSSARY.html) hierarchy.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[PAC](https://wiki.example.org/PAC)的第二个主要区别是三元组的访问范围。在HMVC中，每个三元组在技术上都被允许访问所有模型。但在PAC中不是这样的。在PAC中，它只能访问与该三元组有意义的数据。如果需要访问超出其范围的内容，必须将事件转发给控制器，然后由层次结构将其路由到适当的上下文。'
- en: 'PAC: groups [](GLOSSARY.html) of [](GLOSSARY.html) PAC [](GLOSSARY.html) entities,
    each [](GLOSSARY.html) one [](GLOSSARY.html) composed [](GLOSSARY.html) by [](GLOSSARY.html)
    a [](GLOSSARY.html) Presentation, Abstraction [](GLOSSARY.html) and [](GLOSSARY.html)
    Control [](GLOSSARY.html) object. organized [](GLOSSARY.html) in [](GLOSSARY.html)
    a [](GLOSSARY.html) network'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: PAC：由Presentation、Abstraction和Control对象组成的PAC实体组。组织成网络。
- en: 'abstraction: represent [](GLOSSARY.html) the [](GLOSSARY.html) business [](GLOSSARY.html)
    functionality [](GLOSSARY.html) and [](GLOSSARY.html) state.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象：代表业务功能和状态。
- en: Control [](GLOSSARY.html) is [](GLOSSARY.html) a [](GLOSSARY.html) mediating
    [](GLOSSARY.html) controller. No [](GLOSSARY.html) interaction [](GLOSSARY.html)
    between [](GLOSSARY.html) P [](GLOSSARY.html) and [](GLOSSARY.html) A.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 控制是一个调解控制器。P和A之间没有交互。
