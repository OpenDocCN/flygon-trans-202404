- en: Read the Humanities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读人文学科
- en: Read the Humanities
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读人文学科
- en: In all but the smallest development project people work with people. In all
    but the most abstracted field of research people write software for people to
    support them in some goal of theirs. People write software with people for people.
    It's a people business. Unfortunately what is taught to programmers too often
    equips them very poorly to deal with people they work for and with. Luckily there
    is an entire field of study that can help.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了最小的开发项目外，人们都是与人打交道的。在除了最抽象的研究领域外，人们编写软件来支持他们某个目标的实现。人们与人共同编写软件，为人们服务。这是一个人与人之间的业务。不幸的是，程序员所学的东西往往使他们对待他们工作和合作的人非常不适应。幸运的是，有整个研究领域可以帮助他们。
- en: For example, Ludwig Wittgenstein makes a very good case in the *Philosophical
    Investigations* (and elsewhere) that any language we use to speak to one another
    is not, cannot be, a serialization format for getting a thought or idea or picture
    out of one person's head and into another's. Already we should be on our guard
    against misunderstanding when we "gather requirements." Wittgenstein also shows
    that our ability to understand one another at all does not arise from shared definitions,
    it arises from a shared experience, from a form of life. This may be one reason
    why programmers who are steeped in their problem domain tend to do better than
    those who stand apart from it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，路德维希·维特根斯坦在《哲学研究》（以及其他地方）中提出了一个很好的观点，即我们用来彼此交流的任何语言都不是、也不能成为一个将一个人的想法、观念或图片从他的脑中传递到另一个人脑中的序列化格式。当我们“收集需求”时，我们应该对误解保持警惕。维特根斯坦还表明，我们之间相互理解的能力并不是来自于共享的定义，而是来自于共享的经验，来自于一种生活方式。这可能是为什么深入研究自己问题领域的程序员往往比那些与之疏远的人做得更好的一个原因。
- en: 'Lakoff and Johnson present us with a catalog of *Metaphors We Live By*, suggesting
    that language is largely metaphorical, and that these metaphors offer an insight
    into how we understand the world. Even seemingly concrete terms like cash flow,
    which we might encounter in talking about a financial system, can be seen as metaphorical:
    "money is a fluid." How does that metaphor influence the way we think about systems
    that handle money? Or we might talk about layers in a stack of protocols, with
    some high level and some low level. This is powerfully metaphorical: the user
    is "up" and the technology is "down." This exposes our thinking about the structure
    of the systems we build. It can also mark a lazy habit of thought that we might
    benefit from breaking from time to time.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 拉科夫和约翰逊向我们展示了一个《我们生活中的隐喻》目录，暗示了语言在很大程度上是隐喻的，而这些隐喻为我们理解世界提供了一种见解。即使是看似具体的术语，比如我们在谈论一个金融系统时可能会遇到的“现金流”，也可以被看作是隐喻性的：“金钱是流动的。”这个隐喻如何影响我们思考处理金钱的系统？或者我们可能会谈论协议堆栈中的层，有一些是高层次的，一些是低层次的。这是非常隐喻性的：用户在“上面”，而技术在“下面”。这暴露了我们对构建的系统结构的思考方式。它也可以标志着一种懒惰的思考习惯，我们可能会从中受益，有时要打破这种习惯。
- en: Martin Heidegger studied closely the ways that people experience tools. Programmers
    build and use tools, we think about and create and modify and recreate tools.
    Tools are objects of interest to us. But for its users, as Heiddeger shows in
    *Being and Time*, a tool becomes an invisible thing understood only in use. For
    users tools only become objects of interest when they don't work. This difference
    in emphasis is worth bearing in mind whenever usability is under discussion.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 马丁·海德格密切研究了人们体验工具的方式。程序员构建和使用工具，我们思考、创建、修改和重新创建工具。工具是我们感兴趣的对象。但是对于它的使用者来说，正如海德格在《存在与时间》中所展示的那样，一个工具在使用中变成了一种隐形的东西，只有在使用中才能理解。对于用户来说，工具只有在它们不起作用时才会变成感兴趣的对象。每当讨论可用性时，这种强调的差异值得记住。
- en: Eleanor Rosch overturned the Aristotelean model of the categories by which we
    organize our understanding of the world. When programmers ask users about their
    desires for a system we tend to ask for definitions built out of predicates. This
    is very convenient for us. The terms in the predicates can very easily become
    attributes on a class or columns in a table. These sorts of categories are crisp,
    disjoint, and tidy. Unfortunately, as Rosch showed in "Natural Categories" and
    later works, that just isn't how people in general understand the world. They
    understand it in ways that are based on examples. Some examples, so-called prototypes,
    are better than others and so the resulting categories are fuzzy, they overlap,
    they can have rich internal structure. In so far as we insist on Aristotelean
    answers we can't ask users the right questions about the user's world, and will
    struggle to come to the common understanding we need.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 埃莉诺·罗什（Eleanor Rosch）推翻了亚里士多德关于我们组织对世界理解的范畴模型。当程序员询问用户对系统的需求时，我们往往会要求由谓词构建的定义。这对我们来说非常方便。谓词中的术语可以很容易地变成类的属性或表中的列。这些类别是清晰的、不相交的和整洁的。然而，正如罗什在《自然范畴》和后来的作品中所展示的，这并不是人们一般理解世界的方式。他们理解世界的方式是基于例子的。一些例子，所谓的原型，比其他例子更好，因此产生的类别是模糊的，它们重叠，它们可以具有丰富的内部结构。就我们坚持亚里士多德式答案而言，我们无法询问用户关于用户世界的正确问题，并且将很难达成我们需要的共同理解。
- en: by [Keith Braithwaite](http://programmer.97things.oreilly.com/wiki/index.php/Keith_Braithwaite)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: by [Keith Braithwaite](http://programmer.97things.oreilly.com/wiki/index.php/Keith_Braithwaite)
