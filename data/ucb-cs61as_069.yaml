- en: calc.rkt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: calc.rkt
- en: Overview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: In this subsection, we are going to play around with a calculator program that
    is written in Racket.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将玩弄一个用Racket编写的计算器程序。
- en: Our calculator program will do arithmetic operations in the same syntax as Racket.
    Why are we doing this? We want to increase our understanding on how Racket evaluates
    things. In the next lab, we will add more features to it but for now, all it does
    is arithmetic operations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的计算器程序将以与Racket相同的语法进行算术运算。为什么我们这样做？我们想增加对Racket如何评估事物的理解。在下一个实验中，我们将为其添加更多功能，但目前，它只执行算术运算。
- en: 'You can download the file from [here](http://inst.eecs.berkeley.edu/~cs61as/library/calc.rkt).
    You can also copy it to your class account by typing the following into a terminal:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[这里](http://inst.eecs.berkeley.edu/~cs61as/library/calc.rkt)下载该文件。您还可以通过在终端中输入以下内容将其复制到您的课程帐户中：
- en: '`cp ~cs61as/lib/calc.rkt .`'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`cp ~cs61as/lib/calc.rkt .`'
- en: Note the '.' at the end. This will copy the .rkt file to your current directory.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意末尾的'.'。这将把`.rkt`文件复制到当前目录。
- en: The 'READ' function
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '''READ''函数'
- en: 'Before we dive in to the calculator, there is one function we should know:
    the `read` function. When you call `(read)`, it will prompt you for some input.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究计算器之前，有一个函数我们应该了解：`read`函数。当您调用`(read)`时，它将提示您输入一些��容。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the example above, we entered `123` into the interpreter. The next `123`
    shown by the interpreter is the value returned by `read`. So what is it used for?
    Try this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们在解释器中输入了`123`。解释器显示的下一个`123`是`read`返回的值。那么它用于什么？试试这个：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, we are assigning `a` to the value of your input. Thus, when we type `123`
    again, we store that value in the variable `a`. Try the next one for something
    more interesting:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`a`赋值为您输入的值。因此，当我们再次输入`123`时，我们将该值存储在变量`a`中。尝试下一个更有趣的内容：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This time, when the interpreter asked us what value we want to put into `a`,
    we typed `'(+ 1 2)'`. `a` ended up with the value `'(+ 1 2)'` and NOT 3\. The
    next line tests whether `a` is equal to the quoted list `'(+ 1 2)'`. What can
    we learn from this? **`(read)` accepts user inputs as symbols; they are not evaluated.**
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，当解释器询问我们要将什么值放入`a`时，我们输入了`'(+ 1 2)'`。`a`最终的值是`'(+ 1 2)'`而不是3。下一行测试`a`是否等于带引号的列表`'(+
    1 2)'`。我们可以从中学到什么？**`(read)`接受用户输入作为符号；它们不会被评估。**
- en: With that covered, let's go to the Calculator program!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，让我们进入计算器程序！
- en: 'Calc: How Does it Work?'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Calc：它是如何工作的？
- en: 'Let''s run the program and walk through what is actually happening. Load `calc.rkt`
    in your Racket interpreter (by typing `(enter! "calc.rkt")`), then call the function
    `(calc)`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行程序并了解实际发生了什么。在Racket解释器中加载`calc.rkt`（通过输入`(enter! "calc.rkt")`），然后调用函数`(calc)`：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that our usual prompt ">" is replaced with "calc:". This is an easy way
    to know that the expressions you enter which will be evaluated by `calc.rkt`.
    Now, try typing some arithmetic operation like `(+ 10 20)`, or some number like
    `300`, and play around with it!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们通常的提示符“>”被“calc:”取代。这是一个简单的方法，可以知道您输入的表达式将由`calc.rkt`评估。现在，尝试输入一些算术运算如`(+
    10 20)`，或一些数字如`300`，并进行操作！
- en: 'How does it know how to evaluate math operations? Let''s look at what the `calc`
    function does. Its definition is reproduced below:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它是如何知道如何评估数学运算的？让我们看看`calc`函数的作用。其定义如下：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The first line says `(display "calc: ")`, which tells the interpreter to show
    "calc: " to the ''screen''/output.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '第一行说`(display "calc: ")`，告诉解释器在“屏幕”/输出上显示“calc:”。'
- en: '`flush` tells the interpreter to show whatever we type on the ''screen'' output
    (you can ignore this for now).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`flush`告诉解释器显示我们在“屏幕”输出上输入的任何内容（现在可以忽略这一点）。'
- en: The next line, `(print (calc-eval (read)))` tells the interpreter to call `calc-eval`
    with the user input and print the result.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行，`(print (calc-eval (read)))`告诉解释器使用用户输入调用`calc-eval`并打印结果。
- en: 'The last line is a recursive call to `calc`, which loops us back to the beginning.
    This is the **read-eval-print-loop (REPL)**: it asks for some user-input, evaluates
    it, prints the result, and loops.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行是对`calc`的递归调用，将我们带回开始。这就是**读取-评估-打印-循环（REPL）**：它要求用户输入一些内容，评估它，打印结果，然后循环。
- en: This is all that `calc` does. The calculator magic happens in `calc-eval`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`calc`的全部内容。计算器的魔法发生在`calc-eval`中。
- en: 'Calc: Number Inputs'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Calc：数字输入
- en: 'So what does `calc-eval` do? Consider a situation where we type a number in
    `calc` as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 那么`calc-eval`是做什么的呢？考虑一种情况，我们在`calc`中输入一个数字如下：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That wasn't a very exciting result, but under the hood, a lot of things are
    interacting. Because the user input is 42, the `calc-eval` will be called as `(print
    (calc-eval '42))`. (Remember that `(read)` returns a quoted symbol.) Let's see
    how `calc-eval` handles this. Its code is reproduced below.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 那不是一个非常令人兴奋的结果，但在幕后，许多事情正在互动。因为用户输入为42，`calc-eval`将被调用为`(print (calc-eval '42))`。（记住`(read)`返回一个带引号的符号。）让我们看看`calc-eval`如何处理这个。它的代码如下。
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`calc-eval`''s body is a `cond`, and because the formal parameter `exp` is
    called with 42, the first condition `(number? exp)` will be fulfilled and `calc-eval`
    will return `exp`, which is 42\. All numbers are treated the same way. A subtle
    point here is that this is the base-case. For any arithmetic calculation, the
    simplest argument that can be passed around are numbers.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`calc-eval`的主体是一个`cond`，因为形式参数`exp`被调用为42，第一个条件`(number? exp)`将被满足，`calc-eval`将返回`exp`，即42。所有数字都被同样对待。这里一个微妙的点是这是基本情况。对于任何算术计算，可以传递的最简单参数都是数字。'
- en: 'Calc: One Operator'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Calc：一个运算符
- en: The next expression we are going to try is a single operator function call,
    like `(+ 1 1)`, `(* 2 3 10)`, or `(- 100 50 20 10)`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要尝试的表达式是一个单运算符函数调用，如`(+ 1 1)`，`(* 2 3 10)`或`(- 100 50 20 10)`。
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will call `calc-eval` as `(print (calc-eval '(* 2 3 10)))`. (Again, remember
    that `read` treats user input as symbols.) How does `calc-eval` handle this?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将调用`calc-eval`为`(print (calc-eval '(* 2 3 10)))`。（再次记住`read`将用户输入视为符号。）`calc-eval`如何处理这个？
- en: '**Test Your Understanding**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: 'The calc-eval code has be reproduced for you below:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下面为您复制了`calc-eval`代码：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'What happens when we call the following expression:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用以下表达式时会发生什么：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Calc-Apply
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Calc-Apply
- en: 'Our simple expression (* 2 3 10) to `calc` gets passed in to `calc-apply` as
    `(calc-apply ''* ''(2 3 10))`. What does it do next? Here is the code for calc-
    apply:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简单表达式（* 2 3 10）传递给`calc`，作为`(calc-apply '* '(2 3 10))`传递给`calc-apply`。接下来会发生什么？这是`calc-apply`的代码：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Notice that the formal argument `fn` in `calc-apply` only accepts 4 values:
    `''+`, `''-`, `''*`, or `''/`. Everything else results in an error. `Calc-apply`
    can be described as "find what function it is and do the right thing". In this
    case, because `fn` is `''*`, `calc-apply` will call `accumulate` on `args`, which
    is `''(2 3 10)`, and return `60`.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`calc-apply`中的形式参数`fn`只接受4个值：`'+', `'-', `'*', 或`'/`。其他任何值都会导致错误。`Calc-apply`可以描述为"找到函数是什么，然后做正确的事情"。在这种情况下，因为`fn`是`'*'，`calc-apply`将在`args`上调用`accumulate`，即`'(2
    3 10)`，并返回`60`。
- en: Convince yourself that for any of the 4 acceptable arguments for `fn`, and any
    list of numbers `args`, `calc-apply` will do the right computation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 说服自己，对于`fn`的4个可接受参数和任何数字列表`args`，`calc-apply`都会执行正确的计算。
- en: 'Calc: Nested Operators'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Calc：嵌套运算符
- en: '**Test Your Understanding**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: 'Let''s test our calculator program by calling a more complex expression. The
    calc-eval code has be reproduced for you below:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过调用更复杂的表达式来测试我们的计算器程序。下面为您复制了`calc-eval`代码：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'What happens when we call the following expression:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用以下表达式时会发生什么：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Compound Expressions
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合表达式
- en: So how does our calculator program evaluate compound expressions? It calls `calc-eval`
    on simpler expressions, and recursively repeats this until the expressions are
    simple enough (just numbers) to simply return the expression. We know that `calc-eval`
    and `calc-apply` works for numbers and expressions with one operator. Everything
    else is just a combination. Trust the recursion!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们的计算器程序如何评估复合表达式？它在更简单的表达式上调用`calc-eval`，并递归重复这个过程，直到表达式足够简单（只是数字）以便简单地返回表达式。我们知道`calc-eval`和`calc-apply`适用于数字和具有一个运算符的表达式。其他一切都只是组合。相信递归！
- en: '**Test Your Understanding**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: Which of the following is NOT a possible call in calc?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`calc`中，以下哪个不是可能的调用？
- en: Takeaways
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: In this subsection, you learned about `calc.rkt`, which accepts an arithmetic
    expression (operation) as a symbol and evaluates it like a simplified scientific
    calculator.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，您了解了`calc.rkt`，它接受一个算术表达式（操作）作为符号，并像简化的科学计算器一样对其进行评估。
