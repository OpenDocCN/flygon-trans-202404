- en: Drawing images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制图像
- en: To draw something, you first need a canvas to draw on. We will use [java.awt.image.BufferedImage](http://docs.oracle.com/javase/7/docs/api/java/awt/image/BufferedImage.html),
    a bitmapped image that you create by providing the desired width and height in
    pixels.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制内容，首先需要一个画布来绘制。我们将使用[BufferedImage](http://docs.oracle.com/javase/7/docs/api/java/awt/image/BufferedImage.html)，一个位图图像，您可以通过提供所需的像素宽度和高度来创建它。
- en: Then we use a small package I've written to draw to this image. (You could of
    course use standard java.awt functions for doing this. But the java.awt interface
    is somewhat old-fashioned, and using the cs109ui package has the advantage that
    you can later reuse the exact same drawing code in Javascript and on Android.)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用我编写的一个小包来绘制这个图像。（当然，您也可以使用标准的java.awt函数来执行此操作。但是java.awt界面有点过时，使用cs109ui包的优点是您可以以后在Javascript和Android上重用完全相同的绘图代码。）
- en: When you are done drawing, you can save the image to a file using the javax.imageio.ImageIO.write
    function.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制完成后，您可以使用javax.imageio.ImageIO.write函数将图像保存到文件中。
- en: 'Here is a complete example that shows some drawing functions ([drawing.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/92-drawing/drawing.kts)):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个完整的示例，展示了一些绘图功能（[drawing.kts](https://github.com/otfried/cs109-kotlin/raw/master/tutorial/92-drawing/drawing.kts)）：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The generated drawing looks like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的绘图如下：
- en: '![The resulting drawing](../Images/9e5f240218f16e02ef1d2f847608e6af.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![生成的绘图](../Images/9e5f240218f16e02ef1d2f847608e6af.jpg)'
- en: Colors
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 颜色
- en: 'Colors are specified using an org.otfried.cs109.Color object. There are some
    predefined colors:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用org.otfried.cs109.Color对象指定颜色。有一些预定义的颜色：
- en: Color.BLACK
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.BLACK
- en: Color.BLUE
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.BLUE
- en: Color.CYAN
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.CYAN
- en: Color.DARK_GRAY
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.DARK_GRAY
- en: Color.GRAY
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.GRAY
- en: Color.GREEN
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.GREEN
- en: Color.LIGHT_GRAY
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.LIGHT_GRAY
- en: Color.MAGENTA
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.MAGENTA
- en: Color.ORANGE
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.ORANGE
- en: Color.PINK
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.PINK
- en: Color.RED
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.RED
- en: Color.WHITE
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.WHITE
- en: Color.YELLOW
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Color.YELLOW
- en: 'To create another color, provide its red, green, and blue components, as integers
    between 0 and 255:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建另一种颜色，请提供其红色、绿色和蓝色组件，作为介于0和255之间的整数：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also construct a color from a 24-bit integer:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从24位整数构造颜色：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Drawing style
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 绘图样式
- en: 'Every shape can be drawn in two ways: either as a filled shape, or by drawing
    with a "pen" along the outline of the shape (or both).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个形状都可以用两种方式绘制：作为填充形状绘制，或者使用“笔”沿着形状的轮廓绘制（或两者兼而有之）。
- en: You select the drawing style with one of the constants
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下常量之一选择绘图样式
- en: DrawStyle.STROKE to draw the outline of the shape (in this case the line width
    is important);
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DrawStyle.STROKE以绘制形状的轮廓（在这种情况下，线宽很重要）；
- en: DrawStyle.FILL to fill the shape (this is the default and can always be omitted);
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DrawStyle.FILL以填充形状（这是默认值，始终可以省略）；
- en: DrawStyle.STROKE_AND_FILL to do both.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DrawStyle.STROKE_AND_FILL来执行两者。
- en: Text font and alignment
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文本字体和对齐方式
- en: 'To draw text, you need to set a font on the ImageCanvas using setFont. You
    can just provide a point size like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制文本，您需要使用setFont在ImageCanvas上设置字体。您可以像这样提供一个点大小：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'or set a different typeface by using one of the standard names "Monospaced",
    "Serif", or "SansSerif", or the name of a real font installed on your system:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用标准名称之一"Monospaced"、"Serif"或"SansSerif"，或系统中安装的实际字体的名称设置不同的字体：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When calling drawText, you have the choice to align the text at its left edge,
    the right edge, or its horizontal center. The alignment is selected with the constants
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 调用drawText时，您可以选择将文本对齐到其左边缘、右边缘或水平中心。对齐方式通过常量进行选择
- en: TextAlign.LEFT (this is the default and can be omitted);
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TextAlign.LEFT（这是默认值，可以省略）；
- en: TextAlign.CENTER;
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TextAlign.CENTER；
- en: TextAlign.RIGHT.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TextAlign.RIGHT。
- en: ImageCanvas
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ImageCanvas
- en: The org.otfried.cs109ui.ImageCanvas object does all the drawing. You can use
    its width and height properties to inquire the size of the canvas (but of course
    you can also check the original BufferedImage).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: org.otfried.cs109ui.ImageCanvas对象执行所有绘图。您可以使用其width和height属性来查询画布的大小（但是您当然也可以检查原始的BufferedImage）。
- en: 'The basic methods of ImageCanvas are:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ImageCanvas的基本方法包括：
- en: 'clear(c: Color) clears the entire canvas to the given color;'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清除（clear）函数清除整个画布为指定的颜色；
- en: 'setColor(color: Color) sets the color for future drawing operations (see above
    for the Color type);'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'setColor(color: Color) 设置未来绘图操作的颜色（有关Color类型，请参见上文）；'
- en: 'setLineWidth(width: Double) sets the pen width for outline drawing;'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'setLineWidth(width: Double)设置轮廓绘制的笔宽度；'
- en: 'drawRectangle(x: Double, y: Double, width: Double, height: Double, s: DrawStyle)
    draws a rectangle;'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'drawRectangle(x: Double, y: Double, width: Double, height: Double, s: DrawStyle)
    绘制矩形；'
- en: 'drawCircle(x: Double, y: Double, radius: Double, s: DrawStyle) draws a circle
    with center at \((x,y)\) and radius \(r\);'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'drawCircle(x: Double, y: Double, radius: Double, s: DrawStyle) 在 \((x,y)\)
    处以半径 \(r\) 绘制一个圆；'
- en: 'setFont(size: Double, face: String) sets the font for text drawing operations
    (see examples above);'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'setFont(size: Double, face: String) 设置文本绘制操作的字体（参见上面的示例）;'
- en: 'drawText(text: String, x: Double, y: Double, a: TextAlign) draws the string
    aligned at position \((x, y)\);'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'drawText(text: String, x: Double, y: Double, a: TextAlign) 在位置 \((x, y)\) 绘制对齐的字符串;'
- en: done() it is recommended to call this method when you are done with drawing.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: done() 在完成绘制时建议调用此方法。
- en: More complicated shapes
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更复杂的形状
- en: 'To draw shapes other than rectangles and circles, you need to use the shape
    methods of ImageCanvas:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制除了矩形和圆之外的形状，您需要使用 ImageCanvas 的 shape 方法：
- en: You describe the shape by walking along the outline. First, call beginShape(),
    then moveTo(x, y) to go to the starting point of the outline. Now make a sequence
    of lineTo(x, y) calls to describe the boundary of the shape. You can complete
    the outline by calling closePath(), this returns to the starting point (which
    you set when you called moveTo(x, y)). For filled shapes you normally want to
    call closePath, for outlined (stroked) shapes it depends if you want the shape
    to be a closed curve or not.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 描述形状时，沿着轮廓走。首先，调用 beginShape()，然后调用 moveTo(x, y) 前往轮廓的起点。现在，通过一系列的 lineTo(x,
    y) 调用来描述形状的边界。您可以通过调用 closePath() 来完成轮廓，这将返回到起点（您在调用 moveTo(x, y) 时设置的位置）。对于填充形状，通常要调用
    closePath，对于轮廓（描边）形状，这取决于您是否希望该形状是封闭曲线。
- en: Finally, call drawShape to draw the shape.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用 drawShape 来绘制形状。
- en: Transformations
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 变换
- en: 'You can modify the coordinate system to make it easier to specify your objects:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以修改坐标系统以便更容易地指定您的对象：
- en: 'translate(x: Double, y: Double) makes the point \((x, y)\) the origin of the
    new coordinate system;'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'translate(x: Double, y: Double) 使点 \((x, y)\) 成为新坐标系的原点;'
- en: 'rotate(degrees: Double) rotates the coordinate system clockwise;'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'rotate(degrees: Double) 顺时针旋转坐标系;'
- en: 'scale(sx: Double, sy: Double) scales the coordinate system in the \(x\)- and
    \(y\)-direction (so calling scale(2.0, 2.0) doubles the size of your drawing).'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'scale(sx: Double, sy: Double) 缩放 \(x\) 和 \(y\) 方向的坐标系统（因此调用 scale(2.0, 2.0)
    会使您的绘图尺寸加倍）。'
- en: Often you only want to modify the coordinate system temporarily, and return
    to the original coordinate system when you are done with some part of the drawing
    (see the quadrilateral in the code above). This is achieved by calling save()
    before changing the coordinate system, and restore() when you want to return to
    the previous settings.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您只想临时修改坐标系，并在完成绘图的某个部分时返回到原始坐标系（请参阅上面代码中的四边形）。通过在更改坐标系之前调用 save()，并在想要返回到先前设置时调用
    restore() 来实现这一点。
- en: Transparency
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 透明度
- en: Normally, shapes that are drawn later cover shapes that have been drawn before
    (the so-called "painter's model" of computer graphics).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，后绘制的形状会覆盖先前绘制的形状（计算机图形学中的“画家模型”）。
- en: 'However, you can call setAlpha(alpha) to set a transparency for future drawing
    operations. When alpha == 255, drawing is opaque and completely covers what was
    drawn before. When alpha == 128, you are drawing with 50% transparency: The result
    is a blend of half the original color and half the newly drawn color.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您可以调用 setAlpha(alpha) 来设置未来绘制操作的透明度。当 alpha == 255 时，绘图是不透明的并完全覆盖以前绘制的内容。当
    alpha == 128 时，您以 50% 透明度进行绘制：结果是原始颜色的一半与新绘制颜色的一半的混合。
- en: Measuring text
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测量文本
- en: 'The method textWidth(text: String) returns the width of the text if you were
    to draw it now with the current transformation and font settings.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '方法 textWidth(text: String) 返回在当前变换和字体设置下绘制文本的宽度。'
