- en: Intro to Racket
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Racket 简介
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Notice that in the previous page, there was little mention of [programming languages](http://en.wikipedia.org/wiki/Programming_language).
    That's because in the grand scheme of things, programming languages don't matter.
    They only matter because, for any given problem, one language might let us solve
    the problem in fewer lines of code over another, or one language might let us
    solve the problem more efficiently, and so on.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前一页中，几乎没有提到[编程语言](http://en.wikipedia.org/wiki/Programming_language)。这是因为在整个事物的大局中，编程语言并不重要。它们只重要是因为对于任何给定的问题，一种语言可能比另一种语言更少的代码行数来解决问题，或者一种语言可能让我们更有效地解决问题，等等。
- en: What of the problem of teaching computer science? Which language should we use
    for that? We have chosen Racket, a dialect of [Lisp](http://en.wikipedia.org/wiki/Lisp_programming_language).
    We'll show basics of the language today, after which you can start thinking about
    computer science. As you learn more computer science, we'll incrementally show
    you more of the language.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如何教授计算机科学的问题呢？我们应该使用哪种语言？我们选择了 Racket，这是[Lisp](http://en.wikipedia.org/wiki/Lisp_programming_language)的一个方言。今天我们将展示语言的基础知识，之后您可以开始思考计算机科学。随着您学习更多计算机科学知识，我们将逐步向您展示更多语言的内容。
- en: Let's begin.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始。
- en: Basic Rules
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本规则
- en: In Racket, parentheses (also known as *parens*) matter.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Racket 中，括号（也称为*括号*）很重要。
- en: When you ask a procedure to perform its action, you *call* it. This is also
    called *invoking* a procedure. Whenever you invoke a procedure, you must wrap
    the procedure call (the call to the procedure) in a set of parentheses.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你要求一个过程执行其操作时，你会*调用*它。这也被称为*调用*一个过程。每当你调用一个过程时，你必须将过程调用（对过程的调用）包裹在一对括号中。
- en: 'Everytime we invoke a procedure, we must follow **prefix notation**: the name
    of the procedure we''re invoking is always the leftmost item in the parentheses.
    All of the other things are *arguments* to that procedure—things we feed in to
    the procedure in order to get our answer.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次我们调用一个过程时，我们必须遵循**前缀表示法**：我们调用的过程的名称始终是括号中最左边的项目。所有其他项目都是该过程的*参数*—我们向该过程提供的用于得到答案的东西。
- en: 'Here''s an example of an expression that demonstrates the three rules above:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个演示上述三条规则的表达式示例：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we're feeding the arguments `1` and `2` into the procedure
    `+`, which adds numbers. We should expect the answer to be 3.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将参数`1`和`2`传递给加法过程`+`，它会将数字相加。我们应该期望答案是3。
- en: The Racket Interpreter
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Racket 解释器
- en: Of course, a language is no good if no one speaks it. For programming languages,
    the dialog is usually between the programmer and a computer. An **interpreter**
    is a program that translates a particular language into actions and computations
    that the computer performs. Interpreters are one way to make computers do things,
    such as computing large prime numbers or counting all the distinct words used
    in all of Shakespeare's plays.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果没有人说这种语言，那这种语言就没用了。对于编程语言来说，对话通常发生在程序员和计算机之间。**解释器**是一个将特定语言转换为计算机执行的操作和计算的程序。解释器是让计算机执行任务的一种方式，比如计算大素数或计算莎士比亚所有剧本中使用的所有不同单词。
- en: Let's start our Racket interpreter. We do this by opening a terminal and then
    typing in `racket` and hitting Enter. You've just started the Racket interpreter!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始我们的 Racket 解释器。我们通过打开一个终端，然后输入`racket`并按回车键来做到这一点。您刚刚启动了 Racket 解释器！
- en: 'You can now type Racket expressions for the interpreter to evaluate:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以输入 Racket 表达式以供解释器评估：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What Will Racket Output?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Racket 会输出什么？
- en: Type each example below into the interpreter to try it out. Before entering
    each example, take a moment and think about what the output should be. Some of
    these examples cause errors—why do they do that? (If something errors, the interpreter
    will output an error message.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将下面的每个示例输入解释器以尝试它。在输入每个示例之前，花点时间思考输出应该是什么。其中一些示例会导致错误—为什么会这样？（如果出现错误，解释器将输出错误消息。）
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Takeaways
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this section, we learned the basics of Racket. We also tried our hands at
    the Racket interpreter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们学习了 Racket 的基础知识。我们也尝试了 Racket 解释器。
