- en: Leftist Heaps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 左偏堆
- en: Representation
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 表示
- en: For simplicity, we'll continue to work with heaps of `Int`s. A node `T r i a
    b` contains its rank `r`, which is the length of its rightmost spine.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为简单起见，我们将继续使用`Int`堆。节点`T r i a b`包含其等级`r`，即其最右脊柱的长度。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Helper functions for leftist heaps:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 左偏堆的辅助函数：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Invariants
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 不变性
- en: '*∀`h`. (`value(h)` ≤ `value(left(h))`) ∧ (`value(h)` ≤ `value(right(h))`)*'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*∀`h`. (`value(h)` ≤ `value(left(h))`) ∧ (`value(h)` ≤ `value(right(h))`)*'
- en: '*∀`h`. `rank(left(h))` ≥ `rank(right(h))`*'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*∀`h`. `rank(left(h))` ≥ `rank(right(h))`*'
- en: '**In-Class Exercise**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**课堂练习**'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Prove: *∀`h`. `rank(h)` = `r` ⇒ `size(h)` ≥ `2^r - 1`*'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证明：*∀`h`. `rank(h)` = `r` ⇒ `size(h)` ≥ `2^r - 1`*
- en: 'Prove: *∀`h`. `size(h)` = `n` ⇒ `rank(h)` ≤ `log(floor(n+1)))`*'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证明：*∀`h`. `size(h)` = `n` ⇒ `rank(h)` ≤ `log(floor(n+1)))`*
- en: Thus, the right spine of a leftist heap `h` of size `n` has *O(`log n`)* elements.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，大小为`n`的左偏堆`h`的右脊柱具有*O(`log n`)*个元素。
- en: Merging
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 合并
- en: Unlike for regular min-heaps, merging leftist heaps runs quickly (faster than
    *O(n)*) by taking advantage of the fact that right spines are short (*O(log n)*).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与常规最小堆不同，左偏堆的合并速度很快（快于*O(n)*），因为利用了右脊柱短小（*O(log n)*）的事实。
- en: The helper function `makeT` creates a `T` node that stores `x` and positions
    `h1` and `h2` as its children depending on their rank.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助函数`makeT`创建一个存储`x`并根据其等级将`h1`和`h2`定位为其子节点的`T`节点。
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The following is an equivalent definition of `makeT`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`makeT`的等效定义。
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `merge` function combines two non-empty heaps by choosing the smaller of
    their two minimum values and recursively merging, using `makeT` to place "heavier"
    subtrees to the left.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`merge`函数通过选择两个最小值中较小的一个并递归合并来组合两个非空堆，使用`makeT`将“更重”的子树放在左侧。'
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `makeT` function runs in *O(1)* time. The running time of `merge` is dominated
    by its recursive calls. Let *n* be the size of the larger of the two heaps. The
    leftist property ensures that the right spine of each heap has *O(log n)* elements.
    Because the recursive calls traverse the right spine of one of the input heaps,
    there are at most *O(log n)* recursive calls, each of which performs *O(1)* work.
    Therefore, `merge` runs in *O(log n)* time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`makeT`函数在*O(1)*时间内运行。`merge`的运行时间由其递归调用主导。设* n *为两个堆中较大堆的大小。左偏性质确保每个堆的右脊柱具有*O(log
    n)*个元素。因为递归调用遍历其中一个输入堆的右脊柱，所以最多有*O(log n)*个递归调用，每个调用执行*O(1)*的工作。因此，`merge`在*O(log
    n)*时间内运行。'
- en: Rest of Interface
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 接口的其余部分
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Insertion and deletion can be defined in terms of `merge`, so each runs in *O(log
    n)* time.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 插入和删除可以根据`merge`来定义，因此每个操作都在*O(log n)*时间内运行。
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Implementing the rest of the heap abstraction is straightforward.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实现堆抽象的其余部分是直接的。
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Our implementation ([`LeftistHeaps.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/LeftistHeaps.elm))
    exports the same type signatures as the vanilla implementation of min-heaps from
    before.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实现（[`LeftistHeaps.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/LeftistHeaps.elm)）导出与以前的最小堆基本相同的类型签名。
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice how sequences of `insert`s pile up elements heavily to the left.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`insert`序列如何将元素大量堆积到左侧。
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Reading
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: Required
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 必需
- en: Okasaki, Chapter 3.1
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Okasaki，第3.1章
