- en: Classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类
- en: To create an object in OOP, you need to **instantiate** a class. `matt-account`
    and `brian-account` are part of an "account" **class**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要在面向对象编程中创建对象，您需要**实例化**一个类。`matt-account`和`brian-account`是“account”**类**的一部分。
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `instantiate` function takes a class as its first argument and returns
    a new object of that class. `instantiate` may require additional arguments depending
    on the particular class: in this example, you must specify an account''s initial
    balance when you create it.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`instantiate`函数以其第一个参数作为类，并返回该类的新对象。`instantiate`可能需要根据特定类的不同而需要额外的参数：在这个例子中，创建账户时必须指定账户的初始余额。'
- en: Defining a Class
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义一个类
- en: 'Most of the code in an object-oriented program consists of definitions of various
    classes. A class can be treated as a blueprint for a certain kind of object: "What
    should objects of these type be able to do? What variables should each of them
    know?". Below is the definition of account class. We will implement only one method
    right now and add on to it later. There is a lot to say about this code and we
    will explain them one by one.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象程序中的大部分代码都是各种类的定义。一个类可以被视为某种对象的蓝图：“这种类型的对象应该能做什么？每个对象应该知道什么变量？”下面是账户类的定义。我们现在只实现一个方法，以后会添加更多内容。关于这段代码有很多要说的，我们会逐一解释。
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`define-class`'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`define-class`'
- en: 'There''s a new special form, define-class. The syntax of define-class is analogous
    to that of define. Where you would expect to see the name of the procedure you''re
    defi ning comes the name of the class you''re defi ning. In place of the parameters
    to a procedure come the initialization variables of the class: these are local
    state variables whose initial values must be given as the extra arguments to instantiate.
    In the example below, the initialization variable "balance" is set to 1000.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个新的特殊形式，`define-class`。`define-class`的语法类似于`define`的语法。在你期望看到你正在定义的过程的名称的地方，是你正在定义的类的名称。在过程的参数位置，是类的初始化变量：这些是必须作为额外参数给出的本地状态变量的初始值。在下面的例子中，初始化变量“balance”设置为1000。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The body of a class consists of any number of clauses; in this example there
    is only one kind of clause, the method clause, but we'll learn about others later.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 类的主体由任意数量的子句组成；在这个例子中只有一种类型的子句，即方法子句，但我们以后会学习其他类型的子句。
- en: Method
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法
- en: The syntax for defi ning methods was also chosen to resemble that of de fining
    procedures. The "name" of the method is actually the message used to access the
    method. When we say `(ask matt-account 'deposit 50)`, we are essentially saying
    "In `matt-account`, find the method with the name 'deposit and call that method
    with argument 50". In other words, `matt-account` will call `(deposit 50)` .
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 定义方法的语法也被选择为类似于定义过程的语法。方法的“名称”实际上是用于访问方法的消息。当我们说`(ask matt-account 'deposit
    50)`时，实质上是说“在`matt-account`中，找到名称为'deposit的方法，并用参数50调用该方法”。换句话说，`matt-account`将调用`(deposit
    50)`。
- en: 'With the class definition we have now, we can actually do `(ask matt-account
    ''balance)`. Some might say: "But we did not have any method definition for balance
    yet!" That is true, but the above code still works. For each local state variable
    in a class, a corresponding method of the same name is de fined automatically.
    These methods have no arguments, and they just return the current value of the
    variable with that name. Because we have state variable `balance` when we instantiate
    `matt-account`, we have a method of the same name ''balance for free. This is
    one way we can create a `state;` we will see an alternative for this later.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们现在的类定义，我们实际上可以执行`(ask matt-account 'balance)`。有些人可能会说：“但我们还没有为余额定义任何方法！”这是真的，但上面的代码仍然有效。对于类中的每个局部状态变量，都会自动定义一个同名的方法。这些方法没有参数，它们只返回该名称变量的当前值。因为我们在实例化`matt-account`时有状态变量`balance`，所以我们免费获得了同名的方法'balance。这是我们可以创建`state`的一种方式；我们将看到稍后的另一种方法。
- en: SET!
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SET!
- en: In the body of `deposit`, we've introduced a new procedure, `set!` This procedure
    changes the value of a state variable. Its first argument is unevaluated; it is
    the name of the variable whose value you wish to change. The second argument is
    evaluated; the value of this expression becomes the new value of the variable.
    set! changes the value of a variable, but does not return anything.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在`deposit`的主体中，我们引入了一个新的过程，`set!`。这个过程改变了状态变量的值。它的第一个参数是未求值的；它是你希望改变值的变量的名称。第二个参数是已求值的；这个表达式的值成为变量的新值。`set!`改变了变量的值，但不返回任何东西。
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The "!" in "set!" is a convention in Scheme for functions that mutate something
    (just like the convention that procedures ending in "?" return #t or #f).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '"set!"中的"!"是Scheme中用于改变某些东西的函数的约定（就像以"?"结尾的过程返回#t或#f的约定一样）。'
- en: '**Test Your Understanding**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: 'This looks a lot like define, but the meaning is slightly different. Define
    creates a new variable, while set! changes the value of an existing variable.
    Take a look at the code below:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来很像define，但意义略有不同。Define创建一个新变量，而set!更改现有变量的值。看一下下面的代码：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What is the value of `a` now?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`a`的值是多少？
- en: 'Instead, we decided to execute the following piece of code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们决定执行以下代码片段：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What is the value of `a` now?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`a`的值是多少？
- en: What happens if we try to `set!` a variable that is not defined?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试`set!`一个未定义的变量会发生什么？
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Try it out on the STk interpreter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在STk解释器上试一试。
- en: Defining 'Withdraw' Methods
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义'Withdraw'方法
- en: We defined the `deposit` method, and now lets see how to define the `withdraw`
    method. Note that the order in which these methods appear in our class definition
    do not matter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了`deposit`方法，现在让我们看看如何定义`withdraw`方法。请注意，这些方法在类定义中出现的顺序并不重要。
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Again, `withdraw` is a method that takes in one argument, `amount`. If there
    is not enough money in `balance`, return "Insufficient Fund". Otherwise, reduce
    `balance` by `amount` and return the remaining `balance`. We are using a new special
    form, `begin`. What does it actually do?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，`withdraw`是一个接受一个参数`amount`的方法。如果`balance`中没有足够的钱，则返回"资金不足"。否则，减少`balance`的值并返回剩余的`balance`。我们正在使用一个新的特殊形式，`begin`。它实际上是做什么？
- en: Where Should I Begin?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我应该从哪里开始？
- en: Imagine if we **don't** use the `begin` special-form. What do you think will
    happen?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果我们**不**使用`begin`特殊形式。你认为会发生什么？
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`if` only accepts 3 arguments: a condition, then-case, and else-case. If we
    don''t use `begin`, we will have **four** arguments and the interpreter will throw
    an error. Until now, in every procedure we''ve evaluated only one expression,
    to provide the return value of that procedure. It''s still the case that a procedure
    can only return one value. Now, though, we sometimes want to evaluate an expression
    for what it does instead of what it returns, e.g. changing the value of a variable.
    The call to `begin` indicates that the `(set! amount (- amount balance))` and
    the `balance` together form a single argument to if.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`只接受3个参数：一个条件，然后情况，和否则情况。如果我们不使用`begin`，我们将有**四**个参数，解释器会抛出错误。到目前为止，在每个过程中，我们只评估一个表达式，以提供该过程的返回值。然而，一个过程仍然只能返回一个值。现在，有时我们想要评估一个表达式的执行而不是返回值，例如改变一个变量的值。对`begin`的调用表明`(set!
    amount (- amount balance))`和`balance`一起形成if的单个参数。'
- en: In the next section, we'll go over how a class can inherit properties from another
    class.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论一个类如何从另一个类继承属性。
