- en: Booleans and Predicates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布尔值和谓词
- en: 'Booleans: True and False'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔值：真和假
- en: '**Booleans** are formally defined as a binary variable that has only two possible
    values: "true" and "false". These are extremely useful when expressing *conditionals*,
    or instructions for choosing an action based on the results of a test. A logical
    example of this would be: If we''re out of milk, then go to the store. Else, add
    milk to our cereal and enjoy.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**布尔值**在形式上被定义为只有两个可能值的二进制变量：“真”和“假”。 在表达*条件*或根据测试结果选择操作的指令时，这些非常有用。 一个逻辑的例子是：如果我们缺少牛奶，那么去商店。
    否则，加牛奶到我们的谷物中并享用。'
- en: In order to test whether or not we are out of milk, we'll need to use booleans.
    Racket's "true" is represented by `#t` or `true`, while "false" is represented
    by `#f` or `false`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们是否缺少牛奶，我们需要使用布尔值。 Racket中的“真”用`#t`或`true`表示，而“假”用`#f`或`false`表示。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Predicates
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谓词
- en: A function that, when called, returns either `true` or `false` is called a **predicate**.
    For example, `even?` is a predicate used to test whether a number is even.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用时返回`true`或`false`的函数称为**谓词**。 例如，`even?`是一个用于测试一个数字是否为偶数的谓词。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Predicates will NEVER return a value other than `#t` or `#f`. Below is a list
    of some useful predefined predicates in Racket. This list is in no way comprehensive,
    and you will definitely discover many more predicates in future lesson.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词永远不会返回除`#t`或`#f`之外的值。 下面是Racket中一些有用的预定义谓词列表。 这个列表并不全面，您肯定会在未来的课程中发现更多的谓词。
- en: Mathematical Operators
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学运算符
- en: 'Racket has the standard mathematical operators that you will need to compare
    numerical values:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Racket具有您需要比较数值的标准数学运算符：
- en: '`<` will return `#t` if the first argument is less than the second.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<` 如果第一个参数小于第二个参数，则返回`#t`。'
- en: '`>` will return `#t` if the first argument is greater than the second.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>` 如果第一个参数大于第二个参数，则返回`#t`。'
- en: '`=` will return `#t` if the two arguments are equal.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`=` 如果两个参数相等，则返回`#t`。'
- en: '`<=` will return `#t` if the first argument is less than or equal to the second.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<=` 如果第一个参数小于或等于第二个参数，则返回`#t`。'
- en: '`>=` will return `#t` if the first argument is greater than or equal to the
    second.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>=` 如果第一个参数大于或等于第二个参数，则返回`#t`。'
- en: '**WARNING:** These predicates will only work on **numbers**. Using these to
    compare words, sentences, or any other type of value will produce errors.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告：** 这些谓词仅适用于**数字**。 使用这些谓词来比较单词、句子或任何其他类型的值将产生错误。'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`member?`'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`member?`'
- en: '`member?`, when given a letter and a word, returns `#t` if the word contains
    the letter, and `#f` otherwise. When `member?` is given a word and a sentence,
    it returns `#t` if the sentence contains the word, and `#f` otherwise.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`member?`，当给定一个字母和一个单词时，如果单词包含该字母，则返回`#t`，否则返回`#f`。 当`member?`给定一个单词和一个句子时，如果句子包含该单词，则返回`#t`，否则返回`#f`。'
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`empty?`'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`empty?`'
- en: The predicate `empty?` takes in one argument of any type and returns `#t` if
    the argument is the empty word `""` or the empty sentence `'()`, and `#f` otherwise.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词`empty?`接受任意类型的一个参数，并在参数为空单词`""`或空句子`'()`时返回`#t`，否则返回`#f`。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`equal?`'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`equal?`'
- en: '`equal?` takes in two arguments of any type and returns `#t` if they are the
    same, and `#f` otherwise.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`equal?` 接受两个任意类型的参数，并在它们相同时返回`#t`，否则返回`#f`。'
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Type Checkers
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型检查器
- en: 'Racket also provides predicates that check whether a value is of a particular
    type:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Racket还提供了检查值是否属于特定类型的谓词：
- en: '`number?` checks if a value is a number.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number?` 检查一个值是否为数字。'
- en: '`word?` checks if a value is a word.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`word?` 检查一个值是否为单词。'
- en: '`sentence?` checks if a value is a sentence.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sentence?` 检查一个值是否为句子。'
- en: '`boolean?` checks if a value is a boolean.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean?` 检查一个值是否为布尔值。'
- en: Compound Procedures as Predicates
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为谓词的复合过程
- en: 'You can most definitely create your own predicates, since they are in fact
    procedures. For example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您绝对可以创建自己的谓词，因为它们实际上是过程。 例如：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`vowel?` checks whether its argument letter is a vowel.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`vowel?` 检查其参数字母是否是元音字母。'
- en: '**Test Your Understanding**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: '**Note:** This is Exercise 2 on your Homework.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 这是你的作业中的第2题。'
- en: Write a predicate called `teen?` that takes in a number as its argument and
    returns `#t` if the number is between 13 and 19, inclusive.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`teen?`的谓词，它以一个数字作为参数，并在数字介于13和19之间（包括13和19）时返回`#t`。
- en: Everything That Isn't False is True
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 除了假之外的一切都是真
- en: 'When evaluating whether or not an expression is true or false, it is important
    to remember that anything is considered true unless it is false. This means that
    all numbers, words, sentences, and procedures are true, even `""`, `''()`, and
    `0`. Here are some counter-intuitive examples to consider:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估表达式是真还是假时，重要的是要记住，除非是假，否则任何东西都被视为真。这意味着所有数字、单词、句子和过程都是真的，甚至包括 `""`、`'()`
    和 `0`。以下是一些令人费解的例子：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Logical Operators
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: We can also use logical operations in Racket.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在 Racket 中使用逻辑运算。
- en: '`and`'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`and`'
- en: '`and` is a predicate that any number of arguments of any type. It returns the
    last element if everything was not false, and returns `#f` otherwise. For example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`and` 是一个谓词，接受任意数量的任何类型的参数。如果所有参数都不是假的，它将返回最后一个元素，否则返回 `#f`。例如：'
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`or`'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`or`'
- en: '`or` is a predicate that takes any number of arguments of any type. It and
    returns the first true element, and returns `#f` otherwise. For example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`or` 是一个谓词，接受任意数量的任何类型的参数。它返回第一个真元素，否则返回 `#f`。例如：'
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`not`'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`not`'
- en: '`not` takes a single argument of any type simply negates the argument that
    it takes in. For example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`not` 接受任何类型的单个参数，简单地否定它所接受的参数。例如：'
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`nand`'
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`nand`'
- en: '`nand` is equivalent to `(not (and ...`. For example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`nand` 等同于 `(not (and ...`。例如：'
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`nor`'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`nor`'
- en: '`nor` is, you guessed it, equivalent to `(not (or ...`. For example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`nor` 就是你猜到的，等同于 `(not (or ...`。例如：'
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`xor`'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`xor`'
- en: '`xor` takes two arguments of any type and, if exactly one (no more or less)
    of its arguments is not `#f`, return that argument. Otherwise, return `#f`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`xor` 接受任何类型的两个参数，如果恰好一个（不多不少）参数不是 `#f`，则返回该参数。否则，返回 `#f`。'
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
