- en: Operators time
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作符时间
- en: Operators time
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作符时间
- en: This is not an easy topic. There are many areas of application here, either
    you might want to synchronize responses from APIS or you might want to deal with
    other types of streams such as events like clicks or keyup in a UI.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个简单的话题。这里有许多应用领域，你可能想要同步来自 API 的响应，或者你可能想要处理其他类型的流，比如 UI 中的点击或键盘按键事件。
- en: There are plenty of operators dealing with time in some way such as `delay`
    `debounce` `throttle` `interval` etc.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多处理时间的操作符，如`delay` `debounce` `throttle` `interval` 等。
- en: This is not an easy topic. There are many areas of application here, either
    you might want to synchronize responses from APIS or you might want to deal with
    other types of streams such as events like clicks or keyup in a UI.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个简单的话题。这里有许多应用领域，你可能想要同步来自 API 的响应，或者你可能想要处理其他类型的流，比如 UI 中的点击或键盘按键事件。
- en: interval
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 间隔
- en: 'This operator is used to construct an Observable and essentially what it does
    is to pump values at regular interval, signature:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作符用于构建一个 Observable，它的本质是定期泵送值，签名：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Example usage:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Because this one will generate values forever you tend to want to combine it
    with the `take()` operator that limits the amount of values to generate before
    calling it quits so that would look like :'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个操作符会永远生成值，你往往希望将它与 `take()` 操作符结合使用，限制生成值的数量，然后结束调用，看起来像这样：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: timer
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计时器
- en: Timer is an interesting one as it can act in several ways depending on how you
    call it. It's signature is
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 计时器是一个有趣的操作符，它可以根据调用方式的不同而以几种方式起作用。它的签名是
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: However only the initial args is mandatory so depending on the number of args
    used these are the different types that exist because of it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，只有初始参数是必需的，因此根据使用的参数数量，由此产生了不同类型的操作符。
- en: '**one-off**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**一次性**'
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This becomes a one-ff as we don't define when the next value should happen.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这变成了一个一次性的操作，因为我们没有定义下一个值应该何时发生。
- en: '**with 2nd arg specified**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**指定第二个参数**'
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So this one is more flexible and keeps emitting values according to 2nd argument.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这个更灵活，根据第二个参数继续发射值。
- en: delay
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 延迟
- en: '`delay()` is an operator that delays every value being emitted Quite simply
    it works like this :'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`delay()` 是一个延迟发射每个值的操作符，简单来说它的工作原理如下：'
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Business case
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务案例
- en: 'Delay can be used in a multitude of places but one such good case is when handling
    errors especially if we are dealing with `shaky connections` and want it to retry
    the whole stream after x miliseconds:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟可以在多个地方使用，但一个很好的例子是在处理错误时，特别是如果我们正在处理`不稳定的连接`并希望在 x 毫秒后重试整个流程：
- en: Read more in chapter [Error handling](error-handling.html)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在[错误处理](error-handling.html)章节中阅读更多
- en: sample
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽样
- en: I usually think of this scenario as *talk to the hand*. What I mean by that
    is that events are only fired at specific points
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常把这种情况想象成*对手说话*。我的意思是事件只在特定的时间点触发
- en: Business case
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务案例
- en: So the ability to ignore events for x miliseconds is pretty useful. Imagine
    a save button being repeatedly pushed. Wouldn't it be nice to only act after x
    miliseconds and ignore the other pushes ?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，忽略 x 毫秒内的事件是非常有用的。想象一下一个保存按钮被反复按下。只有在 x 毫秒后才执行并忽略其他的按下，这不是很好吗？
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The code above does just that.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码就是这样做的。
- en: debounceTime
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: debounceTime
- en: 'So `debounceTime()` is an operator that tells you: I will not emit the data
    all the time but at certain intervals.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`debounceTime()` 是一个告诉你：我不会一直发射数据，而是在一定的时间间隔内发射数据的操作符。
- en: Business case
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务案例
- en: Debounce is a known concept especially when you type keys on a keyboard. It's
    a way of saying we don't care about every keyup but once you stop typing for a
    while we should care. That, is how you would normally start an auto complete.
    Say your user hasn't typed for x miliseconds that probably means we should be
    doing an ajax call and retrieve a result.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Debounce 是一个众所周知的概念，特别是当你在键盘上输入按键时。这是一种说法，我们不关心每次按键抬起，但是一旦你停止输入一段时间，我们应该关心。这通常是你开始自动完成的方式。比如，如果用户
    x 毫秒内没有输入，那可能意味着我们应该进行一个 ajax 调用并获取结果。
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The following only outputs a value, from our input field, after you stopped
    typing for 500ms, then it's worth reporting about it, i.e emit a value.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下只在你停止输入 500 毫秒后输出一个值，然后值得报告一下，即发射一个值。
- en: throttleTime
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节流时间
- en: TODO
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: buffer
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓冲
- en: This operator has the ability to record x number of emitted values before it
    outputs its values, this one comes with one or two input parameters.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作符有能力在输出值之前记录 x 个发射的值，这个操作符带有一个或两个输入参数。
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So what does this mean? It means given we have for example a click of streams
    we can cut it into nice little pieces where every piece is equally long. Using
    the first version with one parameter we can give it a time argument, let''s say
    500 ms. So something emits values for 500ms then the values are emitted and another
    Observable is started, and the old one is abandoned. It''s much like using a stopwatch
    and record for 500 ms at a time. Example :'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这意味着什么？这意味着假设我们有一个点击流，我们可以将其切割成漂亮的小块，每个块的长度都相同。使用第一个带有一个参数的版本，我们可以给它一个时间参数，比如
    500 毫秒。因此，某个东西在 500 毫秒内发出值，然后这些值被发出，另一个 Observable 开始，旧的被抛弃。这很像使用秒表并每次记录 500 毫秒。示例：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Marble diagram
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 弹珠图
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Business case
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务案例
- en: 'So whats the business case for this one? `double click`, it''s obviously easy
    to react on a `single click` but what if you only want to perform an action on
    a `double click` or `triple click`, how would you write code to handle that? You
    would probably start with something looking like this :'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这个案例的业务需求是什么呢？`双击`，显然对 `单击` 做出反应很容易，但如果你只想在 `双击` 或 `三连击` 上执行某个操作，你该如何编写处理代码呢？你可能会从以下代码开始：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Look at the above as an attempt at pseudo code. The point is that you need to
    keep track of a bunch of variables of how much time has passed between clicks.
    This is not nice looking code, lacks elegance
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述视为伪代码的尝试。关键是你需要跟踪一堆变量，记录点击之间经过了多长时间。这不是看起来很好的代码，缺乏优雅。
- en: Model in Rxjs
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Rxjs 中的模型
- en: By now we know Rxjs is all about streams and modeling values over time. Clicks
    are no different, they happen over time.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们知道 Rxjs 是关于流和随时间建模值的。点击也不例外，它们随时间发生。
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We however care about the clicks when they appear close together in time, i.e
    as double or triple clicks like so :'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们只关心点击在时间上接近时的情况，即双击或三连击，如下所示：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: From the above stream you should be able to deduce that a `double click`, one
    `triple click` and one `single click` happened.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述流中，你应该能够推断出发生了一次 `双击`，一次 `三连击` 和一次 `单击`。
- en: 'So let''s say I do, then what? You want the stream to group itself nicely so
    it tells us about this, i.e it needs to emit these clicks as a group. `filter()`
    as an operator lets us do just that. If we define let''s say 300ms is a long enough
    time to collect events on, we can slice up our time from 0 to forever in chunks
    of 300 ms with the following code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如果我这样做了，接下来呢？你希望流能够很好地分组，以便告诉我们这一点，即它需要将这些点击作为一组发出。`filter()` 作为一个操作符让我们可以做到这一点。如果我们定义
    300 毫秒足够长的时间来收集事件，我们可以将我们的时间从 0 到永远切割成 300 毫秒的块，代码如下：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Read the code in the following way, the buffer stream, `clicks$` will emit its
    values every 300ms, 300 ms is decided by `scissor$` stream. So the `scissor$`
    stream is the scissor, if you will, that cuts up our click stream and voila we
    have an elegant `double click` approach. As you can see the above code captures
    all types of clicks but by uncommenting the `filter()` operation we get only `double
    clicks` and `triple clicks`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下方式阅读代码，缓冲流 `clicks$` 将每隔 300 毫秒发出其值，300 毫秒由 `scissor$` 流决定。因此 `scissor$`
    流就像是剪刀，切割我们的点击流，然后我们就有了一个优雅的 `双击` 方法。正如你所看到的，上述代码捕获了所有类型的点击，但通过取消注释 `filter()`
    操作，我们只得到 `双击` 和 `三连击`。
- en: '`filter()` operator can be used for other purposes as well like recording what
    happened in a UI over time and replay it for the user, only your imagination limits
    what it can be used for.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter()` 操作符也可以用于其他用途，比如记录 UI 中发生的事件并为用户重放，只有你的想象力限制了它的用途。'
