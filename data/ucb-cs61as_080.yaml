- en: Lesson 7 Intro
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7课简介
- en: 'IMPORTANT: Welcome to Scheme'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重要提示：欢迎来到Scheme
- en: '**At this point onwards, we will be using the Scheme language.** If you''re
    reading this message, that means that we are still working on transitioning to
    Racket on this section. The following lesson and all lessons afterwards will be
    from our old curriculum, and is written in Scheme.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**从现在开始，我们将使用Scheme语言。** 如果您正在阅读此消息，这意味着我们仍在努力过渡到本节的Racket。以下课程以及之后的所有课程将来自我们的旧课程，并且是用Scheme编写的。'
- en: See [this guide](https://docs.google.com/document/d/1SMi4VZtL308zscmrpz5nClO1Kg0ZnDXc4R1wMBTsgsE/edit?usp=sharing)
    for instructions on setting up your laptop with STk.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[此指南](https://docs.google.com/document/d/1SMi4VZtL308zscmrpz5nClO1Kg0ZnDXc4R1wMBTsgsE/edit?usp=sharing)以获取有关如何在笔记本电脑上设置STk的说明。
- en: 'For our lessons, the semantics for Scheme are nearly identical, except for
    these major differences:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的课程，Scheme的语义几乎相同，除了以下主要差异：
- en: To run the STk interpreter, type `stkw` or `stk-simply` into the terminal. If
    you have a Windows computer, only `stk-simply` will work.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要运行STk解释器，请在终端中键入`stkw`或`stk-simply`。如果您使用的是Windows计算机，则只有`stk-simply`会起作用。
- en: Instead of `require`-ing a file, you should `load` it. For example, typing `(load
    "hw7.scm")` into the interpreter will load the file into STk.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要使用`require`来引入文件，而应该使用`load`。例如，将`(load "hw7.scm")`键入到解释器中将会将文件加载到STk中。
- en: Multiple definitions are allowed. In your `.scm` file, Scheme will allow you
    to define functions twice, and will also allow you to define functions that override
    built-in functions, e.g., `(define (map f lst) 5)` will override the `map` HOF.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许多个定义。在您的`.scm`文件中，Scheme允许您两次定义函数，并且还允许您定义覆盖内置函数的函数，例如，`(define (map f lst)
    5)`将覆盖`map`高阶函数。
- en: Of course, the differences between STk and Racket are not limited to these,
    but the ones above are the differences that you absolutely need to know.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，STk和Racket之间的差异不仅限于这些，但上述差异是您绝对需要了解的。
- en: Thank you for your patience!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您的耐心！
- en: Object Oriented Programming (OOP)
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）
- en: One of the main advantages of using generic operators is that new modules can
    be designed and added to pre-existing modules without modifying the pre- existing
    code. Object oriented programming is another technique that has this advantage.
    This is the second major programming paradigm that we are studying, after functional
    programming.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用通用运算符的主要优势之一是可以设计新模块并将其添加到现有模块中，而无需修改现有代码。面向对象编程是另一种具有这种优势的技术。这是我们学习的第二种主要编程范式，继续函数式编程之后。
- en: The Big Idea of object oriented programming is to have data that knows how to
    perform computations on itself. For example, a number could be represented as
    an object that knows how to be added to, subtracted from, multiplied with, or
    divided by another number. This allows programmers to build modules independently.
    To create a new data representation, a programmer creates a class, which is like
    a blueprint for objects, that specifies the data to be stored in an object of
    that class, and what computations can be performed on such objects. The three
    main ideas that make object-oriented programming possible are message passing,
    local state and inheritance.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程的重要思想是让数据知道如何对自身进行计算。例如，一个数字可以被表示为一个对象，该对象知道如何与另一个数字相加、相减、相乘或相除。这使得程序员可以独立构建模块。要创建新的数据表示，程序员创建一个类，类似于对象的蓝图，指定了存储在该类对象中的数据，以及可以在这些对象上执行的计算。使面向对象编程成为可能的三个主要思想是消息传递、局部状态和继承。
- en: 'In order to use the OOP language in Sublime, you must first enter the following
    into the Stk interpreter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Sublime中使用OOP语言，您必须首先在Stk解释器中输入以下内容：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Afterwards, you will be able to call `define-class` and `ask` as necessary.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您将能够根据需要调用`define-class`和`ask`。
- en: Prerequisites
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: You need to be done with Unit 2, especially the subsection with "Data Directed"
    and "Message Passing".
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要完成第2单元，特别是“数据导向”和“消息传递”子章节。
- en: Readings
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读材料
- en: The majority of the content of this lesson is taken from [this note](http://inst.eecs.berkeley.edu/~cs61as/reader/aboveline.pdf).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程的大部分内容取自[此笔记](http://inst.eecs.berkeley.edu/~cs61as/reader/aboveline.pdf)。
- en: This is a [handy cheatsheet](https://docs.google.com/file/d/0B2F__e2jC6gQSHhBdERPZ0pVRG8/edit)
    we recommend you use for the homework and quiz.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个[方便的速查表](https://docs.google.com/file/d/0B2F__e2jC6gQSHhBdERPZ0pVRG8/edit)，我们建议您在作业和测验中使用。
- en: You should also check out the old lecture notes [here](http://www-inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=46).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该查看旧的讲座笔记[这里](http://www-inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf#page=46)。
- en: Objects
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象
- en: When we are coding in OOP, we are dealing with objects or "smart data" that
    know how to do operations internally and how to interact with other objects. For
    example, we can have an object `Fred` of type `human`. He internally knows how
    to eat other objects, say, `dumpling`. OOP then allows us to "Ask Fred to eat
    dumpling".
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 OOP 中编码时，我们处理的是对象或“智能数据”，它们知道如何在内部执行操作以及如何与其他对象交互。例如，我们可以有一个类型为 `human`
    的对象 `Fred`。他内部知道如何吃其他对象，比如说，`dumpling`。然后，OOP 允许我们“让 Fred 吃 dumpling”。
- en: Jargon
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行话
- en: Programmers who use OOP language have special vocabularies to describe different
    components of OOP. In the example above, `Fred` is an **instance** and the general
    category of `human` is a **class**.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用面向对象编程语言的程序员有特殊的词汇来描述 OOP 的不同组成部分。在上面的例子中，`Fred` 是一个 **实例**，而 `human` 的一般类别是一个
    **类**。
- en: Scheme does not natively support OOP, but we have an extension that provides
    OOP to Scheme. This lab will focus on "Above the Line" of abstraction for OOP.
    We will see how to design a class and make objects using the given framework.
    If you are interested in how OOP is actually implemented in Scheme, don't worry,
    one of our future lessons will cover exactly that.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme 不直接支持 OOP，但我们有一个提供 OOP 给 Scheme 的扩展。这个实验将专注于 OOP 的“上层”抽象。我们将看到如何设计一个类并使用给定的框架创建对象。如果你对
    OOP 在 Scheme 中是如何实现的感兴趣，不用担心，我们未来的课程将会详细介绍。
- en: Takeaways
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: 'In this subsection, you learned the general idea of the following terms:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，你学到了以下术语的一般概念：
- en: Object Oriented Programming (OOP)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）
- en: Object
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象
- en: Instance
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例
- en: Class
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类
- en: What's Next?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下一步是什么？
- en: It's time to learn how to play with OOP and define your own class!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候学习如何玩转面向对象编程（OOP）并定义自己的类了！
