- en: Don't Touch that Code!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要碰那段代码！
- en: Don't Touch that Code!
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要碰那段代码！
- en: It has happened to everyone of us at some point. Your code was rolled on to
    the staging server for system testing and the testing manager writes back that
    she has hit a problem. Your first reaction is "Quick, let me fix that — I know
    what's wrong."
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况每个人都遇到过。你的代码被部署到测试服务器进行系统测试，测试经理回复说她遇到了问题。你的第一反应是“快点，让我来修复 — 我知道怎么回事。”
- en: In the bigger sense, though, what is wrong is that as a developer you think
    you should have access to the staging server.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从更大的意义上讲，不对的是，作为一个开发者，你认为你应该访问测试服务器。
- en: 'In most web-based development environments the architecture can be broken down
    like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数基于Web的开发环境中，架构可以分解如下：
- en: Local development and unit testing on the developer's machine
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者的本地开发和单元测试。
- en: Development server where manual or automated integration testing is done
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发服务器，用于手动或自动集成测试。
- en: Staging server where the QA team and the users do acceptance testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试服务器，由 QA 团队和用户进行验收测试。
- en: Production server
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产服务器
- en: Yes, there are other servers and services sprinkled in there, like source code
    control and ticketing, but you get the idea. Using this model, a developer — even
    a senior developer — should never have access beyond the development server. Most
    development is done on a developer's local machine using their favorite blend
    of IDEs, virtual machines, and an appropriate amount of black magic sprinkled
    over it for good luck.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，那里还有其他的服务器和服务，比如源代码控制和票务，但你明白我的意思。按照这个模型，一个开发者 — 即使是一位高级开发者 — 不应该超出开发服务器的访问范围。大多数开发都是在开发者的本地机器上完成的，使用他们喜爱的IDE混合，虚拟机，并适量地撒上适当的黑魔法来祈求好运。
- en: Once checked into SCC, whether automatically or manually, it should be rolled
    over to the development server where it can be tested and tweaked if necessary
    to make sure everything works together. From this point on, though, the developer
    is a spectator to the process.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦自动或手动检入SCC，它应该被部署到开发服务器上，在那里可以测试和调整，如果需要确保一切配合良好。然而，从这一点开始，开发者就是这个过程的旁观者。
- en: The staging manager should package and roll the code to the staging server for
    the QA team. Just like developers should have no need to access anything beyond
    the development server, the QA team and the users have no need to touch anything
    on the development server. If it's ready for acceptance testing, cut a release
    and roll, don't ask the user to "Just look at something real quick" on the development
    server. Remember, unless you are coding the project by yourself, other people
    have code there and they may not be ready for the user to see it. The release
    manager is the only person who should have access to both.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 验收经理应该将代码打包并部署到测试服务器供 QA 团队使用。就像开发者不应该访问开发服务器之外的任何内容一样，QA 团队和用户也不需要触碰开发服务器上的任何东西。如果准备好进行验收测试，就发布并部署，不要让用户在开发服务器上“快速查看一下”。请记住，除非你独自编码项目，否则其他人也在那里编码，而他们可能还没准备好让用户看到。发布经理是唯一有权访问两者的人。
- en: Under no circumstances — ever, at all — should a developer have access to a
    production server. If there is a problem, your support staff should either fix
    it or request that you fix it. After it's checked into SCC they will roll a patch
    from there. Some of the biggest programming disasters I've been a part of have
    taken place because someone **cough**me**cough** violated this last rule. If it's
    broke, production is not the place to fix it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下 — 永远，无论如何 — 开发者都不应该访问生产服务器。如果出现问题，您的支持人员应该修复它或请求您修复它。在检入SCC后，他们将从那里部署补丁。我参与的一些最大的编程灾难之所以发生，是因为某人**咳咳**我**咳咳**违反了这个最后的规则。如果它坏了，生产环境不是修复的地方。
- en: by [Cal Evans](http://programmer.97things.oreilly.com/wiki/index.php/Cal_Evans)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Cal Evans](http://programmer.97things.oreilly.com/wiki/index.php/Cal_Evans)撰写
