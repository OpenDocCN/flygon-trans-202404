- en: Local States
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 局部状态
- en: Message Passing
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息传递
- en: The way to get things to happen in OOP is to "ask" them to do something for
    you. The manner in which we do this is similar to the "message passing" that we
    did in Lesson 6\. How do we do it in OOP vocabulary?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程中让事情发生的方式是“请求”它们为您执行某些操作。我们这样做的方式类似于我们在第6课中进行的“消息传递”。在面向对象编程的术语中，我们如何做到这一点？
- en: 'Let''s say we have two objects: **`Matt-Account`** and **`Brian-Account`**,
    which are instances of `bank-account` classes. They hold the amount of money that
    **Matt** and **Brian** have, respectively. (You can''t type this into Scheme just
    yet! We are going to assume we made the objects previously.)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有两个对象：**`Matt-Account`**和**`Brian-Account`**，它们是`bank-account`类的实例。它们分别持有**Matt**和**Brian**拥有的金额。（你现在还不能在Scheme中输入这些！我们假设之前已经创建了这些对象。）
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`ask`'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`ask`'
- en: 'We use the **`ask`** procedure to tell objects to carry out a certain action.
    In the example above, the bank account objects accepts 3 messages:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用**`ask`**过程告诉对象执行某个动作。在上面的例子中，银行账户对象接受3条消息：
- en: '`balance`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`balance`'
- en: '`deposit`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deposit`'
- en: '`withdraw`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`withdraw`'
- en: 'For each of the 3 messsages, the bank account objects know what actions need
    to be carried out. Notice that some messages require additional information:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这3条消息，银行账户对象知道需要执行哪些操作。请注意，有些消息需要额外的信息：
- en: For **balance**, it doesn't need any additional arguments. It returns the amount
    of money that account has.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**balance**，它不需要任何额外的参数。它返回账户中的金额。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For **deposit** and **withdraw**, we need one more argument to specify the amount
    we are depositing or withdrawing.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**deposit**和**withdraw**，我们需要另一个参数来指定我们要存入或取出的金额。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The metaphor is that an object "knows how" to do certain tasks. These tasks
    are called **methods**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个比喻是一个对象“知道如何”执行某些任务。这些任务被称为**方法**。
- en: '**Test Your Understanding**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: 'Suppose we have a bank account for Max, and we enter the following expressions:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个Max的银行账户，并输入以下表达式：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What is returned from the following expression?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下表达式返回什么？
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'What if, INSTEAD of the previous expression, we call this expression:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果，而不是之前的表达式，我们调用这个表达式：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: States
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态
- en: 'Consider these calls:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这些调用：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Test Your Understanding**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: We called `(ask matt-account 'balance)` several times, each with different values.
    What does this tell us about OOP?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们多次调用`(ask matt-account 'balance)`，每次返回不同的值。这告诉我们关于面向对象编程的什么？
- en: Both `matt-account` and `brian-account` returns how much money each person has.
    How does Matt's actions with his account (method calls to `matt-account`) affect
    Brian's account?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`matt-account`和`brian-account`都返回每个人拥有多少钱。Matt对他的账户的操作（对`matt-account`的方法调用）如何影响Brian的账户？'
- en: OOP Paradigm vs. Functional Programming Paradigm
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面向对象编程范式 vs. 函数式编程范式
- en: In the first question, we see that Matt's balance changes with each withdraw
    and deposit. This feels natural for us because that is how bank accounts work.
    But, with the functional programming paradigm that we've been using so far, we
    would expect the same call to return the same value.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个问题中，我们看到Matt的余额在每次取款和存款时都会发生变化。这对我们来说感觉很自然，因为这就是银行账户的工作方式。但是，根据我们迄今为止使用的函数式编程范式，我们期望相同的调用返回相同的值。
- en: In the OOP paradigm, the objects have **state**. That is, they have some knowledge
    about what has happened to them in the past. In this example, a bank account has
    a balance, which changes when you deposit or withdraw some money.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程范式中，对象具有**状态**。也就是说，它们对过去发生的事情有一些了解。在这个例子中，一个银行账户有一个余额，当你存款或取款时，余额会发生变化。
- en: Local State Variables
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 局部状态变量
- en: In the second question, we see that although Matt has his 'balance' and Brian
    has his 'balance' that never interfere with each other.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个问题中，我们看到尽管Matt有他的'balance'，Brian有他的'balance'，但它们互不干扰。
- en: In OOP jargon we say that 'balance' is a **local state variable **, or **instance
    variable**. An instance variable will have different values for different instances.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程术语中，我们说'balance'是一个**局部状态变量**，或者**实例变量**。实例变量对于不同的实例将具有不同的值。
- en: We can draw a parallel here with the definitions for
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里与以下定义进行类比
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: and
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Both definitions use x, but they are independent.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 两个定义都使用了x，但它们是独立的。
