- en: 'Lecture 25: Amortized Analysis'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讲座 25：摊销分析
- en: The claim that hash tables have *O*(1) expected performance for lookup and insert
    is based on the assumption that the number of elements stored in the table is
    comparable to the number of buckets. If a hash table has many more elements than
    buckets, the number of elements stored at each bucket will become large. For instance,
    with a constant number of buckets and *O*(*n*) elements, the lookup time is *O*(*n*)
    and not *O*(1).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希表具有*O*(1)的期望性能（用于查找和插入）的断言基于这样一个假设：存储在表中的元素数量与桶的数量相当。如果哈希表的元素比桶多得多，则存储在每个桶中的元素数量将变大。例如，如果桶的数量是常数，并且有*O*(*n*)个元素，则查找时间是*O*(*n*)而不是*O*(1)。
- en: The solution to this problem is to increase the size of the table when the number
    of elements in the table gets too large compared to the size of the table. If
    we let the <def>load factor</def> be the ratio of the number of elements to the
    number of buckets, when the load factor exceeds some small constant (typically
    2 for chaining and .75 for linear probing), we allocate a new table, typically
    double the size of the old table, and rehash all the elements into the new table.
    This operation is not constant time, but rather linear in the number of elements
    at the time the table is grown.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的解决方法是当表中元素的数量与表的大小相比变得太大时，增加表的大小。如果我们将<def>负载因子</def>定义为元素数与桶数的比率，当负载因子超过某个小常数（通常对于链接为2，对于线性探查为0.75）时，我们会分配一个新表，通常是旧表大小的两倍，并将所有元素重新哈希到新表中。这个操作不是恒定时间的，而是与表增长时的元素数量成线性关系。
- en: The linear running time of a resizing operation is not as much of a problem
    as it might sound (although it can be an issue for some real-time computing systems).
    If the table is doubled in size every time it is needed, then the resizing operation
    occurs with exponentially decreasing frequency. As a consequence, the insertion
    of *n* elements into an empty array takes only *O*(*n*) time in all, including
    the cost of resizing. We say that the insertion operation has *O*(1) <def>amortized
    run time</def> because the time required to insert an element is *O*(1) *on average*,
    even though some elements trigger a lengthy rehashing of all the elements of the
    hash table.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 调整大小操作的线性运行时间并不像听起来的那么严重（尽管对于某些实时计算系统可能会有问题）。如果表每次需要时都增加两倍大小，那么调整大小操作的频率将指数级下降。因此，将*n*个元素插入空数组仅需要*O*(*n*)的时间，包括调整大小的成本。我们说插入操作具有*O*(1)
    <def>摊销运行时间</def>，因为插入元素所需的时间*平均*为*O*(1)，即使有些元素会触发对哈希表的所有元素进行长时间的重新哈希。
- en: It is crucial that the array size grow geometrically (doubling). It might be
    tempting to grow the array by a fixed increment (e.g., 100 elements at time),
    but this results in asymptotic linear rather than constant amortized running time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数组大小以几何级增长（倍增）至关重要。固定增量增长数组（例如，每次增加100个元素）可能很诱人，但这会导致渐近线性而不是恒定的摊销运行时间。
- en: Now we turn to a more detailed description of amortized analysis.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们转向对摊销分析的更详细描述。
- en: Amortized Analysis
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摊销分析
- en: Amortized analysis is a worst-case analysis of a a *sequence* of operations
    — to obtain a tighter bound on the overall or average cost per operation in the
    sequence than is obtained by separately analyzing each operation in the sequence.
    For instance, when we considered the union and find operations for the disjoint
    set data abstraction earlier in the semester, we were able to bound the running
    time of individual operations by *O*(log *n*). However, for a sequence of *n*
    operations, it is possible to obtain tighter than an *O*(*n* log *n*) bound (although
    that analysis is more appropriate to 4820 than to this course). Here we will consider
    a simplified version of the hash table problem above, and show that a sequence
    of *n* insert operations has overall time *O*(*n*).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 摊销分析是对一系列操作的最坏情况分析，旨在得到比单独分析序列中的每个操作更紧密的整体或平均每个操作的成本界限。例如，当我们考虑前面学期对不相交集数据抽象的并集和查找操作时，我们能够将单个操作的运行时间限制在*O*(log
    *n*)。然而，对于一个包含*n*个操作的序列，可以获得比*O*(*n* log *n*)更紧密的界限（尽管该分析更适用于4820而不是这门课程）。在这里，我们将考虑上述哈希表问题的简化版本，并展示*n*个插入操作的序列具有总时间*O*(*n*)。
- en: 'There are three main techniques used for amortized analysis:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 摊销分析使用了三种主要技术：
- en: The <def>aggregate method</def> , where the total running time for a sequence
    of operations is analyzed.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <def>聚合方法</def>，即分析一系列操作的总运行时间。
- en: The <def>accounting</def> (or <def>banker's</def> ) method, where we impose
    an extra charge on inexpensive operations and use it to pay for expensive operations
    later on.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <def>记账</def>（或<def>银行家</def>）方法，我们对廉价操作施加额外费用，然后用它来支付后续昂贵的操作。
- en: The <def>potential</def> (or <def>physicist's</def> ) method, in which we derive
    a *potential function* characterizing the amount of extra work we can do in each
    step. This potential either increases or decreases with each successive operation,
    but cannot be negative.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <def>潜力</def>（或<def>物理学家</def>）方法，我们通过导出描述我们每一步可以额外完成的工作量的*潜力函数*来进行。该潜力函数随着每一次操作的进行而增加或减少，但不能为负。
- en: 'Consider an extensible array that can store an arbitrary number of integers,
    like an `ArrayList` or `Vector` in Java. These are implemented in terms of ordinary
    (non-extensible) arrays. Each `add` operation inserts a new element after all
    the elements previously inserted. If there are no empty cells left, a new array
    of double the size is allocated, and all the data from the old array is copied
    to the corresponding entries in the new array. For instance, consider the following
    sequence of insertions, starting with an array of length 1:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个可以存储任意数量整数的可扩展数组，如Java中的`ArrayList`或`Vector`。这些是以普通（非可扩展）数组来实现的。每次`add`操作都在之前插入的所有元素之后插入一个新元素。如果没有剩余的空单元，就会分配一个大小加倍的新数组，并且所有旧数组中的数据都复制到新数组的相应条目中。例如，考虑以下一系列插入，从长度为1的数组开始：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The table is doubled in the second, third, and fifth steps. As each insertion
    takes *O*(*n*) time in the worst case, a simple analysis would yield a bound of
    *O*(*n*²) time for *n* insertions. But it is not this bad. Let's analyze a sequence
    of *n* operations using the three methods.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 表在第二、第三和第五步中加倍。由于在最坏情况下每次插入都需要*O*(*n*)的时间，所以简单的分析会得出*n*次插入的*O*(*n*²)时间界限。但情况并非如此糟糕。让我们使用三种方法分析一个*n*次操作的序列。
- en: Aggregate Method
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 累积法
- en: 'Let *c[i]* be the cost of the *i*-th insertion:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让*c[i]*表示第*i*次插入的成本：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s consider the size of the table *s[i]* and the cost *c[i]* for the first
    few insertions in a sequence:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑序列中前几次插入的表大小*s[i]*和成本*c[i]*：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Alteratively we can see that *c[i]*=1+*d[i]* where *d[i]* is the cost of doubling
    the table size. That is
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以看到*c[i]*=1+*d[i]*，其中*d[i]*是表大小加倍的成本。也就是说
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then summing over the entire sequence, all the 1's sum to *O*(*n*), and all
    the *d[i]* also sum to *O*(*n*). That is,
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在整个序列上求和，所有的1都加起来得到*O*(*n*)，而所有的*d[i]*也加起来得到*O*(*n*)。也就是说，
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: where *m* = log(*n* − 1). Both terms on the right hand side of the inequality
    are *O*(*n*), so the total running time of *n* insertions is *O*(*n*).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*m* = log(*n* − 1)。不等式右边的两个项都是*O*(*n*)，因此*n*次插入的总运行时间为*O*(*n*)。
- en: Accounting (Banker's) Method
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记账（银行家）法
- en: The aggregate method directly seeks a bound on the overall running time of a
    sequence of operations. In contrast, the accounting method seeks to find a *payment*
    of a number of extra time units charged to each individual operation such that
    the sum of the payments is an upper bound on the total actual cost. Intuitively,
    one can think of maintaining a bank account. Low-cost operations are charged a
    little bit more than their true cost, and the surplus is deposited into the bank
    account for later use. High-cost operations can then be charged less than their
    true cost, and the deficit is paid for by the savings in the bank account. In
    that way we spread the cost of high-cost operations over the entire sequence.
    The charges to each operation must be set large enough that the balance in the
    bank account always remains positive, but small enough that no one operation is
    charged significantly more than its actual cost.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 累积法直接寻求对一系列操作的总体运行时间的界限。相比之下，记账法试图找到对每个个别操作收取的额外时间单位的*支付*，使得这些支付的总和是总实际成本的上界。直观地说，我们可以想象维护一个银行账户。低成本操作的收费略高于其真实成本，并且剩余部分存入银行账户以备将来使用。然后，可以将高成本操作的收费低于其真实成本，并且透支是由银行账户中的储蓄支付的。通过这种方式，我们将高成本操作的成本分摊到整个序列中。对每个操作的收费必须设置得足够大，以确保银行账户的余额始终保持正数，但又不能太大，以至于没有一个操作的收费明显高于其实际成本。
- en: We emphasize that the extra time charged to an operation does not mean that
    the operation really takes that much time. It is just a method of accounting that
    makes the analysis easier.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强调，对操作额外计费并不意味着该操作实际花费了那么多时间。这只是一种使分析更容易的记账方法。
- en: If we let *c'[i]* be the charge for the *i*-th operation and *c[i]* be the true
    cost, then we would like
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们让*c'[i]*是第*i*个操作的费用，*c[i]*是真实的费用，那么我们希望
- en: Σ*[1≤i≤n] c[i]* ≤ Σ*[1≤i≤n] c'[i]*
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Σ*[1≤i≤n] c[i]* ≤ Σ*[1≤i≤n] c'[i]*
- en: for all *n*, which says that the <def>amortized time</def> Σ*[1≤i≤n] c'[i]*
    for that sequence of *n* operations is a bound on the true time Σ*[1≤i≤n] c[i]*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有的*n*，这意味着*n*个操作序列的<def>分摊时间</def> Σ*[1≤i≤n] c'[i]* 是对真实时间 Σ*[1≤i≤n] c[i]*
    的一个上界。
- en: 'Back to the example of the extensible array. Say it costs 1 unit to insert
    an element and 1 unit to move it when the table is doubled. Clearly a charge of
    1 unit per insertion is not enough, because there is nothing left over to pay
    for the moving. A charge of 2 units per insertion again is not enough, but a charge
    of 3 appears to be:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 回到可扩展数组的示例。假设插入一个元素花费1个单位，当表扩大时移动它花费1个单位。显然，每次插入1个单位的费用不够，因为没有剩余的费用来支付移动费用。每次插入2个单位的费用还不够，但是每次插入3个单位似乎足够：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: where *b[i]* is the balance after the *i*-th insertion.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*b[i]*是第*i*次插入后的余额。
- en: 'In fact, this is enough in general. Let *m* refer to the *m*-th element inserted.
    The three units charged to *m* are spent as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这在一般情况下就足够了。让*m*指代第*m*个插入的元素。对*m*收取的三个单位被用于以下目的：
- en: One unit is used to insert *m* immediately into the table.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个单位用于立即将*m*插入表中。
- en: One unit is used to move *m* the first time the table is grown after *m* is
    inserted.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个单位用于在插入*m*后第一次扩大表时移动*m*。
- en: One unit is donated to element *m − 2^k*, where *2^k* is the largest power of
    2 not exceeding *m*, and is used to move that element the first time the table
    is grown after *m* is inserted.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个单位捐赠给元素*m − 2^k*，其中*2^k*是不超过*m*的最大2的幂，并且用于在插入*m*后第一次扩大表时移动该元素。
- en: Now whenever an element is moved, the move is already paid for. The first time
    an element is moved, it is paid for by one of its own time units that was charged
    to it when it was inserted; and all subsequent moves are paid for by donations
    from elements inserted later.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当一个元素被移动时，移动费用已经付清。第一次移动元素时，它是由插入时向其收取的一个自己的时间单位付费的；所有后续的移动都是由后来插入的元素的捐赠支付的。
- en: In fact, we can do slightly better, by charging just 1 for the first insertion
    and then 3 for each insertion after that, because for the first insertion there
    are no elements to copy. This will yield a zero balance after the first insertion
    and then a positive one thereafter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可以做得更好一点，只收取第一次插入的费用为1，然后对每次插入后的插入收取3个单位的费用，因为对于第一次插入，没有要复制的元素。这将在第一次插入后产生零余额，然后在此后产生正余额。
- en: Potential (Physicist's) Method
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 势（物理学家）方法
- en: Above we saw the aggregate method and the banker's method for dealing with extensible
    arrays. Now let us look at the physicist's method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，我们看到了处理可扩展数组的聚合方法和银行家方法。现在让我们来看看物理学家的方法。
- en: 'Suppose we can define a <def>potential function</def> Φ (read "Phi") on states
    of a data structure with the following properties:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们可以在数据结构的状态上定义一个<def>势函数</def>Φ（读作“Phi”），具有以下特性：
- en: Φ(*h*[0]) = 0, where *h*[0] is the initial state of the data structure.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Φ(*h*[0]) = 0，其中*h*[0]是数据结构的初始状态。
- en: Φ(*h*[*t*]) ≥ 0 for all states *h*[*t*] of the data structure occurring during
    the course of the computation.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于计算过程中出现的数据结构的所有状态*h*[*t*]，都有Φ(*h*[*t*]) ≥ 0。
- en: Intuitively, the potential function will keep track of the precharged time at
    any point in the computation. It measures how much saved-up time is available
    to pay for expensive operations. It is analogous to the bank balance in the banker's
    method. But interestingly, it depends only on the current state of the data structure,
    irrespective of the history of the computation that got it into that state.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 直观地，势函数将跟踪计算中任意点的预充值时间。它衡量了有多少积累的时间可用于支付昂贵的操作。这类似于银行家法中的银行余额。但有趣的是，它仅取决于数据结构的当前状态，而不考虑使其处于该状态的计算历史。
- en: We then define the <def>amortized time</def> of an operation as
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一个操作的*分摊时间*定义为
- en: '*c* + Φ(*h*'') − Φ(*h*),'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*c* + Φ(*h*'') − Φ(*h*),'
- en: where *c* is the actual cost of the operation and *h* and *h*' are the states
    of the data structure before and after the operation, respectively. Thus the amortized
    time is the actual time plus the change in potential. Ideally, Φ should be defined
    so that the amortized time of each operation is small. Thus the change in potential
    should be positive for low-cost operations and negative for high-cost operations.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*c*是操作的实际成本，*h*和*h*'是操作之前和之后的数据结构状态。因此，摊销时间是实际时间加上潜力变化。理想情况下，Φ应该被定义为每个操作的摊销时间很小。因此，潜力变化对于低成本操作应该是正的，对于高成本操作应该是负的。
- en: 'Now consider a sequence of *n* operations taking actual times *c*[0], *c*[1],
    *c*[2], ..., *c*[*n*−1] and producing data structures *h*[1], *h*[2], ..., *h*[*n*]
    starting from *h*[0]. The total amortized time is the sum of the individual amortized
    times:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑一系列*n*个操作，实际花费时间为*c*[0]，*c*[1]，*c*[2]，...，*c*[*n*−1]，并产生数据结构*h*[1]，*h*[2]，...，*h*[*n*]，从*h*[0]开始。总摊销时间是单个摊销时间的总和：
- en: (*c*[0] + Φ(*h*[1]) − Φ(*h*[0])) + (*c*[1] + Φ(*h*[2]) − Φ(*h*[1])) + ... +
    (*c*[*n*−1] + Φ(*h*[*n*]) − Φ(*h*[*n*−1]))
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: (*c*[0] + Φ(*h*[1]) − Φ(*h*[0])) + (*c*[1] + Φ(*h*[2]) − Φ(*h*[1])) + ... +
    (*c*[*n*−1] + Φ(*h*[*n*]) − Φ(*h*[*n*−1]))
- en: = *c*[0] + *c*[1] + ... + *c*[*n*−1] + Φ(*h*[*n*]) − Φ(*h*[0])
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = *c*[0] + *c*[1] + ... + *c*[*n*−1] + Φ(*h*[*n*]) − Φ(*h*[0])
- en: = *c*[0] + *c*[1] + ... + *c*[*n*−1] + Φ(*h*[*n*]).
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = *c*[0] + *c*[1] + ... + *c*[*n*−1] + Φ(*h*[*n*])。
- en: Therefore the amortized time for a sequence of operations overestimates of the
    actual time by Φ(*h*[*n*]), which by assumption is always positive. Thus the total
    amortized time is always an upper bound on the actual time.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一系列操作的摊销时间高估了Φ(*h*[*n*])，假设Φ始终为正。因此，总摊销时间始终是实际时间的上界。
- en: For dynamically resizable arrays with resizing by doubling, we can use the potential
    function
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于动态可调整大小的数组，通过加倍调整大小，我们可以使用潜力函数
- en: Φ(*h*) = 2*n* − *m*,
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Φ(*h*) = 2*n* − *m*，
- en: where *n* is the current number of elements and *m* is the current length of
    the array. If we start with an array of length 0 and allocate an array of length
    1 when the first element is added, and thereafter double the array size whenever
    we need more space, we have Φ(*h*[0]) = 0 and Φ(*h*[*t*]) ≥ 0 for all *t*. The
    latter inequality holds because the number of elements is always at least half
    the size of the array.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*n*是当前元素的数量，*m*是数组的当前长度。如果我们从长度为0的数组开始，并在添加第一个元素时分配长度为1的数组，然后每当需要更多空间时都将数组大小加倍，我们有Φ(*h*[0])
    = 0，并且Φ(*h*[*t*]) ≥ 0对于所有*t*都成立。后者不等式成立，因为元素的数量始终至少是数组大小的一半。
- en: Now we would like to show that adding an element takes amortized constant time.
    There are two cases.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要证明添加元素的摊销时间是常数时间。有两种情况。
- en: If *n* < *m*, then the actual cost is 1, *n* increases by 1, and *m* does not
    change. Then the potential increases by 2, so the amortized time is 1 + 2 = 3.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*n* < *m*，那么实际成本是1，*n*增加1，*m*不变。然后，潜力增加2，因此摊销时间为1 + 2 = 3。
- en: If *n* = *m*, then the array is doubled, so the actual time is *n* + 1. But
    the potential drops from *n* to 2, so amortized time is *n* + 1 + (2 − *n*) =
    3.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*n* = *m*，那么数组加倍，因此实际时间是*n* + 1。但是潜力从*n*下降到2，所以摊销时间是*n* + 1 + (2 − *n*) =
    3。
- en: In both cases, the amortized time is O(1).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在两种情况下，摊销时间都是O(1)。
- en: The key to amortized analysis with the physicist's method is to define the right
    potential function. The potential function needs to save up enough time to be
    used later when it is needed. But it cannot save so much time that it causes the
    amortized time of the current operation to be too high.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 用物理学家的方法进行摊销分析的关键是定义正确的潜力函数。潜力函数需要保存足够的时间，在需要时使用。但是它不能保存太多的时间，以致导致当前操作的摊销时间过高。
