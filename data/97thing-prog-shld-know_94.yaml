- en: Write Small Functions Using Examples
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用示例编写小函数
- en: Write Small Functions Using Examples
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用示例编写小函数
- en: We would like to write code that is correct, and have evidence on hand that
    it is correct. It can help with both issues to think about the "size" of a function.
    Not in the sense of the amount of code that implements a function — although that
    is interesting — but rather the size of the mathematical function that our code
    manifests.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望编写的代码是正确的，并且有证据表明它是正确的。思考函数的“大小”可以有助于解决这两个问题。不是指实现函数的代码量的意义 — 尽管这很有趣 — 而是我们的代码所展现的数学函数的大小。
- en: 'For example, in the game of Go there is a condition called *atari* in which
    a player''s stones may be captured by their opponent: A stone with two or more
    free spaces adjacent to it (called *liberties*) is not in atari. It can be tricky
    to count how many liberties a stone has, but determining atari is easy if that
    is known. We might begin by writing a function like this:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在围棋游戏中有一种称为*自由*的情况，其中玩家的棋子可能被对手捕获：一个具有两个或更多自由空间（称为*气*）相邻的棋子不处于自由之中。计算一个棋子有多少自由可能会有些棘手，但如果已知它是否处于自由之中，那么确定自由就很容易了。我们可能会开始编写这样一个函数：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is larger than it looks. A mathematical function can be understood as a
    set, some subset of the Cartesian product of the sets that are its domain (here,
    `int`) and range (here, `boolean`). If those sets of values were the same size
    as in Java then there would be `2L*(Integer.MAX_VALUE+(-1L*Integer.MIN_VALUE)+1L)`
    or 8,589,934,592 members in the set `int×boolean`. Half of these are members of
    the subset that is our function, so to provide complete evidence that our function
    is correct we would need to check around 4.3×10⁹ examples.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这比看起来要大得多。数学函数可以理解为一个集合，它是其域（这里是`int`）和值域（这里是`boolean`）的笛卡尔积的某个子集。如果这些值的集合大小与
    Java 中一样大，那么在集合 `int×boolean` 中将有`2L*(Integer.MAX_VALUE+(-1L*Integer.MIN_VALUE)+1L)`或
    8,589,934,592 个成员。其中一半是我们函数的子集的成员，所以要提供完整的证据证明我们的函数是正确的，我们需要检查大约 4.3×10⁹ 个示例。
- en: This is the essence of the claim that tests cannot prove the absence of bugs.
    Tests can demonstrate the presence of features, though. But still we have this
    issue of size.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是测试不能证明没有错误的主张的本质。测试可以证明功能的存在，但我们仍然面临着大小的问题。
- en: 'The problem domain helps us out. The nature of Go means that number of liberties
    of a stone is not any int, but exactly one of {1,2,3,4}. So we could alternatively
    write:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 问题域帮助我们解决了这个问题。围棋的性质意味着一个棋子的自由数不是任意的 int，而是确切地是 {1,2,3,4} 中的一个。因此，我们也可以这样写：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is much more tractable: The function computed is now a set with at most
    eight members. In fact, four checked examples would constitute evidence of complete
    certainty that the function is correct. This is one reason why it''s a good idea
    to use types closely related to the problem domain to write programs, rather than
    native types. Using domain–inspired types can often make our functions much smaller.
    One way to find out what those types should be is to find the examples to check
    in problem domain terms, before writing the function.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这样要简单得多：现在计算的函数是一个最多包含八个成员的集合。事实上，四个经过检验的示例就足以证明这个函数是正确的。这也是为什么使用与问题域密切相关的类型编写程序，而不是使用本地类型的一个好主意。使用受问题域启发的类型通常可以使我们的函数变得更小。找出这些类型应该是什么的一种方法是在编写函数之前以问题域术语找到要检查的示例。
- en: by [Keith Braithwaite](http://programmer.97things.oreilly.com/wiki/index.php/Keith_Braithwaite)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[Keith Braithwaite](http://programmer.97things.oreilly.com/wiki/index.php/Keith_Braithwaite)'
