- en: init function
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化函数
- en: init function
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化函数
- en: 'There is a `init()` function, as the name suggests, it will do some initialization
    work, such as initializing variables which may not be expressed easily, or calibrating
    program state. A file can contain one or more `init()` functions, as shown here:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个`init()`函数，顾名思义，它将做一些初始化工作，例如初始化可能不容易表达的变量，或者校准程序状态。一个文件可以包含一个或多个`init()`函数，如下所示：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The execution result is like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 执行结果如下：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Since one package can contain multiple files, there may be many `init()` functions.
    You **should not** presume which file's `init()` functions are executed first.
    The only thing which is guaranteed is that the variables declared in package will
    be evaluated before all `init()` functions are executed in this package.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一个包可以包含多个文件，可能会有许多`init()`函数。你**不应该**假设哪个文件的`init()`函数先执行。唯一有保证的是包中声明的变量将在该包中的所有`init()`函数执行之前求值。
- en: 'See another example. The `$GOROOT/src` directory is like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 看另一个例子。`$GOROOT/src`目录如下所示：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are `2` simple packages: `foo` and `play`. The `foo/foo.go` is here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有`2`个简单的包：`foo`和`play`。`foo/foo.go`在这里：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'While the `play/main.go` is:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当`play/main.go`为：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Build `play` command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 构建`play`命令：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The cause of this error is that `main.go` doesn''t use any functions or variables
    exported by `foo` package. So if you just want an imported package''s `init()`
    function is executed, and don''t want to use package''s other stuff, you should
    modify "`import "foo"`" to "`import _ "foo"`":'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误的原因是`main.go`没有使用`foo`包导出的任何函数或变量。因此，如果你只想执行一个导入包的`init()`函数，并且不想使用包的其他内容，你应该将"`import
    "foo"`"修改为"`import _ "foo"`"：
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now the build process will success, and the output of `play` command is like
    this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建过程将会成功，而且`play`命令的输出如下所示：
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'References:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献：
- en: '[Effective Go](https://golang.org/doc/effective_go.html#init);'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[Effective Go](https://golang.org/doc/effective_go.html#init);'
- en: '[When is the init() function in go (golang) run?](http://stackoverflow.com/questions/24790175/when-is-the-init-function-in-go-golang-run).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go 中的 init() 函数是何时运行的？](http://stackoverflow.com/questions/24790175/when-is-the-init-function-in-go-golang-run).'
