- en: Formal Rules for Cached SubstitutionsTuesday, January 31st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存替换的正式规则星期二，1月31日
- en: 'The formal evaluation rules are now different. Evaluation carries along a *substitution
    cache* that begins its life as empty: so `eval` needs an extra argument. We begin
    by writing the rules that deal with the cache, and use the above function names
    for simplicity — the behavior of the three definitions can be summed up in a single
    rule for `lookup`:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在正式评估规则有所不同。评估携带一个*替换缓存*，它在开始时为空：因此`eval`需要额外的参数。我们首先编写处理缓存的规则，并为简单起见使用上述函数名称
    - 这三个定义的行为可以总结为一个`lookup`规则：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And now we can write the new rules for `eval`
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以为`eval`写新规则了。
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that there is no mention of `subst` — the whole point is that we don’t
    really do substitution, but use the cache instead. The `lookup` rules, and the
    places where `extend` is used replaces `subst`, and therefore specifies our scoping
    rules.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，没有提到`subst` - 整个重点是我们实际上并没有进行替换，而是使用缓存。`lookup`规则以及使用`extend`的地方替换了`subst`，因此指定了我们的作用域规则。
- en: Also note that the rule for `call` is still very similar to the rule for `with`,
    but it looks like we have lost something — the interesting bit with substituting
    into `fun` expressions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，`call`的规则仍然与`with`的规则非常相似，但看起来我们丢失了一些东西 - 替换到`fun`表达式中的有趣部分。
