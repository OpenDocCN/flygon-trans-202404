- en: 'Recitation 11: Functional Arrays'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 节：函数式数组
- en: All of the data structures we have covered in this course so far are *functional*.
    You can access old versions of these data structure, even when you update them.
    For example, you can cons an element onto a list without affecting references
    to the original list.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在这门课程中涵盖的所有数据结构都是*函数式*的。即使在更新它们时，您也可以访问这些数据结构的旧版本。例如，您可以将元素添加到列表中而不影响对原始列表的引用。
- en: We have seen efficient functional implementations for stacks, queues, and binary
    trees. Can we come up with an efficient implementation of functional arrays, too?
    It turns out that we can, but we will need to use imperative language features.
    Our array will be implemented using an OCaml array for efficiency, but we need
    to be careful that updates to the array do not affect previous versions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了用于栈、队列和二叉树的高效函数式实现。我们能否也为函数式数组提供高效的实现呢？事实证明我们可以，但我们需要使用命令式语言特性。为了效率，我们将使用
    OCaml 数组来实现我们的数组，但是我们需要小心，更新数组不会影响以前的版本。
- en: First attempt
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一次尝试
- en: 'Let''s define a signature:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个签名：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's define the `set` function so that it makes a copy of the array it was
    given, then updates the copy.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义`set`函数，使其复制给定的数组，然后更新副本。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This array is purely functional, but it's slow, because we make a new array
    every time call `set`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此数组是纯函数的，但速度较慢，因为每次调用`set`时都会创建一个新数组。
- en: Second attempt
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二次尝试
- en: Say we execute `FunArray.set a i x`. Let's imperatively set `a.(i) <- x<=""
    code="">. Then, let's update all of the old references to `a` so that they point
    to the old version of `a`.`
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们执行`FunArray.set a i x`。然后，让我们命令式地设置`a.(i) <- x<="" code="">`。然后，让我们更新所有对`a`的旧引用，使它们指向旧版本的`a`。
- en: '`How are we going to update the old references to `a`? One idea is to make
    `''a t` a `ref`. Every time `FunArray.set` is called, we change the value stored
    at `a` so that it has the same mappings as the original array. Thus the old references
    to `a` will still refer to the old version of `a`, even though the underlying
    array is different.`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`我们将如何更新对`a`的旧引用？一个想法是使`''a t`成为一个`ref`。每次调用`FunArray.set`时，我们都会更改存储在`a`处的值，使其具有与原始数组相同的映射。因此，对`a`的旧引用仍将引用`a`的旧版本，即使底层数组不同。`'
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`An array can either be an `Arr(arr)`, which has the same mappings as the OCaml
    array `arr`, or it can be a `Diff(i, x, a'')`, which has all of the same mappings
    as the functional array a'', exception with the mapping `i -> x`. We then define
    the type `''a t` so that it is a `ref` to a value of type `data`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`一个数组可以是`Arr(arr)`，它具有与 OCaml 数组`arr`相同的映射，也可以是`Diff(i, x, a'')`，它具有与函数式数组`a''`相同的所有映射，除了映射`i
    -> x`。然后，我们定义类型`''a t`，使其成为指向类型`data`值的`ref`。'
- en: Getting a value from such an array is simple.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从这样的数组中获取值很简单。
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the array points to an `Arr(arr)`, then we just look up the given index in
    `arr`. If it points to a `Diff(j, x, a')`, then we see if `j` is the index we
    are searching for. If it is, then we return `x`, the value it maps to.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组指向`Arr(arr)`，那么我们只需在`arr`中查找给定的索引。如果它指向`Diff(j, x, a')`，那么我们看看`j`是否是我们要搜索的索引。如果是，则返回`x`，它映射到的值。
- en: Setting a value is more complicated
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 设置值更加复杂
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If `a` points to a `Diff`, then we return a reference to a new `Diff` which
    maps `i` to `x`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`a`指向`Diff`，那么我们返回一个指向新`Diff`的引用，它将`i`映射到`x`。
- en: If `a` points to an `Arr(arr)`, then we imperatively set `arr.(i) <- x<="" code="">.
    This operation invalidates the old references to `a`. These old references to
    `a` ought to refer to the old version of `a` before the update. To get around
    this problem, we add a level of indirection. We update the value stored at `a`
    so that it contains a `Diff` preserving the old mapping of `i`.`
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`a`指向`Arr(arr)`，那么我们将命令式地设置`arr.(i) <- x<="" code="">`。此操作使对`a`的旧引用无效。这些对`a`的旧引用应该引用更新之前的`a`的旧版本。为了解决这个问题，我们增加了一级间接性。我们更新存储在`a`处的值，使其包含保留`i`的旧映射的`Diff`。`
- en: '`Rerooting`'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Rerooting`'
- en: '`Our implementation is efficient for accessing the most recent version of an
    array. However, accessing old versions of the array are slow, because you have
    to traverse a list of `Diff` nodes before you reach the `Arr`. There will be one
    of these `Diff` nodes per update.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`我们的实现对于访问数组的最新版本非常高效。然而，访问数组的旧版本很慢，因为你必须在到达`Arr`之前遍历`Diff`节点的列表。每次更新都会有一个这样的`Diff`节点。`'
- en: We can improve performance when a user stops using the newest version of the
    array and starts using an old version instead (for example, in a backtracking
    algorithm). Every time a user sets or gets an element of an array `a`, we reverse
    the list of `Diff` nodes on the path to the `Arr` so that `a` points directly
    to the `Arr`. This operation is known as *rerooting*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户停止使用数组的最新版本并开始使用旧版本时（例如，在回溯算法中），我们可以提高性能。每当用户设置或获取数组`a`的元素时，我们会反转到`Arr`路径上的`Diff`节点列表，以便`a`直接指向`Arr`。这个操作被称为*rerooting*。
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Every time the user calls `get` or `set`, we reroot the tree. Note that this
    implementation is still inefficient for some use cases. If a user frequently accesses
    many different versions of an array, then rerooting will occur every time, and
    performance will suffer. Another problem is that our definition of `reroot` is
    not tail recursive (it is possible to fix this problem).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每当用户调用`get`或`set`时，我们都会重新根化树。请注意，对于某些用例，这种实现仍然效率低下。如果用户频繁访问数组的许多不同版本，那么每次都会发生rerooting，性能会受到影响。另一个问题是我们对`reroot`的定义不是尾递归的（可以解决这个问题）。
- en: For more details, please see [this paper](http://www.lri.fr/~filliatr/ftp/publis/puf-wml07.ps)
    on which this recitation is based. They use functional arrays to implement a functional
    disjoint set, a data structure that we will cover later in the course.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 更多细节，请参阅[这篇论文](http://www.lri.fr/~filliatr/ftp/publis/puf-wml07.ps)，这篇讲座是基于这篇论文的。他们使用函数数组来实现函数不相交集，这是我们课程后面会涉及的数据结构。
- en: Here is our final implementation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的最终实现。
- en: '[PRE6]``'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE6]``'
