- en: Chapter 7 - Text Nodes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 - 文本节点
- en: 7.1 *Text* object overview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.1 *Text* 对象概述
- en: Text in an HTML document is represented by instances of the *Text()* constructor
    function, which produces text nodes. When an HTML document is parsed the text
    mixed in among the elements of an HTML page are converted to text nodes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 文档中的文本由 *Text()* 构造函数的实例表示，该函数生成文本节点。当解析 HTML 文档时，混在 HTML 页面元素中的文本会被转换为文本节点。
- en: 'live code: [http://jsfiddle.net/domenlightenment/kuz5Z](http://jsfiddle.net/domenlightenment/kuz5Z)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/kuz5Z](http://jsfiddle.net/domenlightenment/kuz5Z)
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code above concludes that the *Text()* constructor function constructs the
    text node but keep in mind that *Text* inherits from *CharacterData*, *Node*,
    and *Object*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码得出结论，*Text()* 构造函数构造了文本节点，但请记住，*Text* 继承自 *CharacterData*、*Node* 和 *Object*。
- en: 7.2 *Text* object & properties
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.2 *Text* 对象和属性
- en: To get accurate information pertaining to the available properties and methods
    on an *Text* node its best to ignore the specification and to ask the browser
    what is available. Examine the arrays created in the code below detailing the
    properties and methods available from a text node.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取关于 *Text* 节点上可用属性和方法的准确信息，最好忽略规范，并询问浏览器提供了什么。查看下面代码中创建的数组，详细说明了文本节点可用的属性和方法。
- en: 'live code: [http://jsfiddle.net/domenlightenment/Wj3uS](http://jsfiddle.net/domenlightenment/Wj3uS)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/Wj3uS](http://jsfiddle.net/domenlightenment/Wj3uS)
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The available properties are many even if the inherited properties were not
    considered. Below I've hand pick a list of note worthy properties and methods
    for the context of this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 即使未考虑继承的属性，可用属性仍然很多。下面我精选了一些值得注意的属性和方法列表，适用于本章的上下文。
- en: '*textContent*'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*textContent*'
- en: '*splitText()*'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*splitText()*'
- en: '*appendData()*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*appendData()*'
- en: '*deleteData()*'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*deleteData()*'
- en: '*insertData()*'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*insertData()*'
- en: '*replaceData()*'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*replaceData()*'
- en: '*subStringData()*'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*subStringData()*'
- en: '*normalize()*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*normalize()*'
- en: '*data*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*data*'
- en: '*document.createTextNode()* (not a property or inherited property of text nodes
    but discussed in this chapter)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*document.createTextNode()*（不是文本节点的属性或继承属性，但在本章讨论）'
- en: 7.3 White space creates *Text* nodes
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.3 空格创建 *Text* 节点
- en: When a DOM is contstructed either by the browser or by programmatic means text
    nodes are created from white space as well as from text characters. After all,
    whitespace is a character. In the code below the second paragraph, conaining an
    empty space, has a child *Text* node while the first paragraph does not.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器或通过编程方式构建 DOM 时，文本节点会从空格和文本字符中创建。毕竟，空格也是一个字符。在下面的代码中，第二段落包含一个空格，有一个子 *Text*
    节点，而第一个段落没有。
- en: 'live code: [http://jsfiddle.net/domenlightenment/YbtnZ](http://jsfiddle.net/domenlightenment/YbtnZ)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/YbtnZ](http://jsfiddle.net/domenlightenment/YbtnZ)
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Don't forget that white space and text characters in the DOM are typically represented
    by a text node. This of course means that carriage returns are considered text
    nodes. In the code below we log a carriage return highlighting the fact that this
    type of character is in fact a text node.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，DOM 中的空格和文本字符通常由文本节点表示。这当然意味着换行符被视为文本节点。在下面的代码中，我们记录了一个换行符，突出显示这种类型的字符实际上是一个文本节点。
- en: 'live code: [http://jsfiddle.net/domenlightenment/9FEzq](http://jsfiddle.net/domenlightenment/9FEzq)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/9FEzq](http://jsfiddle.net/domenlightenment/9FEzq)
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*The reality is if you can input the character or whitespace into an html document
    using a keyboard then it can potentially be interputed as a text node. If you
    think about it, unless you minimze/compress the html document the average html
    page contains a great deal of whitespace and carriage return text nodes.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*事实上，如果您可以使用键盘将字符或空格输入到 HTML 文档中，那么它可能被解释为文本节点。如果您仔细考虑，除非最小化/压缩 HTML 文档，否则平均的
    HTML 页面包含大量空格和换行符文本节点。'
- en: 7.4 Creating & Injecting *Text* Nodes
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.4 创建和注入 *Text* 节点
- en: '*Text* nodes are created automatically for us when a browser interputs an HTML
    document and a corresponding DOM is built based on the contents of the document.
    After this fact, its also possible to programatically create *Text* nodes using
    *createTextNode()*. In the code below I create a text node and then inject that
    node into the live DOM tree.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器解释 HTML 文档并基于文档内容构建相应的 DOM 时，*Text* 节点会自动为我们创建。事实上，还可以使用 *createTextNode()*
    以编程方式创建 *Text* 节点。在下面的代码中，我创建一个文本节点，然后将该节点注入到实时 DOM 树中。
- en: 'live code: [http://jsfiddle.net/domenlightenment/xC9q3](http://jsfiddle.net/domenlightenment/xC9q3)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/xC9q3](http://jsfiddle.net/domenlightenment/xC9q3)
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Keep in mind that we can also inject text nodes into programmatically created
    DOM structures as well. In the code below I place a text node inside of an *<p>*
    element before I inject it into the live DOM.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们也可以将文本节点注入到以编程方式创建的DOM结构中。在下面的代码中，我在将其注入到活动DOM之前，将一个文本节点放入了一个*<p>*元素中。
- en: 'live code: [http://jsfiddle.net/domenlightenment/PdatJ](http://jsfiddle.net/domenlightenment/PdatJ)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/PdatJ](http://jsfiddle.net/domenlightenment/PdatJ)
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 7.5 Getting a *Text* node value with *.data* or *nodeValue*
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.5 使用*.data*或*nodeValue*获取*Text*节点值
- en: The text value/data represented by a *Text* node can be extracted from the node
    by using the *.data* or *nodeValue* property. Both of these return the text contained
    in a *Text* node. Below I demostrate both of these to retrive the value contained
    in the *<div>*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用*.data*或*nodeValue*属性，可以从*Text*节点中提取文本值/数据。这两者都返回*Text*节点中包含的文本。下面我展示了如何使用这两者来提取*<div>*中包含的值。
- en: 'live code: [http://jsfiddle.net/domenlightenment/dPLkx](http://jsfiddle.net/domenlightenment/dPLkx)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/dPLkx](http://jsfiddle.net/domenlightenment/dPLkx)
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that the *<p>* contains two *Text* node and *Element* (i.e. *<strong>*)node.
    And that we are only getting the value of the first child node contained in the
    *<p>*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，*<p>*包含两个*Text*节点和一个*Element*（即*<strong>*）节点。我们只获取包含在*<p>*中的第一个子节点的值。
- en: Notes
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Getting the length of the characters contained in a text node is as simple as
    accessing the length proerty of the node itself or the actual text value/data
    of the node (i.e. *document.querySelector('p').firstChild.length* or *document.querySelector('p').firstChild.data.length*
    or *document.querySelector('p').firstChild.nodeValue.length*)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 获取文本节点中包含的字符的长度就像访问节点本身的长度属性或节点的实际文本值/数据一样简单（即*document.querySelector('p').firstChild.length*或*document.querySelector('p').firstChild.data.length*或*document.querySelector('p').firstChild.nodeValue.length*）
- en: 7.6 Maniputlating *Text* nodes with *appendData()*, *deleteData()*, *insertData()*,
    *replaceData()*, *subStringData()*
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.6 使用*appendData()*，*deleteData()*，*insertData()*，*replaceData()*，*subStringData()*操纵*Text*节点
- en: The *CharacterData* object that *Text* nodes inherits methods from provides
    the following methods for manipulating and extracting sub values from *Text* node
    values.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*CharacterData*对象从中继承方法的*Text*节点为操作和从*Text*节点值中提取子值提供了以下方法。'
- en: '*appendData()*'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*appendData()*'
- en: '*deleteData()*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*deleteData()*'
- en: '*insertData()*'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*insertData()*'
- en: '*replaceData()*'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*replaceData()*'
- en: '*subStringData()*'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*subStringData()*'
- en: Each of these are leverage in the code example below.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码示例中，每一个都在代码中被利用。
- en: 'live code: [http://jsfiddle.net/domenlightenment/B6AC6](http://jsfiddle.net/domenlightenment/B6AC6)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/B6AC6](http://jsfiddle.net/domenlightenment/B6AC6)
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notes
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: These same manipulation and sub extraction methods can be leverage by *Comment*
    nodes
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的操作和子提取方法也可以被*Comment*节点所利用。
- en: 7.7 When mulitple sibling *Text* nodes occur
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.7 当存在多个兄弟*Text*节点时
- en: Typically, immediate sibling *Text* nodes do not occur because DOM trees created
    by browsers intelligently combines text nodes, however two cases exist that make
    sibling text nodes possible. The first case is rather obvious. If a text node
    contains an *Element* node (e.g. *<p>Hi, <strong>cody</strong> welcome!</p>*)
    than the text will be split into the proper node groupings. Its best to look at
    a code example as this might sound more complicted than it really is. In the code
    below the contents of the *<p>* element is not a single *Text* node it is in fact
    3 nodes, a *Text* node, *Element* node, and another *Text* node.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，相邻的兄弟*Text*节点不会出现，因为浏览器创建的DOM树会智能地合并文本节点，然而存在两种情况使得相邻的文本节点可能。第一种情况相当明显。如果一个文本节点包含一个*Element*节点（例如*<p>嗨，<strong>cody</strong>欢迎！</p>*），那么文本将被拆分成正确的节点组。最好查看一个代码示例，因为这可能听起来比实际情况更复杂。在下面的代码中，*<p>*元素的内容不是单个*Text*节点，实际上是3个节点，一个*Text*节点，一个*Element*节点，和另一个*Text*节点。
- en: 'live code: [http://jsfiddle.net/domenlightenment/2ZCn3](http://jsfiddle.net/domenlightenment/2ZCn3)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/2ZCn3](http://jsfiddle.net/domenlightenment/2ZCn3)
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The next case occurs when we are programatically add *Text* nodes to an element
    we created in our code. In the code below I create a *<p>* element and then append
    two *Text* nodes to this element. Which results in sibling *Text* nodes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个情况发生在我们以编程方式向我们在代码中创建的元素添加*Text*节点时。在下面的代码中，我创建一个*<p>*元素，然后将两个*Text*节点附加到此元素。这导致了相邻的*Text*节点。
- en: 'live code: [http://jsfiddle.net/domenlightenment/jk3Jn](http://jsfiddle.net/domenlightenment/jk3Jn)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/jk3Jn](http://jsfiddle.net/domenlightenment/jk3Jn)
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 7.8 Remove markup and return all child *Text* nodes using *textContent*
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.8 使用 *textContent* 删除标记并返回所有子*Text*节点
- en: The *textContent* property can be used to get all child text nodes, as well
    as to set the contents of a node to a specific *Text* node. When its used on a
    node to get the textual content of the node it will returned a concatenataed string
    of all text nodes contained with the node you call the method on. This functionality
    would make it very easy to extract all text nodes from an HTML document. Below
    I extract all of the text contained withing the *<body>* element. Notice that
    *textContent* gathers not just immediate child text nodes but all child text nodes
    no matter the depth of encapsulation inside of the node the method is called.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*textContent*属性可用于获取所有子文本节点，以及将节点的内容设置为特定的*Text*节点。当在节点上使用它来获取节点的文本内容时，它将返回调用该方法的节点中包含的所有文本节点的连接字符串。这个功能将使从HTML文档中提取所有文本节点变得非常容易。下面我提取了*<body>*元素中包含的所有文本。请注意，*textContent*不仅收集直接子文本节点，还收集所有子文本节点，无论节点的��装深度如何。'
- en: 'live code: N/A'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：N/A
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When *textContent* is used to set the text contained within a node it will remove
    all child nodes first, replacing them with a single *Text* node. In the code below
    I replace all the nodes inside of the *<div>* element with a single *Text* node.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用*textContent*设置节点中包含的文本时，它将首先删除所有子节点，然后用单个*Text*节点替换它们。在下面的代码中，我用单个*Text*节点替换了*<div>*元素内的所有节点。
- en: 'live code: [http://jsfiddle.net/domenlightenment/m766T](http://jsfiddle.net/domenlightenment/m766T)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/m766T](http://jsfiddle.net/domenlightenment/m766T)
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*### Notes'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*### 注意事项'
- en: '*textContent* returns *null* if used on the a document or doctype node.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在文档或文档类型节点上使用*textContent*，将返回*null*。
- en: '*textContent* returns the contents from *<script>* and *<style>* elements'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*textContent* 返回*<script>*和*<style>*元素中的内容'
- en: 7.9 The difference between *textContent* & *innerText*
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.9 *textContent*和*innerText*之间的区别
- en: Most of the modern bowser, except Firefox, support a seeminly similiar property
    to *textContent* named *innerText*. However these properties are not the same.
    You should be aware of the following differences between *textContent* & *innerText*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现代大多数浏览器（除了Firefox）支持一个看似类似的属性*innerText*，但这些属性并不相同。你应该注意*textContent*和*innerText*之间的以下区别。
- en: '*innerText* is aware of CSS. So if you have hidden text *innerText* ignores
    this text, whereas *textContent* will not'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*innerText*了解CSS。因此，如果您有隐藏文本，*innerText*会忽略此文本，而*textContent*不会'
- en: Because *innerText* cares about CSS it will trigger a reflow, whereas *textContent*
    will not
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为*innerText*关心CSS，它会触发回流，而*textContent*不会
- en: '*innerText* ignores the *Text* nodes contained in *<script>* and *<style>*
    elements'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*innerText*忽略*<script>*和*<style>*元素中包含的*Text*节点'
- en: '*innerText*, unlike *textContent* will normalize the text that is returned.
    Just think of *textContent* as returning exactly what is in the document with
    the markup removed. This will include white space, line breaks, and carriage returns'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*innerText*，与*textContent*不同，会规范化返回的文本。只需将*textContent*视为返回文档中的内容，其中标记已被移除。这将包括空格、换行和回车符'
- en: '*innerText* is considered to be non-standard and browser specific while *textContent*
    is implemented from the DOM specifications'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*innerText*被认为是非标准的和特定于浏览器，而*textContent*是根据DOM规范实现的'
- en: If you you intend to use *innerText* you'll have to create a work around for
    Firefox.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算使用*innerText*，您将不得不为Firefox创建一个解决方法。
- en: 7.10 Combine sibling *Text* nodes into one text node using *normalize()*
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.10 使用*normalize()*将兄弟*Text*节点合并为一个文本节点
- en: Sibling *Text* nodes are typically only encountered when text is programaticly
    added to the DOM. To eliminate sibling *Text* nodes that contain no *Element*
    nodes we can use *normalize()*. This will concatenate sibling text nodes in the
    DOM into a single *Text* node. In the code below I create sibling text, append
    it to the DOM, then normalize it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当文本以编程方式添加到DOM时，通常会遇到兄弟*Text*节点。为了消除不包含*Element*节点的兄弟*Text*节点，我们可以使用*normalize()*。这将把DOM中的兄弟文本节点连接成一个单一的*Text*节点。在下面的代码中，我创建兄弟文本，将其附加到DOM，然后对其进行规范化。
- en: 'live code: [http://jsfiddle.net/domenlightenment/LG9WR](http://jsfiddle.net/domenlightenment/LG9WR)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/LG9WR](http://jsfiddle.net/domenlightenment/LG9WR)
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 7.11 Splitting a text node using *splitText()*
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.11 使用*splitText()*拆分文本节点
- en: When *splitText()* is called on a *Text* node it will alter the text node its
    being called on (leaving the text up to the offset) and return a new *Text* node
    that contains the text split off from the orginal text based on the offset. In
    the code below the text node *Hey Yo!* is split after *Hey* and *Hey* is left
    in the DOM while *Yo!* is turned into a new text node are returned by the *splitText()*
    method.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当在*Text*节点上调用*splitText()*时，它将改变被调用的文本节点（保留到偏移量的文本），并返回一个新的*Text*节点，其中包含根据偏移量从原始文本中分离出的文本。在下面的代码中，文本节点*Hey
    Yo!*在*Hey*后被分割，*Hey*保留在DOM中，而*Yo!*被转换为一个新的文本节点并由*splitText()*方法返回。
- en: 'live code: [http://jsfiddle.net/domenlightenment/Tz5ce](http://jsfiddle.net/domenlightenment/Tz5ce)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在线代码：[http://jsfiddle.net/domenlightenment/Tz5ce](http://jsfiddle.net/domenlightenment/Tz5ce)
- en: '[PRE13]**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE13]**'
