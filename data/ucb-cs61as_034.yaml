- en: Homework 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业 1
- en: Template
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板
- en: 'Type the following command at the terminal to copy the template file to the
    current directory (note the period at the end):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端输入以下命令，将模板文件复制到当前目录（注意末尾的句点）：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Or you can download the template [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw1.rkt).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以在[这里](http://inst.eecs.berkeley.edu/~cs61as/templates/hw1.rkt)下载模板。
- en: '**If you get stuck on this homework, review [Lesson 0.3](https://berkeley-cs61as.github.io/textbook/how-recursion-works.html)
    for a detailed explanation of recursion.**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你在这份作业上遇到困难，请查阅[Lesson 0.3](https://berkeley-cs61as.github.io/textbook/how-recursion-works.html)详细解释递归。**'
- en: Autograder
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动评分程序
- en: If you are working on the lab computers, the `grader` command will run the autograder.
    If you are working on your own personal machine, you should download [grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)
    and the [HW 1 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw1-tests.rkt).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在实验室计算机上工作，`grader`命令将运行自动评分程序。如果你在自己的个人机器上工作，你应该下载[grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)和[HW
    1 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw1-tests.rkt)。
- en: Exercise 1
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1
- en: Write a procedure `dupls-removed` that, given a sentence as input, returns the
    result of removing duplicate words from the sentence. This problem uses [recursion](https://berkeley-cs61as.github.io/textbook/how-recursion-works.html).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`dupls-removed`的过程，给定一个句子作为输入，返回从句子中删除重复单词后的结果。这个问题使用[递归](https://berkeley-cs61as.github.io/textbook/how-recursion-works.html)。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As a reminder, you can run the autograder on the lab computers by:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，你可以在实验室计算机上运行自动评分程序：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And on your own machine:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在你自己的机器上：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Exercise 2
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2
- en: Write a procedure `count-word` that takes a sentence and a word as arguments
    and outputs the number of occurences of the input word in the sentence.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`count-word`的过程，以一个句子和一个单词作为参数，并输出句子中输入单词的出现次数。
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Exercise 3
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3
- en: Explain what would happen if you used `new-if` (from Lab 0) instead of `if`
    in the `pigl` procedure.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 解释如果在`pigl`过程中使用`new-if`（来自Lab 0）而不是`if`会发生什么。
- en: Here is the definition of pigl from previous lab
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是之前实验室中`pigl`的定义
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Exercise 4
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4
- en: Write a procedure `squares` that takes a sentence of numbers as its argument
    and returns a sentence of the squares of the numbers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`squares`的过程，以一串数字作为参数，并返回这些数字的平方组成的句子。
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Exercise 5
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 5
- en: Write a procedure `switch` that takes a sentence as its argument and returns
    a sentence in which every instance of the words `I` or `me` is replaced by `you`,
    while every instance of `you` is replaced by `me` except at the beginning of the
    sentence, where it's replaced by `I`. (The word `I` is the only word that should
    be capitalized.)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`switch`的过程，以一个句子作为参数，并返回一个句子，其中每个`I`或`me`的实例都被替换为`you`，而每个`you`在句子开头以外的实例都被替换为`me`（句子中唯一应大写的词是`I`）。
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Hint: Consider writing a helper function that just handles the general case
    of the problem—that is, your helper shouldn''t worry about the "except at the
    beginning of the sentence" part. Then write `switch` using that helper function
    and handle the special case in the body of `switch`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：考虑编写一个处理问题一般情况的辅助函数——也就是说，你的辅助函数不必担心“除了在句子开头”这部分。然后使用该辅助函数编写`switch`，并在`switch`的主体中处理特殊情况。
- en: Exercise 6
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 6
- en: Write a predicate `ordered?` that takes a sentence of numbers as its argument
    and returns `#t` if the numbers are in ascending order, or `#f` otherwise.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`ordered?`的谓词，以一串数字作为参数，并在数字按升序排列时返回`#t`，否则返回`#f`。
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Exercise 7
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7
- en: Write a procedure `ends-e` that takes a sentence as its argument and returns
    a sentence containing only those words that end in the letter E.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`ends-e`的过程，以一个句子作为参数，并返回一个只包含以字母E结尾的单词的句子。
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Exercise 8
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 8
- en: Most versions of Lisp provide `and` and `or` procedures like the ones we've
    seen. In principle, there is no reason why these can't be ordinary procedures,
    but some versions of Lisp make them special forms.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Lisp版本提供了像我们见过的`and`和`or`过程。原则上，这些可以是普通过程，但某些Lisp版本将它们作为特殊形式。
- en: Suppose, for example, we evaluate `(or (= x 0) (= y 0) (= z 0))`. If `or` is
    an ordinary procedure, all three argument expressions will be evaluated before
    or is invoked. But if the variable `x` has the value 0, we know that the entire
    expression has to be true regardless of the values of `y` and `z`. A Lisp interpreter
    in which `or` is a special form can evaluate the arguments one by one until either
    a true one is found or it runs out of arguments.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，例如，我们评估`(or (= x 0) (= y 0) (= z 0))`。如果`or`是一个普通过程，那么在调用or之前，所有三个参数表达式都将被评估。但是如果变量`x`的值为0，我们知道整个表达式必须为真，而不管`y`和`z`的值如何。一个Lisp解释器，其中`or`是一个特殊形式，可以逐个评估参数，直到找到一个为真的参数或者用完所有参数。
- en: Devise a test that will tell you whether Racket's `and` and `or` are special
    forms or ordinary functions. This is a somewhat tricky problem, but it'll get
    you thinking about the evaluation process more deeply. Why might it be advantageous
    for an interpreter to treat `or` as a special form and evaluate its arguments
    one at a time? Can you think of reasons why it might be advantageous to treat
    `or` as an ordinary function?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个测试，告诉你Racket的`and`和`or`是特殊形式还是普通函数。这是一个有点棘手的问题，但它会让你更深入地思考评估过程。为什么对于解释器来说，将`or`视为特殊形式并逐个评估其参数可能是有利的？你能想到为什么将`or`视为普通函数可能是有利的吗？
- en: Submitting Your Homework
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交你的作业
- en: '**If you are having trouble submitting, ask a question on Piazza or contact
    a TA.**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你在提交时遇到问题，请在Piazza上提问或联系助教。**'
- en: '**Before submitting:** Make sure your file loads in Racket. You can verify
    this by typing into Racket: `(enter! "hw1.rkt")`, where "hw1.rkt" is the name
    of your homework file. You will not receive credit for homework that does not
    load in Racket.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**提交前：** 确保你的文件在Racket中加载。你可以通过在Racket中输入`(enter! "hw1.rkt")`来验证，其中“hw1.rkt”是你的作业文件的名称。如果作业在Racket中无法加载，你将不会得到任何学分。'
- en: To submit your assignment, you need to be logged in on any of the lab computers.
    If you want to submit from home, you must connect remotely to the lab computers.
    More on that later.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要提交你的作业，你需要在任何实验室计算机上登录。如果你想从家里提交，你必须远程连接到实验室计算机。稍后会详细介绍。
- en: Now, click on the "Terminal" icon on the left. Terminal is a terminal emulator,
    a method of interacting directly to the computer via text commands. It's sort
    of an "interpreter" for your entire computer. You can do useful things with xterm
    like navigate and manipulate the filesystem (think Windows Explorer), submit homework
    (what we're doing now), and start the Racket interpreter (via `racket`)!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在左侧点击“终端”图标。终端是一个终端仿真器，一种通过文本命令直接与计算机交互的方法。它有点像你整个计算机的“解释器”。你可以用xterm做一些有用的事情，比如导航和操作文件系统（类似于Windows资源管理器），提交作业（就像我们现在正在做的），以及启动Racket解释器（通过`racket`）！
- en: 'Let''s submit an assignment. This requires the following steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们提交一个作业。这需要以下步骤：
- en: Making a folder for an assignment (optional, but strongly recommended, as we'll
    see)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为作业创建一个文件夹（可选，但强烈建议，我们将看到原因）
- en: Doing the assignment in that folder (or moving the files to that folder if you've
    already completed the assignment)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个文件夹中完成作业（或者如果你已经完成了作业，将文件移动到那个文件夹中）
- en: Running the `submit` command
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`submit`命令
- en: Checking if the assignment was correctly submitted
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查作业是否正确提交
- en: We're going to submit an assignment called "units", which will tell the staff
    how many units you're doing.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提交一个名为“units”的作业，这将告诉工作人员你要做多少单元。
- en: Making a Folder
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个文件夹
- en: 'In the terminal, type:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中输入：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This tells the computer to make a directory (folder) named `units`. You can
    double check that it exists (and also see what else is in this current directory)
    by running `ls`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉计算机创建一个名为`units`的目录（文件夹）。你可以通过运行`ls`来双重检查它是否存在（还可以看到当前目录中还有什么）。
- en: 'Now we need to navigate to that folder, so we''ll do:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要导航到那个文件夹，所以我们会执行：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Finishing the Assignment
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完成作业
- en: In order to complete this assignment, you must create a file named `units` (inside
    the directory named `units`). In that file, write which units you're planning
    on doing. For example, if you were to do units 0, 1, 2, and 3, you'd put
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个任务，你必须创建一个名为`units`的文件（在名为`units`的目录中）。在那个文件中，写下你计划做哪些单元。例如，如果你要做0、1、2和3单元，你会写下
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Please **do not** include any additional spaces or blank lines!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请**不要**包含任何额外的空格或空行！
- en: Submitting
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提交
- en: After you've created the file, you can submit the assignment by doing
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完文件后，你可以通过以下方式提交作业
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This tells the computer that you want to submit the assignment "units". Follow
    any instructions that appear.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉计算机你想提交作业“units”。按照出现的任何指示操作。
- en: Checking Your Submission
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查你的提交
- en: 'The following command allows you to look at the times in which you''ve submitted:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令允许你查看你提交作业的时间：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: That's all for now. You might be interested in connecting from home in order
    to work on all of this. Details about that are under the Resources link on the
    top!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就是这些。你可能会对在家连接以便处理所有这些事情感兴趣。有关详细信息，请查看顶部的资源链接！
