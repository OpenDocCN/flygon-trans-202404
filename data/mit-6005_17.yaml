- en: 'Reading 17: Regular Expressions & Grammars'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17篇阅读：正则表达式和语法
- en: Software in 6.005
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.005中的软件
- en: '| Safe from bugs | Easy to understand | Ready for change |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| 免受错误 | 易于理解 | 准备好变化 |'
- en: '| Correct today and correct in the unknown future. | Communicating clearly
    with future programmers, including future you. | Designed to accommodate change
    without rewriting. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 今天正确且未来未知也正确。 | 与未来的程序员清晰沟通，包括未来的你。 | 设计以适应变化而无需重写。 |'
- en: Objectives
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目标
- en: 'After today’s class, you should:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的课后，你应该：
- en: Understand the ideas of grammar productions and regular expression operators
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解语法产生和正则表达式运算符的思想
- en: Be able to read a grammar or regular expression and determine whether it matches
    a sequence of characters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够阅读语法或正则表达式，并确定它是否匹配一个字符序列
- en: Be able to write a grammar or regular expression to match a set of character
    sequences and parse them into a data structure
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够编写语法或正则表达式来匹配一组字符序列并将其解析成数据结构
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Today’s reading introduces several ideas:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的阅读介绍了几个思想：
- en: grammars, with productions, nonterminals, terminals, and operators
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有产生物、非终端、终端和操作符的语法
- en: regular expressions
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式
- en: parser generators
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析器生成器
- en: 'Some program modules take input or produce output in the form of a sequence
    of bytes or a sequence of characters, which is called a *string* when it’s simply
    stored in memory, or a *stream* when it flows into or out of a module. In today’s
    reading, we talk about how to write a specification for such a sequence. Concretely,
    a sequence of bytes or characters might be:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一些程序模块以字节序列或字符序列的形式接收输入或产生输出，当它被简单地存储在内存中时，被称为*字符串*，当它流入或流出模块时，被称为*流*。在今天的阅读中，我们讨论了如何为这样的序列编写规范。具体来说，一系列字节或字符可能是：
- en: A file on disk, in which case the specification is called the *file format*
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘上的文件，此时规范称为*文件格式*
- en: Messages sent over a network, in which case the specification is a *wire protocol*
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过网络发送的消息，此时规范是*线协议*
- en: A command typed by the user on the console, in which case the specification
    is a *command line interface*
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户在控制台上键入的命令，此时规范是*命令行界面*
- en: A string stored in memory
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储在内存中的字符串
- en: For these kinds of sequences, we introduce the notion of a *grammar*, which
    allows us not only to distinguish between legal and illegal sequences, but also
    to parse a sequence into a data structure that a program can work with. The data
    structure produced from a grammar will often be a recursive data type like we
    talked about in the [recursive data type reading](../16-recursive-data-types/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些类型的序列，我们引入了*语法*的概念，它不仅允许我们区分合法和非法的序列，还允许我们将一个序列解析成程序可以处理的数据结构。从语法产生的数据结构通常是像我们在[递归数据类型阅读](../16-recursive-data-types/)中讨论过的那样的递归数据类型。
- en: We also talk about a specialized form of a grammar called a *regular expression*.
    In addition to being used for specification and parsing, regular expressions are
    a widely-used tool for many string-processing tasks that need to disassemble a
    string, extract information from it, or transform it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了一种称为*正则表达式*的语法的专门形式。除了用于规范和解析之外，正则表达式还是一种广泛使用的工具，用于许多需要拆解字符串、从中提取信息或转换它的字符串处理任务。
- en: The next reading will talk about parser generators, a kind of tool that translate
    a grammar automatically into a parser for that grammar.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的阅读将讨论解析器生成器，一种工具，可以将语法自动转换为该语法的解析器。
- en: Grammars
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语法
- en: To describe a sequence of symbols, whether they are bytes, characters, or some
    other kind of symbol drawn from a fixed set, we use a compact representation called
    a *grammar*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了描述一系列符号，无论它们是字节、字符还是从固定集合中提取的其他类型的符号，我们使用了一个称为*语法*的紧凑表示。
- en: A *grammar* defines a set of sentences, where each *sentence* is a sequence
    of symbols. For example, our grammar for URLs will specify the set of sentences
    that are legal URLs in the HTTP protocol.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*语法*定义了一组句子，其中每个*句子*都是符号序列。例如，我们的URL语法将指定HTTP协议中的合法URL集。'
- en: The symbols in a sentence are called *terminals* (or tokens).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 句子中的符号称为*终端*（或标记）。
- en: They’re called terminals because they are the leaves of a tree that represents
    the structure of the sentence. They don’t have any children, and can’t be expanded
    any further. We generally write terminals in quotes, like `'http'` or `':'`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它们被称为终端，因为它们是代表句子结构的树的叶子。它们没有任何子节点，也不能进一步扩展。我们通常用引号写终端，比如`'http'`或`':'`。
- en: A grammar is described by a set of *productions*, where each production defines
    a *nonterminal*. You can think of a nonterminal like a variable that stands for
    a set of sentences, and the production as the definition of that variable in terms
    of other variables (nonterminals), operators, and constants (terminals). Nonterminals
    are internal nodes of the tree representing a sentence.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 语法由一组*产生式*描述，其中每个产生式定义一个*非终结符*。你可以把一个非终结符看作是代表一组句子的变量，而产生式则是对这个变量的定义，以其他变量（非终结符）、运算符和常量（终结符）为基础。非终结符是表示句子的树的内部节点。
- en: A production in a grammar has the form
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 语法中的一个产生式的形式是
- en: nonterminal ::= expression of terminals, nonterminals, and operators
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 非终结符 ::= 终结符、非终结符和运算符的表达式
- en: In 6.005, we will name nonterminals using lowercase identifiers, like `x` or
    `y` or `url`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 6.005 中，我们将使用小写标识符来命名非终结符，如`x`或`y`或`url`。
- en: One of the nonterminals of the grammar is designated as the *root*. The set
    of sentences that the grammar recognizes are the ones that match the root nonterminal.
    This nonterminal is often called `root` or `start`, but in the grammars below
    we will typically choose more memorable names like `url`, `html`, and `markdown`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 语法中的一个非终结符被指定为*根*。语法识别的句子集合是与根非终结符匹配的句子。这个非终结符通常被称为`root`或`start`，但在下面的语法中，我们通常会选择更容易记忆的名称，如`url`、`html`和`markdown`。
- en: Grammar Operators
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语法运算符
- en: 'The three most important operators in a production expression are:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 产生式表达式中的三个最重要的运算符是：
- en: concatenation
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: repetition
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: union (also called alternation)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联合（也称为交替）
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also use additional operators which are just syntactic sugar (i.e.,
    they’re equivalent to combinations of the big three operators):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用其他仅是语法糖的附加运算符（即，它们等价于大三运算符的组合）：
- en: option (0 or 1 occurrence)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项（0 或 1 次出现）
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 1+ repetition (1 or more occurrences)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1+ 重复（1 次或更多次）
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: character classes
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符类
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'By convention, the operators `*`, `?`, and `+` have highest precedence, which
    means they are applied first. Alternation `|` has lowest precedence, which means
    it is applied last. Parentheses can be used to override this precedence, so that
    a sequence or alternation can be repeated:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，运算符`*`、`?`和`+`具有最高的优先级，这意味着它们首先被应用。交替`|`具有最低的优先级，这意味着它在最后应用。括号可以用于覆盖这个优先级，使得一个序列或交替可以重复：
- en: grouping using parentheses
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用括号进行分组
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: reading exercises
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Reading a Grammar 1
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读语法 1
- en: 'Consider this grammar:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个语法：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: (missing answer)(missing answer)(missing answer)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Reading a Grammar 2
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读语法 2
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Reading a Grammar 3
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读语法 3
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)(missing
    answer)(missing answer)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: Reading a Grammar 4
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读语法 4
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: 'Example: URL'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例如：网址
- en: Suppose we want to write a grammar that represents URLs. Let’s build up a grammar
    gradually by starting with simple examples and extending the grammar as we go.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要编写一个代表网址的语法。让我们通过从简单的示例开始并随着扩展语法而渐进地构建语法。
- en: 'Here’s a simple URL:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的网址：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A grammar that represents the set of sentences containing *only this URL* would
    look like:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 代表*只有这个网址*的句子集合的语法如下：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'But let’s generalize it to capture other domains, as well:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们将其泛化以捕获其他领域：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can write this as one line, like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其写成一行，如下所示：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This grammar represents the set of all URLs that consist of just a two-part
    hostname, where each part of the hostname consists of 1 or more letters. So `http://mit.edu/`
    and `http://yahoo.com/` would match, but not `http://ou812.com/`. Since it has
    only one nonterminal, a *parse tree* for this URL grammar would look like the
    picture on the right.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此语法表示仅由两部分主机名组成的所有URL，其中主机名的每个部分由1个或多个字母组成。因此，`http://mit.edu/`和`http://yahoo.com/`将匹配，但`http://ou812.com/`不会。由于它只有一个非终结符，这个URL语法的*解析树*将看起来像右侧的图片。
- en: 'In this one-line form, with a single nonterminal whose production uses only
    operators and terminals, a grammar is called a *regular expression* (more about
    that later). But it will be easier to understand if we name the parts using new
    nonterminals:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种单行形式中，具有仅使用运算符和终结符的产生式的单一非终结符的语法称为*正则表达式*（稍后详细介绍）。但如果我们使用新的非终结符命名部分，将更容易理解：
- en: '![the parse tree produced by parsing ''http://mit.edu'' with a grammar with
    url, hostname, and word nonterminals](http://web.mit.edu/6.005/www/fa16/classes/17-regex-grammarsfigures/url-with-hostname.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![使用具有url、主机名和单词非终结符的语法解析''http://mit.edu''生成的解析树](http://web.mit.edu/6.005/www/fa16/classes/17-regex-grammarsfigures/url-with-hostname.png)'
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The parse tree for this grammar is now shown at right. The tree has more structure
    now. The leaves of the tree are the parts of the string that have been parsed.
    If we concatenated the leaves together, we would recover the original string.
    The `hostname` and `word` nonterminals are labeling nodes of the tree whose subtrees
    match those rules in the grammar. Notice that the immediate children of a nonterminal
    node like `hostname` follow the pattern of the `hostname` rule, `word '.' word`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此语法的解析树现在显示在右侧。树现在具有更多结构。树的叶子是已解析的字符串部分。如果我们将叶子连接在一起，我们将恢复原始字符串。`主机名`和`单词`非终结符标记了树的节点，其子树与语法中的规则匹配。请注意，像`主机名`这样的非终结符节点的直接子节点遵循`主机名`规则，`单词'.'单词`。
- en: 'How else do we need to generalize? Hostnames can have more than two components,
    and there can be an optional port number:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要进行哪些泛化？主机名可以有多个组件，还可以有一个可选的端口号：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To handle this kind of string, the grammar is now:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这种类型的字符串，现在的语法是：
- en: '![the parse tree produced by parsing ''http://mit.edu'' with a grammar with
    a recursive hostname rule](http://web.mit.edu/6.005/www/fa16/classes/17-regex-grammarsfigures/url-with-recursive-hostname.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![使用具有递归主机名规则的语法解析''http://mit.edu''生成的解析树](http://web.mit.edu/6.005/www/fa16/classes/17-regex-grammarsfigures/url-with-recursive-hostname.png)'
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Notice how hostname is now defined recursively in terms of itself.* Which
    part of the hostname definition is the base case, and which part is the recursive
    step? What kinds of hostnames are allowed?'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*请注意，主机名现在是递归地定义的。* 主机名定义的哪一部分是基本情况，哪一部分是递归步骤？允许哪些类型的主机名？'
- en: 'Using the repetition operator, we could also write hostname like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用重复运算符，我们也可以这样写主机名：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Another thing to observe is that this grammar allows port numbers that are not
    technically legal, since port numbers can only range from 0 to 65535\. We could
    write a more complex definition of port that would allow only these integers,
    but that’s not typically done in a grammar. Instead, the constraint 0 <= port
    <= 65535 would be specified alongside the grammar.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要观察的是，此语法允许端口号不符合技术上的规定，因为端口号只能范围从0到65535。我们可以编写更复杂的端口定义，只允许这些整数，但在语法中通常不这样做。相反，约束0
    <= 端口 <= 65535 将与语法一起指定。
- en: 'There are more things we should do to go farther:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多我们应该做的事情以走得更远：
- en: generalizing `http` to support the additional protocols that URLs can have
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`http`泛化以支持URL可能具有的其他协议
- en: generalizing the `/` at the end to a slash-separated path
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将结尾的`/`泛化为斜杠分隔的路径
- en: allowing hostnames with the full set of legal characters instead of just a-z
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许使用完整合法字符集而不仅仅是a-z的主机名
- en: reading exercises
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Writing a Grammar
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 编写语法
- en: 'Suppose we want the `url` grammar to also match strings of the form:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望`url`语法也匹配以下形式的字符串：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'but not strings of the form:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 但不是以下形式的字符串：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'So we change the grammar to:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将语法更改为：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失答案）（缺失答案）（缺失答案）（缺失答案）
- en: (missing explanation)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: （缺失解释）
- en: 'Example: Markdown and HTML'
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例：Markdown 和 HTML
- en: 'Now let’s look at grammars for some file formats. We’ll be using two different
    markup languages that represent typographic style in text. Here they are:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看一些文件格式的语法。我们将使用两种不同的标记语言，它们表示文本中的排版样式。这里它们是：
- en: Markdown
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Markdown
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: HTML
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: HTML
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For simplicity, our example HTML and Markdown grammars will only specify italics,
    but other text styles are of course possible.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为简单起见，我们的示例HTML和Markdown语法仅指定了斜体，但当然还有其他文本样式可能。
- en: 'Here’s the grammar for our simplified version of Markdown:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们简化版Markdown的语法：
- en: '![a parse tree produced by the Markdown grammar](http://web.mit.edu/6.005/www/fa16/classes/17-regex-grammarsfigures/markdown.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![由Markdown语法产生的解析树](http://web.mit.edu/6.005/www/fa16/classes/17-regex-grammarsfigures/markdown.png)'
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here’s the grammar for our simplified version of HTML:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们简化版HTML的语法：
- en: '![a parse tree produced by the HTML grammar](http://web.mit.edu/6.005/www/fa16/classes/17-regex-grammarsfigures/html.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![由HTML语法产生的解析树](http://web.mit.edu/6.005/www/fa16/classes/17-regex-grammarsfigures/html.png)'
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: reading exercises
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Recursive Grammars
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 递归语法
- en: Look at the `markdown` and `html` grammars above, and compare their `italic`
    productions. Notice that not only do they differ in delimiters (`_` in one case,
    `< >` tags in the other), but also in the nonterminal that is matched between
    those delimiters. One grammar is recursive; the other grammar is not.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 查看上面的`markdown`和`html`语法，并比较它们的`italic`产生式。注意，它们不仅在分隔符（在一个情况下为`_`，在另一个情况下为`<
    >`标记）上有所不同，而且在这些分隔符之间匹配的非终结符也不同。一个语法是递归的；另一个语法则不是。
- en: For each string below, if you match the specified grammar against it, which
    letters are inside matches to the `italic` nonterminal? Your answer should be
    some subset of the letters `abcde`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下面的每个字符串，如果将指定的语法与之匹配，哪些字母在与`italic`非终结符匹配的内容内？您的答案应该是字母`abcde`的某个子集。
- en: (missing answer)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）
- en: (missing explanation)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: (missing answer)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少答案）
- en: (missing explanation)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: （缺少解释）
- en: Regular Expressions
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正则表达式
- en: 'A *regular* grammar has a special property: by substituting every nonterminal
    (except the root one) with its righthand side, you can reduce it down to a single
    production for the root, with only terminals and operators on the right-hand side.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*普通*语法具有特殊属性：通过用其右侧替换每个非终结符（除了根终结符），您可以将其减少到根的单个产生式，右侧仅包含终结符和运算符。
- en: 'Our URL grammar was regular. By replacing nonterminals with their productions,
    it can be reduced to a single expression:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的URL语法是正则的。通过用它们的产生式替换非终结符，它可以被减少为单个表达式：
- en: '[PRE26]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The Markdown grammar is also regular:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown语法也是正则的：
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'But our HTML grammar can’t be reduced completely. By substituting righthand
    sides for nonterminals, you can eventually reduce it to something like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们的HTML语法无法完全简化。通过用非终结符的右侧替换，您最终可以将其减少到类似于这样的东西：
- en: '[PRE28]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: …but the recursive use of `html` on the righthand side can’t be eliminated,
    and can’t be simply replaced by a repetition operator either. So the HTML grammar
    is not regular.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 但是右侧的`html`的递归使用无法消除，并且也不能简单地用重复运算符替换。因此，HTML语法不是正则的。
- en: The reduced expression of terminals and operators can be written in an even
    more compact form, called a *regular expression*. A regular expression does away
    with the quotes around the terminals, and the spaces between terminals and operators,
    so that it consists just of terminal characters, parentheses for grouping, and
    operator characters. For example, the regular expression for our `markdown` format
    is just
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 终端和运算符的简化表达式可以以更紧凑的形式编写，称为*正则表达式*。正则表达式摒弃了终端周围的引号和终端与运算符之间的空格，因此它只包含终端字符、用于分组的括号和运算符字符。例如，我们的`markdown`格式的正则表达式就是
- en: '[PRE29]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Regular expressions are also called *regexes* for short. A regex is far less
    readable than the original grammar, because it lacks the nonterminal names that
    documented the meaning of each subexpression. But a regex is fast to implement,
    and there are libraries in many programming languages that support regular expressions.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式也被简称为*regexes*。正则表达式比原始语法不太可读，因为它缺少记录了每个子表达式含义的非终结符名称。但是正则表达式的实现速度很快，并且许多编程语言中都有支持正则表达式的库。
- en: 'The regex syntax commonly implemented in programming language libraries has
    a few more special operators, in addition to the ones we used above in grammars.
    Here’s are some common useful ones:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言库中常见的正则表达式语法还有一些特殊运算符，除了我们在语法中使用的运算符外。这里是一些常用的有用的运算符：
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Using backslashes is important whenever there are terminal characters that
    would be confused with special characters. Because our `url` regular expression
    has `.` in it as a terminal, we need to use a backslash to escape it:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当存在会与特殊字符混淆的终端字符时，使用反斜杠是很重要的。因为我们的`url`正则表达式中包含`.`作为终端字符，所以我们需要使用反斜杠来转义它：
- en: '[PRE31]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: reading exercises
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Regular Expressions
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式
- en: 'Consider the following regular expression:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下正则表达式：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: (missing answer)(missing answer)(missing answer)(missing answer)(missing answer)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失答案 缺失答案 缺失答案 缺失答案 缺失答案
- en: (missing explanation)
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失解释
- en: Using regular expressions in Java
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Java中使用正则表达式
- en: Regular expressions (“regexes”) are widely used in programming, and you should
    have them in your toolbox.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式（"regexes"）在编程中被广泛使用，你应该将它们放入你的工具箱中。
- en: In Java, you can use regexes for manipulating strings (see [`String.split`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-),
    [`String.matches`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#matches-java.lang.String-),
    [`java.util.regex.Pattern`](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)).
    They’re built-in as a first-class feature of modern scripting languages like Python,
    Ruby, and Javascript, and you can use them in many text editors for find and replace.
    Regular expressions are your friend! Most of the time. Here are some examples.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，你可以使用正则表达式来操作字符串（参见[`String.split`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-)、[`String.matches`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#matches-java.lang.String-)、[`java.util.regex.Pattern`](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)）。它们作为现代脚本语言的一流特性内置在其中，如Python、Ruby和Javascript，并且你可以在许多文本编辑器中使用它们进行查找和替换。正则表达式是你的朋友！大多数时候。以下是一些示例。
- en: 'Replace all runs of spaces with a single space:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 用单个空格替换所有连续的空格：
- en: '[PRE33]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Match a URL:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配一个URL：
- en: '[PRE34]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Extract part of an HTML tag:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 提取HTML标签的一部分：
- en: '[PRE35]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Notice the backslashes in the URL and HTML tag examples. In the URL example,
    we want to match a literal period `.`, so we have to first escape it as `\.` to
    protect it from being interpreted as the regex match-any-character operator, and
    then we have to further escape it as `\\.` to protect the backslash from being
    interpreted as a Java string escape character. In the HTML example, we have to
    escape the quote mark `"` as `\"` to keep it from ending the string. The frequency
    of backslash escapes makes regexes still less readable.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意URL和HTML标签示例中的反斜杠。在URL示例中，我们想匹配一个字面上的句号`.`，所以我们必须先将其转义为`\.`以防止它被解释为正则表达式的匹配任意字符操作符，然后我们必须进一步将其转义为`\\.`以防止反斜杠被解释为Java字符串转义字符。在HTML示例中，我们必须将引号`"`转义为`\"`以防止它结束字符串。反斜杠转义的频率使得正则表达式仍然不够可读。
- en: reading exercises
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读练习
- en: Using regexes in Java
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中使用正则表达式
- en: 'Write the shortest regex you can to remove single-word, lowercase-letter-only
    HTML tags from a string:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 写一个尽可能短的正则表达式来从字符串中移除只包含单词、小写字母的HTML标签：
- en: '[PRE36]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If the desired output is `"The Good, the Bad, and the Ugly"`, what is shortest
    regex you can put in place of TODO? You may find it useful to [run this example
    in the Online Python Tutor](http://www.pythontutor.com/java.html#code=public+class+Regex+%7B%0A++++public+static+void+main(String%5B%5D+args%29+%7B%0A++++++++String+input+%3D+%22The+%3Cb%3EGood%3C/b%3E,+the+%3Ci%3EBad%3C/i%3E,+and+the+%3Cstrong%3EUgly%3C/strong%3E%22%3B+%0A++++++++String+regex+%3D+%22TODO%22%3B%0A++++++++String+output+%3D+input.replaceAll(regex,+%22%22%29%3B%0A++++++++System.out.println(output%29%3B%0A++++%7D%0A%7D&mode=edit&origin=opt-frontend.js&cumulative=false&heapPrimitives=false&textReferences=false&py=java&rawInputLstJSON=%5B%5D).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果期望的输出是`"The Good, the Bad, and the Ugly"`，你可以用什么最短的正则表达式替换TODO？你可能会发现在[在线Python教程中运行此示例](http://www.pythontutor.com/java.html#code=public+class+Regex+%7B%0A++++public+static+void+main(String%5B%5D+args%29+%7B%0A++++++++String+input+%3D+%22The+%3Cb%3EGood%3C/b%3E,+the+%3Ci%3EBad%3C/i%3E,+and+the+%3Cstrong%3EUgly%3C/strong%3E%22%3B+%0A++++++++String+regex+%3D+%22TODO%22%3B%0A++++++++String+output+%3D+input.replaceAll(regex,+%22%22%29%3B%0A++++++++System.out.println(output%29%3B%0A++++%7D%0A%7D&mode=edit&origin=opt-frontend.js&cumulative=false&heapPrimitives=false&textReferences=false&py=java&rawInputLstJSON=%5B%5D)中有所帮助。
- en: (missing answer)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失答案
- en: (missing explanation)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失解释
- en: Context-Free Grammars
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上下文无关文法
- en: In general, a language that can be expressed with our system of grammars is
    called context-free. Not all context-free languages are also regular; that is,
    some grammars can’t be reduced to single nonrecursive productions. Our HTML grammar
    is context-free but not regular.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，一个可以用我们的文法系统表达的语言被称为上下文无关。并不是所有的上下文无关语言都是正则的；也就是说，有些文法无法简化为单个的非递归产生式。我们的HTML文法是上下文无关的，但不是正则的。
- en: 'The grammars for most programming languages are also context-free. In general,
    any language with nested structure (like nesting parentheses or braces) is context-free
    but not regular. That description applies to the Java grammar, shown here in part:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数编程语言的语法也是上下文无关的。通常，任何具有嵌套结构的语言（如嵌套括号或大括号）都是上下文无关的，但不是正则的。该描述适用于 Java 语法，此处部分显示：
- en: '[PRE37]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Machine-processed textual languages are ubiquitous in computer science. Grammars
    are the most popular formalism for describing such languages, and regular expressions
    are an important subclass of grammars that can be expressed without recursion.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，机器处理的文本语言无处不在。语法是描述这种语言的最流行形式，而正则表达式是语法的一个重要子类，可以在没有递归的情况下表示。
- en: 'The topics of today’s reading connect to our three properties of good software
    as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 今天阅读的主题与我们对好软件的三个特性有关，如下：
- en: '**Safe from bugs.** Grammars and regular expressions are declarative specifications
    for strings and streams, which can be used directly by libraries and tools. These
    specifications are often simpler, more direct, and less likely to be buggy then
    parsing code written by hand.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**免受错误的影响**。语法和正则表达式是字符串和流的声明性规范，可以直接由库和工具使用。这些规范通常更简单、更直接，而且不太可能出错，与手工编写的解析代码相比。'
- en: '**Easy to understand.** A grammar captures the shape of a sequence in a form
    that is easier to understand than hand-written parsing code. Regular expressions,
    alas, are often not easy to understand, because they are a one-line reduced form
    of what might have been a more understandable regular grammar.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于理解**。语法捕捉了序列的形状，以一种比手写解析代码更易于理解的形式。不幸的是，正则表达式通常不容易理解，因为它们是可能更易于理解的正则语法的一行简化形式。'
- en: '**Ready for change.** A grammar can be easily edited, but regular expressions,
    unfortunately, are much harder to change, because a complex regular expression
    is cryptic and hard to understand.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于更改**。语法可以很容易地编辑，但是正则表达式，不幸的是，要改变就难得多，因为复杂的正则表达式晦涩难懂。'
