- en: Quick Intro to RacketTuesday, January 10th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Racket简介星期二，1月10日
- en: 'Racket syntax: similar to other Sexpr-based languages.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Racket语法：类似于其他基于S表达式的语言。
- en: 'Reminder: the parens can be compared to C/etc function cal parens — they always
    mean that some function is applied. This is the reason why `(+ (1) (2))` won’t
    work: if you use C syntax that is `+(1(), 2())` but `1` isn’t a function so `1()`
    is an error.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒：括号可以与C等函数调用的括号进行比较 — 它们总是表示应用了某个函数。这就是为什么`(+ (1) (2))`不起作用的原因：如果你使用C语法，那就是`+(1(),
    2())`，但`1`不是一个函数，所以`1()`是一个错误。
- en: 'An important difference between *syntax* and *semantics*. A good way to think
    about this is the difference between the *string* `42` stored in a file somewhere
    (two ASCII values), and the *number* `42` stored in memory (in some representation).
    You could also continue with the above example: there is nothing wrong with “*murder*”
    — it’s just a word, but *murder* is something you’ll go to jail for. The evaluation
    function that Racket uses is actually a function that takes a piece of syntax
    and returns (or executes) its semantics.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*语法*和*语义*之间的一个重要区别。一个好的思考方式是，存储在某个文件中的*字符串*`42`（两个ASCII值）与存储在内存中的*数字*`42`（以某种表示形式）之间的区别。你也可以继续上面的例子：“*谋杀*”没有错
    — 它只是一个词，但*谋杀*是会让你入狱的事情。Racket使用的求值函数实际上是一个接受一段语法并返回（或执行）其语义的函数。'
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`define` expressions are used for creating new bindings, do not try to use
    them to change values. For example, you should not try to write something like
    `(define x (+ x 1))` in an attempt to mimic `x = x+1`. It will not work.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`define`表达式用于创建新的绑定，不要试图使用它们来改变值。例如，你不应该尝试写类似`(define x (+ x 1))`的东西来模仿`x =
    x+1`。这不会起作用。'
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'There are two boolean values built in to Racket: `#t` (true) and `#f` (false).
    They can be used in `if` statements, for example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Racket内置了两个布尔值：`#t`（真）和`#f`（假）。它们可以在`if`语句中使用，例如：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'because `(< 2 3)` evaluates to `#t`. As a matter of fact, *any* value except
    for `#f` is considered to be true, so:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`(< 2 3)`评估为`#t`。事实上，*任何*值除了`#f`都被认为是真的，所以：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Note: Racket is a *functional* language — so *everything* has a value.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：Racket是一种*函数式*语言 — 所以*一切*都有一个值。
- en: This means that the expression
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着表达式
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: has no meaning when `test` evaluates to `#f`. This is unlike Pascal/C where
    statements *do* something (side effect) like printing or an assignment — here
    an `if` statement with no alternate part will just *do nothing* if the test is
    false… Racket, however, must return some value — it could decide on simply returning
    `#f` (or some unspecified value) as the value of
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当`test`评估为`#f`时没有意义。这与Pascal/C不同，那里的语句会执行一些操作（副作用），比如打印或赋值 — 如果测试为假，那么`if`语句就什么也不做…
    然而，Racket必须返回一些值 — 它可以决定简单地返回`#f`（或某个未指定的值）作为
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: as some implementations do, but Racket just declares it a syntax error. (As
    we will see in the future, Racket has a more convenient `when` with a clearer
    intention.)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一些实现可能会这样做，但Racket会声明它为语法错误。（正如我们将在未来看到的，Racket有一个更方便的`when`，具有更清晰的意图。）
- en: '* * *'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Well, *almost* everything is a value…
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，*几乎*所有东西都是一个值…
- en: There are certain things that are part of Racket’s syntax — for example `if`
    and `define` are special forms, they do not have a value! More about this shortly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些东西是Racket语法的一部分 — 例如`if`和`define`是特殊形式，它们没有值！稍后会详细介绍更多。
- en: '(Bottom line: much more things do have a value, compared with other languages.)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: （总结���与其他语言相比，有更多的东西具有值。）
- en: '* * *'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`cond` is used for a `if` … `else if` … `else if` … `else` … sequence. The
    problem is that nested `if`s are inconvenient. For example,'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`cond`用于`if` … `else if` … `else if` … `else` …序列。问题在于嵌套的`if`很不方便。例如，'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In C/Java/Whatever, you’d write:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在C/Java/其他语言中，你会写：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '(Side question: why isn’t there a `return` statement in Racket?)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: （旁边的问题：为什么Racket中没有`return`语句？）
- en: 'But trying to force Racket code to look similar:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但试图强迫Racket代码看起来相似：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: is more than just bad taste — the indentation rules are there for a reason,
    the main one is that you can see the structure of your program at a quick glance,
    and this is no longer true in the above code. (Such code will be penalized!)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅是品味问题 — 缩进规则是有原因的，主要原因是你可以一眼看出程序的结构，而在上面的代码中这不再成立。（这样的代码将受到惩罚！）
- en: 'So, instead of this, we can use Racket’s `cond` statement, like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以使用Racket的`cond`语句，像这样：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that `else` is a keyword that is used by the `cond` form — you should always
    use an `else` clause (for similar reasons as an `if`, to avoid an extra expression
    evaluation there, and we will need it when we use a typed language). Also note
    that square brackets are read by DrRacket like round parens, it will only make
    sure that the paren pairs match. We use this to make code more readable — specifically,
    there is a major difference between the above use of `[]` from the conventional
    use of `()`. Can you see what it is?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`else`是`cond`形式使用的关键字——你应该总是使用一个`else`子句（出于类似于`if`的原因，在那里避免额外的表达式评估，并且当我们使用类型语言时，我们将需要它）。另请注意，方括号被DrRacket读取为圆括号，它只会确保括号配对匹配。我们使用这个来使代码更易读——具体来说，上面使用`[]`与常规使用`()`之间有一个重大区别。你能看出来是什么吗？
- en: 'The general structure of a `cond`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`cond`的一般结构：'
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '* * *'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Example for using an `if` expression, and a recursive function:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`if`表达式和递归函数的示例：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use this to show the different tools, especially:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个来展示不同的工具，特别是：
- en: special objects that *cannot* be used
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法使用的特殊对象
- en: syntax-checker
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法检查器
- en: stepper
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步进器
- en: submission tool (installing, registering and submitting)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交工具（安装、注册和提交）
- en: 'An example of converting it to tail recursive form:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将其转换为尾递归形式的示例：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '* * *'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Additional notes about homework submissions:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有关作业提交的附加说明：
- en: 'Begin every function with clear documentation: a purpose of statement and its
    type.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个函数都应以清晰的文档开头：包括一个目的声明和其类型。
- en: Document the function when needed, and according to the guidelines above and
    in the style guide.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要记录函数，并按照上述指南和样式指南进行。
- en: After the function, always have a few test cases — they should cover your complete
    code (make sure to include possible corner cases). Later on, we will switch to
    testing the whole file through it’s “public interface”, instead of testing each
    function.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数之后，总是有几个测试案例——它们应该涵盖你的完整代码（确保包括可能的边界情况）。后来，我们将转而通过它的“公共接口”测试整个文件，而不是测试每个函数。
