- en: Eval
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 求值
- en: The rest of the lesson has concepts that may be confusing the first time you
    learn about them, so carefully reread sentences that are hard to understand! It's
    also important to remember that the metacircular evaluator is all about abstraction,
    so if you don't understand how something is implemented just yet, it'll probably
    be explained in a later section.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 课程的其余部分可能包含一些概念，第一次学习时可能会感到困惑，所以请仔细重新阅读那些难以理解的句子！同时，要记住，元循环求值器的核心是抽象，所以如果你暂时不理解某个实现方式，很可能会在后面的部分中解释。
- en: Eval
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 求值
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Does this code look familar to you? It should; it's part of the Racket-1/Scheme-1
    interpreter you learned in Lesson 6! If you look at line 3, you can see that `eval-1`
    is using Scheme's `eval` procedure. You didn't really have to worry too much about
    the details in Lesson 6, because Scheme's `eval` procedure handled all the details.
    But what are the details behind Scheme's `eval`?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码看起来熟悉吗？应该是的；它是你在第6课学到的Racket-1/Scheme-1解释器的一部分！如果你看第3行，你会看到`eval-1`正在使用Scheme的`eval`过程。在第6课中，你不需要太担心细节，因为Scheme的`eval`过程处理了所有细节。但是Scheme的`eval`背后的细节是什么？
- en: 'Now is time to look at how `mc-eval` is written. Take a look, and compare it
    to `eval-1`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看`mc-eval`是如何编写的了。看一看，并将其与`eval-1`进行比较：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`mc-eval` is defined to do the work of underlying Scheme''s `eval` to interpret
    Scheme''s syntax rules and to decompose each call into the appropriate action.
    Don''t worry if you don''t understand it. We will go through this code step-by-
    step.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`mc-eval`被定义为执行底层Scheme的`eval`工作，解释Scheme的语法规则，并将每个调用分解为适当的操作。如果你不理解，不要担心。我们将逐步解释这段代码。'
- en: What Does mc-eval Do?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`mc-eval`做什么？'
- en: The procedure `mc-eval` takes as arguments an expression and an environment.
    It classifies the expression and directs its evaluation. In order to keep the
    procedure general, we express the determination of the type of an expression abstractly,
    making no commitment to any particular representation for the various types of
    expressions. Each type of expression has a predicate that tests for it and an
    abstract means for selecting its parts.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 过程`mc-eval`接受一个表达式和一个环境作为参数。它对表达式进行分类并指导其求值。为了保持过程的通用性，我们以抽象的方式表达对表达式类型的确定，不对各种表达式类型的具体表示做任何承诺。每种表达式类型都有一个用于测试的谓词，并选择其部分的抽象方法。
- en: 'When `mc-eval` processes a procedure application, it uses `list-of-values`
    to produce the list of arguments to which the procedure is to be applied. The
    procedure `list- of-values` takes as an argument the operands of the combination.
    It evaluates each operand and returns a list of the corresponding values:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当`mc-eval`处理一个过程应用时，它使用`list-of-values`生成要应用过程的参数列表。过程`list-of-values`以组合的操作数作为参数。它评估每个操作数并返回相应值的列表：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Left to Right? Right to Left?** Given some list of operands,`list-of-values`
    will recursively construct a nested cons structure of calls to `mc-eval` on each
    operand. Notice that we cannot tell the order that the metacircular evaluator
    evaluates operands from left to right or from right to left. Its evaluation order
    is inherited from the underlying Scheme: If the arguments to `cons` in `list-of-values`
    are evaluated from left to right, then `list-of-values` will evaluate operands
    from left to right; and if the arguments to `cons` are evaluated from right to
    left, then `list-of-values` will evaluate operands from right to left.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**从左到右？从右到左？** 给定一些操作数列表，`list-of-values`将递归构造一个嵌套的`mc-eval`调用的cons结构。注意，我们无法确定元循环求值器从左到右还是从右到左评估操作数的顺序。它的评估顺序继承自底层Scheme：如果`list-of-values`中`cons`的参数从左到右评估，则`list-of-values`将从左到右评估操作数；如果`cons`中的参数从右到左评估，则`list-of-values`将从右到左评估操作数。'
- en: Write a version of `list-of-values` that evaluates operands from left to right
    regardless of the order of evaluation in the underlying Scheme. Also write a version
    of `list-of-values` that evaluates operands from right to left.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个`list-of-values`的版本，无论Scheme底层的求值顺序如何，都从左到右评估操作数。同时编写一个从右到左评估操作数的`list-of-values`版本。
- en: Let's go line by line to see what each expression in the conditional does.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行查看条件中的每个表达式的作用。
- en: Self-Evaluating Expressions
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自求值表达式
- en: '![](http://www.bbc.co.uk/music/tinthepark/2010/img/home/radio1_small_promo.jpg
    )'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](http://www.bbc.co.uk/music/tinthepark/2010/img/home/radio1_small_promo.jpg
    )'
- en: For self-evaluating expressions, such as numbers, `mc-eval` returns the expression
    itself. `mc-eval` must look up variables in the environment to find their values.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自评估表达式，例如数字，`mc-eval`返回表达式本身。`mc-eval`必须在环境中查找变量以找到它们的值。
- en: 'The only self-evaluating items are numbers and strings:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 唯一的自评估项是数字和字符串：
- en: (define (self-evaluating? exp) (cond ((number? exp) true) ((string? exp) true)
    (else false)))
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (define (self-evaluating? exp) (cond ((number? exp) true) ((string? exp) true)
    (else false)))
- en: Remember, words are **not** strings. Strings use double quotes (e.g. `"Hello,
    world!"`).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，单词**不是**字符串。字符串使用双引号（例如`"Hello, world!"`）。
- en: 'Variables are represented by symbols:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量由符号表示：
- en: (define (variable? exp) (symbol? exp))
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (define (variable? exp) (symbol? exp))
- en: Special Forms
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊形式
- en: '![](https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQzrLHmk190OIaf1 -xqLtrpW-BYa-yWwYHL58ZZBqQw6AVbqSZ2qw)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQzrLHmk190OIaf1 -xqLtrpW-BYa-yWwYHL58ZZBqQw6AVbqSZ2qw)'
- en: 'Special Forms: Sentences and Words'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊形式：句子和单词
- en: For quoted expressions, `mc-eval` returns the expression that was quoted.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于引用的表达式，`mc-eval`返回被引用的表达式。
- en: Recall that the Scheme parser automatically transforms the expression `'(some
    text here)` into the expression pair `(quote (some text here))`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Scheme解析器会自动将表达式`'(some text here)`转换为表达式对`(quote (some text here))`。
- en: 'In other words, quotations have the form `(quote <text-of-quotation>)`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，引用的形式为`(quote <text-of-quotation>)`：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`Quoted?` is defined in terms of the procedure `tagged-list?`, which identifies
    lists beginning with a designated symbol:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`Quoted?`是根据过程`tagged-list?`定义的，该过程识别以指定符号开头的列表：'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Special Form: Lambda'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊形式：Lambda
- en: A `lambda` expression must be transformed into an applicable procedure by packaging
    together the parameters and body specified by the lambda expression with the environment
    of the evaluation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`lambda`表达式必须通过将lambda表达式指定的参数和主体与评估环境打包在一起，转换为可应用的过程。'
- en: 'Lambda expressions are lists that begin with the symbol lambda:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda表达式是以符号lambda开头的列表：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There is a constructor for lambda expressions, which is used by `definition-
    value`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个用于lambda表达式的构造器，它被`definition-value`使用：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Special Form: Sequences'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊形式：序列
- en: '![](http://x-equals.com/blog/wp-content/editing_sequences_5_seq_1280.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](http://x-equals.com/blog/wp-content/editing_sequences_5_seq_1280.jpg)'
- en: '`Eval-sequence` is used by `apply` to evaluate the sequence of expressions
    in a procedure body. It is also used by `eval` to evaluate the sequence of expressions
    in a `begin` expression. It takes as arguments a sequence of expressions and an
    environment, and evaluates the expressions in the order in which they occur. The
    value returned is the value of the final expression.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Eval-sequence`被`apply`用于评估过程体中的表达式序列。它还被`eval`用于评估`begin`表达式中的表达式序列。它接受一个表达式序列和一个环境作为参数，并按照它们出现的顺序评估表达式。返回的值是最终表达式的值。'
- en: (define (eval-sequence exps env) (cond ((last-exp? exps) (mc-eval (first-exp
    exps) env)) (else (mc-eval (first-exp exps) env) (eval-sequence (rest-exps exps)
    env))))
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (define (eval-sequence exps env) (cond ((last-exp? exps) (mc-eval (first-exp
    exps) env)) (else (mc-eval (first-exp exps) env) (eval-sequence (rest-exps exps)
    env))))
- en: '`Begin` packages a sequence of expressions into a single expression. A `begin`
    expression requires evaluating its sequence of expressions in the order in which
    they appear. We include syntax operations on `begin` expressions to extract the
    actual sequence from the `begin` expression, as well as selectors that return
    the first expression and the rest of the expressions in the sequence.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Begin`将一系列表达式打包成单个表达式。`begin`表达式需要按照它们出现的顺序评估其表达式序列。我们包括对`begin`表达式的语法操作，以从`begin`表达式中提取实际序列，以及返回序列中第一个表达式和其余表达式的选择器。'
- en: (define (begin? exp) (tagged-list? exp 'begin)) (define (begin-actions exp)
    (cdr exp)) (define (last-exp? seq) (null? (cdr seq))) (define (first-exp seq)
    (car seq)) (define (rest-exps seq) (cdr seq))
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (define (begin? exp) (tagged-list? exp 'begin)) (define (begin-actions exp)
    (cdr exp)) (define (last-exp? seq) (null? (cdr seq))) (define (first-exp seq)
    (car seq)) (define (rest-exps seq) (cdr seq))
- en: 'There is a constructor `sequence->exp` (for use by `cond->if`) that transforms
    a sequence into a single expression, using `begin` if necessary:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个构造器`sequence->exp`（供`cond->if`使用），它将一个序列转换为单个表达式，必要时使用`begin`：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Special Form: Conditionals'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊形式：条件
- en: '![](http://callofcarly.files.wordpress.com/2011/10/if.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](http://callofcarly.files.wordpress.com/2011/10/if.png)'
- en: '`Eval-if` evaluates the predicate part of an `if` expression in the given environment.
    If the result is true, eval-if evaluates the consequent, otherwise it evaluates
    the alternative:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Eval-if`在给定环境中评估`if`表达式的谓词部分。如果结果为真，则eval-if评估结果，否则评估替代项：'
- en: (define (eval-if exp env) (if (true? (mc-eval (if-predicate exp) env)) (mc-eval
    (if-consequent exp) env) (mc-eval (if-alternative exp) env)))
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (define (eval-if exp env) (if (true? (mc-eval (if-predicate exp) env)) (mc-eval
    (if-consequent exp) env) (mc-eval (if-alternative exp) env)))
- en: 'The use of `true?` in `eval-if` highlights the issue of the connection between
    an implemented language and an implementation language. The `if-predicate` is
    evaluated in the language being implemented and thus yields a value in that language.
    The interpreter predicate `true?` translates that value into a value that can
    be tested by the if in the implementation language: The metacircular representation
    of truth might not be the same as that of the underlying Scheme.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在`eval-if`中使用`true?`突出了实现语言和实现语言之间的连接问题。`if-predicate`在正在实现的语言中进行评估，因此产生该语言中的一个值。解释器谓词`true?`将该值转换为可以由实现语言中的if测试的值：真实性的元循环表示可能与基础Scheme的表示不同。
- en: '`true?` and `false?` are define as following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`true?`和`false?`定义如下：'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: An `if` expression requires special processing of its parts, so as to evaluate
    the consequent if the predicate is true, and otherwise to evaluate the alternative.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`表达式需要对其部分进行特殊处理，以便在谓词为真时评估结果，否则评估替代项。'
- en: (define (if? exp) (tagged-list? exp 'if)) (define (if-predicate exp) (cadr exp))
    (define (if-consequent exp) (caddr exp)) (define (if-alternative exp) (if (not
    (null? (cdddr exp))) (cadddr exp) 'false))
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (define (if? exp) (tagged-list? exp 'if)) (define (if-predicate exp) (cadr exp))
    (define (if-consequent exp) (caddr exp)) (define (if-alternative exp) (if (not
    (null? (cdddr exp))) (cadddr exp) 'false))
- en: 'There is a constructor for `if` expressions, to be used by `cond->if` to transform
    `cond` expressions into `if` expressions:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个用于`if`表达式的构造函数，供`cond->if`使用将`cond`表达式转换为`if`表达式：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A case analysis (`cond`) is transformed into a nest of `if` expressions and
    then evaluated.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 案例分析（`cond`）被转换为一系列`if`表达式，然后进行评估。
- en: For example,
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'can be represented as:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 可以表示为：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: There are syntax procedures that extract the parts of a cond expression, and
    a procedure `cond->if` that transforms `cond` expressions into `if` expressions.
    A case analysis begins with `cond` and has a list of predicate-action clauses.
    A clause is an `else` clause if its predicate is the symbol `else`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有提取cond表达式部分的语法过程，以及一个将`cond`表达式转换为`if`表达式的过程`cond->if`。案例分析以`cond`开始，并具有一系列谓词-动作子句。如果其谓词是符号`else`，则子句是`else`子句。
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Expressions (such as `cond`) that we choose to implement as syntactic transformations
    are called **derived expressions**. `Let` expressions are also derived expressions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择实现为语法转换的表达式（如`cond`）称为**派生表达式**。`Let`表达式也是派生表达式。
- en: 'Special Form: Assignments and Definitions'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊形式：赋值和定义
- en: '![](http://2.bp.blogspot.com/-BJ9VKWsOh74/UjWTv9D1TZI/AAAAAAAAfFA/c0x9oTVm2S4/
    s1600/DEFINE_TwitterAvatar_R1_eo.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](http://2.bp.blogspot.com/-BJ9VKWsOh74/UjWTv9D1TZI/AAAAAAAAfFA/c0x9oTVm2S4/
    s1600/DEFINE_TwitterAvatar_R1_eo.png)'
- en: An assignment to (or a definition of) a variable must recursively call `eval`
    to compute the new value to be associated with the variable. The environment must
    be modified to change (or create) the binding of the variable.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对变量的赋值（或定义）必须递归调用`eval`来计算与变量关联的新值。必须修改环境以更改（或创建）变量的绑定。
- en: The following procedure handles assignments to variables. It calls `eval` to
    find the value to be assigned and passes the variable and the resulting value
    to `set-variable-value!` to be defined in the designated environment.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下过程处理对变量的赋值。它调用`eval`来找到要赋值的值，并将变量和结果值传递给`set-variable-value!`在指定环境中定义。
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Definitions of variables are handled in a similar manner:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的定义以类似的方式处理：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: By convention, the symbol `ok` is returned as the value of an assignment or
    a definition.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，符号`ok`被返回为赋值或定义的值。
- en: Now let's look at how assignment expressions are represented.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看赋值表达式是如何表示的。
- en: 'Assignments have the form `(set! <var> <value>)`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值的形式为`(set! <var> <value>)`：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Definitions have the form `(define <var> <value>)` or the form
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 定义的形式为`(define <var> <value>)`或形式
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The latter form (standard procedure definition) can be re-written as:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 后一种形式（标准过程定义）可以重写为：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The corresponding syntax procedures are the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的语法过程如下：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**And and Or**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**And 和 Or**'
- en: 'Recall the definitions of the special forms `and` and `or` from Unit 1:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾第1单元中特殊形式`and`和`or`的定义：
- en: 'and: The expressions are evaluated from left to right. If any expression evaluates
    to false, `false` is returned; any remaining expressions are not evaluated. If
    all the expressions evaluate to true values, the value of the last expression
    is returned. If there are no expressions then true is returned.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: and：表达式从左到右进行评估。如果任何表达式评估为假，则返回`false`；任何剩余的表达式都不会被评估。如果所有表达式评估为真值，则返回最后一个表达式的值。如果没有表达式，则返回true。
- en: 'or: The expressions are evaluated from left to right. If any expression evaluates
    to a true value, that value is returned; any remaining expressions are not evaluated.
    If all expressions evaluate to false, or if there are no expressions, then `false`
    is returned.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: or：表达式从左到右进行评估。如果任何表达式评估为真值，则返回该值；任何剩余的表达式都不会被评估。如果所有表达式评估为假，或者没有表达式，则返回`false`。
- en: Install `and` and `or` as new special forms for the evaluator by defining appropriate
    syntax procedures and evaluation procedures `eval-and` and `eval-or`. Alternatively,
    show how to implement `and` and `or` as derived expressions.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过定义适当的语法过程和评估过程`eval-and`和`eval-or`，将`and`和`or`安装为评估器的新特殊形式。或者，展示如何将`and`和`or`实现为派生表达式。
- en: mc-eval Definition Revisited
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: mc-eval 定义再次审视
- en: Let's take a look at `mc-eval`'s definition again. Does it make sense to you
    now?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看看`mc-eval`的定义。现在你明白了吗？
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Wait, wait, what''s apply? I don''t know what that is!*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*等等，等等，apply是什么？我不知道那是什么！*'
- en: We are going to explore it in the next subsection.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一小节中探讨这个问题。
- en: Which of the following use mc-eval in their definition? Multiple answers may
    be correct, so check each answer individually.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪些在其定义中使用了mc-eval？可能有多个正确答案，因此请逐个检查每个答案。
- en: Takeaways
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: In this subsection, you learned how Scheme evaluates the expressions using `mc-eval`
    and other procedures.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，您了解了Scheme如何使用`mc-eval`和其他过程评估表达式。
- en: What's Next?
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: Go to the next subsection and learn how Scheme applies the evaluated expressions!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前往下一小节，了解Scheme如何应用评估的表达式！
