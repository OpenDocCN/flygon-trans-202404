- en: Example - Interleaving Streams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 - 交错流
- en: Appending Streams
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 追加流
- en: 'Suppose you have two streams and you want to merge one with the other, akin
    to `append` with lists. With `append`, we join the beginning of one list to the
    end of another. An equivalent stream definition would look like this:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有两个流，你想将一个与另一个合并，类似于列表的`append`。用`append`，我们将一个列表的开头连接到另一个列表的结尾。等效的流定义将是这样的：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: But wait! Streams can be of *infinite* length! If we call `(stream-append s1
    s2)` and `s1` is an infinite stream, we'll never be able to access any of the
    elements of `s2`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等！流可以是*无限*长的！如果我们调用`(stream-append s1 s2)`而`s1`是一个无限流，我们将永远无法访问`s2`的任何元素。
- en: Interleaving Streams
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交错流
- en: 'An alternative is to **interleave** the two streams:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是**交错**这两个流：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'By interleaving the two streams, we can be certain that we will use elements
    from both streams. We can define `interleave` like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过交错两个流，我们可以确保我们将使用来自两个流的元素。我们可以这样定义`interleave`：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
