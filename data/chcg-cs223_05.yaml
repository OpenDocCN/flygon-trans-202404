- en: Immutability and Persistence
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不可变性和持久性
- en: What makes implementing efficient data structures harder in a purely functional
    setting compared to an imperative one?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯函数环境中实现高效数据结构比在命令式环境中更难的原因是什么？
- en: The lack of *imperative*, or *destructive*, updates leads to copying possibly
    large parts of the data structure, and
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*命令式*或*破坏性*更新的缺乏导致必须复制可能的大部分数据结构，以及'
- en: All versions of a data structure are expected to be *persistent* and can be
    used even after updates.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有版本的数据结构都预期是*持久的*，即使在更新之后也可以使用。
- en: Any practical compiler for a purely functional language aggressively looks for
    opportunities to *share* the representation of data that is common to multiple
    data structures. Nevertheless, space overhead is unavoidable when compared to
    similar data structures in imperative settings. However, as we will see later
    in the course, with clever design and a dash of lazy evaluation, many efficient
    data structures can be designed for purely functional settings. But first, some
    basics...
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 任何用于纯函数语言的实用编译器都会积极寻找将多个数据结构共享的机会。然而，与命令式环境中的类似数据结构相比，空间开销是不可避免的。然而，正如我们将在课程后期看到的那样，通过巧妙的设计和一点懒惰的评估，许多高效的数据结构可以设计用于纯函数环境中。但首先，先来了解一些基础知识...
- en: Lists
  id: totrans-5
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 列表
- en: 'The following function updates the element in `xs` at index `i`, if one exists,
    with the value `y`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数更新了索引为`i`的`xs`中的元素（如果存在），并将其值设置为`y`：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As with the `find` function that walks throught a list one element at a time,
    so too does `update` by keeping track of how many more elements `i` to traverse.
    The worst-case running time of `update` is *O(n)*, where *n* is the size of `xs`.
    Why isn't the worst-case running time infinite, when `i` is negative?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与`find`函数一样，按元素逐个遍历列表，`update`也是如此，通过跟踪还需要遍历多少元素`i`。`update`的最坏情况运行时间是*O(n)*，其中*n*是`xs`的大小。当`i`为负数时，为什么最坏情况运行时间不是无限的？
- en: In addition to running times, we also need to pay attention to the space overheads
    incurred. That is, how much additional data needs to be represented during and
    after a call to the function.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了运行时间外，我们还需要注意所产生的空间开销。也就是说，在函数调用期间和之后，需要表示多少额外数据。
- en: 'In the second case, notice that the output list `y :: xs''` refers to `xs''`,
    which is identical to the tail of the input list. This is an opportunity for the
    language implementation, which will of course use pointers and pointer manipulation,
    to share the underlying representationof `xs''` among the representations of the
    input and output lists.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '在第二种情况中，请注意输出列表`y :: xs''`引用了`xs''`，它与输入列表的尾部相同。这是语言实现的一个机会，当然会使用指针和指针操作，来共享`xs''`的底层表示在输入和输出列表之间。'
- en: 'In the third case, on the other hand, there is no such opportunity for sharing;
    the resulting list is built from `x` and some unknown list that results from the
    recursive call to `update''`. As a result, a new memory cell must be allocated
    for `x` in the output list and concatenated to the list that results from the
    recursive call. This case embodies the worst case with respect to space (in addition
    to time). If `update` needs to update the last element in the list, then the first
    *n-1* elements of `xs` are copied and cons-ed on to the singleton list `y :: []`.
    Thus, `update` allocates *O(n)* space in the worst case.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '另一方面，在第三种情况下，没有机会共享；结果列表是从`x`和由递归调用`update''`产生的某个未知列表构建而成的。因此，在输出列表中必须为`x`分配一个新的内存单元，并将其连接到递归调用结果的列表中。这种情况体现了关于空间（以及时间）的最坏情况。如果`update`需要更新列表中的最后一个元素，则会将`xs`的前*n-1*个元素复制并添加到单元素列表`y
    :: []`上。因此，在最坏情况下，`update`需要分配*O(n)*的空间。'
- en: 'Another list operation to consider is `append`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑的另一个列表操作是`append`：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let *n* be the size of `xs` and *m* be the size of `ys`. Notice that the elements
    of `ys` are not traversed at all (so its number of elements cannot contribute
    to execution time) and `ys` is referred to by name in the first case, where the
    language implementation can share its representation in the input and output lists.
    Thus, the worst-case time and space cost of `append` is *O(n)*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让*n*是`xs`的大小，*m*是`ys`的大小。请注意，`ys`的元素根本没有被遍历（因此其元素数不会对执行时间产生贡献），并且在第一种情况中，`ys`被名称引用，语言实现可以在输入和输出列表中共享其表示。因此，`append`的最坏情况时间和空间成本为*O(n)*。
- en: In practice, it is common to use a single variable *n* to describe the combined
    size of the lists, or the size of the larger list. In either case, the worst-case
    time and space costs are still *O(n)*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，通常使用单个变量 *n* 来描述列表的组合大小，或者较大列表的大小。在任何情况下，最坏情况的时间和空间成本仍然为 *O(n)*。
- en: Binary Search Trees
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 二叉搜索树
- en: 'Recall the `findBST` function that searches for an element in a binary-search-ordered
    tree, making a recursive call only in the subtree where the element can possibly
    appear. The insertion algorithm that preserve the binary search property is similar:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下搜索二叉搜索树中元素的 `findBST` 函数，只在可能出现元素的子树中进行递归调用。保留二叉搜索性质的插入算法类似：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As with `findBST`, `insert` runs in *O(h)* time, where *h* is the height of
    the tree. The height *h* of a tree *t* is equal to its size *n* in the worst case,
    where every `Node` has only one element (that is, *t* is a crooked list). And
    *h* is *O(n·log(n))* in the best case, when *t* is (roughly) balanced.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `findBST` 类似，`insert` 的运行时间为 *O(h)*，其中 *h* 是树的高度。树 *t* 的高度 *h* 在最坏情况下等于其大小
    *n*，其中每个 `Node` 只有一个元素（即 *t* 是一个弯曲的列表）。在最佳情况下，当 *t* 大致平衡时，*h* 是 *O(n·log(n))*。
- en: Regarding space, the `insert` function copies into the output tree all of the
    node values `y` that are observed until an `Empty` is reached. But the `right`
    subtree in the second case and the `left` subtree in the third case are common
    to both the input and output trees, so the implementation has the opportunity
    to share this representation. Because at most *h* nodes are traversed, `insert`
    allocates *O(h)* space in the worst case.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 关于空间，`insert` 函数将观察到的所有节点值 `y` 复制到输出树中，直到达到 `Empty` 为止。但是，第二种情况中的 `right` 子树和第三种情况中的
    `left` 子树在输入和输出树中都是共享的，因此实现有机会共享此表示。因为最多遍历 *h* 个节点，所以在最坏情况下，`insert` 分配 *O(h)*
    的空间。
- en: '[`Persistence.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Persistence.elm)
    contains the `List` and `Tree` examples above.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Persistence.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/Persistence.elm)
    包含上述的 `List` 和 `Tree` 示例。'
- en: Reading
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: Required
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 必需的
- en: Okasaki, Chapters 1 and 2
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Okasaki，第 1 和第 2 章
