- en: Demand Paging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需求分页
- en: Lecture Notes for CS 140
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CS 140的讲座笔记
- en: Spring 2014
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年春季
- en: John Ousterhout
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰·奥斯特豪特
- en: 'Readings for this topic from *Operating Systems: Principles and Practice*:
    Chapter 9.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*操作系统：原理与实践*这一主题的阅读材料：第9章。'
- en: '*Demand paging*: not all of a process''s virtual address space needs to be
    loaded in main memory at any given time. Each page can be either:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*需求分页*：进程的虚拟地址空间不需要一次性全部加载到主内存中。每个页面可以是以下情况之一：'
- en: In memory (physical page frame)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在内存中（物理页框）
- en: On disk (*backing store*)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在磁盘上（*后备存储*）
- en: Page Faults
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页错误
- en: What happens when a process references a page that is in the backing store?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当进程引用位于后备存储器中的页面时会发生什么？
- en: For pages in the backing store, the present bit is cleared in the page table
    entries.
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于位于后备存储器中的页面，页表条目中的存在位被清除。
- en: If present is not set, then a reference to the page causes a trap to the operating
    system.
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不存在设置，则对页面的引用会导致陷入操作系统。
- en: These traps are called *page faults*.
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些陷阱称为*页错误*。
- en: To handle a page fault, the operating system
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要处理页面错误，操作系统
- en: Finds a free page frame in memory
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到内存中的一个空闲页框
- en: Reads the page in from backing store to the page frame
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从后备存储器中读取页面到页框中
- en: Updates the page table entry, setting present
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新页面表条目，设置存在
- en: Resumes execution of the thread
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复线程的执行
- en: How does the OS figure out which page generated the fault?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统如何确定生成错误的页面？
- en: 'x86: hardware saves the virtual address that caused the fault (CR2 register)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: x86：硬件保存导致故障的虚拟地址（CR2寄存器）
- en: On earlier machines OS got only address of faulting instruction, must simulate
    the instruction and try every address to find the one that generated the fault
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在早期的机器上，操作系统只获得故障指令的地址，必须模拟指令并尝试每个地址找到生成故障的地址。
- en: Restarting process execution after a page fault is tricky, since the fault may
    have occurred in the middle of an instruction.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面错误后重新启动进程执行很棘手，因为错误可能发生在指令的中间。
- en: If instructions are idempotent, just restart the faulting instruction (hardware
    saves instruction address during page fault).
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果指令是幂等的，只需重新启动错误指令（硬件在页面错误期间保存指令地址）。
- en: 'Non-idempotent instructions are more difficult to restart:'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非幂等指令更难重新启动：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Without hardware support it may be impossible to resume a process safely after
    a page fault. Hardware must keep track of side effects:'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有硬件支持，可能无法安全地在页面错误后恢复进程。硬件必须跟踪副作用：
- en: Undo all side effects during a page fault?
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面错误期间是否撤消所有副作用？
- en: Save info about side effects, use it to restart instruction "in the middle"
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存关于副作用的信息，用于重新启动“中间”的指令。
- en: Page Fetching
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面获取
- en: 'Once the basic page fault mechanism is working, the OS has two scheduling decisions
    to make:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦基本的页面错误机制运行起来，操作系统需要做出两个调度决策：
- en: 'Page fetching: when to bring pages into memory.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面获取：何时将页面带入内存。
- en: 'Page replacement: which pages to throw out of memory.'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面替换：要从内存中抛出的页面。
- en: 'Overall goal: make physical memory look larger than it is.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总体目标：使物理内存看起来比实际更大。
- en: '*Locality*: most programs spend most of their time using a small fraction of
    their code and data.'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*局部性*：大多数程序大部分时间使用其代码和数据的一小部分。'
- en: Keep in memory the information that is being used.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留正在使用的信息在内存中。
- en: Keep unused information on disk in *paging file* (also called backing store,
    or swap space)
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在磁盘上的*分页文件*（也称为后备存储或交换空间）中保留未使用的信息
- en: 'Ideally: paging produces a memory system with the performance of main memory
    and the cost/capacity of disk!'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理想情况下：分页产生具有主存性能和磁盘成本/容量的内存系统！
- en: 'Most modern OSes use *demand fetching*:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数现代操作系统使用*需求获取*：
- en: Start process with no pages loaded, don't load a page into memory until it is
    referenced.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始进程时不加载页面，直到引用它时才将页面加载到内存中。
- en: 'The pages for a process divide into three groups:'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程的页面分为三组：
- en: 'Read-only code pages: read from the executable file when needed.'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只读代码页面：在需要时从可执行文件中读取。
- en: 'Initialized data pages: on first access, read from executable file. Once loaded,
    save to the paging file since contents may have changed.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化的数据页面：首次访问时，从可执行文件中读取。一旦加载，保存到分页文件中，因为内容可能已更改。
- en: 'Uninitialized data pages: on first access, just clear memory to all zeros.
    When paging out, save to the paging file.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未初始化的数据页面：首次访问时，只需将内存清除为所有零。在分页时，保存到分页文件中。
- en: 'Prefetching: try to predict when pages will be needed and load them ahead of
    time to avoid page faults.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预取：尝试预测何时需要页面，并提前加载它们以避免页面错误。
- en: Requires predicting the future, so hard to do.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要预测未来，所以很难做到。
- en: 'One approach: when taking a page fault, read many pages instead of just one
    (wins if program accesses memory sequentially).'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种方法：当发生页面错误时，读取多个页面而不仅仅是一个（如果程序按顺序访问内存，则胜出）。
- en: Page Replacement
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面替换
- en: Once all of memory is in use, will need to throw out one page each time there
    is a page fault.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦所有内存都被使用，每次发生页面错误时都需要丢弃一个页面。
- en: 'Random: pick any page at random (works surprisingly well!)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机：随机选择任意页面（效果出奇的好！）
- en: 'FIFO: throw out the page that has been in memory longest.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先进先出（FIFO）：丢弃在内存中存在时间最长的页面。
- en: 'MIN: The optimal algorithm requires us to predict the future.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIN：最佳算法要求我们预测未来。
- en: 'Least Recently Used (LRU): use the past to predict the future.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最近最少使用（LRU）：利用过去来预测未来。
- en: 'Implementing LRU: need hardware support to keep track of which pages have been
    used recently.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现LRU：需要硬件支持来跟踪最近使用的页面。
- en: Perfect LRU?
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完美的LRU？
- en: Keep a hardware register for each page, store system clock into that register
    on each memory reference.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个页面保留一个硬件寄存器，在每次内存引用时将系统时钟存储到该寄存器中。
- en: To choose page for placement, scan through all pages to find the one with the
    oldest clock.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为选择放置页面，扫描所有页面以找到最老的时钟。
- en: Hardware costs prohibitive in the early days of paging; also, expensive to scan
    all pages during replacement.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在分页的早期，硬件成本过高；此外，在替换过程中扫描所有页面也很昂贵。
- en: No machines have actually implemented this.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有机器实际实现过这一点。
- en: Current computers settle for an approximation that is efficient. Just find an
    old page, not necessarily the oldest.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前计算机采用一种高效的近似方法。只需找到一个旧页面，不一定是最老的。
- en: '*Clock algorithm* (also called *second chance* algorithm): keep *reference
    bit* for each page frame, hardware sets the reference bit whenever a page is read
    or written. To choose page for placement:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*时钟算法*（也称为*二次机会*算法）：为每个页面帧保留*引用位*，硬件在读取或写入页面时设置引用位。选择放置页面的方法：'
- en: Cycle through pages in order (circularly).
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按顺序（循环方式）遍历页面。
- en: If the next page has been referenced, then don't replace it; just clear the
    reference bit and continue to the next page.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果下一个页面已被引用，则不要替换它；只需清除引用位并继续到下一个页面。
- en: If the page has not been referenced since the last time we checked it, then
    replace that page.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果自上次检查以来未引用该页面，则替换该页面。
- en: '*Dirty bit*: one bit for each page frame, set by hardware whenever the page
    is modified. If a dirty page is replaced, it must be written to disk before its
    page frame is reused.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*脏位*：每个页面帧一个位，当页面被修改时由硬件设置。如果替换了脏页面，则必须在重用其页面帧之前将其写入磁盘。'
- en: The clock algorithm typically gives additional preference to dirty pages. For
    example, if the reference bit for a page is clear, but the dirty bit is set, don't
    replace this page now, but clear the dirty bit and start writing the page to disk.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时钟算法通常会额外偏好脏页面。例如，如果页面的引用位未设置，但脏位已设置，则现在不要替换此页面，而是清除脏位并开始将页面写入磁盘。
- en: 'Free page pool: many systems keep a small list of clean pages that are available
    immediately for replacement.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空闲页面池：许多系统保留一个小的干净页面列表，这些页面可以立即用于替换。
- en: During replacement, take the page that has been in the free pool the longest,
    then run the replacement algorithm to add a new page to the free pool.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在替换过程中，选择在空闲池中存在时间最长的页面，然后运行替换算法以向空闲池添加新页面。
- en: Pages in the free pool have their present bit off, so any references to those
    pages cause a page fault
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空闲池中的页面的当前位关闭，因此对这些页面的任何引用都会导致页面错误
- en: If a page fault occurs for a page in the free pool, remove it from the free
    pool and put it back in service; much faster than reading from disk.
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果发生页面错误，且页面在空闲池中，则将其从空闲池中移除并重新投入使用；比从磁盘读取要快得多。
- en: Provides an extra opportunity for recovery if we make a poor page replacement
    decision.
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们做出了不良的页面替换决策，提供了额外的恢复机会。
- en: How to implement page replacement when there are multiple processes running
    in the system?
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当系统中有多个进程运行时如何实现页面替换？
- en: '*Global replacement*: all pages from all processes are lumped into a single
    replacement pool. Each process competes with all the other processes for page
    frames.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*全局替换*：所有进程的所有页面都被合并到一个替换池中。每个进程与所有其他进程竞争页面帧。'
- en: '*Per-process replacement*: each process has a separate pool of pages. A page
    fault in one process can only replace one of that process''s frames. This eliminates
    interference from other processes.'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*每进程替换*：每个进程都有一个单独的页面池。一个进程中的页面错误只能替换该进程的一个页面帧。这消除了其他进程的干扰。'
- en: 'Unfortunately, per-process replacement creates a new scheduling dilemma: how
    many page frames to allocate to each process? If this decision is made incorrectly,
    it can result in inefficient memory usage.'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不幸的是，每个进程的替换会产生一个新的调度困境：为每个进程分配多少页框？如果这个决定做错了，可能会导致内存使用效率低下。
- en: Most systems use global replacement.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数系统使用全局替换。
