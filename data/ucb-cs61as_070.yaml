- en: Homework 5
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业 5
- en: Template
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板
- en: 'Type the following into the terminal to copy the template file to the current
    directory (note the period at the end):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中键入以下内容，将模板文件复制到当前目录（注意末尾的句点）：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Or you can download the template [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw5.rkt).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以在这里下载模板[here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw5.rkt)。
- en: Autograder
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动评分程序
- en: If you are working on the lab computers, the `grader` command will run the autograder.
    If you are working on your own personal machine, you should download [grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)
    and the [HW 5 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw5-tests.rkt).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在实验室的计算机上工作，`grader`命令将运行自动评分程序。如果你在自己的个人机器上工作，你应该下载[grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)和[HW
    5 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw5-tests.rkt)。
- en: 'Exercise 1: SICP 2.26'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1：SICP 2.26
- en: 'Suppose we define `x` and `y` to be two lists:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们定义了`x`和`y`是两个列表：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What result is printed by the interpreter in response to evaluating each of
    the following expressions?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 评估以下表达式时，解释器打印的结果是什么？
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Exercise 2: SICP 2.29'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2：SICP 2.29
- en: 'A binary mobile consists of two branches, a left branch and a right branch.
    Each branch is a rod of a certain length, from which hangs either a weight or
    another binary mobile. We can represent a binary mobile using compound data by
    constructing it from two branches (for example, using list):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 二叉手机由两个支架组成，左支架和右支架。每个支架都是一根长度不同的杆，悬挂在杆上的是一个重量或另一个二叉手机。我们可以用复合数据来表示一个二叉手机，通过从两个支架构造它（例如，使用列表）：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A branch is constructed from a length (which must be a number) together with
    a structure, which may be either a number (representing a simple weight) or another
    mobile:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个支架由一个长度（必须是一个数字）和一个结构构成，该结构可以是一个数字（代表一个简单的重量）或另一个手机：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**a.** Write the corresponding selectors `left-branch` and `right-branch`,
    which return the branches of a mobile, and `branch-length` and `branch-structure`,
    which return the components of a branch.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**a.** 编写相应的选择器`left-branch`和`right-branch`，它们返回手机的支架，以及`branch-length`和`branch-structure`，它们返回支架的组件。'
- en: '**b.** Using your selectors, define a procedure `total-weight` that returns
    the total weight of a mobile.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**b.** 使用你的选择器，定义一个过程`total-weight`，它返回手机的总重量。'
- en: '**c.** A mobile is said to be *balanced* if the torque applied by its top-left
    branch is equal to that applied by its top-right branch (that is, if the length
    of the left rod multiplied by the weight hanging from that rod is equal to the
    corresponding product for the right side) and if each of the submobiles hanging
    off its branches is balanced. Design a predicate that tests whether a binary mobile
    is balanced.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**c.** 如果一个手机是*平衡的*，那么它的左上支的扭矩等于右上支的扭矩（也就是说，如果左侧杆的长度乘以悬挂在该杆上的重量等于右侧对应的乘积），并且每个悬挂在其支架上的子手机都是平衡的。设计一个谓词，测试一个二叉手机是否平衡。'
- en: '**d.** Suppose we change the representation of mobiles so that the constructors
    are'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**d.** 假设我们改变手机的表示形式，使得构造函数为'
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How much do you need to change your programs to convert to the new representation?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要对你的程序进行多少改变才能转换成新的表示形式？
- en: 'Exercise 3: SICP 2.30, 2.31'
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3：SICP 2.30, 2.31
- en: '**a.** Define a procedure `square-tree` analogous to the `square-list` procedure.
    That is, `square-tree` should behave as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**a.** 定义一个类似于`square-list`过程的过程`square-tree`。也就是说，`square-tree`应该有以下行为：'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**b.** Abstract your answer to produce a procedure `tree-map` with the property
    that `square-tree` could be defined as:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**b.** 将你的答案抽象化，产生一个过程`tree-map`，具有`square-tree`可以被定义为：'
- en: '`(define (square-tree tree) (tree-map square tree))`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`(define (square-tree tree) (tree-map square tree))`'
- en: 'Exercise 4: SICP 2.36'
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4：SICP 2.36
- en: 'The procedure `accumulate-n` is similar to `accumulate` except that it takes
    as its third argument a sequence of sequences, which are all assumed to have the
    same number of elements. It applies the designated accumulation procedure to combine
    all the first elements of the sequences, all the second elements of the sequences,
    and so on, and returns a sequence of the results. For instance, if s is a sequence
    containing four sequences, `((1 2 3) (4 5 6) (7 8 9) (10 11 12))`, then the value
    of `(accumulate-n + 0 s)` should be the sequence`(22 26 30)`. Fill in the missing
    expressions in the following definition of `accumulate-n`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 过程`accumulate-n`类似于`accumulate`，只是它将作为第三个参数的序列序列，假定它们都有相同数量的元素。它应用指定的累积过程来组合所有序列的第一个元素，所有序列的第二个元素，依此类推，并返回结果的序列。例如，如果s是包含四个序列的序列，`((1
    2 3) (4 5 6) (7 8 9) (10 11 12))`，那么`(accumulate-n + 0 s)`的值应该是序列`(22 26 30)`。填写以下`accumulate-n`定义中缺失的表达式：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Exercise 5
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5
- en: Suppose we represent vectors *v* = (*v*[*i*]) as sequences of numbers, and matrices
    *m* = (*m*[*i*,*j*]) as sequences of vectors (the rows of the matrix). For example,
    the matrix
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将向量*v* = (*v*[*i*])表示为数字序列，将矩阵*m* = (*m*[*i*,*j*])表示为向量序列（矩阵的行）。例如，矩阵
- en: '![](../Images/08b19ae183508723c4b9c4eef0ff4533.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/08b19ae183508723c4b9c4eef0ff4533.jpg)'
- en: 'is represented as the sequence `((1 2 3 4) (4 5 6 6) (6 7 8 9))`. With this
    representation, we can use sequence operations to concisely express the basic
    matrix and vector operations. These operations (which are described in any book
    on matrix algebra) are the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 被表示为序列`((1 2 3 4) (4 5 6 6) (6 7 8 9))`。通过这种表示，我们可以使用序列操作简洁地表达基本的矩阵和向量操作。这些操作（在任何关于矩阵代数的书中都有描述）如下：
- en: '![](../Images/752b164e529b03c16a290c2eb19d5ed0.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/752b164e529b03c16a290c2eb19d5ed0.jpg)'
- en: We can define the dot product as
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将点积定义为
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Fill in the missing expressions in the following procedures for computing the
    other matrix operations. (The procedure accumulate-n is defined in the previous
    exercise)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 填写以下用于计算其他矩阵操作的过程中缺失的表达式。（`accumulate-n`过程在前一个练习中定义）
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Exercise 6: SICP 2.38'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习6：SICP 2.38
- en: 'The `accumulate` procedure is also known as `fold-right`, because it combines
    the first element of the sequence with the result of combining all the elements
    to the right. There is also a `fold-left`, which is similar to `fold-right`, except
    that it combines elements working in the opposite direction:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`accumulate`过程也被称为`fold-right`，因为它将序列的第一个元素与组合所有右侧元素的结果结合起来。还有一个`fold-left`，类似于`fold-right`，只是它以相反方向组合元素：'
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'What are the values of the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是以下值：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Describe a property that `op` should satisfy to guarantee that `fold-right`
    and `fold-left` will produce the same values for any sequence.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 描述`op`应该满足的一个属性，以确保`fold-right`和`fold-left`对于任何序列都会产生相同的值。
- en: 'Exercise 7: SICP 2.54'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7：SICP 2.54
- en: Two lists are said to be equal if they contain equal elements arranged in the
    same order. For example,
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个列表包含相同顺序排列的相等元素，则它们被认为是相等的。例如，
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: is true, but
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 是真的，但
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: is false. To be more precise, we can define `equal?` recursively in terms of
    the basic `eq?` equality of symbols by saying that a and b are `equal?` if they
    are both symbols and the symbols are `eq?`, or if they are both lists such that
    `(car a)` is `equal?` to `(car b)` and `(cdr a)` is `equal?` to `(cdr b)`. Using
    this idea, implement `equal?` as a procedure.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 是错误的。更准确地说，我们可以通过基本的`eq?`符号相等性来递归地定义`equal?`，即如果a和b都是符号并且符号是`eq?`，或者如果它们都是列表，`(car
    a)`等于`(car b)`且`(cdr a)`等于`(cdr b)`，那么它们就是`equal?`。利用这个想法，实现`equal?`作为一个过程。
- en: 'Note: you should know by now that `equal?` is a built-in procedure as well.
    This means your definition will overwrite the built-in definition.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：你现在应该知道`equal?`也是一个内置过程。这意味着你的定义将覆盖内置定义。
- en: Exercise 8
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习8
- en: 'We can represent a set as a list of distinct elements, and we can represent
    the set of all subsets of the set as a list of lists. For example, if the set
    is `(1 2 3)`, then the set of all subsets is `(() (3) (2) (2 3) (1) (1 3) (1 2)
    (1 2 3))`. Complete the following definition of a procedure that generates the
    set of subsets of a set and give a clear explanation of why it works:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将集合表示为不同元素的列表，并且我们可以将集合的所有子集表示为列表的列表。例如，如果集合是`(1 2 3)`，那么所有子集的集合是`(() (3)
    (2) (2 3) (1) (1 3) (1 2) (1 2 3))`。完成以下生成集合子集的过程定义，并清楚解释为什么它有效：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Exercise 9
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习9
- en: 'Extend `calc.rkt` to include words as data, providing the operations `first,
    butfirst, last, butlast, and word`. Unlike Racket, your calculator should treat
    words as self-evaluating expressions except when seen as the operator of a compound
    expression. That is, it should work like these examples:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展`calc.rkt`以包含单词作为数据，提供操作`first, butfirst, last, butlast, and word`。与Racket不同，你的计算器应将单词视为自评估表达式，除非它们作为复合表达式的运算符出现。也就是说，它应该像以下示例一样工作：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Remember, you can get the program by typing
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以通过输入以下命令获取程序
- en: '`cp ~cs61as/lib/calc.rkt .`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`cp ~cs61as/lib/calc.rkt .`'
- en: Or download it from [here](http://inst.eecs.berkeley.edu/~cs61as/library/calc.rkt).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 或者从[这里](http://inst.eecs.berkeley.edu/~cs61as/library/calc.rkt)下载。
- en: 'Exercise 10: Extra for Experts'
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10：专家级别的额外练习
- en: '**Do this if you want to. This is NOT for credit.**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你愿意，可以这样做。这不计入学分。**'
- en: Read [section 2.3.4](http://mitpress.mit.edu/sicp/full- text/book/book-Z-H-16.html#%25_sec_2.3.4)
    and do exercises 2.67 - 2.72.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读[第2.3.4节](http://mitpress.mit.edu/sicp/full- text/book/book-Z-H-16.html#%25_sec_2.3.4)并完成练习2.67
    - 2.72。
- en: 'Exercise 11: Extra for Experts'
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11：专家级别的额外练习
- en: '**Do this if you want to. This is NOT for credit.**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你愿意，可以这样做。这不计入学分。**'
- en: 'Programming by example: In some programming systems, instead of writing an
    algorithm, you give examples of how you''d like the program to behave, and the
    language figures out the algorithm itself:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 编程示例：在某些编程系统中，你不需要编写算法，只需提供程序行为示例，语言会自动推导算法：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Write `regroup`. Read `~cs61as/lib/regroup.problem` for details.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 写下`regroup`。阅读`~cs61as/lib/regroup.problem`获取详细信息。
- en: Submit Your Homework!
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交你的作业！
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有关说明，请参阅[此指南](../submit.html)。它涵盖了基本的终端命令和作业提交。
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在提交作业时遇到任何问题，请不要犹豫向助教求助！
