- en: Implementing an EvaluatorTuesday, January 17th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施一个求值器Tuesday, January 17th
- en: Now continue to implement the semantics of our syntax — we express that through
    an `eval` function that evaluates an expression.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在继续实现我们语法的语义——我们通过一个`eval`函数来表达这一点，该函数评估一个表达式。
- en: 'We use a basic programming principle — splitting the code into two layers,
    one for parsing the input, and one for doing the evaluation. Doing this avoids
    the mess we’d get into otherwise, for example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个基本的编程原则——将代码分成两层，一层用于解析输入，一层用于执行评估。这样做可以避免我们否则会陷入的混乱，例如：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is messy because it combines two very different things — syntax and semantics
    — into a single lump of code. For this particular kind of evaluator it looks simple
    enough, but this is only because it’s simple enough that all we do is replace
    constructors by arithmetic operations. Later on things will get more complex,
    and bundling the evaluator with the parser will be more problematic. (Note: the
    fact that we can replace constructors with the run-time operators mean that we
    have a very simple, calculator-like language, and that we can, in fact, “compile”
    all programs down to a number.)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这很混乱，因为它将两个非常不同的东西——语法和语义——合并成一个代码块。对于这种特定类型的求值器来说，看起来足够简单，但这仅仅是因为它足够简单，我们所做的一切就是用算术运算符替换构造函数。以后事情会变得更加复杂，将求值器与解析器捆绑在一起将会更加棘手。（注意：我们可以用运行时操作符替换构造函数的事实意味着我们有一种非常简单的、类似计算器的语言，并且实际上我们可以将所有程序“编译”成一个数字。）
- en: If we split the code, we can easily include decisions like making
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们拆分代码，我们可以轻松地包含像制作这样的决策。
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: syntactically invalid. (Which is not, BTW, what Racket does…) (Also, this is
    like the distinction between XML syntax and well-formed XML syntax.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 语法无效。（顺便说一句，这不是 Racket 的做法……）（此外，这就像 XML 语法和格式正确的 XML 语法之间的区别。）
- en: An additional advantage is that by using two separate components, it is simple
    to replace each one, making it possible to change the input syntax, and the semantics
    independently — we only need to keep the same interface data (the AST) and things
    will work fine.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个单独的组件的额外优势在于，可以简单地替换每个组件，从而可以独立更改输入语法和语义——我们只需要保持相同的接口数据（AST），一切都将正常运作。
- en: Our `parse` function converts an input syntax to an abstract syntax tree (AST).
    It is abstract exactly because it is independent of any actual concrete syntax
    that you type in, print out etc.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`parse`函数将输入语法转换为抽象语法树（AST）。它之所以是抽象的，完全是因为它与您键入、打印等的任何实际具体语法无关。
