- en: BNF, Grammars, the AE LanguageTuesday, January 17th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BNF，语法，AE 语言
- en: 'Getting back to the theme of the course: we want to investigate programming
    languages, and we want to do that *using* a programming language.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 回到课程的主题：我们想要研究编程语言，并且我们想要*使用*一种编程语言来做到这一点。
- en: 'The first thing when we design a language is to specify the language. For this
    we use BNF (Backus-Naur Form). For example, here is the definition of a simple
    arithmetic language:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 设计语言的第一步是规定语言。为此我们使用 BNF（巴科斯-诺尔形式）。例如，这是一个简单算术语言的定义：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Explain the different parts. Specifically, this is a mixture of low-level (concrete)
    syntax definition with parsing.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 解释不同的部分。具体来说，这是具有解析的低级（具体）语法定义的混合体。
- en: 'We use this to derive expressions in some language. We start with `<AE>`, which
    should be one of these:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这个来推导某种语言中的表达式。我们从`<AE>`开始，它应该是这些中的一个：
- en: a number `<num>`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个数字`<num>`
- en: an `<AE>`, the text “`+`”, and another `<AE>`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`<AE>`，文本“`+`”，和另一个`<AE>`
- en: the same but with “`-`”
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相同的但是有“`-`”
- en: '`<num>` is a terminal: when we reach it in the derivation, we’re done. `<AE>`
    is a non-terminal: when we reach it, we have to continue with one of the options.
    It should be clear that the “`+`” and the “`-`” are things we expect to find in
    the input — because they are not wrapped in `<>`s.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`<num>` 是一个终结符：当我们在推导中到达它时，我们就完成了。`<AE>` 是一个非终结符：当我们到达它时，我们必须继续其中的一个选项。应该清楚的是，“`+`”和“`-`”是我们期望在输入中找到的东西
    —— 因为它们没有被包裹在`<>`中。'
- en: 'We could specify what `<num>` is (turning it into a `<NUM>` non-terminal):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以指定`<num>`是什么（将其转换为`<NUM>`非终结符）：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But we don’t — why? Because in Racket we have numbers as primitives and we want
    to use Racket to implement our languages. This makes life a lot easier, and we
    get free stuff like floats, rationals etc.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们没有 —— 为什么？因为在 Racket 中我们有数字作为原语，我们想要使用 Racket 来实现我们的语言。这样会方便很多，并且我们会得到免费的东西，比如浮点数、有理数等等。
- en: 'To use a BNF formally, for example, to prove that `1-2+3` is a valid `<AE>`
    expression, we first label the rules:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要正式使用 BNF，例如，证明`1-2+3`是一个有效的`<AE>`表达式，我们首先对规则进行标记：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and then we can use them as formal justifications for each derivation step:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用它们作为每个推导步骤的正式理由：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This would be one way of doing this. Alternatively, we can can visualize the
    derivation using a tree, with the rules used at the nodes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是做这件事情的一种方式。或者，我们可以使用树来可视化推导，用节点上使用的规则。
- en: 'These specifications suffer from being ambiguous: an expression can be derived
    in multiple ways. Even the little syntax for a number is ambiguous — a number
    like `123` can be derived in two ways that result in trees that look different.
    This ambiguity is not a “real” problem now, but it will become one very soon.
    We want to get rid of this ambiguity, so that there is a single (= deterministic)
    way to derive all expressions.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规范存在歧义：一个表达式可以通过多种方式推导。甚至一个数字的小语法也是模糊的 —— 像`123`这样的数字可以通过两种方式推导，结果看起来不同的树。现在这种歧义并不是一个“真正”的问题，但很快就会成为一个问题。我们想要消除这种歧义，使得推导所有表达式都有一个单一（=确定性）的方式。
- en: 'There is a standard way to resolve that — we add another non-terminal to the
    definition, and make it so that each rule can continue to exactly one of its alternatives.
    For example, this is what we can do with numbers:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题有一种标准方法 —— 我们向定义中添加另一个非终结符，并确保每个规则只能继续到其备选项之一。例如，这是我们可以对数字做的：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Similar solutions can be applied to the `<AE>` BNF — we either restrict the
    way derivations can happen or we come up with new non-terminals to force a deterministic
    derivation trees.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的解决方案可以应用于`<AE>` BNF — 我们要么限制推导的方式，要么提出新的非终结符来强制确定性推导树。
- en: 'As an example of restricting derivations, we look at the current grammar:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为限制推导的示例，我们看一下当前的语法：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'and instead of allowing an `<AE>` on both sides of the operation, we force
    one to be a number:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是允许操作两侧都是`<AE>`，我们强制其中一个是数字：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now there is a single way to derive any expression, and it is always associating
    operations to the right: an expression like `1+2+3` can only be derived as `1+(2+3)`.
    To change this to left-association, we would use this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只有一种方式来推导任何表达式，它总是将操作与右边关联起来：像`1+2+3`这样的表达式只能推导为`1+(2+3)`。要将其改为左关联，我们会使用这个：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'But what if we want to force precedence? Say that our AE syntax has addition
    and multiplication:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我们想要强制优先级呢？假设我们的 AE 语法有加法和乘法：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can do that same thing as above and add new non-terminals — say one for
    “factors”:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像上面那样做同样的事情并添加新的非终结符 —— 比如一个“因子”：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we must parse any AE expression as additions of multiplications (or numbers).
    First, note that if `<AE>` goes to `<PROD>` and that goes to `<num>`, then there
    is no need for an `<AE>` to go to a `<num>`, so this is the same syntax:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须将任何 AE 表达式解析为乘法的加法（或数字）。首先，注意如果 `<AE>` 变为 `<PROD>`，而 `<PROD>` 变为 `<num>`，那么
    `<AE>` 不需要变为 `<num>`，因此这是相同的语法：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, if we want to still be able to multiply additions, we can force them to
    appear in parentheses:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们仍然想要能够将加法相乘，我们可以强制它们出现在括号中：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, note that `<AE>` is still ambiguous about additions, which can be fixed
    by forcing the left hand side of an addition to be a factor:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，注意 `<AE>` 对于加法仍然存在歧义，可以通过强制加法的左侧是因子来解决：
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We still have an ambiguity for multiplications, so we do the same thing and
    add another non-terminal for “atoms”:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然存在对乘法的歧义，所以我们做同样的事情，并为“原子”添加另一个非终端：
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: And you can try to derive several expressions to be convinced that derivation
    is always deterministic now.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试推导几个表达式以确信推导现在始终是确定性的。
- en: But as you can see, this is exactly the cosmetics that we want to avoid — it
    will lead us to things that might be interesting, but unrelated to the principles
    behind programming languages. It will also become much much worse when we have
    a real language rather such a tiny one.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但正如你所见，这恰恰是我们想要避免的化妆品 — 它会导致我们可能感兴趣但与编程语言原理无关的东西。当我们拥有一个真正的语言而不是这样一个微小的语言时，情况也会变得更加糟糕。
- en: 'Is there a good solution? — It is right in our face: do what Racket does —
    always use fully parenthesized expressions:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 是否有一个好的解决方案？ — 答案就在我们眼前：做像 Racket 一样 — 总是使用完全括号表达式：
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To prevent confusing Racket code with code in our language(s), we also change
    the parentheses to curly ones:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免将 Racket 代码与我们语言中的代码混淆，我们还将括号改为花括号：
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'But in Racket *everything* has a value — including those `+`s and `-`s, which
    makes this extremely convenient with future operations that might have either
    more or less arguments than 2 as well as treating these arithmetic operators as
    plain functions. In our toy language we will not do this initially (that is, `+`
    and `-` are second order operators: they cannot be used as values). But since
    we will get to it later, we’ll adopt the Racket solution and use a fully-parenthesized
    prefix notation:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但在 Racket 中 *一切* 都有一个值 — 包括那些 `+` 和 `-`，这使得这种情况极为方便，可以用未来可能具有比 2 更多或更少参数以及将这些算术运算符视为普通函数的操作。在我们的玩具语言中，最初我们不会这样做（即，`+`
    和 `-` 是二阶运算符：它们不能被用作值）。但由于我们以后会涉及到这一点，我们将采用 Racket 的解决方案，并使用完全括号的前缀表示法：
- en: '[PRE16]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: (Remember that in a sense, Racket code is written in a form of already-parsed
    syntax…)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: （记住，在某种意义上，Racket 代码是以一种已解析的语法形式书写的…）
