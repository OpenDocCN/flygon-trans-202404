- en: Considering Threadability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑线程安全性
- en: Considering Threadability
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑线程安全性
- en: Avoid Global Data
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免全局数据
- en: Global data leads to unintended side effects between functions and can make
    code difficult or impossible to parallelize. Even if the code is not intended
    today for parallelization, there is no reason to make it impossible for the future.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 全局数据会导致函数之间意想不到的副作用，并且可能使代码难以或不可能并行化。即使代码今天不打算并行化，也没有理由使未来变得不可能。
- en: Statics
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态变量
- en: Besides being global data, statics are not always constructed and deconstructed
    as you would expect. This is particularly true in cross-platform environments.
    See for example, [this g++ bug](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66830)
    regarding the order of destruction of shared static data loaded from dynamic modules.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 除了是全局数据之外，静态变量并不总是按照您期望的方式构造和销毁。这在跨平台环境中尤其如此。例如，请参阅[g++错误报告](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66830)，关于从动态模块加载的共享静态数据的销毁顺序。
- en: Shared Pointers
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 共享指针
- en: '`std::shared_ptr` is "as good as a global" ([http://stackoverflow.com/a/18803611/29975](http://stackoverflow.com/a/18803611/29975))
    because it allows multiple pieces of code to interact with the same data.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::shared_ptr`就像全局一样好（[http://stackoverflow.com/a/18803611/29975](http://stackoverflow.com/a/18803611/29975)），因为它允许多个代码片段与相同的数据进行交互。'
- en: Singletons
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单例
- en: A singleton is often implemented with a static and/or `shared_ptr`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 单例通常使用静态和/或`shared_ptr`实现。
- en: Avoid Heap Operations
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免堆操作
- en: Much slower in threaded environments. In many or maybe even most cases, copying
    data is faster. Plus with move operations and such and things.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在多线程环境中速度要慢得多。在许多情况下，甚至可能大多数情况下，复制数据更快。再加上移动操作等等。
- en: Mutex and mutable go together (M&M rule, C++11)
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互斥量和可变性一起使用（M&M rule，C++11）
- en: 'For member variables it is good practice to use mutex and mutable together.
    This applies in both ways:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于成员变量，使用互斥量和可变性是良好的实践。这适用于双向：
- en: A mutable member variable is presumed to be a shared variable so it should be
    synchronized with a mutex (or made atomic)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可变成员变量被假定为共享变量，因此应使用互斥量进行同步（或使其原子化）
- en: If a member variable is itself a mutex, it should be mutable. This is required
    to use it inside a const member function.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果成员变量本身是互斥量，则应将其声明为可变的。这是在const成员函数中使用它所必需的。
- en: 'For more information see the following article from Herb Sutter: [http://herbsutter.com/2013/05/24/gotw-6a-const-correctness-part-1-3/](http://herbsutter.com/2013/05/24/gotw-6a-const-correctness-part-1-3/)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅Herb Sutter的以下文章：[http://herbsutter.com/2013/05/24/gotw-6a-const-correctness-part-1-3/](http://herbsutter.com/2013/05/24/gotw-6a-const-correctness-part-1-3/)
- en: See also [related safety discussion](04-Considering_Safety.html#consider-return-by-value-for-mutable-data-const--for-immutable)
    about `const &` return values
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 还请参阅[相关的安全讨论](04-Considering_Safety.html#consider-return-by-value-for-mutable-data-const--for-immutable)，关于`const
    &`返回值
