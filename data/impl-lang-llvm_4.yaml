- en: JIT and Optimizations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JIT和优化
- en: Adding JIT and Optimizer Support
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加JIT和优化器支持
- en: 'Welcome to Chapter 4 of the "Implementing a language with LLVM" tutorial. Chapters
    1-3 described the implementation of a simple language and added support for generating
    LLVM IR. This chapter describes two new techniques: adding optimizer support to
    your language, and adding JIT compiler support. These additions will demonstrate
    how to get nice, efficient code for the Kaleidoscope language.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到“使用LLVM实现语言”教程的第4章。第1-3章描述了一个简单语言的实现，并添加了生成LLVM IR的支持。本章描述了两种新技术：为您的语言添加优化器支持和添加JIT编译器支持。这些补充将演示如何为Kaleidoscope语言获得漂亮、高效的代码。
- en: 4.1 Trivial Constant Folding
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.1 无关紧要的常量折叠
- en: 'Our demonstration for Chapter 3 is elegant and easy to extend. Unfortunately,
    it does not produce wonderful code. The IRBuilder, however, does give us obvious
    optimizations when compiling simple code:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第3章的演示是优雅且易于扩展的。不幸的是，它并不产生出色的代码。然而，IRBuilder在编译简单代码时确实为我们提供了明显的优化：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code is not a literal transcription of the AST built by parsing the input.
    That would be:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码不是通过解析输入构建的AST的文字转录。那将是：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Constant folding, as seen above, in particular, is a very common and very important
    optimization: so much so that many language implementors implement constant folding
    support in their AST representation.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 常量折叠，如上所示，特别是一种非常常见且非常重要的优化：以至于许多语言实现者在其AST表示中实现常量折叠支持。
- en: With LLVM, you don't need this support in the AST. Since all calls to build
    LLVM IR go through the LLVM IR builder, the builder itself checked to see if there
    was a constant folding opportunity when you call it. If so, it just does the constant
    fold and return the constant instead of creating an instruction.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用LLVM，AST中不需要这种支持。由于构建LLVM IR的所有调用都通过LLVM IR构建器进行，构建器本身在调用时会检查是否存在常量折叠的机会。如果有，它只会执行常量折叠并返回常量，而不是创建指令。
- en: Well, that was easy :). In practice, we recommend always using IRBuilder when
    generating code like this. It has no "syntactic overhead" for its use (you don't
    have to uglify your compiler with constant checks everywhere) and it can dramatically
    reduce the amount of LLVM IR that is generated in some cases (particular for languages
    with a macro preprocessor or that use a lot of constants).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这很容易 :). 在实践中，我们建议在生成这样的代码时始终使用IRBuilder。它在使用时没有“语法开销”（您不必在各处进行常量检查）并且在某些情况下可以显著减少生成的LLVM
    IR的数量（特别是对于具有宏预处理器或使用大量常量的语言）。
- en: 'On the other hand, the IRBuilder is limited by the fact that it does all of
    its analysis inline with the code as it is built. If you take a slightly more
    complex example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，IRBuilder受到一个限制，即它在构建代码时会进行所有分析。如果您考虑一个稍微复杂的例子：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case, the LHS and RHS of the multiplication are the same value. We'd
    really like to see this generate `tmp = x+3; result = tmp*tmp;` instead of computing
    `x+3` twice.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，乘法的左手边和右手边是相同的值。我们真的希望看到这生成`tmp = x+3; result = tmp*tmp;`而不是两次计算`x+3`。
- en: 'Unfortunately, no amount of local analysis will be able to detect and correct
    this. This requires two transformations: reassociation of expressions (to make
    the add''s lexically identical) and Common Subexpression Elimination (CSE) to
    delete the redundant add instruction. Fortunately, LLVM provides a broad range
    of optimizations that you can use, in the form of "passes".'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，任何数量的局部分析都无法检测和纠正这个问题。这需要两个转换：表达式的重新关联（使add的词法相同）和公共子表达式消除（CSE）以删除多余的add指令。幸运的是，LLVM提供了广泛的优化，您可以使用它们，以“通道”的形式。
- en: 4.2 LLVM Optimization Passes
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.2 LLVM优化通道
- en: LLVM provides many optimization passes, which do many different sorts of things
    and have different tradeoffs. Unlike other systems, LLVM doesn't hold to the mistaken
    notion that one set of optimizations is right for all languages and for all situations.
    LLVM allows a compiler implementor to make complete decisions about what optimizations
    to use, in which order, and in what situation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM提供了许多优化通道，执行许多不同类型的操作并具有不同的权衡。与其他系统不同，LLVM不坚持错误的观念，即一组优化适用于所有语言和所有情况。LLVM允许编译器实现者完全决定使用哪些优化，以何种顺序以及在什么情况下。
- en: As a concrete example, LLVM supports both "whole module" passes, which look
    across as large of body of code as they can (often a whole file, but if run at
    link time, this can be a substantial portion of the whole program). It also supports
    and includes "per-function" passes which just operate on a single function at
    a time, without looking at other functions. For more information on passes and
    how they are run, see the How to Write a Pass document and the List of LLVM Passes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个具体的例子，LLVM支持"整个模块"passes，这些passes会尽可能地查看尽可能大的代码体量（通常是整个文件，但如果在链接时运行，这可以是整个程序的重要部分）。它还支持和包含"每个函数"passes，这些passes只在单个函数上运行，而不查看其他函数。有关passes及其运行方式的更多信息，请参阅《如何编写Pass》文档和LLVM
    Pass列表。
- en: For Kaleidoscope, we are currently generating functions on the fly, one at a
    time, as the user types them in. We aren't shooting for the ultimate optimization
    experience in this setting, but we also want to catch the easy and quick stuff
    where possible. As such, we will choose to run a few per-function optimizations
    as the user types the function in. If we wanted to make a "static Kaleidoscope
    compiler", we would use exactly the code we have now, except that we would defer
    running the optimizer until the entire file has been parsed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Kaleidoscope，我们目前是在用户输入时即时生成函数，一次一个。在这种情况下，我们并不追求最终的优化体验，但我们也希望尽可能地捕捉到简单和快速的东西。因此，我们选择在用户输入函数时运行一些每个函数的优化。如果我们想制作一个"静态Kaleidoscope编译器"，我们将使用现有的代码，但会推迟运行优化器直到整个文件被解析完毕。
- en: 'In order to get per-function optimizations going, we need to set up a FunctionPassManager
    to hold and organize the LLVM optimizations that we want to run. Once we have
    that, we can add a set of optimizations to run. The code looks like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启动每个函数的优化，我们需要设置一个FunctionPassManager来持有和组织我们想要运行的LLVM优化。一旦我们有了这个，我们可以添加一组要运行的优化。代码看起来像这样：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code defines a FunctionPassManager, `OurFPM`. It requires a pointer to
    the Module to construct itself. Once it is set up, we use a series of `add` calls
    to add a bunch of LLVM passes. The first pass is basically boilerplate, it adds
    a pass so that later optimizations know how the data structures in the program
    are laid out. The `TheExecutionEngine` variable is related to the JIT, which we
    will get to in the next section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码定义了一个FunctionPassManager，`OurFPM`。它需要一个指向模块的指针来构建自身。一旦设置完成，我们使用一系列`add`调用来添加一堆LLVM
    passes。第一个pass基本上是样板文件，它添加了一个pass，以便后续优化知道程序中的数据结构是如何布局的。`TheExecutionEngine`变量与JIT相关，我们将在下一节中介绍。
- en: In this case, we choose to add 4 optimization passes. The passes we chose here
    are a pretty standard set of "cleanup" optimizations that are useful for a wide
    variety of code. I won't delve into what they do but, believe me, they are a good
    starting place :).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们选择添加4个优化passes。我们选择的passes是一组相当标准的"清理"优化，适用于各种代码。我不会深入探讨它们的作用，但请相信我，它们是一个很好的起点
    :).
- en: 'Once the PassManager is set up, we need to make use of it. We do this by running
    it after our newly created function is constructed (in `FunctionAST::Codegen`),
    but before it is returned to the client:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦PassManager设置完成，我们需要利用它。我们通过在我们新创建的函数构造之后（在`FunctionAST::Codegen`中）但在它被返回给客户端之前运行它来做到这一点：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see, this is pretty straightforward. The FunctionPassManager optimizes
    and updates the LLVM `Function*` in place, improving (hopefully) its body. With
    this in place, we can try our test above again:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这非常简单。FunctionPassManager在原地优化和更新LLVM `Function*`，改善（希望是）其主体。有了这个设置，我们可以再次尝试我们上面的测试：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As expected, we now get our nicely optimized code, saving a floating point add
    instruction from every execution of this function.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，我们现在得到了我们优化后的代码，每次执行此函数都可以节省一个浮点加法指令。
- en: LLVM provides a wide variety of optimizations that can be used in certain circumstances.
    Some documentation about the various passes is available, but it isn't very complete.
    Another good source of ideas can come from looking at the passes that Clang runs
    to get started. The "opt" tool allows you to experiment with passes from the command
    line, so you can see if they do anything.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM提供了各种各样的优化，在某些情况下可以使用。一些关于各种pass的文档是可用的，但它并不是非常完整。另一个好的思路来源是查看Clang运行的passes。"opt"工具允许您从命令行实验passes，这样您就可以看到它们是否有任何作用。
- en: Now that we have reasonable code coming out of our front-end, lets talk about
    executing it!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们从前端得到了合理的代码，让我们谈谈如何执行它！
- en: 4.3 Adding a JIT Compiler
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.3 添加JIT编译器
- en: Code that is available in LLVM IR can have a wide variety of tools applied to
    it. For example, you can run optimizations on it (as we did above), you can dump
    it out in textual or binary forms, you can compile the code to an assembly file
    (.s) for some target, or you can JIT compile it. The nice thing about the LLVM
    IR representation is that it is the "common currency" between many different parts
    of the compiler.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于 LLVM IR 的代码可以应用各种各样的工具。例如，您可以对其进行优化（如上所示），可以以文本或二进制形式将其转储出来，可以将代码编译为某个目标的汇编文件（.s），或者可以对其进行
    JIT 编译。LLVM IR 表示的好处是它是编译器的许多不同部分之间的“共同货币”。
- en: In this section, we'll add JIT compiler support to our interpreter. The basic
    idea that we want for Kaleidoscope is to have the user enter function bodies as
    they do now, but immediately evaluate the top-level expressions they type in.
    For example, if they type in `1 + 2;`, we should evaluate and print out 3\. If
    they define a function, they should be able to call it from the command line.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将为我们的解释器添加 JIT 编译器支持。Kaleidoscope 的基本思想是让用户像现在一样输入函数体，但立即评估他们输入的顶层表达式。例如，如果他们输入
    `1 + 2;`，我们应该评估并打印出 3。如果他们定义了一个函数，他们应该能够从命令行调用它。
- en: 'In order to do this, we first declare and initialize the JIT. This is done
    by adding a global variable and a call in main:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们首先声明并初始化 JIT。这是通过在主函数中添加一个全局变量和一个调用来完成的：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This creates an abstract `Execution Engine` which can be either a JIT compiler
    or the LLVM interpreter. LLVM will automatically pick a JIT compiler for you if
    one is available for your platform, otherwise it will fall back to the interpreter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个抽象的 `Execution Engine`，它可以是 JIT 编译器或 LLVM 解释器。如果您的平台有可用的 JIT 编译器，LLVM
    将自动为您选择一个 JIT 编译器，否则它将退回到解释器。
- en: 'Once the ExecutionEngine is created, the JIT is ready to be used. There are
    a variety of APIs that are useful, but the simplest one is the `getPointerToFunction(F)`
    method. This method JIT compiles the specified LLVM Function and returns a function
    pointer to the generated machine code. In our case, this means that we can change
    the code that parses a top-level expression to look like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了 ExecutionEngine，JIT 就可以使用了。有各种有用的 API，但最简单的一个是 `getPointerToFunction(F)`
    方法。此方法 JIT 编译指定的 LLVM 函数并返回生成的机器代码的函数指针。在我们的情况下，这意味着我们可以将解析顶层表达式的代码更改为以下内容：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Recall that we compile top-level expressions into a self-contained LLVM function
    that takes no arguments and returns the computed double. Because the LLVM JIT
    compiler matches the native platform ABI, this means that you can just cast the
    result pointer to a function pointer of that type and call it directly. This means,
    there is no difference between JIT compiled code and native machine code that
    is statically linked into your application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请回想，我们将顶层表达式编译成一个独立的 LLVM 函数，该函数不带参数并返回计算的双精度值。由于 LLVM JIT 编译器匹配本机平台 ABI，这意味着您只需将结果指针转换为该类型的函数指针并直接调用它。这意味着，JIT
    编译的代码与静态链接到应用程序中的本机机器代码之间没有区别。
- en: With just these two changes, lets see how Kaleidoscope works now!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 只需这两个更改，让我们看看现在 Kaleidoscope 的工作原理如何！
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Well this looks like it is basically working. The dump of the function shows
    the "no argument function that always returns double" that we synthesize for each
    top-level expression that is typed in. This demonstrates very basic functionality,
    but can we do more?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这看起来基本上是在工作了。函数的转储显示了我们为键入的每个顶层表达式合成的“无参数函数，始终返回双精度”的函数。这展示了非常基本的功能，但我们能做得更多吗？
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This illustrates that we can now call user code, but there is something a bit
    subtle going on here. Note that we only invoke the JIT on the anonymous functions
    that call testfunc, but we never invoked it on testfunc itself. What actually
    happened here is that the JIT scanned for all non-JIT'd functions transitively
    called from the anonymous function and compiled all of them before returning from
    `getPointerToFunction()`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这说明我们现在可以调用用户代码，但这里有一些微妙的地方。请注意，我们只在调用 testfunc 的匿名函数上调用了 JIT，但我们从未在 testfunc
    本身上调用它。实际上在这里发生的是，JIT 扫描了从匿名函数中传递调用的所有非 JIT 函数，并在从 `getPointerToFunction()` 返回之前将它们全部编译了。
- en: 'The JIT provides a number of other more advanced interfaces for things like
    freeing allocated machine code, rejit''ing functions to update them, etc. However,
    even with this simple code, we get some surprisingly powerful capabilities - check
    this out (I removed the dump of the anonymous functions, you should get the idea
    by now :) :'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: JIT 提供了许多其他更高级的接口，用于释放分配的机器代码，重新 JIT 编译函数以更新它们等等。然而，即使是这段简单的代码，我们也获得了一些令人惊讶的强大功能
    - 请看（我删除了匿名函数的转储，现在你应该明白了 :)：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Whoa, how does the JIT know about sin and cos? The answer is surprisingly simple:
    in this example, the JIT started execution of a function and got to a function
    call. It realized that the function was not yet JIT compiled and invoked the standard
    set of routines to resolve the function. In this case, there is no body defined
    for the function, so the JIT ended up calling `dlsym("sin")` on the Kaleidoscope
    process itself. Since `sin` is defined within the JIT''s address space, it simply
    patches up calls in the module to call the libm version of sin directly.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，JIT 是如何知道 sin 和 cos 的呢？答案出奇的简单：在这个例子中，JIT 开始执行一个函数并到达一个函数调用。它意识到该函数尚未 JIT
    编译，并调用标准的一套例程来解析该函数。在这种情况下，函数没有定义主体，因此 JIT 最终在 Kaleidoscope 进程本身上调用了 `dlsym("sin")`。由于
    `sin` 在 JIT 的地址空间内定义，因此它简单地修补了模块中的调用，直接调用 libm 版本的 sin。
- en: The LLVM JIT provides a number of interfaces (look in the ExecutionEngine.h
    file) for controlling how unknown functions get resolved. It allows you to establish
    explicit mappings between IR objects and addresses (useful for LLVM global variables
    that you want to map to static tables, for example), allows you to dynamically
    decide on the fly based on the function name, and even allows you to have the
    JIT compile functions lazily the first time they're called.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM JIT 提供了许多接口（查看 ExecutionEngine.h 文件），用于控制如何解析未知函数。它允许您在 IR 对象和地址之间建立显式映射（例如，对于您希望映射到静态表的
    LLVM 全局变量很有用），允许您基于函数名称动态地决定，在函数首次被调用时甚至允许您懒惰地 JIT 编译函数。
- en: 'One interesting application of this is that we can now extend the language
    by writing arbitrary C++ code to implement operations. For example, if we add:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的一个有趣应用是，我们现在可以通过编写任意的 C++ 代码来实现操作来扩展语言。例如，如果我们添加：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we can produce simple output to the console by using things like: `extern
    putchard(x); putchard(120);`, which prints a lowercase `x` on the console (120
    is the ASCII code for `x`). Similar code could be used to implement file I/O,
    console input, and many other capabilities in Kaleidoscope.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过使用诸如：`extern putchard(x); putchard(120);` 这样的东西来在控制台上产生简单的输出，这在控制台上打印了一个小写的
    `x`（120 是 `x` 的 ASCII 码）。类似的代码可以用来实现文件 I/O、控制台输入以及 Kaleidoscope 中的许多其他功能。
- en: This completes the JIT and optimizer chapter of the Kaleidoscope tutorial. At
    this point, we can compile a non-Turing-complete programming language, optimize
    and JIT compile it in a user-driven way. Next up we'll look into extending the
    language with control flow constructs, tackling some interesting LLVM IR issues
    along the way.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了 Kaleidoscope 教程的 JIT 和优化器章节。到目前为止，我们可以编译一种非图灵完备的编程语言，以用户驱动的方式优化和 JIT 编译它。接下来，我们将研究如何使用控制流构造扩展语言，并解决一些有趣的
    LLVM IR 问题。
