- en: 'Chapter 10: Generics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十章：泛型
- en: Generics
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 泛型
- en: TypeScript supports a programming construct called *generics*. TypeScript generics
    allow you to write code that operates against broad swathes of classes and interfaces
    without giving up strong typing. You write your code to execute against *types*
    (classes and interfaces), as opposed specific, concrete classes. Once written,
    you access this generic code by providing a concrete type at runtime. Let's consider
    an example.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 支持一种称为 *generics* 的编程结构。TypeScript 泛型允许您编写针对广泛类和接口的代码，而不放弃强类型。您编写代码以针对
    *类型*（类和接口），而不是具体的、明确的类。一旦编写完成，您通过在运行时提供具体类型来访问这个通用代码。让我们考虑一个例子。
- en: 'Imagine that you are developing a game and storing and retrieving game information
    to/from a database. This means you have to implement the classic Create, Read,
    Update and Delete operations (CRUD) for the various objects in the game. Here''s
    some high level code that beings to implement the game and this logic:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您正在开发一个游戏，并将游戏信息存储到/从数据库中检索。这意味着您必须为游戏中的各种对象实现经典的创建、读取、更新和删除操作（CRUD）。下面是一些高层次的代码，开始实现游戏和这个逻辑：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The code defines three classes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 代码定义了三个类：
- en: '`Game`: This is the game object itself, keeping track of overall game state,
    including a list of players and the currently active player.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Game`：这是游戏对象本身，跟踪整个游戏状态，包括玩家列表和当前活动玩家。'
- en: '`Player`: Represents a player in the game. Players also have some state information,
    although its different than a `Game`.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Player`：代表游戏中的玩家。玩家也有一些状态信息，尽管与 `Game` 不同。'
- en: '`GameStateDBHelper`: A utility class that provides input/output operations
    and supports all four CRUD operations for the Game object.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GameStateDBHelper`：一个实用类，提供输入/输出操作，并支持游戏对象的所有四个 CRUD 操作。'
- en: '`GameStateDBHelper` defines four public methods, one for each of the CRUD operations.
    These each take commonsense input parameters and return commonsense results. Consider
    `LoadGame`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameStateDBHelper` 定义了四个公共方法，分别用于 CRUD 操作的每个操作。这些方法都接受常识性的输入参数，并返回常识性的结果。考虑
    `LoadGame`：'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`LoadGame` is passed a query (think "select * from Games..."). It parses the
    result and returns back a new `Game` object. Obviously, there''s a lot of hand
    waving going on in the example, but hopefully the concept is clear.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoadGame` 接收一个查询（类似于 "select * from Games..."）。它解析结果并返回一个新的 `Game` 对象。显然，在示例中进行了很多手势，但希望概念是清楚的。'
- en: 'The DB helper object makes it easy to execute the CRUD operations as needed:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: DB 辅助对象使得根据需要执行 CRUD 操作变得容易：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Despite the clarity and strong-typed goodness, this approach is nonetheless
    problematic. We already know we''ll want another database-backed entity - `Player`.
    If we simply follow the current approach, we end up creating a new helper function,
    `PlayerStateDBHelper`. It has to provide the same CRUD functions and each one
    shaped almost identically to GameState. "Shape" in this case means:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法清晰且类型强大，但仍然存在问题。我们已经知道我们将要另外创建一个基于数据库的实体 - `Player`。如果我们简单地遵循当前的方法，我们最终会创建一个新的辅助函数，`PlayerStateDBHelper`。它必须提供相同的
    CRUD 函数，并且每个函数的形式几乎与 GameState 的形式相同。在这种情况下，“形式”意味着：
- en: Looking up database connection information.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找数据库连接信息。
- en: Accessing the database
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问数据库
- en: Executing some common command that varies only in small details from one object
    to another
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行一些只在细节上略有不同的常见命令，从一个对象到另一个对象。
- en: Managing errors
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理错误
- en: Returning success/fail messages
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回成功/失败消息
- en: 'We can mitigate most of that using TypeScript''s generic functionality. Here''s
    how it would look like:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 TypeScript 的泛型功能来减轻大部分问题。下面是它的实现方式：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Generics introduce some new syntax and leverage existing concepts (like interfaces)
    in new ways.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型引入了一些新的语法，并以新的方式利用了现有概念（如接口）。
- en: The code first defines a new interface, `DBBackedEntity`. This interface requires
    a single text field, "TableName". This obviously maps to a database table via
    its name.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 代码首先定义了一个新的接口，`DBBackedEntity`。该接口需要一个文本字段，“TableName”。这显然通过名称将其映射到数据库表。
- en: It then creates two models for the Game and its Players respectively. Each of
    them implements the DBBackedEntity interface and assigns a database table name
    via the object's constructor.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后为游戏及其玩家分别创建两个模型。它们都实现了 DBBackedEntity 接口，并通过对象的构造函数分配了数据库表名。
- en: 'The `DBHelper` class introduces the generics syntax:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`DBHelper` 类引入了泛型语法：'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This syntax, `<T extends DBBackedEntity>` effectively says, "The DB helper
    class works against any type (class) that implements the DBBackedEntity interface."
    When client code instantiates an instance of DBHelper, it will specify a value
    for that parameter, `T`. These two lines show how to pass a value for `T`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语法，`<T extends DBBackedEntity>`有效地表示，“DB助手类适用于任何实现DBBackedEntity接口的类型（类）”。当客户端代码实例化DBHelper的实例时，它将为该参数`T`指定一个值。这两行展示了如何为`T`传递一个值：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When working with generics, we supply type parameters via angle brackets: `DBHelper<GameState>`
    and `DBHelper<GamePlayer>`. TypeScript replaces the `T` parameter in the `DBHelper`
    class with `GameState` and `GamePlayer` respectively.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用泛型时，我们通过尖括号提供类型参数：`DBHelper<GameState>`和`DBHelper<GamePlayer>`。TypeScript分别用`GameState`和`GamePlayer`替换`DBHelper`类中的`T`参数。
- en: Further Reading
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'I wrote a lengthy blog post describing how to use generics to implement a binary
    search. You can read that here: [https://blog.hellojs.org/implement-binary-search-in-typescript-using-generics-with-useful-refactorings-a4bcda932d7](https://blog.hellojs.org/implement-binary-search-in-typescript-using-generics-with-useful-refactorings-a4bcda932d7).'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我写了一篇详尽的博客文章，描述了如何使用泛型来实现二分查找。你可以在这里阅读：[https://blog.hellojs.org/implement-binary-search-in-typescript-using-generics-with-useful-refactorings-a4bcda932d7](https://blog.hellojs.org/implement-binary-search-in-typescript-using-generics-with-useful-refactorings-a4bcda932d7)。
- en: 'Of particular interest to React developers, this article describes how to use
    default values with generics: [https://blog.mariusschulz.com/2017/06/02/typescript-2-3-generic-parameter-defaults](https://blog.mariusschulz.com/2017/06/02/typescript-2-3-generic-parameter-defaults).
    Note that it''s written in the context of a React application but the feature
    is not tied to React.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对React开发者特别感兴趣的是，这篇文章描述了如何在泛型中使用默认值：[https://blog.mariusschulz.com/2017/06/02/typescript-2-3-generic-parameter-defaults](https://blog.mariusschulz.com/2017/06/02/typescript-2-3-generic-parameter-defaults)。请注意，它是在React应用程序的背景下编写的，但该功能并不与React绑定。
- en: Summary
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter on generics brings the main body of of *Yet Another TypeScript
    Book* to a close. The next chapter suggests some additional reading and videos
    that you may find of interest
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章关于泛型将*另一本 TypeScript 书*的主体部分结束了。下一章建议一些你可能感兴趣的额外阅读和视频。
