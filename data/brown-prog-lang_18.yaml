- en: 18Sharing and Equality
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18分享和平等
- en: '|     [18.1 Re-Examining Equality](#%28part._identical-eq%29) |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|     [18.1 重新审视平等](#%28part._identical-eq%29) |'
- en: '|     [18.2 The Cost of Evaluating References](#%28part._.The_.Cost_of_.Evaluating_.References%29)
    |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|     [18.2 评估引用的成本](#%28part._.The_.Cost_of_.Evaluating_.References%29) |'
- en: '|     [18.3 On the Internet, Nobody Knows You’re a DAG](#%28part._.On_the_.Internet__.Nobody_.Knows_.You_re_a_.D.A.G%29)
    |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '|     [18.3 在互联网上，没有人知道你是个DAG](#%28part._.On_the_.Internet__.Nobody_.Knows_.You_re_a_.D.A.G%29)
    |'
- en: '|     [18.4 From Acyclicity to Cycles](#%28part._acyc-to-cyc%29) |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|     [18.4 从无环到循环](#%28part._acyc-to-cyc%29) |'
- en: 18.1Re-Examining Equality
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 18.1重新审视平等
- en: 'Consider the following data definition and example values:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下数据定义和示例值：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In particular, it might seem that the way we’ve written b-tree is morally equivalent
    to how we’ve written a-tree, but we’ve created a helpful binding to avoid code
    duplication.Because both a-tree and b-tree are bound to trees with 5 at the root
    and a left and right child each containing 4, we can indeed reasonably consider
    these trees equivalent. Sure enough:<equal-tests> ::=
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，看起来我们编写b-tree的方式在道义上等同于我们编写a-tree的方式，但我们创建了一个有用的绑定来避免代码重复。因为a-tree和b-tree都绑定到具有5为根节点，每个节点都包含4的左右子节点的树，我们确实可以合理地认为这些树是等价的。果然：<equal-tests>
    ::=
- en: '|   check: |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   检查: |'
- en: '|     a-tree is b-tree |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|     a-tree is b-tree |'
- en: '|     a-tree.l is a-tree.l |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|     a-tree.l is a-tree.l |'
- en: '|     a-tree.l is a-tree.r |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|     a-tree.l is a-tree.r |'
- en: '|     b-tree.l is b-tree.r |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|     b-tree.l is b-tree.r |'
- en: '|   end |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   结束 |'
- en: However, there is another sense in which these trees are not equivalent. concretely,
    a-tree constructs a distinct node for each child, while b-tree uses the same node
    for both children. Surely this difference should show up somehow, but we have
    not yet seen a way to write a program that will tell these apart.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，从另一个角度来看，这些树并不等价。具体来说，a-tree为每个子节点构造一个不同的节点，而b-tree为两个子节点都使用相同的节点。当然，这种差异应该以某种方式显示出来，但我们尚未找到一种方法编写程序来区分它们。
- en: 'By default, the is operator uses the same equality test as Pyret’s ==. There
    are, however, other equality tests in Pyret. In particular, the way we can tell
    apart these data is by using Pyret’s identical function, which implements reference
    equality. This checks not only whether two values are structurally equivalent
    but whether they are the result of the very same act of value construction. With
    this, we can now write additional tests:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，is运算符使用与Pyret的==相同的等式测试。然而，在Pyret中还有其他等式测试。特别是，我们可以通过使用Pyret的identical函数来区分这些数据，该函数实现了引用相等性。这不仅检查两个值是否在结构上等价，还检查它们是否是值构造的结果相同。有了这个，我们现在可以编写额外的测试：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There is actually another way to write these tests in Pyret: the is operator
    can also be parameterized by a different equality predicate than the default ==.
    Thus, the above block can equivalently be written as:We can use is-not to check
    for expected failure of equality.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，还有另一种方法可以在Pyret中编写这些测试：is运算符也可以使用与默认==不同的等式预测来参数化。因此，上面的代码块可以等价地写成：我们可以使用is-not来检查等式的预期失败。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will use this style of equality testing from now on.Observe how these are
    the same values that were compared earlier ([<equal-tests>](#%28elem._equal-tests%29)),
    but the results are now different: some values that were true earlier are now
    false. In particular,'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们将使用这种等式测试风格。观察这些是之前比较过的相同值([<equal-tests>](#%28elem._equal-tests%29))，但现在结果不同：之前为真的一些值现在为假。特别地，
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Later we will return both to what identical really means [[What it Means to
    be Identical](State__Change__and_More_Equality.html#%28part._sem-identical%29)]
    and to the full range of Pyret’s equality operations [[A Family of Equality Predicates](State__Change__and_More_Equality.html#%28part._equality-operations%29)].
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 待会我们会回到identical的真正含义[[意味着什么才是相同的](State__Change__and_More_Equality.html#%28part._sem-identical%29)]以及Pyret的完整等式操作的范围[[一系列等式预测](State__Change__and_More_Equality.html#%28part._equality-operations%29)]。
- en: 18.2The Cost of Evaluating References
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 18.2评估引用的成本
- en: 'From a complexity viewpoint, it’s important for us to understand how these
    references work. As we have hinted, four-node is computed only once, and each
    use of it refers to the same value: if, instead, it was evaluated each time we
    referred to four-node, there would be no real difference between a-tree and b-tree,
    and the above tests would not distinguish between them.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从复杂性的角度来看，理解这些引用如何工作是很重要的。正如我们所暗示的，four-node只计算一次，并且每次使用它都引用相同的值：如果相反，每次引用four-node时都进行计算，那么a-tree和b-tree之间将没有真正的区别，上述测试将不能区分它们。
- en: 'This is especially relevant when understanding the cost of function evaluation.
    We’ll construct two simple examples that illustrate this. We’ll begin with a contrived
    data structure:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这在理解函数评估成本时尤为重要。我们将构建两个简单的示例来说明这一点。我们将从一个人为构造的数据结构开始：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Suppose we now define
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们现在定义
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Constructing a list clearly takes time at least proportional to the length;
    therefore, we expect the time to compute L to be considerably more than that for
    a single link operation. Therefore, the question is how long it takes to compute
    L1 and L2 after L has been computed: constant time, or time proportional to the
    length of L?The answer, for Pyret, and for most other contemporary languages (including
    Java, C#, OCaml, Racket, etc.), is that these additional computations take constant
    time. That is, the value bound to L is computed once and bound to L; subsequent
    expressions refer to this value (hence “reference”) rather than reconstructing
    it, as reference equality shows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，构建一个列表所需的时间至少与长度成正比；因此，我们预计计算 L 的时间将远远超过单个链接操作的时间。因此，问题是在计算 L 后，计算 L1 和 L2需要多长时间：常数时间，还是与
    L 的长度成正比的时间？对于 Pyret，以及大多数其他当代语言（包括 Java、C＃、OCaml、Racket 等），这些额外的计算需要常数时间。也就是说，绑定到
    L 的值计算一次并绑定到 L；后续表达式引用这个值（因此“引用”）而不是重新构建它，正如引用相等性所示：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Similarly, we can define a function, pass L to it, and see whether the resulting
    argument is identical to the original:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以定义一个函数，将 L 传递给它，并查看生成的参数是否与原始参数相同：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: or, equivalently,
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，等效地，
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Therefore, neither built-in operations (like .rest) nor user-defined ones (like
    check-for-no-copy) make copies of their arguments.Strictly speaking, of course,
    we cannot conclude that no copy was made. Pyret could have made a copy, discarded
    it, and still passed a reference to the original. Given how perverse this would
    be, we can assume—<wbr>and take the language’s creators’ word for it—<wbr>that
    this doesn’t actually happen. By creating extremely large lists, we can also use
    timing information to observe that the time of constructing the list grows proportional
    to the length of the list while the time of passing it as a parameter remains
    constant. The important thing to observe here is that, instead of simply relying
    on authority, we have used operations in the language itself to understand how
    the language behaves.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，无论是内置操作（如 .rest）还是用户定义的操作（如 check-for-no-copy），都不会复制它们的参数。严格来说，当然，我们不能得出没有复制的结论。Pyret
    可能已经复制了一份，丢弃了它，并仍然传递了对原始的引用。考虑到这种情况有多么反常，我们可以假设——并相信语言的创建者的话——这实际上并没有发生。通过创建非常大的列表，我们还可以使用时间信息观察到构建列表的时间与列表长度成正比增长，而将其作为参数传递的时间保持恒定。在这里需要观察的重要事情是，我们没有简单地依赖权威，而是使用语言本身的操作来理解语言的行为。
- en: 18.3On the Internet, Nobody Knows You’re a DAG
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在互联网上，没有人知道你是一个 DAG
- en: 'Despite the name we’ve given it, b-tree is not actually a tree. In a tree,
    by definition, there are no shared nodes, whereas in b-tree the node named by
    four-node is shared by two parts of the tree. Despite this, traversing b-tree
    will still terminate, because there are no cyclic references in it: if you start
    from any node and visit its “children”, you cannot end up back at that node. There
    is a special name for a value with such a shape: directed acyclic graph (DAG).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们给它起了这个名字，但 B 树实际上并不是一棵树。在树中，根据定义，没有共享节点，而在 B 树中，被称为四节点的节点被树的两部分共享。尽管如此，遍历
    B 树仍将终止，因为其中没有循环引用：如果你从任何节点开始并访问其“子节点”，你不会回到该节点。具有这种形状的值有一个特殊的名称：有向无环图（DAG）。
- en: 'Many important data structures are actually a DAG underneath. For instance,
    consider Web sites. It is common to think of a site as a tree of pages: the top-level
    refers to several sections, each of which refers to sub-sections, and so on. However,
    sometimes an entry needs to be cataloged under multiple sections. For instance,
    an academic department might organize pages by people, teaching, and research.
    In the first of these pages it lists the people who work there; in the second,
    the list of courses; and in the third, the list of research groups. In turn, the
    courses might have references to the people teaching them, and the research groups
    are populated by these same people. Since we want only one page per person (for
    both maintenance and search indexing purposes), all these personnel links refer
    back to the same page for people.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 许多重要的数据结构实际上都是一个 DAG。例如，考虑网站。通常将网站视为页面树：顶级引用多个部分，每个部分又引用子部分，依此类推。然而，有时需要将条目编目在多个部分下。例如，一个学术部门可能按人员、教学和研究组织页面。在这些页面中，第一个页面列出了在那里工作的人员；第二个页面列出了课程列表；第三个页面列出了研究小组列表。依次，课程可能会引用教授它们的人员，而研究小组由同样的人员组成。由于我们希望每个人只有一页（无论是为了维护还是搜索索引目的），所有这些人员链接都指向同一个人员页面。
- en: 'Let’s construct a simple form of this. First a datatype to represent a site’s
    content:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个简单形式的表格。首先是表示网站内容的数据类型：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s now define a few people:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义几个人：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'and a way to extract a particular person’s page:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以及提取特定人员页面的方法：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we can define theory and systems sections:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以定义理论和系统部分了：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'which are integrated into a site as a whole:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它们被整合到整个网站中：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we can confirm that each of these luminaries needs to keep only one Web
    page current; for instance:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以确认每个知名人士只需要保持一个网页更新；例如：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 18.4From Acyclicity to Cycles
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从无环到循环
- en: 'Here’s another example that arises on the Web. Suppose we are constructing
    a table of output in a Web page. We would like the rows of the table to alternate
    between white and grey. If the table had only two rows, we could map the row-generating
    function over a list of these two colors. Since we do not know how many rows it
    will have, however, we would like the list to be as long as necessary. In effect,
    we would like to write:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有另一个在网络上出现的例子。假设我们正在构建一个网页中的输出表格。我们希望表格的行在白色和灰色之间交替。如果表格只有两行，我们可以将生成行的函数映射到这两种颜色的列表上。然而，由于我们不知道它将有多少行，我们希望列表长度尽可能长。实际上，我们希望写成：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: to obtain an indefinitely long list, so that we could eventually write
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得一个无限长的列表，以便我们最终可以写成：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'which applies a color-table-row function to two arguments: the current row
    from table-row-content, and the current color from web-colors, proceeding in lockstep
    over the two lists.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 它将一个 color-table-row 函数应用于两个参数：来自 table-row-content 的当前行，和来自 web-colors 的当前颜色，同时在两个列表上同步进行。
- en: Unfortunately, there are many things wrong with this attempted definition.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这个尝试定义有很多问题。
- en: Do Now!
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做吧！
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Do you see what they are?
  id: totrans-60
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你看到了吗？
- en: 'Here are some problems in turn:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一些问题：
- en: This will not even parse. The identifier web-colors is not bound on the right
    of the =.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这甚至不能解析。在 = 的右边没有绑定 web-colors 标识符。
- en: 'Earlier, we saw a solution to such a problem: use rec [[Streams From Functions](func-as-data.html#%28part._streams-from-funs%29)].
    What happens if we write'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之前，我们看到了解决这样一个问题的方法：使用 rec [[Streams From Functions](func-as-data.html#%28part._streams-from-funs%29)]。如果我们写成：
- en: '[PRE17]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: instead?
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相反？
- en: Exercise
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Why does rec work in the definition of ones but not above?
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为什么 rec 在定义 ones 的时候起作用而在上面不起作用？
- en: Assuming we have fixed the above problem, one of two things will happen. It
    depends on what the initial value of web-colors is. Because it is a dummy value,
    we do not get an arbitrarily long list of colors but rather a list of two colors
    followed by the dummy value. Indeed, this program will not even type-check.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设我们已经解决了上面的问题，会发生两种情况中的一种。这取决于 web-colors 的初始值是什么。因为它是一个虚拟值，我们不会得到一个任意长的颜色列表，而是得到一个由两种颜色和虚拟值组成的列表。事实上，这个程序甚至不能通过类型检查。
- en: 'Suppose, however, that web-colors were written instead as a function definition
    to delay its creation:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，假设 web-colors 被写成一个函数定义以延迟其创建：
- en: '[PRE18]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: On its own this just defines a function. If, however, we use it—<wbr>web-colors()—<wbr>it
    goes into an infinite loop constructing links.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单独这只是定义一个函数。然而，如果我们使用它——<wbr>web-colors()——<wbr>它会进入一个无限循环构造链接。
- en: Even if all that were to work, map2 would either (a) not terminate because its
    second argument is indefinitely long, or (b) report an error because the two arguments
    aren’t the same length.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使所有这些方法都能奏效，map2函数要么（a）因为其第二个参数无限长而无法终止，要么（b）因为两个参数长度不同而报错。
- en: 'All these problems are symptoms of a bigger issue. What we are trying to do
    here is not merely create a shared datum (like a DAG) but something much richer:
    a cyclic datum, i.e., one that refers back to itself:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些问题都是更大问题的症状。我们在这里尝试的不仅仅是创建一个共享的数据（比如一个有向无环图），而是更丰富的东西：一个循环数据，即一个引用自身的数据：
- en: '![image](../Images/dd3d4a0319da6629470312684c9597ff.jpg)'
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![图片](../Images/dd3d4a0319da6629470312684c9597ff.jpg)'
- en: 'When you get to cycles, even defining the datum becomes difficult because its
    definition depends on itself so it (seemingly) needs to already be defined in
    the process of being defined. We will return to cyclic data later: [Recursion
    and Cycles from Mutation](State__Change__and_More_Equality.html#%28part._rec-from-mut%29).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到循环时，甚至定义数据都变得困难，因为其定义依赖于自身，所以它（看起来）似乎在被定义的过程中就已经被定义了。我们稍后会回到循环数据：[递归和循环的变化](State__Change__and_More_Equality.html#%28part._rec-from-mut%29)。
