- en: Lecture 5 - Tasks & Kernels
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五讲 - 任务与内核
- en: Pubilc Service Annoucements
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共服务公告
- en: Due date for assignment 1
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作业1的截止日期
- en: Partners
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合作伙伴
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Kernel of a Real-time Operating System
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实时操作系统的内核
- en: Tasks
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: What is a task?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是任务？
- en: A set of instructions
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一组指令
- en: Current state, which is changed by executing instructions, which includes
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前状态，通过执行指令更改，其中包括
- en: values of its variables, which are automatic variables maintained on the stack
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量的值，这些变量是在堆栈上维护的自动变量
- en: contents of its registers
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寄存器的内容
- en: other processor state such as the PSR
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他处理器状态，如PSR
- en: processor mode
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器模式
- en: condition codes
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件码
- en: etc.
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等。
- en: its run state and other things maintained by the kernel
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其运行状态和内核维护的其他内容
- en: Two tasks can use the same set of instructions, but
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 两个任务可以使用相同的指令集，但是
- en: every task has its own state
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个任务都有自己的状态
- en: Therefore, no static variables
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，没有静态变量
- en: The kernel keeps track of every task's state
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 内核跟踪每个任务的状态
- en: In essence, servicing a request amounts to changing the state of one or more
    tasks.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本质上，处理请求就是改变一个或多个任务的状态。
- en: Kernel maintains a task descriptor (TD) for each created task.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核为每个创建的任务维护一个任务描述符（TD）。
- en: That is, to create a task the kernel must allocate a TD and initialize it.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也就是说，要创建一个任务，内核必须分配一个TD并对其进行初始化。
- en: The TD normally contains
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: TD通常包含
- en: The task's stack pointer, which points to a private stack, in the memory of
    the task, containing
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务的堆栈指针，指向任务内存中的私有堆栈，其中包含
- en: PC
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PC
- en: other registers
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他寄存器
- en: local variables
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地变量
- en: all ready to be reloaded whenever the task next runs.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 准备好在下次运行任务时重新加载。
- en: Possibly the return value for when the task is next activated
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可能是任务下次激活时的返回值
- en: Possibly something to support a Destroy primitive
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可能需要支持销毁原语
- en: The task's state
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务的状态
- en: Links to queues on which the task is located
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务所在队列的链接
- en: The kernel uses these to find the task when it is ervicing a request
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核使用这些状态在处理请求时找到任务
- en: Possible states of the task
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 任务的可能状态
- en: 'Active: running or about to run'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 活动：正在运行或即将运行
- en: On a single processor system only one task can ever be active.
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单处理器系统中，只能有一个任务处于活动状态。
- en: But we would like to generalize smoothly to more than one processor.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但我们希望平稳地推广到多个处理器。
- en: 'Ready: can run if scheduled'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就绪：如果被调度可以运行
- en: Need a queue used by the scheduler when deciding which task should be the next
    active task
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要一个队列，调度程序在决定下一个活动任务时使用
- en: 'Blocked: waiting for something to happen'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阻塞：等待某些事情发生
- en: Need several queues, one for each thing that could happen
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要几个队列，每个队列用于可能发生的事情
- en: Zombie
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 僵尸
- en: Undead, won't execute instructions, but retains its resources.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亡灵，不会执行指令，但保留其资源。
- en: '* * *'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Kernel Structure
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内核结构
- en: The kernel is just a function like any other, but which runs forever.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 内核只是像其他函数一样运行的函数，但是永远运行。
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Where is the OS?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统在哪里？
- en: requests come from running user tasks
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求来自正在运行的用户任务
- en: in essence system calls
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本质上是系统调用
- en: one type of request creates a task
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种请求创建一个任务
- en: There needs to be a first task that gets everything going
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要有一个启动所有任务的第一个任务
- en: '* * *'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: All the interesting stuff inside done by the kernel is hidden inside `getNextRequest`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 内核内部的所有有趣内容都隐藏在`getNextRequest`中。
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What's inside `activate( active )`?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`activate( active )`中有什么？'
- en: transfer of control to the active task
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制权转移给活动任务
- en: execution to completion of the active task
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行到活动任务完成
- en: '`to completion'' means until the active task sends a request to the kernel'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`完成''意味着直到活动任务向内核发送请求'
- en: transfer of control back to the kernel
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制权转移回内核
- en: getting the request
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取请求
- en: The hard part to get right is `transfer of control'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的难点在于`控制权的转移'
- en: which we call a context switch
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们称之为上下文切换
- en: Programming a context switch requires you to know the processor architecture
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程上下文切换需要了解处理器架构
- en: '* * *'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ARM 920T
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ARM 920T
- en: What is it?
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这是什么？
- en: Two modes of labelling
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 两种标记模式
- en: By architecture (now up to v7)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按架构（现在已经到v7）
- en: '| Architecture | InstructionSet | ThumbInstructions? | MultiplyInstruction
    | DSPInstructions | Comments |'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 架构 | 指令集 | Thumb指令？ | 乘法指令 | DSP指令 | 注释 |'
- en: '| ARMv1 | 1 | no | no | no | Obsolete |'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARMv1 | 1 | 否 | 否 | 否 | 废弃 |'
- en: '| ARMv2 | 2 | no | no | no | Obsolete |'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARMv2 | 2 | 否 | 否 | 否 | 废弃 |'
- en: '| ARMv3 | 3 | no | no | no |  |'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARMv3 | 3 | 否 | 否 | 否 |  |'
- en: '| ARMv3M | 3 | no | yes | no |  |'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARMv3M | 3 | 否 | 是 | 否 |  |'
- en: '| ARMv4 | 4 | no | yes | no |  |'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARMv4 | 4 | 否 | 是 | 否 |  |'
- en: '| ARMv4T | 4 | yes | yes | no | This is the one in the box. |'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARMv4T | 4 | 是 | 是 | 否 | 这是盒子里的那个。 |'
- en: '| ARMv5 | 5 | no | yes | no | Has `CLZ` |'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARMv5 | 5 | 否 | 是 | 否 | 具有`CLZ` |'
- en: '| ARMv5T | 5 | yes | yes | no |  |'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARMv5T | 5 | 是 | 是 | 否 |  |'
- en: '| ARMv5TE | 5 | yes | yes | yes |  |'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARMv5TE | 5 | 是 | 是 | 是 |  |'
- en: Thumb instructions are 16 bit, and accelerated.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Thumb指令为16位，且加速。
- en: They use the full 32 bits of the registers
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们使用寄存器的全部32位
- en: They improve code density (less memory needed).
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们提高了代码密度（需要更少的内存）。
- en: They effectively double the size of the instruction cache (fewer time-consuming
    cache misses).
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们有效地将指令高速缓存的大小加倍（减少耗时的缓存未命中）。
- en: By processor core
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按处理器核心
- en: '| ProcessorCore | ARMISA | ThumbISA | Comments |'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 处理器核心 | ARMISA | ThumbISA | 注释 |'
- en: '| ARM7TDMI | v4T | v1 | Most of the ARM7xx processors |'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARM7TDMI | v4T | v1 | 大多数ARM7xx处理器 |'
- en: '| ARM9TDMI | v4T | v1 | ARM[920&#124;922&#124;940]T: 920T is the one in the
    box.`T'' means includes thumb instructions`DMI'' means direct memory interface
    |'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARM9TDMI | v4T | v1 | ARM[920&#124;922&#124;940]T：920T是盒子中的那个。`T''表示包含Thumb指令`DMI''表示直接内存接口
    |'
- en: '| StrongARM | v4 | n/a | Intel SA-110\. Found in Compaq versions of IPAQ. |'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| StrongARM | v4 | n/a | Intel SA-110\. 发现在Compaq版本的IPAQ中。 |'
- en: '| ARM9E | v5TE | v2 |  |'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARM9E | v5TE | v2 |  |'
- en: '| ARM10E | v5TE | v2 |  |'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| ARM10E | v5TE | v2 |  |'
- en: '| XScale | v5TE | v2 | Manufactured by Intel. HP versions of IPAQ. |'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| XScale | v5TE | v2 | 由英特尔制造。HP版本的IPAQ。 |'
- en: Features
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特点
- en: 16 32-bit registers
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 16个32位寄存器
- en: r15, pc, special in the architecture
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: r15, pc，在架构中是特殊的
- en: r14, lr, special in the architecture
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: r14, lr，在架构中是特殊的
- en: r13, sp, special in the architecture
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: r13, sp，在架构中是特殊的
- en: r12, ip, used by the compiler as a scratch register
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: r12, ip，编译器用作临时寄存器
- en: r11, fp, used by the compiler as the frame pointer
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: r11, fp，编译器用作帧指针
- en: r10, sl
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: r10, sl
- en: r4 to r9
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: r4 到 r9
- en: r0 to r3, used by the compiler as scratch registers, for function arguments
    and return value
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: r0 到 r3，编译器用作临时寄存器，用于函数参数和返回值
- en: partially separate register sets different modes
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 部分独立的寄存器集不同模式
- en: link register (`lr`), program counter (`pc`) are special, but not very special
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 链接寄存器（`lr`），程序计数器（`pc`）是特殊的，但不是非常特殊
- en: Processor modes. In the table below `special' means that the mode has ia separate
    copy of the registers.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理器模式。在下表中，`special`表示该模式具有寄存器的单独副本。
- en: '| M[4:0] | Mode | Registers accessible |'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| M[4:0] | 模式 | 可访问的寄存器 |'
- en: '| 10000 | User | `r0-r15 cpsr` |'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10000 | 用户 | `r0-r15 cpsr` |'
- en: '| 10001 | FIQ (Fast interrupt processing) | `r0-r7, r15` `r8_fiq-r14_fiq``cpsr`,
    spsr_fiq |'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10001 | FIQ（快速中断处理） | `r0-r7, r15` `r8_fiq-r14_fiq``cpsr`, spsr_fiq |'
- en: '| 10010 | IRQ (Interrupt processing) | `r0-r12, r15` `r13_`irq`,r14_`irq`cpsr`,
    `spsr_`irq |'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10010 | IRQ（中断处理） | `r0-r12, r15` `r13_`irq`,r14_`irq`cpsr`, `spsr_`irq |'
- en: '| 10011 | Supervisor | `r0-r12, r15` `r13_`svc`,r14_`svc`cpsr`, `sprs_`svc
    |'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10011 | 监督员 | `r0-r12, r15` `r13_`svc`,r14_`svc`cpsr`, `sprs_`svc |'
- en: '| 10111 | Abort | `r0-r12, r15` `r13_`abt`,r14_`abt`cpsr`, `spsr`_abt |'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10111 | 中止 | `r0-r12, r15` `r13_`abt`,r14_`abt`cpsr`, `spsr`_abt |'
- en: '| 11011 | Undefined | `r0-r12, r15` `r13_`und`,r14_`und`cpsr`, `spsr_`und |'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 11011 | 未定义 | `r0-r12, r15` `r13_`und`,r14_`und`cpsr`, `spsr_`und |'
- en: '| 11111 | System | `r0-r15``cpsr` |'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 11111 | 系统 | `r0-r15``cpsr` |'
- en: Program status register, which you will find in two places CPSR and SPSR
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序状态寄存器，你会在CPSR和SPSR两个地方找到
- en: '| Bit | Mnemonic | Meaning |'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 位 | 助记符 | 含义 |'
- en: '| 31 | N | Negative |'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 31 | N | 负数 |'
- en: '| 30 | Z | Zero |'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 30 | Z | 零 |'
- en: '| 29 | C | Carry |'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 29 | C | 进位 |'
- en: '| 28 | V | Overflow |'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 28 | V | 溢出 |'
- en: '| 8-27 | DNM | Does not matter in v4 |'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 8-27 | DNM | 在v4中无关紧要 |'
- en: '| 7 | I | Interrupts disabled |'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 7 | I | 禁用中断 |'
- en: '| 6 | F | Fast interrupts disabled |'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 6 | F | 禁用快速中断 |'
- en: '| 5 | T | Thumb execution |'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 5 | T | Thumb执行 |'
- en: '| 4 | M4 | Five processor mode bits |'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 4 | M4 | 五个处理器模式位 |'
- en: '| 3 | M3 |  |'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 3 | M3 |  |'
- en: '| 2 | M2 |  |'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 2 | M2 |  |'
- en: '| 1 | M1 |  |'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 1 | M1 |  |'
- en: '| 0 | M0 |  |'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 0 | M0 |  |'
- en: Exceptions
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 异常
- en: '| ExceptionType | ModesCalled from | Mode atCompletion | InstructionAddress
    |'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 异常类型 | 调用模式 | 完成时模式 | 指令地址 |'
- en: '| Reset | hardware | supervisor | `0x00` |'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 复位 | 硬件 | 监督员 | `0x00` |'
- en: '| Undefined instruction | any | undefined | `0x04` |'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 未定义指令 | 任何 | 未定义 | `0x04` |'
- en: '| Software interrupt | any | supervisor | `0x08` |'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 软件中断 | 任何 | 监督员 | `0x08` |'
- en: '| Prefetch abort | any | abort | `0x0c` |'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 预取中止 | 任何 | 中止 | `0x0c` |'
- en: '| Data abort | any | abort | `0x10` |'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 数据中止 | 任何 | 中止 | `0x10` |'
- en: '| Ordinary interrupt | any | IRQ | `0x18` |'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 普通中断 | 任何 | IRQ | `0x18` |'
- en: '| Fast interrupt | any | FIQ | `0x1c` |'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 快速中断 | 任何 | FIQ | `0x1c` |'
- en: You are concerned right now with Reset and Software Interrupt.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在关心的是复位和软件中断。
- en: The first instruction executed by the CPU after reset is the one at location
    `0x00000000`. Usually it is
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CPU在复位后执行的第一条指令位于`0x00000000`位置。通常情况下
- en: '[PRE2]'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: which you will normally find in addresses `0x00` to `0x1c`. Just executing an
    instruction, rather than having an address that is specially processed saves transistors,
    which is good.
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常可以在地址`0x00`到`0x1c`找到。执行一条指令，而不是有一个经过特殊处理的地址，可以节省晶体管，这是好事。
- en: RedBoot puts entry points of RedBoot into addresses `0x20` to `0x3c.`This makes
    it possible to jump to any location in the 32 bit address space.
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: RedBoot将RedBoot的入口点放入地址`0x20`到`0x3c`。这使得可以跳转到32位地址空间中的任何位置。
- en: Note endianness of RedBoot output when examining these locations.
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意检查这些位置时的RedBoot输出的字节序。
- en: Three data types
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 三种数据类型
- en: 'word: 32 bits, word-aligned'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字：32位，字对齐
- en: 'half-word: 16 bits, half-word-aligned'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 半字：16位，半字对齐
- en: 'byte: 8 bits'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字节：8位
- en: General Comments
  id: totrans-148
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 一般评论
- en: each instruction is exactly one word
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每条指令正好是一个字
- en: load and store RISC architecture
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 装载和存储RISC架构
- en: rich set of addressing modes, based on barrel shifting
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于barrel shifting的丰富的寻址模式
- en: allows you to keep any partial computation it makes
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许您保留它所做的任何部分计算
- en: Context Switch
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上下文切换
- en: Step-by-step
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步
- en: Function Call (gcc calling conventions)
  id: totrans-155
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 函数调用（gcc调用约定）
- en: '[PRE3]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note the role of the index pointer (ip), link register (lr) and stack pointer
    (sp).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 注意索引指针（ip）、链接寄存器（lr）和堆栈指针（sp）的作用。
- en: The final instruction could be
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 最终指令可能是
- en: '[PRE4]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The sequence
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序
- en: '[PRE5]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: is a `NOP`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个`NOP`。
- en: Software Interrupt
  id: totrans-163
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 软件中断
- en: The software interrupt instruction ( SWI{cond} <immed_24> ). What happens when
    it is executed?
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 软件中断指令（SWI{cond} <immed_24>）。执行时会发生什么？
- en: r14_svc <- address of the following instruction. This is where the kernel will
    return to.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: r14_svc <- 以下指令的地址。这是内核将返回的地方。
- en: SPSR_svc <- CPSR. This saves the mode, condition codes, etc.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SPSR_svc <- CPSR。这保存了模式、条件码等。
- en: CPSR[0:4] <- 0b10011\. Supervisor mode.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CPSR[0:4] <- 0b10011\. 管理员模式。
- en: CPSR[5] <- 0\. ARM (not Thumb) state.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CPSR[5] <- 0\. ARM（非Thumb）状态。
- en: CPSR[7] <- 1\. Normal interrupts disabled.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CPSR[7] <- 1\. 正常中断禁用。
- en: PC <- 0x08
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PC <- 0x08
- en: The CPU ignores the 24-bit immediate value, which can be used by the programmer
    as an argument identifying the system call, for example.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: CPU忽略了24位立即值，程序员可以将其用作标识系统调用的参数，例如。
- en: '[PRE6]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The sequence
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序
- en: '[PRE7]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: is a `NOP`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个`NOP`。
- en: 'Questions:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：
- en: What is above kernel entry?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内核入口上面是什么？
- en: If you put swi in a wrapper or stub what happens before and after it?
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果将swi放在包装器或存根中，之前和之后会发生什么？
- en: If the request had arguments, how would you get them into the kernel?
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果请求有参数，你将如何将它们传递给内核？
- en: Hint. How does `gcc` pass arguments into a function?
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示。`gcc`如何将参数传递给函数？
- en: It might be important that there are two link registers. Which two link registers?
    Why?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重要的是有两个链接寄存器。哪两个链接寄存器？为什么？
- en: In practice it isn't important. Why not?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实践中这并不重要。为什么呢？
- en: 'Suggestions:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 建议：
- en: Try this first on paper drawing the stack, registers, etc after each instruction
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先在纸上尝试，每条指令后绘制堆栈、寄存器等
- en: Try coding in baby steps, which is usually a good idea in assembly language.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试逐步编码，这在汇编语言中通常是一个好主意。
- en: Try reading [this](../../pdf/context.pdf).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试阅读[这个](../../pdf/context.pdf)。
- en: '* * *'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Return to:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到：
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan在s12为CS452的讲座笔记](index.html)'
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan的2012年春季CS452页面](../index.html)'
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan的CS452页面](../../index.html)'
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan的教学页面](../../../index.html)'
- en: '[Bill Cowan''s home page](../../../../index.html)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan的主页](../../../../index.html)'
