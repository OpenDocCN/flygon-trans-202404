- en: Lecture 7 - Create, Scheduling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讲座7 - 创建，调度
- en: Pubilc Service Annoucements
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共服务公告
- en: Due date for assignment 1
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作业1的截止日期
- en: Partners
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合作伙伴
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: After the Software Interrupt
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 软件中断后
- en: In the kernel
  id: totrans-6
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 在内核中
- en: The order matters, except for the last two
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序很重要，除了最后两个
- en: Save the user state
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存用户状态
- en: Get the request
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取请求
- en: Retrieve the kernel state
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索内核状态
- en: There is more than one way to do almost everything in this list, and I have
    chosen this way of describing what is to be done because it's simplest to describe,
    not because it's necessarily best!.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个列表中几乎每件事都有多种方法可以做，我选择描述这样做的方式是因为它最简单，而不一定是最好的！。
- en: At this point the kernel is ready to handle the request.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此时内核已准备处理请求。
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Handling the Request
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理请求
- en: What needs to be done
  id: totrans-15
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 需要做什么
- en: Check for errors
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查错误
- en: Manipulating TDs
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作TDs
- en: Sometimes, copying bytes from one address space to another.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有时，将字节从一个地址空间复制到另一个地址空间。
- en: Saving up the return value
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 保存返回值
- en: The task that made the request may not be the next one to run.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 提出请求的任务可能不是下一个要运行的任务。
- en: The kernel needs to save the request's return value until the next time the
    requester is scheduled.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核需要保存请求的返回值，直到下次请求者被调度。
- en: One solution is to put it in the TD.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个解决方案是将其放在TD中。
- en: It's also possible to put it where it will be needed (such as r0) immediately.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也可以立即将其放在需要的地方（如r0）。
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Scheduling
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调度
- en: There are two important issues for scheduling
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 调度有两个重要问题
- en: When do we reschedule?
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时重新调度？
- en: Who do we activate when we schedule
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们调度时激活谁
- en: When to schedule
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 何时调度
- en: Every time we are in the kernel, so the issue is `When do we enter the kernel?'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们在内核中时，问题是`我们何时进入内核？'
- en: Three possibilities
  id: totrans-31
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 三种可能性
- en: Tasks run to completion, which means until they make a request for kernel services
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务运行到完成，这意味着直到它们请求内核服务
- en: Event-driven pre-emption, which means when hardware makes a request for service
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件驱动的抢占，这意味着当硬件请求服务时
- en: Time-slicing
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 时间片切片
- en: re-schedule only when the slice-timer times out
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅当切片计时器超时时才重新调度
- en: two problems with time slicing
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间片切片的两个问题
- en: slices are too big => bad response
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切片太大=>响应不佳
- en: slices are too small => kernel runs too much = bad response
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切片太小=>内核运行太多=响应不佳
- en: What defines `too big' and `too small'?
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么定义了`太大'和`太小'？
- en: desired response times
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 期望的响应时间
- en: frequency of requests from hardware
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 硬件请求的频率
- en: both of which vary widely
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 两者差异很大
- en: We do 1 & 2, but not 3, because our tasks co-operate. Time-slicing is needed
    when tasks are adversarial.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做1和2，但不做3，因为我们的任务是合作的。当任务对抗时需要时间片切片。
- en: Who to Schedule
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 谁来调度
- en: Whoever is needed to meet all the deadlines
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了满足所有截止日期而需要的人
- en: or to optimize something.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者优化某些东西。
- en: Because this is not an easy problem, we don't want to solve it within the kernel.
    What the kernel does should be fast (=constant time) and not resource constrained.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这不是一个简单的问题，我们不希望在内核内解决它。内核所做的应该是快速的（=常数时间），而且不受资源限制。
- en: Inexpensive (=constant time)ways to schedule
  id: totrans-48
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 以廉价（=常数时间）的方式进行调度
- en: Least expensive first
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 先最便宜
- en: active task decides = co-routines
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 活动任务决定=协程
- en: round robin
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 轮转
- en: everybody gets the same chance
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人都有同样的机会
- en: but usually long running time = unimportant
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但通常长时间运行=不重要
- en: priorities
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优先级
- en: fixed at compile time
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编译时固定
- en: fixed when task is created
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务创建时固定
- en: re-fixed every time task is scheduled
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次任务被调度时都会重新固定
- en: Do you have a good algorithm?
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有一个好的算法吗？
- en: The number of priorities should be small, but not too small.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 优先级的数量应该小，但不要太小。
- en: Tasks at the same priority should have the same precedence.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 相同优先级的任务应具有相同的优先级。
- en: Scheduling algorithm
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 调度算法
- en: Find the highest priority non-empty ready queue.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到最高优先级的非空就绪队列。
- en: Schedule the first task in the queue.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调度队列中的第一个任务。
- en: The state of the most recently scheduled (running) task is ACTIVE, not READY.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最近调度（运行）任务的状态是活动的，而不是就绪的。
- en: The kernel maintains a pointer to the TD of the active task so it knows which
    task is making the current request.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 内核维护对活动任务的TD的指针，以便知道哪个任务正在发出当前请求。
- en: When a task is made ready it is put at the end of its ready queue.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当任务准备就绪时，将其放在其就绪队列的末尾。
- en: Implementation
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 实现
- en: Array of ready queues, one for each priority.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 就绪队列的数组，每个优先级一个。
- en: Each ready queue is a list with a head pointer (for extraction)and a tail pointer
    (for insertion).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每个就绪队列都是一个带有头指针（用于提取）和尾指针（用于插入）的列表。
- en: Hint. The Art of Computer Programming (Donald Knuth) says that circular queues
    are better. Why?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 提示。《计算机编程艺术》（Donald Knuth）说循环队列更好。为什么？
- en: Implementation decisions
  id: totrans-71
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 实现决策
- en: How many priorities
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有多少个优先级
- en: Which task should have which priority
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个任务应该有哪个优先级
- en: What to do when there is no ready task
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当没有准备好的任务时该怎么办
- en: The queues of typical running system
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 典型运行系统的队列
- en: 'Highest priority:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最高优先级：
- en: tasks waiting on interrupts
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待中断的任务
- en: almost always blocked
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几乎总是被阻塞
- en: do minimal processing, then release tasks blocked on them
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行最少的处理，然后释放被阻塞在它们上面的任务
- en: Medium priority
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 中等优先级
- en: receive blocked tasks
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收被阻塞的任务
- en: almost always blocked
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几乎总是被阻塞
- en: provide service to application tasks
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为应用任务提供服务
- en: Low priority
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 低优先级
- en: send-blocked tasks
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送阻塞任务
- en: blocked more often than not
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数情况下被阻塞
- en: make decisions about what should be done next
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 做出关于接下来应该做什么的决定
- en: Lowest priority
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最低优先级
- en: one task that runs without blocking
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无需阻塞即可运行的任务
- en: the idle task
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空闲任务
- en: uses power without doing anything
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用电源而不做任何事情
- en: '* * *'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Before the Software Interrupt
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在软件中断之前
- en: After a while it's time to leave the kernel
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 过了一会儿就该离开内核了
- en: Schedule the next task to run
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安排下一个要运行的任务
- en: i.e. get the value of `active`
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即获取`active`的值
- en: Call `GetNextRequest( active )`
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`GetNextRequest( active )`
- en: Inside GetNextRequest
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在GetNextRequest内
- en: From TD, or the user stack
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从TD或用户栈
- en: get sp_usr
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取sp_usr
- en: set spsr_svc = cpsr_usr
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置spsr_svc = cpsr_usr
- en: You should understand how this takes us back to user mode.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该理解这如何将我们带回用户模式。
- en: set lr_svc = pc for return to user mode
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置lr_svc = pc以返回到用户模式
- en: Save kernel state on kernel stack
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内核堆栈上保存内核状态
- en: Combined with 6, above this should be a NOP
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结合以上6点，这应该是一个NOP
- en: Set return value by overwriting r0 on user stack
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过覆盖用户栈上的r0设置返回值
- en: Switch to system mode
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到系统模式
- en: Load registers from user stack
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从用户栈加载寄存器
- en: Combined with 3 above this should be a NOP
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结合以上3点，这应该是一个NOP
- en: Return to supervisor mode
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到监督者模式
- en: Let it go
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让它走
- en: '[PRE0]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The instruction after this one is normally the kernel entry.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这条指令之后通常是内核入口。
- en: '* * *'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Making the Stub that Wraps swi
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 制作包装swi的存根
- en: 'For each kernel primitive there must be a function available in usr code: the
    kernel''s API.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个内核原语，用户代码中必须有一个可用的函数：内核的API。
- en: e.g. `int Create( int priority, void ( *code ) ( ) );`
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如 `int Create( int priority, void ( *code ) ( ) );`
- en: What gcc does for you
  id: totrans-118
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: gcc为你做了什么
- en: Before calling Create
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 调用Create之前
- en: gcc saves the scratch registers to memory.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: gcc将临时寄存器保存到内存中。
- en: gcc puts the arguments into the scratch registers, and possibly on the stack.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: gcc将参数放入临时寄存器，可能也放在堆栈上。
- en: While calling Create
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用Create时
- en: '`bl` to the entry point of Create'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bl`到Create的入口点'
- en: While executing Create
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行Create时
- en: gcc saves the registers that **it thinks** will be altered during execution
    of the function.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: gcc保存**它认为**在函数执行期间将被更改的寄存器到内存中。
- en: gcc thinks wrong, because only the assembler knows that swi is in the instruction
    stream
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: gcc认为错了，因为只有汇编器知道swi在指令流中
- en: your code gets executed
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的代码被执行
- en: gcc restores the registers it saved, and only those registers.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: gcc恢复它保存的寄存器，仅恢复那些寄存器。
- en: Exiting from Create
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 退出Create
- en: mov pc, lr, or equivalent, is executed, returning the execution to the instruction
    following bl
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行mov pc, lr，或等效的操作，将执行返回到bl后的指令
- en: After calling Create
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 调用Create后
- en: gcc stores register r0, the return value, in the variable to which the result
    of Create is assigned.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: gcc将寄存器r0，即返回值，存储在Create的结果分配给的变量中。
- en: What the code you write does
  id: totrans-133
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 你编写的代码做了什么
- en: Moves the arguments from gcc's locations to whatever convention you choose for
    your kernel
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将参数从gcc的位���移动到你为内核选择的任何约定
- en: Does swi n, where n is the code for Create.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行swi n，其中n是Create的代码。
- en: Moves the return value from your kernel's conventional location to r0.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将返回值从你内核的常规位置移动到r0。
- en: '* * *'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Creating a Task
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个任务
- en: In creating a task you have to do two things
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 创建任务时你必须做两件事
- en: Get and initialize resources needed by the task
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并初始化任务所需的资源
- en: TD
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TD
- en: memory
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存
- en: Make the task look as if it had just entered the kernel
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使任务看起来好像刚进入内核
- en: it's ready to execute when it's scheduled
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当被调度时，它准备好执行
- en: Things you need to do
  id: totrans-145
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 你需要做的事情
- en: Get an unused TD and memory for its stack
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一个未使用的TD和其堆栈的内存
- en: memory could be associated with TD during initialization
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存可能在初始化期间与TD关联
- en: actually a form of constant time memory allocation
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际上是一种常数时间内存分配形式
- en: unless you implement Destroy
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非你实现Destroy
- en: Mostly filling in fields in the TD.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分是在TD中填写字段。
- en: task id
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务ID
- en: stack pointer
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 栈指针
- en: SPSR
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SPSR
- en: link register
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 链接寄存器
- en: parent tid
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 父 Tid
- en: the active task
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活跃任务
- en: return value
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回值
- en: dummy
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟
- en: different return value for the active task, which goes in its TD
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于活跃任务，其返回值不同，会进入其 TD
- en: state
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 状态
- en: READY
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就绪
- en: install in the ready queues
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装在就绪队列中
- en: pointers in the TD
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TD 中的指针
- en: Must also initialize the stack
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 还必须初始化栈
- en: exactly as if the task had just done a kernel entry
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就像任务刚刚执行内核入口一样。
- en: look carefully at what your kernel exit code will do
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仔细查看你的内核退出代码会做什么
- en: At the end stack pointer must correspond to stack contents
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后栈指针必须对应栈内容
- en: I initialize the stack pointer to the top of allocated memory
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我将栈指针初始化为分配内存的顶部
- en: my stacks grow down
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的栈向下增长
- en: then change it as I push stuff onto the stack
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后当我将东西推到栈上时改变它
- en: imitating the context switch code
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟上下文切换代码
- en: '* * *'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The Create Function
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建函数
- en: You also need a `int Create( int priority, void (*code) ( ) )` function to call
    from user tasks.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个 `int Create( int priority, void (*code) ( ) )` 函数供用户任务调用。
- en: Although it's no more than a wrapper there are a few problems to solve.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它不过是一个包装器，但有一些问题需要解决。
- en: Passing arguments
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传递参数
- en: On entry the arguments are somewhere, usually r0 & r1
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入时参数在某处，通常是 r0 和 r1
- en: You have to put them where the kernel can find them.
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你必须把它们放在内核能找到的地方。
- en: gcc's function extry code immediately puts them on the stack.
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: gcc 的函数入口代码立即将它们放在堆栈上。
- en: In assembly you can find them using the frame pointer.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在汇编中，你可以使用帧指针找到它们。
- en: Jumping into the kernel
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入内核
- en: Getting the return value from the kernel and returning it.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从内核获取返回值并返回它。
- en: You find it where the kernel put it
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会在内核放置它的地方找到它
- en: gcc's function exit code expects it to be indexed off the frame pointer
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: gcc 的函数退出代码期望它是基于帧指针的索引
- en: from where it does into r0
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从这里进入 r0
- en: '* * *'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Other Primitives
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他原语
- en: These primitives exist mostly so that we, which includes you, can ensure that
    task creation and scheduling are working when there is not much else implemented.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这些原语主要是为了确保任务创建和调度在没有太多其他实现时能够正常工作，我们，包括你在内。
- en: '`Tid MyTid( )`'
  id: totrans-189
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '`Tid MyTid( )`'
- en: Self-explanatory
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 自解释
- en: Doesn't block, but does reschedule.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不阻塞，但会重新调度。
- en: A question, to which there is a correct answer, or more specifically, a correct
    (answer, reason) pair.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题，有一个正确答案，或者更具体地说，一个正确的（答案，原因）对。
- en: Should the Tid be stored in user space?
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tid 应该存储在用户空间吗？
- en: '`Tid MyParentTid( )`'
  id: totrans-194
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '`Tid MyParentTid( )`'
- en: Self-explanatory
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 自解释
- en: Doesn't block, but does reschedule.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不阻塞，但会重新调度。
- en: Where is the parent Tid, and how does the kernel find it?
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 父 Tid 在哪里，内核如何找到它？
- en: '`void Pass( )`'
  id: totrans-198
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '`void Pass( )`'
- en: 'Doesn''t block: task calling `Pass( )` remains ready to execute.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 不阻塞：调用 `Pass( )` 的任务仍然准备好执行。
- en: Does reschedule.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 重新调度。
- en: When is `Pass( )` a `NOP`?
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 何时 `Pass( )` 是一个 `NOP`？
- en: '`void Exit( )`'
  id: totrans-202
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '`void Exit( )`'
- en: Calling task is removed from all queues, but its resources are not reclaimed
    or reused.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 调用任务从所有队列中移除，但其资源不会被回收或重用。
- en: That is, the task goes into a zombie state, in which it cannot be active or
    ready, but continues to own all its resources.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，任务进入僵尸状态，在这种状态下，它既不能活跃也不能就绪，但仍然拥有所有资源。
- en: How Should Execution Terminate?
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行应该如何终止？
- en: Nicely.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。
- en: When there are no tasks left on the ready queues, it goes back to RedBoot.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当就绪队列中没有任务时，它会返回到 RedBoot。
- en: This behaviour changes when hardware interrupts are implemented.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当硬件中断实现时，这种行为会发生变化。
- en: '* * *'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Return to:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 返回至：
- en: '[Bill Cowan''s lecture notes for CS452 in s12](index.html)'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan 的 CS452 s12 讲座笔记](index.html)'
- en: '[Bill Cowan''s Spring 2012 CS452 page](../index.html)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan 的 2012 年春季 CS452 页面](../index.html)'
- en: '[Bill Cowan''s CS452 page](../../index.html)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan 的 CS452 页面](../../index.html)'
- en: '[Bill Cowan''s teaching page](../../../index.html)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan 的教学页面](../../../index.html)'
- en: '[Bill Cowan''s home page](../../../../index.html)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bill Cowan 的主页](../../../../index.html)'
