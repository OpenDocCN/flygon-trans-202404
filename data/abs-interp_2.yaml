- en: 2  What can be formalized by abstract interpretation?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2  什么可以通过抽象解释来形式化？
- en: Abstract interpretation is useful in computer science to formalize reasonings
    involving the [sound [and complete]] approximation of the semantics of formal
    systems. A non-exhaustive list of typical examples of application is given below.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，抽象解释用于形式化涉及形式系统语义的[准确 [和完整]] 近似。下面列举了一些典型的应用示例，但并不穷尽。
- en: 2.1  Syntax
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.1  语法
- en: The analysis of properties of grammars as well as parsing are abstract interpretations
    of the grammar operational semantics and its abstractions (such as parse trees,
    protolanguages, or terminal languages) [[39](#CousotCousot03-TCS-parsing)].
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对语法的性质进行分析以及解析都是语法操作语义及其抽象（如解析树、原型语言或终端语言）的抽象解释[[39](#CousotCousot03-TCS-parsing)]。
- en: 2.2  Semantics
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2  语义
- en: The semantics of programs describes their possible runtime executions in all
    possible execution environments at some level of abstraction. The hierarchy of
    semantics, including trace, small-step, and big-step operational semantics, relational
    semantics, denotational semantics, predicate transformers, and axiomatic semantics
    in their angelic, natural, and demoniac versions can be designed by abstract interpretation
    [[32](#CousotCousot92-1-POPL),[19](#Cousot02-TCS)]. An extension to transfinite
    behaviors is useful to formalize e.g. *semantic slicing* [[54](#GiacobazziMastroeni03-transfinite)].
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的语义描述了它们在所有可能的执行环境中的可能运行时执行的层次。语义的层次结构，包括跟踪、小步、大步操作语义、关系语义、表示性语义、谓词变换器和天使、自然和恶魔版本的公理语义，都可以通过抽象解释来设计[[32](#CousotCousot92-1-POPL),[19](#Cousot02-TCS)]。对于超限行为的扩展对于形式化例如*语义切片*[[54](#GiacobazziMastroeni03-transfinite)]是有用的。
- en: 2.3  Proofs
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.3  证明
- en: Formal proofs of program correctness involve an abstraction since specifications
    always ignore some aspects of program execution which need not be taken into account
    in the proof [[18](#Cousot00-SARA)].
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 程序正确性的形式证明涉及一种抽象，因为规范总是忽略了程序执行的某些方面，在证明中不需要考虑[[18](#Cousot00-SARA)]。
- en: 2.4  Static analysis
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4  静态分析
- en: Static analysis is the automatic determination of abstract program properties
    [[22](#CousotCousot77-1-POPL),[44](#CousotHalbwachs78-1-POPL),[26](#CousotCousot79-1-POPL),[15](#Cousot81-1-MuchnickJones)]
    including *Dataflow Analysis* [[67](#Hecht77-1)], [[26](#CousotCousot79-1-POPL),[36](#CousotCousot00-POPL)],
    *Set-based Analysis* [[35](#CousotCousot95-3-FPCA)], etc. This was the motivating
    application behind the introduction of the abstract interpretation theory.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 静态分析是抽象程序属性的自动确定[[22](#CousotCousot77-1-POPL),[44](#CousotHalbwachs78-1-POPL),[26](#CousotCousot79-1-POPL),[15](#Cousot81-1-MuchnickJones)]，包括*数据流分析*[[67](#Hecht77-1)],
    [[26](#CousotCousot79-1-POPL),[36](#CousotCousot00-POPL)], *基于集合的分析*[[35](#CousotCousot95-3-FPCA)]等。这是引入抽象解释理论的动机应用。
- en: 2.5  Types
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5  类型
- en: Static typing and type inference [[97](#Pierce02-TypesBook)] can be understood
    as an abstract interpretation of runtime type checking thus providing a "correct
    by construction" design method [[16](#Cousot97-1-POPL),[11](#CominiDamianiVrech08-SAS)].
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 静态类型和类型推断[[97](#Pierce02-TypesBook)]可以被理解为运行时类型检查的抽象解释，因此提供了一种"通过构造实现正确"的设计方法[[16](#Cousot97-1-POPL),[11](#CominiDamianiVrech08-SAS)]。
- en: 2.6  Model-checking
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.6  模型检查
- en: '*Model-checking* exhaustively verifies temporal properties on a finite model
    of hardware or software computer systems [[10](#ClarkeGrumbergPeled99-1)]. This
    abstraction of a system into a model is often left implicit. *Abstract model checking*,
    as formalized by abstract interpretation, makes this abstraction explicit [[9](#ClarkeEtAl-TOPLAS94)],
    [[36](#CousotCousot00-POPL)], .Model-checking is reputed to be terminating, sound,
    and complete on the model. From an abstract interpretation point of view, relating
    the system to its model, it may be sound on the model but unsound on the system
    (e.g. the model is correct for safety properties but wrong for liveness properties),
    it is often incomplete (no finite model can cover the specified behaviors of the
    system [[100](#Ranzato01-esop01)]) and, in practice, may explode combinatorially.
    In all cases abstract interpretations of the system into a model have to be considered.
    All transition models are abstract semantics but the converse is not true.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*模型检查* 在硬件或软件计算机系统的有限模型上详尽验证时间属性[[10](#ClarkeGrumbergPeled99-1)]。 将系统抽象为模型的这种抽象通常被省略。
    由抽象解释形式化的*抽象模型检查* 使这种抽象显式化[[9](#ClarkeEtAl-TOPLAS94)]，[[36](#CousotCousot00-POPL)]。模型检查被认为是在模型上终止，完备和完备的。
    从抽象解释的角度来看，将系统与其模型相关联，它可能对模型是完备的，但对系统是不完备的（例如，模型对于安全属性是正确的，但对于活力属性是错误的），它经常是不完整的（没有有限模型可以覆盖系统的指定行为[[100](#Ranzato01-esop01)]）且在实践中可能会组合爆炸。
    在所有情况下，系统对模型的抽象解释都必须被考虑。 所有转换模型都是抽象语义，但反之则不然。'
- en: 2.7  Predicate abstraction
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.7  谓词抽象
- en: Predicate abstraction [[61](#GrafSaidi96-CAV)] can be used to reduce any static
    analysis on a *finite* abstract domain to boolean fixpoint computations as performed
    by a model-checker using a theorem prover to automatically derive the abstract
    transformers involved in the fixpoint definition. Parametric predicate abstraction
    is an extension to infinite abstract domains [[20](#Cousot03-ZM)].
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词抽象[[61](#GrafSaidi96-CAV)]可用于将*有限*抽象域上的任何静态分析减少为模型检查器执行的布尔不动点计算，使用定理证明器自动推导出固定点定义中涉及的抽象变换器。
    参数化谓词抽象是对无限抽象域的扩展[[20](#Cousot03-ZM)]。
- en: 2.8  Counter-example-based refinement
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.8  基于反例的细化
- en: Spurious counter-example-based refinement in abstract model-checking is formalized
    as an abstract domain completion problem in the abstract interpretation theory
    [[56](#GiacobazziQuintarelli-SAS01),[43](#CousotGantyRaskin07-SAS)].
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在抽象模型检查中基于虚假反例的细化被形式化为抽象解释理论中的抽象域完成问题[[56](#GiacobazziQuintarelli-SAS01),[43](#CousotGantyRaskin07-SAS)]。
- en: 2.9  Strong Preservation
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.9  强保持性
- en: The problem of modifying finite abstract model checking by minimal refinements
    in order to get strong preservation for some specification language, including
    partition refinement algorithms, is a completion problem in the abstract interpretation
    theory [[101](#RanzatoTapparo-06-VMCAI)].
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过最小细化修改有限抽象模型检查问题，以获得某些规范语言的强保持性，包括分区细化算法，在抽象解释理论中是一个完成问题[[101](#RanzatoTapparo-06-VMCAI)]。
- en: 2.10  Program transformation
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.10  程序转换
- en: Program transformations (such as *partial evaluation* [[72](#JonesGomardSestoft93-1)])
    often require a static analysis of the source program, as formalized by abstract
    interpretation (e.g. [[71](#Jones-SAS97)]). Moreover, the transformation itself,
    from source to object programs, involves a loss of information on the original
    program or a limitation on the possible program behaviors. This approximation
    can be formalized by abstract interpretation. This was exemplified on dead-code
    elimination, slicing, partial evaluation, or program monitoring [[38](#CousotCousot02-POPL)].
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 程序转换（如*部分求值*[[72](#JonesGomardSestoft93-1)]）通常需要对源程序进行静态分析，由抽象解释形式化（例如[[71](#Jones-SAS97)]）。
    此外，从源到目标程序的转换本身涉及对原始程序的信息丢失或可能的程序行为限制。 这种近似可以通过抽象解释形式化。 这在死代码消除，切片，部分求值或程序监视[[38](#CousotCousot02-POPL)]中得到了示范。
- en: 2.11  Watermarking
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.11  水印
- en: Looking for program watermarks that are not subject to obfuscation, one can
    think to an abstract interpretation of the program semantics [[40](#CousotCousot04-POPL)].
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找不受混淆影响的程序水印，可以考虑对程序语义进行抽象解释[[40](#CousotCousot04-POPL)]。
- en: 2.12  Information hiding
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.12  信息隐藏
- en: In language-based software security, the information to be hidden to an intruder
    can be formalized as an abstract interpretation of the program semantics [[55](#GiacobazziMastroeni-FORMATS05)].
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于语言的软件安全领域，对入侵者隐藏的信息可以被形式化为程序语义的抽象解释[[55](#GiacobazziMastroeni-FORMATS05)]。
- en: 2.13  Code obfuscation
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.13  代码混淆
- en: The aim of code obfuscation is to prevent malicious users from discovering properties
    of the original source program. This goal can be precisely modeled by abstract
    interpretation, where the hiding of properties corresponds to abstracting the
    semantics [[99](#DallaPredaGiacobazzi-SEFM05)].
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 代码混淆的目的是防止恶意用户发现原始源程序的属性。这个目标可以通过抽象解释进行精确建模，其中属性的隐藏对应于抽象化语义[[99](#DallaPredaGiacobazzi-SEFM05)]。
- en: 2.14  Malware detection
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.14  恶意软件检测
- en: An obfuscated malware is better detected by the effects of its execution as
    recognized by an abstract interpretation rather than by a syntactic signature
    [[98](#DallaPredaEtAl-POPL07)].
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过抽象解释识别执行效果，而不是通过语法签名[[98](#DallaPredaEtAl-POPL07)]，更容易检测出混淆的恶意软件。
- en: 2.15  Termination
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.15  终止
- en: A relational abstract-interpretation-based static analysis on a well-founded
    abstract domain can be systematically extended to a termination analysis [[3](#BerdineEtAl-POPL07)]
    (whence liveness analyses). Termination analysis may require probabilistic hypotheses
    [[87](#Monniaux_SAS01)] or fairness hypotheses on parallel processes [[78](#Mauborgne-SAS-00)].
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 基于关系抽象解释的静态分析在良好基础的抽象域上可以被系统地扩展到终止分析[[3](#BerdineEtAl-POPL07)]（因此生存性分析）。终止分析可能需要对并行进程[[78](#Mauborgne-SAS-00)]进行概率假设[[87](#Monniaux_SAS01)]或公平性假设。
