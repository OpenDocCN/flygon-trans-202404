- en: Binomial Heaps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二项堆
- en: For simplicity, we'll continue to work with heaps of `Int`s. Our implementation
    ([`BinomialHeaps.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/BinomialHeaps.elm))
    exports the same type signatures as the previous implementations of min-heaps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为简单起见，我们将继续使用`Int`堆。我们的实现（[`BinomialHeaps.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/BinomialHeaps.elm)）导出与先前最小堆实现相同的类型签名。
- en: 'Binomial Trees: Representation and Invariants'
  id: totrans-2
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 二项树：表示和不变性
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Binomial trees* of rank `r` are defined inductively as follows.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 秩为`r`的*二项树*的定义如下。
- en: '`Node 0 n []` is a binomial tree of rank `0`.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Node 0 n []`是秩为`0`的二项树。'
- en: '`Node r n ts` is a binomial tree of rank `r > 0` if `ts` is a list of `r` binomial
    trees with rank `r-1` through `0`, respectively.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`ts`是具有秩`r-1`到`0`的`r`个二项树的列表，则`Node r n ts`是秩为`r > 0`的二项树。
- en: A binomial tree of rank `r` has *2^(`r`)* nodes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 秩为`r`的二项树有*2^(`r`)*个节点。
- en: Linking
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 链接
- en: A binomial tree of rank `r + 1` is formed by linking together two trees of rank
    `r`, making one the leftmost child of the other.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 秩为`r + 1`的二项树是通过将两个秩为`r`的树链接在一起形成的，使其中一个成为另一个的最左子节点。
- en: The `link` function below links two binomial trees, choosing to keep the smaller
    of the two elements at the root. Therefore, if `t1` and `t2` are both heap-ordered,
    then so is the result.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`link`函数链接两个二项树，选择保留两个元素中较小的一个作为根。因此，如果`t1`和`t2`都是堆有序的，则结果也是堆有序的。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Binomial Heaps: Representation and Invariants'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 二项堆：表示和不变性
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A *binomial heap* is list of heap-ordered binomial trees, kept in strictly-increasing
    order of rank. A binomial heap containing *n* elements is represented using at
    most *O(log n)* binomial trees, analogous to the binary representation of *n*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*二项堆*是一组堆有序的二项树列表，严格按秩严格递增的顺序排列。包含*n*个元素的二项堆使用最多*O(log n)*个二项树表示，类似于*n*的二进制表示。'
- en: Heap Interface
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 堆接口
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `findMin` function searches for the smallest root among all of the binomial
    trees, taking *O(log n)* time.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`findMin`函数在所有二项树中搜索最小的根，时间复杂度为*O(log n)*。'
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: See Homework 3 for a way to implement `findMin` so that it runs in *O(1)* time,
    as for other heap implementations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考作业3，了解如何实现`findMin`，使其在*O(1)*时间内运行，就像其他堆实现一样。
- en: Insertion
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 插入
- en: Inserting into a binomial heap requires pairwise `link`ing of `Trees` with equal
    rank. Think "sum" and "carry" bits as in arithmetic addition. This is analogous
    to arithmetic addition.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将元素插入二项堆需要对具有相同秩的树进行成对`链接`。可以将其类比为算术加法中的“和”和“进位”位。这类似于算术加法。
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are *O(m)* recursive calls to `insertTree` (where *m* is the length of
    `ts`), each of which performs *O(1)* work (to `link` two trees). Thus, `insert`
    runs in *O(m) = O(log n)* time.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对`insertTree`有*O(m)*次递归调用（其中*m*是`ts`的长度），每次执行*O(1)*的工作（链接两个树）。因此，`insert`的运行时间为*O(m)
    = O(log n)*。
- en: Merging
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 合并
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To analyze the running time of `merge_`, let *m* be the total number of trees
    in both `ts1` and `ts2`. The first two cases run in *O(1)* time. Each recursive
    call to `merge_` decreases *m* by one (in the third and fourth cases) or two (in
    the fifth case). The cons operations in the third and fourth cases require *O(1)*
    work. In the fifth case, `link` requires *O(1)* time, `insertTree` requires *O(m)*
    time, and the recursive call to `merge_` requires *T(m-2)* time. There are *O(m)*
    recursive calls, each of which requires at most *O(m)* time. The result is a *O(m²)*
    running time, which is *O(log²(n))* where *n* is the total number of elements
    described in the two heaps being merged.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要分析`merge_`的运行时间，设*m*为`ts1`和`ts2`中树的总数。前两种情况的运行时间为*O(1)*。每次对`merge_`的递归调用会使*m*减少一次（在第三和第四种情况下）或两次（在第五种情况下）。第三和第四种情况中的cons操作需要*O(1)*的工作。在第五种情况中，`link`需要*O(1)*的时间，`insertTree`需要*O(m)*的时间，对`merge_`的递归调用需要*T(m-2)*的时间。共有*O(m)*次递归调用，每次最多需要*O(m)*的时间。结果是*O(m²)*的运行时间，即*O(log²(n))*，其中*n*是要合并的两个堆中描述的元素的总数。
- en: '[A more subtle analysis](http://stackoverflow.com/questions/11462626/should-melding-merging-of-binomial-heaps-be-done-in-one-pass-or-two),
    however, can be used to argue that the implementation of `merge_` runs in *O(log
    n)* time. The argument requires a more careful accounting of how many times `link`
    is called (which is the crux of both `insertTree` and `merge_`) based on the analogy
    between merging lists and adding two numbers in binary representation.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可以使用更微妙的分析来证明`merge_`的实现在*O(log n)*时间内运行。这个论点需要更仔细地计算`link`被调用的次数（这是`insertTree`和`merge_`的关键所在），基于合并列表和以二进制表示形式添加两个数字之间的类比。
- en: For our purposes, we will consider an alternative, one-pass definition (also
    drawn from [this post](http://stackoverflow.com/questions/11462626/should-melding-merging-of-binomial-heaps-be-done-in-one-pass-or-two))
    that is slightly easier to analyze.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，我们将考虑一个替代的、一次性的定义（也来自[这篇文章](http://stackoverflow.com/questions/11462626/should-melding-merging-of-binomial-heaps-be-done-in-one-pass-or-two)），这样分析起来稍微容易一些。
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let *T(m)* and *S(m)* be the running times of `merge''` and `merge_wc`, respectively,
    where *m* is an upper bound on the number of trees in both input lists combined.
    Consider each of the five cases of `merge''`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让*T(m)*和*S(m)*分别表示`merge'`和`merge_wc`的运行时间，其中*m*是两个输入列表中树的数量的上限。考虑`merge'`的五种情况：
- en: 'Cases 1 and 2: *T(m)* = *O(1)*'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 情况1和2：*T(m)* = *O(1)*
- en: 'Cases 3 and 4: *T(m)* = *O(1)* + *T(m-1)*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 情况3和4：*T(m)* = *O(1)* + *T(m-1)*
- en: 'Case 5: *T(m)* = *O(1)* + *S(m-2)*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 情况5：*T(m)* = *O(1)* + *S(m-2)*
- en: 'Consider each of the six cases of `merge_wc`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑`merge_wc`的六种情况：
- en: 'Cases 1 and 2: *S(m)* = *O(m)*'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 情况1和2：*S(m)* = *O(m)*
- en: 'Case 3: *S(m)* = *O(1)* + *T(m)*'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 情况3：*S(m)* = *O(1)* + *T(m)*
- en: 'Cases 4, 5, and 6: *S(m)* = *O(1)* + *S(m-1)*'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 情况4、5和6：*S(m)* = *O(1)* + *S(m-1)*
- en: There are at most *O(m)* mutually recursive calls between the two functions.
    The last call to `merge_wc` may take *O(m)* time, but all other calls take *O(1)*
    time. Thus, the worst-case running time for each of these two functions is *O(m)+O(m)
    = O(m)* time. That is, *O(log n)* time.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个函数之间最多有*O(m)*次互相递归调用。对`merge_wc`的最后一次调用可能需要*O(m)*时间，但所有其他调用都只需要*O(1)*时间。因此，这两个函数的最坏情况运行时间分别为*O(m)+O(m)
    = O(m)*时间。也就是说，*O(log n)*时间。
- en: Deletion
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 删除
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finding (Revisited)
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 寻找（重新审视）
- en: We can reuse the `removeMinTree` helper function to reimplement `findMin`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重用`removeMinTree`辅助函数来重新实现`findMin`。
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Reading
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: Required
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 必需的
- en: Okasaki, Chapter 3.2
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Okasaki，第3.2章
