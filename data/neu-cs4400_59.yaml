- en: Types for BoxesTuesday, February 21st
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Boxes 的类型星期二，2月21日
- en: Obviously, `Any` is not too great — it is the most generic type, so it provides
    the least information. For example, notice that
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，`Any` 并不是太好——它是最通用的类型，因此提供的信息最少。例如，注意到
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'returns the right list, which is equal to `foo` itself — but if we try to grab
    some part of the resulting list:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 返回正确的列表，它等于 `foo` 本身——但是如果我们试图获取结果列表的一部分：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'we get a type error, because the result of the `unbox` is `Any`, so Typed Racket
    knows nothing about it, and won’t allow you to treat it as a list. It is not too
    surprising that the type constructor that can help in this case is `Rec` which
    we have already seen — it allows a type that can refer to itself:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会得到一个类型错误，因为 `unbox` 的结果是 `Any`，所以有类型的 Racket 对它一无所知，并且不允许你将其视为列表。也不太奇怪的是，在这种情况下可以帮助的类型构造函数是我们已经见过的
    `Rec`——它允许引用自身的类型：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that either `foo` or the value in the box are both printed with a `Rec`
    type — the value in the box can’t just have a `(U #f this)` type, since `this`
    doesn’t mean anything in there, so the whole type needs to still be present.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '注意，`foo` 或框中的值都以 `Rec` 类型打印出来——框中的值不能只是具有 `(U #f this)` 类型，因为 `this` 在其中没有任何意义，所以整个类型仍然需要存在。'
- en: 'There is another issue to be aware of with `Boxof` types. For most type constructors
    (like `Listof`), if `T1` is a subtype of `T2`, then we also know that`(Listof
    T1)` is a subtype of `(Listof T2)`. This makes the following code typecheck:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个需要注意的与 `Boxof` 类型相关的问题。对于大多数类型构造函数（如 `Listof`），如果 `T1` 是 `T2` 的子类型，那么我们也知道
    `(Listof T1)` 是 `(Listof T2)` 的子类型。这使得以下代码可以通过类型检查：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Since the `(Listof Integer)` is a subtype of the `(Listof Number)` input for
    `foo`, the application typechecks. But this is *not* the same for the output type,
    for example — if we change the `bar` type to:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `(Listof Integer)` 是 `foo` 的输入的 `(Listof Number)` 的子类型，这个应用程序可以通过类型检查。但是对于输出类型来说*并不*是一样的，例如——如果我们将
    `bar` 类型改为：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'we get a type error since `Number` is not a subtype of `Integer`. So subtypes
    are required to “go up” on the input side and “down” on the other. So, in a sense,
    the fact that boxes are mutable means that their contents can be considered to
    be on the other side of the arrow, which is why for such `T1` subtype of `T2`,
    it is `(Boxof T2)` that is a subtype of `(Boxof T1)`, instead of the usual. For
    example, this doesn’t work:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会得到一个类型错误，因为 `Number` 不是 `Integer` 的子类型。因此，子类型需要在输入端“向上”传递，在另一端“向下”传递。因此，在某种意义上，框可变的事实意味着它们的内容可以被认为是箭头的另一侧，这就是为什么对于这样的
    `T1` 是 `T2` 的子类型，`(Boxof T2)` 是 `(Boxof T1)` 的子类型，而不是通常的情况。例如，这不起作用：
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And you can see why this is the case — the marked line is fine given a `Number`
    contents, so if the type checker allows passing in a box holding an integer, then
    that expression would mutate the contents and make it an invalid value.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到为什么会这样——标记的行对于一个 `Number` 内容是没问题的，所以如果类型检查器允许传递一个包含整数的框，那么该表达式将会改变内容并使其成为一个无效值。
- en: However, boxes are not only mutable, they hold a value that can be read too,
    which means that they’re on *both* sides of the arrow, and this means that `(Boxof
    T1)` is a subtype of `(Boxof T2)` if `T2` is a subtype of `T1` *and* `T1` is a
    subtype of `T2` — in other words, this happens only when `T1` and `T2` are the
    same type. (See below for an extended demonstration of all of this.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，框不仅是可变的，它们还持有一个可以读取的值，这意味着它们在*两侧*箭头上，这意味着如果 `T2` 是 `T1` 的子类型 *且* `T1` 是 `T2`
    的子类型，那么 `(Boxof T1)` 是 `(Boxof T2)` 的子类型——换句话说，只有当 `T1` 和 `T2` 是相同的类型时才会发生这种情况。（有关所有这些的扩展演示，请参见下文。）
- en: 'Note also that this demonstration requires that extra `b` definition, if it’s
    skipped:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，此演示需要额外的 `b` 定义，如果跳过：
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: then this will typecheck again — typed racket will just consider the context
    that requires a box holding a `Number`, and it is still fine to initialize such
    a box with an `Integer` value.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这将再次进行类型检查——有类型的 Racket 只会考虑需要一个包含 `Number` 的上下文，用 `Integer` 值初始化这样的框也是可以的。
- en: As a side comment, this didn’t always work. Earlier in its existence, typed
    racket would always choose a specific type for values, which would lead to confusing
    errors with boxes. For example, the above would need to be written as
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为一个旁注，这不总是有效的。在它的存在的早期阶段，有类型的 Racket 总是会为值选择一个特定的类型，这会导致与框有关的错误。例如，上述需要写成
- en: ''
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: to prevent typed racket from inferring a specific type. This is no longer the
    case, but there can still be some surprises. A similar annotation was needed in
    the case of a list holding a self-referential box, to avoid the initial `#f` from
    getting a specific-but-wrong type.
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了防止 Typed Racket 推断出特定类型。这不再是情况，但仍然可能会有一些意外。在持有自引用盒子的列表情况下，需要类似的注释，以避免初始的 `#f`
    被赋予一个特定但错误的类型。
