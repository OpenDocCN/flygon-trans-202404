- en: Test Precisely and Concretely
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试要精确而具体
- en: Test Precisely and Concretely
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试要精确而具体
- en: It is important to test for the desired, essential behavior of a unit of code,
    rather than test for the incidental behavior of its particular implementation.
    But this should not be taken or mistaken as an excuse for vague tests. Tests need
    to be both accurate *and* precise.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于代码单元的期望、基本行为进行测试非常重要，而不是测试特定实现的附带行为。但这不应该被认为是对模糊测试的借口或误解。测试需要既准确又精确。
- en: Something of a tried, tested, and testing classic, sorting routines offer an
    illustrative example. Implementing a sorting algorithm is not necessarily an everyday
    task for a programmer, but sorting is such a familiar idea that most people believe
    they know what to expect from it. This casual familiarity, however, can make it
    harder to see past certain assumptions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一种经过试验、测试并成为经典的东西，排序例程提供了一个说明性示例。实现排序算法对于程序员来说不一定是每天的任务，但排序是一个如此熟悉的概念，大多数人认为他们知道可以从中期待什么。然而，这种随意的熟悉感可能会使人难以看穿某些假设。
- en: 'When programmers are asked "What would you test for?" by far and away the most
    common response is "The result of sorting is a sorted sequence of elements." While
    this is true, it is not the whole truth. When prompted for a more precise condition,
    many programmers add that the resulting sequence should be the same length as
    the original. Although correct, this is still not enough. For example, given the
    following sequence:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序员被问及“你会测试什么？”时，迄今为止最常见的答案是“排序的结果是一个已排序的元素序列。”虽然这是正确的，但这并不是全部的事实。在要求更精确的条件时，许多程序员补充说，结果序列应该与原始序列具有相同的长度。虽然正确，但这仍然不够。例如，给定以下序列：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following sequence satisfies a postcondition of being sorted in non-descending
    order and having the same length as the original sequence:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下序列满足按非降序排序并且与原始序列长度相同的后置条件：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Although it satisfies the spec, it is also most certainly not what was meant!
    This example is based on an error taken from real production code (fortunately
    caught before it was released), where a simple slip of a keystroke or a momentary
    lapse of reason led to an elaborate mechanism for populating the whole result
    with the first element of the given array.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它满足了规范，但肯定不是原意！这个例子基于真实生产代码中的一个错误（幸运的是在发布之前就被捕捉到了），其中一个按键的简单失误或短暂的理智缺失导致了一个复杂的机制，用于将整个结果填充为给定数组的第一个元素。
- en: The full postcondition is that the result is sorted and that it holds a permutation
    of the original values. This appropriately constrains the required behavior. That
    the result length is the same as the input length comes out in the wash and doesn't
    need restating.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的后置条件是结果已排序，并且保留了原始值的排列。这适当地限制了所需的行为。结果长度与输入长度相同的事实在清洗过程中显现出来，无需重复说明。
- en: 'Even stating the postcondition in the way described is not enough to give you
    a good test. A good test should be readable. It should be comprehensible and simple
    enough that you can see readily that it is correct (or not). Unless you already
    have code lying around for checking that a sequence is sorted and that one sequence
    contains a permutation of values in another, it is quite likely that the test
    code will be more complex than the code under test. As Tony Hoare observed:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 即使按照上述方式陈述后置条件也不足以给你一个好的测试。一个好的测试应该是可读的。它应该是可以理解的，并且足够简单，以便你可以很容易地看出它是否正确（或错误）。除非你已经有代码来检查一个序列是否已排序，并且一个序列是否包含另一个序列的值的排列，否则测试代码很可能比待测试的代码更复杂。正如Tony
    Hoare所观察到的：
- en: 'There are two ways of constructing a software design: One way is to make it
    so simple that there are *obviously* no deficiencies and the other is to make
    it so complicated that there are no obvious deficiencies.'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 构建软件设计有两种方式：一种是使其非常简单，显然没有任何缺陷；另一种是使其非常复杂，没有明显的缺陷。
- en: 'Using concrete examples eliminates this accidental complexity and opportunity
    for accident. For example, given the following sequence:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用具体示例可以消除这种偶发复杂性和意外机会。例如，给定以下序列：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result of sorting is the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 排序的结果如下：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: No other answer will do. Accept no substitutes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 没有其他答案可行。不要接受任何替代品。
- en: 'Concrete examples helps to illustrate general behavior in an accessible and
    unambiguous way. The result of adding an item to an empty collection is not simply
    that it is not empty: It is that the collection now has a single item. And that
    the single item held is the item added. Two or more items would qualify as not
    empty. And would also be wrong. A single item of a different value would also
    be wrong. The result of adding a row to a table is not simply that the table is
    one row bigger. It also entails that the row''s key can be used to recover the
    row added. And so on.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 具体的例子有助于以一种易于理解和明确的方式说明一般行为。将项目添加到空集合中的结果不仅仅是它不是空的：它是集合现在有了一个单独的项目。而且所持有的单个项目就是添加的项目。两个或更多项目将被视为非空。并且也是错误的。一个不同值的单个项目也是错误的。向表中添加行的结果不仅仅是表增加了一行。它还意味着该行的键可以用于恢复添加的行。诸如此类。
- en: 'In specifying behavior, tests should not simply be accurate: They must also
    be precise.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在规定行为时，测试不应仅仅准确：它们还必须精确。
- en: By [Kevlin Henney](http://programmer.97things.oreilly.com/wiki/index.php/Kevlin_Henney)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[凯夫林·亨尼](http://programmer.97things.oreilly.com/wiki/index.php/Kevlin_Henney)'
