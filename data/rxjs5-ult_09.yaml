- en: Observable wrapping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Observable 封装
- en: Observable wrapping
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Observable 封装
- en: We have just learned in [Observable Anatomy](observable-anatomy.html) that the
    key operators `next()` , `error()` and `complete` is what makes our Observable
    tick, if we define it ourselves. We have also learned that these methods triggers
    a corresponding callback on our subscription.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚在[Observable 解剖](observable-anatomy.html)中学到，关键操作 `next()`、`error()` 和 `complete`
    是让我们的 Observable 运转的要素，如果我们自己定义了它。我们还学到了，这些方法会在我们的订阅中触发相应的回调。
- en: Wrapping something in an observable means we take something that is NOT an Observable
    and turn it into one, so it can play nice with other Observables. It also means
    that it can now use [Operators](operators.html).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将某物封装到 Observable 中意味着我们将一个不是 Observable 的东西转变为一个 Observable，这样它就可以与其他 Observables
    协同工作。这也意味着它现在可以使用[操作符](operators.html)。
- en: Wrapping an ajax call
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 封装一个 Ajax 调用
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Three things we need to do here `emit data`, `handle errors` and `close the
    stream`
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们需要做三件事情：`发射数据`、`处理错误` 和 `关闭流`
- en: Emit the data
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射数据
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Handle potential errors
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理可能的错误
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: and
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 并且
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Close the stream
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭流
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Wrapping a speech audio API
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 封装语音音频 API
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Speech recognition stream
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语音识别流
- en: This activates the microphone in the browser and records us
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这会激活浏览器中的麦克风并录制我们的声音
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This essentially sets up the speech recognition API. We wait for one response
    and after that we complete the stream, much like the first example with AJAX.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上设置了语音识别 API。我们等待一个响应，之后我们完成流，就像第一个例子中的 AJAX 一样。
- en: Note also that a function is defined for cleanup
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，为清理而定义了一个函数
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: so that we can call `speechRecognition.unsubscribe()` to clean up resources
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以调用 `speechRecognition.unsubscribe()` 来清理资源
- en: Speech synthesis utterance, say
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语音合成发声，say
- en: This is responsible for uttering what you want it to utter ( say ).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这负责发出你想要它发出的声音（say）。
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: main stream hey$
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主流 hey$
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Logic should be read as follows `heyClick$` is activated on a click on a button.
    `speechRecognition` is listening for what we say and sends that result into `heyClick$`
    where the switching logic determines an appropriate response that is uttered by
    `say` Observable.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑应该如下阅读 `heyClick$` 在按钮点击时被激活。`speechRecognition` 在监听我们说的话，并将结果发送到 `heyClick$`，其中切换逻辑确定了一个适当的响应，由
    `say` Observable 发出。
- en: all credit due to @ladyleet and @benlesh
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢 @ladyleet 和 @benlesh
- en: Summary
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'One easier Ajax wrapping and one a little more advanced Speech API has been
    wrapped into an Observable. The mechanics are still the same though: 1) where
    data is emitted, add a call to `next()` 2) if there is NO more data to emit call
    `complete` 3) if there is a need for it, define a function that can be called
    upon `unsubscribe()` 4) Handle errors through calling `.error()` in the appropriate
    place. (only done in the first example)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更简单的 Ajax 封装和一个稍微高级一点的 Speech API 已经被封装到一个 Observable 中。尽管机制仍然相同：1) 在数据被发射的地方，添加一个调用
    `next()` 的命令 2) 如果没有更多数据需要发射，调用 `complete` 3) 如果有需要，定义一个可以在 `unsubscribe()` 中调用的函数
    4) 通过在适当的位置调用 `.error()` 来处理错误。（仅在第一个示例中完成）
