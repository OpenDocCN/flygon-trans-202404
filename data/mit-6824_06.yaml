- en: Raft
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Raft
- en: '6.824 2015 Lecture 6: Raft'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.824 2015 讲座 6：Raft
- en: '**Note:** These lecture notes were slightly modified from the ones posted on
    the 6.824 [course website](http://nil.csail.mit.edu/6.824/2015/schedule.html)
    from Spring 2015.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**这些讲座笔记稍作修改，来自 Spring 2015 的 6.824 [课程网站](http://nil.csail.mit.edu/6.824/2015/schedule.html)上发布的笔记。'
- en: 'This lecture: Raft'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本讲座：Raft
- en: larger topic is fault tolerance via replicated state machines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更大的主题是通过复制的状态机实现容错性
- en: Raft -- a much more complete design than straight Paxos
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raft--比直接的 Paxos 设计更完整
- en: 'Raft overview:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Raft 概述：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Raft vs Paxos?
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Raft 与 Paxos 有何不同？
- en: 'Our use of Paxos:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 Paxos：
- en: agrees separately on each client operation
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对每个客户端操作分别达成一致意见
- en: 'Raft:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raft：
- en: agrees on each new leader (and on tail of log)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对每个新领导者（和日志尾部）都达成一致意见
- en: agreement not required for most client operations
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数客户端操作不需要协议
- en: Raft is Paxos optimized for log appends (more or less)
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raft 是为日志附加而优化的 Paxos（多多少少）
- en: why Raft-style leader?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要 Raft 风格的领导者？
- en: no *dueling proposers* (unless leader fails)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有*对决提议者*（除非领导者失败）
- en: leader just tells other people what to do
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领导者只告诉其他人要做什么
- en: fewer messages, less complexity (unless leader fails)
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较少的消息，较少的复杂性（除非领导者失败）
- en: well-defined notion of one log being more complete than another
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个日志比另一个日志更完整的明确定义的概念
- en: simplifies switching leaders (and maybe crash recovery)
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化了切换领导者（也许还有崩溃恢复）
- en: very hard to find a solution for this in Paxos because logs have "holes"
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Paxos 中很难找到这个解决方案，因为日志有“空洞”
- en: What about understandability?
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于可理解性呢？
- en: you must decide for yourself
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你必须自己决定
- en: straight Paxos is simpler than Raft
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接的 Paxos 比 Raft 更简单
- en: but straight Paxos is too simple for practical replication
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但直接的 Paxos 对于实际复制来说太简单了
- en: everyone extends it in their own way
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人都以自己的方式扩展它
- en: and ends up with something more or less like Raft
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并最终得到了更多或更少像 Raft 的东西
- en: Paxos+log+leader probably not simpler than Raft
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Paxos+日志+领导者可能不比 Raft 简单
- en: though presumably depends on which Paxos variant you choose
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然可能取决于您选择了哪个 Paxos 变体
- en: Is more direct use of Paxos (like Lab 3) ever a win?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 更直接地使用 Paxos（如实验室 3）是否曾经是一种成功？
- en: i.e. is a Raft-style leader ever a bad idea?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即 Raft 风格的领导者是否永远是一个坏主意？
- en: geographically spread peers
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理分布的对等体
- en: a single leader would be far from some clients
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个领导者离某些客户端很远
- en: some peers would be slow to other peers (Paxos tolerates lag)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些对等体会比其他对等体慢（Paxos 容忍滞后）
- en: Let's start w/ Raft w/ no leader change
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从没有领导变更的 Raft 开始
- en: for now, reliable leader
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前，可靠的领导者
- en: followers may be slow or unreachable (but they do not lose state)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟随者可能慢或无法访问（但它们不会丢失状态）
- en: what do we want?
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们想要什么？
- en: tolerate a *minority of failed followers*
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容忍*少数失败的跟随者*
- en: live followers and dead followers *converge on same log* since replication requires
    same order of execution
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 活跃的跟随者和死去的跟随者*在相同的日志上聚合*，因为复制需要相同的执行顺序
- en: '*execute only when entry cannot be lost* (committed) since cannot easily undo
    execution or reply to client'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*仅在无法丢失条目*（已提交）时执行，因为无法轻松撤消执行或回复客户端'
- en: 'idea for ensuring identical log:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保相同日志的想法：
- en: leader sends *log entry*, *index*, and info about *previous* entry
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领导者发送*日志条目*，*索引*和有关*上一个*条目的信息
- en: client can reject (e.g I don't have previous entry!)
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端可以拒绝（例如我没有上一个条目！）
- en: leader backs up for that follower, sends earlier entries
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领导者为该跟随者备份，发送较早的条目
- en: leader forces followers' logs to be identical to leader's
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领导者强制跟随者的日志与领导者的日志相同
- en: 'idea for execution:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行的想法：
- en: 'idea #1 means leader knows follower is identical up to some point'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思路＃1 表示领导者知道跟随者在某个时刻是相同的
- en: once a majority are identical up to a point,
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦大多数达到某一点相同，
- en: leader sends that out as commit point,
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领导者将其发送为提交点，
- en: everyone can execute through that point,
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人都可以通过那个点执行，
- en: leader can reply to clients
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领导者可以回复客户端
- en: What to do if the leader crashes?
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果领导者崩溃怎么办？
- en: other servers time out (no AppendEntries "heart-beats" for a while)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他服务器超时（一段时间没有 AppendEntries“心跳”）
- en: if other servers are missing heartbeats they start to suspect the leader is
    down
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果其他服务器丢失心跳，它们开始怀疑领导者是否已下降
- en: can't really know *for sure* leader is down/up on a network
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法真正确定网络上的领导者是下降/上升的
- en: choose a new leader!
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择新领导者！
- en: Raft divides time into terms
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raft 将时间划分为术语
- en: most terms have a leader
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数术语都有领导者
- en: What are the dangers in transition to a new leader?
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 切换到新领导者时存在哪些危险？
- en: two leaders
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个领导者
- en: no leader
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有领导者
- en: might forget an executed log entry
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会忘记已执行的日志条目
- en: logs might end up different (diverge)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志可能最终不同（分歧）
- en: Talk about leader election first, then log consistency at term boundary
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先讨论领导者选举，然后是术语边界的日志一致性
- en: How to ensure at most one leader in a term?
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何确保一个任期内最多只有一个领导者？
- en: (look at Figure 2, RequestVote RPC, and Rules for Servers)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （查看图2，RequestVote RPC和服务器规则）
- en: leader must get votes from a majority of servers
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领导者必须从大多数服务器获得投票
- en: '**Rule:** server can cast only one vote per term'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则：**服务器每个任期只能投一票'
- en: thus at most one server can think it has won
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此最多只有一个服务器可能认为自己赢了
- en: why a majority?
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么需要多数？
- en: the answer is always the same!
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 答案总是一样的！
- en: '"requiring a majority means not requiring a minority essentially"'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “要求多数意味着不要求少数”
- en: allows fault tolerance (failure of minority doesn't impede progress)
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许容错（少数失败不会阻碍进展）
- en: prevents split brain (at most one candidate can get a majority)
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止分裂大脑（最多只有一个候选人可以获得多数票）
- en: ensures overlap (at least one in majority has every previously committed log
    entry)
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保重叠（大多数中至少有一个拥有每个先前提交的日志条目）
- en: Could election fail to choose any leader?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 选举可能无法选择任何领导者吗？
- en: Yes!
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是的！
- en: '= 3 candidates split the vote evenly or even # of live servers, two candidates
    each get half'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
  zh: = 3个候选人平均分裂投票，或者甚至数量的活动服务器，两个候选人各获得一半
- en: What happens after an election in which no-one gets majority?
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果在一次选举中没有人获得多数票会发生什么？
- en: timeout, increment term, new election
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超时，增加任期，新选举
- en: when a server decides it might wants to be a candidate it first waits a random
    delay and only if it doesn't hear from anyone else then it becomes a candidate
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当服务器决定可能想成为候选人时，首先会等待一个随机延迟，只有在没有收到其他人的消息时才会成为候选人
- en: higher term takes precedence, candidates for older terms quit
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更高的任期优先，较旧任期的候选人退出
- en: 'Note: timeout must be longer than it takes to complete election!'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意：超时必须比完成选举所需的时间长！
- en: 'Note: this means some terms may have no leader, no log entries'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意：这意味着一些任期可能没有领导者，没有日志条目
- en: How does Raft reduce chances of election failure due to split vote?
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Raft如何减少由于分裂投票而导致选举失败的机会？
- en: each server delays a random amount of time before starting candidacy
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个服务器在开始候选人身份之前都会延迟一段随机时间
- en: why is the random delay useful?
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机延迟为什么有用？
- en: '[see diagram of times at which servers'' delays expire]'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查看服务器延迟到期时间的时间图]'
- en: one will choose lowest random delay
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个将选择最低随机延迟
- en: hopefully enough time to elect before next delay expires
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 希望在下一个延迟到期之前有足够的时间进行选举
- en: this idea comes up often in distributed systems
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个想法在分布式系统中经常出现
- en: 'Diagram:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图表：
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to choose the random delay range?
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何选择随机延迟范围？
- en: 'too short: 2nd candidate starts before first finishes'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 太短：第二个候选人在第一个候选人完成之前开始
- en: 'too long: system sits idle for too long after leader fails'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 太长：领导者失败后系统空闲太久
- en: 'a rough guide:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个大致的指导：
- en: suppose it takes 10ms to complete an unopposed election
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设完成无阻挡选举需要10ms
- en: and there are five servers
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且有五个服务器
- en: we want delays to be separated by (say) 20ms
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望延迟相隔（比如）20ms
- en: so random delay from 0 to 100 ms
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此随机延迟从0到100ms
- en: plus a few multiples of leader heartbeat interval
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再加上几个领导者心跳间隔的倍数
- en: Remember this random delay idea!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这个随机延迟的想法！
- en: it's a classic scheme for decentralized soft election; e.g. ethernet
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一种经典的分散式软选举方案；例如以太网
- en: 'Raft''s elections follow a common pattern: separation of safety from progress'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Raft的选举遵循一个常见模式：将安全性与进展分开
- en: '*Hard* mechanisms ensure `< 2` leaders in one term'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*硬*机制确保一个任期内 `< 2` 个领导者'
- en: 'Problem: elections can fail (e.g. 3-way split)'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题：选举可能失败（例如3路分裂）
- en: 'Solution: always safe to start a new election in a new term'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案：在新任期中始终启动新选举是安全的
- en: 'Poblem: repeated elections can prevent any work getting done'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题：重复的选举可能阻止任何工作的进行
- en: 'Solution: *soft* mechanisms reduce probability of wasted elections'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案：*软*机制降低浪费选举的概率
- en: heartbeat from leader (remind servers not to start election)
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自领导者的心跳（提醒服务器不要开始选举）
- en: timeout period (don't start election too soon)
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超时期限（不要太早开始选举）
- en: random delays (give one leader time to be elected)
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机延迟（给一个领导者时间来当选）
- en: '**Remember:** there''s a way to split the problem into "safety/correctness"
    concerns and "liveness/performance" concerns'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**记住：**有一种方法可以将问题分为“安全/正确性”和“活性/性能”两个方面'
- en: What if old leader isn't aware a new one is elected?
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果旧领导者不知道新领导者当选了怎么办？
- en: perhaps b/c old leader didn't see election messages
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能是因为旧领导者没有看到选举消息
- en: new leader means a majority of servers have incremented currentTerm
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新领导者意味着大多数服务器已经增加了currentTerm
- en: so old leader (w/ old term) can't get majority for AppendEntries
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此旧领导者（带有��任期）无法为AppendEntries获得多数票
- en: though a minority may accept old server's log entries...
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管少数可能接受旧服务器的日志条目...
- en: so logs may diverge at end of old term...
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，在旧任期结束时日志可能会分歧...
- en: Now let's switch topics to **data handling** at term boundaries
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转换话题到**数据处理**在任期边界
- en: What do we want to ensure?
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要确保什么？
- en: each server executes the same client cmds, in the same order
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个服务器按相同的顺序执行相同的客户端命令
- en: i.e. if any server executes, then no server executes something else for that
    log entry
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即如果任何服务器执行，则没有其他服务器为该日志条目执行其他操作
- en: as long as single leader, we've already seen it makes logs identical what about
    when leader changes?
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只要有单一的领导者，我们已经看到它使日志相同，当领导者改变时怎么办？
- en: What's the danger?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是危险？
- en: Leader of term 3 crashed while sending `AppendEntries`
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 第 3 任期的领导人在发送 `AppendEntries` 时崩溃
- en: '[PRE2]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: May be a series of crashes, e.g.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是一系列崩溃，例如
- en: '[PRE3]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Thus different entries for the same index!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因此相同索引的不同条目！
- en: Roll-back is a big hammer -- forces leader's log on everyone
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚是一个大锤子 -- 强制领导者的日志在所有人身上
- en: in above examples, whoever is elected imposes log on everyone
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在上述示例中，谁被选举谁就会强加日志给所有人
- en: 'Example:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：
- en: S3 is chosen as new leader for term 6
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3 被选为第 6 任期的新领导人
- en: S3 wants to send out a new entry (in term 6)
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3 想要发送一个新条目（在第 6 任期）
- en: '`AppendEntries` says previous entry must have term 5'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AppendEntries` 表示前一个条目必须有 term 5'
- en: S2 replies false (`AppendEntries` step 2)
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S2 回复 false（`AppendEntries` 步骤 2）
- en: S3 decrements `nextIndex[S2]`
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3 减少了 `nextIndex[S2]`
- en: S3 sends `AppendEntries` for the op w/ term=5, saying prev has term=3
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3 发送 `AppendEntries` 以 term=5 的操作，表示 prev 的 term=3
- en: S2 deletes op from term 4 (`AppendEntries` step 3) and replaces with op for
    term 5 from S3 (and S1 rejects b/c it doesn't have anything in that entry)
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S2 删除了来自 term 4 的操作（`AppendEntries` 步骤 3）并替换为来自 S3 的第 5 任期的操作（S1 拒绝了，因为它在该条目中没有任何内容）
- en: S2 sets op for term 6 as well
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S2 也为第 6 任期设置操作
- en: Ok, leader will force its own log on followers
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，领导人将强制其自己的日志传给追随者
- en: but that's not enough!
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但这还不够！
- en: can roll-back delete an executed entry?
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚能删除一个已执行的条目吗？
- en: When is a log entry executed?
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 何时执行日志条目？
- en: when leader advances `commitIndex/leaderCommit`
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当领导者推进 `commitIndex/leaderCommit` 时
- en: when a majority match the leader up through this point
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当多数人与领导者一直匹配到这一点时
- en: Could new leader roll back executed entries from end of previous term?
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 新领导人能否撤销上一任期末执行的条目？
- en: i.e. could an executed entry be missing from the new leader's log?
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即新领导人的日志中可能缺少已执行的条目吗？
- en: Raft needs to ensure new leader's log contains every potentially executed entry
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raft 需要确保新领导人的日志包含每个可能执行的条目
- en: i.e. must forbid election of server who might be missing an executed entry
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即必须禁止选举可能缺少已执行条目的服务器
- en: What are the election rules?
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 选举规则是什么？
- en: Figure 2 says only vote if candidate's log "at least as up to date"
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图 2 表示只有在候选人的日志“至少与最新”时才投票
- en: So leader will be *at least as up to date* as a majority
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，领导人将*至少与大多数一样更新*
- en: What does "at least as up to date" mean?
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: “至少与最新”是什么意思？
- en: 'Could it mean log is >= length? No, example:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否意味着日志的长度 >=？不，例如：
- en: '[PRE4]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: first, could this scenario happen? how?
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，这种情况可能发生吗？怎么样？
- en: S1 leader in epoch 6; crash+reboot; leader in epoch 7; crash and stay down
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S1 是第 6 时代的领导者；崩溃+重启；第 7 时代的领导者；崩溃并停留在原地
- en: both times it crashed after only appending to its own log
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两次它仅在追加到自己的日志后崩溃
- en: S2 leader in epoch 8, only S2+S3 alive, then crash
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S2 是第 8 时代的领导者，只有 S2 和 S3 存活，然后崩溃
- en: who should be next leader?
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁应该成为下一任领导人？
- en: S1 has longest log, but entry 8 is committed !!!
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S1 拥有最长的日志，但是条目 8 已经提交！！！
- en: Raft adopts leader's log, so S1 as leader -> un-commit entry 8
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raft 采用领导者的日志，因此 S1 作为领导者 -> 未提交的条目 8
- en: this would be incorrect since S2 may have replied to client
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这样做是不正确的，因为 S2 可能已经回复给客户端
- en: so new leader can only be one of S2 or S3
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此新领导人只能是 S2 或 S3 中的一个
- en: i.e. the rule cannot be simply "longest log"
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即规则不能简单地是“最长的日志”
- en: End of 5.4.1 explains "at least as up to date" voting rule
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 第 5.4.1 节的结尾解释了“至少与最新”投票规则
- en: compare last entry
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较最后一个条目
- en: higher term wins
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较高的任期胜出
- en: if equal terms, longer log wins
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果相等的话，更长的日志胜出
- en: 'So:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 所以：
- en: S1 can't get any vote from S2 or S3, since `7 < 8`
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S1 无法从 S2 或 S3 获得任何投票，因为 `7 < 8`
- en: S1 will vote for either S2 or S3, since `8 > 7`
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S1 将投票给 S2 或 S3，因为 `8 > 7`
- en: S1's operations from terms 6 and 7 will be discarded!
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S1 的来自第 6 和第 7 任期的操作将被丢弃！
- en: ok since no majority -> not executed -> no client reply
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 好的，因为没有多数 -> 没有执行 -> 没有客户端回复
- en: 'The point:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要点：
- en: '"at least as up to date" rule causes new leader to have all executed entries
    in its log'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “至少与最新”规则导致新领导人的日志包含其日志中的所有已执行条目
- en: so new leader won't roll back any executed operation
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此新领导人不会撤销任何已执行的操作
- en: 'similar to Paxos: new round ends up using chosen value (if any) of prev round'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似于 Paxos：新回合最终使用上一回合选择的值（如果有的话）
- en: 'The question: Figure 7, which of a/d/f could be elected?'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：图 7，a/d/f 中哪个可以被选举？
- en: i.e. majority of votes from "less up to date" servers?
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即来自“不那么最新”的服务器的大多数投票？
- en: The most subtle thing about Raft (figure 8)
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Raft最微妙的地方（图8）
- en: 'Figure 8:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图8：
- en: '[PRE5]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: not 100% true that a log entry on a majority is committed
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不是百分之百真实的，大多数上的日志条目被提交
- en: i.e. will never be forgotten
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即永远不会被遗忘
- en: 'Figure 8:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图8：
- en: S1 was leader in term 2, sends out two copies of 2
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S1在第2个任期中是领导者，发送了两份2的副本
- en: S5 leader in term 3
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S5在第3个任期中是领导者
- en: S1 leader in term 4, sends one more copy of 2 (b/c S3 rejected op 4)
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S1在第4个任期中是领导者，发送了2的另一份副本（因为S3拒绝了操作4）
- en: what if S5 now becomes leader?
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果S5现在成为领导者会怎样？
- en: S5 can get a majority (w/o S1)
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S5可以获得大多数（没有S1）
- en: S5 will roll back 2 and replace it with 3
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S5将回滚2并用3替换它
- en: could 2 have executed?
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2能执行吗？
- en: it is on a majority...
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在大多数上...
- en: so could S1 have mentioned it in leaderCommit after majority?
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所以S1在大多数之后是否可以在leaderCommit中提到它？
- en: no! very end of Figure 2 says "log[N].term == currentTerm"
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不是！图2的最后说"日志[N].term == currentTerm"
- en: and S1 was in term 4 when sending 3rd copy of 2
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当发送第3份2的副本时，S1在第4个任期
- en: what's Raft's actual commit point?
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raft的实际提交点是什么？
- en: bottom-right of page 310
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第310页右下角
- en: '"committed once the leader that created the entry has replicated on majority"'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"一旦创建条目的领导者在大多数上复制，就被提交"'
- en: and commit point of one entry commits all before it
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且一个条目的提交点提交所有在它之前的条目
- en: which is how 2 *could* have committed if S1 hadn't lost leadership
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这就是2 *如果* S1没有失去领导权时如何提交的方式
- en: 'Another topic: configuration change (Section 6)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个话题：配置更改（第6节）
- en: configuration = set of servers
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置=服务器集
- en: how does Raft change the set of servers?
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raft如何更改服务器集？
- en: e.g. every few years might want to retire some, add some
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，每隔几年可能想要退休一些，增加一些
- en: or move all at once to an entirely new set of server
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者一次性移动到一个全新的服务器集
- en: or increase/decrease the number of servers
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或增加/减少服务器数量
- en: How might a *broken* configuration change work?
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '*破损*配置更改会如何工作？'
- en: each server has the list of servers in the current config
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个服务器都有当前配置中的服务器列表
- en: change configuation by changing lists, one by one
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过逐一更改列表来更改配置
- en: 'example: want to replace S3 with S4'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：想要用S4替换S3
- en: 'S1: 1,2,3 1,2,4'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S1：1,2,3 1,2,4
- en: 'S2: 1,2,3 1,2,3'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S2：1,2,3 1,2,3
- en: 'S3: 1,2,3 1,2,3'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3：1,2,3 1,2,3
- en: 'S4: 1,2,4 1,2,4'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S4：1,2,4 1,2,4
- en: OOPS!
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 糟糕！
- en: 'now *two* disjoint group/leaders can form:'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在*两个*不相交的组/领导者可以形成：
- en: S2 and S3 (who know nothing of new config)
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S2和S3（不知道新配置）
- en: S1 and S4
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: S1和S4
- en: both can process client requests, so split brain
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者都可以处理客户端请求，所以分裂大脑
- en: Raft configuration change
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Raft配置更改
- en: '**Idea:** "join consensus" stage that includes *both* old and new configuration'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**想法：**包括*旧*和*新*配置的“加入共识”阶段'
- en: leader of old group logs entry that switches to joint consensus
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧组的领导者记录切换到联合共识的条目
- en: during joint consensus, leader separately logs in old and new
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在联合共识期间，领导者分别记录在旧和新中
- en: i.e. *two* log and *two* agreements on each log entry
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即每个日志和每个日志条目上的*两个*协议
- en: this will force new servers to catch up and force new and old logs to be the
    same
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将迫使新服务器赶上并迫使新旧日志相同
- en: after majority of old and new have switched to joint consensus,
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大多数旧和新的都切换到联合共识之后，
- en: leader logs entry that switches to final configuration
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领导者记录切换到最终配置的条目
- en: 'Example (which won''t make sense because it''s not properly illustrated in
    the original notes):'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 例子（因为原始笔记中没有正确说明，所以不会有意义）：
- en: '[PRE6]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: if crash but new leader didn't see the switch to joint consensus,
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果崩溃但新领导者没有看到切换到联合共识，
- en: then old group will continue, no switch, but that's OK
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后旧组将继续，没有切换，但没关系
- en: if crash and new leader did see the switch to joint consensus,
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果崩溃并且新领导者看到了切换到联合共识，
- en: it will complete the configuration change
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将完成配置更改
- en: Performance
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能
- en: no numbers on how fast it can process requests
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有关于它可以处理请求有多快的数字
- en: what are the bottlenecks likely to be?
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瓶颈可能是什么？
- en: 'disk:'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘：
- en: need to write disk for client data durability, and for protocol promises
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要为客户端数据的持久性写入磁盘，以及协议承诺
- en: write per client request? so 100 per second?
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个客户端请求写入？所以每秒100个？
- en: could probably batch and get 10,000 to 100,000
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能批量处理并获得10,000到100,000
- en: 'net: a few message exchanges per client request'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个客户端请求几次消息交换
- en: 10s of microseconds for local LAN message exchange?
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地LAN消息交换需要几十微秒？
- en: so 100,000 per second?
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所以每秒10万个？
- en: '*Next week:* use of a Raft-like protocol in a complex application'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '*下周：*在复杂应用中使用类似Raft的协议'
