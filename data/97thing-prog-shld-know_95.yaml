- en: Write Tests for People
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为人们编写测试
- en: Write Tests for People
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为人们编写测试
- en: You are writing automated tests for some or all of your production code. Congratulations!
    You are writing your tests before you write the code? Even better!! Just doing
    this makes you one of the early adopters on the leading edge of software engineering
    practice. But are you writing good tests? How can you tell? One way is to ask
    "Who am I writing the tests for?" If the answer is "For me, to save me the effort
    of fixing bugs" or "For the compiler, so they can be executed" then the odds are
    you aren't writing the best possible tests. So *who* should you be writing the
    tests for? For the person trying to understand your code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在为一些或全部生产代码编写自动化测试。恭喜！你是在编写代码之前写测试？更好！！仅仅这样做就让你成为了软件工程实践的领先者之一。但是你在写好的测试吗？你怎么知道呢？一个方法是问：“我在为谁写这些测试？”如果答案是“为我自己，以节省修复错误的工作量”或“为了编译器，以便它们能够执行”，那么你写的可能不是最好的测试。那么你应该为谁编写测试？为试图理解你的代码的人。
- en: 'Good tests act as documentation for the code they are testing. They describe
    how the code works. For each usage scenario the test(s):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的测试充当了它们测试的代码的文档。它们描述了代码的工作原理。对于每个使用场景，测试：
- en: Describe the context, starting point, or preconditions that must be satisfied
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述必须满足的上下文、起点或前置条件
- en: Illustrate how the software is invoked
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 说明软件如何调用
- en: Describe the expected results or postconditions to be verified
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述要验证的预期结果或后置条件
- en: Different usage scenarios will have slightly different versions of each of these.
    The person trying to understand your code should be able to look at a few tests
    and by comparing these three parts of the tests in question, be able to see what
    causes the software to behave differently. Each test should clearly illustrate
    the cause and effect relationship between these three parts. This implies that
    what isn't visible in the test is just as important as what is visible. Too much
    code in the test distracts the reader with unimportant trivia. Whenever possible
    hide such trivia behind meaningful method calls — the Extract Method refactoring
    is your best friend. And make sure you give each test a meaningful name that describes
    the particular usage scenario so the test reader doesn't have to reverse engineer
    each test to understand what the various scenarios are. Between them, the names
    of the test class and class method should include at least the starting point
    and how the software is being invoked. This allows the test coverage to be verified
    via a quick scan of the method names. It can also be useful to include the expected
    results in the test method names as long as this doesn't cause the names to be
    too long to see or read.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的使用场景会有稍微不同的这三种情况。试图理解你的代码的人应该能够查看几个测试，并通过比较这些问题测试的这三个部分，看到是什么导致软件的行为不同。每个测试应该清楚地说明这三个部分之间的因果关系。这意味着测试中看不见的部分和看得见的部分一样重要。测试中的太多代码会用不重要的琐事分散读者的注意力。尽可能地隐藏这种琐事在有意义的方法调用后面——提取方法重构是你最好的朋友。并确保为每个测试命名一个有意义的名称，描述特定的使用场景，这样测试读者就不必逆向工程每个测试来理解各种场景。在测试类和类方法的名称之间，应该包含起点和软件如何被调用的至少一部分。这允许通过快速扫描方法名称来验证测试覆盖率。在测试方法名称中包含预期结果也可能很有用，只要这不会导致名称太长而无法看到或阅读。
- en: It is also a good idea to test your tests. You can verify they detect the errors
    you think they detect by inserting those errors into the production code (your
    own private copy that you'll throw away, of course). Make sure they report errors
    in a helpful and meaningful way. You should also verify that your tests speak
    clearly to a person trying to understand your code. The only way to do this is
    to have someone who isn't familiar with your code read your tests and tell you
    what they learned. Listen carefully to what they say. If they didn't understand
    something clearly it probably isn't because they aren't very bright. It is more
    likely that you weren't very clear. (Go ahead and reverse the roles by reading
    their tests!)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 测试你的测试也是一个好主意。你可以通过将这些错误插入到生产代码中（当然是你自己的私人副本，你会扔掉的）。确保它们以一种有用和有意义的方式报告错误。你还应该验证你的测试是否清晰地传达给试图理解你的代码的人。唯一的方法就是让一个不熟悉你代码的人读你的测试并告诉你他们学到了什么。仔细听听他们说的话。如果他们对某些事情理解不清楚，那可能不是因为他们不够聪明。更有可能的是你表达不够清楚。（放心，通过阅读他们的测试来交换角色吧！）
- en: by [Gerard Meszaros](http://programmer.97things.oreilly.com/wiki/index.php/Gerard_Meszaros)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由[杰拉德·梅萨罗斯](http://programmer.97things.oreilly.com/wiki/index.php/Gerard_Meszaros)撰写
