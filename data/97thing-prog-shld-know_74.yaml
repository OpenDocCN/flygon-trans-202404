- en: The Road to Performance Is Littered with Dirty Code Bombs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通向性能之路上布满了脏代码炸弹
- en: The Road to Performance Is Littered with Dirty Code Bombs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通向性能之路上布满了脏代码炸弹
- en: More often than not, performance tuning a system requires you to alter code.
    When we need to alter code, every chunk that is overly complex or highly coupled
    is a dirty code bomb laying in wait to derail the effort. The first casualty of
    dirty code will be your schedule. If the way forward is smooth it will be easy
    to predict when you'll finish. Unexpected encounters with dirty code will make
    it very difficult to make a sane prediction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，性能调优系统需要您修改代码。 当我们需要修改代码时，每个过度复杂或高度耦合的块都是一个潜在的脏代码炸弹，等待着破坏努力。 脏代码的第一个受害者将是您的进度。
    如果前进的道路顺畅，您将很容易预测何时完成。 与脏代码的意外相遇将使得做出理智的预测非常困难。
- en: Consider the case where you find an execution hot spot. The normal course of
    action is to reduce the strength of the underlying algorithm. Let's say you respond
    to your manager's request for an estimate with an answer of 3-4 hours. As you
    apply the fix you quickly realize that you've broken a dependent part. Since closely
    related things are often necessarily coupled, this breakage is most likely expected
    and accounted for. But what happens if fixing that dependency results in other
    dependent parts breaking? Furthermore, the farther away the dependency is from
    the origin, the less likely you are to recognize it as such and account for it
    in your estimate. All of a sudden your 3-4 hour estimate can easily balloon to
    3-4 weeks. Often this unexpected inflation in the schedule happens 1 or 2 days
    at a time. It is not uncommon to see "quick" refactorings eventually taking several
    months to complete. In these instances, the damage to the credibility and political
    capital of the responsible team will range from severe to terminal. If only we
    had a tool to help us identify and measure this risk.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一种情况，即您发现了一个执行热点。 正常的操作是减少底层算法的强度。 假设您对经理的估计请求做出了3-4小时的回答。 当您应用修复时，您很快意识到您破坏了一个依赖部分。
    由于相关的事物通常必然耦合在一起，这种破坏很可能是预期的并已经考虑在内。 但是，如果修复该依赖性导致其他依赖部分破坏会发生什么？ 此外，依赖性距离原点越远，您就越不可能将其识别为这样的依赖性，并在您的估计中加以考虑。
    突然间，您的3-4小时估计很容易膨胀到3-4周。 通常，进度意外膨胀会一次或两次发生1天或2天。 "快速"重构最终需要几个月的时间完成并不罕见。 在这些情况下，负责团队的信誉和政治资本的损害程度将从严重到终结不等。
    要是我们有一个工具来帮助我们识别和衡量这种风险就好了。
- en: 'In fact, we have many ways of measuring and controlling the degree and depth
    of coupling and complexity of our code. Software metrics can be used to count
    the occurrences of specific features in our code. The values of these counts do
    correlate with code quality. Two of a number of metrics that measure coupling
    are fan-in and fan-out. Consider fan-out for classes: It is defined as the number
    of classes referenced either directly or indirectly from a class of interest.
    You can think of this as a count of all the classes that must be compiled before
    your class can be compiled. Fan-in, on the other hand, is a count of all classes
    that depend upon the class of interest. Knowing fan-out and fan-in we can calculate
    an instability factor using *I = f[o] / (f[i] + f[o])*. As *I* approaches 0, the
    package becomes more stable. As *I* approaches 1, the package becomes unstable.
    Packages that are stable are low risk targets for recoding whereas unstable packages
    are more likely to be filled with dirty code bombs. The goal in refactoring is
    to move *I* closer to 0.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们有许多方法来衡量和控制我们代码的耦合程度和复杂度。 软件度量可以用来计算我们代码中特定功能的发生次数。 这些计数的值与代码质量相关。 衡量耦合的许多度量中的两个是fan-in和fan-out。
    考虑fan-out用于类的情况：它被定义为从感兴趣的类直接或间接引用的类的数量。 您可以将其视为必须在编译您的类之前编译您的类的所有类的计数。 另一方面，fan-in是依赖于感兴趣类的所有类的计数。
    知道fan-out和fan-in，我们可以使用*I = f[o] / (f[i] + f[o])*来计算不稳定因子。 当*I*接近0时，包变得更加稳定。 当*I*接近1时，包变得不稳定。
    稳定的包是重新编码的低风险目标，而不稳定的包更有可能充满脏代码炸弹。 重构的目标是将*I*接近0。
- en: When using metrics one must remember that they are only rules of thumb. Purely
    on math we can see that increasing *f[i]* without changing fo will move *I* closer
    to 0\. There is, however, a downside to a very large fan-in value in that these
    class will be more difficult to alter without breaking dependents. Also, without
    addressing fan-out you're not really reducing your risks so some balance must
    be applied.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用度量标准时，必须记住它们只是经验法则。仅从数学上看，我们可以看到增加 *f[i]* 而不改变 fo 将使 *I* 接近于 0。然而，非常大的扇入值也有缺点，即这些类更难以在不破坏依赖关系的情况下修改。此外，如果不解决扇出问题，您实际上并没有减少风险，因此必须做出一些权衡。
- en: One downside to software metrics is that the huge array of numbers that metrics
    tools produce can be intimidating to the uninitiated. That said, software metrics
    can be a powerful tool in our fight for clean code. They can help us to identify
    and eliminate dirty code bombs before they are a serious risk to a performance
    tuning exercise.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 软件度量标准的一个缺点是，度量工具产生的大量数字可能会让未经训练的人望而生畏。尽管如此，软件度量标准可以成为我们追求优雅代码的强大工具。它们可以帮助我们在性能调优之前识别并消除脏代码炸弹，以免造成严重风险。
- en: By [Kirk Pepperdine](http://programmer.97things.oreilly.com/wiki/index.php/Kirk_Pepperdine)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者为[Kirk Pepperdine](http://programmer.97things.oreilly.com/wiki/index.php/Kirk_Pepperdine)
