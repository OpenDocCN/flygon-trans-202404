- en: アプリケーション開発の準備
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: アプリケーション開発の準備
- en: 原文：[https://jsprimer.net/use-case/setup-local-env/](https://jsprimer.net/use-case/setup-local-env/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/use-case/setup-local-env/](https://jsprimer.net/use-case/setup-local-env/)
- en: これまでに学んだJavaScriptの基本構文は、実行環境を問わずに使えるものです。 しかしこの後に続くユースケースの章では、具体的な実行環境としてウェブブラウザと[Node.js](https://nodejs.org/)の2つを扱います。
    また、ブラウザで実行するアプリケーションであっても、その開発にはツールとしてのNode.jsが欠かせません。 このセクションではユースケースの学習へ進むために必要なアプリケーション開発環境の準備をします。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: これまでに学んだJavaScriptの基本構文は、実行環境を問わずに使えるものです。 しかしこの後に続くユースケースの章では、具体的な実行環境としてウェブブラウザと[Node.js](https://nodejs.org/)の2つを扱います。
    また、ブラウザで実行するアプリケーションであっても、その開発にはツールとしてのNode.jsが欠かせません。 このセクションではユースケースの学習へ進むために必要なアプリケーション開発環境の準備をします。
- en: '[](#install-nodejs)*Node.jsのインストール*'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#install-nodejs)*Node.jsのインストール*'
- en: '*[Node.js](https://nodejs.org/)はサーバーサイドJavaScript実行環境のひとつで、次のような特徴があります。'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*[Node.js](https://nodejs.org/)はサーバーサイドJavaScript実行環境のひとつで、次のような特徴があります。'
- en: ウェブブラウザのChromeと同じ[V8](https://v8.dev/) JavaScriptエンジンで動作する
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ウェブブラウザのChromeと同じ[V8](https://v8.dev/) JavaScriptエンジンで動作する
- en: オープンソースで開発されている
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: オープンソースで開発されている
- en: OSを問わずクロスプラットフォームで動作する
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OSを問わずクロスプラットフォームで動作する
- en: Node.jsはサーバーサイドで使うために開発されました。 しかし今ではコマンドラインツールや[Electron](https://www.electronjs.org/)などのデスクトップアプリケーションにも利用されています。
    そのため、Node.jsはサーバーサイドに限らずクライアントサイドのJavaScript実行環境としても幅広く使われています。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Node.jsはサーバーサイドで使うために開発されました。 しかし今ではコマンドラインツールや[Electron](https://www.electronjs.org/)などのデスクトップアプリケーションにも利用されています。
    そのため、Node.jsはサーバーサイドに限らずクライアントサイドのJavaScript実行環境としても幅広く使われています。
- en: Node.jsは多くの他のプログラミング言語と同じように、実行環境をマシンにインストールすることで使用できます。 公式の[ダウンロードページ](https://nodejs.org/en/download/)から、開発用のマシンに合わせたインストーラをダウンロードして、インストールしましょう。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Node.jsは多くの他のプログラミング言語と同じように、実行環境をマシンにインストールすることで使用できます。 公式の[ダウンロードページ](https://nodejs.org/en/download/)から、開発用のマシンに合わせたインストーラをダウンロードして、インストールしましょう。
- en: 'ダウンロードページのURL: [https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ダウンロードページのURL: [https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
- en: Node.jsには**LTS（Long-Term Support）**版と最新版の2つのリリース版があります。 **LTS（Long-Term Support）**版は2年間のメンテナンスとサポートが宣言されたバージョンです。
    具体的には、後方互換性を壊さない範囲でのアップデートと、継続的なセキュリティパッチの提供が行われます。 一方で、最新版はNode.jsの最新の機能を使用できますが、常に最新のバージョンしかメンテナンスされません。
    ほとんどのユーザーは、LTS版を用いることが推奨されます。Node.jsでの開発が初めてであれば、迷わずにLTS版のインストーラをダウンロードしましょう。
    この章では執筆時点の最新LTS版であるバージョン20.11.1で動作するように開発します。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Node.jsには**LTS（Long-Term Support）**版と最新版の2つのリリース版が��ります。 **LTS（Long-Term Support）**版は2年間のメンテナンスとサポートが宣言されたバージョンです。
    具体的には、後方互換性を壊さない範囲でのアップデートと、継続的なセキュリティパッチの提供が行われます。 一方で、最新版はNode.jsの最新の機能を使用できますが、常に最新のバージョンしかメンテナンスされません。
    ほとんどのユーザーは、LTS版を用いることが推奨されます。Node.jsでの開発が初めてであれば、迷わずにLTS版のインストーラをダウンロードしましょう。
    この章では執筆時点の最新LTS版であるバージョン20.11.1で動作するように開発します。
- en: インストールが完了すると、コマンドラインで`node`コマンドが使用可能になっているはずです。 次のコマンドを実行して、インストールされたNode.jsのバージョンを確認しましょう
    （`$`はコマンドラインの入力欄を表す記号であるため、実際に入力する必要はありません）。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: インストールが完了すると、コマンドラインで`node`コマンドが使用可能になっているはずです。 次のコマンドを実行して、インストールされたNode.jsのバージョンを確認しましょう
    （`$`はコマンドラインの入力欄を表す記号であるため、実際に入力する必要はありません）。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: また、Node.jsには[npm](https://www.npmjs.com/)というパッケージマネージャーが同梱されています。 Node.jsをインストールすると、`node`コマンドだけでなくnpmを扱うための`npm`コマンドも使えるようになっています。
    次のコマンドを実行して、インストールされたnpmのバージョンを確認しましょう。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: また、Node.jsには[npm](https://www.npmjs.com/)というパッケージマネージャーが同梱されています。 Node.jsをインストールすると、`node`コマンドだけでなくnpmを扱うための`npm`コマンドも使えるようになっています。
    次のコマンドを実行して、インストールされたnpmのバージョンを確認しましょう。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Node.jsとnpmのバージョン番号は`{major}.{minor}.{patch}`という構成になっていて、先頭のメジャーバージョンが同じなら互換性は保証されています。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Node.jsとnpmのバージョン番号は`{major}.{minor}.{patch}`という構成になっていて、先頭のメジャーバージョンが同じなら互換性は保証されています。
- en: Node.jsのライブラリのほとんどはnpmを使ってインストールできます。 npmや`npm`コマンドについての詳細は[npmの公式ドキュメント](https://docs.npmjs.com/)や[npmのGitHubリポジトリ](https://github.com/npm/cli)を参照してください。
    実際に、ユースケースの章ではnpmを使ってライブラリをインストールして利用します。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Node.jsのライブラリのほとんどはnpmを使ってインストールできます。 npmや`npm`コマンドについての詳細は[npmの公式ドキュメント](https://docs.npmjs.com/)や[npmのGitHubリポジトリ](https://github.com/npm/cli)を参照してください。
    実際に、ユースケースの章ではnpmを使ってライブラリをインストールして利用します。
- en: '[](#npx-execution)*npxコマンドによるnpmパッケージの実行*'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#npx-execution)*npxコマンドによるnpmパッケージの実行*'
- en: '*Node.jsを使ったコマンドラインツールは数多く公開されており、npmでインストールすることによりコマンドとして実行できるようになります。 ところで、Node.jsのインストールにより、[npx](https://docs.npmjs.com/cli/v8/commands/npx/)というコマンドも使えるようになっています。
    `npx`コマンドを使うと、npmで公開されている実行可能なパッケージのインストールと実行をまとめてできます。 この後のユースケースでも`npx`コマンドでツールを利用するため、ここでツールの実行を試してみましょう。'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*Node.jsを使ったコマンドラインツールは数多く公開されており、npmでインストールすることによりコマンドとして実行できるようになります。 ところで、Node.jsのインストールにより、[npx](https://docs.npmjs.com/cli/v8/commands/npx/)というコマンドも使えるようになっています。
    `npx`コマンドを使うと、npmで公開されている実行可能なパッケージのインストールと実行をまとめてできます。 この後のユースケースでも`npx`コマンドでツールを利用するため、ここでツールの実行を試してみましょう。'
- en: ここでは例として[@js-primer/hello-world](https://github.com/js-primer/hello-world)というサンプル用のパッケージを実行します。
    `npx`コマンドでコマンドラインツールを実行するには、次のように `npx`コマンドにパッケージ名を渡して実行します。 npx 7から、初めて実行するコマンドは対話式のプロンプトでパッケージをインストールするかが確認されます。
    このプロンプトに対してEnterキーを押すとインストールが開始され、コマンドが実行されます。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ここでは例として[@js-primer/hello-world](https://github.com/js-primer/hello-world)というサンプル用のパッケージを実行します。
    `npx`コマンドでコマンドラインツールを実行するには、次のように `npx`コマンドにパッケージ名を渡して実行します。 npx 7から、初めて実行するコマンドは対話式のプロンプトでパッケージをインストールするかが確認されます。
    このプロンプトに対してEnterキーを押すとインストールが開始され、コマンドが実行されます。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: デフォルトでは対話式のプロンプトが挟まれますが、次のように`--yes`オプションを付与すると自動的にインストールとコマンドが実行されます。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: デフォルトでは対話式のプロンプトが挟まれますが、次のように`--yes`オプションを付与すると自動的にインストールとコマンドが実行され��す。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: このように、`npx`コマンドを使うことによりnpmで公開されているコマンドラインツールを簡単に実行できます。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: このように、`npx`コマンドを使うことによりnpmで公開されているコマンドラインツールを簡単に実行できます。
- en: '[](#command-line-tools-installation)*[コラム] コマンドラインツールのインストールと実行*'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#command-line-tools-installation)*[コラム] コマンドラインツールのインストールと実行*'
- en: '*npmで公開されているコマンドラインツールを実行する方法は`npx`コマンドだけではありません。 `npm install`コマンドを使ってパッケージをインストールし、インストールされたパッケージのコマンドを実行する方法があります。
    通常の`npm install`コマンドは実行したカレントディレクトリにパッケージをインストールしますが、`--global`フラグを加えるとパッケージをグローバルインストールします。
    グローバルインストールされたパッケージのコマンドは、`node`コマンドや`npm`コマンドと同じように、任意の場所から実行できます。'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*npmで公開されているコマンドラインツールを実行する方法は`npx`コマンドだけではありません。 `npm install`コマンドを使ってパッケージをインストールし、インストールされたパッケージのコマンドを実行する方法があります。
    通常の`npm install`コマンドは実行したカレントディレクトリにパッケージをインストールしますが、`--global`フラグを加えるとパッケージをグローバルインストールします。
    グローバルインストールされたパッケージのコマンドは、`node`コマンドや`npm`コマンドと同じように、任意の場所から実行できます。'
- en: 次の例では`@js-primer/hello-world`パッケージをグローバルインストールしています。 その後、パッケージに含まれている`js-primer-hello-world`コマンドを絶対パスの指定なしで呼び出しています。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例中，全局安装了`@js-primer/hello-world`包。 然后，调用包含的`js-primer-hello-world`命令而无需指定绝对路径。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[](#local-server)*ローカルサーバーのセットアップ*'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#local-server)*本地服务器的设置*'
- en: '*「[値の評価と表示](../../basic/read-eval-print/)」の章では、`index.html`と`index.js`というファイルを作成してブラウザで表示していました。
    このときローカルに作成したHTMLファイルをそのままブラウザで読み込むと、ブラウザのアドレスバーは`file:///`からはじまるURLになります。 `file`スキーマでは[Same
    Origin Policy](https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy)というセキュリティ的な制限により、多くの場面でアプリケーションは正しく動作しません。'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*在“[值的评估和显示](../../basic/read-eval-print/)”章节中，创建了名为`index.html`和`index.js`的文件并在浏览器中显���。
    当直接在浏览器中加载本地创建的HTML文件时，浏览器的地址栏将显示以`file:///`开头的URL。 使用`file`模式时，由于[同源策略](https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy)的安全限制，应用程序在许多情况下将无法正常运行。'
- en: これからユースケースの章で書いていくアプリケーションは、[Same Origin Policy](https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy)の制限を避けるために、`http`スキーマのURLでアクセスすることを前提としています。
    開発用のローカルサーバーを使うことで、ローカルに作成したHTMLファイルも`http`スキーマのURLで表示できます。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的用例章节中，我们将编写的应用程序为了避免[同源策略](https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy)的限制，假定使用`http`模式的URL进行访问。
    通过使用开发用的本地服务器，可以使用`http`模式的URL来显示在本地创建的HTML文件。
- en: ここでは、これからのユースケースで利用する開発用のローカルサーバーをセットアップする方法を見ていきます。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将看到如何设置用于开发的本地服务器。
- en: '[](#preparing-html)*HTMLファイルの用意*'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#preparing-html)*准备HTML文件*'
- en: '*まずは最低限の要素だけを配置したHTMLファイルを作成しましょう。 ここでは`index.html`というファイル名で作成し、HTMLファイル内には次のように記述しています。
    このHTMLファイルでは`script`要素を使って`index.js`というファイル名のJavaScriptファイルを読み込んでいます。'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，让我们创建一个只放置最基本元素的HTML文件。 在这里，我们创建了名为`index.html`的文件，并在HTML文件中编写如下内容。 在这个HTML文件中，使用`script`元素加载名为`index.js`的JavaScript文件。'
- en: index.html
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: index.html
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 同じように`index.js`というファイル名でJavaScriptファイルを作成します。 この`index.js`には、スクリプトが正しく読み込まれたことを確認できるよう、コンソールにログを出力する処理だけを書いておきます。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，创建名为`index.js`的JavaScript文件。 在这个`index.js`文件中，只需编写输出日志以确认脚本已正确加载的处理。
- en: index.js
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: index.js
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[](#open-js-primer-local-server)*ローカルサーバーを起動する*'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#open-js-primer-local-server)*启动本地服务器*'
- en: '*先ほど作成した`index.html`と同じディレクトリで、ローカルサーバーを起動します。 次のコマンドでは、[@js-primer/local-server](https://github.com/js-primer/local-server)というこの書籍用に作成されたローカルサーバーモジュールをダウンロードと同時に実行します。
    このローカルサーバーモジュールは、`http`スキーマのURLでローカルファイルへアクセスできるように、実行したディレクトリにあるファイルを配信する機能を持ちます。'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*在与刚刚创建的`index.html`相同的目录中，启动本地服务器。 使用以下命令，可以下载并执行为本书创建的本地服务器模块[@js-primer/local-server](https://github.com/js-primer/local-server)。
    该本地服务器模块具有提供在执行目录中的文件的功能，以便通过`http`模式的URL访问本地文件。'
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 起動したローカルサーバーのURL（`http://localhost:3000`）へブラウザでアクセスすると、先ほどの`index.html`の内容が表示されます。
    多くのサーバーでは、`http://localhost:3000`のようにファイルパスを指定せずにアクセスすると、`index.html`を配信する機能を持っています。
    `@js-primer/local-server`もこの機能を持つため、`http://localhost:3000`と`http://localhost:3000/index.html`のどちらのURLも同じ`index.html`を配信しています。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问启动的本地服务器的URL（`http://localhost:3000`）时，将显示先前的`index.html`内容。 在许多服务器中，如果不指定文件路径，例如`http://localhost:3000`，则会提供`index.html`。
    `@js-primer/local-server`也具有此功能，因此`http://localhost:3000`和`http://localhost:3000/index.html`两个URL都提供相同的`index.html`。
- en: '![ログが表示されているWebコンソール](../Images/060fab37fdefacc7581414049c4bbfae.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![显示日志的Web控制台](../Images/060fab37fdefacc7581414049c4bbfae.png)'
- en: '`index.html`にアクセスできたら、正しく`index.js`が読み込まれているかを確認してみましょう。 Console APIで出力したログを確認するには、ウェブブラウザの開発者ツールを開く必要があります。
    ほとんどのブラウザで開発者ツールが同梱されていますが、この書籍ではFirefoxを使って確認します。'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可以访问`index.html`，请检查`index.js`是否正确加载。 要查看通过Console API输出的日志，请打开浏览器的开发者工具。
    大多数浏览器都包含开发者工具，但本书中将使用Firefox进行演示。
- en: Firefoxの開発者ツールは次のいずれかの方法で開きます。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下任一方法打开Firefox的开发者工具。
- en: Firefox メニュー（メニューバーがある場合や macOS では、ツールメニュー）の "ブラウザーツール"のサブメニューから "ウェブ開発ツール"
    を選択する
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Firefox菜单（如果有菜单栏或在macOS上，从工具菜单）中选择“Web开发工具”子菜单中的“浏览器工具”
- en: キーボードショートカット Ctrl+Shift+K（macOS では Command+Option+K）を押下する
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下键盘快捷键Ctrl+Shift+K（在macOS上为Command+Option+K）
- en: 詳細は「[ブラウザーの開発者ツールとは？](https://developer.mozilla.org/ja/docs/Learn/Common_questions/What_are_browser_developer_tools)」を参照してください。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有关详细信息，请参阅“[浏览器的开发者工具是什么？](https://developer.mozilla.org/ja/docs/Learn/Common_questions/What_are_browser_developer_tools)”。
- en: '[](#close-js-primer-local-server)*ローカルサーバーを終了する*'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#close-js-primer-local-server)*关闭本地服务器*'
- en: '*最後に、起動したローカルサーバーを終了します。 ローカルサーバーを起動したコマンドラインで、`Ctrl+C`を押下することで終了できます。'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*最后，关闭启动的本地服务器。 可以通过在启动本地服务器的命令行中按下`Ctrl+C`来关闭。'
- en: 複数のローカルサーバーを同時に起動することもできますが、複数のサーバーで同じポート番号を利用することはできません。 ポートとは、先ほど起動したローカルサーバーのURLで`:3000`となっていた部分のことで、これは3000番ポートでローカルサーバーを起動したことを意味しています。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可以同时启动多个本地服务器，但不能在多个服务器上使用相同的端口号。 端口是指刚刚启动的本地服务器URL中的`:3000`部分，表示在3000端口上启动了本地服务器。
- en: '`@js-primer/local-server`は、デフォルトのポート（3000番ポート）がすでに使用されているなら、使われていないポートを探してローカルサーバーを起動します。また、`--port`オプションで任意のポート番号でローカルサーバーを起動できます。'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果默认端口（3000端口）已被占用，则`@js-primer/local-server`将查找未使用的端口并启动本地服务器。此外，可以使用`--port`选项在任意端口号上启动本地服务器。
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: この書籍では、`@js-primer/local-server`をデフォルトのポート番号である3000番ポートを利用する前提で進めていきます。 そのため、使わなくなったローカルサーバーは`Ctrl+C`で終了しておくことで、アクセスするURL（ポート番号）が書籍と同じ状態で進められます。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将在默认端口号3000上使用`@js-primer/local-server`进行操作。 因此，通过按下`Ctrl+C`关闭不再使用的本地服务器，可以确保可以继续使用与书中相同的URL（端口号）。
- en: '[](#conclusion)*まとめ*'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)*结论*'
- en: '*この章では、これからのユースケースの章で必要な環境を準備しました。'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中，我们准备好了接下来用例章节所需的环境。'
- en: Node.jsのLTS版をインストールした
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了Node.js的LTS版本
- en: npmとnpxでモジュールのインストールと実行をした
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用npm和npx安装和运行模块
- en: '`@js-primer/local-server`モジュールを使ってローカルサーバーを起動して終了した'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`@js-primer/local-server`模块启动并关闭了本地服务器
- en: npmでは、すでに多種多様なローカルサーバーモジュールが公開されています。 この書籍では、利用するローカルサーバーの機能で違いが出ないように`@js-primer/local-server`というこの書籍用のローカルサーバーモジュールを利用します。********
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: npm中已经有各种各样的本地服务器模块可供使用。本书将使用名为`@js-primer/local-server`的专用本地服务器模块，以确保所使用的本地服务器功能没有差异。
