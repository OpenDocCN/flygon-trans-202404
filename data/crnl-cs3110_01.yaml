- en: 'Recitation 1: Introduction to OCaml Syntax'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1次课：OCaml语法介绍
- en: We will use the Objective Caml (OCaml) programming language this semester. 
    OCaml is a functional language rather than an imperative language; the key difference
    between these two classes of languages is the *execution model*---the way in which
    programs are executed. *Imperative* (or *procedural*) languages, such as C and
    Java, are based on commands that change the state of the machine on which they
    execute.  For example, the assignment statement (in both C and Java) explicitly
    changes the value stored in some memory location.  *Functional* languages, in
    contrast, are based on evaluating expressions to produce values.  OCaml provides
    good ways to build correct, understandable, and large expressions.  The focus
    of this lecture is understanding expressions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本学期我们将使用Objective Caml（OCaml）编程语言。OCaml是一种函数式语言，而不是命令式语言；这两类语言之间的关键区别在于*执行模型*---程序执行的方式。*命令式*（或*过程式*）语言，如C和Java，基于改变执行机器状态的命令。例如，赋值语句（在C和Java中）明确地改变了某个内存位置存储的值。相比之下，*函数式*语言基于评估表达式以产生值。OCaml提供了构建正确、可理解和大型表达式的良好方法。本讲座的重点是理解表达式。
- en: 'For real applications, programming with expressions may seem like a stretch.
    After all, applications often do not "compute" anything; instead, they allow you
    to "do" something. Later in the course, we will introduce the notion of *side-effects*:
    evaluate **this**, and do **that** while you''re at it—e.g., evaluate an expression,
    and (as a side-effect) display a window on the screen. But for the moment, we
    will live in a *pure* world, one without side-effects.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实际应用，使用表达式进行编程可能看起来有些牵强。毕竟，应用通常不会“计算”任何东西；相反，它们让你可以“做”某事。在课程的后期，我们将介绍*副作用*的概念：在评估**这个**时，同时做**那个**—例如，评估一个表达式，并（作为副作用）在屏幕上显示一个窗口。但目前，我们将生活在一个*纯净*的世界中，一个没有副作用的世界。
- en: To start learning OCaml, you should begin playing with the OCaml language by
    writing toy expressions.  Like most programming languages, Ocaml has a compiler
    that can be run on source files to produce object files.  But to really understand
    expressions, there is a better way to interact with the OCaml compiler, called
    the *OCaml* *toplevel system*.  This system is something like a very fancy calculator---you
    interact with it by typing in an expression, and it responds by evaluating that
    expression and telling you the resulting value.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始学习OCaml，您应该通过编写玩具表达式来开始使用OCaml语言。与大多数编程语言一样，Ocaml有一个编译器，可以在源文件上运行以生成目标文件。但要真正理解表达式，有一种更好的与OCaml编译器交互的方法，称为*OCaml*
    *顶层系统*。这个系统有点像一个非常复杂的计算器---您通过键入表达式与它交互，它通过评估该表达式并告诉您结果值来回应。
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**IMPORTANT NOTE**: In previous semesters, this course has been taught in SML,
    a language very similar to OCaml. They share both a common origin and almost all
    of their syntax. For aid in understanding notes from previous years, you might
    wish to consult the [SML vs. OCaml](http://www.mpi-sws.mpg.de/~rossberg/sml-vs-ocaml.html)
    page, which provides a detailed list of the differences between the two.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**：在以前的学期中，这门课程是用SML教授的，这是一种与OCaml非常相似的语言。它们有共同的起源和几乎所有的语法。为了帮助理解以前年份的笔记，您可能希望查阅[SML
    vs. OCaml](http://www.mpi-sws.mpg.de/~rossberg/sml-vs-ocaml.html)页面，该页面提供了两者之间差异的详细列表。'
- en: If you notice any SML/OCaml discrepancies in the notes, please let us know.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在笔记中注意到任何SML/OCaml的差异，请告诉我们。
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Starting the OCaml toplevel system. ** The course [resource](../../resources.php)
    page has instructions for installing OCaml. Once you have OCaml properly installed,
    you will be able to start an interactive session by typing `ocaml` at the terminal
    (i.e., a Unix shell or Windows console). (The 3110 VM has an enhanced version
    of `ocaml` called `utop` installed.) You will get a *top level prompt* "#", which
    indicates that the compiler is ready to accept expressions and evaluate them. 
    To exit the toplevel system, enter the end-of-file character for your platform
    (Ctrl-D on Unix, Ctrl-Z + Return on Windows).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**启动OCaml顶层系统。** 课程[资源](../../resources.php)页面上有安装OCaml的说明。安装好OCaml后，您可以通过在终端（即Unix
    shell或Windows控制台）中键入`ocaml`来启动交互式会话。（3110虚拟机上安装了名为`utop`的增强版本的`ocaml`。）您将获得一个*顶层提示符*“#”，表示编译器已准备好接受表达式并评估它们。要退出顶层系统，请输入您平台的文件结束字符（Unix上为Ctrl-D，Windows上为Ctrl-Z
    + Return）。'
- en: '**Using the** **OCaml toplevel system.**  Type in an expression (possibly on
    multiple lines, which after the first line will have a secondary prompt "="),
    then type `;;` and press Return. Note that the `;;` is not part of the expression
    to be evaluated. It is simply an indication to the compiler that you have finished
    typing in the expression and that you are ready to evaluate. Before evaluating
    the expression, the compiler will type check it.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 OCaml 顶层系统。** 输入一个表达式（可能跨多行，之后第一行之后将有一个次级提示符“=”），然后键入 `;;` 并按 Enter 键。注意，`;;`
    不是要评估的表达式的一部分。它只是向编译器指示你已经完成了输入表达式的工作，并且你已经准备好进行评估。在评估表达式之前，编译器将对其进行类型检查。'
- en: '**TIP**: The toplevel system is very picky about some things when reading input,
    and will accept a request to exit only if it is sitting exactly at the top level
    prompt—i.e. if nothing else has been already typed in. When in doubt (especially
    if input seems to be behaving strangely), press Ctrl-C to interrupt and reset
    the prompt to a sane state.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**：顶层系统在读取输入时对某些事情非常挑剔，只有当它确切地位于顶层提示符处时才会接受退出请求——即，如果没有其他内容已经输入。当存在疑问时（特别是如果输入似乎表现得很奇怪），按下
    Ctrl-C 以中断并将提示重置为正常状态可能是有用的。'
- en: '**TIP**: It can be useful to put expressions into a file so that you''re not
    stuck entering them over and over again at the prompt. Just use an editor to edit
    a file, and you can load it into OCaml with the operation `#use "file";;` which
    behaves as though the expressions have been entered at the top level prompt (don''t
    forget the semicolons!). The big question is where should the file be stored.
    Operation `#use` by default looks for files in the current working directory. 
    To change the current working directory, use the operation `#cd "*path*";;` where
    *path* is the path where you want to go to. To add a directory to the list of
    directories that OCaml looks for files in, use the operation `#directory "*path*";;`.
    Use the Unix convention (even on Windows): the path separator is "/".'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**：将表达式放入文件中可能会很有用，这样你就不必一遍又一遍地输入它们。只需使用编辑器编辑文件，然后你就可以使用操作 `#use "file";;`
    将其加载到 OCaml 中，该操作的行为就好像这些表达式已经输入到了顶层提示符（别忘了分号！）。关键问题是文件应该存储在哪里。操作 `#use` 默认在当前工作目录中查找文件。要更改当前工作目录，请使用操作
    `#cd "*path*";;` 其中 *path* 是你想要进入的路径。要将目录添加到 OCaml 查找文件的目录列表中，请使用操作 `#directory
    "*path*";;`。使用 Unix 约定（即使在 Windows 上）：路径分隔符是“/”。'
- en: '**TIP**: Even more details on the toplevel system can be found at [the OCaml
    manual page on it](http://caml.inria.fr/pub/docs/manual-ocaml/toplevel.html).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**：更多关于顶层系统的详细信息可以在[OCaml 手册页面](http://caml.inria.fr/pub/docs/manual-ocaml/toplevel.html)找到。'
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Basic Expressions and Types
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本表达式和类型
- en: 'Expressions evaluate to *values*. Values can be classified according to their
    type:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式求值为 *值*。值可以根据其类型进行分类：
- en: '| Type | Example values |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 示例值 |'
- en: '| int | `0`,`1`,`2`,`-1`,`-2` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 整数 | `0`，`1`，`2`，`-1`，`-2` |'
- en: '| bool | `true`, `false` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 布尔 | `true`，`false` |'
- en: '| float | `3.141592, 1.618034` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 浮点数 | `3.141592, 1.618034` |'
- en: '| string | `"Hello world!","xyzzy"` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | `"Hello world!"，"xyzzy"` |'
- en: '| char | `''A'',''Z''` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 字符 | `''A'',''Z''` |'
- en: 'Let us start looking at simple expressions, with the following syntax:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始看一下简单表达式，具体语法如下：
- en: '*e* ::= *c*  |  *unop**e*  |  *e1**binop**e2*  |  if*e1*then*e2*else*e3*  | 
    (*e*)'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*e* ::= *c*  |  *unop**e*  |  *e1**binop**e2*  |  if*e1*then*e2*else*e3*  | 
    (*e*)'
- en: where *c* are constants (the values described above), *unop* are unary operations,
    *binop* are binary operations.  We expressed this syntax using *Backus-Naur Form*
    (BNF), a common notation for the grammar of computer languages.  **NOTE TO INSTRUCTOR:**
    The BNF for expressions, and later for declarations, should be put on one side
    of the board, and kept there as we will be adding expression types and declaration
    types as the section proceeds.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *c* 是常量（上述值描述的值），*unop* 是一元操作，*binop* 是二元操作。我们使用 *巴科斯-诺尔* 形式（BNF），一种计算机语言语法的常见符号，来表示这个语法。**注意给教师：**表达式的
    BNF，以及后来的声明的 BNF，应该放在黑板的一侧，并且在本节进行时应该一直保留在那里，因为我们将随着本节的进行添加表达式类型和声明类型。
- en: 'Unary operators include:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一元操作符包括：
- en: '| Operator | Meaning |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 操作符 | 含义 |'
- en: '| `-` | take an int (or a float) and return its negation |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `-` | 取一个 int（或一个 float）并返回其负值 |'
- en: '| `not` | take a bool and return its negation |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `not` | 取一个布尔值并返回其否定 |'
- en: 'Binary operators include:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 二元操作符包括：
- en: '| Operator | Meaning |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 操作符 | 含义 |'
- en: '| `+`,`-`,`*`, `/` | take two ints and return their sum, difference, product,
    or quotient |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `+`,`-`,`*`, `/` | 取两个整数并返回它们的和、差、积或商 |'
- en: '| `+.`,`-.`,`*.`, `/.` | take two floats and return their sum, difference,
    product, or quotient |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `+.`,`-.`,`*.`, `/.` | 接受两个浮点数并返回它们的和、差、积或商 |'
- en: '| `mod` | take two ints and return their integer remainder |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `mod` | 接受两个整数并返回它们的整数余数 |'
- en: '| `>`,`>=`,`<`,`<=` | take two ints (or two floats) and return their comparison
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `>`,`>=`,`<`,`<=` | 接受两个整数（或两个浮点数）并返回它们的比较结果 |'
- en: '| `=` | take two values and return whether they are equal |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `=` | 接受两个值并返回它们是否相等 |'
- en: '| `^` | take two strings and return their concatenation into a new string |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `^` | 接受两个字符串并返回它们的连接成一个新字符串 |'
- en: 'Expressions are transformed into values by the application of *evaluation rules*. 
    The evaluation rules for simple expressions are:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式通过*求值规则*转换为值。简单表达式的求值规则为：
- en: Constants are already values.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常量已经是值了。
- en: Unary and binary operators first evaluate their arguments to values, and then
    perform the operation.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一元和二元运算符首先将它们的参数求值为值，然后执行操作。
- en: 'A conditional if *e1* then *e2* else *e3* evaluates *e1* to a vallue (of type
    bool): if it is `true`, *e2* is evaluated, if it is `false`, *e3* is evaluated.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件语句 if *e1* then *e2* else *e3* 将 *e1* 评估为一个值（类型为 bool）：如果它是 `true`，则评估 *e2*，如果它是
    `false`，则评估 *e3*。
- en: Evaluation of operators only makes sense if the types of the operands agree. 
    For example, the `+` operator is defined if both operands are integers, but adding
    an integer to a boolean is meaningless.  So type checking is performed to ensure
    that expressions are meaningful, and this requires giving a type to every expression. 
    How does OCaml determine the type of an expression?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当操作数的类型一致时，操作符的求值才有意义。例如，`+` 操作符在两个操作数都是整数时被定义，但是将整数加到布尔值上是没有意义的。因此，进行类型检查以确保表达式有意义，这需要给每个表达式指定一个类型。OCaml
    如何确定表达式的类型？
- en: 'Every constant has a type (`42` has type `int`, `true` has type `bool`, etc). 
    Operators also have types (which we gave informally above); in OCaml syntax, these
    types are as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每个常量都有一个类型（`42` 的类型为 `int`，`true` 的类型为 `bool`，等等）。运算符也有类型（我们以上给出的是非正式的）；在 OCaml
    语法中，这些类型如下：
- en: '[PRE0]'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Every operator specifies the types of values it takes and the type of the value
    it returns. The addition operator `+` takes an `int`, another `int`, then returns
    an `int`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每个操作符都指定它接受的值的类型以及它返回的值的类型。加法操作符 `+` 接受一个 `int`，另一个 `int`，然后返回一个 `int`。
- en: 'Now we can give rules for determining the types of expressions.  The principle
    embodied in these rules is:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以给出确定表达式类型的规则。这些规则体现的原则是：
- en: '**The type of an expression is always the type of its result.**'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**表达式的类型总是其结果的类型。**'
- en: For expression *unop* *e*, if *e* has type *t1* and *unop* has type *t1* `->`
    *t2*, then *unop* *e* has type *t2*.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于表达式 *unop* *e*，如果 *e* 的类型为 *t1*，并且 *unop* 的类型为 *t1* `->` *t2*，那么 *unop* *e*
    的类型为 *t2*。
- en: For expression *e1* *binop* *e2*, if *e1* has type *t1*, and *e2* has type *t2*,
    and *binop* has type *t1* `->` *t2* `->` *t3*, then *e1* *binop* *e2* has type
    *t3*.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于表达式 *e1* *binop* *e2*，如果 *e1* 的类型为 *t1*，并且 *e2* 的类型为 *t2*，并且 *binop* 的类型为
    *t1* `->` *t2* `->` *t3*，那么 *e1* *binop* *e2* 的类型为 *t3*。
- en: For conditional if *e1* then *e2* else *e3*, if *e1* has type `bool`, and if
    *e2* and *e3* both have the same type *t*, then the conditional itself has type
    *t*.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于条件语句 if *e1* then *e2* else *e3*，如果 *e1* 的类型为 `bool`，并且 *e2* 和 *e3* 都具有相同的类型
    *t*，那么条件语句本身的类型为 *t*。
- en: Why must *e2* and *e3* have the same type? From the compiler's point of view,
    either branch could be taken. If the then branch is taken, the resulting value
    will have the same type as *e2*.  Similarly, the else branch produces a value
    of the same type as *e3*.  So the type of the conditional must somehow generalize
    the types of *e2* and *e3*.  A safe way to guarantee that this is possible is
    to require that both branches return the same type.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么 *e2* 和 *e3* 必须具有相同的类型？从编译器的角度来看，任一分支都可能被执行。如果执行 then 分支，则结果值的类型将与 *e2* 的类型相同。同样，else
    分支产生的值与 *e3* 的类型相同。因此，条件语句的类型必须以某种方式概括 *e2* 和 *e3* 的类型。确保这种可能性的一种安全方式是要求两个分支返回相同的类型。
- en: If the conditions in these rules are not satisfied by an expression, then it
    is not possible to give a type to that expression.  It does not type check, and
    the compiler rejects it as a program. This prevents the evaluation of meaningless
    expressions.  It is important to do so, because such programming errors could
    otherwise cause run-time errors.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表达式不满足这些规则中的条件，则无法为该表达式指定类型。它不会通过类型检查，编译器会将其拒绝作为程序。这可以防止对无意义表达式的求值。这样做很重要，因为这种编程错误可能会导致运行时错误。
- en: Declarations
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明
- en: Values can be given names. This is not a form of expression, but rather an indication
    to the compiler that you are *declaring* a new name.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 值可以被命名。这不是一种表达形式，而是向编译器指示您正在*声明*一个新名称。
- en: '*d* ::= let*id* = *e*'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*d* ::= let*id* = *e*'
- en: 'For example, let `pi = 3.141592` is a declaration.  A declaration indicates
    to the compiler to evaluate expression *e*, produce a value, and *bind* that value
    to the name *id*. In subsequent expressions, *id* can be used to refer to that
    value. We therefore extend our syntax for expressions with:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让`pi = 3.141592`是一个声明。声明告诉编译器评估表达式*e*，生成一个值，并将该值*绑定*到名称*id*。在后续表达式中，*id*可以用来引用该值。因此，我们扩展了表达式的语法：
- en: '*e* ::= ...  |  *id*'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*e* ::= ...  |  *id*'
- en: Evaluating *id* means to lookup what value it is bound to. The type of *id*
    is the type of the value which it is bound to.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 评估*id*意味着查找它绑定的值是什么。*id*的类型是它绑定的值的类型。
- en: Declarations last until another declaration of the same name is encountered
    (which *shadows*—that is, replaces—the previous declaration). We can also introduce
    local declarations that last only for the evaluation of an expression.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 声明持续到遇到同名的另一个声明（*遮蔽*—即替换—先前的声明）。我们还可以引入仅在表达式评估期间持续的局部声明。
- en: '*e* ::= ...  |  let *d*in*e*'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*e* ::= ...  |  let *d*in*e*'
- en: To evaluate a let expression, declaration *d* is evaluated, then *e* is evaluated,
    taking the binding from the declaration into account.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要评估let表达式，首先评估声明*d*，然后评估*e*，考虑声明中的绑定。
- en: '**QUESTION**: what is the type of let*d*in*e* ?  Answer:  The type of *e*,
    since the type of an expression is the type of the result.'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**问题**：let*d*in*e*的类型是什么？答案：*e*的类型，因为表达式的类型是结果的类型。'
- en: 'At this point, we can write large expressions, but we can''t easily reuse expressions.
    Thus, we introduce functions. A function declaration is a new form of declaration:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以编写大型表达式，但不能轻松地重用表达式。因此，我们引入函数。函数声明是一种新的声明形式：
- en: '*d* ::= ...  | let *id* ((*x1*:*t1*), ..., (*xn*:*tn*)):*t* = *e*'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*d* ::= ...  | let *id* ((*x1*:*t1*), ..., (*xn*:*tn*)):*t* = *e*'
- en: 'In this new form of declaration, *e* is called the *body* of function *id*. 
    For example, `let square (x:int) : int = x * x` is a function definition, and
    its body is `x * x`.  Functions have types that are similar to the types of operators. 
    For example, the type of `square` is `int -> int`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '在这种新形式的声明中，*e*被称为函数*id*的*主体*。例如，`let square (x:int) : int = x * x`是一个函数定义，其主体是`x
    * x`。函数的类型类似于运算符的类型。例如，`square`的类型是`int -> int`。'
- en: 'Here''s an example of a function with two arguments:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个带有两个参数的函数示例：
- en: '[PRE1]'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Its type is `(int * int) -> int`. The argument types are separated by `*`. Note
    that, in this syntax, `*` does not mean integer multiplication.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 其类型是`(int * int) -> int`。参数类型由`*`分隔。请注意，在此语法中，`*`不表示整数乘法。
- en: '**TIP**: It is not strictly necessary to annotate functions with types. Most
    of the time, OCaml can infer the type of a function from its definition. For example,
    we could rewrite `max2` as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**：不一定需要为函数注释类型。大多数情况下，OCaml可以从函数的定义中推断出函数的类型。例如，我们可以将`max2`重写如下：'
- en: '[PRE2]'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that we don''t have to write the inner parentheses around the arguments,
    since we are leaving out their type annotations. The type that OCaml infers for
    `max2` now becomes rather mysterious: `''a * ''a -> ''a`. For now, think of the
    `''a` as meaning "any type". Since `int` is an example of any type, we can still
    use `max2` on `int`s.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不必在参数周围写内部括号，因为我们省略了它们的类型注释。OCaml为`max2`推断的类型现在变得相当神秘：`'a * 'a -> 'a`。暂时将`'a`视为表示“任何类型”。由于`int`是任何类型的一个示例，我们仍然可以在`int`上使用`max2`。
- en: '**PITFALL**: As you will quickly notice, it can be extremely hard to debug
    a program that does not typecheck.  It is very difficult to figure out why the
    compiler inferred **this** type for **that** expression.  Solution:  use type
    annotations to catch type errors!'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**陷阱**：正如您很快会注意到的，调试一个无法通过类型检查的程序可能非常困难。很难弄清楚为什么编译器为**那个**表达式推断出**这个**类型。解决方法：使用类型注释来捕捉类型错误！'
- en: '**ÜBER-TIP**: It is very good practice always to annotate functions with types. 
    We will generally require you to do this in programming assignments.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**超级提示**：始终为函数注释类型是非常好的做法。我们通常要求您在编程作业中这样做。'
- en: 'We could even have a function with three arguments:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以有一个带有三个参数的函数：
- en: '[PRE3]'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Its type is `(int * int * int) -> int`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 其类型是`(int * int * int) -> int`。
- en: You might wonder why the types of built-in operators that take two arguments,
    such as `+`, don't look quite the same as the type of `max2`. We'll discuss the
    reason for this later (about two lectures from now).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道为什么接受两个参数的内置运算符的类型，比如`+`，看起来和`max2`的类型不太一样。我们稍后会讨论这个原因（大约两节课后）。
- en: 'For recursive functions, it is necessary to use let rec:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于递归函数，需要使用`let rec`：
- en: '*d* ::= ...  | let rec *id* ((*x1*:*t1*), ..., (*xn*:*tn*)):*t* = *e*'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*d* ::= ...  | `let rec *id* ((*x1*:*t1*), ..., (*xn*:*tn*)):*t* = *e*'
- en: This is the same as normal function declarations, but any uses of *id* inside
    the function body will be bound to the value of the function itself.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这与普通函数声明相同，但在函数体内使用的任何 *id* 都将绑定到函数本身的值。
- en: 'How do we use functions? We introduce a new expression called *function application*:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何使用函数？我们引入一个新的表达式称为 *函数应用*：
- en: '*e* ::= ...  |  *id* (*e1*,...,*em*)'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*e* ::= ...  |  *id* (*e1*,...,*em*)'
- en: 'How do we type check a function application *f* (*e1*,...,*em*)?  As follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何对函数应用 *f* (*e1*,...,*em*) 进行类型检查？如下所示：
- en: If *f* has type (*t1* * ... * *tn*) `->` *t*, and
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 *f* 的类型是 (*t1* * ... * *tn*) `->` *t*，并且
- en: If the number of arguments supplied to the function is the same as the number
    of arguments the function expects, meaning *m* equals *n*, and
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果传递给函数的参数数量与函数期望的参数数量相同，即 *m* 等于 *n*，并且
- en: If *e1* has type *t1*, and *e2* has type *t2*, and ... *en* has type *tn*,
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 *e1* 的类型是 *t1*，*e2* 的类型是 *t2*，依此类推，*en* 的类型是 *tn*，
- en: Then *f* (*e1*,...,*em*) has type *t*.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 那么 *f* (*e1*,...,*em*) 的类型是 *t*。
- en: So `square (10)` type checks, but `square (true)` does not.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因此 `square (10)` 类型检查通过，但 `square (true)` 不通过。
- en: How is function application *f* (*e1*,...,*em*) evaluated? Evaluate *e1*,...,*em*
    to values *v1*,...,*vm*, then evaluate the body of *f* with *x1* bound to *v1*,
    ..., *xm* bound to *vm*.  So `square (10+10) --> square (20) --> 20*20 --> 400`.
    We'll see many more details on evaluation in a week. For now, we just want to
    give you an intuition about the simple cases.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如何评估函数应用 *f* (*e1*,...,*em*)？评估 *e1*,...,*em* 到值 *v1*,...,*vm*，然后用 *x1* 绑定到
    *v1*，...，*xm* 绑定到 *vm* 来评估 *f* 的主体。所以 `square (10+10) --> square (20) --> 20*20
    --> 400`。一周后我们会看到更多关于评估的细节。现在，我们只想给你一个关于简单情况的直觉。
- en: 'Function bindings can be used within a let expression to obtain a local function
    (like Pascal, unlike C).  For example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 函数绑定可以在 let 表达式中使用，以获得一个局部函数（类似于 Pascal，不同于 C）。例如：
- en: '[PRE4]'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
