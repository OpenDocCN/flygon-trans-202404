- en: 2Everything (We Will Say) About Parsing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2关于解析的一切（我们将说）
- en: Parsing is the act of turning an input character stream into a more structured,
    internal representation. A common internal representation is as a tree, which
    programs can recursively process. For instance, given the stream
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 解析是将输入字符流转换为更结构化的内部表示的行为。一个常见的内部表示是树，程序可以递归处理。例如，给定流
- en: '| 23 + 5 - 6 |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| 23 + 5 - 6 |'
- en: we might want a tree representing addition whose left node represents the number
    23 and whose right node represents subtraction of 6 from 5. A parser is responsible
    for performing this transformation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能想要一个代表加法的树，其左节点代表数字 23，右节点代表从 5 减去 6。解析器负责执行这个转换。
- en: Parsing is a large, complex problem that is far from solved due to the difficulties
    of ambiguity. For instance, an alternate parse tree for the above input expression
    might put subtraction at the top and addition below it. We might also want to
    consider whether this addition operation is commutative and hence whether the
    order of arguments can be switched. Everything only gets much, much worse when
    we get to full-fledged programming languages (to say nothing of natural languages).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 解析是一个庞大而复杂的问题，由于歧义的困难，远未解决。例如，对于上述输入表达式，一个替代的解析树可能将减法放在顶部，加法放在其下方。我们还可能考虑这个加法操作是否可交换，因此参数的顺序是否可以交换。当我们涉及到完整的编程语言时（更不用说自然语言了），一切都变得更加糟糕。
- en: 2.1A Lightweight, Built-In First Half of a Parser
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1一个轻量级、内置的解析器的前半部分
- en: 'These problems make parsing a worthy topic in its own right, and entire books,
    tools, and courses are devoted to it. However, from our perspective parsing is
    mostly a distraction, because we want to study the parts of programming languages
    that are not parsing. We will therefore exploit a handy feature of Racket to manage
    the transformation of input streams into trees: read. read is tied to the parenthetical
    form of the language, in that it parses fully (and hence unambiguously) parenthesized
    terms into a built-in tree form. For instance, running (read) on the parenthesized
    form of the above input—<wbr>'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题使得解析成为一个值得研究的主题，整本书、工具和课程都致力于此。然而，从我们的角度来看，解析大多数时候只是一个干扰，因为我们想要研究的是编程语言中不是解析的部分。因此，我们将利用
    Racket 的一个方便功能来管理将输入流转换为树的过程：read。read 与语言的括号形式相关联，它完全解析（因此无歧义地）括号化的术语为内置的树形式。例如，在上述输入的括号形式上运行（read）—
- en: '| (+ 23 (- 5 6)) |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| (+ 23 (- 5 6)) |'
- en: —<wbr>will produce a list, whose first element is the symbol ’+, second element
    is the number 23, and third element is a list; this list’s first element is the
    symbol ’-, second element is the number 5, and third element is the number 6.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: —将产生一个列表，其第一个元素是符号'+', 第二个元素是数字 23，第三个元素是一个列表；这个列表的第一个元素是符号'-', 第二个元素是数字 5，第三个元素是数字
    6。
- en: 2.2A Convenient Shortcut
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2一个方便的快捷方式
- en: As you know you need to test your programs extensively, which is hard to do
    when you must manually type terms in over and over again. Fortunately, as you
    might expect, the parenthetical syntax is integrated deeply into Racket through
    the mechanism of quotation. That is, ’<expr>—<wbr>which you saw a moment ago in
    the above example—<wbr>acts as if you had run (read) and typed <expr> at the prompt
    (and, of course, evaluates to the value the (read) would have).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知，你需要充分测试你的程序，但当你必须一遍又一遍地手动输入术语时，这是很困难的。幸运的是，正如你所期望的那样，括号语法通过引用机制深度集成到了
    Racket 中。也就是说，'<expr>—你在上面的例子中刚刚看到的—就好像你在提示符下运行（read）并键入了<expr>（当然，评估为（read）将会产生的值）。
- en: 2.3Types for Parsing
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3解析的类型
- en: 'Actually, I’ve lied a little. I said that (read)—<wbr>or equivalently, using
    quotation—<wbr>will produce a list, etc. That’s true in regular Racket, but in
    Typed PLAI, the type it returns a distinct type called an s-expression, written
    in Typed PLAI as s-expression:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我有点撒谎。我说（read）—或者等效地，使用引用—将产生一个列表，等等。在常规的 Racket 中是正确的，但在 Typed PLAI 中，它返回一个称为
    s-表达式的不同类型，Typed PLAI 中写为 s-表达式：
- en: '| > (read) |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| > (read) |'
- en: '| - s-expression |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| - s表达式 |'
- en: '| [type in (+ 23 (- 5 6))] |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [在 (+ 23 (- 5 6) 中的类型] |'
- en: '| ''(+ 23 (- 5 6)) |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| ''(+ 23 (- 5 6)) |'
- en: Racket has a very rich language of s-expressions (it even has notation to represent
    cyclic structures), but we will use only the simple fragment of it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Racket 有一个非常丰富的 s-表达式语言（甚至有表示循环结构的符号），但我们只会使用其中的简单片段。
- en: In the typed language, an s-expression is treated distinctly from the other
    types, such as numbers and lists. Underneath, an s-expression is a large recursive
    datatype that consists of all the base printable values—<wbr>numbers, strings,
    symbols, and so on—<wbr>and printable collections (lists, vectors, etc.) of s-expressions.
    As a result, base types like numbers, symbols, and strings are both their own
    type and an instance of s-expression. Typing such data can be fairly problematic,
    as we will discuss later [REF].
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在有类型的语言中，s-表达式与其他类型（如数字和列表）有所不同对待。在底层，s-表达式是一个大型的递归数据类型，包含所有基本可打印值——<wbr>数字、字符串、符号等等——<wbr>以及
    s-表达式的可打印集合（列表、向量等等）。因此，像数字、符号和字符串这样的基本类型既是它们自己的类型，也是 s-表达式的实例。对这样的数据进行类型化可能会相当棘手，我们稍后会讨论[REF]。
- en: 'Typed PLAI takes a simple approach. When written on their own, values like
    numbers are of those respective types. But when written inside a complex s-expression—<wbr>in
    particular, as created by read or quotation—<wbr>they have type s-expression.
    You have to then cast them to their native types. For instance:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Typed PLAI 采用了简单的方法。当单独写出时，像数字这样的值属于各自的类型。但当写在复杂的 s-表达式中——<wbr>特别是由 read 或引用创建的——<wbr>它们的类型是
    s-表达式。然后你必须将它们强制转换为其本机类型。例如：
- en: '| > ''+ |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| > ''+ |'
- en: '| - symbol |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| - 符号 |'
- en: '| ''+ |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| ''+ |'
- en: '| > (define l ''(+ 1 2)) |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| > (define l ''(+ 1 2)) |'
- en: '| > l |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| > l |'
- en: '| - s-expression |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| - s-表达式 |'
- en: '| ''(+ 1 2) |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| ''(+ 1 2) |'
- en: '| > (first l) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| > (first l) |'
- en: '| . typecheck failed: (listof ''_a) vs s-expression in: |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| . 类型检查失败：(listof ''_a) vs s-表达式： |'
- en: '|   first |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|   first |'
- en: '|   (quote (+ 1 2)) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|   (quote (+ 1 2)) |'
- en: '|   l |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|   l |'
- en: '|   first |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   first |'
- en: '| > (define f (first (s-exp->list l))) |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| > (define f (first (s-exp->list l))) |'
- en: '| > f |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| > f |'
- en: '| - s-expression |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| - s-表达式 |'
- en: '| ''+ |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| ''+ |'
- en: 'This is similar to the casting that a Java programmer would have to insert.
    We will study casting itself later [REF].Observe that the first element of the
    list is still not treated by the type checker as a symbol: a list-shaped s-expression
    is a list of s-expressions. Thus,'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于 Java 程序员需要插入的强制转换。我们稍后将学习强制转换本身[REF]。请注意，列表的第一个元素仍然不被类型检查器视为符号：一个类似列表形状的
    s-表达式是 s-表达式的列表。因此，
- en: '| > (symbol->string f) |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| > (symbol->string f) |'
- en: '| . typecheck failed: symbol vs s-expression in: |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| . 类型检查失败：符号与 s-表达式不匹配： |'
- en: '|   symbol->string |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|   symbol->string |'
- en: '|   f |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '|   f |'
- en: '|   symbol->string |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '|   symbol->string |'
- en: '|   f |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '|   f |'
- en: '|   first |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '|   first |'
- en: '|   (first (s-exp->list l)) |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '|   (first (s-exp->list l)) |'
- en: '|   s-exp->list |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '|   s-exp->list |'
- en: 'whereas again, casting does the trick:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 而强制转换可以解决这个问题：
- en: '| > (symbol->string (s-exp->symbol f)) |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| > (symbol->string (s-exp->symbol f)) |'
- en: '| - string |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| - string |'
- en: '| "+" |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| "+" |'
- en: 'The need to cast s-expressions is a bit of a nuisance, but some complexity
    is unavoidable because of what we’re trying to accomplish: to convert an untyped
    input stream into a typed output stream through robustly typed means. Somehow
    we have to make explicit our assumptions about that input stream.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 需要对 s-表达式进行强制转换有点麻烦，但由于我们试图实现的目标，一些复杂性是不可避免的：通过强类型的方式将无类型的输入流转换为有类型的输出流。我们必须明确表达我们对输入流的假设。
- en: Fortunately we will use s-expressions only in our parser, and our goal is to
    get away from parsing as quickly as possible! Indeed, if anything this should
    be inducement to get away even quicker.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们只会在解析器中使用 s-表达式，我们的目标是尽快摆脱解析！实际上，如果有什么的话，这应该是更快摆脱的诱因。
- en: 2.4Completing the Parser
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 完成解析器
- en: 'In principle, we can think of read as a complete parser. However, its output
    is generic: it represents the token structure without offering any comment on
    its intent. We would instead prefer to have a representation that tells us something
    about the intended meaning of the terms in our language, just as we wrote at the
    very beginning: “representing addition”, “represents a number”, and so on.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，我们可以将 read 视为一个完整的解析器。然而，它的输出是通用的：它代表了令牌结构，而没有提供任何关于其意图的评论。相反，我们更希望有一个表示，告诉我们关于语言中术语的预期含义的表示，就像我们在一开始写的那样：“表示加法”，“表示一个数字”等等。
- en: 'To do this, we must first introduce a datatype that captures this representation.
    We will separately discuss ([Representing Arithmetic](first-interp.html#(part._dt-for-arith)))
    how and why we obtained this datatype, but for now let’s say it’s given to us:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们必须首先引入一个捕捉这种表示���数据类型。我们将单独讨论（[表示算术](first-interp.html#(part._dt-for-arith)）我们如何以及为什么获得这种数据类型，但现在让我们假设它已经给出：
- en: '| (define-type ArithC |'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define-type ArithC |'
- en: '|   [numC (n : number)] |'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [numC (n : number)] |'
- en: '|   [plusC (l : ArithC) (r : ArithC)] |'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [plusC (l : ArithC) (r : ArithC)] |'
- en: '|   [multC (l : ArithC) (r : ArithC)]) |'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   [multC (l : ArithC) (r : ArithC)]) |'
- en: 'We now need a function that will convert s-expressions into instances of this
    datatype. This is the other half of our parser:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一个函数，将s表达式转换为此数据类型的实例。这是我们解析器的另一半：
- en: '| (define (parse [s : s-expression]) : ArithC |'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (define (parse [s : s-expression]) : ArithC |'
- en: '|   (cond |'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (cond |'
- en: '|     [(s-exp-number? s) (numC (s-exp->number s))] |'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [(s-exp-number? s) (numC (s-exp->number s))] |'
- en: '|     [(s-exp-list? s) |'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [(s-exp-list? s) |'
- en: '|      (let ([sl (s-exp->list s)]) |'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|      (let ([sl (s-exp->list s)]) |'
- en: '|        (case (s-exp->symbol (first sl)) |'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|        (case (s-exp->symbol (first sl)) |'
- en: '|          [(+) (plusC (parse (second sl)) (parse (third sl)))] |'
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|          [(+) (plusC (parse (second sl)) (parse (third sl)))] |'
- en: '|          [(*) (multC (parse (second sl)) (parse (third sl)))] |'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|          [(*) (multC (parse (second sl)) (parse (third sl)))] |'
- en: '|          [else (error ''parse "invalid list input")]))] |'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|          [else (error ''parse "invalid list input")]))] |'
- en: '|     [else (error ''parse "invalid input")])) |'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     [else (error ''parse "invalid input")])) |'
- en: 'Thus:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此：
- en: '| > (parse ''(+ (* 1 2) (+ 2 3))) |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '> (parse ''(+ (* 1 2) (+ 2 3))) |'
- en: '| - ArithC |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| - ArithC |'
- en: '| (plusC |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| (plusC |'
- en: '|  (multC (numC 1) (numC 2)) |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '|  (multC (numC 1) (numC 2)) |'
- en: '|  (plusC (numC 2) (numC 3))) |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '|  (plusC (numC 2) (numC 3))) |'
- en: Congratulations! You have just completed your first representation of a program.
    From now on we can focus entirely on programs represented as recursive trees,
    ignoring the vagaries of surface syntax and how to get them into the tree form.
    We’re finally ready to start studying programming languages!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您刚刚完成了对程序的第一个表示。从现在开始，我们可以完全专注于以递归树表示的程序，忽略表面语法的变化以及如何将其转换为树形式。我们终于准备好开始学习编程语言了！
- en: Exercise
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: What happens if you forget to quote the argument to the parser? Why?
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果您忘记引用解析器的参数会发生什么？为什么？
- en: 2.5Coda
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.5Coda
- en: 'Racket’s syntax, which it inherits from Scheme and Lisp, is controversial.
    Observe, however, something deeply valuable that we get from it. While parsing
    traditional languages can be very complex, parsing this syntax is virtually trivial.
    Given a sequence of tokens corresponding to the input, it is absolutely straightforward
    to turn parenthesized sequences into s-expressions; it is equally straightforward
    (as we see above) to turn s-expressions into proper syntax trees. I like to call
    such two-level languages bicameral, in loose analogy to government legislative
    houses: the lower-level does rudimentary well-formedness checking, while the upper-level
    does deeper validity checking. (We haven’t done any of the latter yet, but we
    will [REF].)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Racket的语法，它继承自Scheme和Lisp，是有争议的。然而，请注意，我们从中获得的一些非常有价值的东西。虽然解析传统语言可能非常复杂，但解析这种语法几乎是微不足道的。给定与输入对应的标记序列，将括号序列转换为s表达式绝对是直截了当的；同样直截了当（如上所示）将s表达式转换为正确的语法树。我喜欢将这种两级语言称为双室制，与政府立法机构的松散类比：下层进行基本的格式检查，而上层进行更深层次的有效性检查。（我们还没有做任何后者，但我们将在[REF]中做。）
- en: The virtues of this syntax are thus manifold. The amount of code it requires
    is small, and can easily be embedded in many contexts. By integrating the syntax
    into the language, it becomes easy for programs to manipulate representations
    of programs (as we will see more of in [REF]). It’s therefore no surprise that
    even though many Lisp-based syntaxes have had wildly different semantics, they
    all share this syntactic legacy.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这种语法的优点是多方面的。它所需的代码量很小，可以轻松嵌入许多上下文中。通过将语法集成到语言中，程序可以轻松地操作程序的表示（正如我们将在[REF]中看到的）。因此，即使许多基于Lisp的语法具有完全不同的语义，它们都共享这种语法遗产。
- en: Of course, we could just use XML instead. That would be much better. Or JSON.
    Because that wouldn’t be anything like an s-expression at all.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们也可以使用XML。那会更好。或者JSON。因为那根本不像s表达式。
