- en: import、export、require
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: import、export、require
- en: 原文：[https://typescriptbook.jp/reference/import-export-require](https://typescriptbook.jp/reference/import-export-require)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/reference/import-export-require](https://typescriptbook.jp/reference/import-export-require)
- en: 実務でアプリケーションを作る場合、複数のJavaScriptファイルを組み合わせて、ひとつのアプリケーションを成すことが多いです。いわゆるモジュール指向の開発です。ここではJavaScriptとTypeScriptでのモジュールと、モジュール同士を組み合わせるための`import`、`export`、`require`について説明します。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际工作中，通常会将多个JavaScript文件组合在一起，构成一个应用程序。这就是所谓的模块化开发。这里将解释JavaScript和TypeScript中的模块，以及如何组合模块的`import`、`export`、`require`。
- en: スクリプトとモジュール[​](#スクリプトとモジュール "スクリプトとモジュール への直接リンク")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本和模块[​](#スクリプトとモジュール "スクリプトとモジュール への直接リンク")
- en: JavaScriptのファイルは大きく分けて、スクリプトとモジュールに分類されます。スクリプトは普通のJavaScriptファイルです。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript文件大致分为脚本和模块两类。脚本就是普通的JavaScript文件。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: モジュールは、`import`または`export`を1つ以上含むJavaScriptファイルを言います。`import`は他のモジュールから変数、関数、クラスなどインポートするキーワードです。`export`は他のモジュールに変数、関数、クラスなどを公開するためのキーワードです。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是指包含一个或多个`import`或`export`的JavaScript文件。`import`是从其他模块导入变量、函数、类等的关键字。`export`是用于向其他模块公开变量、函数、类等的关键字。
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: したがって、`import`や`export`が無かったスクリプトファイルでも、後から`import`や`export`を追加すると、それはモジュールファイルになります。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使以前的脚本文件没有`import`或`export`，添加后，它也会变成模块文件。
- en: 値の公開と非公開[​](#値の公開と非公開 "値の公開と非公開 への直接リンク")
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 値の公開と非公開[​](#値の公開と非公開 "値の公開と非公開 への直接リンク")
- en: JavaScriptのモジュールは、明示的に`export`をつけた値だけが公開され、他のモジュールから参照できます。たとえば、次の例の`publicValue`は他のモジュールから利用できます。一方、`privateValue`は外部からは利用できません。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript模块只会公开带有`export`的值，其他模块可以引用这些值。例如，下面的`publicValue`可以被其他模块使用。而`privateValue`则无法被外部使用。
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: JavaScriptのモジュールでは、デフォルトで変数や関数などは非公開になるわけです。Javaなどの他の言語では、モジュール(パッケージ)のメンバーがデフォルトで公開になり、非公開にしたいものには`private`修飾子をつける言語があります。そういった言語と比べると、JavaScriptは基本方針が真逆なので注意が必要です。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript模块中，默认情况下，变量和函数等都是私有的。在其他语言如Java中，模块（包）的成员默认是公开的，需要将要私有的内容标记为`private`。与这些语言相比，JavaScript的基本策略完全相反，需要注意。
- en: モジュールは常にstrict mode[​](#モジュールは常にstrict-mode "モジュールは常にstrict mode への直接リンク")
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: モジュールは常にstrict mode[​](#モジュールは常にstrict-mode "モジュールは常にstrict mode への直接リンク")
- en: モジュールのJavaScriptは常にstrict modeになります。strict modeでは、さまざまな危険なコードの書き方が禁止されます。たとえば、未定義の変数への代入はエラーになります。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: モジュール的JavaScript会一直处于strict mode。在strict mode下，各种危险的代码写法都会被禁止。例如，对未定义变量的赋值会导致错误。
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: モジュールは`import`時に一度だけ評価される[​](#モジュールはimport時に一度だけ評価される "モジュールはimport時に一度だけ評価される
    への直接リンク")
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块在`import`时只会被评估一次[​](#モジュールはimport時に一度だけ評価される "モジュールはimport時に一度だけ評価される への直接リンク")
- en: モジュールのコードが評価されるのは、1回目の`import`のときだけです。2回目以降の`import`では、最初に評価した内容が使われます。言い換えると、モジュールは初回`import`でキャッシュされるとも言えますし、モジュールはいわゆるシングルトン(singleton)的なものとも言えます。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的代码只会在第一次`import`时被评估。在第二次及以后的`import`中，会使用最初评估的内容。换句话说，模块在第一次`import`时就被缓存了，也可以说模块是一种单例。
- en: たとえば、`module.js`というモジュールを3回読み込んだとしても、この`module.js`が評価されるのは最初の1回目だけです。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设三次读取名为`module.js`的模块，那么`module.js`只会在第一次评估时执行。
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: モジュールの歴史的経緯[​](#モジュールの歴史的経緯 "モジュールの歴史的経緯 への直接リンク")
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块的历史[​](#モジュールの歴史的経緯 "モジュールの歴史的経緯 への直接リンク")
- en: かつてのJavaScript[​](#かつてのjavascript "かつてのJavaScript への直接リンク")
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以前的JavaScript[​](#かつてのjavascript "かつてのJavaScript への直接リンク")
- en: かつてJavaScriptがブラウザでのみ動いていた時代は、モジュール分割と言う考え自体はあったもののそれはあくまでもブラウザ上、さらには`html`での管理となっていました。よく使われていた`jQuery`というパッケージがあるとすれば、それは次のように`html`に書く必要がありました。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以前JavaScript只能在浏览器中运行，虽然有模块分割的概念，但那只是在浏览器中，甚至是在`html`中管理。如果有一个常用的包叫做`jQuery`，那么需要在`html`中这样写。
- en: '[PRE12]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: もし`jQuery`に依存するパッケージがあるとすれば、`jQuery`の宣言より下に書く必要があります。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有依赖于`jQuery`的包，那么必须将其声明放在`jQuery`之后。
- en: '[PRE14]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: パッケージが少なければまだしも、増えてくると依存関係が複雑になります。もしも読み込む順番を間違えるとその`html`では動作しなくなるでしょう。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果包很少，还好，但随着包的增多，依赖关系会变得复杂。如果导入顺序错误，那么`html`可能就无法正常运行。
- en: Node.jsが登場してから[​](#nodejsが登場してから "Node.jsが登場してから への直接リンク")
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Node.js的出现[​](#nodejsが登場してから "Node.jsが登場してから への直接リンク")
- en: '`npm`が登場してから、使いたいパッケージを持ってきてそのまま使うことが主流になりました。'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 自`npm`出现以来，主流变成了直接获取想要的包并直接使用。
- en: '`CommonJS`[​](#commonjs "commonjs への直接リンク")'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`CommonJS`[​](#commonjs "commonjs への直接リンク")'
- en: '`require()`[​](#require "require への直接リンク")'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`require()`[​](#require "require への直接リンク")'
- en: Node.jsでは現在でも主流の他の`.js`ファイル(TypeScriptでは`.ts`も)を読み込む機能です。基本は次の構文です。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js仍然支持读取其他`.js`文件（TypeScript也支持`.ts`）。基本语法如下。
- en: '[PRE16]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: これは、パッケージの`package1`の内容を定数`package1`に持ってくることを意味しています。このとき`package1`は(組み込みライブラリでなければ)現在のプロジェクトの`node_modules`というディレクトリに存在する必要があります。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着将`package1`包的内容导入到常量`package1`中。此时，`package1`必须存在于当前项目的`node_modules`目录中（除非是内置库）。
- en: 自分で作った他の`.js, .ts`ファイルを読み込むこともできます。呼び出すファイルから見た、読み込みたいファイルの位置を**相対パス**で書きます。たとえ同じ階層にあっても相対パスで書く必要があります。このとき`.js,
    .json`とTypeScriptなら加えて`.ts`を省略することができます。TypeScriptでの開発においては最終的にJavaScriptにコンパイルされることを考慮すると書かないほうが無難です。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以加载自己创建的其他`.js, .ts`文件。在调用文件中，使用**相对路径**指定要加载的文件位置。即使在同一级别，也必须使用相对路径。在这种情况下，可以省略`.js,
    .json`，并且在TypeScript开发中，考虑到最终会编译为JavaScript，最好不要写这些后缀。
- en: '[PRE18]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`.js`を`.ts`と同じ場所に出力するようにしているとTypeScriptにとって同じ名前の読み込ことができるファイルがふたつ存在することになります。このときTypeScriptは`.js`を優先して読み込むので注意してください。いくらTypeScriptのコードを変更しても変更が適用されていないようであればこの問題の可能性があります。'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将`.js`输出到与`.ts`相同的位置，那么对于TypeScript来说，会存在两个同名文件，TypeScript会优先读取`.js`，请注意。如果即使更改了TypeScript代码，但似乎没有应用更改，则可能存在这个问题。
- en: また指定したパスがディレクトリで、その中に`index.js(index.ts)`があれば、ディレクトリの名前まで書けば`index.js(index.ts)`を読み込んでくれます。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定的路径是一个目录，并且其中有`index.js(index.ts)`文件，只需写出目录名，就会自动加载`index.js(index.ts)`。
- en: '`module.exports`[​](#moduleexports "moduleexports への直接リンク")'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`module.exports`[​](#moduleexports "moduleexports への直接リンク")'
- en: 他のファイルを読む込むためにはそのファイルは何かを出力している必要があります。そのために使うのがこの構文です。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取其他文件，该文件必须输出内容。为此，使用以下语法。
- en: '[PRE20]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: このような`.js`のファイルがあれば同じ階層で読み込みたい時は次のようになります。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个名为`.js`的文件，想要在同一级别下加载它，可以这样做。
- en: '[PRE22]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: このとき、読み込んだ内容を受ける定数`increment`はこの名前である必要はなく変更が可能です。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，接收导入内容的常���`increment`不一定要使用这个名称，可以更改。
- en: この`module.exports`はひとつのファイルでいくらでも書くことができますが、適用されるのは最後のもののみです。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: この`module.exports`はひとつのファイルでいくらでも書くことができますが、適用されるのは最後のもののみです。
- en: '[PRE24]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`exports`[​](#exports "exports への直接リンク")'
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`exports`[​](#exports "exports への直接リンク")'
- en: '`module.exports`だと良くも悪くも出力しているものの名前を変更できてしまいます。それを避けたい時はこの`exports`を使用します。'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`module.exports`だと良くも悪くも出力しているものの名前を変更できてしまいます。それを避けたい時はこの`exports`を使用します。'
- en: '[PRE28]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 読み込み側では次のようになります。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 読み込み側では次のようになります。
- en: '[PRE30]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 分割代入を使うこともできます。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 分割代入を使うこともできます。
- en: '[PRE32]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: こちらは`increment`という名前で使用する必要があります。他のファイルに同じ名前のものがあり、名前を変更する必要がある時は、分割代入のときと同じように名前を変更することができます。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: こちらは`increment`という名前で使用する必要があります。他のファイルに同じ名前のものがあり、名前を変更する必要がある時は、分割代入のときと同じように名前を変更することができます。
- en: '[PRE34]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`ES Module`[​](#es-module "es-module への直接リンク")'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`ES Module`[​](#es-module "es-module への直接リンク")'
- en: 主にフロントエンド(ブラウザ)で採用されているファイルの読み込み方法です。`ES6`で追加された機能のため、あまりにも古いブラウザでは動作しません。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 主にフロントエンド(ブラウザ)で採用��れているファイルの読み込み方法です。`ES6`で追加された機能のため、あまりにも古いブラウザでは動作しません。
- en: '`import`[​](#import "import への直接リンク")'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`import`[​](#import "import への直接リンク")'
- en: '`require()`と同じく他の`.js, .ts`ファイルを読み込む機能ですが、`require()`はファイル内のどこにでも書くことができる一方で`import`は**必ずファイルの一番上に書く必要があります**。'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`require()`と同じく他の`.js, .ts`ファイルを読み込む機能ですが、`require()`はファイル内のどこにでも書くことができる一方で`import`は**必ずファイルの一番上に書く必要があります**。'
- en: なお、書き方が2通りあります。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: なお、書き方が2通りあります。
- en: '[PRE36]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 使い方に若干差がありますので以下で説明します。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使い方に若干差がありますので以下で説明します。
- en: '`export default`[​](#export-default "export-default への直接リンク")'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`export default`[​](#export-default "export-default への直接リンク")'
- en: '`module.exports`に対応するものです。`module.exports`と異なりひとつのファイルはひとつの`export default`しか許されていなく複数書くと動作しません。'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`module.exports`に対応するものです。`module.exports`と異なりひとつのファイルはひとつの`export default`しか許されていなく複数書くと動作しません。'
- en: '[PRE38]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: この`.js`のファイルは次のようにして読み込みます。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: この`.js`のファイルは次のようにして読み込みます。
- en: '[PRE40]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '`export`[​](#export "export への直接リンク")'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`export`[​](#export "export への直接リンク")'
- en: '`exports`に相当するものです。書き方が2通りあります。'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`exports`に相当するものです。書き方が2通りあります。'
- en: '[PRE44]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: なお1番目の表記は定数宣言の`const`を使っていますが`let`を使っても読み込み側から定義されている`increment`を書き換えることはできません。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: なお1番目の表記は定数宣言の`const`を使っていますが`let`を使っても読み込み側から定義されている`increment`を書き換えることはできません。
- en: 次のようにして読み込みます。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 次のようにして読み込みます。
- en: '[PRE48]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 1番目の場合の`import`で名前を変更するときは、`require`のとき(分割代入)と異なり`as`という表記を使って変更します。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 1番目の場合の`import`で名前を変更するときは、`require`のとき(分割代入)と異なり`as`という表記を使って変更します。
- en: '[PRE52]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '`import()`[​](#import-1 "import-1 への直接リンク")'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`import()`[​](#import-1 "import-1 への直接リンク")'
- en: '`ES Module`では`import`をファイルの先頭に書く必要があります。これは動的に読み込むファイルを切り替えられないことを意味します。この`import()`はその代替手段にあたります。'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`ES Module`では`import`をファイルの先頭に書く必要があります。これは動的に読み込むファイルを切り替えられないことを意味します。この`import()`はその代替手段にあたります。'
- en: '`require()`と異なる点としては`import()`はモジュールの読み込みを非同期で行います。つまり`Promise`を返します。'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`require()`と異なる点としては`import()`はモジュールの読み込みを非同期で行います。つまり`Promise`を返します。'
- en: '[PRE54]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Node.jsで`ES Module`を使う[​](#nodejsでes-moduleを使う "nodejsでes-moduleを使う への直接リンク")
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.jsで`ES Module`を使う[​](#nodejsでes-moduleを使う "nodejsでes-moduleを使う への直接リンク")
- en: 先述のとおりNode.jsでは`CommonJS`が長く使われていますが、`13.2.0`でついに正式に`ES Module`もサポートされました。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 先述のとおりNode.jsでは`CommonJS`が長く使われていますが、`13.2.0`でついに正式に`ES Module`もサポートされました。
- en: しかしながら、あくまでもNode.jsは`CommonJS`で動作することが前提なので`ES Module`を使いたい時はすこし準備が必要になります。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: しかしながら、あくまでもNode.jsは`CommonJS`で動作することが前提なので`ES Module`を使いたい時はすこし準備が必要になります。
- en: '`.mjs`[​](#mjs "mjs への直接リンク")'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`.mjs`[​](#mjs "mjs への直接リンク")'
- en: '`ES Module`として動作させたいJavaScriptのファイルをすべて`.mjs`の拡張子に変更します。'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`ES Module`として動作させたいJavaScriptのファイルをすべて`.mjs`の拡張子に変更します。'
- en: '[PRE56]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 読み込み側は以下です。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 読み込み側は以下です。
- en: '[PRE58]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '`import`で使うファイルの**拡張子が省略できない**ことに注意してください。'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`import`で使うファイルの**拡張子が省略できない**ことに注意してください。'
- en: '`"type": "module"`[​](#type-module "type-module への直接リンク")'
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`"type": "module"`[​](#type-module "type-module への直接リンク")'
- en: '`package.json`にこの記述を追加するとパッケージ全体が`ES Module`をサポートします。'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`にこの記述を追加するとパッケージ全体が`ES Module`をサポートします。'
- en: '[PRE60]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'このようにすることで拡張子を`.mjs`に変更しなくてもそのまま`.js`で`ES Module`を使えるようになります。なお`"type": "module"`の省略時は`"type":
    "commonjs"`と指定されたとみなされます。これは今までどおりのNode.jsです。'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'このようにすることで拡張子を`.mjs`に変更しなくてもそのまま`.js`で`ES Module`を使えるようになります。なお`"type": "module"`の省略時は`"type":
    "commonjs"`と指定されたとみなされます。これは今までどおりのNode.jsです。'
- en: '[PRE62]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '`.js`ではありますが**読み込む時は拡張子を省略できなくなる**ことに注意してください。'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`.js`ではありますが**読み込む時は拡張子を省略できなくなる**ことに注意してください。'
- en: '`.cjs`[​](#cjs "cjs への直接リンク")'
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`.cjs`[​](#cjs "cjs への直接リンク")'
- en: '`CommonJS`で書かれたJavaScriptを読み込みたくなったときは`CommonJS`で書かれているファイルをすべて`.cjs`に変更する必要があります。'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`CommonJS`で書かれたJavaScriptを読み込みたくなったときは`CommonJS`で書かれているファイルをすべて`.cjs`に変更する必要があります。'
- en: '[PRE66]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 読み込み側は次のようになります。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 読み込み側は次のようになります。
- en: '[PRE68]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '`ES Module`には`require()`がなく、一手間加えて作り出す必要があります。'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`ES Module`には`require()`がなく、一手間加えて作り出す必要があります。'
- en: '`"type": "module"`の問題点[​](#type-moduleの問題点 "type-moduleの問題点 への直接リンク")'
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`"type": "module"`の問題点[​](#type-moduleの問題点 "type-moduleの問題点 への直接リンク")'
- en: 'すべてを`ES Module`として読み込むこの設定は、多くのパッケージがまだ`"type": "module"`に対応していない現状としては非常に使いづらいです。'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 'すべてを`ES Module`として読み込むこの設定は、多くのパッケージがまだ`"type": "module"`に対応していない現状としては非常に使いづらいです。'
- en: 'たとえば`linter`やテストといった各種開発補助のパッケージの設定ファイルを`.js`で書いていると動作しなくなってしまいます。かといってこれらを`.cjs`に書き換えても、パッケージが設定ファイルの読み込み規則に`.cjs`が含んでいなければそれらのパッケージは設定ファイルがないと見なします。そのため`"type":
    "module"`は現段階では扱いづらいものとなっています。'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 'たとえば`linter`やテストといった各種開発補助のパッケージの設定ファイルを`.js`で書いていると動作しなくなってしまいます。かといってこれらを`.cjs`に書き換えても、パッケージが設定ファイルの読み込み規則に`.cjs`が含んでいなければそれらのパッケージは設定ファイルがないと見なします。そのため`"type":
    "module"`は現段階では扱いづらいものとなっています。'
- en: TypeScriptでは[​](#typescriptでは "TypeScriptでは への直接リンク")
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TypeScriptでは[​](#typescriptでは "TypeScriptでは への直接リンク")
- en: TypeScriptでは一般的に`ES Module`方式に則った記法で書きます。これは`CommonJS`を使用しないというわけではなく、コンパイル時の設定で`CommonJS,
    ES Module`のどちらにも対応した形式で出力できるのであまり問題はありません。ここまでの経緯などはTypeScriptでは意識することがあまりないでしょう。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScriptでは一般的に`ES Module`方式に則った記法で書きます。これは`CommonJS`を使用しないというわけではなく、コンパイル時の設定で`CommonJS,
    ES Module`のどちらにも対応した形式で出力できるのであまり問題はありません。ここまでの経緯などはTypeScriptでは意識することがあまりないでしょう。
- en: また、執筆時(2021/01)ではTypeScriptのコンパイルは`.js`のみを出力でき`.cjs, .mjs`を出力する設定はありません。ブラウザでもサーバーでも使えるJavaScriptを出力したい場合は一手間加える必要があります。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: また、執筆時(2021/01)ではTypeScriptのコンパイルは`.js`のみを出力でき`.cjs, .mjs`を出力する設定はありません。ブラウザでもサーバーでも使えるJavaScriptを出力したい場合は一手間加える必要があります。
- en: 出力の方法に関してはtsconfig.jsonのページに説明がありますのでそちらをご覧ください。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 出力の方法に関してはtsconfig.jsonのページに説明がありますのでそちらをご覧ください。
- en: '[## 📄️ tsconfig.jsonを設定する'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ tsconfig.jsonを設定する'
- en: Node.jsはそれ自身ではTypeScriptをサポートしているわけではないため、TypeScriptの導入をする時はTypeScriptの設定ファイルであるtsconfig.jsonが必要です。](/reference/tsconfig/tsconfig.json-settings)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Node.jsはそれ自身ではTypeScriptをサポートしているわけではないため、TypeScriptの導入をする時はTypeScriptの設定ファイルであるtsconfig.jsonが必要です。](/reference/tsconfig/tsconfig.json-settings)
- en: '`require? import?`[​](#require-import "require-import への直接リンク")'
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`require? import?`[​](#require-import "require-import への直接リンク")'
- en: ブラウザ用、サーバー用の用途で使い分けてください。ブラウザ用であれば`ES Module`を、サーバー用であれば`CommonJS`が無難な選択肢になります。どちらでも使えるユニバーサルなパッケージであればDual
    Packageを目指すのもよいでしょう。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: ブラウザ用、サーバー用の用途で使い分けてください。ブラウザ用であれば`ES Module`を、サーバー用であれば`CommonJS`が無難な選択肢になります。どちらでも使えるユニバーサルなパッケージであればDual
    Packageを目指すのもよいでしょう。
- en: '[## 📄️ デュアルパッケージ開発者のためのtsconfig'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 📄️ デュアルパッケージ開発者のためのtsconfig'
- en: フロントエンドでもバックエンドでもTypeScriptこれ一本！Universal JSという考えがあります。確かにフロントエンドを動的にしたいのであればほぼ避けて通れないJavaScriptと、バックエンドでも使えるようになったJavaScriptで同じコードを使いまわせれば保守の観点でも異なる言語を触る必要がなくなり、統一言語としての価値が大いにあります。](/reference/advanced-topics/tsconfig-for-dual-package-developers)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: フロントエンドでもバックエンドでもTypeScriptこれ一本！Universal JSという考えがあります。確かにフロントエンドを動的にしたいのであればほぼ避けて通れないJavaScriptと、バックエンドでも使えるようになったJavaScriptで同じコードを使いまわせれば保守の観点でも異なる言語を触る必要がなくなり、統一言語としての価値が大いにあります。](/reference/advanced-topics/tsconfig-for-dual-package-developers)
- en: '`default export? named export?`[​](#default-export-named-export "default-export-named-export
    への直接リンク")'
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`default export? named export?`[​](#default-export-named-export "default-export-named-export
    への直接リンク")'
- en: '`module.exports`と`export default`はdefault exportと呼ばれ、`exports`と`export`はnamed
    exportと呼ばれています。どちらも長所と短所があり、たびたび議論になる話題です。どちらか一方を使うように統一するコーディングガイドを持っている企業もあるようですが、どちらかが極端に多いというわけでもないので好みの範疇です。'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`module.exports`と`export default`はdefault exportと呼ばれ、`exports`と`export`はnamed
    exportと呼ばれています。どちらも長所と短所があり、たびたび議論になる話題です。どちらか一方を使うように統一するコーディングガイドを持っている企業もあるようですが、どちらかが極端に多いというわけでもないので好みの範疇です。'
- en: default export[​](#default-export "default export への直接リンク")
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: default export[​](#default-export "default export への直接リンク")
- en: default exportのPros[​](#default-exportのpros "default exportのPros への直接リンク")
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: default exportのPros[​](#default-exportのpros "default exportのPros への直接リンク")
- en: '`import`する時に名前を変えることができる'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import`する時に名前を変えることができる'
- en: そのファイルが他の`export`に比べ何をもっとも提供したいのかがわかる
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: そのファイルが他の`export`に比べ何をもっとも提供したいのかがわかる
- en: default exportのCons[​](#default-exportのcons "default exportのCons への直接リンク")
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: default exportのCons[​](#default-exportのcons "default exportのCons への直接リンク")
- en: エディター、IDEによっては入力補完が効きづらい
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: エディター、IDEによっては入力補完が効きづらい
- en: 再エクスポートの際に名前をつける必要がある
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再エクスポートの際に名前をつける必要がある
- en: named export[​](#named-export "named export への直接リンク")
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: named export[​](#named-export "named export への直接リンク")
- en: named exportのPros[​](#named-exportのpros "named exportのPros への直接リンク")
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: named exportのPros[​](#named-exportのpros "named exportのPros への直接リンク")
- en: エディター、IDEによる入力補完が効く
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: エディター、IDEによる入力補完が効く
- en: ひとつのファイルから複数`export`できる
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ひとつのファイルから複数`export`できる
- en: named exportのCons[​](#named-exportのcons "named exportのCons への直接リンク")
  id: totrans-167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: named exportのCons[​](#named-exportのcons "named exportのCons への直接リンク")
- en: (名前の変更はできるものの)基本的に決まった名前で`import`して使う必要がある
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (名前の変更はできるものの)基本的に決まった名前で`import`して使う必要がある
- en: '`export`しているファイルが名前を変更すると動作しなくなる'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export`しているファイルが名前を変更すると動作しなくなる'
- en: ここで挙がっている**名前を変えることができる**についてはいろいろな意見があります。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ここで挙がっている**名前を変えることができる**についてはいろいろな意見があります。
- en: ファイルが提供したいもの[​](#ファイルが提供したいもの "ファイルが提供したいもの への直接リンク")
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ファイルが提供したいもの[​](#ファイルが提供したいもの "ファイルが提供したいもの への直接リンク")
- en: たとえばある国の会計ソフトウェアを作っていたとして、その国の消費税が8%だったとします。そのときのあるファイルの`export`はこのようになっていました。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: たとえばある国の会計ソフトウェアを作っていたとして、その国の消費税が8%だったとします。そのときのあるファイルの`export`はこのようになっていました。
- en: '[PRE70]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: もちろん呼び出し側はそのまま使うことができます。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: もちろん呼び出し側はそのまま使うことができます。
- en: '[PRE72]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: ここで、ある国が消費税を10%に変更したとします。このときこのシステムでは`taxIncluded.ts`を変更すればこと足ります。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: ここで、ある国が消費税を10%に変更したとします。このときこのシステムでは`taxIncluded.ts`を変更すればこと足ります。
- en: '[PRE74]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: この変更をこのファイル以外は知る必要がありませんし、知ることができません。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: この変更をこのファイル以外は知る必要がありませんし、知ることができません。
- en: 今回の問題点[​](#今回の問題点 "今回の問題点 への直接リンク")
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 今回の問題点[​](#今回の問題点 "今回の問題点 への直接リンク")
- en: システムが**ある年月日当時の消税率**を元に金額の計算を多用するようなものだとこの暗黙の税率変更は問題になります。過去の金額もすべて現在の消費税率である10%で計算されてしまうからです。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: システムが**ある年月日当時の消税率**を元に金額の計算を多用するようなものだとこの暗黙の税率変更は問題になります。過去の金額もすべて現在の消費税率である10%で計算されてしまうからです。
- en: named exportだと[​](#named-exportだと "named exportだと への直接リンク")
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: named exportだと[​](#named-exportだと "named exportだと への直接リンク")
- en: named exportであれば`export`する名称を変更することで呼び出し側の変更を強制させることができます。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: named exportであれば`export`する名称を変更することで呼び出し側の変更を強制させることができます。
- en: '[PRE76]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 税率が10%に変われば次のようにします。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 税率が10%に変われば次のようにします。
- en: '[PRE80]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 名前を変更したため、呼び出し元も名前の変更が強制されます。これはたとえ`as`を使って名前を変更していたとしても同じく変更する必要があります。
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 名前を変更したため、呼び出し元も名前の変更が強制されます。これはたとえ`as`を使って名前を変更していたとしても同じく変更する必要があります。
- en: ロジックが変わったこととそれによる修正を強制したいのであればnamed exportを使う方がわかりやすく、そしてエディター、IDEを通して見つけやすくなる利点があります。逆に、公開するパッケージのようにAPIが一貫して明瞭ならばdefault
    exportも価値があります。
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: ロジックが変わったこととそれによる修正を強制したいのであればnamed exportを使う方がわかりやすく、そしてエディター、IDEを通して見つけやすくなる利点があります。逆に、公開するパッケージのようにAPIが一貫して明瞭ならばdefault
    exportも価値があります。
