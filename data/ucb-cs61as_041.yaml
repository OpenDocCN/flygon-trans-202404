- en: Applied HOFs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用高阶函数
- en: '**Note:** This section is a bit more dense than the rest of the lesson. If
    you struggle with this section, don''t worry—it''s more advanced than most of
    what we''ll expect you to know.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 这一部分比课程的其他部分更加密集。如果你在这一部分遇到困难，不要担心——这比我们期望你掌握的大部分内容都要高级。'
- en: 'Here, we will explore two applied examples using the tools we have learned
    so far: `fixed-point` and `iterate`.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用到目前为止学到的工具来探索两个应用示例：`fixed-point`和`iterate`。
- en: '`fixed-point`'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`fixed-point`'
- en: We will first try to express the calculation of **fixed points** of functions.
    A number `x` is called a fixed point of a function `f` if `x` satisfies the equation
    `f(x) = x`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先尝试表达函数的**不动点**的计算。如果一个数字`x`满足方程`f(x) = x`，则称其为函数`f`的不动点。
- en: An algorithm that finds a fixed point for some functions `f` is one where we
    start with an initial guess and apply `f` repeatedly, until successive values
    are very close.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个找到某些函数`f`的不动点的算法是，我们从一个初始猜测开始，然后重复应用`f`，直到连续的值非常接近。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using this idea, we''ll make a procedure `fixed-point` that will keep applying
    a function until we find two successive values whose difference is less than some
    prescribed `tolerance`. Take a look at our definition of `fixed-point` below:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这个想法，我们将制作一个过程`fixed-point`，它将一直应用一个函数，直到我们找到两个连续值的差小于某个预定的`tolerance`。看看我们下面对`fixed-point`的定义：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For example, we can use this method to approximate the fixed point of the cosine
    function, starting with 1 as an initial approximation:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用这种方法来近似余弦函数的不动点，从1作为初始近似开始：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To demonstrate the power of abstracting functions with `fixed-point`, we will
    develop a method to calculate square roots with only 3 lines of Racket code!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示用`fixed-point`抽象函数的强大之处，我们将开发一种只需3行Racket代码就能计算平方根的方法！
- en: 'Computing the square root of some number `x` requires finding a `y` such that
    `y² = x`. Putting this equation into the equivalent form `y = x / y`, you can
    see that we are looking for a fixed point of the function `(lambda (y) (/ x y))`.
    In code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 计算某个数字`x`的平方根需要找到一个`y`，使得`y² = x`。将这个方程转化为等价形式`y = x / y`，你会看到我们正在寻找函数`(lambda
    (y) (/ x y))`的不动点。在代码中：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you happen to have an interpreter handy, though, you''ll find that this
    doesn''t work. To see why, look at the successive guesses of, say, `(sqrt 4)`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你碰巧有一个解释器，你会发现这��起作用。要了解原因，请看，比如，`(sqrt 4)`的连续猜测值：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It just keeps oscillating! If you think about it, it'll do that for any number
    we put in (except 0 or 1).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 它只是不断地振荡！如果你仔细想想，它对我们放入的任何数字都会这样做（除了0或1）。
- en: So, instead of changing the guess by `1`, we'll adjust by a little less. To
    do that, we'll average the next guess with the current guess. That is, the next
    guess after `y` is `(1/2)(y + x/y)` instead of `x/y`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们不再通过`1`来改变猜测值，而是通过稍微小一点。为了做到这一点，我们将下一个猜测值与当前猜测值平均。也就是说，在`y`之后的下一个猜测值是`(1/2)(y
    + x/y)`，而不是`x/y`。
- en: 'The process of making such a sequence of guesses is simply the process of looking
    for a fixed point of `y = (1/2)(y + x/y)`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 制作这样一个猜测序列的过程就是简单地寻找`y = (1/2)(y + x/y)`的不动点的过程：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With this modification, the square-root procedure works. This approach of averaging
    successive approximations to a solution, a technique the SICP authors call `average
    damping`, often aids the convergence of fixed- point searches.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种修改，平方根过程可以工作。这种平均连续逼近解的方法，SICP作者称之为`average damping`，通常有助于固定点搜索的收敛。
- en: 'So, let''s continue our abstraction frenzy and abstract the average damping
    technique as well:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们继续我们的抽象狂热，并将平均阻尼技术也抽象化：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And now, a new `sqrt`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一个新的`sqrt`：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Amazingly clear, eh?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 非常清晰，对吧？
- en: 'Notes:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: '`y = (1/2)(y + x/y)` is a simple transformation of the equation `y = x / y`;
    to derive it, add `y` to both sides of the equation and divide by `2`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`y = (1/2)(y + x/y)`是方程`y = x / y`的一个简单转换；为了推导它，将`y`添加到方程的两边，然后除以`2`。'
- en: You may have noticed that we have effectively derived Newton's method for calculating
    square roots. But... there are so many other ways! If you're intersted, here's
    a [cool link](http://en.wikipedia.org/wiki/Methods_of_computing_square_roots).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们已经有效地推导出了用于计算平方根的牛顿法。但是...还有很多其他方法！如果你感兴趣，这里有一个[很酷的链接](http://en.wikipedia.org/wiki/Methods_of_computing_square_roots)。
- en: '`iterate`'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`iterate`'
- en: We will now conclude this lesson with another higher order function.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将用另一个高阶函数结束这节课。
- en: This one will allow us to write `fixed-point` AND `largest-square` (from Lesson
    1).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们编写`fixed-point`和`largest-square`（来自第1课）。
- en: How, you ask? Because they both fall under the general form of **iterative improvement**.
    That is, you start with a value and keep improving it until it is good enough.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你会问，为什么？因为它们都属于**迭代改进**的一般形式。也就是说，你从一个值开始，并不断改进它直到足够好为止。
- en: 'Notice there are 3 things to abstract here:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里有3件事情需要抽象出来：
- en: the starting value
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 起始值
- en: the function to improve
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于改进的函数
- en: the function to test if it's good enough
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于测试是否足够好的函数
- en: So, with that, we know our parameters and what it should do, so let's write
    it!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，有了这些，我们知道了我们的参数以及它应该做什么，那么让我们来写吧！
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And now, I''ll express `largest-square` with `iterate`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将用`iterate`来表达`largest-square`：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Our abstraction frenzy (mostly) ends here, but be on your toes. Abstraction
    is what allows programmers to write complex but readable systems.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的抽象狂热（大部分）到此为止，但要保持警惕。抽象是让程序员编写复杂但可读性强的系统的关键。
- en: Never miss a good opportunity to abstract.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不要错过一个好的抽象机会。
