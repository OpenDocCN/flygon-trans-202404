- en: Red-Black Trees
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 红黑树
- en: Red-black trees are binary search ordered trees that are roughly balanced, resulting
    in *O(log n)* membership, insertion, and deletion operations. The code for this
    lecture can be found in [`RedBlackTrees.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/RedBlackTrees.elm).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 红黑树是大致平衡的二叉搜索有序树，导致*O(log n)*的成员、插入和删除操作。本讲座的代码可以在[`RedBlackTrees.elm`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/public-code/RedBlackTrees.elm)中找到。
- en: All nodes in a red-black tree are colored red or black. Empty nodes are considered
    to be black.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 红黑树中的所有节点都被彩色为红色或黑色。空节点被视为黑色。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Invariants
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 不变式
- en: 'A tree `t` is a valid red-black tree if:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一棵树`t`是有效的红黑树，则：
- en: '`t` satisfies the binary search order property. That is, `bso t == True`, where'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`t`满足二叉搜索顺序属性。也就是说，`bso t == True`，其中'
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The root node of `t` is black. That is, `color t == B`.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树`t`的根节点是黑色的。也就是说，`color t == B`。
- en: No red node in `t` has a red child. That is, `noRedRed t == True`, where
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`t`中没有红节点有一个红子。也就是说，`noRedRed t == True`，其中'
- en: '[PRE2]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Every path from the root of `t` to a leaf contains the same number of black
    nodes. That is, `okBlack t == True`, where
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`t`的根到叶的每条路径都包含相同数量的黑节点。也就是说，`okBlack t == True`，其中
- en: '[PRE3]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When `blackHeight t == Just n`, we refer to `n` as the *black height* of `t`.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当`blackHeight t == Just n`时，我们将`n`称为`t`的*黑高度*。
- en: '[PRE4]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that we do not include `E` nodes in path lengths.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，路径长度中不包括`E`节点。
- en: 'To summarize the invariants:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 总结不变式：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Properties
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 属性
- en: A consequence of the `noRedRed` invariant is that the length of the longest
    path from root to leaf in a red-black tree `t` is at most twice the length of
    the shortest path. Thus, `height t <= 2 * bh t`, where
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`noRedRed`不变式的一个结果是，在红黑树`t`中从根到叶的最长路径的长度最多是最短路径的两倍。因此，`height t <= 2 * bh t`，其中'
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**In-Class Exercise**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**课堂练习**'
- en: 'Prove: *∀`t`. `rb t` ⇒ `size t` ≥ `2^(bh t) - 1`*'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证明：*∀`t`. `rb t` ⇒ `size t` ≥ `2^(bh t) - 1`*
- en: 'Prove: *∀`t`. `rb t` ⇒ `height t` ≤ `2(log(1 + size t))`*'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证明：*∀`t`. `rb t` ⇒ `height t` ≤ `2(log(1 + size t))`*
- en: Thus, the height of a red-black tree `t` of size `n` is *O(`log n`)*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，大小为`n`的红黑树`t`的高度为*O(`log n`)*。
- en: Membership
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成员资格
- en: Finding an element in a red-black tree proceeds just like finding an element
    in an unbalanced binary search tree (*cf.* [`findBST`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/lectures/AsymptoticAnalysis.html)).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在红黑树中查找元素的过程就像在不平衡的二叉搜索树中查找元素一样（*参见* [`findBST`](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/lectures/AsymptoticAnalysis.html)）。
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Insertion
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入
- en: When not worrying about maintaining the balancedness of a binary search tree,
    the insertion procedure walks down a path in the tree making left and right turns
    as necessary according to the order property. Then, if the element is found nowhere
    in the tree, it is added as a leaf.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当不考虑维护二叉搜索树的平衡性时，插入过程沿着树中的路径向下走，根据顺序属性进行左右转向。然后，如果在树中找不到元素，则将其添加为叶子。
- en: This naive approach could simply add a black node at this final position, satisfying
    the `noRedRed` invariant, but unfortunately does not preserve the `blackHeight`
    property.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这种天真的方法可以简单地在最终位置添加一个黑节点，满足`noRedRed`不变式，但不幸的是，它不能保持`blackHeight`属性。
- en: Instead, the idea behind the insertion algorithm is to color the new node red,
    possibly resulting in temporary red-red violation, and then walk back up the search
    path fixing and propagrating upwards any violations. The algorithm maintains the
    invariant that at most one red-red violation is allowed at a time.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，插入算法的思想是将新节点标记为红色，可能导致临时的红-红违规，然后沿着搜索路径向上走，修复并向上传播任何违规。算法保持的不变式是一次只允许一个红-红违规。
- en: The `ins` function walks down the search path, inserts a red node as the new
    leaf, and walks back up the search path calling `balance` to fix any temporary
    red-red violations.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`ins`函数沿着搜索路径向下走，将一个红节点插入为新的叶子，然后沿着搜索路径向上走，调用`balance`来修复任何临时的红-红违规。'
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `balance` function looks for red-red violations, which can occur in one
    of four configurations. In each case, the solution is the same.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`balance`函数查找红-红违规，这可以出现四种配置之一。在每种情况下，解决方案都是相同的。'
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `balance` function fixes a red-red violation when processing a black parent
    node that contains it. If `ins` propagates a red-red violation all the way up
    to the root, there is no call to `balance` to fix it. Therefore, the last step
    in the insertion algorithm is to unconditionally color the new root node black.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理包含它的黑色父节点时，`balance`函数修复红红违例。如果`ins`将红红违例传播到根部，就没有调用`balance`来修复它。因此，插入算法的最后一步是无条件地将新的根节点着色为黑色。
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Contracts
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 合同
- en: Although it is great to prove properties of pseudocode on paper, it is often
    useful to dynamically check that the input and output behavior of a function is
    as expected.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在纸上证明伪代码的属性非常好，但动态检查函数的输入和输出行为是否符合预期通常也很有用。
- en: One style of such testing is referred to as *design by contract*, where a function
    may be decorated with predicates (`Bool`-valued functions) that describe preconditions
    on arguments that callers are expected to satisfy and a postconditions on return
    values that the callee is expected to establish.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种测试风格被称为*设计合同*，其中一个函数可以装饰为描述调用方应满足的参数前置条件和被调用方应建立的返回值后置条件的谓词（`Bool`值函数）。
- en: For example, the function
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，该函数
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: may expect `x` to satisfy some predicate `pArg` and may intend `e` to satisfy
    some predicate `pRet`. If either of these expectations is violated at run-time,
    an error should be reported (one that, ideally, can help to identify what part
    of the program is responsible for the failure).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 可能期望`x`满足某些谓词`pArg`并且可能打算`e`满足某些谓词`pRet`。如果其中任何期望在运行时被违反，则应报告错误（最理想情况下，可以帮助确定程序哪个部分负责失败）。
- en: Below is one way to rewrite the above function with such pre- and postconditions.
    Notice how this function is a "wrapper" around the original function.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是重新编写上述函数的一种方法，其中包含了前置条件和后置条件。请注意，这个函数是对原始函数的“包装器”。
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The insertion algorithm is a bit tricky, so let's define wrapper versions with
    contracts to gain more confidence that the implementation corresponds to the analysis
    that we have done on paper.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 插入算法有点棘手，所以让我们定义带有合同的包装器版本，以获得对实现与我们在纸上进行的分析相符的更多信心。
- en: We start by defining some helper functions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义一些辅助函数。
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, we'll define versions of the previous functions (labeled with a "`'`")
    that perform contract checks on each invocation. In practice, we would probably
    want to include more descriptive error strings to report upon failure.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将定义前面函数的版本（标记为“'”），每次调用时都执行合同检查。在实践中，我们可能希望包含更多描述性错误字符串以报告失败情况。
- en: The overall `insert'` algorithm expects its argument to satisfy `rb` and returns
    an updated tree that satisfies `rb`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 整体`insert'`算法期望其参数满足`rb`并返回满足`rb`的更新树。
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The precondition for `ins'` is interesting, because its argument ought to satisfy
    all the red-black tree invariants except possibly that the color of the root is
    red. The resulting tree has the same `blackHeight` as the original tree and might
    have one red-red violation. We'll omit the `bso` post-condition from `ins'` (and
    `balance'` below) to save a bit of run-time overhead.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`ins''`的前置条件很有趣，因为其参数应满足除了根的颜色可能为红色之外的所有红黑树不变量。结果树的`blackHeight`与原始树相同，可能存在一个红红违例。我们将从`ins''`（以及下面的`balance''`）中省略`bso`后置条件，以节省一些运行时开销。'
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `balance'` function expects the subtrees `l` and `r` to have the same `blackHeight`
    and that at most of them has a red-red violation. The resulting tree has the same
    `blackHeight` as a tree constructed directly with the `T` data constructor rather
    than via the different rotations. If one of the four rebalancing cases is triggered,
    then the resulting tree `t'` has `noRedRed` violation. Otherwise, the (untransformed)
    tree `t'` may have one. Therefore, the postcondition is `maybeOneRedRed`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`balance''`函数期望子树`l`和`r`具有相同的`blackHeight`，并且其中最多有一个红红违例。结果树的`blackHeight`与直接使用`T`数据构造函数构造的树相同，而不是通过不同的旋转。如果触发了四种重新平衡情况之一，则结果树`t''`没有`noRedRed`违例。否则，（未转换的）树`t''`可能有一个。因此，后置条件是`maybeOneRedRed`。'
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Because pre- and post-conditions are evaluated on every function call (and the
    predicates we have supplied are linear in the size of their arguments), these
    versions run *much* slower than the original versions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因为前置和后置条件在每次函数调用时都会被评估（并且我们提供的谓词在其参数的大小上是线性的），所以这些版本比原始版本运行*慢得多*。
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: During program development, however, we are often willing to trade performance
    in exchange for help with testing and identifying bugs.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在程序开发过程中，我们经常愿意在性能和帮助测试和识别错误之间进行权衡。
- en: Try introducing some bugs into the implementation in order to trigger run-time
    contract violations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在实现中引入一些错误以触发运行时的合同违规。
- en: Some languages, such as [Racket](http://racket-lang.org/), provide extensive
    support for specifying and checking contracts. One might imagine an extension
    to Elm that allowed us to write the following more precise function types, which
    automatically get translated to the wrapped functions we have manually written
    above. Notice that, in this syntax, types are "refined" by predicate functions.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一些语言，如[Racket](http://racket-lang.org/)，为指定和检查约束提供了广泛的支持。我们可以想象扩展Elm，使我们能够编写以下更精确的函数类型，这些类型会自动转换为我们手动编写的包装函数。请注意，在这种语法中，类型由谓词函数“细化”。
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Better still would be for the language to *statically* figure out that these
    contracts will *never* violated at run-time and, hence, do not need to be checked
    dynamically.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的做法是让语言*静态*地确定这些约束在运行时*永远*不会被违反，因此不需要动态检查。
- en: Alas, in this course, we will not cover *software verification* techniques or
    *dependent type systems* that are able to reason about certain fine-grained program
    invariants like these. But this is a longstanding and very active area of research.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可惜，在这门课程中，我们不会涉及*软件验证*技术或能够推理出这些精细程序不变量的*依赖类型系统*。但这是一个长期存在且非常活跃的研究领域。
- en: Deletion
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除
- en: Deleting an element from a red-black tree is considerably harder that inserting
    an element. We will not go through the deletion algorithm in class. If you are
    curious, check out [this article](http://matt.might.net/articles/red-black-delete/)
    by Matt Might.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从红黑树中删除元素比插入元素要困难得多。我们不会在课堂上讲解删除算法。如果你感兴趣，可以查看Matt Might的[这篇文章](http://matt.might.net/articles/red-black-delete/)。
- en: Busting the Stack
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 栈溢出
- en: It's great that we have a fast, *O(log n)* insertion algorithm...
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒，我们有一个快速的，*O(log n)*插入算法...
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '... but the logarithm of `10000` is not very large, and yet we crash and burn.
    What gives?'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '...但是`10000`的对数并不是很大，但我们仍然崩溃了。怎么回事？'
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Ah, the issue is with generating a large `List` of random numbers, not with
    our insertion algorithm. Bummer. Stay tuned for more.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 啊，问题出在生成一个大型的`List`的随机数，而不是我们的插入算法。遗憾。敬请关注更多信息。
- en: Reading
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: Required
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 必需
- en: Okasaki, Chapter 3.3
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Okasaki，第3.3章
