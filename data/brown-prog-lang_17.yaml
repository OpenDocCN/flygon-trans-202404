- en: 17Halloween Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17号万圣节分析
- en: '|     [17.1 A First Example](#%28part._.A_.First_.Example%29) |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|     [17.1 第一个例子](#%28part._.A_.First_.Example%29) |'
- en: '|     [17.2 The New Form of Analysis](#%28part._.The_.New_.Form_of_.Analysis%29)
    |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|     [17.2 新形式的分析](#%28part._.The_.New_.Form_of_.Analysis%29) |'
- en: '|     [17.3 An Example: Queues from Lists](#%28part._queue-data-structure%29)
    |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '|     [17.3 示例：列表的队列](#%28part._queue-data-structure%29) |'
- en: '|       [17.3.1 List Representations](#%28part._.List_.Representations%29)
    |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|       [17.3.1 列表表示](#%28part._.List_.Representations%29) |'
- en: '|       [17.3.2 A First Analysis](#%28part._.A_.First_.Analysis%29) |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|       [17.3.2 第一次分析](#%28part._.A_.First_.Analysis%29) |'
- en: '|       [17.3.3 More Liberal Sequences of Operations](#%28part._.More_.Liberal_.Sequences_of_.Operations%29)
    |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|       [17.3.3 更自由的操作序列](#%28part._.More_.Liberal_.Sequences_of_.Operations%29)
    |'
- en: '|       [17.3.4 A Second Analysis](#%28part._.A_.Second_.Analysis%29) |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|       [17.3.4 第二次分析](#%28part._.A_.Second_.Analysis%29) |'
- en: '|       [17.3.5 Amortization Versus Individual Operations](#%28part._worst-case-ops-amort%29)
    |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|       [17.3.5 摊销与单个操作](#%28part._worst-case-ops-amort%29) |'
- en: '|     [17.4 Reading More](#%28part._.Reading_.More%29) |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|     [17.4 进一步阅读](#%28part._.Reading_.More%29) |'
- en: In [Predicting Growth](predicting-growth.html), we introduced the idea of big-Oh
    complexity to measure the worst-case time of a computation. As we saw in [Choosing
    Between Representations](set-representations.html#%28part._choosing-set-reps%29),
    however, this is sometimes too coarse a bound when the complexity is heavily dependent
    on the exact sequence of operations run. Now, we will consider a different style
    of complexity analysis that better accommodates operation sequences.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[预测增长](predicting-growth.html)中，我们介绍了大O复杂性的概念，以衡量计算的最坏情况时间。然而，正如我们在[选择表示方法](set-representations.html#%28part._choosing-set-reps%29)中看到的，当复杂性严重依赖于运行的确切操作序列时，这有时会是一个过于粗糙的界限。现在，我们将考虑一种不同风格的复杂性分析，更好地适应操作序列。
- en: 17.1A First Example
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.1第一个例子
- en: Consider, for instance, a set that starts out empty, followed by a sequence
    of \(k\) insertions and then \(k\) membership tests, and suppose we are using
    the representation without duplicates. Insertion time is proportional to the size
    of the set (and list); this is initially \(0\), then \(1\), and so on, until it
    reaches size \(k\). Therefore, the total cost of the sequence of insertions is
    \(k \cdot (k+1) / 2\). The membership tests cost \(k\) each in the worst case,
    because we’ve inserted up to \(k\) distinct elements into the set. The total time
    is then
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个起初为空的集合，接着是一系列\(k\)个插入操作，然后是\(k\)个成员测试，假设我们使用没有重复的表示。插入时间与集合（和列表）的大小成正比；这最初是\(0\)，然后是\(1\)，依此类推，直到达到大小\(k\)。因此，插入序列的总成本是\(k
    \cdot (k+1) / 2\)。成员测试在最坏情况下每个需要花费\(k\)，因为我们已经向集合中插入了多达\(k\)个不同的元素。因此，总时间为
- en: \begin{equation*}k^2 / 2 + k / 2 + k^2\end{equation*}
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: \begin{equation*}k^2 / 2 + k / 2 + k^2\end{equation*}
- en: for a total of \(2k\) operations, yielding an average of
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 总共\(2k\)个操作，平均产生
- en: \begin{equation*}\frac{3}{4} k + \frac{1}{4}\end{equation*}
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: \begin{equation*}\frac{3}{4} k + \frac{1}{4}\end{equation*}
- en: steps per operation in the worst case.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最坏情况下每个操作的步骤。
- en: 17.2The New Form of Analysis
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.2新形式的分析
- en: What have we computed? We are still computing a worst case cost, because we
    have taken the cost of each operation in the sequence in the worst case. We are
    then computing the average cost per operation. Therefore, this is a average of
    worst cases.Importantly, this is different from what is known as average-case
    analysis, which uses probability theory to compute the estimated cost of the computation.
    We have not used any probability here. Note that because this is an average per
    operation, it does not say anything about how bad any one operation can be (which,
    as we will see ([Amortization Versus Individual Operations](#%28part._worst-case-ops-amort%29)),
    can be quite a bit worse); it only says what their average is.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算了什么？我们仍然在计算最坏情况成本，因为我们已经在序列中每个操作的最坏情况下考虑了成本。然后，我们计算每个操作的平均成本。因此，这是最坏情况的平均值。重要的是，这与所谓的平均情况分析不同，后者使用概率论来计算计算的预估成本。我们这里没有使用任何概率。请注意，因为这是每个操作的平均值，它并不表示任何一个操作有多糟糕（正如我们将会看到的（[摊销与单个操作](#%28part._worst-case-ops-amort%29)），可能会更糟）；它只表示它们的平均值。
- en: In the above case, this new analysis did not yield any big surprises. We have
    found that on average we spend about \(k\) steps per operation; a big-Oh analysis
    would have told us that we’re performing \(2k\) operations with a cost of \(O([k
    \rightarrow k])\) each in the number of distinct elements; per operation, then,
    we are performing roughly linear work in the worst-case number of set elements.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，这种新的分析并没有带来什么大的惊喜。我们发现，平均每次操作都花费大约\(k\)步；大 O 分析会告诉我们，我们正在执行\(2k\)个具有成本\(O([k
    \rightarrow k])\)的操作，其中 k 是不同元素的数量；每次操作，我们都会在最坏情况下执行大约线性工作的数量。
- en: 'As we will soon see, however, this won’t always be the case: this new analysis
    can cough up pleasant surprises.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们很快会看到的，然而，这并不总是这样：这种新的分析可能会带来惊喜。
- en: Before we proceed, we should give this analysis its name. Formally, it is called
    amortized analysis. Amortization is the process of spreading a payment out over
    an extended but fixed term. In the same way, we spread out the cost of a computation
    over a fixed sequence, then determine how much each payment will be.I have given
    it a whimsical name because [Halloween](http://en.wikipedia.org/wiki/Halloween)
    is a(n American) holiday devoted to ghosts, ghouls, and other symbols of death.
    Amortization comes from the Latin root mort-, which means death, because an amortized
    analysis is one conducted “at the death”, i.e., at the end of a fixed sequence
    of operations.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们应该给这个分析起个名字。正式地说，它被称为摊销分析。摊销是将付款分摊到一个延长但固定的期限内的过程。同样，我们将计算的成本分摊到一个固定的序列中，然后确定每次付款的金额。我给它起了一个古怪的名字，因为[Halloween](http://en.wikipedia.org/wiki/Halloween)是一个致力于鬼魂、鬼怪和其他死亡象征的（美国）节日。摊销来自拉丁词根
    mort-，意思是死亡，因为摊销分析是在“死亡”时进行的，即在一系列固定的操作结束时进行的。
- en: '17.3An Example: Queues from Lists'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.3 一个例子：列表中的队列
- en: 'We have already seen lists [REF] and sets ((part "sets")). Now let’s consider
    another fundamental computer science data structure: the queue. A queue is a linear,
    ordered data structure, just like a list; however, the set of operations they
    offer is different. In a list, the traditional operations follow a last-in, first-out
    discipline: .first returns the element most recently linked. In contrast, a queue
    follows a first-in, first-out discipline. That is, a list can be visualized as
    a stack, while a queue can be visualized as a conveyer belt.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了列表[REF]和集合((part "sets"))。现在让我们考虑另一种基本的计算机科学数据结构：队列。队列是一种线性的、有序的数据结构，就像列表一样；然而，它们提供的操作集是不同的。在列表中，传统的操作遵循先进先出的原则：.first
    返回最近链接的元素。相反，队列遵循先进先出的原则。也就是说，一个列表可以被视为堆栈，而一个队列可以被视为传送带。
- en: 17.3.1List Representations
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.3.1 列表表示
- en: 'We can define queues using lists in the natural way: every enqueue is implemented
    with link, while every dequeue requires traversing the whole list until its end.
    Conversely, we could make enqueuing traverse to the end, and dequeuing correspond
    to .rest. Either way, one of these operations will take constant time while the
    other will be linear in the length of the list representing the queue.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以自然的方式使用列表定义队列：每个入队都是通过链接实现的，而每个出队则需要遍历整个列表直到其末尾。相反，我们也可以使入队遍历到末尾，而出队对应于
    .rest。无论哪种方式，其中一个操作将在表示队列的列表长度上花费恒定的时间，而另一个将是线性的。
- en: In fact, however, the above paragraph contains a key insight that will let us
    do better.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，上面的段落包含了一个关键的见解，这将让我们做得更好。
- en: Observe that if we store the queue in a list with most-recently-enqueued element
    first, enqueuing is cheap (constant time). In contrast, if we store the queue
    in the reverse order, then dequeuing is constant time. It would be wonderful if
    we could have both, but once we pick an order we must give up one or the other.
    Unless, that is, we pick...both.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果我们将队列存储在列表中，最近入队的元素放在前面，那么入队是廉价的（恒定时间）。相反，如果我们以相反的顺序存储队列，那么出队就是恒定时间的。如果我们能够两者兼得，那就太好了，但一旦我们选择了顺序，我们就必须放弃其中一个。除非我们选择...两者。
- en: 'One half of this is easy. We simply enqueue elements into a list with the most
    recent addition first. Now for the (first) crucial insight: when we need to dequeue,
    we reverse the list. Now, dequeuing also takes constant time.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这一半很容易。我们只需将元素入队到列表中，最近添加的元素放在最前面。现在关键的（第一个）见解：当我们需要出队时，我们将列表反转。现在，出队也只需要恒定的时间。
- en: 17.3.2A First Analysis
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.3.2 第一次分析
- en: Of course, to fully analyze the complexity of this data structure, we must also
    account for the reversal. In the worst case, we might argue that any operation
    might reverse (because it might be the first dequeue); therefore, the worst-case
    time of any operation is the time it takes to reverse, which is linear in the
    length of the list (which corresponds to the elements of the queue).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，要完全分析这种数据结构的复杂性，我们还必须考虑到反转。在最坏的情况下，我们可以认为任何操作都可能反转（因为它可能是第一个出队）；因此，任何操作的最坏情况时间是反转所需的时间，这与列表长度成正比（这对应于队列的元素）。
- en: However, this answer should be unsatisfying. If we perform \(k\) enqueues followed
    by \(k\) dequeues, then each of the enqueues takes one step; each of the last
    \(k-1\) dequeues takes one step; and only the first dequeue requires a reversal,
    which takes steps proportional to the number of elements in the list, which at
    that point is \(k\). Thus, the total cost of operations for this sequence is \(k
    \cdot 1 + k + (k-1) \cdot 1 = 3k-1\) for a total of \(2k\) operations, giving
    an amortized complexity of effectively constant time per operation!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个答案可能不令人满意。如果我们执行\(k\)个入队操作，然后是\(k\)个出队操作，那么每个入队操作都需要一步；最后\(k-1\)个出队操作中的每个都需要一步；只有第一个出队操作需要反转，这需要与列表中元素数量成正比的步骤，此时列表的长度为\(k\)。因此，此序列的操作总成本为\(k
    \cdot 1 + k + (k-1) \cdot 1 = 3k-1\)，共\(2k\)次操作，每个操作的摊销复杂度有效地为常数时间！
- en: 17.3.3More Liberal Sequences of Operations
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.3.3更自由的操作序列
- en: 'In the process of this, however, I’ve quietly glossed over something you’ve
    probably noticed: in our candidate sequence all dequeues followed all enqueues.
    What happens on the next enqueue? Because the list is now reversed, it will have
    to take a linear amount of time! So we have only partially solved the problem.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我已经悄悄忽略了你可能注意到的一些事情：在我们的候选序列中，所有出队都紧跟着所有入队。下一个入队会发生什么？因为列表现在被反转了，所以它将需要花费线性数量的时间！所以我们只是部分解决了这个问题。
- en: 'Now we can introduce the second insight: have two lists instead of one. One
    of them will be the tail of the queue, where new elements get enqueued; the other
    will be the head of the queue, where they get dequeued:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以引入第二个见解：使用两个列表而不是一个。其中一个将是队列的尾部，新元素在其中入队；另一个将是队列的头部，元素在其中出队：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Provided the tail is stored so that the most recent element is the first, then
    enqueuing takes constant time:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尾部被存储，以便最近的元素是第一个，那么入队操作只需要常数时间：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For dequeuing to take constant time, the head of the queue must be stored in
    the reverse direction. However, how does any element ever get from the tail to
    the head? Easy: when we try to dequeue and find no elements in the head, we reverse
    the (entire) tail into the head (resulting in an empty tail). We will first define
    a datatype to represent the response from dequeuing:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要使出队操作花费常数时间，队列的头部必须以相反的方向存储。然而，任何元素如何从尾部移动到头部呢？很简单：当我们尝试出队并发现头部没有元素时，我们将整个尾部反转到头部（导致尾部为空）。我们将首先定义一个数据类型来表示出队的响应：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now for the implementation of dequeue:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现出队操作：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 17.3.4A Second Analysis
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.3.4A 第二次分析
- en: We can now reason about sequences of operations as we did before, by adding
    up costs and averaging. However, another way to think of it is this. Let’s give
    each element in the queue three “credits”. Each credit can be used for one constant-time
    operation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以像之前一样推理操作序列，通过累加成本并求平均。然而，另一种思考方法是这样的。让我们给队列中的每个元素三个“信用”。每个信用可以用于一个常数时间操作。
- en: One credit gets used up in enqueuing. So long as the element stays in the tail
    list, it still has two credits to spare. When it needs to be moved to the head
    list, it spends one more credit in the link step of reversal. Finally, the dequeuing
    operation performs one operation too.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个信用在入队时被用完。只要元素保留在尾部列表中，它仍然有两个备用信用。当它需要移动到头部列表时，在反转的链接步骤中再花费一个信用。最后，出队操作也执行一次操作。
- en: Because the element does not run out of credits, we know it must have had enough.
    These credits reflect the cost of operations on that element. From this (very
    informal) analysis, we can conclude that in the worst case, any permutation of
    enqueues and dequeues will still cost only a constant amount of amortized time.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因为元素没有用尽信用，所以我们知道它必须有足够的信用。这些信用反映了对该元素的操作成本。通过这个（非常非正式的）分析，我们可以得出结论：在最坏的情况下，任何入队和出队的排列顺序仍然只需摊销的常数时间。
- en: 17.3.5Amortization Versus Individual Operations
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.3.5摊销与个别操作
- en: Note, however, that the constant represents an average across the sequence of
    operations. It does not put a bound on the cost of any one operation. Indeed,
    as we have seen above, when dequeue finds the head list empty it reverses the
    tail, which takes time linear in the size of the tail—<wbr>not constant at all!
    Therefore, we should be careful to not assume that every step in the sequence
    will is bounded. Nevertheless, an amortized analysis sometimes gives us a much
    more nuanced understanding of the real behavior of a data structure than a worst-case
    analysis does on its own.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个常数代表了一系列操作的平均值。它并不限制任何一个操作的成本。事实上，正如我们在上面看到的，当出队操作发现头部列表为空时，它会反转尾部，这需要与尾部大小成线性时间—<wbr>根本不是常数！因此，我们应该小心，不要假设序列中的每一步都是有界的。然而，摊销分析有时会给我们比最坏情况分析更加细致的了解数据结构真实行为。
- en: 17.4Reading More
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.4阅读更多
- en: At this point I have only briefly touched on the subject of amortized analysis.
    A very nice [tutorial by Rebecca Fiebrink](http://www.cs.princeton.edu/~fiebrink/423/AmortizedAnalysisExplained_Fiebrink.pdf)
    provides much more information. The authoritative book on algorithms, Introduction
    to Algorithms by Cormen, Leiserson, Rivest, and Stein, covers amortized analysis
    in extensive detail.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我只是简要涉及了摊销分析的主题。一篇非常好的[由Rebecca Fiebrink撰写的教程](http://www.cs.princeton.edu/~fiebrink/423/AmortizedAnalysisExplained_Fiebrink.pdf)提供了更多信息。算法权威书籍《算法导论》由Cormen、Leiserson、Rivest和Stein详细介绍了摊销分析。
