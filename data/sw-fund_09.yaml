- en: MapsTotal and Partial Maps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MapsTotal 和 Partial Maps
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Coq Standard Library
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Coq 标准库
- en: One small digression before we get to maps.
  id: totrans-3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们讨论映射之前稍作偏离。
- en: Unlike the chapters we have seen so far, this one does not
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与我们迄今为止看到的章节不同，这一章不
- en: Require Import the chapter before it (and, transitively, all the
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要导入之前的章节（以及传递性地，所有
- en: earlier chapters).  Instead, in this chapter and from now, on
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 早期章节）。相反，在这一章以及以后
- en: we're going to import the definitions and theorems we need
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将导入我们需要的定义和定理
- en: directly from Coq's standard library stuff.  You should not notice
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 直接从 Coq 的标准库中导入。你不应该注意到
- en: much difference, though, because we've been careful to name our
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 很大的区别，因为我们已经小心地命名了我们��
- en: own definitions and theorems the same as their counterparts in the
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自定义定义和定理与标准库中的对应物相同
- en: standard library, wherever they overlap.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标准库中找到，无论它们是否重叠。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Documentation for the standard library can be found at
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标准库的文档可以在
- en: '[http://coq.inria.fr/library/](http://coq.inria.fr/library/).'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://coq.inria.fr/library/](http://coq.inria.fr/library/).'
- en: The Search command is a good way to look for theorems involving
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用搜索命令是查找涉及定理的好方法
- en: objects of specific types.  Take a minute now to experiment with it.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定类型的对象。现在花一分钟来尝试一下。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Inductive id : Type :='
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '归纳 id : Type :='
- en: '| Id : string → id.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '| Id : string → id。'
- en: Definition beq_id x y :=
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 beq_id x y =
- en: match x,y with
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 x,y，
- en: '| Id n[1], Id n[2] ⇒ if string_dec n[1] n[2] then true else false'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '| Id n[1], Id n[2] ⇒ 如果 string_dec n[1] n[2] 则返回 true，否则返回 false。'
- en: end.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: end.
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Theorem beq_id_refl : ∀id, true = beq_id id id.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 'Theorem beq_id_refl : ∀id, true = beq_id id id。'
- en: Proof.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof.
- en: intros [n]. simpl. destruct ([string_dec](http://coq.inria.fr/library/Coq.Strings.String.html#string_dec)
    n n).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: intros [n]. 简化。 destruct ([string_dec](http://coq.inria.fr/library/Coq.Strings.String.html#string_dec)
    n n).
- en: '- reflexivity.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '- reflexivity.'
- en: '- destruct n[0]. reflexivity.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '- destruct n[0]. reflexivity.'
- en: Qed.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Qed。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Theorem beq_id_true_iff : ∀x y : id,'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'Theorem beq_id_true_iff : ∀x y : id，'
- en: beq_id x y = true ↔ x = y.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: beq_id x y = true ↔ x = y。
- en: Proof.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof.
- en: intros [n[1]] [n[2]].
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: intros [n[1]] [n[2]]。
- en: unfold [beq_id](Maps.html#beq_id).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 展开 [beq_id](Maps.html#beq_id)。
- en: destruct ([string_dec](http://coq.inria.fr/library/Coq.Strings.String.html#string_dec)
    n[1] n[2]).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: destruct ([string_dec](http://coq.inria.fr/library/Coq.Strings.String.html#string_dec)
    n[1] n[2])。
- en: '- subst. split. reflexivity. reflexivity.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '- 替换。分割。 reflexivity。 reflexivity。'
- en: '- split.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '- 分割。'
- en: + intros contra. inversion contra.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: + intros contra. 反演 contra。
- en: + intros H. inversion H. subst. destruct n. reflexivity.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: + intros H. inversion H. subst. destruct n. reflexivity.
- en: Qed.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Qed.
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Theorem beq_id_false_iff : ∀x y : id,'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'Theorem beq_id_false_iff : ∀x y : id，'
- en: beq_id x y = false
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: beq_id x y = false
- en: ↔ x ≠ y.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ↔ x ≠ y.
- en: Proof.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof.
- en: intros x y. rewrite ← [beq_id_true_iff](Maps.html#beq_id_true_iff).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: intros x y. 重写 ← [beq_id_true_iff](Maps.html#beq_id_true_iff)。
- en: rewrite [not_true_iff_false](http://coq.inria.fr/library/Coq.Bool.Bool.html#not_true_iff_false).
    reflexivity. Qed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: rewrite [not_true_iff_false](http://coq.inria.fr/library/Coq.Bool.Bool.html#not_true_iff_false).
    reflexivity. Qed.
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Theorem false_beq_id : ∀x y : id,'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 'Theorem false_beq_id : ∀x y : id，'
- en: x ≠ y
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: x ≠ y
- en: → beq_id x y = false.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: → beq_id x y = false。
- en: Proof.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof。
- en: intros x y. rewrite [beq_id_false_iff](Maps.html#beq_id_false_iff).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: intros x y. rewrite [beq_id_false_iff](Maps.html#beq_id_false_iff).
- en: intros H. apply H. Qed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: intros H. 应用 H. Qed.
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Definition total_map (A:Type) := id → A.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 total_map (A:Type) := id → A。
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Definition t_empty {A:Type} (v : A) : total_map A :='
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 'Definition t_empty {A:Type} (v : A) : total_map A :='
- en: (fun _ ⇒ v).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: (fun _ ⇒ v)。
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Definition t_update {A:Type} (m : total_map A)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 'Definition t_update {A:Type} (m : total_map A)'
- en: '(x : id) (v : A) :='
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '(x : id) (v : A) ='
- en: fun x' ⇒ if beq_id x x' then v else m x'.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: fun x' ⇒ 如果 beq_id x x' 则返回 v，否则返回 m x'。
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Definition examplemap :=
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Definition examplemap :=
- en: t_update (t_update (t_empty false) (Id "foo") false)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: t_update (t_update (t_empty false) (Id "foo") false)
- en: (Id "bar") true.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: (Id "bar") true。
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Example update_example1 : examplemap (Id "baz") = false.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 'Example update_example1 : examplemap (Id "baz") = false.'
- en: Proof. reflexivity. Qed.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof. reflexivity. Qed。
- en: 'Example update_example2 : examplemap (Id "foo") = false.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'Example update_example2 : examplemap (Id "foo") = false.'
- en: Proof. reflexivity. Qed.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof. reflexivity. Qed。
- en: 'Example update_example3 : examplemap (Id "quux") = false.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 'Example update_example3 : examplemap (Id "quux") = false。'
- en: Proof. reflexivity. Qed.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof. reflexivity. Qed。
- en: 'Example update_example4 : examplemap (Id "bar") = true.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 'Example update_example4 : examplemap (Id "bar") = true。'
- en: Proof. reflexivity. Qed.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Proof. reflexivity. Qed.
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Lemma t_apply_empty:  ∀A x v, @t_empty A v x = v.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 'Lemma t_apply_empty:  ∀A x v, @t_empty A v x = v.'
- en: Proof.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Proof.
- en: (* FILL IN HERE *) Admitted.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写内容 *) Admitted.
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Lemma t_update_eq : ∀A (m: total_map A) x v,'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 'Lemma t_update_eq : ∀A (m: total_map A) x v，'
- en: (t_update m x v) x = v.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: (t_update m x v) x = v。
- en: Proof.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Proof。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写内容 *) Admitted。
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Theorem t_update_neq : ∀(X:Type) v x[1] x[2]'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'Theorem t_update_neq : ∀(X:Type) v x[1] x[2]'
- en: '(m : total_map X),'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '（m : total_map X），'
- en: x[1] ≠ x[2] →
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: x[1] ≠ x[2] →
- en: (t_update m x[1] v) x[2] = m x[2].
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: (t_update m x[1] v) x[2] = m x[2]。
- en: Proof.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Proof.
- en: (* FILL IN HERE *) Admitted.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在这里填写内容 *) Admitted.
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Lemma t_update_shadow : ∀A (m: total_map A) v[1] v[2] x,'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 t_update_shadow：∀A（m：完全映射 A）v[1] v[2] x，
- en: t_update (t_update m x v[1]) x v[2]
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: t_update (t_update m x v[1]) x v[2]
- en: = t_update m x v[2].
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: = t_update m x v[2]。
- en: Proof.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写 *) 已承认。
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Lemma beq_idP : ∀x y, reflect (x = y) (beq_id x y).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 引理 beq_idP：∀x y，reflect (x = y) (beq_id x y)。
- en: Proof.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写 *) 已承认。
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Theorem t_update_same : ∀X x (m : total_map X),'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 t_update_same：∀X x（m：完全映射 X），
- en: t_update m x (m x) = m.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: t_update m x (m x) = m.
- en: Proof.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写 *) 已承认。
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Theorem t_update_permute : ∀(X:Type) v[1] v[2] x[1] x[2]'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 定理 t_update_permute：∀（X：类型）v[1] v[2] x[1] x[2]
- en: '(m : total_map X),'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: （m：完全映射 X），
- en: x[2] ≠ x[1] →
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: x[2] ≠ x[1] →
- en: (t_update (t_update m x[2] v[2]) x[1] v[1])
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: （t_update (t_update m x[2] v[2]) x[1] v[1])
- en: = (t_update (t_update m x[1] v[1]) x[2] v[2]).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: =（t_update (t_update m x[1] v[1]) x[2] v[2]）。
- en: Proof.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: (* FILL IN HERE *) Admitted.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: (* 在此填写 *) 已承认。
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Partial maps
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部分映射
- en: Finally, we define *partial maps* on top of total maps.  A partial
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，我们定义了*部分映射*在完全映射之上。
- en: map with elements of type A is simply a total map with elements
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有类型 A 元素的映射简单地是具有元素的完全映射。
- en: of type option A and default element None.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有选项 A 类型和默认元素 None 的类型。
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We now straightforwardly lift all of the basic lemmas about total
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们直接推广所有关于完全映射的基本引理
- en: maps to partial maps.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射到部分映射。
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
