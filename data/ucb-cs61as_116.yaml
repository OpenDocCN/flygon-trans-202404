- en: Lesson 10 Intro
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10课简介
- en: Prerequisites and What to Expect
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件和期望
- en: Before proceeding, you should understand how to manipulate lists. Consider reviewing
    key procedures like `map` and `filter`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，您应该了解如何操作列表。考虑复习`map`和`filter`等关键过程。
- en: In this section, we'll learn about streams and some of their applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关流及其一些应用的知识。
- en: Readings
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读物
- en: This lesson is based on [SICP 3.5](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%_sec_3.5).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程基于[SICP 3.5](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%_sec_3.5)。
- en: Introduction to Streams
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流介绍
- en: We've gained a good understanding of assignment as a tool in modeling, as well
    as an appreciation of the complex problems that assignment raises. It is time
    to ask whether we could have gone about things in a different way, so as to avoid
    some of these problems. In this section, we explore an alternative approach to
    modeling state, based on data structures called streams. As we shall see, streams
    can mitigate some of the complexity of modeling state.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对赋值作为建模工具有了很好的理解，也对赋值引起的复杂问题有了一定的认识。现在是时候问问我们是否可以以不同的方式去做事情，以避免其中一些问题。在本节中，我们探讨了一种基于称为流的数据结构的替代建模状态的方法。正如我们将看到的，流可以减轻建模状态的一些复杂性。
- en: 'Let''s step back and review where this complexity comes from. In an attempt
    to model real-world phenomena, we made some apparently reasonable decisions: We
    modeled real-world objects with local state by computational objects with local
    variables. We identified time variation in the real world with time variation
    in the computer. We implemented the time variation of the states of the model
    objects in the computer with assignments to the local variables of the model objects.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们退一步，回顾这种复杂性的根源。为了模拟现实世界的现象，我们做出了一些看似合理的决定：我们用具有局部变量的计算对象来模拟具有局部状态的现实世界对象。我们将现实世界中的时间变化与计算机中的时间变化相对应。我们通过对模型对象的局部变量进行赋值来实现计算机中模型对象的状态变化。
- en: Is there another approach? Can we avoid identifying time in the computer with
    time in the modeled world? Must we make the model change with time in order to
    model phenomena in a changing world? Think about the issue in terms of mathematical
    functions. We can describe the time-varying behavior of a quantity x as a function
    of time x(t). If we concentrate on x instant by instant, we think of it as a changing
    quantity. Yet if we concentrate on the entire time history of values, we do not
    emphasize change-the function itself does not change.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 是否有另一种方法？我们能否避免将计算机中的时间与建模世界中的时间相对应？我们必须使模型随时间变化以模拟变化世界中的现象吗？以数学函数的角度思考这个问题。我们可以将数量x随时间的变化行为描述为时间的函数x(t)。如果我们一瞬间地专注于x，我们会认为它是一个变化的数量。然而，如果我们专注于值的整个时间历史，我们并不强调变化-函数本身并不改变。
- en: If time is measured in discrete steps, then we can model a time function as
    a (possibly infinite) sequence. In this section, we will see how to model change
    in terms of sequences that represent the time histories of the systems being modeled.
    To accomplish this, we introduce new data structures called streams. From an abstract
    point of view, a stream is simply a sequence. However, we will find that the straightforward
    implementation of streams as lists (as in section 2.2.1) doesn't fully reveal
    the power of stream processing. As an alternative, we introduce the technique
    of delayed evaluation, which enables us to represent very large (even infinite)
    sequences as streams.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果时间以离散步骤来衡量，那么我们可以将时间函数建模为（可能是无限的）序列。在本节中，我们将看到如何通过代表被建模系统的时间历史的序列来建模变化。为了实现这一点，我们引入了称为流的新数据结构。从抽象的角度来看，流只是一个序列。然而，我们会发现，将流的直接实现作为列表（如第2.2.1节中）并不能充分展现流处理的强大功能。作为替代方案，我们引入了延迟评估技术，这使我们能够将非常大（甚至是无限的）序列表示为流。
- en: Stream processing lets us model systems that have state without ever using assignment
    or mutable data. This has important implications, both theoretical and practical,
    because we can build models that avoid the drawbacks inherent in introducing assignment.
    On the other hand, the stream framework raises difficulties of its own, and the
    question of which modeling technique leads to more modular and more easily maintained
    systems remains open.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 流处理使我们能够建模具有状态的系统，而无需使用赋值或可变数据。这具有重要的理论和实际意义，因为我们可以构建避免引入赋值固有缺陷的模型。另一方面，流框架也带来了自己的困难，关于哪种建模技术会导致更模块化和更易维护的系统的问题仍然是开放的。
- en: List Inefficiency
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表效率低下
- en: Since Lesson 4, we've been using lists to represent sequences. But there are
    downsides to list representations. Manipulating these list sequences require that
    our programs construct and copy data structures (which could be huge) at every
    step of the process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 自第四课以来，我们一直使用列表来表示序列。但是列表表示法也有缺点。操作这些列表序列需要我们的程序在每个步骤中构造和复制数据结构（可能很大）。
- en: 'Let''s see this in action. This procedure is written in the iterative style
    we know and love:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个实际操作。这个过程是以我们熟悉和喜爱的迭代风格编写的：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This second procedure makes use of `accumulate`, `filter`, and `enumerate-interval`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第二个过程利用了`accumulate`、`filter`和`enumerate-interval`。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In carrying out the computation, the first program needs only to store the sum
    being accumulated. In contrast, the `filter` in the second program cannot do any
    testing until `enumerate-interval` has constructed a complete list of the numbers
    in the interval. The `filter` generates another list, which in turn is passed
    to `accumulate` before being collapsed to form a sum.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行计算时，第一个程序只需要存储正在累积的总和。相比之下，第二个程序中的`filter`在`enumerate-interval`构造完整个区间的数字列表之前无法进行任何测试。`filter`生成另一个列表，然后传递给`accumulate`，最后被折叠成一个总和。
- en: Such large intermediate storage is not needed by the first program, which we
    can think of as enumerating the interval incrementally, adding each prime to the
    sum as it is generated.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个程序不需要这样大的中间存储，我们可以将其视为逐步枚举间隔，每生成一个质数就将其加到总和中。
- en: 'Here''s another example of list inefficiency:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是列表效率低下的另一个例子：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code generates a huge list of integers and a huge list of primes, even
    though we only want the second prime number!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们只想要第二个质数，但这段代码生成了一个巨大的整数列表和一个巨大的质数列表！
- en: Why Streams?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要用流？
- en: 'With streams, we can manipulate sequences without incurring the costs of manipulating
    sequences as lists. With streams we can achieve the best of both worlds: We can
    formulate programs elegantly as sequence manipulations, while attaining the efficiency
    of incremental computation. The basic idea is to construct a stream only partially,
    and to pass the partial construction to the program that consumes the stream.
    If the consumer attempts to access a part of the stream that has not yet been
    constructed, the stream will automatically construct just enough more of itself
    to produce the required part, thus preserving the illusion that the entire stream
    exists. In other words, although we will write programs as if we were processing
    complete sequences, we design our stream implementation to automatically and transparently
    interleave the construction of the stream with its use.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用流，我们可以操纵序列而不会产生操纵列表序列的成本。使用流，我们可以兼得两全：我们可以优雅地构建程序作为序列操作，同时实现增量计算的效率。基本思想是只部分构造流，并将部分构造传递给消费流的程序。如果消费者尝试访问尚未构造的流的一部分，流将自动构造足够多的自身来生成所需的部分，从而保持整个流存在的幻觉。换句话说，尽管我们将编写程序，好像我们正在处理完整的序列，但我们的流实现设计为自动透明地将流的构造与其使用交错。
