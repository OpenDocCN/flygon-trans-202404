- en: 値の評価と表示
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 值的评估与显示
- en: 原文：[https://jsprimer.net/basic/read-eval-print/](https://jsprimer.net/basic/read-eval-print/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://jsprimer.net/basic/read-eval-print/](https://jsprimer.net/basic/read-eval-print/)
- en: 変数宣言を使うことで値に名前をつける方法を学びました。 次はその値をどのように評価するかについてです。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了使用变量声明来给值命名的方法。 下面是如何对这些值进行评估的说明。
- en: 値の評価とは、入力した値を評価してその結果を返すことを示しています。 たとえば、次のような値の評価があります。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 值的评估意味着对输入的值进行评估并返回结果。 例如，以下是一些值的评估示例。
- en: '`1 + 1` という式を評価したら `2` という結果を返す'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估表达式`1 + 1`后，将返回结果`2`
- en: '`bookTitle` という変数を評価したら、変数に代入されている値を返す'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估变量`bookTitle`后，将返回变量的值
- en: '`const x = 1;`という文を評価することで変数を定義するが、この文には返り値はない'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过评估文本`const x = 1;`，定义了一个变量，但该文本没有返回值
- en: この値の評価方法を確認するために、ウェブブラウザ（以下ブラウザ）を使ってJavaScriptを実行する方法を見ていきます。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证这种值的评估方法，我们将看看如何在Web浏览器（以下简称浏览器）中执行JavaScript代码。
- en: '[](#recommended-browser)*この書籍で利用するブラウザ*'
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#recommended-browser)*本书中使用的浏览器*'
- en: '*まずはブラウザ上でJavaScriptのコードを実行してみましょう。 この書籍ではブラウザとして[Firefox](https://www.mozilla.org/ja/firefox/new/)を利用します。
    次のURLからFirefoxをダウンロードし、インストールしてください。'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，在浏览器中执行JavaScript代码。 本书中将使用[Firefox](https://www.mozilla.org/ja/firefox/new/)作为浏览器。
    请从以下URL下载和安装Firefox。'
- en: 'Firefox: [https://www.mozilla.org/ja/firefox/new/](https://www.mozilla.org/ja/firefox/new/)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Firefox: [https://www.mozilla.org/ja/firefox/new/](https://www.mozilla.org/ja/firefox/new/)'
- en: この書籍で紹介するサンプルコードのほとんどは、Google Chrome、Microsoft Edge、Safariなどのブラウザの最新版でも動作します。
    一方で、古いJavaScriptしかサポートしていないInternet Explorerでは多くのコードは動作しません。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数本书介绍的示例代码也适用于Google Chrome、Microsoft Edge、Safari等浏览器的最新版本。 但是，老旧的仅支持旧版JavaScript的Internet
    Explorer可能无法运行许多代码。
- en: また、ブラウザによっては標準化されていないエラーメッセージの細かな違いや開発者ツールの使い方の違いなどもあります。 この書籍ではFirefoxで実行した結果を記載しています。
    そのため、Firefox以外のブラウザでは細かな違いがあることに注意してください。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，不同浏览器之间可能存在标准化的错误消息细微差异以及开发者工具使用方法的差异。 本书中描述的结果是在Firefox中执行的。 因此，请注意Firefox以外
- en: '[](#execute-js-on-browser)*ブラウザでJavaScriptを実行する*'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#execute-js-on-browser)*在浏览器中执行JavaScript*'
- en: '*ブラウザでJavaScriptを実行する方法としては大きく分けて2つあります。 1つ目はブラウザの開発者ツールのコンソール上でJavaScriptコードを評価する方法です。
    2つ目はHTMLファイルを作成しJavaScriptコードを読み込む方法です。'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*有两种主要方法可以在浏览器中执行JavaScript。 第一种方法是在浏览器的开发者工具控制台中评估JavaScript代码。 第二种方法是创建HTML文件并加载JavaScript代码。'
- en: '[](#repl-on-browser)*ブラウザの開発者ツールのコンソール上でJavaScriptコードを評価する方法*'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#repl-on-browser)*在浏览器的开发者工具控制台中评估JavaScript代码的方法*'
- en: '*ブラウザやNode.jsなど多くの実行環境には、コードを評価してその結果を表示するREPL（read–eval–print loop）と呼ばれる開発者向けの機能があります。
    Firefoxでは、開発者ツールの**Webコンソール**と呼ばれるパネルにREPL機能が含まれています。 REPL機能を使うことで、試したいコードをその場で実行できるため、JavaScriptの動作を理解するのに役立ちます。'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*在浏览器或Node.js等许多执行环境中，存在一种称为REPL（读取-求值-输出循环）的面向开发者的功能，用于评估代码并显示其结果。 在Firefox中，REPL功能包含在名为**Web控制台**的面板中的开发者工具中。
    使用REPL功能，您可以即时在现场运行想要尝试的代码，这有助于理解JavaScript的工作原理。'
- en: REPL機能を使うには、まずFirefoxの開発者ツールを次のいずれかの方法で開きます。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用REPL功能，请先打开Firefox的开发者工具，方法如下。
- en: Firefox メニュー（メニューバーがある場合や macOS では、ツールメニュー）の "ブラウザーツール"のサブメニューから "ウェブ開発ツール"
    を選択する
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Firefox菜单（如果有菜单栏，或者在macOS上为工具菜单）中，选择"浏览器工具"下的子菜单"Web开发工具"
- en: キーボードショートカット Ctrl+Shift+K（macOS では Command+Option+K）を押下する
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下键盘快捷键 Ctrl+Shift+K（macOS 上为 Command+Option+K）
- en: 詳細は"[Firefox DevTools User Docs](https://firefox-source-docs.mozilla.org/devtools-user/)"を参照してください。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有关详细信息，请参阅"[Firefox DevTools用户文档](https://firefox-source-docs.mozilla.org/devtools-user/)"。
- en: '![FirefoxでWebコンソールを開いた状態](../Images/7bf80fb91c8081e2b4ce480186010261.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Firefox打开Web控制台的状态](../Images/7bf80fb91c8081e2b4ce480186010261.png)'
- en: 開発者ツールの"コンソール"タブを選択すると、コマンドライン（二重山カッコ`»`からはじまる欄）に任意のコードを入力し評価できます。 このコマンドラインがブラウザにおけるREPL機能です。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 选择开发者工具的"控制台"选项卡后，您可以在命令行（以双尖括号`»`开头）中输入任何代码并进行评估。 这个命令行就是浏览器中的REPL功能。
- en: REPLに`1`という値を入力しEnterキーを押すと、その評価結果である`1`が次の行に表示されます。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`1`到REPL中并按Enter键，将在下一行显示评估结果`1`。
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`1 + 1` という式を入力すると、その評価結果である`2`が次の行に表示されます。'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 输入表达式`1 + 1`，将在下一行显示评估结果`2`。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 次に`const`キーワードを使って`bookTitle`という変数を宣言してみると、`undefined`という結果が次の行に表示されます。 変数宣言は変数名と値を関連づけるだけであるため、変数宣言自体は何も値を返さないという意味で`undefined`が結果になります。
    REPLではそのまま次の入力ができるため、`bookTitle`という入力をすると、先ほど変数に入れた`"JavaScript Primer"`という結果が次の行に表示されます。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们尝试使用`const`关键字声明变量`bookTitle`，结果将在下一行显示为`undefined`。 变量声明仅与变量名和值相关联，因此变量声明本身不返回任何值，因此结果是`undefined`。
    由于REPL直接接受下一条输入，因此输入`bookTitle`，将在下一行显示之前分配给变量的`"JavaScript Primer"`的值。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: このようにコマンドラインのREPL機能では、JavaScriptのコードを1行ごとに実行できます。 Shift + Enterで改行して複数行の入力もできます。
    好きな単位でJavaScriptのコードを評価できるため、コードの動きを簡単に試したい場合などに利用できます。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行的REPL功能中，可以逐行执行JavaScript代码。 您还可以使用Shift + Enter换行以输入多行代码。 这使得您可以根据需要轻松地评估JavaScript代码的行为。
- en: 注意点としては、REPLではそのREPLを終了するまで`const`キーワードなどで宣言した変数が残り続けます。 たとえば、`const`での変数宣言は同じ変数名を二度定義できないというルールでした。
    そのため1行ずつ実行しても、同じ変数名を定義したことになるため構文エラー（`SyntaxError`）となります。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，只要REPL未结束，使用`const`关键字声明的变量将会保留。 例如，`const`关键字声明的变量不允许重复定义相同变量名。 因此，即使逐行执行，也将被视为重新定义相同变量名，从而导致语法错误（`SyntaxError`）。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ブラウザでは、開発者ツールを開いているウェブページでリロードするとREPLの実行状態もリセットされます。 `redeclaration`（再定義）に関するエラーメッセージが出た際にはページをリロードしてみてください。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，打开开发者工具的网页重新加载时，REPL的执行状态也将被重置。 当出现`redeclaration`（重新声明）错误消息时，请尝试重新加载页面。
- en: '[](#js-in-html)*HTMLファイルを作成しJavaScriptコードを読み込む方法*'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#js-in-html)*创建HTML文件并加载JavaScript代码的方法*'
- en: '*REPLはあくまで開発者向けの機能です。 ウェブサイトではHTMLに記述した`<script>`タグでJavaScriptを読み込み実行します。 ここでは、HTMLとJavaScriptファイルを使ったJavaScriptコードの実行方法を見ていきます。'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*REPL功能仅面向开发者。 在网页上，通过HTML中的`<script>`标签加载和执行JavaScript。 这里将介绍如何使用HTML和JavaScript文件执行JavaScript代码。'
- en: HTMLファイルとJavaScriptファイルの2種類を使い、JavaScriptのコードを実行する準備をしていきます。 ファイルを作成するため[Visual
    Studio Code](https://code.visualstudio.com/)などのJavaScriptに対応したエディターを用意しておくとスムーズです。
    エディターはどんなものでも問題ありませんが、必ず文字コード（エンコーディング）は**UTF-8**、改行コードは**LF**にしてファイルを保存してください。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTML文件和JavaScript文件两种类型，准备执行JavaScript代码。 准备一个支持JavaScript的编辑器，例如[Visual Studio
    Code](https://code.visualstudio.com/)，将使事情更加顺利。 编辑器可以是任何类型，但请务必将字符编码设置为**UTF-8**，换行符设置为**LF**，然后保存文件。
- en: ファイルを作成するディレクトリはどんな場所でも問題ありませんが、ここでは`example`という名前のディレクトリにファイルを作成していきます。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在任何位置创建文件夹，但是在这里，我们将在名为`example`的文件夹中创建文件。
- en: まずはJavaScriptファイルとして`index.js`ファイルを`example/index.js`というパスに作成します。 `index.js`の中には次のようなコードを書いておきます。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将`index.js`文件作为JavaScript文件创建在路径`example/index.js`中。 在`index.js`中写入以下代码。
- en: index.js
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: index.js
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 次にHTMLファイルとして`index.html`ファイルを`example/index.html`というパスに作成します。 このHTMLファイルから先ほど作成した`index.js`ファイルを読み込み実行します。
    `index.html`の中には次のようなコードを書いておきます。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`index.html`文件作为HTML文件创建在路径`example/index.html`中。 从这个HTML文件中加载并执行先前创建的`index.js`文件。
    在`index.html`中写入以下代码。
- en: index.html
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: index.html
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 重要なのは`<script src="./index.js"></script>`という記述です。 これは同じディレクトリにある`index.js`という名前のJavaScriptファイルをスクリプトとして読み込むという意味になります。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是`<script src="./index.js"></script>`这段描述。 这意味着将名为`index.js`的JavaScript文件作为脚本加载到同一目录中。
- en: 最後にブラウザで作成した`index.html`を開きます。 HTMLファイルを開くには、ブラウザにHTMLファイルをドラッグアンドドロップするかまたはファイルメニューから"ファイルを開く"でHTMLファイルを選択します。
    HTMLファイルを開いた際に、ブラウザのアドレスバーには`file:///`からはじまるローカルファイルのファイルパスが表示されます。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后打开浏览器中创建的`index.html`。 要打开HTML文件，请将HTML文件拖放到浏览器中，或者从文件菜单中选择“打开文件”并选择HTML文件。
    打开HTML文件后，浏览器地址栏将显示以`file:///`开头的本地文件路径。
- en: 先ほどと同じ手順で"Web コンソール"を開いてみると、コンソールには何も表示されていないはずです。 REPLでは自動で評価結果のコンソール表示まで行いますが、JavaScriptコードとして読み込んだ場合は勝手に評価結果を表示することはありません。
    あくまで自動表示はREPLの機能です。そのため多くの実行環境では**コンソール表示**するためのAPI（機能）が存在しています。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前相同的步骤打开"Web Console"后，控制台应该不会显示任何内容。 在REPL中，将自动显示评估结果，但是如果作为JavaScript代码加载，则不会自动显示评估结果。
    自动显示仅是REPL的功能。 因此，许多执行环境都提供用于**控制台显示**的API（功能）。
- en: '[](#console-api)*Console API*'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#console-api)*Console API*'
- en: '*JavaScriptの多くの実行環境では、Console APIを使って**コンソールに表示**します。 `console.log(引数)`の引数にコンソール表示したい値を渡すことで、評価結果がコンソールに表示されます。'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*在许多JavaScript执行环境中，可以使用Console API进行**控制台显示**。 通过将值传递给`console.log(参数)`的参数，将评估结果显示在控制台上。'
- en: 先ほどの`index.js`の中身を次のように書き換えます。 そしてページをリロードすると、 `1` という値を評価した結果がWebコンソールに表示されます。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将`index.js`的内容更改如下。 然后重新加载页面，`1`的评估结果将显示在Web控制台中。
- en: index.js
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: index.js
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 次のように引数に式を書いた場合は先に引数（`(`と`)`の間に書かれたもの）の式を評価してから、その結果をコンソールに表示します。 そのため、`1 +
    1` の評価結果として `2` がコンソールに表示されます。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当参数中写入表达式时，首先评估参数（写在`(`和`)`之间的内容），然后将结果显示在控制台上。 因此，`1 + 1`的评估结果将显示为`2`。
- en: index.js
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: index.js
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 同じように引数に変数を渡すこともできます。 この場合もまず先に引数である変数を評価してから、その結果をコンソールに表示します。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您也可以将变量作为参数传递。 在这种情况下，首先评估参数变量，然后将结果显示在控制台上。
- en: index.js
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: index.js
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Console APIは原始的なプリントデバッグとして利用できます。 「この値は何だろう」と思ったらコンソールに表示すると解決する問題は多いです。 またJavaScriptの開発環境は高機能化が進んでいるため、Console
    API以外にもさまざまな機能がありますがここでは詳細は省きます。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Console API可用作基本的打印调试工具。 当想知道某个值是什么时，将其显示在控制台上通常可以解决问题。 此外，由于JavaScript的开发环境变得功能强大，因此除了Console
    API之外，还有各种各样的功能，但在此我们将不详细介绍。
- en: この書籍では、コード内で評価結果を表示するためにConsole APIを利用していきます。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，将使用Console API来显示代码中的评估结果。
- en: すでに何度も登場していますが、コード内のコメントで`// => 評価結果`と書いている場合があります。 このコメントは、その左辺にある値を評価した結果またはConsole
    APIで表示した結果を掲載しています。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此处已经出现多次，但是在代码中的注释中可能会写有`// => 评估结果`。 这些注释列出了评估结果或通过Console API显示的结果。
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[](#execute-on-web)*ウェブ版の書籍でコードを実行する*'
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#execute-on-web)*在网络上执行代码*'
- en: '*ウェブ版の書籍では実行できるサンプルコードには**実行**というボタンが配置されています。 このボタンでは実行するたびに毎回新しい環境を作成して実行するため、REPLで発生する変数の再定義といった問題はおきません。'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*在网络上的书籍中，可以执行的示例代码附有名为**执行**的按钮。 通过这个按钮，每次执行时都会创建一个新环境来执行代码，因此不会出现REPL中出现的变量重新定义等问题。'
- en: 一方で、REPLと同じように`1`というコードを実行すると`1`という評価結果を得られます。 またConsole APIにも対応しています。サンプルコードを改変して実行するなど、よりコードへの理解を深めるために利用できます。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，执行代码`1`将返回评估结果`1`。 它也支持Console API。 您可以修改示例代码并运行以更深入地理解代码。
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[](#eval-code-and-error)*コードの評価とエラー*'
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#eval-code-and-error)*代码评估和错误*'
- en: '*JavaScriptのコードを実行したときにエラーメッセージが表示されて意図したように動かなかった場合もあるはずです。 プログラムを書くときに一度もエラーを出さずに書き終えることはほとんどありません。
    特に新しいプログラミング言語を学ぶ際にはトライアンドエラー（試行錯誤）することはとても重要です。'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*当执行JavaScript代码时，有时会出现错误消息，代码可能不会按预期运行。 写完程序而不出现错误几乎是不可能的。 特别是在学习新编程语言时，试错是非常重要的。'
- en: エラーメッセージがWebコンソールに表示された際には、あわてずにそのエラーメッセージを読むことで多くの問題は解決できます。 またエラーには大きく分けて構文エラーと実行時エラーの2種類があります。
    ここではエラーメッセージの簡単な読み方を知り、そのエラーを修正する足がかりを見ていきます。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当错误消息显示在Web控制台中时，仔细阅读错误消息通常可以解决许多问题。 错误主要分为语法错误和运行时错误两种。 这里我们将简要介绍如何阅读错误消息，并提供修复错误的线索。
- en: '[](#syntax-error)*構文エラー*'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#syntax-error)*语法错误*'
- en: '*構文エラーは書かれたコードの文法が間違っている場合に発生するエラーです。'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*语法错误是指代码的语法有误时发生的错误。'
- en: JavaScriptエンジンは、コードをパース（解釈）してから、プログラムとして実行できる形に変換して実行します。 コードをパースする際に文法の問題が見つかると、その時点で構文エラーが発生するためプログラムとして実行できません。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript引擎会对代码进行解析并转换为可执行的程序。 如果在解析代码时发现语法问题，将立即发生语法错误，因此无法将其作为程序执行。
- en: 次のコードでは、関数呼び出しに`)`をつけ忘れているため構文エラーが発生します。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码由于忘记给函数调用添加`)`而导致语法错误。
- en: index.js
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: index.js
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![SyntaxError in Console](../Images/f90303ffa951a7d54653b3303c10a37c.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![Console中的SyntaxError](../Images/f90303ffa951a7d54653b3303c10a37c.png)'
- en: Firefoxでこのコードを実行すると次のようなエラーメッセージがコンソールに表示されます。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Firefox中运行此代码会在控制台中显示以下错误消息。
- en: 'SyntaxError: missing ) after argument list[詳細] index.js:1:13'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'SyntaxError: missing ) after argument list[详细信息] index.js:1:13'
- en: エラーメッセージはブラウザによって多少の違いはありますが、基本的には同じ形式のメッセージになります。 このエラーメッセージをパーツごとに見てみると次のようになります。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 错误消息可能会因浏览器而异，但基本上具有相同的格式。 当分析这个错误消息的每个部分时，会看到以下内容。
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '| メッセージ | 意味 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 消息 | 意义 |'
- en: '| --- | --- |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `SyntaxError: missing ) after argument list` | エラーの種類は`SyntaxError`で、関数呼び出しの`)`が足りないこと
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `SyntaxError: missing ) after argument list` | 错误类型为`SyntaxError`，原因是函数调用缺少`)`
    |'
- en: '| `index.js:1:13` | 例外が`index.js`の1行目13列目で発生したこと |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `index.js:1:13` | 异常在`index.js`的第1行13列发生 |'
- en: Firefoxでは**[詳細]**というリンクがエラーメッセージによっては表示されます。 この**[詳細]**リンクはエラーメッセージに関するMDNの解説ページへのリンクとなっています。
    この例のエラーメッセージでは次の解説ページへリンクされています。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Firefox中，错误消息有时会显示一个名为**[详细信息]**的链接。 这个**[详细信息]**链接指向MDN的错误消息解释页面。 在这个例子中的错误消息链接如下。
- en: '[https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list)'
- en: このエラーメッセージや解説ページから、関数呼び出しの`)`が足りないため構文エラーとなっていることがわかります。 そのため、次のように足りない`)`を追加することでエラーを修正できます。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个错误消息和解释页面可以看出，由于函数调用缺少`)`导致了语法错误。因此，通过添加缺少的`)`可以修复错误。
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 構文エラーによっては少しエラーメッセージから意味が読み取りにくいものもあります。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有些语法错误的错误消息可能难以从中理解含义。
- en: 次のコードでは、`const`を`cosnt`とタイプミスしているため構文エラーが発生しています。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，由于将`const`拼写为`cosnt`，导致了语法错误。
- en: index.js
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: index.js
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'SyntaxError: unexpected token: identifier[詳細] index.js:1:6'
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'SyntaxError: unexpected token: identifier[详细信息] index.js:1:6'
- en: '| メッセージ | 意味 |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 消息 | 含义 |'
- en: '| --- | --- |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `SyntaxError: unexpected token: identifier` | エラーの種類は`SyntaxError`で、予期しない識別子（変数名
    `a`）が指定されている |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `SyntaxError: unexpected token: identifier` | 错误类型为`SyntaxError`，指定了意外的标识符（变量名
    `a`） |'
- en: '| `index.js:1:6` | 例外が`index.js`の1行目6列目で発生したこと |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `index.js:1:6` | 异常在`index.js`的第1行第6列发生 |'
- en: プログラムをパースする際に`index.js:1:6`で予期しない（構文として解釈できない）識別子が見つかったため、構文エラーが発生したという意味になります。
    1行目6列目（行は1から、列は0からカウントする）である`a`という文字列がおかしいということになります。 しかし、実際には`cosnt`というタイプミスがこの構文エラーの原因です。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当解析程序在`index.js:1:6`处发现意外的（无法解释为语法的）标识符时，就会发生语法错误。在第1行第6列（行从1开始，列从0开始计数）发现了一个名为`a`的字符串，这是不正确的。但实际上，`cosnt`的拼写错误是这个语法错误的原因。
- en: なぜこのようなエラーメッセージになるかというと、`cosnt`（`const`のタイプミス）はキーワードではないため、ただの変数名として解釈されます。
    そのため、このコードは次のようなコードであると解釈され、そのような文法は認められないということで構文エラーとなっています。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会出现这样的错误消息呢？因为`cosnt`（`const`的拼写错误）不是关键字，所以被解释为普通变量名。因此，这段代码被解释为以下代码，这种语法是不被允许的，因此出现了语法错误。
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: このようにエラーメッセージとエラーの原因は必ずしも一致しません。 しかし、構文エラーの原因はコードの書き間違いであることがほとんどです。 そのため、エラーが発生した位置やその周辺を注意深く見ることで、エラーの原因を特定できます。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 错误消息和错误原因并不总是匹配。但是，语法错误的原因通常是代码书写错误。因此，通过仔细查看错误发生的位置及周围内容，可以确定错误的原因。
- en: '[](#runtime-error)*実行時エラー*'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#runtime-error)*运行时错误*'
- en: '*実行時エラーはプログラムを実行している最中に発生するエラーです。 実行時（ランタイム）におきるエラーであるため、ランタイムエラーと呼ばれることもあります。
    APIに渡す値のデータ型の問題から起きる`TypeError`や存在しない変数を参照しようとして起きる`ReferenceError`などさまざまな種類があります。'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*运行时错误是在程序执行过程中发生的错误。由于是在运行时（runtime）发生的错误，因此也被称为运行时错误。由于API传递的值的数据类型问题导致的`TypeError`或尝试引用不存在的变量导致的`ReferenceError`等各种类型的错误都有可能发生。*'
- en: 実行時エラーが発生した場合は、そのコードは構文としては正しい（構文エラーではない）のですが、別のことが原因でエラーが発生しています。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生运行时错误时，该代码在语法上是正确的（不是语法错误），但由于其他原因导致了错误。
- en: 次のコードでは`x`という存在しない変数を参照したため、`ReferenceError`という実行時エラーが発生しています。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，由于引用了不存在的变量`x`，导致了`ReferenceError`这种运行时错误的发生。
- en: index.js
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: index.js
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'ReferenceError: x is not defined[詳細] index.js:2:1'
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'ReferenceError: x is not defined[详细信息] index.js:2:1'
- en: '| メッセージ | 意味 |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 消息 | 含义 |'
- en: '| --- | --- |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ReferenceError: x is not defined` | エラーの種類は`ReferenceError`で、`x`という未定義の識別子を参照したため発生
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `ReferenceError: x is not defined` | 错误类型为`ReferenceError`，因为引用了未定义的标识符`x`而发生
    |'
- en: '| `index.js:2:1` | 例外が`index.js`の2行目1列目で発生したこと |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `index.js:2:1` | 异常在`index.js`的第2行第1列发生 |'
- en: '`x`という変数や関数が存在するかは、実行してみないとわかりません。 そのため、実行して`x`という識別子を参照したときに、初めて`x`が存在するかが判明し、`x`が存在しない場合は`ReferenceError`となります。'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 变量或函数`x`是否存在，需要执行才能知道。因此，当首次引用`x`时，才会确定`x`是否存在，如果`x`不存在，则会出现`ReferenceError`。
- en: この例では、`value`変数を参照しているつもりで、`x`という存在しない変数を参照していたのが原因のようです。 先ほどのコードは、次のように参照する変数を`value`に変更すれば、エラーが修正できます。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，原因似乎是因为引用了不存在的变量`x`，而不是引用`value`变量。通过将引用的变量更改为`value`，可以修复错误。
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: このように、実行時エラーは該当する箇所を実行するまで、エラーになるかがわからない場合も多いのです。 そのため、どこまではちゃんと実行できたか順番に追っていくような、エラーの原因を特定する作業が必要になる場合があります。
    このようなエラーの原因を特定し、修正する作業のことを**デバッグ**と呼びます。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，运行时错误有时直到执行相关部分才会出现错误。因此，有时需要逐步检查已经正确执行到哪里，以确定错误的原因。这种确定错误原因并进行修复的工作称为**调试**。
- en: 実行時エラーは構文エラーに比べてエラーの種類も多く、その原因もプログラムの数だけあります。 そのため、エラーの原因を見つけることが大変な場合もあります。
    しかし、JavaScriptはとてもよく使われている言語なので、ウェブ上には類似するエラーを報告している人も多いです。 エラーメッセージで検索をしてみると、類似するエラーの原因と解消方法が見つかるケースもあります。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 与语法错误相比，运行时错误的类型更多，原因也各不相同。因此，有时很难找到错误的原因。但是，由于JavaScript是一种非常常用的语言，因此在网络上有很多人报告了类似的错误。通过搜索错误消息，有���可以找到类似错误的原因和解决方法。
- en: 実行時エラーが発生した際には、エラーが発生した行の周辺をよく見ることやエラーメッセージを調べてみることが大切です。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生运行时错误时，仔细查看发生错误的行周围内容和检查错误消息是很重要的。
- en: '[](#conclusion)*まとめ*'
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)*总结*'
- en: '*ブラウザ上でJavaScriptを実行する方法として開発者ツールを使う方法とHTMLからJavaScriptファイルを読み込む方法を紹介しました。
    「第一部 基本文法」で紹介するサンプルコードは基本的にこれらの方法で実行できます。 サンプルコードを自分なりに改変して実行してみるとより理解が深くなるため、サンプルコードの動作を自分自身で確認してみてください。'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用浏览器开发者工具执行JavaScript代码以及从HTML中加载JavaScript文件的方法已经介绍过。在“基本语法”部分介绍的示例代码基本上可以通过这些方法执行。尝试修改示例代码并执行，以加深理解，验证示例代码的运行结果。*'
- en: コードを実行してエラーが発生した場合にはエラーメッセージや位置情報などが表示されます。 これらのエラー情報を使ってデバッグすることでエラーの原因を取り除けるはずです。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行代码并出现错误时，会显示错误消息和位置信息。通过使用这些错误信息进行调试，应该可以找到错误的原因。
- en: JavaScriptにおいては多くのエラーはすでに類似するケースがウェブ上に報告されています。 構文エラーや実行時エラーの典型的なものはMDNの[JavaScript
    エラーリファレンス](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Errors)にまとめられています。
    また[Google](https://www.google.com/)、[GitHub](https://github.com/)、[Stack Overflow](https://stackoverflow.com/)などでエラーメッセージを検索することで、エラーの原因を見つけられることもあります。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，许多错误已经在网络上报告过类似的情况。MDN的[JavaScript错误参考](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Errors)中总结了典型的语法错误和运行时错误。此外，通过在[Google](https://www.google.com/)、[GitHub](https://github.com/)、[Stack
    Overflow](https://stackoverflow.com/)等网站上搜索错误消息，也可以找到错误的原因。
- en: エラーがWebコンソールに表示されているならば、そのエラーは修正できます。 エラーを過度に怖がる必要はありません。エラーメッセージなどのヒントを使ってエラーを修正していけるようにしましょう。**********
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果错误消息显示在Web控制台中，那么这个错误是可以修复的。不需要过分害怕错误。利用错误消息等提示修复错误。
