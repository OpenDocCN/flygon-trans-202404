- en: Inheritance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承
- en: Intro
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: You can imagine that as our program grows larger and larger in OOP, you will
    define more objects and classes. Some of the classes will share similar characteristics.
    For example, you might have a `box` class, a `safety-deposit-box` class, and a
    `locked-box` class. They all need to know similar methods like adding items to
    it and removing items from it. It will be redundant to recode it for every single
    box-like class. What we want is to define a generic class (like a `box` class)
    that knows the general methods like `open`ing and then let the more specific classes
    (like the `safe-deposit-box` class) **inherit** from the general `box` class.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以想象，随着我们的程序在OOP中变得越来越大，您将定义更多的对象和类。一些类将具有类似的特征。例如，您可能有一个`box`类，一个`safety-deposit-box`类和一个`locked-box`类。它们都需要了解类似的方法，比如向其中添加项目和从中移除项目。为每个类似的箱类重复编码将是多余的。我们想要的是定义一个通用类（如`box`类），它知道通用方法，比如`open`，然后让更具体的类（如`safe-deposit-box`类）从通用`box`类**继承**。
- en: Parents and Children
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 父母和子女
- en: Let's say we want to create a `checking-account` class. Checking accounts are
    just like regular bank accounts, except that you can write checks as well as withdrawing
    money in person. But you're charged ten cents every time you write a check.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想创建一个`checking-account`类。支票账户与常规银行账户相同，只是您还可以在人与人之间提取支票。但是每次写支票时都要收取十美分的费用。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: One way to implement a `checking-account` is to copy all of the code we have
    for the `account` class but then if we need to make a change in our `account`
    then we need to remember to change our `checking-account.`
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`checking-account`的一种方法是复制我们为`account`类编写的所有代码，但如果我们需要更改我们的`account`，那么我们需要记得更改我们的`checking-account`。
- en: 'It is very common in object-oriented programming that one class will be a specialization
    of another: the new class will have all the methods of the old, plus some extras,
    just as in this bank account example. To describe this situation we use the metaphor
    of a family of object classes. The original class is the parent and the specialized
    version is the child class. We say that the child inherits the methods of the
    parent. (The names subclass for child and superclass for parent are also sometimes
    used.)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程中，一个类是另一个类的专业化是非常常见的：新类将拥有旧类的所有方法，以及一些额外的方法，就像在这个银行账户示例中一样。为了描述这种情况，我们使用对象类族的比喻。原始类是父类，专业化版本是子类。我们说子类继承了父类的方法。（有时也使用子类和父类来表示子类和父类。）
- en: Parents
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 父母
- en: 'Here''s how we create a subclass of the account class:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何创建账户类的子类：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This example introduces the parent clause in `define-class`. In this case, the
    parent is the `account` class. Note that because the `account` class needs one
    instantiation variable, we need to provide that argument as well (hence the `(account
    init-balance)`).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例介绍了`define-class`中的父类。在这种情况下，父类是`account`类。请注意，因为`account`类需要一个实例化变量，我们也需要提供该参数（因此为`(account
    init-balance)`）。
- en: Whenever we send a message to a `checking-account` object, where does the corresponding
    method come from? If a method of that name is defined in the `checking-account`
    class, it is used; otherwise, the OOP system looks for a method in the parent
    account class. If the parent doesn't have that method, we will look at the parent's
    parent, and so on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们向`checking-account`对象发送消息时，对应的方法从哪里来？如果该名称的方法在`checking-account`类中定义，它将被使用；否则，OOP系统将在父账户类中查找方法。如果父类没有该方法，我们将查看父类的父类，依此类推。
- en: '**Test Your Understanding**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: These questions follow our class definitions for `account` and `checking-account`
    above.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题跟随我们上面的`account`和`checking-account`类定义。
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Which one of these will return an error?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些中的哪一个将返回错误？
- en: The 'self' Keyword
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '''self''关键字'
- en: What should `write-check` do? It should reduce the account's balance by the
    specified amount and additional fee. We already know how to reduce our balance,
    it's just the `withdraw` method! To call a method that we already defined from
    the body of another method, we use the **self**, hence the `(ask self 'withdraw
    (+ amount 0.10))`. Each object has a local state variable `self` whose value is
    the object itself.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`write-check`应该做什么？它应该将账户余额减少指定金额和额外费用。我们已经知道如何减少余额，那就是`withdraw`方法！要从另一个方法的主体中调用我们已经定义的方法，我们使用**self**，因此为`(ask
    self ''withdraw (+ amount 0.10))`。每个对象都有一个本地状态变量`self`，其值是对象本身。'
- en: Scope
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围
- en: Methods defined in a certain class only have access to the local state variables
    de fined in the same class. For example, a method de fined in the `checking-account`
    class can't refer to the `balance` variable de fined in the `account` class; likewise,
    a method in the `account` class can't refer to the `init-balance` variable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个类中定义的方法只能访问同一类中定义的局部状态变量。例如，在`checking-account`类中定义的方法不能引用在`account`类中定义的`balance`变量；同样，`account`类中的方法也不能引用`init-balance`变量。
- en: 'This rule corresponds to the usual Scheme rule about scope of variables: each
    variable is only available within the block in which it''s defi ned. (Not every
    OOP implementation works like this, by the way.)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则对应于通常的 Scheme 规则关于变量作用域的规定：每个变量只在定义它的块内有效。（顺便说一句，并非每个面向对象的编程实现都是这样的。）
- en: '**Test Your Understanding**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: Classes are wonderful! They keep objects organized. Inheritance is wonderful!
    They keep classes organized. Be aware about the states that a child has and which
    ones are updated.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 类很棒！它们使对象有序。继承很棒！它们使类有序。要注意子类具有哪些状态以及哪些状态被更新。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What does the following expression return?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表达式返回什么？
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What does the following expression return?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表达式返回什么？
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Suppose we now have the following snippet of code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们现在有以下代码片段：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We added a new method, show-balance to the class. What will (ask jeffrey 'show-balance)
    return?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在类中添加了一个新方法，show-balance。那么（ask jeffrey 'show-balance）会返回什么？
- en: Takeaways
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: 'Several takeaways from this subsection:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本小节的几个要点：
- en: Some classes will be a more 'specialized' or 'specific' version of another class.
    In these cases, we want to make the specific class a 'child' of the 'parent' class.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有些类将是另一个类的更“专业化”或“具体化”版本。在这些情况下，我们希望将特定类作为“父”类的“子”类。
- en: A child class inherits all methods of the parent class.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类继承父类的所有方法。
- en: Keep track of what variable is actually in scope in your class.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要跟踪哪个变量实际上在你的类中作用域。
- en: What's Next?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: We are going to learn what kinds of variables a class can have.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习一个类可以拥有哪些类型的变量。
