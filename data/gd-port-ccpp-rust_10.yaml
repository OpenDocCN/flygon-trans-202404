- en: Source Layout and Other General Points
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源布局和其他一般点
- en: Source Layout and Other General Points
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源布局和其他一般点
- en: Header files
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 头文件
- en: C/ C++
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C/ C++
- en: 'C and C++ code tends to be split over two general kinds of file:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: C 和 C++ 代码往往分布在两种常见类型的文件中：
- en: The Header file (.h, .hpp) contains class definitions, external function signatures,
    macros, templates, inline functions. Sometimes inline functions get stored in
    their own file. The standard template library C++ headers do not have a file extension.
    Some 3rd party libraries like Qt may sometimes omit the extension.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头文件（.h、.hpp）包含类定义、外部函数签名、宏、模板、内联函数。有时内联函数会存储在自己的文件中。标准模板库 C++ 头文件没有文件扩展名。有些第三方库（如
    Qt）有时可能会省略扩展名。
- en: The Source file (.c, .cc, .cpp) contains the implementation of classes and anything
    private. Sometimes C++ will use tricks such as forward class references and Pimpl
    patterns to keep complex or dependent code out of the header file.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源文件（.c、.cc、.cpp）包含类和任何私有内容的实现。有时 C++ 会使用诸如前向类引用和 Pimpl 模式等技巧，以将复杂或依赖性代码保存在头文件之外。
- en: Occasionally you may also see files with a .inl, or .ipp extension which are
    headers with a lot of inline templates or functions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您也可能会看到带有 .inl 或 .ipp 扩展名的文件，这些文件是具有大量内联模板或函数的头文件。
- en: Compilers are only interested in source files and what they `#include` so what's
    really happening in most C/C++ code is that a preprocessor concatenates various
    header files to the front of the source file according to the `#` directives within
    it and the resulting file is fed to a compiler.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器只关心源文件及其 `#include` 的内容，所以在大多数 C/C++ 代码中真正发生的情况是，预处理器根据其中的 `#` 指令将各种头文件连接到源文件的前面，然后将生成的文件提供给编译器。
- en: Splitting definition and implementation across multiple files can be a nuisance
    since it means that changes to a single class can require modifications to multiple
    files.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将定义和实现分散在多个文件中可能会很麻烦，因为这意味着对单个类的更改可能需要修改多个文件。
- en: Rust
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rust
- en: Rust does not have header files. Every struct, implementation and macro resides
    in a file ending in .rs. Code is made public or not by structuring .rs files into
    modules and exposing functions via the `pub` keyword.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 没有头文件。每个结构体、实现和宏都驻留在以 .rs 结尾的文件中。通过将 .rs 文件结构化为模块并使用 `pub` 关键字暴露函数来使代码公开或不公开。
- en: Ordering is less important too. It is possible to forward reference structs
    or functions, or even `use` the very same module that a piece of code is a part
    of. The only time that ordering matters is for macro definitions. A macro must
    be defined before a module that uses it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 排序也不那么重要。可以对结构体或函数进行前向引用，甚至`use`代码片段所属的模块本身。唯一需要排序的时候是宏定义。宏必须在使用它的模块之前定义。
- en: Rust files reference non-dependent modules with the `use` keyword and pull-in
    dependent modules with the `mod` keyword.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 文件使用 `use` 关键字引用非依赖模块，并使用 `mod` 关键字引入依赖模块。
- en: Namespaces
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间
- en: C / C++
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C / C++
- en: C does not use namespaces. Libraries tend to prefix their functions and structs
    with a qualifying name of some sort.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: C 不使用命名空间。库往往会在函数和结构体前面加上某种限定名称。
- en: C++ *does* have namespaces but their use is optional and varies from one piece
    of code to the next.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: C++ *确实*有命名空间，但它们的使用是可选的，而且在不同的代码片段中变化很大。
- en: Rust
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rust
- en: Rust has modules which are like `#include` and namespaces rolled into one
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 有模块，它们类似于 `#include` 和命名空间的组合
- en: One major convenience definition and implementation are one and the same. Implementing
    a function brings it into existence. Any other module that chooses to "use" it
    simply says so and the compiler will ensure it compiles properly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个主要的便利是定义和实现是一体的。实现函数就会使其存在。任何其他选择“使用”它的模块只需声明即可，编译器会确保正确编译。
- en: See Namespacing with modules TODO ref
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 见 Namespacing with modules TODO ref
- en: File name conventions
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件名约定
- en: 'In C++ filenames typically end in:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 文件的典型后缀通常是：
- en: .h, .hpp, .inl for headers or inline code
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .h、.hpp、.inl 用于头文件或内联代码
- en: .c, .cpp, .cc for source code
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .c、.cpp、.cc 用于源代码
- en: Aside from the extension (which may kick off the compiler expecting C or C++)
    there is next to no expected arrangement or naming convention for files.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了扩展名（可能会启动编译器以期望 C 或 C++）外，文件几乎没有预期的排列或命名约定。
- en: You can compile a file called deeply/nested/Timbuktu.cpp which defines 20 classes
    and 30 interfaces if you like and the name does not matter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果愿意，您可以编译名为 deeply/nested/Timbuktu.cpp 的文件，其中定义了 20 个类和 30 个接口，名称并不重要。
- en: Rust files are snake_case and end in .rs. The filename DOES matter because the
    name is the module name that scopes whatever is in it. There are also some special
    files called main.rs, lib.rs and mod.rs.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Rust文件使用蛇形命名法，并以.rs结尾。文件名很重要，因为名称是其作用域的模块名称。还有一些特殊文件，称为main.rs、lib.rs和mod.rs。
- en: So if you name your file foo.rs, then everything inside is scoped foo::* when
    externally referenced.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你把文件命名为foo.rs，那么外部引用时，其中的所有内容都是以foo::*的方式作用域。
- en: Unicode support
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unicode支持
- en: Using Unicode in C++ has always been a pain. Neither C nor C++ had support for
    it at all, and various solutions have appeared over time. Recent implementations
    of the standards of C and C++ provide string literal types for UTF encodings,
    but prior to that it was strictly ascii or wide characters.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中使用Unicode一直是一件令人头疼的事情。C和C++都没有任何对此的支持，随着时间的推移出现了各种解决方案。最近的C和C++标准的实现提供了用于UTF编码的字符串字面量类型，但在此之前严格遵循ascii或宽字符。
- en: 'Here are some general guidelines for Unicode in C / C++:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于C / C++中Unicode的一般指南：
- en: Source code is normally only safe to use characters 0-127 although some compilers
    may have parameters that allow makefiles to specify other encodings.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码通常只能使用0-127号字符，尽管一些编译器可能有参数允许makefile指定其他编码。
- en: C++ has char and wchar_t types for 8-bit and 32-bit or possibly 16-bit wide
    strings. Part of the problem with wchar_t was the width was immediately subverted.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++有char和wchar_t类型用于8位和32位或可能是16位宽字符串。wchar_t的问题之一是宽度立即被颠覆了。
- en: Char type implies no encoding. It normally means ASCII but could also mean UTF-8,
    Latin1, or in fact any form of encoding that predates Unicode. Basically it is
    up to the program to understand the meaning.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: char类型不意味着编码。它通常表示ASCII，但也可能表示UTF-8、Latin1或者事实上任何早于Unicode的编码形式。基本上，程序要理解其含义。
- en: A "wide" wchar_t is NOT UTF-32\. It might be, or it might be UTF-16 on some
    platforms (e.g Windows). This messed up definition makes operations such as slicing
    strings dangerous due to the risk of cutting through a control point.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “宽”wchar_t并不是UTF-32的。它可能是UTF-16，也可能是一些平台上的UTF-16（例如Windows）。这个混乱的定义使得对字符串进行切片等操作变得危险，因为可能会穿过控制点。
- en: What if I want to read Unicode arguments from the command-line such as file
    paths - what encoding are they in? The main() method passes them as char*. Windows
    has a wmain() that takes wchar_t*. What am I supposed to do?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我想从命令行读取Unicode参数，比如文件路径——它们是什么编码？main()方法将它们作为char*传递。Windows有一个接受wchar_t*的wmain()。我应该怎么办？
- en: 'Windows favours wide (UTF-16) character strings for its APIs although it has
    ASCII versions too. The ASCII versions are not UTF-8\. Compiled code has #define
    UNICODE to support multiple languages.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows偏爱宽字符（UTF-16）字符串用于其API，尽管也有ASCII版本。ASCII版本不是UTF-8的。编译代码中有#define UNICODE以支持多种语言。
- en: Linux tends to favour UTF-8 encoded char strings. Most languages, toolkits and
    tools assume UTF-8\. The exception is Qt which has chosen to use UTF-16 internally.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux倾向于使用UTF-8编码的char字符串。大多数语言、工具包和工具都假定使用UTF-8。例外是Qt，它选择在内部使用UTF-16。
- en: C-lib has acquired various wide versions of its strdup, strcmp, strcpy etc.
    It also acquired wide versions of functions for opening files on disk and so forth.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C库已经获得了各种宽版本的strdup、strcmp、strcpy等。它还获得了用于在磁盘上打开文件等的函数的宽版本。
- en: C++ lib has acquired std::string / std::wstring classes. C++ has acquired explicit
    UTF-16 and UTF-32 versions of these classes.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++库已经获得了std::string / std::wstring类。C++已经获得了这些类的显式UTF-16和UTF-32版本。
- en: C11 and C++11 introduce explicit string literals for various UTF widths.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C11和C++11引入了各种UTF宽度的显式字符串字面量。
- en: Limited conversion capabilities between wide / narrow in C++. Some operating
    systems have incomplete conversion capabilities.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在C++中宽字符和窄字符之间的转换能力有限。一些操作系统具有不完整的转换能力。
- en: 3rd party conversion libraries like ICU4C are commonly used. Libraries like
    boost, Qt use libicu for converting between encodings
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常用的第三方转换库，如ICU4C。像boost、Qt这样的库使用libicu进行编码转换。
- en: Embedding Unicode into C source involves using escape codes or hex values
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Unicode嵌入到C源代码中涉及使用转义码或十六进制值。
- en: Rust simplifies things a lot by benefit of hindsight.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Rust通过事后诸葛亮的好处大大简化了事情。
- en: Source code is UTF-8 encoded.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码是UTF-8编码的。
- en: Comments, characters and string literals can contain Unicode characters without
    escaping.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释、字符和字符串字面量可以包含Unicode字符而无需转义。
- en: The native char type is 4 bytes wide – as wide as a Unicode characters.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原生char类型宽度为4个字节——与Unicode字符一样宽。
- en: The native str & String types are internally UTF-8 to save space but may be
    iterated by char or by byte according to what the function is doing.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地的`str`和`String`类型在内部是UTF-8编码的，以节省空间，但根据函数的操作，可以按字符或按字节进行迭代。
- en: Since source code is UTF-8 encoded you may embed strings straight into the source.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于源代码是UTF-8编码的，你可以直接将字符串嵌入到源代码中。
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
