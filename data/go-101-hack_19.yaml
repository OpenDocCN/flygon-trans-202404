- en: Accessing map
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问映射
- en: Accessing map
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问映射
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Map is a reference type which points to a hash table, and you can use it to
    construct a "key-value" database which is very handy in practice programming.
    E.g., the following code will calculate the count of every element in a slice:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 映射是一个指向哈希表的引用类型，你可以用它来构建一个非常方便的“键值”数据库，实际编程中非常有用。例如，以下代码将计算切片中每个元素的计数：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output is like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Moreover, according to [Go spec](https://golang.org/ref/spec#Map_types): "A
    map is an **unordered** group of elements of one type, called the element type,
    indexed by a set of unique keys of another type, called the key type.". So if
    you run the above program another time, the output may be different:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，根据[Go规范](https://golang.org/ref/spec#Map_types)："映射是一组**无序**的元素，类型相同，称为元素类型，由另一种类型的一组唯一键索引，称为键类型"。所以，如果你再次运行上述程序，输出可能会不同：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You must not presume the element order of a map.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能假设映射的元素顺序。
- en: 'The key type of the map must can be compared with "`==`" operator: the built-in
    types, such as int, string, etc, satisfy this requirement; while slice not. For
    struct type, if its members all can be compared by "`==`" operator, then this
    struct can also be used as key.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 映射的键类型必须能够与“`==`”运算符进行比较：内置类型，如int、string等，满足此要求；而切片则不满足。对于结构体类型，如果它的成员都可以通过“`==`”运算符进行比较，则此结构体也可以用作键。
- en: 'When you access a non-exist key of the map, the map will return the `nil` value
    of the element. I.e.:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你访问映射中不存在的键时，映射将返回元素的`nil`值。即：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output is:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'the value of `m[0]` and `m[2]` are both `false`, so you can''t discriminate
    whether the key is really in map or not. The solution is to use “comma ok” method:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`m[0]`和`m[2]`的值都为`false`，所以你无法区分键是否真的存在于映射中。解决方法是使用“逗号OK”方法：'
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: if the key does exit, `ok` will be `true`; else `ok` will be `false`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果键存在，`ok`将为`true`；否则`ok`将为`false`。
- en: 'Sometimes, you may not care the values of the map, and use map just as a set.
    In this case, you can declare the value type as an empty struct: `struct{}`. An
    example is like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能不关心映射的值，只把映射当作一个集合来使用。在这种情况下，你可以将值类型声明为空结构体：`struct{}`。一个示例如下：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output is:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Using built-in `delete` function, you can remove an entry in the map, even
    the key doesn''t exist:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内置的`delete`函数，你可以删除映射中的条目，即使键不存在：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'References:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料：
- en: '[Effective Go](https://golang.org/doc/effective_go.html);'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[Effective Go](https://golang.org/doc/effective_go.html);'
- en: '[The Go Programming Language Specification](https://golang.org/ref/spec);'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go编程语言规范](https://golang.org/ref/spec);'
- en: '[The Go Programming Language](http://www.gopl.io/).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go编程语言](http://www.gopl.io/)。'
