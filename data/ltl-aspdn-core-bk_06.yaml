- en: Security and identity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全和身份验证
- en: Security and identity
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全和身份验证
- en: Security is a major concern of any modern web application or API. It's important
    to keep your user or customer data safe and out of the hands of attackers. This
    encompasses things like
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 安全是任何现代 Web 应用程序或 API 的主要关注点。重要的是要保护好用户或客户的数据，不让攻击者获取。这涉及诸如
- en: Sanitizing data input to prevent SQL injection attacks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对输入数据进行净化，以防止 SQL 注入攻击
- en: Preventing cross-domain (XSRF) attacks in forms
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止跨域（XSRF）攻击在表单中发生
- en: Using HTTPS (TLS) so data can't be intercepted as it travels over the Internet
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 HTTPS（TLS），以防止数据在互联网上传输时被拦截
- en: Giving users a way to securely sign in with a password or social login credentials
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户提供一种安全地使用密码或社交登录凭据登录的方式
- en: Designing password reset or multi-factor authentication flows with security
    in mind
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计考虑安全性的密码重置或多因素身份验证流程
- en: 'ASP.NET Core can help make all of this easier to implement. The first two (protection
    against SQL injection and cross-domain attacks) are already built-in, and you
    can add a few lines of code to enable HTTPS support. This chapter will mainly
    focus on the **identity** aspects of security: handling user accounts (registration,
    login), authenticating (logging in) your users securely, and making authorization
    decisions once they are authenticated.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 可以帮助简化所有这些实现。前两者（防止 SQL 注入和跨域攻击）已经内置，你只需添加几行代码来启用 HTTPS 支持。本章主要关注安全性的**身份**方面：处理用户账户（注册、登录）、安全地对用户进行身份验证（登录）以及在用户通过身份验证后做出授权决策。
- en: Authentication and authorization are distinct ideas that are often confused.
    **Authentication** deals with whether a user is logged in, while **authorization**
    deals with what they are allowed to do *after* they log in. You can think of authentication
    as asking the question, "Do I know who this user is?" While authorization asks,
    "Does this user have permission to do X?"
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 身份验证和授权是常常混淆的不同概念。**身份验证**涉及用户是否已登录，而**授权**涉及用户在登录后*可以做什么*。你可以把身份验证看作是在问：“我知道这个用户是谁吗？”而授权则是问：“这个用户有权限执行
    X 吗？”
- en: The MVC + Individual Authentication template you used to scaffold the project
    includes a number of classes built on top of ASP.NET Core Identity, an authentication
    and identity system that's part of ASP.NET Core.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你用来构建项目的 MVC + Individual Authentication 模板包含许多构建在 ASP.NET Core Identity 之上的类，后者是
    ASP.NET Core 的身份验证和身份系统的一部分。
- en: What is ASP.NET Core Identity?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 ASP.NET Core Identity？
- en: ASP.NET Core Identity is the identity system that ships with ASP.NET Core. Like
    everything else in the ASP.NET Core ecosystem, it's a set of NuGet packages that
    can be installed in any project (and are already included if you use the default
    template).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Identity 是随 ASP.NET Core 一起提供的身份系统。与 ASP.NET Core 生态系统中的其他一切一样，它是一组可以安装在任何项目中的
    NuGet 包（如果使用默认模板，则已经包含在内）。
- en: ASP.NET Core Identity takes care of storing user accounts, hashing and storing
    passwords, and managing roles for users. It supports email/password login, multi-factor
    authentication, social login with providers like Google and Facebook, as well
    as connecting to other services using protocols like OAuth 2.0 and OpenID Connect.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Identity 负责存储用户账户、哈希和存储密码以及管理用户的角色。它支持电子邮件/密码登录、多因素身份验证、与 Google
    和 Facebook 等提供者的社交登录，以及使用诸如 OAuth 2.0 和 OpenID Connect 等协议连接到其他服务。
- en: The Register and Login views that ship with the MVC + Individual Auth template
    already take advantage of ASP.NET Core Identity, and they already work! Try registering
    for an account and logging in.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: MVC + Individual Auth 模板附带的注册和登录视图已经充分利用了 ASP.NET Core Identity，并且它们已经可用！尝试注册一个账户并登录。
- en: Add Facebook login
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 Facebook 登录
- en: Add Facebook login
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Facebook 登录
- en: Out of the box, the Individual Auth template includes functionality for registering
    using an email and password. You can extend this by plugging in additional identity
    providers like Google and Facebook.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 初始的 Individual Auth 模板包含使用电子邮件和密码进行注册的功能。你可以通过插入额外的身份提供者，如 Google 和 Facebook，来扩展此功能。
- en: 'For any external provider, you typically need to do two things:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何外部提供者，通常需要执行两个操作：
- en: Create an app (sometimes called a *client*) on the external provider that represents
    your application
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在外部提供商创建一个应用程序（有时称为*客户端*），代表你的应用程序
- en: Copy the ID and secret generated by the provider and put them in your code
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制提供商生成的 ID 和密钥，并将它们放入你的代码中
- en: Create an app in Facebook
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Facebook 创建一个应用
- en: You can create new Facebook apps using the Facebook Developer console at [https://developers.facebook.com/apps](https://developers.facebook.com/apps).
    Click **Add a New App** and follow the instructions to create an app ID.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Facebook开发人员控制台在[https://developers.facebook.com/apps](https://developers.facebook.com/apps)上创建新的Facebook应用程序。单击**添加新应用**，然后按照说明创建应用程序ID。
- en: If you don't have a Facebook account, you can set up Google or Twitter login
    instead. The steps on the provider's site will be different, but the code is almost
    identical.
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果您没有Facebook帐户，可以选择设置Google或Twitter登录。提供商网站上的步骤可能不同，但代码几乎相同。
- en: 'Next, set up Facebook Login and then click Settings on the left side, under
    Facebook Login:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，设置Facebook登录，然后在左侧点击设置，在Facebook登录下方：
- en: '![Settings button](facebook-login-settings.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![设置按钮](facebook-login-settings.png)'
- en: 'Add the following URL to the **Valid OAuth redirect URIs** box:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下URL添加到**有效的OAuth重定向URI**框中：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The port that your application runs on may differ. It's typically port 5000
    if you use `dotnet start`, but if you're on Windows, it could be a random port
    like 54574\. Either way, you can always see the port your application is running
    on in the address bar of your web browser.
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 您的应用程序运行的端口可能不同。如果使用`dotnet start`，通常是端口5000，但如果您使用Windows，则可能是随机端口，如54574。无论如何，您始终可以在Web浏览器的地址栏中看到应用程序正在运行的端口。
- en: Click **Save Changes** and then head over to the Dashboard page. Here you can
    see the app ID and secret generated by Facebook, which you'll need in a moment
    (keep this tab open).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**保存更改**，然后转到仪表板页面。在这里，您可以看到Facebook生成的应用ID和密钥，您一会儿会需要这些信息（保持此选项卡打开）。
- en: 'To enable Facebook login in ASP.NET Core Identity, add this code anywhere in
    the `ConfigureServices` method in the `Startup` class:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要在ASP.NET Core Identity中启用Facebook登录，请在`Startup`类的`ConfigureServices`方法中的任何位置添加以下代码：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Instead of hardcoding the Facebook app ID and secret in your code, the values
    are pulled from the configuration system. The `appsettings.json` file is normally
    the place to store configuration data for your project. However, since it's checked
    into source control, it's not good for sensitive data like an app secret. (If
    your app secret was pushed to GitHub, for example, anyone could steal it and do
    bad things on your behalf.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不要在代码中硬编码Facebook应用ID和密钥，而是从配置系统中提取这些值。`appsettings.json`文件通常是存储项目配置数据的地方。但是，由于它被检入源代码控制，因此不适合存储敏感数据，如应用程序密钥。（例如，如果您的应用程序密钥被推送到GitHub，任何人都可以窃取它并代表您执行不良操作。）
- en: Store secrets safely with the Secrets Manager
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Secrets Manager安全存储秘密
- en: 'You can use the Secrets Manager tool for sensitive data like an app secret.
    Run this line in the terminal to make sure it''s installed (make sure you''re
    currently in the project directory):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Secrets Manager工具处理敏感数据，如应用程序密钥。在终端中运行此行以确保已安装（确保您当前在项目目录中）：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Copy the app ID and secret from the Facebook app dashboard and use the `set`
    command to save the values in the Secrets Manager:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从Facebook应用仪表板复制应用ID和密钥，然后使用`set`命令将这些值保存在Secrets Manager中：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The values from the Secrets Manager are loaded into the `Configuration` property
    when your application starts up, so they're available to the code in `ConfigureServices`
    you added before.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的应用程序启动时，Secrets Manager中的值将加载到`Configuration`属性中，因此它们在您之前添加的`ConfigureServices`中的代码中可用。
- en: 'Run your application and click the Login link in the navbar. You''ll see a
    new button for logging in with Facebook:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的应用程序，然后单击导航栏中的登录链接。您将看到一个新的用于使用Facebook登录的按钮：
- en: '![Facebook login button](facebook-login-button.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![Facebook登录按钮](facebook-login-button.png)'
- en: Try logging in with Facebook. You'll be redirected and prompted to give your
    app permission in Facebook, then redirected back and logged in.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用Facebook登录。您将被重定向并提示在Facebook中授予您的应用程序权限，然后重���向回来并登录。
- en: Require authentication
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求身份验证
- en: Require authentication
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要求身份验证
- en: Often you'll want to require the user to log in before they can access certain
    parts of your application. For example, it makes sense to show the home page to
    everyone (whether you're logged in or not), but only show your to-do list after
    you've logged in.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您希望要求用户在访问应用程序的某些部分之前先登录。例如，向每个人显示主页是有意义的（无论您是否已登录），但只有在登录后才显示待办事项清单。
- en: 'You can use the `[Authorize]` attribute in ASP.NET Core to require a logged-in
    user for a particular action, or an entire controller. To require authentication
    for all actions of the `TodoController`, add the attribute above the first line
    of the controller:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ASP.NET Core 中使用 `[Authorize]` 属性要求特定操作或整个控制器中的已登录用户。要求 `TodoController`
    的所有操作进行身份验证，将属性添加到控制器的第一行之前：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add this `using` statement at the top of the file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件顶部添加此 `using` 语句：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Try running the application and accessing `/todo` without being logged in. You'll
    be redirected to the login page automatically.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行应用程序并访问 `/todo`，未登录时会自动重定向到登录页面。
- en: Despite the name of the attribute, we are really doing an authentication check
    here, not an authorization check. Sorry to be confusing.
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管属性的名称是这样的，但实际上我们在这里进行的是身份验证检查，而不是授权检查。抱歉造成困惑。
- en: Using identity in the application
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用程序中使用身份验证
- en: Using identity in the application
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在应用程序中使用身份验证
- en: The to-do list items themselves are still shared between all users, because
    the to-do entities aren't tied to a particular user. Now that the `[Authorize]`
    attribute ensures that you must be logged in to see the to-do view, you can filter
    the database query based on who is logged in.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项列表本身仍然是所有用户共享的，因为待办事项实体与特定用户无关。现在，`[Authorize]` 属性确保你必须登录才能看到待办事项视图，你可以根据登录的用户来过滤数据库查询。
- en: 'First, inject a `UserManager<ApplicationUser>` into the `TodoController`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 `TodoController` 中注入 `UserManager<ApplicationUser>`：
- en: '**`Controllers/TodoController.cs`**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Controllers/TodoController.cs`**'
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You''ll need to add a new `using` statement at the top:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在顶部添加一个新的 `using` 语句：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `UserManager` class is part of ASP.NET Core Identity. You can use it to
    look up the current user in the `Index` action:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserManager` 类是 ASP.NET Core Identity 的一部分。你可以在 `Index` 操作中使用它来查找当前用户：'
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The new code at the top of the action method uses the `UserManager` to get
    the current user from the `User` property available in the action:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 操作方法顶部的新代码使用 `UserManager` 从操作中可用的 `User` 属性获取当前用户：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If there is a logged-in user, the `User` property contains a lightweight object
    with some (but not all) of the user's information. The `UserManager` uses this
    to look up the full user details in the database via the `GetUserAsync`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有已登录的用户，则 `User` 属性包含一个轻量级对象，其中包含一些（但不是所有）用户的信息。`UserManager` 使用此信息通过 `GetUserAsync`
    在数据库中查找完整的用户详细信息。
- en: 'The value of `currentUser` should never be null, because the `[Authorize]`
    attribute is present on the controller. However, it''s a good idea to do a sanity
    check, just in case. You can use the `Challenge()` method to force the user to
    log in again if their information is missing:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`currentUser` 的值永远不应为 null，因为控制器上存在 `[Authorize]` 属性。但是，为了以防万一，进行一次理智检查是个好主意。如果用户的信息丢失，你可以使用
    `Challenge()` 方法强制用户重新登录：'
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Since you''re now passing an `ApplicationUser` parameter to `GetIncompleteItemsAsync`,
    you''ll need to update the `ITodoItemService` interface:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于现在将 `ApplicationUser` 参数传递给 `GetIncompleteItemsAsync`，你需要更新 `ITodoItemService`
    接口：
- en: '**`Services/ITodoItemService.cs`**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Services/ITodoItemService.cs`**'
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The next step is to update the database query and show only items owned by the
    current user.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是更新数据库查询，仅显示当前用户拥有的项目。
- en: Update the database
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新数据库
- en: 'You''ll need to add a new property to the `TodoItem` entity model so each item
    can reference the user that owns it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要向 `TodoItem` 实体模型添加一个新的属性，以便每个项目都可以引用拥有它的用户：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since you updated the entity model used by the database context, you also need
    to migrate the database. Create a new migration using `dotnet ef` in the terminal:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你更新了数据库上下文使用的实体模型，所以你还需要迁移数据库。在终端中使用 `dotnet ef` 创建一个新的迁移：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This creates a new migration called `AddItemOwner` which will add a new column
    to the `Items` table, mirroring the change you made to the `TodoItem` entity model.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为 `AddItemOwner` 的新迁移，该迁移将向 `Items` 表添加一个新列，与你对 `TodoItem` 实体模型所做的更改相对应。
- en: 'Note: You''ll need to manually tweak the migration file if you''re using SQLite
    as your database. See the *Create a migration* section in the *Use a database*
    chapter for more details.'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：如果你的数据库使用 SQLite，你需要手动调整迁移文件。有关详细信息，请参阅*使用数据库*章节中的*创建迁移*部分。
- en: 'Use `dotnet ef` again to apply it to the database:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用 `dotnet ef` 将其应用到数据库：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Update the service class
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新服务类
- en: 'With the database and the database context updated, you can now update the
    `GetIncompleteItemsAsync` method in the `TodoItemService` and add another clause
    to the `Where` statement:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库和数据库上下文更新后，现在可以在 `TodoItemService` 中更新 `GetIncompleteItemsAsync` 方法，并在 `Where`
    语句中添加另一个子句：
- en: '**`Services/TodoItemService.cs`**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Services/TodoItemService.cs`**'
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you run the application and register or log in, you'll see an empty to-do
    list once again. Unfortunately, any items you try to add disappear into the ether,
    because you haven't updated the Add Item operation to save the current user to
    new items.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行应用程序并注册或登录，你会再次看到一个空的待办事项列表。不幸的是，你尝试添加的任何项目都会消失，因为你还没有更新添加项目操作以保存当前用户到新项目中。
- en: Update the Add Item and Mark Done operations
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新添加项目和标记完成操作
- en: You'll need to use the `UserManager` to get the current user in the `AddItem`
    and `MarkDone` action methods, just like you did in `Index`. The only difference
    is that these methods will return a `401 Unauthorized` response to the frontend
    code, instead of challenging and redirecting the user to the login page.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `AddItem` 和 `MarkDone` 动作方法中，你需要像在 `Index` 中一样使用 `UserManager` 来获取当前用户。唯一的区别是，这些方法会向前端代码返回
    `401 Unauthorized` 响应，而不是挑战并将用户重定向到登录页面。
- en: 'Here are both updated methods in the `TodoController`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `TodoController` 中两个更新后的方法：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Both service methods must now accept an `ApplicationUser` parameter. Update
    the interface definition in `ITodoItemService`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这两个服务方法必须接受一个 `ApplicationUser` 参数。更新 `ITodoItemService` 中的接口定义：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: And finally, update the service method implementations in the `TodoItemService`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 `TodoItemService` 中更新服务方法的实现。
- en: 'For the `AddItemAsync` method, set the `Owner` property when you construct
    a `new TodoItem`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `AddItemAsync` 方法，在构造新的 `TodoItem` 时设置 `Owner` 属性：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `Where` clause in the `MarkDoneAsync` method also needs to check for the
    user''s ID, so a rogue user can''t complete someone else''s items by guessing
    their IDs:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`MarkDoneAsync` 方法中的 `Where` 子句还需要检查用户的 ID，以防止不良用户通过猜测他们的 ID 完成其他人的项目：'
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: All done! Try using the application with two different user accounts. The to-do
    items stay private for each account.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！尝试使用两个不同的用户帐户使用应用程序。待办事项对每个帐户保持私密。
- en: Authorization with roles
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用角色进行授权
- en: Authorization with roles
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用角色进行授权
- en: Roles are a common approach to handling authorization and permissions in a web
    application. For example, you might have an Administrator role that allows admins
    to see and manage all the users registered for your app, while normal users can
    only see their own information.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 应用程序中，角色是处理授权和权限的常用方法。例如，你可能有一个 Administrator 角色，允许管理员查看和管理注册到你的应用程序的所有用户，而普通用户只能查看自己的信息。
- en: Add a Manage Users page
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个管理用户页面
- en: 'First, create a new controller:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个新的控制器：
- en: '**`Controllers/ManageUsersController.cs`**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Controllers/ManageUsersController.cs`**'
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Setting the `Roles` property on the `[Authorize]` attribute will ensure that
    the user must be logged in **and** assigned the `Administrator` role in order
    to view the page.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `[Authorize]` 属性上设置 `Roles` 属性将确保用户必须登录 **并且** 被分配 `Administrator` 角色才能查看页面。
- en: 'Next, create a view model:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个视图模型：
- en: '**`Models/ManageUsersViewModel.cs`**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Models/ManageUsersViewModel.cs`**'
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, create a view for the Index action:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为 Index 动作创建一个视图：
- en: '**`Views/ManageUsers/Index.cshtml`**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Views/ManageUsers/Index.cshtml`**'
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Start up the application and try to access the `/ManageUsers` route while logged
    in as a normal user. You''ll see this access denied page:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序并尝试以普通用户身份访问 `/ManageUsers` 路由。你会看到这个访问被拒绝的页面：
- en: '![Access denied error](access-denied.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![访问被拒绝错误](access-denied.png)'
- en: That's because users aren't assigned the `Administrator` role automatically.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为用户不会自动分配 `Administrator` 角色。
- en: Create a test administrator account
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个测试管理员帐户
- en: For obvious security reasons, there isn't a checkbox on the registration page
    that makes it easy for anyone to create an administrator account. Instead, you
    can write some code in the `Startup` class that will create a test admin account
    the first time the application starts up.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 出于明显的安全原因，注册页面上没有一个复选框可以让任何人轻松创建管理员帐户。相反，你可以在 `Startup` 类中编写一些代码，在应用程序启动时创建一个测试管理员帐户。
- en: 'Add this code to the `if (env.IsDevelopment())` branch of the `Configure` method:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码添加到 `Configure` 方法的 `if (env.IsDevelopment())` 分支中：
- en: '**`Startup.cs`**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Startup.cs`**'
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `EnsureRolesAsync` and `EnsureTestAdminAsync` methods will need access
    to the `RoleManager` and `UserManager` services. You can inject them into the
    `Configure` method, just like you inject any service into your controllers:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`EnsureRolesAsync`和`EnsureTestAdminAsync`方法将需要访问`RoleManager`和`UserManager`服务。您可以将它们注入到`Configure`方法中，就像将任何服务注入到您的控制器中一样：'
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the two new methods below the `Configure` method. First, the `EnsureRolesAsync`
    method:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Configure`方法下方添加两个新方法。首先是`EnsureRolesAsync`方法：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This method checks to see if an `Administrator` role exists in the database.
    If not, it creates one. Instead of repeatedly typing the string `"Administrator"`,
    create a small class called `Constants` to hold the value:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检查数据库中是否存在`Administrator`角色。如果不存在，则创建一个。不要重复输入字符串`"Administrator"`，而是创建一个名为`Constants`的小类来保存该值：
- en: '**`Constants.cs`**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Constants.cs`**'
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Feel free to update the `ManageUsersController` you created before to use this
    constant value as well.
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 随意更新之前创建的`ManageUsersController`以使用此常量值。
- en: 'Next, write the `EnsureTestAdminAsync` method:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编写`EnsureTestAdminAsync`方法：
- en: '**`Startup.cs`**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Startup.cs`**'
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If there isn't already a user with the username `admin@todo.local` in the database,
    this method will create one and assign a temporary password. After you log in
    for the first time, you should change the account's password to something secure.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库中不存在用户名为`admin@todo.local`的用户，此方法将创建一个用户并分配一个临时密码。第一次登录后，您应该将帐户的密码更改为安全密码。
- en: Because these two methods are asynchronous and return a `Task`, the `Wait` method
    must be used in `Configure` to make sure they finish before `Configure` moves
    on. You'd normally use `await` for this, but for technical reasons you can't use
    `await` in `Configure`. This is a rare exception - you should use `await` everywhere
    else!
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因为这两个方法是异步的并返回一个`Task`，所以在`Configure`中必须使用`Wait`方法来确保它们在`Configure`继续执行之前完成。通常情况下，您会使用`await`，但由于技术原因，您无法在`Configure`中使用`await`。这是一个罕见的例外
    - 在其他地方应该使用`await`！
- en: When you start the application next, the `admin@todo.local` account will be
    created and assigned the `Administrator` role. Try logging in with this account,
    and navigating to `http://localhost:5000/ManageUsers`. You'll see a list of all
    users registered for the application.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 下次启动应用程序时，将创建`admin@todo.local`帐户并分配`Administrator`角色。尝试使用此帐户登录，并导航到`http://localhost:5000/ManageUsers`。您将看到应用程序注册的所有用户的列表。
- en: As an extra challenge, try adding more administration features to this page.
    For example, you could add a button that gives an administrator the ability to
    delete a user account.
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为额外的挑战，尝试在此页面上添加更多管理功能。例如，您可以添加一个按钮，使管理员能够删除用户帐户。
- en: Check for authorization in a view
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在视图中检查授权
- en: The `[Authorize]` attribute makes it easy to perform an authorization check
    in a controller or action method, but what if you need to check authorization
    in a view? For example, it would be nice to display a "Manage users" link in the
    navigation bar if the logged-in user is an administrator.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`[Authorize]`属性使在控制器或操作方法中执行授权检查变得容易，但如果您需要在视图中进行授权检查怎么办？例如，如果登录用户是管理员，则在导航栏中显示“管理用户”链接会很好。'
- en: 'You can inject the `UserManager` directly into a view to do these types of
    authorization checks. To keep your views clean and organized, create a new partial
    view that will add an item to the navbar in the layout:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接将`UserManager`注入到视图中以执行这些类型的授权检查。为保持视图清晰和组织良好，创建一个新的部分视图，将在布局中的导航栏中添加一个项目：
- en: '**`Views/Shared/_AdminActionsPartial.cshtml`**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Views/Shared/_AdminActionsPartial.cshtml`**'
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: A **partial view** is a small piece of a view that gets embedded into another
    view. It's common to name partial views starting with an `_` underscore, but it's
    not necessary.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**部分视图**是视图的一个小片段，嵌入到另一个视图中。通常将部分视图命名以`_`下划线开头，但这并非必需。'
- en: This partial view first uses the `SignInManager` to quickly determine whether
    the user is logged in. If they aren't, the rest of the view code can be skipped.
    If there *is* a logged-in user, the `UserManager` is used to look up their details
    and perform an authorization check with `IsInRoleAsync`. If all checks succeed,
    a navbar item is rendered.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分视图首先使用`SignInManager`快速确定用户是否已登录。如果他们没有，可以跳过其余的视图代码。如果有用户已登录，则使用`UserManager`查找其详细信息，并使用`IsInRoleAsync`执行授权检查。如果所有检查都成功，则呈现导航栏项目。
- en: 'To include this partial in the main layout, edit `_Layout.cshtml` and add it
    in the navbar section:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要在主布局中包含此部分视图，请编辑`_Layout.cshtml`并将其添加到导航栏部分中：
- en: '**`Views/Shared/_Layout.cshtml`**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Views/Shared/_Layout.cshtml`**'
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When you log in with an administrator account, you''ll now see a new item on
    the top right:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用管理员帐户登录时，您现在会在右上角看到一个新项目：
- en: '![Manage Users link](manage-users.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![管理用户链接](manage-users.png)'
- en: Wrap up
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: ASP.NET Core Identity is a powerful security and identity system that helps
    you add authentication and authorization checks, and makes it easy to integrate
    with external identity providers. The `dotnet new` templates give you pre-built
    views and controllers that handle common scenarios like login and registration
    so you can get up and running quickly.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Identity 是一个强大的安全和身份系统，可帮助您添加身份验证和授权检查，并且轻松集成外部身份提供者。`dotnet new`
    模板为您提供了预构建的视图和控制器，处理常见场景，如登录和注册，因此您可以快速启动。
- en: There's much more that ASP.NET Core Identity can do. You can learn more in the
    documentation and examples available at [https://docs.asp.net](https://docs.asp.net).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Identity 还有更多功能。您可以在[https://docs.asp.net](https://docs.asp.net)上的文档和示例中了解更多。
