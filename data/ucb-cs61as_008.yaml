- en: Homework 0.1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业 0.1
- en: Homework 0.1 Intro
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作业 0.1 介绍
- en: In this homework, you'll use what you've learned so far to solve some problems.
    You'll also be doing a bit of reading and introducing yourself.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个作业中，你将运用到目前为止学到的知识来解决一些问题。你还将进行一些阅读和自我介绍。
- en: 'Remember: you can view the due date for this homework on either the [front
    page](../index.html) or the [deadlines spreadsheet](https://docs.google.com/spreadsheets/u/1/d/1JftJo7ko0wx-jxAEF9_QxYXfzHCYqCNqKeRwOU9K65A/edit?usp=sharing).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 记住：你可以在[首页](../index.html)或[截止日期表格](https://docs.google.com/spreadsheets/u/1/d/1JftJo7ko0wx-jxAEF9_QxYXfzHCYqCNqKeRwOU9K65A/edit?usp=sharing)上查看这个作业的截止日期。
- en: Template
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板
- en: A template file provides the basic skeleton for a homework assignment.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模板文件提供了一个作业任务的基本框架。
- en: 'If you''re on a lab computer, type the following command into your terminal
    to copy the template to the current directory (note the period at the end):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在实验室电脑上，将以下命令输入到终端中，将模板复制到当前目录（注意末尾的句点）：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Or you can download the template [here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw0-1.rkt).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以在这里下载模板[here](http://inst.eecs.berkeley.edu/~cs61as/templates/hw0-1.rkt)。
- en: Language Declaration
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语言声明
- en: You may have noticed that the first line says
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到第一行说
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This tells the Racket interpreter that your file consists of Racket code. This
    might seem redundant, but the Racket interpreter is also capable of understanding
    other Lisp-family languages, including user-defined ones.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉 Racket 解释器你的文件包含 Racket 代码。这可能看起来多余，但 Racket 解释器也能理解其他 Lisp 家族语言，包括用户定义的语言。
- en: 'The bottom line is that you must include this line at the top of every Racket
    file you write. If you don''t, you''ll see this error message:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 底线是你必须在你写的每个 Racket 文件的顶部包含这行。如果不包含，你会看到这个错误信息：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Autograder
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动评分程序
- en: An **autograder** is a program that checks the validity of your code for a particular
    assignment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动评分程序**是一个检查特定作业代码有效性的程序。'
- en: If you are working on the lab computers, the `grader` command will run the autograder;
    see below for details. If you are working on your own personal machine, you should
    download [grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)
    and the [HW 0-1 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw0-1-tests.rkt).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在实验室电脑上工作，`grader` 命令将运行自动评分程序；详情请参见下文。如果你在自己的个人电脑上工作，你应该下载[grader.rkt](http://inst.eecs.berkeley.edu/~cs61as/autograder/grader.rkt)和[HW
    0-1 tests](http://inst.eecs.berkeley.edu/~cs61as/autograder/tests/hw0-1-tests.rkt)。
- en: Exercise 0
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 0
- en: First, introduce yourself to the staff!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，向工作人员介绍一下自己！
- en: 'In your homework file, answer the following questions:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的作业文件中，回答以下问题：
- en: What is your name?
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你叫什么名字？
- en: What is your major?
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的专业是什么？
- en: Are you a returning student? (That is, did you take 61AS last semester?)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你是一名老生吗？（也就是，上学期你是否选修了 61AS？）
- en: What made you to take 61AS?
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是什么促使你选修 61AS？
- en: Tell us some interesting things about yourself.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉我们一些关于你自己的有趣事情。
- en: 'Now, see if you can find a post on Piazza called "Hello World!". Make a follow-up
    on that post and introduce yourself. Be sure to include:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看看你能否在 Piazza 上找到一篇名为“Hello World!”的帖子。在那篇帖子上跟进并介绍自己。确保包括：
- en: Name
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名字
- en: Major and year
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专业和年级
- en: One interesting fact about yourself
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于你自己的一个有趣事实
- en: Why you're taking the course
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你为什么选择这门课程
- en: Exercise 1
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1
- en: 'Here is the syntax for defining a procedure:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是定义过程的语法：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For example, you saw how to define a `square` procedure:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你看到了如何定义一个 `square` 过程：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After defining it, you can use the procedure `square` to find the square of
    any number you want:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义完后，你可以使用 `square` 过程来找到任何你想要的数字的平方：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Using `square`, define a procedure `sum-of-squares` that takes two arguments
    and returns the sum of the squares of the two arguments:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `square`，定义一个过程 `sum-of-squares`，它接受两个参数并返回这两个参数的平方和：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Make sure you test your work!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 确保测试你的工作！
- en: 'After you''ve written your procedure, run the autograder for this exercise
    and check if you defined your procedure correctly. If you are on the lab computers,
    type the following into your terminal:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 写完你的过程后，运行这个练习的自动评分程序，检查你是否正确定义了过程。如果你在实验室电脑上，将以下内容输入到终端中：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you are working on your own machine, type the following into your terminal:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在自己的电脑上工作，将以下内容输入到终端中：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Interlude
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插曲
- en: Before we present the next exercise, we need to cover some more Racket features.
    Students taking Unit 0 should consider this a preview—we'll explore these features
    more in Lesson 0.2.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们介绍下一个练习之前，我们需要了解更多的 Racket 特性。参加 0 单元的学生应该将其视为一个预览——我们将在第 0.2 课中更深入地探讨这些特性。
- en: Words and Sentences
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单词和句子
- en: 'We''ve shown you some interesting procedures that allow you to do stuff to
    words and sentences:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向您展示了一些有趣的过程，让您可以对单词和句子进行操作：
- en: '`''` makes a word (e.g., `''pi`) or a sentence (e.g., `''(good morning)`).'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''` 创建一个单词（例如，`''pi`）或一个句子（例如，`''(good morning)`）。'
- en: '`first` takes a word and returns the first letter of that word, or it takes
    a sentence and returns the first word of that sentence.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`first` 接受一个单词并返回该单词的第一个字母，或者接受一个句子并返回该句子的第一个单词。'
- en: '`butfirst` (or `bf`) takes a word/sentence and returns everything but the first
    letter/word.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`butfirst`（或 `bf`）接受一个单词/句子并返回除了第一个字母/单词之外的所有内容。'
- en: Keep these procedures and concepts in the back of your mind. They'll come back
    in later exercises and lessons.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些过程和概念记在脑后。它们将在以后的练习和课程中再次出现。
- en: Special Forms
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊形式
- en: Racket has some control features that allow you to choose what to do next based
    on a test. These features are examples of *special forms*—procedures with special
    evaluation rules. We'll talk about special forms more later in the course.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Racket 有一些控制功能，允许您根据测试选择下一步要执行的操作。这些功能是特殊形式的例子——具有特殊评估规则的过程。我们稍后会在课程中更多地讨论特殊形式。
- en: '`if`'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`if`'
- en: In Racket, `if` is a special form that takes three arguments. `if` always evaluates
    its first argument. If the value of that argument is `true`, then `if` evaluates
    its second argument and returns its value. If the value of the first argument
    is `false`, then if evaluates its third argument and returns that value.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Racket 中，`if` 是一个特殊形式，它接受三个参数。`if` 总是评估其第一个参数。如果该参数的值为`true`，则 `if` 评估其第二个参数并返回其值。如果第一个参数的值为`false`，则
    `if` 评估其第三个参数并返回该值。
- en: 'Here is an example of proper if syntax:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是正确的 `if` 语法示例：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The result of this example expression is the word `'yay!`. Because the first
    expression is true, the last argument to `if` is not evaluated, which means we
    don't get a divide-by-zero error.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例表达式的结果是单词 `'yay!`。因为第一个表达式为真，所以 `if` 的最后一个参数不会被评估，这意味着我们不会得到除以零的错误。
- en: '`cond`'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`cond`'
- en: '`cond` is a special form that acts just like `if`, except with multiple options.
    Each condition is tested one at a time until one evaluates to `true`. An `else`
    clause is typically used at the end to capture cases where all prior conditions
    evaluated to `false`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`cond` 是一个特殊形式，它的行为就像 `if`，但有多个选项。每个条件逐一测试，直到有一个求值为`true`。通常在最后使用 `else` 子句来捕获所有先前条件都求值为`false`的情况。'
- en: 'Here is an example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example, the first two conditions return `false`, so the overall expression
    evaluates to the word `'yay!`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，前两个条件返回 `false`，因此整体表达式求值为单词 `'yay!`。
- en: Some good procedures to use for the test cases are `>`, `<`, and `=`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 用于测试案例的一些好的过程是 `>`、`<` 和 `=`。
- en: '`and`'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`and`'
- en: '`and` checks whether *all* of its arguments are `true`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`and` 检查其所有参数是否都为`true`：'
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: (Note that `#t` and `true` can be used interchangeably, as can `#f` and `false`.)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: （注意 `#t` 和 `true` 可以互换使用，`#f` 和 `false` 也一样。）
- en: 'Why is `and` a special form? Because it evaluates its arguments and stops as
    soon as it can, returning `false` as soon as any argument evaluates to `false`.
    This turns out to be useful. Suppose we have the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么 `and` 是一个特殊形式？因为它对其参数进行求值，并在可以的情况下尽早停止，只要其中任何一个参数求值为`false`，它就会立即返回`false`。这事实上是很有用的。假设我们有以下内容：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then we can do this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以这样做：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Notice how the last call didn''t fail. Since `(number? ''aardvark)` evaluates
    to `false`, `and` returns `#f` before evaluating its second argument. Calling
    `(divisible? ''aardvark 4)` would cause an error:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意最后一次调用并没有失败。由于`(number? 'aardvark)`的求值结果是`false`，在评估其第二个参数之前，`and`会返回`#f`。调用`(divisible?
    'aardvark 4)`将会导致错误：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This message simply says that the procedure `remainder` reported an error because
    it expected an integer but instead got `'aardvark`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此消息只是说，由于 `remainder` 过程期望一个整数，但实际传入的是 `'aardvark`，所以报告了一个错误。
- en: 'A subtle point about `and`: if all its arguments evaluate to `true`, instead
    of simply returning `#t` it will return the value of its last argument.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `and` 的一个微妙之处：如果其所有参数都求值为`true`，那么它不会简单地返回`#t`，而是返回其最后一个参数的值。
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Anything that is not `#f` is `#t`. So, `100` is `true`, `'foo` is `true`, and
    so on.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 任何不是 `#f` 的都是 `#t`。因此，`100` 是 `true`，`'foo` 是 `true`，等等。
- en: '`or`'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`or`'
- en: '`or` checks whether **any** of its arguments are `true`.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`or` 检查其任一参数是否为`true`。'
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Why is `or` a special form? It evaluates its arguments and stops as soon as
    one of its arguments evaluates to `true`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么 `or` 是一个特殊形式？它对其参数进行求值，并在其中一个参数求值为`true`时立即停止。
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A subtle point about `or`: like `and`, if any one of its arguments evaluate
    to `true`, `or` returns the value of the evaluated expression rather than just
    simply `#t`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`or`的一个微妙之处：与`and`一样，如果其任何一个参数求值为`true`，`or`将返回求值表达式的值，而不仅仅是`#t`。
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Exercise 2
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2
- en: Part a
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一部分
- en: Take a moment to read through the above and try everything out in the interpreter.
    Then, write a procedure `can-drive` that takes the age of a person as an argument.
    If the age is below 16, return the sentence `'(Not yet)`. Otherwise, return the
    sentence `'(Good to go)`. Make sure to test your code in the interpreter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 花点时间阅读上面的内容，并在解释器中尝试一切。然后，编写一个过程`can-drive`，以一个人的年龄作为参数。如果年龄低于 16 岁，则返回句子`'(Not
    yet)`。否则，返回句子`'(Good to go)`。确保在解释器中测试您的代码。
- en: 'After you''ve finished this exercise, run the autograder on your code to check
    if it''s correct by typing the following into your terminal:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此练习后，请在终端中键入以下内容，运行自动评分器检查代码是否正确：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Or, on your own machine:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在您自己的计算机上：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Part b
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二部分
- en: Write a procedure `fizzbuzz` that takes a number and outputs the word `'fizz`
    if the number is divisible by 3, `'buzz` if it's divisible by 5, `'fizzbuzz` if
    it's divisible by both 3 and 5, and otherwise, the number itself. You may find
    the function `remainder` useful. Make sure to test your code in the interpreter.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个过程`fizzbuzz`，接受一个数字并输出`'fizz`，如果数字可被 3 整除，则输出`'buzz`，如果数字可同时被 3 和 5 整除，则输出`'fizzbuzz`，否则输出数字本身。您可能会发现函数`remainder`有用。确保在解释器中测试您的代码。
- en: 'After you''ve finished this exercise, check your solution by typing the following
    into your terminal:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此练习后，请在终端中键入以下内容检查您的解决方案：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Or, on your own machine:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在您自己的计算机上：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Exercise 3
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3
- en: Why did the Walrus cross the Serengeti?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么海象要穿越塞伦盖蒂？
- en: To figure out the answer, look on Piazza for the post labeled "Answer to Homework
    0-1 Exercise 3".
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到答案，请在 Piazza 上查找标记为“Homework 0-1 Exercise 3 答案”的帖子。
- en: Exercise 4
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4
- en: 'See what happens when you type the following snippets of code into the interpreter:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 看看当您将以下代码片段键入解释器时会发生什么：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now we want to see if we can write a procedure that behaves just like `if`.
    Here''s our attempt:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想看看我们是否可以编写一个行为与`if`完全相同的过程。以下是我们的尝试：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s try it out:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一试：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It didn't work!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 它不起作用！
- en: 'Here is another example that breaks:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个示例，它的行为不对：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Why didn't `new-if` behave like `if`? What can you learn about `if` from this
    example? Think about this and try to figure it out. Expect to see it again.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么`new-if`的行为不像`if`呢？从这个例子中你能学到什么关于`if`？思考一下并试着弄清楚。预计会再次遇到。
- en: Recommended Readings
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推荐阅读
- en: 'The following readings are recommended:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐阅读如下：
- en: '[Lecture Notes 1](http://inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[讲义笔记 1](http://inst.eecs.berkeley.edu/~cs61as/reader/notes.pdf)'
- en: '[SICP 1.1](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%25_sec_1.1)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SICP 1.1](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%25_sec_1.1)'
- en: Manual Testing
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动测试
- en: Before running the autograder, you should test your code manually in the Racket
    interpreter. This is important because the autograder doesn't always test all
    possible cases.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行自动评分器之前，您应该在 Racket 解释器中手动测试您的代码。这很重要，因为自动评分器不总是测试所有可能的情况。
- en: To load individual definitions into Racket, start the Racket interpreter from
    your terminal by typing
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要将单个定义加载到 Racket 中，请从终端启动 Racket 解释器，输入
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: then copy and paste definitions from your file into the interpreter.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从您的文件中复制并粘贴定义到解释器中。
- en: To load your entire file into Racket, use
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要将整个文件加载到 Racket 中，请使用
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Running the Autograder
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行自动评分器
- en: 'Before submitting any homework, there are two checks you need to make:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交任何作业之前，您需要进行两项检查：
- en: Your homework *must* load into the Racket interpreter. Any submissions that
    do not load will not receive any credit.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的作业*必须*加载到 Racket 解释器中。任何无法加载的提交将不会得到任何学分。
- en: Run your homework through the autograder to check your answers. If you cannot
    get your homework to pass all the autograder tests, don't fret. Submit your homework
    anyway. Remember, homeworks are graded based on effort.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行自动评分器检查您的答案。如果您无法使作业通过所有自动评分器测试，请不要担心。无论如何，请提交您的作业。请记住，作业是根据努力程度评分的。
- en: 'To run the autograder, type the following into the terminal:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行自动评分器，请在终端中键入以下内容：
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For example, to run the autograder on this homework, type the following into
    the terminal:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在这份作业上运行自动评分器，请在终端中键入以下内容：
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Submit Your Homework!
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交你的作业！
- en: For instructions, see [this guide](../submit.html). It covers basic terminal
    commands and assignment submission.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于说明，请参阅[此指南](../submit.html)。它涵盖了基本的终端命令和作业提交。
- en: If you have any trouble submitting, do not hesitate to ask a TA!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在提交过程中遇到任何问题，请不要犹豫向助教求助！
