- en: '9Recursion and Cycles: Procedures and Data'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9递归和循环：过程和数据
- en: 'Recursion is the act of self-reference. When we speak of recursion in programming
    languages, we may have one of (at least) two meanings in mind: recursion in data,
    and recursion in control (i.e., of program behavior—<wbr>that is to say, of functions).'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 递归是自我引用的行为。当我们在编程语言中谈论递归时，我们可能有至少两种含义：数据中的递归，以及控制中的递归（即程序行为的递归——也就是说，函数的递归）。
- en: 9.1Recursive and Cyclic Data
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.1递归和循环数据
- en: Recursion in data can refer to one of two things. It can mean referring to something
    of the same kind, or referring to the same thing itself.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据中的递归可以指两种情况之一。它可以意味着引用相同类型的东西，或者引用相同的东西本身。
- en: 'Recursion of the same kind leads to what we traditionally call recursive data.
    For instance, a tree is a recursive data structure: each vertex can have multiple
    children, each of which is itself a tree. But if we write a procedure to traverse
    the nodes of a tree, we expect it to terminate without having to keep track of
    which nodes it has already visited. They are finite data structures.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 相同类型的递归导致我们传统上称为递归数据的东西。例如，树是一种递归数据结构：每个顶点可以有多个子节点，每个子节点本身都是一棵树。但是，如果我们编写一个遍历树节点的过程，我们希望它在不必追踪已经访问过的节点的情况下终止。它们是有限的数据结构。
- en: 'In contrast, a graph is often a cyclic datum: a node refers to another node,
    which may refer back to the original one. (Or, for that matter, a node may refer
    directly to itself.) When we traverse a graph, absent any explicit checks for
    what we have already visited, we should expect a computation to diverge, i.e.,
    not terminate. Instead, graph algorithms need a memory of what they have visited
    to avoid repeating traversals.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，图通常是循环数据：一个节点引用另一个节点，后者可能再次引用原始节点。（或者，换句话说，一个节点可能直接引用自身。）当我们遍历图时，除非有明确的检查我们已经访问过什么的机制，否则我们应该期望计算会发散，即不会终止。相反，图算法需要记住它们已经访问过什么，以避免重复遍历。
- en: 'Adding recursive data, such as lists and trees, to our language is quite straightforward.
    We mainly require two things:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 将递归数据（例如列表和树）添加到我们的语言中非常简单。我们主要需要两件事：
- en: The ability to create compound structures (such as nodes that have references
    to children).
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建复合结构的能力（例如具有对子节点的引用的节点）。
- en: The ability to bottom-out the recursion (such as leaves).
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 底部递归的能力（例如叶子节点）。
- en: Exercise
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: Add lists and binary trees as built-in datatypes to the programming language.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将列表和二叉树作为编程语言的内置数据类型添加进去。
- en: 'Adding cyclic data is more subtle. Consider the simplest form of cyclic datum,
    a cell referring back to itself:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 添加循环数据更加微妙。考虑最简单形式的循环数据，一个指向自身的单元格：
- en: '![image](../Images/bd2cb19b566ea7345523585e11cb21d6.jpg)'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![image](../Images/bd2cb19b566ea7345523585e11cb21d6.jpg)'
- en: 'Let’s try to define this in Racket. Here’s one attempt:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在 Racket 中定义这个。这是一种尝试：
- en: '| (let ([b b]) |'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (let ([b b]) |'
- en: '|   b) |'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   b) |'
- en: 'But this doesn’t work: b on the right-hand side of the let isn’t bound. It’s
    easy to see if we desugar it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这不起作用：let 右侧的 b 没有绑定。如果我们将其 desugar，很容易看出来：
- en: '| ((lambda (b) |'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ((lambda (b) |'
- en: '|    b) |'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|    b) |'
- en: '|   b) |'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   b) |'
- en: 'and, for clarity, we can rename the b in the function:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，为了清晰起见，我们可以在函数中重新命名 b：
- en: '| ((lambda (x) |'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ((lambda (x) |'
- en: '|    x) |'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|    x) |'
- en: '|  b) |'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|  b) |'
- en: Now it’s patently clear that b is unbound.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在很明显 b 没有绑定。
- en: Absent some magical Racket construct we haven’t yet seenThat construct would
    be shared, but virtually no other language has this notational mechanism, so we
    won’t dwell on it here. In fact, what we are studying is the main idea behind
    how shared actually works., it becomes clear that we can’t create a cyclic datum
    in one shot. Instead, we need to first create a “place” for the datum, then refer
    to that place within itself. The use of “then”—<wbr>i.e., the introduction of
    time—<wbr>should suggest a mutation operation. Indeed, let’s try it with boxes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除非我们还没有见过某种神奇的 Racket 构造，否则构造将是共享的，但几乎没有其他语言具有这种符号机制，因此我们不会在这里详细讨论它。实际上，我们正在研究的是共享实际上是如何工作的主要思想，可以清楚地看出，我们无法一次性创建循环数据。相反，我们需要首先为数据创建一个“位置”，然后在数据内部引用该位置。使用“然后”——即，引入时间——应该暗示一种变异操作。的确，让我们尝试使用盒子。
- en: 'Our plan is as follows. First, we want to create a box and bind it to some
    identifier, say b. Now, we want to mutate the content of the box. What do we want
    it to contain? A reference to itself. How does it obtain that reference? By using
    the name, b, that is already bound to it. In this way, the mutation creates the
    cycle:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的计划如下。首先，我们想创建一个盒子并将其绑定到某个标识符上，比如b。现在，我们想要改变盒子的内容。我们希望它包含一个指向自身的引用。它如何获得该引用？通过使用已经绑定给它的名称b。这样，突变就创建了循环：
- en: '| (let ([b (box ''dummy)]) |'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (let ([b (box ''dummy)]) |'
- en: '|   (begin |'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (begin |'
- en: '|     (set-box! b b) |'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     (set-box! b b) |'
- en: '|     b)) |'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     b)) |'
- en: Note that this program will not run in Typed PLAI as written. We’ll return to
    typing such programs later [REF]. For now, run it in the untyped (#lang plai)
    language.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此程序如写的那样不会在Typed PLAI中运行。我们稍后会返回来对这样的程序进行类型化[REF]。现在，用不带类型的(#lang plai)语言运行它。
- en: 'When the above program is Run, Racket prints this as: #0=’#&#0#. This notation
    is in fact precisely what we want. Recall that #& is how Racket prints boxes.
    The #0= (and similarly for other numbers) is how Racket names pieces of cyclic
    data. Thus, Racket is saying, “#0 is bound to a box whose content is #0#, i.e.,
    whatever is bound to #0, i.e., itself”.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当上述程序运行时，Racket会打印出：#0=’#&#0#。这种表示法实际上正是我们想要的。回想一下，#&是Racket打印盒子的方式。#0=（以及其他数字类似）是Racket给循环数据命名的方式。因此，Racket正在说，“#0绑定到一个盒子，其内容是#0#，即绑定到#0的任何内容，即自身”。
- en: Exercise
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: Run the equivalent program through your interpreter for boxes and make sure
    it produces a cyclic value. How do you check this?
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通过你的盒子解释器运行等效的程序，并确保它产生一个循环值。你如何检查这个？
- en: 'The idea above generalizes to other datatypes. In this same way we can also
    produce cyclic lists, graphs, and so on. The central idea is this two-step process:
    first name an vacant placeholder; then mutate the placeholder so its content is
    itself; to obtain “itself”, use the name previously bound. Of course, we need
    not be limited to “self-cycles”: we can also have mutually-cyclic data (where
    no one element is cyclic but their combination is).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上述想法推广到其他数据类型。以同样的方式，我们也可以产生循环列表、图等。中心思想是这样的两步过程：首先命名一个空白占位符；然后突变占位符，使其内容为自身；为了获得“自身”，使用先前绑定的名称。当然，我们不必局限于“自我循环”：我们也可以有互相循环的数据（其中没有一个元素是循环的，但它们的组合是循环的）。
- en: 9.2Recursive Functions
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.2递归函数
- en: 'In a shift in terminology, a recursive function is not a reference to a same
    kind of function but rather to the same function itself. It’s useful to first
    ensure we’ve first extended our language with conditionals (even of the kind that
    only check for 0, as described earlier: [Adding Functions to the Language](adding-functions.html)),
    so we can write non-trivial programs that terminate.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在术语上的转变中，递归函数不是指向相同类型的函数，而是指向相同的函数本身。首先确保我们已经扩展了我们的语言以包含条件（甚至是只检查0的条件，如前面描述的那样：[向语言中添加函数](adding-functions.html)），这样我们就可以编写终止的非平凡程序了，这是很有用的。
- en: 'Let’s now try to write a recursive factorial:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试写一个递归的阶乘：
- en: '| (let ([fact (lambda (n) |'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (let ([fact (lambda (n) |'
- en: '|               (if0 n |'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|               (if0 n |'
- en: '|                    1 |'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                    1 |'
- en: '|                    (* n (fact (- n 1)))))]) |'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                    (* n (fact (- n 1)))))]) |'
- en: '|   (fact 10)) |'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (fact 10)) |'
- en: But this doesn’t work at all! The inner fact gives an unbound identifier error,
    just as in our cyclic datum example.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但这根本行不通！内部的fact会给出一个未绑定的标识符错误，就像我们的循环数据示例一样。
- en: 'It is no surprise that we should encounter the same error, because it has the
    same cause. Our traditional binding mechanism does not automatically make function
    definitions cyclic (indeed, in some early programming languages, they were not:
    misguidedly, recursion was considered a special feature).Because you typically
    write top-level definitions, you don’t encounter this issue. At the top-level,
    every binding is implicitly a variable or a box. As a result, the pattern below
    is more-or-less automatically put in place for you. This is why, when you want
    a recursive local binding, you must use letrec or local, not let. Instead, if
    we want recursion—<wbr>i.e., for a function definition to cyclically refer to
    itself—<wbr>we must implement it by hand.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该遇到相同的错误并不奇怪，因为它有相同的原因。我们传统的绑定机制不会自动使函数定义成为循环的（事实上，在一些早期的编程语言中，它们并不是：错误地认为递归是一种特殊特性）。因为你通常写顶层定义，所以你不会遇到这个问题。在顶层，每个绑定都隐含着一个变量或一个盒子。因此，下面的模式基本上是自动为你准备好的。这就是为什么，当你想要一个递归的本地绑定时，你必须使用letrec或local，而不是let。相反，如果我们想要递归——即，一个函数定义循环地引用自己——我们必须手动实现它。
- en: 'The means to do so is now clear: the problem is the same one we diagnosed before,
    so we can reuse the same solution. We again have to follow a three-step process:
    first create a placeholder, then refer to the placeholder where we want the cyclic
    reference, and finally mutate the placeholder before use. Thus:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如何做到这一点已经很清楚了：问题与我们之前诊断的问题相同，因此我们可以重用相同的解决方案。我们再次必须遵循一个三步过程：首先创建一个占位符，然后在需要循环引用的地方引用该占位符，最后在使用前对占位符进行变异。因此：
- en: '| (let ([fact (box ''dummy)]) |'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (let ([fact (box ''dummy)]) |'
- en: '|   (let ([fact-fun |'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (let ([fact-fun |'
- en: '|          (lambda (n) |'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|          (lambda (n) |'
- en: '|            (if (zero? n) |'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|            (if (zero? n) |'
- en: '|                1 |'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                1 |'
- en: '|                (* n ((unbox fact) (- n 1)))))]) |'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                (* n ((unbox fact) (- n 1)))))]) |'
- en: '|     (begin |'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     (begin |'
- en: '|       (set-box! fact fact-fun) |'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|       (set-box! fact fact-fun) |'
- en: '|       ((unbox fact) 10)))) |'
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|       ((unbox fact) 10)))) |'
- en: 'In fact, we don’t even need fact-fun: I’ve used that binding just for clarity.
    Observe that because it isn’t recursive, and we have identifiers rather than variables,
    its use can simply be substituted with its value:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们甚至不需要fact-fun：我只是为了清晰起见而使用了这个绑定。请注意，由于它不是递归的，而且我们有标识符而不是变量，因此它的使用可以简单地用其值替换：
- en: '| (let ([fact (box ''dummy)]) |'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (let ([fact (box ''dummy)]) |'
- en: '|   (begin |'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (begin |'
- en: '|     (set-box! fact |'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     (set-box! fact |'
- en: '|               (lambda (n) |'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|               (lambda (n) |'
- en: '|                 (if (zero? n) |'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                 (if (zero? n) |'
- en: '|                     1 |'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                     1 |'
- en: '|                     (* n ((unbox fact) (- n 1)))))) |'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                     (* n ((unbox fact) (- n 1)))))) |'
- en: '|     ((unbox fact) 10))) |'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     ((unbox fact) 10))) |'
- en: There is the small nuisance of having to repeatedly unbox fact. In a language
    with variables, this would be even more seamless:Indeed, one use for variables
    is that they simplify the desguaring of the above pattern, instead of requiring
    every use of a cyclically-bound identifier to be unboxed. On the other hand, with
    a little extra effort the desugaring process could take care of doing the unboxing,
    too.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个小麻烦，需要反复打开fact的盒子。在有变量的语言中，这将更加无缝：事实上，变量的一个用途是简化上述模式的去糖化，而不是要求每次循环绑定标识符都要打开盒子。另一方面，稍加努力，去糖化过程也可以负责打开盒子。
- en: '| (let ([fact ''dummy]) |'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (let ([fact ''dummy]) |'
- en: '|     (begin |'
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     (begin |'
- en: '|       (set! fact |'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|       (set! fact |'
- en: '|             (lambda (n) |'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|             (lambda (n) |'
- en: '|               (if (zero? n) |'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|               (if (zero? n) |'
- en: '|                   1 |'
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                   1 |'
- en: '|                   (* n (fact (- n 1)))))) |'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|                   (* n (fact (- n 1)))))) |'
- en: '|       (fact 10))) |'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|       (fact 10))) |'
- en: 9.3Premature Observation
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.3提前观察
- en: 'Our preceding discussion of this pattern shows a clear temporal sequencing:
    create, update, use. We can capture it in a desugaring rule. Suppose we add the
    following new syntax:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对这种模式的前述讨论显示了明确的时间顺序：创建、更新、使用。我们可以用一个去糖化规则来捕捉它。假设我们添加以下新语法：
- en: '| (rec name value body) |'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (rec name value body) |'
- en: As an example of its use,
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作为其使用的一个例子，
- en: '| (rec fact |'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (rec fact |'
- en: '|      (lambda (n) (if (= n 0) 1 (* n (fact (- n 1))))) |'
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|      (lambda (n) (if (= n 0) 1 (* n (fact (- n 1))))) |'
- en: '|      (fact 10)) |'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|      (fact 10)) |'
- en: 'would evaluate to the factorial of 10. This new syntax would desugar to:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将会计算出10的阶乘。这个新的语法会被去糖化为：
- en: '| (let ([name (box ''dummy)]) |'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (let ([name (box ''dummy)]) |'
- en: '|   (begin |'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (begin |'
- en: '|     (set-box! name value) |'
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     (set-box! name value) |'
- en: '|      body)) |'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|      body)) |'
- en: 'Where we assume that all references to name in value and body have been rewritten
    to (unbox name), or alternatively that we instead use variables:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们假设value和body中所有对name的引用都已被重写为(unbox name)，或者我们可以使用变量：
- en: '| (let ([name ''dummy]) |'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (let ([name ''dummy]) |'
- en: '|   (begin |'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   (begin |'
- en: '|     (set! name value) |'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     (set! name value) |'
- en: '|     body)) |'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|     body)) |'
- en: 'This naturally inspires a question: what if we get these out of order? Most
    interestingly, what if we try to use name before we’re done updating its true
    value into place? Then we observe the state of the system right after creation,
    i.e., we can see the placeholder in its raw form.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这自然引发了一个问题：如果我们按顺序排列呢？最有趣的是，如果我们在完成更新其真实值之前尝试使用名称会怎样？那么我们就会观察到在创建后立即使用系统的状态，即我们可以看到占位符的原始形式。
- en: 'The simplest example that demonstrates this is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的示例是：
- en: '| (letrec ([x x]) |'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (letrec ([x x]) |'
- en: '|   x) |'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   x) |'
- en: or equivalently,
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 或者等价地，
- en: '| (local ([define x x]) |'
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| (local ([define x x]) |'
- en: '|   x) |'
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '|   x) |'
- en: 'In most Racket variants, this leaks the initial value given to the placeholder—<wbr>a
    value that was never meant for public consumption. This is troubling because it
    is, after all, a legitimate value, which means it can probably be used in at least
    some computations. If a developer accesses and uses it inadvertently, however,
    they are effectively computing with nonsense.There are generally three solutions
    to this problem:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数Racket变体中，这会泄漏给占位符的初始值—<wbr>一个从未打算供公众消费的值。这令人不安，因为它毕竟是一个合法的值，这意味着它可能至少可以在某些计算中使用。然而，如果开发人员无意中访问并使用它，他们实际上是在进行无意义的计算。通常有三种解决这个问题的方法：
- en: Make sure the value is sufficiently obscure so that it can never be used in
    a meaningful context. This means values like 0 are especially bad, and indeed
    most common datatypes should be shunned. Instead, the language might create a
    new type of value just for use here. Passed to any other operation, this will
    result in an error.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保值足够隐晦，以至于永远不会在有意义的上下文中使用。这意味着像0这样的值特别糟糕，实际上大多数常见的数据类型都应该避免使用。相反，语言可能会为此创建一种新类型的值。传递给任何其他操作，这将导致错误。
- en: Explicitly check every use of an identifier for belonging to this special “premature”
    value. While this is technically feasible, it imposes an enormous performance
    penalty on a program. Thus, it is usually only employed in teaching languages.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 明确检查标识符的每次使用是否属于这种特殊的“过早”值。尽管从技术上讲这是可行的，但它会给程序带来巨大的性能损失。因此，通常只在教学语言中使用。
- en: Allow the recursion constructor to be used only in the case of binding functions,
    and then make sure that the right-hand side of the binding is syntactically a
    function. Unfortunately, this solution can be a bit drastic because it precludes
    writing, for instance, structures to create graphs.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅允许递归构造器在绑定函数的情况下使用，并确保绑定的右侧在语法上是一个函数。不幸的是，这种解决方案可能有点极端，因为它排除了编写例如用于创建图形的结构。
- en: 9.4Without Explicit State
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.4没有显式状态
- en: As you may be aware, there is another way to define recursive functions (and
    hence recursive data) that does not leverage explicit mutation operations.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经意识到的，还有另一种定义递归函数（因此递归数据）的方法，不涉及显式的突变操作。
- en: Do Now!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就做！
- en: 'You’ve already seen what goes wrong when we try to use just let to define a
    recursive function. Try harder. Hint: Substitute more. And then some more. And
    more!'
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当我们尝试仅使用let来定义递归函数时，您已经看到了出现的问题。再努力一点。提示：进行更多替换。然后再多一些。再多一些！
- en: Obtaining recursion from just functions is an amazing idea, and I use the term
    literally. It’s written up well by Daniel P. Friedman and Matthias Felleisen in
    their book, The Little Schemer. Read about it in [their sample chapter online](http://www.ccs.neu.edu/home/matthias/BTLS/sample.pdf).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 仅从函数中获得递归是一个了不起的想法，我是字面意思上使用这个术语。这在丹尼尔·P·弗里德曼和马蒂亚斯·费莱森的书《The Little Schemer》中有很好的描述。在[他们的在线示例章节](http://www.ccs.neu.edu/home/matthias/BTLS/sample.pdf)中阅读更多关于它的内容。
- en: Exercise
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: Does the above solution use state anywhere? Implicitly?
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 上述解决方案是否在任何地方使用状态？隐式地？
