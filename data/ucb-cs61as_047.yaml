- en: Time
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间
- en: Measuring Time Efficency
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测量时间效率
- en: In order to measure how fast programs runs, we have to devise a reasonable way
    to do so. Using a stopwatch to measure how much time it takes wouldn't work because
    the timings would change each time we had different programs running in the background,
    random fluctuations, solar flares, etc. Moreover, new computers are generally
    faster and old timings wouldn't be applicable.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了衡量程序运行的速度，我们必须设计一种合理的方法。使用秒表来测量所需时间是行不通的，因为不同程序在后台运行时，计时会发生变化，随机波动，太阳耀斑等。此外，新计算机通常更快，旧的计时不适用。
- en: A better way to approach this is to count the number of steps that a procedure
    takes. Focusing on the procedure allows us to avoid the problem of being tied
    down to any particular computer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的方法是计算一个过程所需的步骤数。专注于过程可以避免被绑定到任何特定计算机的问题。
- en: Counting Steps
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算步骤
- en: 'Here are some of the procedures we''ll consider as taking "one step":'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将考虑为“一步”的一些过程：
- en: All of the following procedures take a single step.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下所有过程都只需一步。
- en: Basic arithmetic operations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本算术运算
- en: defining variables
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义变量
- en: defining procedures
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义过程
- en: conditionals?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件语句？
- en: user-defined procedure calls
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户定义的过程调用
- en: 'Example: Counting Steps'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子：计算步骤
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'However, the most interesting questions arise when we compare one procedure
    to another, and ask which one is faster. In order to make this comparision, we
    must ask the following for each procedure:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最有趣的问题是当我们比较一个过程和另一个过程时，问哪一个更快。为了进行这种比较，我们必须为每个过程问以下问题：
- en: As we increase the size of the argument, how many steps will this procedure
    take to run?
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 随着参数规模的增加，这个过程需要多少步才能运行？
- en: In other words, if we were to graph the number of steps a procedure takes (with
    the input as the x-axis), what is the shape of that graph?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，如果我们将一个过程所需的步骤数量（以输入为x轴）绘制成图表，那么图表的形状是什么？
- en: 'Example: Function Runtime'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子：函数运行时间
- en: For `square`, we say this is a *constant* time procedure--`(square 2)` takes
    as many steps as `(square 2000)`. So as we increase the size of our input, the
    number of steps remains *constant*.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`square`，我们说这是一个*常数*时间的过程--`(square 2)`所需的步骤与`(square 2000)`相同。因此，随着输入规模的增加，步骤数量保持*不变*。
- en: For `last`, the procedure that finds you the last word of a sentence, we say
    this is a *linear* time procedure--as we call `last` on larger and larger inputs,
    the number of steps grows linearly.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`last`，这个找到句子最后一个单词的过程，我们说这是一个*线性*时间的过程--当我们在越来越大的输入上调用`last`时，步骤数量呈线性增长。
- en: In order to formalize this, we have to learn a mathematical construct called
    **Orders of Growth**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了形式化这一点，我们必须学习一个叫做**增长阶**的数学构造。
- en: Orders of Growth
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增长阶
- en: Orders of Growth describe the relationship between functions. Given two functions
    *f(n)* and *g(n)*, when we say *f = Θ(g)*, we mean that there exists two numbers,
    *a*, and *b* such that *ag(n) ≤ f(n) ≤ bg(n)* for sufficiently large values of
    *n*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 增长阶描述函数之间的关系。给定两个函数*f(n)*和*g(n)*，当我们说*f = Θ(g)*时，我们的意思是存在两个数*a*和*b*，使得对于足够大的*n*值，*ag(n)
    ≤ f(n) ≤ bg(n)*。
- en: Examples
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子
- en: When *f(n) = n* and *g(n) = 329n*, *f = Θ(g)*.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当*f(n) = n*和*g(n) = 329n*时，*f = Θ(g)*。
- en: When *f(n) = 4n²* and *g(n) = 2n²+n*, *f = Θ(g)*.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当*f(n) = 4n²*和*g(n) = 2n²+n*时，*f = Θ(g)*。
- en: When *f(n) = .0004n³* and *g(n) = 1000n²+30000n*, *f* IS NOT equal to *Θ(g)*.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当*f(n) = .0004n³*和*g(n) = 1000n²+30000n*时，*f*不等于*Θ(g)*。
- en: Based on these examples, we have the following rules
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些例子，我们有以下规则
- en: We can ignore constant factors in procedures
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以忽略过程中的常数因子
- en: We can ignore lower terms, e.g. in *2n²+n*, we only care about the *n²*.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以忽略较低的项，例如在*2n²+n*中，我们只关心*n²*。
- en: Coming back to procedures, we can formally say that `square` is *Θ(1)*, and
    `last` is *Θ(n)*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 回到过程，我们可以正式说`square`是*Θ(1)*，`last`是*Θ(n)*。
- en: 'Example: Exponentiation'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子：指数
- en: 'Consider the straightforward way to compute `b^n` (`b` to the `n`th power):
    multiply `b` against itself `n` times. Here''s the code for that.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑计算`b^n`（`b`的`n`次方）的直接方法：将`b`乘以自身`n`次。以下是代码。
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This runs in linear time with respect to the `n` variable. We know this because
    of two observations
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这在`n`变量方面以线性时间运行。我们之所以知道这一点，是因为有两个观察结果
- en: If `n` is 2, we make two recursive calls and if `n` is 10, then we make 10 recursive
    calls.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`n`为2，我们会进行两次递归调用，如果`n`为10，那么我们会进行10次递归调用。
- en: In each recursive call, there is *Θ(1)* work being done.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每次递归调用中，都会进行*Θ(1)*的工作。
- en: Can we do better? Turns out there's a more clever exponentiation algorithm that
    takes advantage of the follow idea of *successive squaring*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能做得更好吗？原来有一个更聪明的指数算法，利用了*连续平方*的思想。
- en: 'Let''s say we were trying to compute b^8\. Normally, we would do b * b * b
    * b * b * b * b * b. This requires 8 multiplcations. Instead we can do it in 3:
    ![The trick](../Images/4c7b9f6fffa26df3222c4e574f4a63e4.jpg) This method works
    fine for exponents that are powers of 2\. We can also take advantage of successive
    squaring in computing exponentials in general if we use the rule ![The other trick](../Images/0c7f3422c89c551d0277580c39ad5b4a.jpg)'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 假设我们想要计算b^8。通常，我们会做b * b * b * b * b * b * b * b。这需要8次乘法。相反，我们可以用3次完成：![这个技巧](../Images/4c7b9f6fffa26df3222c4e574f4a63e4.jpg)
    如果指数是2的幂，这个方法很有效。如果我们使用规则![另一个技巧](../Images/0c7f3422c89c551d0277580c39ad5b4a.jpg)，我们也可以利用连续平方来计算一般的指数。
- en: 'The above tricks give us this procedure:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上述技巧给出了这个过程：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Squaring every even number allows us to cut down on the number of recursive
    calls. In fact, if you think about it, every other recursive call, we cut down
    `n` by half. This pattern of reducing the problem by half is means that the number
    of recursive calls taken is logarithmic with respect to `n`. Therefore, `fast-expt`
    *= Θ(log(n))*. (If this explanation doesn't make sense, check out 1.2.4\. in the
    Further Reading)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个偶数进行平方可以减少递归调用的数量。事实上，如果你仔细想一想，每隔一个递归调用，我们就把`n`减半。这种通过减半问题规模的模式意味着所需的递归调用数量与`n`的对数成比例。因此，`fast-expt`
    *= Θ(log(n))*。（如果这个解释不合理，请查看Further Reading中的1.2.4。）
- en: Exercises
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Here are short, ungraded exercises for practice with finding the runtime of
    a function.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些简短的、不计分的练习，用于练习查找函数的运行时间。
- en: What is the runtime of bar?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: bar的运行时间是多少？
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What is the runtime of sort?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 排序的运行时间是多少？
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Further Reading
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[SICP 1.2.3 Orders of Growth](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_%_sec_1.2.3)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SICP 1.2.3 增长阶](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_%_sec_1.2.3)'
- en: '[SICP 1.2.4 Exponentiation](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_%_sec_1.2.4)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SICP 1.2.4 指数运算](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_%_sec_1.2.4)'
