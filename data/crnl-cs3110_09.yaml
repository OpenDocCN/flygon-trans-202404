- en: 'Lecture 5: Mapping, Folding, and the Map-Reduce Paradigm'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五讲：映射、折叠和Map-Reduce范式
- en: The Map-Reduce Paradigm
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Map-Reduce范式
- en: '*Map-reduce* is a programming model that has its roots in functional programming. 
    In addition to often producing short, elegant code for problems involving lists
    or collections, this model has proven very useful for large-scale highly parallel
    data processing.  Here we will think of map and reduce as operating on lists for
    concreteness, but they are appropriate to any collection (sets, etc.).  *Map*
    operates on a list of values in order to produce a new list of values, by applying
    the same computation to each value.  *Reduce* operates on a list of values to
    collapse or combine those values into a single value (or some number of values),
    again by applying the same computation to each value.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*Map-reduce*是一个根植于函数式编程的编程模型。除了通常为涉及列表或集合的问题产生简短、优雅的代码外，这种模型在大规模高度并行数据处理方面也被证明非常有用。在这里，我们将map和reduce视为在列表上操作以具体化，但它们适用于任何集合（集合等）。*Map*在值列表上操作，以生成一个新的值列表，通过对每个值应用相同的计算。*Reduce*在值列表上操作，将这些值折叠或组合成单个值（或一些值），同样是通过对每个值应用相同的计算。'
- en: For large datasets, it has proven particularly valuable to think about processing
    in terms of the same operation being applied independently to each item in the
    dataset, either to produce a new dataset, or to produce summary result for the
    entire dataset. This way of thinking often works well on parallel hardware, where
    each of many processors can handle one or more data items at the same time.  The
    Connection Machine, a massively parallel computer developed in the late 1980's,
    made heavy use of this approach.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大型数据集，以相同操作独立应用于数据集中的每个项目来处理，已被证明特别有价值，无论是生成新数据集，还是为整个数据集生成摘要结果。这种思考方式在并行硬件上通常效果良好，其中许多处理器可以同时处理一个或多个数据项。20世纪80年代末开发的大规模并行计算机Connection
    Machine就大量使用了这种方法。
- en: More recently, Google, with their large server farms, have made very effective
    use of the map-reduce paradigm.  Two Google fellows, Dean and Ghemawat, have reported
    some of these uses in a 2004 paper at OSDI (the Operating System Design and Implementation
    Conference) and a 2008 paper in CACM (the monthly magazine of the main Computer
    Science professional society).  Much of the focus in those papers is on separating
    the fault tolerance and distributed processing issues of operating on large clusters
    of machines from the programming language abstractions.  They found map-reduce
    to be a successful way of separating out the conceptual model of large-scale computations
    on big collections of data, using mapping and reducing operations, from the issue
    of how that computation is implemented in a reliable manner on a large cluster
    of machines.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，谷歌利用他们庞大的服务器农场，非常有效地运用了map-reduce范式。两位谷歌研究员，迪恩和盖马瓦特，在2004年的OSDI（操作系统设计与实现会议）上以及2008年的CACM（主要计算机科学专业协会的月刊）上报告了一些这些应用。这些论文的重点大部分在于将在大型机器群上操作的容错性和分布式处理问题与编程语言抽象分离开来。他们发现map-reduce是一种成功的方式，可以将大规模数据集上的计算概念模型，使用映射和归约操作，与如何在大型机器群上可靠实现该计算的问题分离开来。
- en: In the introduction of their 2008 paper, Dean and Ghemawat write, "Our abstraction
    is inspired by the map and reduce primitives present in Lisp and many other functional
    languages. We realized that most of our computations involved applying a map operation
    to each logical record in our input in order to compute a set of intermediate
    key/value pairs, and then applying a reduce operation to all the values that shared
    the same key in order to combine the derived data appropriately."  In the paper
    they discuss a number of applications that are simplified by this view of massive
    parallelism. To give a sense of the scale of the processing done by these programs,
    they note that over ten thousand programs using map-reduce have been implemented
    at Google since 2004, and that in September 2007 over 130,000 machine-months of
    processing time at Google were used by map-reduce, processing over 450 PB (450,000
    TB) of data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在他们 2008 年的论文介绍中，迪安和盖马瓦特写道：“我们的抽象受到 Lisp 和许多其他函数语言中存在的映射和归纳原语的启发。 我们意识到，我们大部分的计算涉及将映射操作应用于输入中的每个逻辑记录，以便计算一组中间键/值对，然后将归纳操作应用于所有共享相同键的值，以便适当地组合派生的数据。”
    在论文中，他们讨论了通过这种大规模并行视图简化的一些应用。 为了让人们对这些程序所处理的规模有所了解，他们指出，自 2004 年以来，谷歌已经实施了超过一万个使用映射-归纳的程序，并且在
    2007 年 9 月，谷歌使用了超过 130,000 台机器月份的处理时间，处理了超过 450 PB（450,000 TB）的数据。
- en: For our purposes here in this programming course, it is illustrative to see
    what kinds of problems Google found useful to express in the map-reduce paradigm.
    Counting the number of occurrences of each word in a large collection of documents
    is a central computational issue for indexing large document collections.  This
    can be expressed as mapping a function that returns the count of a given word
    in each document across a document collection.  The result is then reduced by
    summing the counts. So if we have a list of strings, the map returns a list of
    integers with the count for each string, and the reduce then sums up those integers. 
    Many other counting problems can be implemented similarly.  For instance, counting
    the number of occurrences of some pattern in log files, such as the number of
    occurrences of a given user query or a particular url.  There may be many log
    files on different hosts, and this can be viewed as a large collection of strings,
    with the same map and reduce operations as for document word counts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们在本编程课程中的目的，在映射-归纳范式中表达哪些问题对于了解谷歌发现有用是很有启发性的。 计算大量文档中每个单词出现的次数是索引大型文档集合的一个核心计算问题。
    这可以被表达为对跨文档集合中的每个文档应用返回给定单词计数的函数进行映射。 然后通过对计数求和来缩减结果。 因此，如果我们有一个字符串列表，映射返回一个整数列表，其中包含每个字符串的计数，然后缩减那些整数。
    许多其他计数问题可以类似地实现。 例如，在日志文件中计算某种模式的出现次数，例如给定用户查询或特定 URL 的出现次数。 在不同主机上可能有许多日志文件，这可以看作是一个大型字符串集合，具有与文档单词计数相同的映射和归纳操作。
- en: Reversing the links of the web graph is another problem that can be viewed this
    way.  The web is a set of out-links, from a given page to the pages that it links
    to.  A map function can output target-source pairs for each source page, and a
    reduce function can collapse these into a list of source pages corresponding to
    each target page (i.e., links in to pages).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 将 web 图的链接反转是另一个可以这样看待的问题。 网络是一组从给定页面指向它链接到的页面的出链。 一个映射函数可以为每个源页面输出目标-源对，并且一个
    reduce 函数可以将这些折叠成对应于每个目标页面的源页面列表（即，链接到页面）。
- en: An inverted index is a map from a term to all the documents containing that
    term.  It is an important part of a search engine, as the engine must be able
    to quickly map a term to relevant pages.  In this case a map function returns
    pairs of terms and document identifiers for each document. The reduce collapses
    the result into the list of document ID's for a given term.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 反向索引是从术语到包含该术语的所有文档的映射。 它是搜索引擎的重要部分，因为引擎必须能够快速将术语映射到相关页面。 在这种情况下，映射函数为每个文档返回术语和文档标识符的对。
    归纳将结果折叠成给定术语的文档 ID 列表。
- en: In the Google papers, they report that re-implementing the production indexing
    system resulted in code that was simpler, smaller, and easier to understand and
    modify. This in turn led to a service that was easier to operate, because failure
    diagnosis and recovery were correspondingly easier.  Nevertheless, the approach
    resulted in fast enough code that there was no degradation in performance.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Google的论文中，他们报告重新实现生产索引系统导致的代码更简单、更小、更易于理解和修改。这反过来导致了一个更容易操作的服务，因为故障诊断和恢复也相应更容易。然而，这种方法产生的代码速度足够快，没有性能下降。
- en: Mapping and Folding (Reducing) in OCaml
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在OCaml中的映射和折叠（归约）
- en: 'First let''s look in more detail at the map operation.  This operation applies
    a specified function *f* to each element of a list to produce a resulting list.
    Each element of the resulting list is obtained by applying *f* to the corresponding
    element of the input list. The OCaml library function `List.map` is curried to
    take the function first and the list second.  It produces the following value
    for a list of three elements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们更详细地看一下映射操作。这个操作将指定的函数*f*应用于列表的每个元素，以产生一个结果列表。结果列表的每个元素是通过将*f*应用于输入列表的相应元素获得的。OCaml库函数`List.map`是柯里化的，先接受函数，然后接受列表。对于一个包含三个元素的列表，它产生以下值：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Recall in the last lecture we introduced our own polymorphic `list_` type:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，在上一讲中我们介绍了我们自己的多态`list_`类型：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The map operation for this type can be written:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的映射操作可以写成：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The type of `map` is
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`map`的类型是'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The parameter `f` is a function from the element type of the input list `'a`
    to the element type of the output list `'b`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`f`是一个从输入列表的元素类型`'a`到输出列表的元素类型`'b`的函数。
- en: 'Using map with an anonymous function, we can define a function to make a copy
    of a list:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用匿名函数与map，我们可以定义一个复制列表的函数：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (This is the same as saying
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: （这等同于说
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: but we don't really need to include the second argument in the definition; the
    `copy` function is of type `'a list_ -> 'a list_` and is already well defined
    without it.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上我们不需要在定义中包含第二个参数；`copy`函数的类型是`'a list_ -> 'a list_`，即使没有第二个参数也已经定义完整。
- en: 'Similarly, we can create a `string list_` from an `int list_`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以从`int list_`创建一个`string list_`：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now let's consider the reduce operation, which like map applies a function to
    every element of a list, but in doing so accumulates a result rather than just
    producing another list.  In comparison with map, the reduce operator takes an
    additional argument of an accumulator. As with map, we will consider the curried
    form of reduce.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑reduce操作，它类似于map，将一个函数应用于列表的每个元素，但在这样做时累积一个结果，而不仅仅产生另一个列表。与map相比，reduce运算符接受一个额外的累加器参数。与map一样，我们将考虑reduce的柯里化形式。
- en: 'There are two versions of reduce, based on the nesting of the applications
    of the function *f* in creating the resulting value. In OCaml there are built-in
    reduce functions that operate on lists are called `List.fold_right` and `List.fold_left`.
    These functions produce the following values:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个版本的reduce，基于函数*f*在创建结果值时的应用嵌套。在OCaml中，操作列表的内置reduce函数称为`List.fold_right`和`List.fold_left`。这些函数产生以下值：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'From the forms of the two results, it can be seen why the functions are called
    `fold_right`, which uses a right-parenthesization of the applications of `f`,
    and `fold_left`, which uses a left-parenthesization.  Note that the formal parameters
    of the two functions are in different orders: in `fold_right` the accumulator
    is to the right of the list and in `fold_left` the accumulator is to the left.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从这两个结果的形式可以看出为什么这些函数被称为`fold_right`，它使用`f`的右括号化应用，以及`fold_left`，它使用左括号化。请注意这两个函数的形式参数顺序不同：在`fold_right`中，累加器位于列表的右侧，在`fold_left`中，累加器位于左侧。
- en: 'Again using the `list_` type, we can define these two functions as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用`list_`类型，我们可以定义这两个函数如下：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The types of `fold_right` and `fold_left` are
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`fold_right`和`fold_left`的类型是'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: respectively.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 分别。
- en: The parameter `f` in both functions is a function from the element type of the
    input list and the type of the accumulator to the type of the accumulator. The
    types of the input list and the accumulator do not have to be the same.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个函数中的参数`f`是一个从输入列表的元素类型和累加器类型到累加器类型的函数。输入列表和累加器的类型不必相同。
- en: Given these definitions, operations such as summing all of the elements of a
    list of integers can be defined naturally using either `fold_right` or `fold_left`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些定义，诸如对整数列表的所有元素求和等操作可以自然地使用 `fold_right` 或 `fold_left` 定义。
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here `(+)` is the same as `fun x y -> x + y`.  Note that we don't need the `il`
    in the second case because of the ordering of the arguments in `fold_left`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 `(+)` 等同于 `fun x y -> x + y`。注意，由于在 `fold_left` 中参数的顺序，所以在第二种情况下我们不需要 `il`。
- en: The power of fold
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 折叠的力量
- en: Folding is a very powerful operation.  We can write many other list functions
    in terms of fold.  In fact `map`, while it initially sounded quite different from
    fold, can be defined naturally using `fold_right` by accumulating a result that
    is a list.   Continuing with our `list_` type,
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 折叠是一种非常强大的操作。我们可以用折叠来定义许多其他列表函数。实际上 `map`，虽然最初听起来与 `fold` 非常不同，但可以通过累积一个列表结果来自然地使用
    `fold_right` 来定义。继续使用我们的 `list_` 类型，
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The accumulator function simply applies `f` to each element and builds up the
    resulting list, starting from the empty list.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 累加器函数只是将 `f` 应用于每个元素并从空列表开始构建结果列表。
- en: The entire map-reduce paradigm can thus be implemented using `fold_left` and
    `fold_right`.  However, it is often conceptually useful to think of map as producing
    a list and of reduce as producing a value.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 整个映射-归约范式可以使用 `fold_left` 和 `fold_right` 实现。然而，从概念上来说，将映射视为生成列表，将归约视为生成值通常是有用的。
- en: What about using `fold_left` instead of `fold_right` to define `map`?  In this
    case we get a function that does the map, but produces an output that is in reverse
    order, because `fold_left` processes the elements of the input list left-to-right,
    whereas `fold_right` works right-to-left.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 用 `fold_left` 而不是 `fold_right` 来定义 `map` 怎么样？在这种情况下，我们得到一个进行映射的函数，但生成的输出是逆序的，因为
    `fold_left` 从左到右处理输入列表的元素，而 `fold_right` 从右到左处理。
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: (Again, we can leave off the second argument `lst` because of the ordering of
    the arguments.)  This resulting function can also be quite useful, particularly
    as it is tail recursive.  If we want the elements of the result list to be ordered
    in the same direction as the input list, we can just reverse the list when we
    are done.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: （同样，由于参数的顺序，我们可以省略第二个参数 `lst`。）这个结果函数也可能非常有用，特别是因为它是尾递归的。如果我们希望结果列表的元素按与输入列表相同的顺序排序，我们可以在完成后反转列表。
- en: Another useful variation on mapping is filtering, which selects a subset of
    a list according to some Boolean criterion.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 映射的另一个有用变种是过滤，它根据一些布尔条件选择列表的子集。
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The function `f` is a test for membership in the output list.  It takes just
    one argument and returns a Boolean value.  For example, we can filter a list of
    integers for the even ones:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `f` 是输出列表中成员的测试。它只接受一个参数并返回一个布尔值。例如，我们可以过滤整数列表中的偶数：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that the type of the argument to `select_evens` and its result are restricted
    to be `int list_` rather than the more general `'a list` of the underlying `filter`
    because the anonymous function takes an integer parameter and returns an integer
    value.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`select_evens` 的参数类型及其结果被限制为 `int list_` 而不是底层 `filter` 的更一般的 `'a list`，因为匿名函数接受一个整数参数并返回一个整数值。
- en: Determining the length of a list is another operation that can easily be defined
    in terms of folding.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 确定列表的长度是另一个可以轻松使用折叠来定义的操作。
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What about using `fold_right` for this?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 那么用 `fold_right` 呢？
- en: You should try writing some functions using `map`, `fold_left` and `fold_right`. 
    These primitives can be incredibly useful.  Even in languages that do not have
    these operations built in, they are useful ways of thinking about structuring
    many computations.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该尝试使用 `map`、`fold_left` 和 `fold_right` 编写一些函数。这些原语非常有用。即使在没有这些内置操作的语言中，它们也是构建许多计算结构的有用方式。
