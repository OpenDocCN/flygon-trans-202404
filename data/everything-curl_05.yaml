- en: Network and protocols
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络和协议
- en: Network and protocols
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络和协议
- en: Before diving in and talking about how to use curl to get things done, let's
    take a look at what all this networking is and how it works, using simplifications
    and some minor shortcuts to give an easy overview.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入讨论如何使用curl完成任务之前，让我们看看这些网络是什么以及它是如何工作的，使用简化和一些小技巧来提供一个简单的概述。
- en: The basics are in the [networking simplified](protocols-network.html) chapter
    that tries to just draw a simple picture of what networking is from a curl perspective,
    and the [protocols](protocols-protocols.html) section which explains what exactly
    a "protocol" is and how that works.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 基础知识在[网络简化](protocols-network.html)章节中，试图从curl的角度绘制网络是什么的简单图像，以及[协议](protocols-protocols.html)部分解释了“协议”究竟是什么以及它是如何工作的。
- en: Networking simplified
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络简化
- en: Networking simplified
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络简化
- en: Networking means communicating between two endpoints on the Internet. The Internet
    is just a bunch of interconnected machines (computers really), each using their
    own private addresses (called IP addresses). The addresses each machine have can
    be of different types and machines can even have temporary addresses. These computers
    are often called hosts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 网络意味着在互联网上的两个端点之间进行通信。互联网只是一堆相互连接的机器（实际上是计算机），每台机器都使用自己的私有地址（称为IP地址）。每台机器拥有的地址可以是不同类型的，甚至可以有临时地址。这些计算机通常被称为主机。
- en: The computer, tablet or phone you sit in front of is usually called "the client"
    and the machine out there somewhere that you want to exchange data with is called
    "the server". The main difference between the client and the server is in the
    roles they play here. There's nothing that prevents the roles from being reversed
    in a subsequent operation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你坐在前面的计算机、平板电脑或手机通常被称为“客户端”，而你想要与之交换数据的远程机器被称为“服务器”。客户端和服务器之间的主要区别在于它们在这里扮演的角色。在随后的操作中，角色可以互换。
- en: Which machine
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 哪台机器
- en: When you want to initiate a transfer to one of the machines out there (a server),
    you usually don't know its IP addresses but instead you usually know its name.
    The name of the machine you will talk to is embedded in the URL that you work
    with when you use curl.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要向外部的一台机器（服务器）发起传输时，通常不知道其IP地址，而是通常知道其名称。你要与之通信的机器的名称嵌入在你使用curl时处理的URL中。
- en: You might use a URL like "[http://example.com/index.html](http://example.com/index.html)",
    which means you will connect to and communicate with the host named example.com.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会使用类似"[http://example.com/index.html](http://example.com/index.html)"的网址，这意味着你将连接并与名为example.com的主机通信。
- en: Host name resolving
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主机名解析
- en: Once we know the host name, we need to figure out which IP addresses that host
    has so that we can contact it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们知道主机名，我们需要弄清楚该主机有哪些IP地址，以便我们可以联系它。
- en: Converting the name to an IP address is often called 'name resolving'. The name
    is "resolved" to a set of addresses. This is usually done by a "DNS server", DNS
    being like a big lookup table that can convert names to addresses—all the names
    on the Internet, really. Your computer normally already knows the address of a
    computer that runs the DNS server as that is part of setting up the network.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将名称转换为IP地址通常称为“名称解析”。名称被“解析”为一组地址。这通常由“DNS服务器”完成，DNS就像一个大查找表，可以将名称转换为地址——实际上是互联网上的所有名称。你的计算机通常已经知道运行DNS服务器的计算机的地址，因为这是网络设置的一部分。
- en: 'curl will therefore ask the DNS server: "Hello, please give me all the addresses
    for example.com", and the server responds with a list of them. Or in the case
    you spell the name wrong, it can answer back that the name doesn''t exist.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: curl因此会询问DNS服务器：“你好，请给我example.com的所有地址”，服务器会回复一个列表。或者在你拼写错误的情况下，它可以回答该名称不存在。
- en: Establish a connection
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 建立连接
- en: With a list of IP addresses for the host curl wants to contact, curl sends out
    a "connect request". The connection curl wants to establish is called TCP and
    it works sort of like connecting an invisible string between two computers. Once
    established, it can be used to send a stream of data in both directions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有了要联系的主机的IP地址列表，curl发送一个“连接请求”。curl要建立的连接称为TCP，它的工作方式有点像在两台计算机之间连接一根看不见的绳子。一旦建���，它可以用来在两个方向发送数据流。
- en: As curl gets a list of addresses for the host, it will actually traverse that
    list of addresses when connecting and in case one fails it will try to connect
    to the next one until either one works or they all fail.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当curl获取主机的地址列表时，实际上会在连接时遍历该地址列表，如果一个失败，它将尝试连接到下一个，直到其中一个起作用或全部失败。
- en: Connects to "port numbers"
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到“端口号”
- en: When connecting with TCP to a remote server, a client selects which port number
    to do that on. A port number is just a dedicated place for a particular service,
    which allows that same server to listen to other services on other port numbers
    at the same time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用TCP连接到远程服务器时，客户端选择在哪个端口号上进行连接。端口号只是一个专门为特定服务提供的位置，允许同一服务器同时监听其他端口号上的其他服务。
- en: Most common protocols have default port numbers that clients and servers use.
    For example, when using the "[http://example.com/index.html](http://example.com/index.html)"
    URL, that URL specifies a scheme called "http" which tells the client that it
    should try TCP port number 80 on the server by default. The URL can optionally
    provide another, custom, port number but if nothing special is specified, it will
    use the default port for the scheme used in the URL.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数常见协议都有客户端和服务器使用的默认端口号。例如，当使用“[http://example.com/index.html](http://example.com/index.html)”
    URL时，该URL指定了一个称为“http”的方案，告诉客户端默认情况下应该尝试服务器上的TCP端口号80。URL可以选择提供另一个自定义端口号，但如果未指定任何特殊内容，则将使用URL中使用的方案的默认端口。
- en: TLS
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TLS
- en: After the TCP connection has been established, many transfers will require that
    both sides negotiate a better security level before continuing, and that is often
    TLS; Transport Layer Security. If that is used, the client and server will do
    a TLS handshake first and only continue further if that succeeds.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在建立TCP连接后，许多传输将要求双方在继续之前协商更好的安全级别，通常是TLS；传输层安全性。如果使用了TLS，客户端和服务器将首先进行TLS握手，只有在成功后才会继续。
- en: Transfer data
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传输数据
- en: When the connecting "string" we call TCP is attached to the remote computer
    (and we have done the possible additional TLS handshake), there's an established
    connection between the two machines and that connection can then be used to exchange
    data. That communication is done using a "protocol", as discussed in the following
    chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接的“字符串”我们称之为TCP附加到远程计算机（并且我们已经进行了可能的额外TLS握手）时，两台机器之间建立了连接，然后可以使用该连接交换数据。该通信使用“协议”进行，如下一章节所讨论的。
- en: Protocols
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协议
- en: Protocol
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协议
- en: The language used to ask for data to get sent—in either direction—is called
    **the protocol**. The protocol describes exactly how to ask the server for data,
    or to tell the server that there is data coming.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 用于请求发送数据的语言，无论是单向还是双向，称为**协议**。协议准确描述了如何向服务器请求数据，或者告诉服务器有数据到来。
- en: 'Protocols are typically defined by the IETF ([Internet Engineering Task Force](http://www.ietf.org)),
    which hosts RFC documents that describe exactly how each protocol works: how clients
    and servers are supposed to act and what to send and so on.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 协议通常由IETF（[互联网工程任务组](http://www.ietf.org)）定义，该组织托管描述每个协议工作原理的RFC文档：客户端和服务器应该如何操作以及发送什么等等。
- en: What protocols does curl support?
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: curl支持哪些协议？
- en: curl supports protocols that allow "data transfers" in either or both directions.
    We usually also restrict ourselves to protocols which have a "URI format" described
    in an RFC or at least is somewhat widely used, as curl works primarily with URLs
    (URIs really) as the input key that specifies the transfer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: curl支持允许在单向或双向传输数据的协议。通常我们也限制自己使用在RFC中描述了“URI格式”或至少是广泛使用的协议，因为curl主要使用URL（实际上是URI）作为指定传输的输入关键。
- en: 'The latest curl (as of this writing) supports these protocols:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的curl（截至本文撰写时）支持这些协议：
- en: DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3,
    POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET, TFTP
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3,
    POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET, TFTP
- en: To complicate matters further, the protocols often exist in different versions
    or flavors as well.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步复杂化问题，协议通常也存在不同版本或变种。
- en: What other protocols are there?
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有哪些其他协议？
- en: The world is full of protocols, both old and new. Old protocols get abandoned
    and dropped and new ones get introduced. There's never a state of stability but
    the situation changes from day to day and year to year. You can rest assured that
    there will be new protocols added in the list above in the future and that there
    will be new versions of the protocols already listed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上充满了协议，新旧各种协议层出不穷。旧协议被抛弃和淘汰，新协议被引入。从来没有一个稳定的状态，但情况每天都在变化，每年都在变化。您可以放心，将来将会在上述列表中添加新的协议，并且已列出的协议也将有新版本。
- en: There are, of course, already other protocols in existence that curl doesn't
    yet support. We are open to supporting more protocols that suit the general curl
    paradigms, we just need developers to write the necessary code adjustments for
    them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，现有的协议列表中尚未支持的其他协议已经存在。我们愿意支持更多符合一般 curl 范例的协议，我们只需要开发人员为其编写必要的代码调整。
- en: How are protocols developed?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协议是如何开发的？
- en: Both new versions of existing protocols and entirely new protocols are usually
    developed by persons or teams that feel that the existing ones are not good enough.
    Something about them makes them not suitable for a particular use case or perhaps
    some new idea has popped up that could be applied to improve things.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，现有协议的新版本和全新的协议通常由认为现有协议不够好的人或团队开发。它们的某些方面使它们不适合特定的用例，或者可能会出现一些新的想法，可以应用于改进事物。
- en: Of course, nothing prevents anyone from developing a protocol entirely on their
    own at their own pleasure in their own backyard, but the major protocols are usually
    brought to the IETF at a fairly early stage where they are then discussed, refined,
    debated and polished and then eventually, hopefully, turned into a published RFC
    document.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，没有什么能阻止任何人在自己的后院自己愉快地开发协议，但是主要的协议通常在相当早的阶段被引入到 IETF，然后在那里讨论、完善、辩论和精炼，最终希望转变为已发布的
    RFC 文档。
- en: Software developers then read the RFC specifications and deploy their code in
    the world based on their interpretations of the words in those documents. It sometimes
    turn out that some of the specifications are subject to vastly different interpretations
    or sometimes the engineers are just lazy and ignore sound advice in the specs
    and deploy something that doesn't adhere. Writing software that interoperates
    with other implementations of the specifications can therefore end up being hard
    work.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发人员会阅读 RFC 规范，并根据对这些文档中的词语的解释，在世界上部署他们的代码。有时会发现某些规范存在着极为不同的解释，或者有时工程师只是懒得遵循规范中的建议，部署了一些不符合规范的东西。编写与规范的其他实现相互操作的软件因此可能会变得很困难。
- en: How much do protocols change?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协议会发生多大程度的变化？
- en: Like software, protocol specifications are frequently updated and new protocol
    versions are created.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 像软件一样，协议规范经常更新，并创建新的协议版本。
- en: Most protocols allow some level of extensibility which makes new extensions
    show up over time, extensions that make sense to support.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数协议允许一定程度的可扩展性，这使得新的扩展逐渐出现，这些扩展是有意义支持的。
- en: The interpretation of a protocol sometimes changes even if the spec remains
    the same.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 协议的解释有时会发生变化，即使规范保持不变。
- en: The protocols mentioned in this chapter are all "Application Protocols", which
    means they are transferred over more lower level protocols, like TCP, UDP and
    TLS. They are also themselves protocols that change over time, get new features
    and get attacked so that new ways of handling security, etc., forces curl to adapt
    and change.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提到的协议都是“应用层协议”，这意味着它们是通过更低层协议（如 TCP、UDP 和 TLS）传输的。它们本身也是随着时间变化的协议，会获得新的功能并受到攻击，因此处理安全性等方面的新方法会迫使
    curl 适应和改变。
- en: About adhering to standards and who's right
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于遵守标准和谁是对的
- en: Generally, there are protocol specs that tell us how to send and receive data
    for specific protocols. The protocol specs we follow are RFCs put together and
    published by IETF.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，有协议规范告诉我们如何针对特定协议发送和接收数据。我们遵循的协议规范是由 IETF 汇编和发布的 RFC 文档。
- en: Some protocols are not properly documented in a final RFC, like, for example,
    SFTP for which our implementation is based on an Internet-draft that isn't even
    the last available one.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有些协议在最终的 RFC 中没有得到适当的文档化，例如，SFTP 就是其中之一，我们的实现是基于一个甚至不是最新可用版本的互联网草案。
- en: Protocols are, however, spoken by two parties and like in any given conversation,
    there are then two sides of understanding something or interpreting the given
    instructions in a spec. Also, lots of network software is written without the
    authors paying very close attention to the spec so they end up taking some shortcuts,
    or perhaps they just interpreted the text differently. Sometimes even mistakes
    and bugs make software behave in ways that are not mandated by the spec and sometimes
    even downright forbidden in the specs.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 协议是由两方说出的，就像在任何对话中一样，因此理解某事或解释规范中给定的指令有两种理解方式。此外，许多网络软件编写时，作者并没有非常注意规范，所以他们最终采取了一些捷径，或者也许他们只是以不同的方式解释了文本。有时候，甚至错误和缺陷会导致软件的行为方式不受规范的约束，有时甚至在规范中明确禁止。
- en: In the curl project we use the published specs as rules on how to act until
    we learn anything else. If popular alternative implementations act differently
    than what we think the spec says and that alternative behavior is what works widely
    on the big Internet, then chances are we will change foot and instead decide to
    act like those others. If a server refuses to talk with us when we think we follow
    the spec but works fine when we bend the rules every so slightly, then we probably
    end up bending them exactly that way—if we can still work successfully with other
    implementations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在curl项目中，我们使用发布的规范作为行动规则，直到我们学到其他任何事情。如果流行的替代实现的行为与我们认为规范所说的不同，而且该替代行为在大型互联网上广泛使用，那么我们很可能会改变立场，改为像那些其他实现一样行事。如果服务器拒绝与我们交流，而我们认为我们遵循了规范，但当我们稍微弯曲规则时却可以正常工作，那么我们很可能最终会以这种方式弯曲规则——如果我们仍然可以成功地与其他实现进行交流。
- en: Ultimately, it is a personal decision and up for discussion in every case where
    we think a spec and the real world don't align.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，这是一个个人决定，并且在我们认为规范和现实世界不一致的每种情况下都值得讨论。
- en: In the worst cases we introduce options to let application developers and curl
    users have the final say on what curl should do. I say worst because it is often
    really tough to ask users to make these decisions as it usually involves very
    tricky details and weirdness going on and it is a lot to ask of users. We should
    always do our very best to avoid pushing such protocol decisions to users.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在最糟糕的情况下，我们会引入选项，让应用程序开发人员和curl用户最终决定curl应该做什么。我说“最糟糕”是因为通常很难要求用户做出这些决定，因为这通常涉及非常棘手的细节和怪异的情况，并且要求用户做出很多努力。我们应该尽最大努力避免将此类协议决策推给用户。
- en: curl protocols
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: curl协议
- en: The protocols curl supports
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: curl支持的协议
- en: curl supports about 22 protocols. We say "about" because it depends on how you
    count and what you consider to be distinctly different protocols.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: curl支持大约22种协议。我们说“大约”是因为这取决于您如何计算以及您认为是完全不同的协议。
- en: DICT
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DICT
- en: DICT is a dictionary network protocol, it allows clients to ask dictionary servers
    about a meaning or explanation for words. See RFC 2229\. Dict servers and clients
    use TCP port 2628.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: DICT是一种字典网络协议，它允许客户端向字典服务器询问单词的含义或解释。参见RFC 2229。Dict服务器和客户端使用TCP端口2628。
- en: FILE
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FILE
- en: FILE is not actually a "network" protocol. It is a URL scheme that allows you
    to tell curl to get a file from the local file system instead of getting it over
    the network from a remote server. See RFC 1738.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: FILE实际上不是一个“网络”协议。它是一种URL方案，允许您告诉curl从本地文件系统获取文件，而不是从远程服务器上的网络获取。参见RFC 1738。
- en: FTP
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FTP
- en: FTP stands for File Transfer Protocol and is an old (originates in the early
    1970s) way to transfer files back and forth between a client and a server. See
    RFC 959\. It has been extended muchly over the years. FTP servers and clients
    use TCP port 21 plus one more port, though the second one is usually dynamicly
    established during communication.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: FTP代表文件传输协议，是一种在客户端和服务器之间传输文件的旧（起源于1970年代早期）方式。参见RFC 959。它多年来得到了很大程度的扩展。FTP服务器和客户端使用TCP端口21加上一个端口，尽管第二个端口通常在通信过程中动态建立。
- en: See the external page [FTP vs HTTP](https://daniel.haxx.se/docs/ftp-vs-http.html)
    for how it differs to HTTP.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 查看外部页面[FTP与HTTP的区别](https://daniel.haxx.se/docs/ftp-vs-http.html)。
- en: FTPS
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FTPS
- en: FTPS stands for Secure File Transfer Protocol. It follows the tradition of appending
    an 'S' to the protocol name to signify that the protocol is done like normal FTP
    but with an added SSL/TLS security layer. See RFC 4217.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: FTPS代表安全文件传输协议。它遵循了在协议名称后添加'S'以表示该协议与普通FTP相同但添加了SSL/TLS安全层的传统。参见RFC 4217。
- en: This protocol is very problematic to use through firewalls and other network
    equipments.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种协议在防火墙和其他网络设备上使用起来非常问题。
- en: GOPHER
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GOPHER
- en: Designed for "distributing, searching, and retrieving documents over the Internet",
    Gopher is somewhat of the grand father to HTTP as HTTP has mostly taken over completely
    for the same use cases. See RFC 1436\. Gopher servers and clients use TCP port
    70.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为“在互联网上分发、搜索和检索文档”而设计，Gopher 在某种程度上是 HTTP 的前身，因为 HTTP 已经完全接管了相同的用例。参见 RFC 1436。Gopher
    服务器和客户端使用 TCP 端口 70。
- en: HTTP
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP
- en: The Hypertext Transfer Protocol, HTTP, is the most widely used protocol for
    transferring data on the web and over the Internet. See RFC 7230 for HTTP/1.1
    and RFC 7540 for HTTP/2, the successor. HTTP servers and clients use TCP port
    80.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 超文本传输协议，HTTP，是在网页和互联网上传输数据的最广泛使用的协议。参见 RFC 7230 用于 HTTP/1.1 和 RFC 7540 用于 HTTP/2，它的后继者。HTTP
    服务器和客户端使用 TCP 端口 80。
- en: HTTPS
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTPS
- en: Secure HTTP is HTTP done over an SSL/TLS connection. See RFC 2818\. HTTPS servers
    and clients use TCP port 443.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 安全 HTTP 是通过 SSL/TLS 连接完成的 HTTP。参见 RFC 2818。HTTPS 服务器和客户端使用 TCP 端口 443。
- en: IMAP
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IMAP
- en: The Internet Message Access Protocol, IMAP, is a protocol for accessing, controlling
    and "reading" email. See RFC 3501\. IMAP servers and clients use TCP port 143.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网消息访问协议，IMAP，是用于访问、控制和“读取”电子邮件的协议。参见 RFC 3501。IMAP 服务器和客户端使用 TCP 端口 143。
- en: IMAPS
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IMAPS
- en: Secure IMAP is IMAP done over an SSL/TLS connection. Such connections usually
    start out as a "normal" IMAP connection that is then upgraded to IMAPS using the
    `STARTTLS` command.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 安全 IMAP 是通过 SSL/TLS 连接完成的 IMAP。这样的连接通常开始于一个“正常”的 IMAP 连接，然后通过 `STARTTLS` 命令升级为
    IMAPS。
- en: LDAP
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LDAP
- en: The Lightweight Directory Access Protocol, LDAP, is a protocol for accessing
    and maintaining distributed directory information. Basically a database lookup.
    See RFC 4511\. LDAP servers and clients use TCP port 389.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 轻量级目录访问协议（LDAP）是一种用于访问和维护分布式目录信息的协议。基本上是数据库查询。参见 RFC 4511。LDAP 服务器和客户端使用 TCP
    端口 389。
- en: LDAPS
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LDAPS
- en: Secure LDAP is LDAP done over an SSL/TLS connection.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 安全 LDAP 是通过 SSL/TLS 连接完成的 LDAP。
- en: POP3
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: POP3
- en: The Post Office Protocol version 3 (POP3) is a protocol for retrieving email
    from a server. See RFC 1939\. POP3 servers and clients use TCP port 110.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 第 3 版邮局协议（POP3）是用于从服务器检索电子邮件的协议。参见 RFC 1939。POP3 服务器和客户端使用 TCP 端口 110。
- en: POP3S
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: POP3S
- en: Secure POP3 is POP3 done over an SSL/TLS connection. Such connections usually
    start out as a "normal" POP3 connection that is then upgraded to POP3S using the
    `STARTTLS` command.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 安全 POP3 是通过 SSL/TLS 连接完成的 POP3。这样的连接通常开始于一个“正常”的 POP3 连接，然后通过 `STARTTLS` 命令升级为
    POP3S。
- en: RTMP
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RTMP
- en: The Real-Time Messaging Protocol (RTMP) is a protocol for streaming audio, video
    and data. RTMP servers and clients use TCP port 1935.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 实时消息传输协议（RTMP）是用于流式传输音频、视频和数据的协议。RTMP 服务器和客户端使用 TCP 端口 1935。
- en: RTSP
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RTSP
- en: The Real Time Streaming Protocol (RTSP) is a network control protocol to control
    streaming media servers. See RFC 2326\. RTSP servers and clients use TCP and UDP
    port 554.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 实时流媒体协议（RTSP）是一种网络控制协议，用于控制流媒体服务器。参见 RFC 2326。RTSP 服务器和客户端使用 TCP 和 UDP 端口 554。
- en: SCP
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SCP
- en: The Secure Copy (SCP) protocol is designed to copy files to and from a remote
    SSH server. SCP servers and clients use TCP port 22.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 安全复制（SCP）协议旨在将文件复制到远程 SSH 服务器并从远程 SSH 服务器复制文件。SCP 服务器和客户端使用 TCP 端口 22。
- en: SFTP
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SFTP
- en: The SSH File Transfer Protocol (SFTP) that provides file access, file transfer,
    and file management over a reliable data stream. SFTP servers and clients use
    TCP port 22.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: SSH 文件传输协议（SFTP）提供了可靠数据流上的文件访问、文件传输和文件管理。SFTP 服务器和客户端使用 TCP 端口 22。
- en: SMB
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SMB
- en: The Server Message Block (SMB) protocol is also known as CIFS. It is a an application-layer
    network protocol mainly used for providing shared access to files, printers, and
    serial ports and miscellaneous communications between nodes on a network. SMB
    servers and clients use TCP port 485.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器消息块（SMB）协议也称为 CIFS。它是一个应用层网络协议，主要用于在网络上的节点之间提供文件、打印机和串行端口的共享访问以及杂项通信。SMB
    服务器和客户端使用 TCP 端口 485。
- en: SMTP
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SMTP
- en: The Simple Mail Transfer Protocol (SMTP) is a protocol for email transmission.
    See RFC 821\. SMTP servers and clients use TCP port 25.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 简单邮件传输协议（SMTP）是一种用于电子邮件传输的协议。参见 RFC 821。SMTP 服务器和客户端使用 TCP 端口 25。
- en: SMTPS
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SMTPS
- en: Secure SMTP is SMTP done over an SSL/TLS connection. Such connections usually
    start out as a "normal" SMTP connection that is then upgraded to SMTPS using the
    `STARTTLS` command.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 安全 SMTP 是通过 SSL/TLS 连接完成的 SMTP。这样的连接通常开始于一个“正常”的 SMTP 连接，然后通过 `STARTTLS` 命令升级为
    SMTPS。
- en: TELNET
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TELNET
- en: TELNET is an application layer protocol used over networks to provide a bidirectional
    interactive text-oriented communication facility using a virtual terminal connection.
    See RFC 854\. TELNET servers and clients use TCP port 23.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: TELNET是一种应用层协议，用于通过网络提供双向交互式文本通信功能，使用虚拟终端连接。参见RFC 854。TELNET服务器和客户端使用TCP端口23。
- en: TFTP
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TFTP
- en: The Trivial File Transfer Protocol (TFTP) is a protocol for doing simple file
    transfers over UDP to get a file from or put a file onto a remote host. TFTP servers
    and clients use UDP port 69.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Trivial File Transfer Protocol（TFTP）是一种协议，用于通过UDP进行简单文件传输，以从远程主机获取文件或将文件放置到远程主机上。TFTP服务器和客户端使用UDP端口69。
