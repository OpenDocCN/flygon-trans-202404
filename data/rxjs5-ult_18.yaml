- en: Operators - mathematical
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符 - 数学
- en: Operators matchematical
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符 - 数学
- en: max
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最大值
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This emits `7`. It''s obvious what this operator does, it gives us just one
    value, the max. There is different ways of calling it though. You can give it
    a comparer:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这会输出`7`。这个运算符的作用很明显，它给我们一个值，即最大值。不过调用它的方式有不同。你可以给它一个比较器：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this case we define a `comparer` which runs a sort algorithm under the hood
    and all we have to do is to help it determine when something is *larger than*,
    *equal* or *smaller than*. Or with an object the idea is the same:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们定义了一个`comparer`，它在幕后运行一个排序算法，我们所要做的就是帮助它确定何时*大于*、*等于*或*小于*。或者对于一个对象，思想是一样的：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Because we tell it in the `comparer` what property to compare we are left with
    the first entry as result.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在`comparer`中告诉它要比较哪个属性，所以最终结果就是第一个条目。
- en: min
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小值
- en: Min is pretty much identical to `max()` operator but returns the opposite value,
    the smallest.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最小值与`max()`运算符几乎完全相同，但返回相反的值，即最小值。
- en: sum
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总和
- en: '`sum()` as operator has seized to exist but we can use `reduce()` for that
    instead like so:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`sum()`作为运算符已经不存在了，但我们可以用`reduce()`来代替，就像这样：'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This can be applied to objects as well as long as we define what the `reduce()`
    function should do, like so:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以应用于对象，只要我们定义`reduce()`函数应该做什么，就像这样：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will concatenate the object parts into an object.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把对象部分连接成一个对象。
- en: average
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平均值
- en: The `average()` operator isn't there anymore in Rxjs5 but you can still achieve
    the same thing with a `reduce()`
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`average()`运算符在Rxjs5中不再存在，但你仍然可以用`reduce()`来实现相同的功能'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I admit it, this one hurted my head a little, once you crack the initial `map()`
    call the `reduce()` is pretty simple, and `Object.assign()` is a nice companion
    as usual.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我承认，这个让我有点头疼，一旦你破解了最初的`map()`调用，`reduce()`就很简单了，而`Object.assign()`像往常一样是一个不错的伙伴。
