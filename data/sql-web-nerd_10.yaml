- en: '| [![Secret Service guys checking out the press.  MIT Graduation 1998.](../Images/1be6e31e2361ba25ee7102ef0360621b.jpg)](/http://philip.greenspun.com/images/pcd4599/press-check-2.tcl)
    |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| [![保安人员正在查看新闻。1998年麻省理工学院毕业典礼。](../Images/1be6e31e2361ba25ee7102ef0360621b.jpg)](/http://philip.greenspun.com/images/pcd4599/press-check-2.tcl)
    |'
- en: Escaping to the procedural world
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转向过程化世界
- en: part of [SQL for Web Nerds](index.html) by [Philip Greenspun](http://philip.greenspun.com/)
    |
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL for Web Nerds](index.html)的一部分，由[Philip Greenspun](http://philip.greenspun.com/)编写
    |'
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[![MIT Graduation 1998](../Images/3a2f2779dcbe4d6b08899e8e89e735d1.jpg)](/http://philip.greenspun.com/images/pcd4599/mit-graduation-stand-on-line-50.tcl)
    Declarative languages can be very powerful and reliable, but sometimes it is easier
    to think about things procedurally. One way to do this is by using a procedural
    language in the database client. For example, with AOLserver we generally program
    in Tcl, a procedural language, and read the results of SQL queries. For example,
    in the /news module of the ArsDigita Community System, we want to'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1998年麻省理工学院毕业典礼](../Images/3a2f2779dcbe4d6b08899e8e89e735d1.jpg)](/http://philip.greenspun.com/images/pcd4599/mit-graduation-stand-on-line-50.tcl)
    声明性语言可能非常强大且可靠，但有时以过程化方式思考会更容易。一种方法是在数据库客户端中使用过程化语言。例如，使用AOLserver时，我们通常使用Tcl编程，这是一种过程化语言，并读取SQL查询的结果。例如，在ArsDigita社区系统的/news模块中，我们想要'
- en: query for the current news
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询当前新闻
- en: loop through the rows that come back and display one line for each row (with
    a link to a page that will show the full story)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环遍历返回的行，并为每一行显示一行（带有指向显示完整故事的页面的链接）
- en: for the first three rows, see if the news story is very short. If so, just display
    it on this page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于前三行，查看新闻故事是否非常简短。如果是，就在此页面上显示它
- en: 'The words above that should give a SQL programmer pause are in the last bullet
    item: *if* and *for the first three rows*. There are no clean ways in standard
    SQL to say "do this just for the first N rows" or "do something special for a
    particular row if its data match a certain pattern".'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 应该让SQL程序员思考的上述词语在最后一个项目符号中：*if*和*for the first three rows*。在标准SQL中没有清晰的方法来说“只对前N行执行此操作”或“如果其数据与某个模式匹配，则为特定行执行某些特殊操作”。
- en: Here's the AOLserver Tcl program. Note that depending on the contents of an
    item in the `news` table, the Tcl program may execute an SQL query (to figure
    out if there are user comments on a short news item).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是AOLserver Tcl程序。请注意，根据“news”表项的内容，Tcl程序可能会执行SQL查询（以确定简短新闻项是否有用户评论）。
- en: '[PRE0]'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Suppose that you have a million rows in your news table, you want five, but
    you can only figure out which five with a bit of procedural logic. Does it really
    make sense to drag those million rows of data all the way across the network from
    the database server to your client application and then throw out 999,995 rows?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的新闻表中有一百万行，您想要五行，但是您只能通过一点程序逻辑来确定哪五行。把那一百万行数据从数据库服务器传送到客户端应用程序，然后丢弃999,995行真的有意义吗？
- en: Or suppose that you're querying a million-row table and want the results back
    in a strange order. Does it make sense to build a million-row data structure in
    your client application, sort them in the client program, then return the sorted
    rows to the user?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 或者假设您正在查询一个百万行的表，并且希望结果以奇怪的顺序返回。在客户端程序中构建一个百万行数据结构，对它们进行排序，然后将排序后的行返回给用户有意义吗？
- en: 'Visit [http://www.scorecard.org/chemical-profiles/](http://www.scorecard.org/chemical-profiles/)
    and search for "benzene". Note that there are 328 chemicals whose names contain
    the string "benzene":'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[http://www.scorecard.org/chemical-profiles/](http://www.scorecard.org/chemical-profiles/)并搜索“苯”。请注意，有328种化学品的名称包含字符串“苯”：
- en: '[PRE1]'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The way we want to display them is
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要显示它们的方式是
- en: exact matches on top
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在顶部精确匹配
- en: line break
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 换行
- en: chemicals that start with the query string
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以查询字符串开头的化学品
- en: line break
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 换行
- en: chemicals that contain the query string
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含查询字符串的化学品
- en: Within each category of chemicals, we want to sort alphabetically. However,
    if there are numbers or special characters in front of a chemical name, we want
    to ignore those for the purposes of sorting.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一类化学品中，我们希望按字母顺序排序。但是，如果化学品名称前面有数字或特殊字符，则我们希望在排序时忽略这些字符。
- en: Can you do all of that with one query? And have them come back from the database
    in the desired order?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您能用一次查询完成所有操作吗？并且让它们以所需顺序从数据库返回吗？
- en: 'You could if you could make a procedure that would run inside the database.
    For each row, the procedure would compute a score reflecting goodness of match.
    To get the order correct, you need only ORDER BY this score. To get the line breaks
    right, you need only have your application program watch for changes in score.
    For the fine tuning of sorting equally scored matches alphabetically, just write
    another procedure that will return a chemical name stripped of leading special
    characters, then sort by the result. Here''s how it looks:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以在数据库内部运行一个过程，那么您可以。对于每一行，该过程将计算反映匹配好坏的分数。要正确排序，您只需要按照此分数进行排序。要正确处理换行符，您只需要让应用程序程序监视分数的变化。对于对等得分匹配按字母顺序进行微调，只需编写另一个过程，该过程将返回去除前导特殊字符的化学名称，然后按结果排序。看起来是这样的：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We specify the procedure `score_chem_name_match_score` to take two arguments:
    one the chemical name from the current row, and one the query string from the
    user. It returns 0 for an exact match, 1 for a chemical whose name begins with
    the query string, and 2 in all other cases (remember that this is only used in
    queries where a LIKE clause ensures that every chemical name at least contains
    the query string. Once we defined this procedure, we''d be able to call it from
    a SQL query, the same way that we can call built-in SQL functions such as `upper`.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定`score_chem_name_match_score`过程接受两个参数：一个是当前行的化学名称，另一个是用户的查询字符串。对于精确匹配返回0，对于名称以查询字符串开头的化学品返回1，其他情况返回2（请记住，这仅在查询中使用，LIKE子句确保每个化学名称至少包含查询字符串）。一旦我们定义了这个过程，就可以从SQL查询中调用它，就像我们可以调用内置的SQL函数`upper`一样。
- en: 'So is this possible? Yes, in all "enterprise-class" relational database management
    systems. Historically, each DBMS has had a proprietary language for these *stored
    procedures*. Starting in 1997, DBMS companies began to put Java byte-code interpreters
    into the database server. Oracle added Java-in-the-server capability with its
    8.1 release in February 1999\. If you''re looking at old systems such as Scorecard,
    though, you''ll be looking at procedures in Oracle''s venerable PL/SQL language:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这是可能的吗？是的，在所有“企业级”关系数据库管理系统中。从历史上看，每个DBMS都有一种专有的语言用于这些*存储过程*。从1997年开始，DBMS公司开始在数据库服务器中加入Java字节码解释器。Oracle在1999年2月的8.1版本中添加了Java在服务器中的功能。但是，如果您正在查看旧系统，例如Scorecard，您将看到Oracle古老的PL/SQL语言中的过程：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Notice that PL/SQL is a strongly typed language. We say what arguments we expect,
    whether they are IN or OUT, and what types they must be. We say that `score_chem_name_match_score`
    will return an integer. We can say that a PL/SQL variable should be of the same
    type as a column in a table:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，PL/SQL是一种强类型语言。我们声明我们期望的参数是什么，它们是IN还是OUT，以及它们必须是什么类型。我们说`score_chem_name_match_score`将返回一个整数。我们可以说PL/SQL变量应该与表中的列具有相同的类型：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The local variable `stripped_chem_name` is going to be the same type as the
    `edf_chem_name` column in the `chem_hazid_ref` table.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 本地变量`stripped_chem_name`将与`chem_hazid_ref`表中的`edf_chem_name`列具有相同的类型。
- en: 'If you are using the Oracle application SQL*Plus to define PL/SQL functions,
    you have to terminate each definition with a line containing only the character
    "/". If SQL*Plus reports that there were errors in evaluating your definition,
    you then have to type "show errors" if you want more explanation. Unless you expect
    to write perfect code all the time, it can be convenient to leave these SQL*Plus
    incantations in your .sql files. Here''s an example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Oracle应用程序SQL*Plus定义PL/SQL函数，您必须用只包含字符“/”的行终止每个定义。如果SQL*Plus报告在评估您的定义时出现错误，那么如果您想要更多解释，您必须键入“show
    errors”。除非您期望始终编写完美的代码，否则将这些SQL*Plus咒语留在您的.sql文件中可能会很方便。这里是一个例子：
- en: '[PRE5]'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Choosing between PL/SQL and Java
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在PL/SQL和Java之间进行选择
- en: 'How to choose between PL/SQL and Java? Easy: you don''t get to choose. In lots
    of important places, e.g., triggers, Oracle forces you to specify blocks of PL/SQL.
    So you have to learn at least the rudiments of PL/SQL. If you''re going to build
    major packages, Java is probably a better long-term choice.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在PL/SQL和Java之间进行选择？很简单：您无法选择。在许多重要的地方，例如触发器，Oracle强制您指定PL/SQL块。因此，您必须至少学习PL/SQL的基础知识。如果您要构建重要的包，Java可能是一个更好的长期选择。
- en: Reference
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考
- en: 'Overview: Oracle8 Server Application Developer''s Guide, "Using Procedures
    and Packages" at [http://www.oradoc.com/keyword/using_procedures_and_packages](http://www.oradoc.com/keyword/using_procedures_and_packages)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概述：Oracle8 服务器应用程序开发人员指南，“使用过程和包”位于[http://www.oradoc.com/keyword/using_procedures_and_packages](http://www.oradoc.com/keyword/using_procedures_and_packages)
- en: PL/SQL User's Guide and Reference at [http://www.oradoc.com/keyword/plsql](http://www.oradoc.com/keyword/plsql)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PL/SQL 用户指南和参考资料位于[http://www.oradoc.com/keyword/plsql](http://www.oradoc.com/keyword/plsql)
- en: Java Stored Procedures Developer's Guide at [http://www.oradoc.com/keyword/java_stored_procedures](http://www.oradoc.com/keyword/java_stored_procedures)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 存储过程开发人员指南位于[http://www.oradoc.com/keyword/java_stored_procedures](http://www.oradoc.com/keyword/java_stored_procedures)
- en: 'Next: [trees](trees.html)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步：[trees](trees.html)
- en: '* * *'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[philg@mit.edu](http://philip.greenspun.com/)[Add a comment](/comments/add?page_id=3464)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[philg@mit.edu](http://philip.greenspun.com/)[添加评论](/comments/add?page_id=3464)'
