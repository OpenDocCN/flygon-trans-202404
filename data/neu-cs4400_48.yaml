- en: Typing the Y CombinatorTuesday, February 14th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入Y组合子星期二，2月14日
- en: 'Typing the Y combinator is a tricky issue. For example, in standard ML you
    must write a new type definition to do this:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 输入Y组合子的类型是一个棘手的问题。例如，在标准ML中，你必须编写一个新的类型定义来实现这一点：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Can you find a pattern in the places where `T` is used? — Roughly speaking,
    that type definition is
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你能找到`T`被使用的地方的模式吗？ — 粗略地说，该类型定义是
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'First note that the two `fn a => ...` parts are the same as our protection,
    so ignoring that we get:'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 首先注意两个`fn a => ...`部分与我们的保护是相同的，所以忽略掉，我们得到：
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: ''
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if you now replace `T` with `Quote`, things make more sense:'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你现在用`Quote`替换`T`，事情就更清楚了：
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ''
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'and with our syntax, this would be:'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 而根据我们的语法，这将是：
- en: ''
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'it’s not really quotation — but the analogy should help: it uses `Quote` to
    distinguish functions as values that are applied (the `x`s) from functions that
    are passed as arguments.'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这并不是真正的引用 — 但这个类比应该有所帮助：它使用`Quote`来区分作为值被应用的函数（`x`）和作为参数传递的函数。
- en: 'In OCaml, this looks a little different:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在OCaml中，这看起来有些不同：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'but OCaml has also a `-rectypes` command line argument, which will make it
    infer the type by itself:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但是OCaml也有一个`-rectypes`命令行参数，它会自动推断类型：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It is also possible to write this expression in Typed Racket, but we will need
    to write a proper type definition. First of all, the type of Y should be straightforward:
    it is a fixpoint operation, so it takes a `T -> T` function and produces its fixpoint.
    The fixpoint itself is some `T` (such that applying the function on it results
    in itself). So this gives us:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Typed Racket中也可以写出这个表达式，但我们需要编写一个适当的类型定义。首先，Y的类型应该很简单：它是一个不动点操作，所以它接受一个`T ->
    T`函数并产生它的不动点。不动点本身是一些`T`（应用该函数后结果仍然是它自己）。因此，这给我们带来了：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: However, in our case `make-recursive` computes a *functional* fixpoint, for
    unary `S -> T` functions, so we should narrow down the type
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的情况下，`make-recursive`计算一个*函数*不动点，对于一元的`S -> T`函数，因此我们应该缩小类型
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, in the body of `make-recursive` we need to add a type for the `x` argument
    which is behaving in a weird way: it is used both as a function and as its own
    argument. (Remember — I will say the next sentence twice: “I will say the next
    sentence twice”.) We need a recursive type definition for that:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`make-recursive`的主体中，我们需要为`x`参数添加一个类型，因为它的行为有些奇怪：它既被用作函数，又被用作自己的参数。（记住 —
    我会说下一句话两次：“我会说下一句话两次”。）我们需要一个递归类型定义：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This type is tailored for our use of `x`: given a type `T`, `x` is a function
    that will consume *itself* (hence the `Rec`) and spit out the value that the `f`
    argument consumes — an `S -> T` function.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型是为我们对`x`的使用量身定制的：给定一个类型`T`，`x`是一个将*自身*消耗掉（因此是`Rec`）并输出`f`参数消耗的值 — 一个`S ->
    T`函数。
- en: 'The resulting full version of the code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的最终完整版本：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
