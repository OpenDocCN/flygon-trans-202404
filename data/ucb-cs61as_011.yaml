- en: Expressions and Evaluation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表达式和评估
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: In this subsection, you will learn more about Functional Programming. You will
    also learn about expressions and evaluation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个小节中，你将学习更多关于函数式编程的知识。你还将学习关于表达式和评估的内容。
- en: Functional Programming
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数式编程
- en: 'Before we jump into the Racket language itself, we will go over the deceptively
    simple big idea for this lesson. In short, it states that, when evaluating an
    expression, we can take the value returned by one function and use it as an argument
    to another function. By "hooking up" two functions in this way, we invent a new,
    third function. For example, let''s say we have a function that adds the letter
    s to the end of a word (in pseudo-code):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究Racket语言本身之前，我们将简要介绍本课程的重要概念。简而言之，它陈述了，在评估表达式时，我们可以将一个函数返回的值作为另一个函数的参数使用。通过这种方式“连接”两个函数，我们创造了一个新的第三个函数。例如，假设我们有一个函数，将字母s添加到单词的末尾（伪代码中）：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and another function that puts two words together into a sentence:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个函数，将两个单词组合成一个句子：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can combine these to create a new function that represents the third person
    singular form of a verb:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将它们组合起来创建一个表示动词第三人称单数形式的新函数：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That general formula looks like this when applied to a particular verb:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用于特定动词时，一般的公式看起来像这样：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The way we say it in Racket is
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Racket中我们这样说
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Don't worry if this is confusing or unintuitive to you; you'll get plenty of
    practice on this concept. Nevertheless, it will turn out that we can express a
    wide variety of computational algorithms by linking functions together in this
    way. This linking is what we mean by **functional programming**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这对你来说令人困惑或不直观，不要担心；你将在这个概念上得到大量练习。然而，结果将表明，我们可以通过以这种方式连接函数来表达各种计算算法。这种连接就是我们所说的**函数式编程**。
- en: Expressions
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表达式
- en: '**The Big Idea:** You can ask Racket "questions", called **expressions**. The
    Racket interpreter will then "think" about your question, or **evaluate** your
    expression. You then get back answers, called **values**. Everything we type into
    Racket (that does not error) is an expression.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要概念：** 你可以向Racket提出“问题”，称为**表达式**。Racket解释器会“思考”你的问题，或者**评估**你的表达式。然后你会得到答案，称为**值**。我们在Racket中键入的所有内容（不会出错）都是表达式。'
- en: 'When you want Racket to *do* something (e.g. add two numbers together), you
    write an expression in **prefix notation**. Although all non-error inputs are
    expressions, the most interesting kind is a **call to a procedure**. Take a look
    at the following example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想让Racket *执行*某些操作（例如将两个数字相加），你会以**前缀表示法**编写一个表达式。尽管所有非错误输入都是表达式，但最有趣的是**调用过程**。看下面的例子：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中：
- en: '**`+`** is the procedure, or the *operator* of the expression'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`+`** 是过程，或者表达式的*运算符*'
- en: '**`3`** is an argument to `+`, or an *operand* of the expression'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`3`** 是 `+` 的参数，或者表达式的*操作数*'
- en: '**`4`** is also an argument/operand'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`4`** 也是一个参数/操作数'
- en: 'This syntax allows us to **nest** expressions:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法允许我们**嵌套**表达式：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`*`, `max`, and `/` are all procedures'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`、`max` 和 `/` 都是过程'
- en: '`*` is the operator of the large expression, while `(max 2 3)` and `(/ 8 4)`
    are the operands of the large expression'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*` 是大表达式的运算符，而 `(max 2 3)` 和 `(/ 8 4)` 是大表达式的操作数'
- en: '`max` is the operator of the first subexpression, while `2` and `3` are the
    operands of the first subexpression'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max` 是第一个子表达式的运算符，而 `2` 和 `3` 是第一个子表达式的操作数'
- en: '`/` is the operator of the second subexpression, while `8` and `4` are the
    operands of the second subexpression'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/` 是第二个子表达式的运算符，而 `8` 和 `4` 是第二个子表达式的操作数'
- en: '**Test Your Understanding**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**检验你的理解**'
- en: Which of the following are valid Racket expressions? Select all that apply.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪些是有效的Racket表达式？选择所有适用的。
- en: Now, open up the Racket interpreter on your computer and try out some expressions
    of your own.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在你的计算机上打开Racket解释器，尝试一些自己的表达式。
- en: Evaluation
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估
- en: 'Racket evaluates expressions using Applicative Order (taught in Lesson 1),
    which follows these rules:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Racket 使用应用序（在第1课中讲解）来评估表达式，遵循以下规则：
- en: Evaluate the operator and operands
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估运算符和操作数
- en: Apply the operator to the operands
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将运算符应用于操作数
- en: How Racket actually understands and evaluates an expression is rather complex,
    and is gone over in Lesson 11\. For now, let's move on to the next subsection!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Racket 实际上如何理解和评估表达式是相当复杂的，在第11课中会详细讲解。现在，让我们继续下一个小节！
