- en: Considering Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑性能
- en: Considering Performance
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑性能
- en: Build Time
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建时间
- en: Forward Declare When Possible
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尽可能进行前向声明
- en: 'This:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这样：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'instead of:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This applies to templates as well:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这也适用于模板：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is a proactive approach to reduce compilation time and rebuilding dependencies.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种积极的方法来减少编译时间和重新构建依赖项。
- en: Avoid Unnecessary Template Instantiations
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免不必要的模板实例化
- en: Templates are not free to instantiate. Instantiating many templates, or templates
    with more code than necessary increases compiled code size and build time.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 模板不是免费实例化的。实例化许多模板或比必要更多代码的模板会增加编译后代码的大小和构建时间。
- en: For more examples see [this article](http://blog2.emptycrate.com/content/template-code-bloat-revisited-smaller-makeshared).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 更多示例请参阅[此文章](http://blog2.emptycrate.com/content/template-code-bloat-revisited-smaller-makeshared)。
- en: Avoid Recursive Template Instantiations
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免递归模板实例化
- en: Recursive template instantiations can result in a significant load on the compiler
    and more difficult to understand code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 递归模板实例化可能会给编译器带来显著负担，并且代码更难理解。
- en: '[Consider using variadic expansions and folds when possible instead.](http://articles.emptycrate.com/2016/05/14/folds_in_cpp11_ish.html)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[在可能的情况下考虑使用可变参数扩展和折叠。](http://articles.emptycrate.com/2016/05/14/folds_in_cpp11_ish.html)'
- en: Analyze the Build
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析构建过程
- en: The tool [Templight](https://github.com/mikael-s-persson/templight) can be used
    to analyze the build time of your project. It takes some effort to get built,
    but once you do, it's a drop in replacement for clang++.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 工具[Templight](https://github.com/mikael-s-persson/templight)可用于分析您项目的构建时间。它需要一些工作才能构建，但一旦完成，它就可以作为clang++的替代品。
- en: 'After you build using Templight, you will need to analyze the results. The
    [templight-tools](https://github.com/mikael-s-persson/templight-tools) project
    provides various methods. (Author''s Note: I suggest using the callgrind converter
    and visualizing the results with kcachegrind).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 构建使用Templight后，您将需要分析结果。[templight-tools](https://github.com/mikael-s-persson/templight-tools)项目提供了各种方法。（作者注：我建议使用callgrind转换器，并使用kcachegrind可视化结果）。
- en: Firewall Frequently Changing Header Files
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 防火墙频繁更改头文件
- en: Don't Unnecessarily Include Headers
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 不必要包含头文件
- en: The compiler has to do something with each include directive it sees. Even if
    it stops as soon as it seems the `#ifndef` include guard, it still had to open
    the file and begin processing it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器必须处理它看到的每个包含指令。即使它在看到`#ifndef`包含保护时停止，它仍然必须打开文件并开始处理它。
- en: '[include-what-you-use](https://github.com/include-what-you-use/include-what-you-use)
    is a tool that can help you identify which headers you need.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[include-what-you-use](https://github.com/include-what-you-use/include-what-you-use)是一个可以帮助您确定所需头文件的工具。'
- en: Reduce the load on the preprocessor
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 减少预处理器的负载
- en: This is a general form of "Firewall Frequently Changing Header Files" and "Don't
    Unnecessarily Include Headers." Tools like BOOST_PP can be very helpful, but they
    also put a huge burden on the preprocessor.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是“防火墙频繁更改头文件”和“不必要包含头文件”的一般形式。像BOOST_PP这样的工具可能非常有帮助，但它们也会给预处理器带来巨大的负担。
- en: Consider using precompiled headers
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 考虑使用预编译头文件
- en: 'The usage of precompiled headers can considerably reduce the compile time in
    large projects. Selected headers are compiled to an intermediate form (PCH files)
    that can be faster processed by the compiler. It is recommended to define only
    frequently used header that changes rarely as precompiled header (e.g. system
    and library headers) to achieve the compile time reduction. But you have to keep
    in mind, that using precompiled headers has several disadvantages:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型项目中，使用预编译头文件可以显著减少编译时间。选定的头文件编译为中间形式（PCH文件），编译器可以更快地处理它们。建议只将频繁使用但更改不频繁的头文件（例如系统和库头文件）定义为预编译头文件，以实现编译时间的减少。但是您必须记住，使用预编译头文件有几个缺点：
- en: The usage of precompiled header is not portable.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预编译头文件的使用不具有可移植性。
- en: The generated PCH files are machine dependent.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成的PCH文件是机器相关的。
- en: The generated PCH files can be quite large.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成的PCH文件可能相当大。
- en: It can break your header dependencies. Because of the precompiled headers, every
    file has the possibility to include every header that is marked as a precompiled
    header. In result it can happen, that the build fails if you disable the precompiled
    headers. This can be an issue if you ship something like a library. Because of
    this it is highly recommend to build once with precompiled header enabled and
    a second time without them.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能会破坏你的头文件依赖关系。由于预编译头文件，每个文件都有可能包含标记为预编译头文件的每个头文件。结果可能会导致如果禁用预编译头文件，则构建失败。如果你发布像库之类的东西，这可能是一个问题。因此，强烈建议启用预编译头文件构建一次，然后在第二次构建时禁用它们。
- en: Precompiled headers is supported by the most common compiler, like [GCC](https://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html),
    [Clang](http://clang.llvm.org/docs/PCHInternals.html) and [Visual Studio](https://msdn.microsoft.com/en-us/library/szfdksca.aspx).
    Tools like [cotire](https://github.com/sakra/cotire/) (a plugin for cmake) can
    help you to add precompiled headers to your build system.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数常见编译器都支持预编译头文件，例如[GCC](https://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html)、[Clang](http://clang.llvm.org/docs/PCHInternals.html)和[Visual
    Studio](https://msdn.microsoft.com/en-us/library/szfdksca.aspx)。像[cotire](https://github.com/sakra/cotire/)（cmake的插件）这样的工具可以帮助你将预编译头文件添加到你的构建系统中。
- en: Consider Using Tools
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 考虑使用工具
- en: These are not meant to supersede good design
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些并不意味着取代良好的设计
- en: '[ccache](https://ccache.samba.org/)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ccache](https://ccache.samba.org/)'
- en: '[warp](https://github.com/facebook/warp), Facebook''s preprocessor'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[warp](https://github.com/facebook/warp)，Facebook的预处理器'
- en: Put tmp on Ramdisk
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将tmp放在Ramdisk上
- en: See [this](https://www.youtube.com/watch?v=t4M3yG1dWho) YouTube video for more
    details.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 见[此](https://www.youtube.com/watch?v=t4M3yG1dWho) YouTube 视频获取更多详情。
- en: Use the gold linker
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用gold链接器
- en: If on Linux, consider using the gold linker for GCC.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在Linux上，考虑使用GCC的gold链接器。
- en: Runtime
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时
- en: Analyze the Code!
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析代码！
- en: There's no real way to know where your bottlenecks are without analyzing the
    code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 没有真正的方法来分析代码而不知道瓶颈在哪里。
- en: '[http://developer.amd.com/tools-and-sdks/opencl-zone/codexl/](http://developer.amd.com/tools-and-sdks/opencl-zone/codexl/)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://developer.amd.com/tools-and-sdks/opencl-zone/codexl/](http://developer.amd.com/tools-and-sdks/opencl-zone/codexl/)'
- en: '[http://www.codersnotes.com/sleepy](http://www.codersnotes.com/sleepy)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.codersnotes.com/sleepy](http://www.codersnotes.com/sleepy)'
- en: Simplify the Code
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简化代码
- en: The cleaner, simpler, and easier to read the code is, the better chance the
    compiler has at implementing it well.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 代码越清洁、简单、易读，编译器实现它的机会就越大。
- en: Use Initializer Lists
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用初始化列表
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Initializer lists are significantly more efficient; reducing object copies and
    resizing of containers.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化列表效率更高；减少对象拷贝和容器大小调整。
- en: Reduce Temporary Objects
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少临时对象
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This sort of code prevents the compiler from performing a move operation...
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的代码阻止了编译器执行移动操作…
- en: Enable move operations
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用移动操作
- en: Move operations are one of the most touted features of C++11\. They allow the
    compiler to avoid extra copies by moving temporary objects instead of copying
    them in certain cases.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 移动操作是C++11最受推崇的特性之一。它们允许编译器在某些情况下通过移动临时对象而不是复制它们来避免额外的拷贝。
- en: Certain coding choices we make (such as declaring our own destructor or assignment
    operator or copy constructor) prevents the compiler from generating a move constructor.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做出的某些编码选择（比如声明自己的析构函数或赋值操作符或拷贝构造函数）阻止了编译器生成移动构造函数。
- en: For most code, a simple
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数代码，一个简单的
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: would suffice. However, MSVC2013 doesn't seem to like this code yet.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将足够。然而，MSVC2013似乎还不喜欢这段代码。
- en: Kill `shared_ptr` Copies
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消除`shared_ptr`的拷贝
- en: '`shared_ptr` objects are much more expensive to copy than you''d think they
    would be. This is because the reference count must be atomic and thread-safe.
    So this comment just re-enforces the note above: avoid temporaries and too many
    copies of objects. Just because we are using a pImpl it does not mean our copies
    are free.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`shared_ptr`对象的拷贝成本比你想象的要高得多。这是因为引用计数必须是原子的和线程安全的。因此，这个评论只是强调了上面的注意事项：避免临时对象和过多的对象拷贝。仅仅因为我们使用了pImpl，并不意味着我们的拷贝是免费的。'
- en: Reduce Copies and Reassignments as Much as Possible
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尽量减少拷贝和重新赋值操作
- en: 'For more simple cases, the ternary operator can be used:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更简单的情况，可以使用三元运算符：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: More complex cases can be facilitated with an [immediately-invoked lambda](http://blog2.emptycrate.com/content/complex-object-initialization-optimization-iife-c11).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的情况可以通过[立即调用的lambda](http://blog2.emptycrate.com/content/complex-object-initialization-optimization-iife-c11)简化。
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Avoid Excess Exceptions
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免过多异常
- en: Exceptions which are thrown and captured internally during normal processing
    slow down the application execution. They also destroy the user experience from
    within a debugger, as debuggers monitor and report on each exception event. It
    is best to just avoid internal exception processing when possible.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常处理期间抛出并捕获的异常会减慢应用程序的执行速度。它们还会破坏用户体验，因为调试器会监视并报告每个异常事件。尽可能避免内部异常处理是最好的。
- en: Get rid of “new”
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摆脱“new”
- en: We already know that we should not be using raw memory access, so we are using
    `unique_ptr` and `shared_ptr` instead, right? Heap allocations are much more expensive
    than stack allocations, but sometimes we have to use them. To make matters worse,
    creating a `shared_ptr` actually requires 2 heap allocations.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道我们不应该使用原始内存访问，所以我们使用 `unique_ptr` 和 `shared_ptr`，对吧？堆分配比栈分配昂贵得多，但有时我们不得不使用它们。更糟糕的是，创建一个
    `shared_ptr` 实际上需要 2 次堆分配。
- en: However, the `make_shared` function reduces this down to just one.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`make_shared` 函数将这个问题减少到了只有一个。
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Prefer `unique_ptr` to `shared_ptr`
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更倾向于使用 `unique_ptr` 而不是 `shared_ptr`
- en: 'If possible use `unique_ptr` instead of `shared_ptr`. The `unique_ptr` does
    not need to keep track of its copies because it is not copyable. Because of this
    it is more efficient than the `shared_ptr`. Equivalent to `shared_ptr` and `make_shared`
    you should use `make_unique` (C++14 or greater) to create the `unique_ptr`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能，尽量使用 `unique_ptr` 而不是 `shared_ptr`。`unique_ptr` 不需要跟踪其副本，因为它不可复制。因此，它比
    `shared_ptr` 更高效。与 `shared_ptr` 和 `make_shared` 相当，你应该使用 `make_unique`（C++14 或更高版本）来创建
    `unique_ptr`：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Current best practices suggest returning a `unique_ptr` from factory functions
    as well, then converting the `unique_ptr` to a `shared_ptr` if necessary.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 目前的最佳实践建议从工厂函数中返回一个 `unique_ptr`，然后根据需要将 `unique_ptr` 转换为 `shared_ptr`。
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Get rid of std::endl
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摆脱 std::endl
- en: '`std::endl` implies a flush operation. It''s equivalent to `"\n" << std::flush`.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::endl` 暗示着一个刷新操作。它相当于 `"\n" << std::flush`。'
- en: Limit Variable Scope
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制变量范围
- en: Variables should be declared as late as possible, and ideally only when it's
    possible to initialize the object. Reduced variable scope results in less memory
    being used, more efficient code in general, and helps the compiler optimize the
    code further.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 变量应尽可能晚声明，并且理想情况下仅在初始化对象时才能声明。减少变量作用域会减少内存使用，更一般地提高代码效率，并帮助编译器进一步优化代码。
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[This topic has an associated discussion thread](https://github.com/lefticus/cppbestpractices/issues/52).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[此主题有关的讨论主题](https://github.com/lefticus/cppbestpractices/issues/52)。'
- en: Prefer `double` to `float`, But Test First
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更倾向于使用 `double` 而不是 `float`，但是先进行测试
- en: Depending on the situation and the compiler's ability to optimize, one may be
    faster over the other. Choosing `float` will result in lower precision and may
    be slower due to conversions. On vectorizable operations `float` may be faster
    if you are able to sacrifice precision.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 根据情况和编译器的优化能力，其中一个可能比另一个更快。选择 `float` 将导致精度降低，并且由于转换可能会更慢。在可矢量化操作中，如果能够牺牲精度，`float`
    可能会更快。
- en: '`double` is the recomended default choice as it is the default type for floating
    point values in C++.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`double` 是建议的默认选择，因为它是 C++ 中浮点值的默认类型。'
- en: See this [stackoverflow](http://stackoverflow.com/questions/4584637/double-or-float-which-is-faster)
    discussion for some more information.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这个 [stackoverflow](http://stackoverflow.com/questions/4584637/double-or-float-which-is-faster)
    讨论以获取更多信息。
- en: Prefer `++i` to `i++`
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更倾向于 `++i` 而不是 `i++`
- en: '... when it is semantically correct. Pre-increment is [faster](http://blog2.emptycrate.com/content/why-i-faster-i-c)
    than post-increment because it does not require a copy of the object to be made.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '... 当语义上是正确的。前增量比后增量 [更快](http://blog2.emptycrate.com/content/why-i-faster-i-c)，因为它不需要创建对象的副本。'
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Even if many modern compilers will optimize these two loops to the same assembly
    code, it is still good practice to prefer `++i`. There is absolutely no reason
    not to and you can never be certain that your code will not pass a compiler that
    does not optimize this. You should be also aware that the compiler will not be
    able optimize this only for integer types and not necessarily for all iterator
    or other user defined types.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 即使许多现代编译器将这两个循环优化为相同的汇编代码，但更倾向于使用 `++i` 仍然是一个好的做法。绝对没有理由不这样做，并且你永远无法确定你的代码不会通过一个不会优化此代码的编译器。你还应该意识到编译器只能为整数类型优化，而不一定是所有迭代器或其他用户定义的类型。
- en: The bottom line is that it is always easier and recommended to use the pre-increment
    operator if it is semantically identical to the post-increment operator.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 底线是，如果与后置递增运算符在语义上相同，那么始终更容易且建议使用前置递增运算符。
- en: Char is a char, string is a string
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Char 是一个字符，string 是一个字符串。
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is very minor, but a `"\n"` has to be parsed by the compiler as a `const
    char *` which has to do a range check for `\0` when writing it to the stream (or
    appending to a string). A '\n' is known to be a single character and avoids many
    CPU instructions.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是非常微小的一点，但是一个 `"\n"` 必须被编译器解析为一个 `const char *`，当将其写入流（或附加到字符串）时，必须进行 `\0`
    的范围检查。 '\n' 已知是一个单个字符，并避免了许多 CPU 指令。
- en: If used inefficiently very many times it might have an impact on your performance,
    but more importantly thinking about these two usage cases gets you thinking more
    about what the compiler and runtime has to do to execute your code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用效率低下的次数很多，它可能会影响您的性能，但更重要的是，思考这两种用法情况会让您更多地思考编译器和运行时如何执行您的代码。
- en: Never Use `std::bind`
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 永远不要使用 `std::bind`。
- en: '`std::bind` is almost always way more overhead (both compile time and runtime)
    than you need. Instead simply use a lambda.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::bind` 几乎总是比你需要的开销要大得多（无论是编译时还是运行时）。 相反，只需简单地使用 lambda。'
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
