- en: what' the iostream?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: what' the iostream?
- en: 3.what's the iostream
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.what's the iostream
- en: 我们了解了关于ioloop的一些相关函数，我想现在对tornado的一些功能也有了大概的了解。这一章我们简单的了解一下tornado里的iostream。我们写一个服务器，所有的io都要通过一个connection来传输，那么iostream里就包含了我们对数据的处理，以及对连接的一些操作。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了关于ioloop的一些相关函数，我想现在对tornado的一些功能也有了大概的了解。这一章我们简单的了解一下tornado里的iostream。我们写一个服务器，所有的io都要通过一个connection来传输，那么iostream里就包含了我们对数据的处理，以及对连接的一些操作。
- en: 本章主要对BaseIOStream和IOStream这两个类来进行讲解。官方文档见[这里](http://www.tornadoweb.org/en/stable/iostream.html)。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要对BaseIOStream和IOStream这两个类来进行讲解。官方文档见[这里](http://www.tornadoweb.org/en/stable/iostream.html)。
- en: BaseIOStream的相关接口
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BaseIOStream的相关接口
- en: 3.1BaseIOStream的相关接口
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1BaseIOStream的相关接口
- en: 简单的来说，这个类从socket中读或写数据。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的来说，这个类从socket中读或写数据。
- en: 以下是它的几个基本属性：
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是它的几个基本属性：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 这些都可以在继承的时候修改的。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都可以在继承的时候修改的。
- en: 介绍一下主要的几个接口
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍一下主要的几个接口
- en: 1.BaseIOStream.write(data, callback=None)
  id: totrans-11
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 1.BaseIOStream.write(data, callback=None)
- en: 异步的写数据，如果有callback，那么在所有数据成功写入以后执行callback。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 异步的写数据，如果有callback，那么在所有数据成功写入以后执行callback。
- en: 2.BaseIOStream.read_bytes(num_bytes, callback=None, streaming_callback=None,
    partial=False)
  id: totrans-13
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.BaseIOStream.read_bytes(num_bytes, callback=None, streaming_callback=None,
    partial=False)
- en: 异步的读取数据，读到的数据大小取决于num_bytes。同理，如果有callback，在数据完全读取后，执行callback。读取到的数据data作为callback的参数，如果不是的话，那么callback需要返回一个future对象。而streaming_callback,是当读取到的数据全都是有效的情况下，才会去执行。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 异步的读取数据，读到的数据大小取决于num_bytes。同理，如果有callback，在数据完全读取后，执行callback。读取到的数据data作为callback的参数，如果不是的话，那么callback需要返���一个future对象。��streaming_callback,是当读取到的数据全都是有效的情况下，才会去执行。
- en: 3.BaseIOStream.read_until(delimiter, callback=None, max_bytes=None)
  id: totrans-15
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 3.BaseIOStream.read_until(delimiter, callback=None, max_bytes=None)
- en: 同上，只不过是当读delimiter(分隔符)的时候停止。callback和read_bytes里的一样。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 同上，只不过是当读delimiter(分隔符)的时候停止。callback和read_bytes里的一样。
- en: 4.BaseIOStream.read_until_regex(regex, callback=None, max_bytes=None)
  id: totrans-17
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 4.BaseIOStream.read_until_regex(regex, callback=None, max_bytes=None)
- en: 通过正则来读取数据，regex就是给定的正则表达式。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过正则来读取数据，regex就是给定的正则表达式。
- en: 5.BaseIOStream.read_until_close(callback=None, streaming_callback=None)
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 5.BaseIOStream.read_until_close(callback=None, streaming_callback=None)
- en: 异步读数据，知道socket关闭。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 异步读数据，知道socket关闭。
- en: 6.BaseIOStream.close(exc_info=False)
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 6.BaseIOStream.close(exc_info=False)
- en: 关闭当前的stream。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭当前的stream。
- en: 7.BaseIOStream.set_close_callback(callback)
  id: totrans-23
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 7.BaseIOStream.set_close_callback(callback)
- en: 当stream关闭时，执行回调函数。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当stream关闭时，执行回调函数。
- en: 8.BaseIOStream.closed()
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 8.BaseIOStream.closed()
- en: 如果为真，那么说明stream已经关闭了。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为真，那么说明stream已经关闭了。
- en: 9.BaseIOStream.reading()
  id: totrans-27
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 9.BaseIOStream.reading()
- en: 如果为真，那么说明当前正在从stream中读数据
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为真，那么说明当前正在从stream中读数据
- en: 10.BaseIOStream.writing()
  id: totrans-29
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 10.BaseIOStream.writing()
- en: 有读就有写。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有读就有写。
- en: 以上呢就是baseIOStream中，主要的接口。在我们自己去写connection的时候，都会用的到，这里先简单介绍一下，在后面写connection的时候，我们会着重去讲解。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以上呢就是baseIOStream中，主要的接口。在我们自己去写connection的时候，都会用的到，这里先简单介绍一下，在后面写connection的时候，我们会着重去讲解。
- en: baseIOStream的相关函数以及IOStream类
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: baseIOStream的相关函数以及IOStream类
- en: 3.2 baseIOStream的相关函数以及IOStream类
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2 baseIOStream的相关函数以及IOStream类
- en: 1.BaseIOStream.fileno()
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 1.BaseIOStream.fileno()
- en: 这个很简单，就是我们stream当前的文件描述符。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个很简单，就是我们stream当前的文件描述符。
- en: 2.BaseIOStream.close_fd()
  id: totrans-36
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.BaseIOStream.close_fd()
- en: 关闭这个fd。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭这个fd。
- en: 3.BaseIOStream.write_to_fd(data)
  id: totrans-38
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 3.BaseIOStream.write_to_fd(data)
- en: 尝试向这个fd去写data， 期间可能会出现未成功写入，因此函数的返回值是成功写入数据的大小。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试向这个fd去写data， 期间可能会出现未成功写入，因此函数的返回值是成功写入数据的大小。
- en: 4.BaseIOStream.read_from_fd(data)
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 4.BaseIOStream.read_from_fd(data)
- en: 有写也有读。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有写也有读。
- en: 5.BaseIOStream.get_fd_error()
  id: totrans-42
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 5.BaseIOStream.get_fd_error()
- en: 获取fd中所有error信息。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 获取fd中所有error信息。
- en: 关于baseIOStream的信息差不都就这些了，在我们实际使用的过程中，我们不会去直接使用这个类的，我们基本都会去使用它的子类，IOStream。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 关于baseIOStream的信息差不都就这些了，在我们实际使用的过程中，我们不会去直接使用这个类的，我们基本都会去使用它的子类，IOStream。
- en: 以下通过官方文档的例子，来简单介绍一下IOStream。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下通过官方文档的例子，来简单介绍一下IOStream。
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tcp Client和Tcp Server
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tcp Client和Tcp Server
- en: 3.3 Tcp Client和Tcp Server
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3 Tcp Client和Tcp Server
- en: tornado.tcpclient.TCPClient(resolver=None, io_loop=None)
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: tornado.tcpclient.TCPClient(resolver=None, io_loop=None)
- en: 这个呢就是tornado自有的一个tcpclient，使用它的时候，可以直接继承它.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个呢就是tornado自有的一个tcpclient，使用它的时候，可以直接继承它.
- en: '它有一个方法 `connect(host, port, af=<AddressFamily.AF_UNSPEC: 0>, ssl_options=None,
    max_buffer_size=None)`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '它有一个方法 `connect(host, port, af=<AddressFamily.AF_UNSPEC: 0>, ssl_options=None,
    max_buffer_size=None)`'
- en: 它会返回IOStream的实例，如果ssl_options为真，那么会返回SSLIOStream。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 它会返回IOStream的实例，如果ssl_options为真，那么会返回SSLIOStream。
- en: 通过给的host和port来连接服务器，然后通过返回的stream，就可以进行读写等操作了。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过给的host和port来连接服务器，然后通过返回的stream，就可以进行读写等操作了。
- en: tornado.tcpserver.TCPServer(io_loop=None, ssl_options=None, max_buffer_size=None,
    read_chunk_size=None)
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: tornado.tcpserver.TCPServer(io_loop=None, ssl_options=None, max_buffer_size=None,
    read_chunk_size=None)
- en: 这个就是用来创建TCPserver的。它是非阻塞，单线程的。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个就是用来创建TCPserver的。它是非阻塞，单线程的。
- en: 来看一下关于它的几个函数
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 来看一下关于它的几个函数
- en: 1.listen(port, address="")
  id: totrans-57
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 1.listen(port, address="")
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 这就可以创建一个简单的tcpserver，端口号8888
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这就可以创建一个简单的tcpserver，端口号8888
- en: 2.bind(port, address=None, family=<addressfamily.af_unspecu0003a u00030="" class="calibre16">,
    backlog=128)</addressfamily.af_unspecu0003a>
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.bind(port, address=None, family=<addressfamily.af_unspecu0003a u00030="" class="calibre16">,
    backlog=128)</addressfamily.af_unspecu0003a>
- en: 开启多进程的一个方法
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 开启多进程的一个方法
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 3.add_sockets(sockets)
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 3.add_sockets(sockets)
- en: 也可以开启多进程。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以开启多进程。
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 4.handle_stream(stream, address)
  id: totrans-66
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 4.handle_stream(stream, address)
- en: 这是我们用来接收stream的方法。你可以通过继承TCPServer，来覆盖这个方法。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们用来接收stream的方法。你可以通过继承TCPServer，来覆盖这个方法。
- en: 几个方法非常简单，都是最基本的，在写server的时候都需要用到的。下一节我们来写一个简单的tcpserver。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 几个方法非常简单，都是最基本的，在写server的时候都需要用到的。下一节我们来写一个简单的tcpserver。
- en: 一个简单的TCPServer
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的TCPServer
- en: 3.4 一个简单的TCPServer
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4 一个简单的TCPServer
- en: 以下是一个简单的TCPServer的代码(鸣谢yoki123)。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的TCPServer的代码(鸣谢yoki123)。
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 我们来看一下流程，
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一下流程，
- en: 1.start().我们开启tcpserver，首先创建一个socket，, 然后我们为ioloop添加handler。
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 1.start().我们开启tcpserver，首先创建一个socket，, 然后我们为ioloop添加handler。
- en: 2.服务器开启后，执行_accept_handler,这个函数里是一个循环，从socket中获取conn
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.服务器开启后，执行_accept_handler,这个函数里是一个循环，从socket中获取conn
- en: 3.然后我们解析这个conn， build_class使我们自己实现的一个用来解析数据，拆包解包的一个protocol类，这里我们会将所有的bytes解析为我们能看懂的字符串数字等等。
  id: totrans-76
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 3.然后我们解析这个conn， build_class使我们自己实现的一个用来解析数据，拆包解包的一个protocol类，这里我们会将所有的bytes解析为我们能看懂的字符串数字等���。
- en: 4.然后我们调用on_connect函数，我们将这个conn传入handler_stream中， 前面讲过，这个函数是用来接受的stream的。然后我们从stream中读取数据，知道conn关闭。
  id: totrans-77
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 4.然后我们调用on_connect函数，我们将这个conn传入handler_stream中， 前面讲过，这个函数是用来接受的stream的。然后我们从stream中读取数据，直到conn关闭。
- en: 以上就是我们服务器开启后执行的大概流程。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以上就是我们服务器开启后执行的大概流程。
