- en: Operators - combination
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符 - 组合
- en: Operators combination
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符组合
- en: There are many operators out there that allows you to combine the values from
    2 or more source, they act a bit differently though and its important to know
    the difference.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多运算符可以让你合并来自2个或更多源的值，它们的作用有些不同，因此了解区别很重要。
- en: combineLatest
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: combineLatest
- en: 'The signature on this one is:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个的签名是：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What this does is to essentially take the latest response from each `source`
    and return it as an array of x number of elements. One element per source.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 它的作用是从每个`source`中本质上获取最新的响应，并将其作为包含x个元素的数组返回。每个源一个元素。
- en: As you can see source2 stops emitting after 2 values but is able to keep sending
    the latest emitted.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，source2在发出2个值后停止发出，但能够继续发送最新发出的值。
- en: Business case
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务案例
- en: The business case is when you are interested in the very latest from each source
    and past values is of less interest, and of course you have more than one source
    that you want to combine.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 业务案例是当你对每个源的最新值感兴趣，而过去的值不那么重要时，当然你有多个想要合并的源。
- en: concat
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: concat
- en: 'The signature is :'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 签名是：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Looking at the following data, it''s easy to think that it should care when
    data is emitted:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下数据，很容易认为在数据发出时应该关心：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The result however is that the resulting observable takes all the values from
    the first source and emits those first then it takes all the values from source
    2, so order in which the source go into `concat()` operator matters.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，结果是，生成的observable会先获取第一个源的所有值并首先发出这些值，然后获取源2的所有值，因此源进入`concat()`运算符的顺序很重要。
- en: So if you have a case where a source somehow should be prioritized then this
    is the operator for you.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你有一个情况，其中某个源应该优先考虑，那么这就是适合你的运算符。
- en: merge
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: merge
- en: This operator enables you two merge several streams into one.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个运算符使你能够将多个流合并为一个。
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Point with is operator is to combine several streams and as you can see above
    any time operators such as `delay()` is respected.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个运算符的重点是将多个流合并，正如你在上面看到的，任何时间运算符，比如`delay()`都会被尊重。
- en: zip
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: zip
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Gives us `1,2,7`
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 给我们`1,2,7`
- en: Let's look at another example
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Gives us `1,2,7` and `5,3,9` so it joins values on column basis. It will act
    on the least common denominator which in this case is 2\. The `4` is ignored in
    the `2,3,4` sequence. As you can see from the first example it's also possible
    to mix different async concepts such as Promises with Observables because interval
    conversion happens.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 给我们`1,2,7`和`5,3,9`，所以它基于列连接值。它将根据最小公共分母进行操作，本例中为2。`2,3,4`序列中的`4`被忽略。正如你从第一个例子中看到的，也可以混合不同的异步概念，比如将Promises与Observables结合，因为间隔转换会发生。
- en: Business case
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务案例
- en: If you really care about what different sources emitted at a certain position.
    Let's say the 2nd response from all your sources then `zip()` is your operator.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的关心不同源在某个位置发出的内容。比如说所有源的第二个响应，那么`zip()`就是你的运算符。
