- en: Bindings & SubstitutionTuesday, January 24th
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绑定和替换
- en: 'We now get to an important concept: substitution.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到一个重要的概念：替换。
- en: 'Even in our simple language, we encounter repeated expressions. For example,
    if we want to compute the square of some expression:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在我们简单的语言中，我们也会遇到重复的表达式。例如，如果我们想要计算某个表达式的平方：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Why would we want to get rid of the repeated sub-expression?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么要摆脱重复的子表达式？
- en: It introduces a redundant computation. In this example, we want to avoid computing
    the same sub-expression a second time.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它引入了冗余的计算。在这个例子中，我们希望避免第二次计算相同的子表达式。
- en: 'It makes the computation more complicated than it could be without the repetition.
    Compare the above with:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使计算比没有重复时更加复杂。与上面的进行比较：
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is related to a basic fact in programming that we have already discussed:
    duplicating information is always a bad thing. Among other bad consequences, it
    can even lead to bugs that could not happen if we wouldn’t duplicate code. A toy
    example is “fixing” one of the numbers in one expression and forgetting to fix
    the corresponding one:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这与编程中一个我们已经讨论过的基本事实有关：复制信息总是一件坏事。除了其他坏后果外，它甚至可能导致如果我们不复制代码就不会发生的错误。一个玩具例子是在一个表达式中“修复”一个数字，却忘记修复对应的数字：
- en: '[PRE2]'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Real world examples involve much more code, which make such bugs very difficult
    to find, but they still follow the same principle.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现实世界的例子涉及更多的代码，这使得这种错误非常难以发现，但它们仍然遵循相同的原则。
- en: This gives us more expressive power — we don’t just say that we want to multiply
    two expressions that both happen to be `{+ 4 2}`, we say that we multiply the
    `{+ 4 2}` expression by *itself*. It allows us to express identity of two values
    as well as using two values that happen to be the same.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这给了我们更多的表达能力 — 我们不只是说我们想要将两个表达式相乘，这两个表达式恰好都是`{+ 4 2}`，我们说我们将`{+ 4 2}`表达式与*自身*相乘。它允许我们表达两个值的相等，以及使用两个恰好相同的值。
- en: 'So, the normal way to avoid redundancy is to introduce an identifier. Even
    when we speak, we might say: “let x be 4 plus 2, multiply x by x”.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，避免冗余的常规方法是引入一个标识符。即使在说话时，我们可能会说：“让 x 等于 4 加 2，将 x 乘以 x”。
- en: '(These are often called “variables”, but we will try to avoid this name: what
    if the identifier does not change (vary)?)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: （这些通常被称为“变量”，但我们将尽量避免使用这个名字：如果标识符不变呢？）
- en: 'To get this, we introduce a new form into our language:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们在我们的语言中引入了一个新的形式：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We expect to be able to reduce this to:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够将这个简化为：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: by substituting 6 for `x` in the body sub-expression of `with`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`with`的主体子表达式中用 6 替换`x`。
- en: 'A little more complicated example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个稍微复杂的例子：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
