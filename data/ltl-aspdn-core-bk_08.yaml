- en: Deploy the application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署应用程序
- en: Deploy the application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署应用程序
- en: You've come a long way, but you're not quite done yet. Once you've created a
    great application, you need to share it with the world!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经走了很长一段路，但还没有完成。一旦创建了一个很棒的应用程序，您需要与世界分享！
- en: Because ASP.NET Core applications can run on Windows, Mac, or Linux, there are
    a number of different ways you can deploy your application. In this chapter, I'll
    show you the most common (and easiest) ways to go live.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因为ASP.NET Core应用程序可以在Windows、Mac或Linux上运行，所以有许多不同的方式可以部署您的应用程序。在本章中，我将向您展示最常见（也是最简单）的上线方式。
- en: Deployment options
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署选项
- en: 'ASP.NET Core applications are typically deployed to one of these environments:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core应用程序通常部署到以下环境之一：
- en: '**Any Docker host**. Any machine capable of hosting Docker containers can be
    used to host an ASP.NET Core application. Creating a Docker image is a very quick
    way to get your application deployed, especially if you''re familiar with Docker.
    (If you''re not, don''t worry! I''ll cover the steps later.)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任何Docker主机**。任何能够托管Docker容器的机器都可以用来托管ASP.NET Core应用程序。创建Docker镜像是快速部署应用程序的一种方法，特别是如果您熟悉Docker的话。（如果不熟悉，不用担心！我稍后会介绍步骤。）'
- en: '**Azure**. Microsoft Azure has native support for ASP.NET Core applications.
    If you have an Azure subscription, you just need to create a Web App and upload
    your project files. I''ll cover how to do this with the Azure CLI in the next
    section.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure**。Microsoft Azure原生支持ASP.NET Core应用程序。如果您有Azure订阅，只需创建一个Web应用程序并上传您的项目��件即可。我将在下一节中介绍如何使用Azure
    CLI执行此操作。'
- en: '**Linux (with Nginx)**. If you don''t want to go the Docker route, you can
    still host your application on any Linux server (this includes Amazon EC2 and
    DigitalOcean virtual machines). It''s typical to pair ASP.NET Core with the Nginx
    reverse proxy. (More about Nginx below.)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux（使用Nginx）**。如果您不想使用Docker，仍然可以在任何Linux服务器上托管您的应用程序（包括Amazon EC2和DigitalOcean虚拟机）。将ASP.NET
    Core与Nginx反向代理配对是很典型的做法。（下面会更多介绍Nginx。）'
- en: '**Windows**. You can use the IIS web server on Windows to host ASP.NET Core
    applications. It''s usually easier (and cheaper) to just deploy to Azure, but
    if you prefer managing Windows servers yourself, it''ll work just fine.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**。您可以在Windows上使用IIS Web服务器来托管ASP.NET Core应用程序。通常更容易（和更便宜）只需部署到Azure，但如果您更喜欢自己管理Windows服务器，也可以正常工作。'
- en: Kestrel and reverse proxies
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kestrel和反向代理
- en: If you don't care about the guts of hosting ASP.NET Core applications and just
    want the step-by-step instructions, feel free to skip to one of the next two sections!
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果您不关心托管ASP.NET Core应用程序的内部机制，只想要逐步说明，请随时跳到接下来的两个部分之一！
- en: ASP.NET Core includes a fast, lightweight development web server called Kestrel.
    It's the server you've been using every time you ran the app locally and browsed
    to `http://localhost:5000`. When you deploy your application to a production environment,
    it'll still use Kestrel behind the scenes. However, it's recommended that you
    put a reverse proxy in front of Kestrel, because Kestrel doesn't yet have load
    balancing and other features that bigger web servers have.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core包含一个快速、轻量级的开发Web服务器，称为Kestrel。每次在本地运行应用程序并浏览`http://localhost:5000`时，您都在使用该服务器。当将应用程序部署到生产环境时，它仍将在后台使用Kestrel。但建议您在Kestrel前面放置一个反向代理，因为Kestrel尚未具有负载平衡和其他更大型Web服务器具有的功能。
- en: On Linux (and in Docker containers), you can use Nginx or the Apache web server
    to receive incoming requests from the internet and route them to your application
    hosted with Kestrel. If you're on Windows, IIS does the same thing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux（和Docker容器）上，您可以使用Nginx或Apache Web服务器接收来自互联网的请求，并将它们路由到使用Kestrel托管的应用程序。如果您在Windows上，IIS也会执行相同的操作。
- en: If you're using Azure to host your application, this is all taken care of for
    you automatically. I'll cover setting up Nginx as a reverse proxy in the Docker
    section.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Azure托管您的应用程序，这一切都会自动为您处理。我将在Docker部分中介绍设置Nginx作为反向代理的内容。
- en: Deploy to Azure
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到Azure
- en: Deploy to Azure
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到Azure
- en: Deploying your ASP.NET Core application to Azure only takes a few steps. You
    can do it through the Azure web portal, or on the command line using the Azure
    CLI. I'll cover the latter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将ASP.NET Core应用程序部署到Azure只需几个步骤。您可以通过Azure Web门户进行操作，或者使用Azure CLI命令行。我将介绍后者。
- en: What you'll need
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 您需要什么
- en: Git (use `git --version` to make sure it's installed)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git（使用`git --version`确保已安装）
- en: The Azure CLI (follow the install instructions at [https://github.com/Azure/azure-cli](https://github.com/Azure/azure-cli))
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure CLI（按照[https://github.com/Azure/azure-cli](https://github.com/Azure/azure-cli)的安装说明进行安装）
- en: An Azure subscription (the free subscription is fine)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Azure订阅（免费订阅可以）
- en: A deployment configuration file in your project root
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的项目根目录中创建一个部署配置文件
- en: Create a deployment configuration file
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个部署配置文件
- en: 'Since there are multiple projects in your directory structure (the web application,
    and two test projects), Azure won''t know which one to show to the world. To fix
    this, create a file called `.deployment` at the very top of your directory structure:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你的目录结构中有多个项目（Web应用程序和两个测试项目），Azure不知道应该向世界展示哪一个。为了解决这个问题，在你的目录结构的顶部创建一个名为`.deployment`的文件：
- en: '**`.deployment`**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**`.deployment`**'
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Make sure you save the file as `.deployment` with no other parts to the name.
    (On Windows, you may need to put quotes around the filename, like `".deployment"`,
    to prevent a `.txt` extension from being added.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将文件保存为`.deployment`，不要有其他部分的名称。（在Windows上，你可能需要在文件名周围加上引号，如`".deployment"`，以防止添加`.txt`扩展名。）
- en: 'If you `ls` or `dir` in your top-level directory, you should see these items:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在你的顶级目录中执行`ls`或`dir`命令，你应该看到这些项目：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Set up the Azure resources
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置Azure资源
- en: If you just installed the Azure CLI for the first time, run
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是第一次安装Azure CLI，请运行
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and follow the prompts to log in on your machine. Then, create a new Resource
    Group for this application:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 并按照提示在你的计算机上登录。然后，为该应用程序创建一个新的资源组：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This creates a Resource Group in the West US region. If you're located far away
    from the western US, use `az account list-locations` to get a list of locations
    and find one closer to you.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在西部美国地区创建一个资源组。如果你距离西部美国很远，请使用`az account list-locations`获取位置列表，并找到一个更靠近你的地方。
- en: 'Next, create an App Service plan in the group you just created:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在刚创建的组中创建一个应用服务计划：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Sidebar: `F1` is the free app plan. If you want to use a custom domain name
    with your app, use the D1 ($10/month) plan or higher.'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 侧边栏：`F1`是免费应用计划。如果你想要在应用程序中使用自定义域名，请使用D1（每月$10）计划或更高级别的计划。
- en: 'Now create a Web App in the App Service plan:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在应用服务计划中创建一个Web应用程序：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The name of the app (`MyTodoApp` above) must be globally unique in Azure. Once
    the app is created, it will have a default URL in the format: [http://mytodoapp.azurewebsites.net](http://mytodoapp.azurewebsites.net)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的名称（上面为`MyTodoApp`）在Azure中必须是全局唯一的。一旦应用程序创建完成，它将有一个默认的URL格式：[http://mytodoapp.azurewebsites.net](http://mytodoapp.azurewebsites.net)
- en: Update the application settings
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新应用程序设置
- en: 'Sidebar: This is only necessary if you configured Facebook login in the *Security
    and identity* chapter.'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 侧边栏：只有在*安全性和身份*章节中配置了Facebook登录时才需要这样做。
- en: 'Your application won''t start up properly if it''s missing the `Facebook:AppId`
    and `Facebook:AppSecret` configuration values. You''ll need to add these using
    the Azure web portal:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果缺少`Facebook:AppId`和`Facebook:AppSecret`配置值，你的应用程序将无法正确启动。你需要使用Azure Web门户添加这些值：
- en: Log in to your Azure account via [https://portal.azure.com](https://portal.azure.com)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过[https://portal.azure.com](https://portal.azure.com)登录到你的Azure账户
- en: Open your Web App (called `MyTodoApp` above)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的Web应用程序（上面称为`MyTodoApp`）
- en: Click on the **Application settings** tab
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**应用程序设置**选项卡
- en: Under the **App settings** section, add `Facebook:AppId` and `Facebook:AppSecret`
    with their respective values
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用设置**部分中，添加`Facebook:AppId`和`Facebook:AppSecret`及其相应的值
- en: Click **Save** at the top
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部的**保存**
- en: Deploy your project files to Azure
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将项目文件部署到Azure
- en: 'You can use Git to push your application files up to the Azure Web App. If
    your local directory isn''t already tracked as a Git repo, run these commands
    to set it up:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Git将应用程序文件推送到Azure Web应用程序。如果你的本地目录还没有被跟踪为Git仓库，请运行以下命令进行设置：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, create an Azure username and password for deployment:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为部署创建一个Azure用户名和密码：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Follow the instructions to create a password. Then use `config-local-git` to
    spit out a Git URL:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 按照说明创建一个密码。然后使用`config-local-git`输出一个Git URL：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Copy the URL to the clipboard, and use it to add a Git remote to your local
    repository:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将URL复制到剪贴板，并使用它添加一个Git远程到你的本地仓库：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You only need to do these steps once. Now, whenever you want to push your application
    files to Azure, check them in with Git and run
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要执行这些步骤一次。现在，每当你想要将应用程序文件推送到Azure时，请使用Git进行检入并运行
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You'll see a stream of log messages as the application is deployed to Azure.
    When it's complete, browse to [http://yourappname.azurewebsites.net](http://yourappname.azurewebsites.net)
    to check it out!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序部署到 Azure 时，您将看到一系列日志消息。完成后，请浏览 [http://yourappname.azurewebsites.net](http://yourappname.azurewebsites.net)
    查看！
- en: Deploy with Docker
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker 部署
- en: Deploy with Docker
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Docker 部署
- en: Containerization technologies like Docker can make it much easier to deploy
    web applications. Instead of spending time configuring a server with the dependencies
    it needs to run your app, copying files, and restarting processes, you can simply
    create a Docker image that contains everything your app needs to run, and spin
    it up as a container on any Docker host.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Docker 这样的容器化技术可以大大简化部署 Web 应用程序的过程。您不再需要花时间配置服务器以满足运行应用程序所需的依赖关系，复制文件并重新启动进程，您只需创建一个包含应用程序运行所需一切的
    Docker 镜像，并在任何 Docker 主机上将其作为容器启动。
- en: Docker can make scaling your app across multiple servers easier, too. Once you
    have an image, using it to create 1 container is the same process as creating
    100 containers.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 还可以使跨多个服务器扩展应用程序变得更加容易。一旦有了镜像，使用它创建 1 ��容器的过程与创建 100 个容器的过程相同。
- en: Before you start, you need the Docker CLI installed on your development machine.
    Search for "get docker for (mac/windows/linux)" and follow the instructions on
    the official Docker website. You can verify that it's installed correctly with
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，您需要在开发机器上安装 Docker CLI。搜索 "get docker for (mac/windows/linux)" 并按照官方 Docker
    网站上的说明进行操作。您可以通过以下方式验证是否正确安装：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you set up Facebook login in the *Security and identity* chapter, you'll
    need to use Docker secrets to securely set the Facebook app secret inside your
    container. Working with Docker secrets is outside the scope of this book. If you
    want, you can comment out the `AddFacebook` line in the `ConfigureServices` method
    to disable Facebook log in.
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果在 *安全性和身份* 章节中设置了 Facebook 登录，则需要使用 Docker secrets 在容器内部安全设置 Facebook 应用程序密钥。处理
    Docker secrets 超出了本书的范围。如果愿意，您可以在 `ConfigureServices` 方法中注释掉 `AddFacebook` 行以禁用
    Facebook 登录。
- en: Add a Dockerfile
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个 Dockerfile
- en: The first thing you'll need is a Dockerfile, which is like a recipe that tells
    Docker what your application needs.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要的第一件事是一个 Dockerfile，它类似于告诉 Docker 您的应用程序需要什么的配方。
- en: 'Create a file called `Dockerfile` (no extension) in the web application root,
    next to `Program.cs`. Open it in your favorite editor. Write the following line:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 应用程序根目录中创建一个名为 `Dockerfile`（无扩展名）的文件，与 `Program.cs` 并排。在您喜欢的编辑器中打开它。写入以下行：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This tells Docker to start your image from an existing image that Microsoft
    publishes. This will make sure the container has everything it needs to run an
    ASP.NET Core app.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉 Docker 从微软发布的现有镜像启动您的镜像。这将确保容器具有运行 ASP.NET Core 应用程序所需的一切。
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `COPY` command copies the contents of your local directory (the source code
    of your application) into a directory called `/app` in the Docker image.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`COPY` 命令将您本地目录的内容（应用程序的源代码）复制到 Docker 镜像中名为 `/app` 的目录中。'
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`WORKDIR` is the Docker equivalent of `cd`. The remainder of the commands in
    the Dockerfile will run from inside the `/app` folder.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`WORKDIR` 是 `cd` 的 Docker 等效命令。Dockerfile 中的其余命令将从 `/app` 文件夹内运行。'
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These commands will execute `dotnet restore` (which downloads the NuGet packages
    your application needs) and `dotnet build` (which compiles the application).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将执行 `dotnet restore`（下载应用程序所需的 NuGet 包）和 `dotnet build`（编译应用程序）。
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: By default, Docker containers don't expose any network ports to the outside
    world. You have to explicitly let Docker know that your app will be communicating
    on port 5000 (the default Kestrel port).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker 容器不会向外部世界公开任何网络端口。您必须明确告诉 Docker 您的应用程序将在端口 5000 上通信（默认的 Kestrel
    端口）。
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `ENV` command sets environment variables in the container. The `ASPNETCORE_URLS`
    variable tells ASP.NET Core which network interface and port it should bind to.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`ENV` 命令在容器中设置环境变量。`ASPNETCORE_URLS` 变量告诉 ASP.NET Core 应绑定到哪个网络接口和端口。'
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The last line of the Dockerfile starts up your application with the `dotnet
    run` command. Kestrel will start listening on port 5000, just like it does when
    you use `dotnet run` on your local machine.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile 的最后一行使用 `dotnet run` 命令启动您的应用程序。Kestrel 将开始监听端口 5000，就像在本地机器上使用 `dotnet
    run` 时一样。
- en: 'The full Dockerfile looks like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 Dockerfile 如下所示：
- en: '**`Dockerfile`**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Dockerfile`**'
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Create an image
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个镜像
- en: 'Make sure the Dockerfile is saved, and then use `docker build` to create an
    image:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 Dockerfile 已保存，然后使用 `docker build` 创建一个镜像：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Don't miss the trailing period! That tells Docker to look for a Dockerfile in
    the current directory.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记末尾的句点！这告诉 Docker 在当前目录中查找 Dockerfile。
- en: Once the image is created, you can run `docker images` to to list all the images
    available on your local machine. To test it out in a container, run
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完镜像后，您可以运行`docker images`来列出本地机器上所有可用的镜像。要在容器中测试它，运行
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `-it` flag tells Docker to run the container in interactive mode. When you
    want to stop the container, press `Control-C`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`-it` 标志告诉 Docker 以交互模式运行容器。当您想要停止容器时，按下`Control-C`。'
- en: Set up Nginx
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 Nginx
- en: At the beginning of this chapter, I mentioned that you should use a reverse
    proxy like Nginx to proxy requests to Kestrel. You can use Docker for this, too.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我提到您应该使用像 Nginx 这样的反向代理来代理请求到 Kestrel。您也可以使用 Docker 来实现这一点。
- en: 'The overall architecture will consist of two containers: an Nginx container
    listening on port 80, forwarding requests to a separate container running Kestrel
    and listening on port 5000.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 整体架构将包括两个容器：一个监听端口 80 的 Nginx 容器，将请求转发到运行 Kestrel 并监听端口 5000 的独立容器。
- en: 'The Nginx container needs its own Dockerfile. To keep it from colliding with
    the Dockerfile you just created, make a new directory in the web application root:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 容器需要自己的 Dockerfile。为了避免与刚刚创建的 Dockerfile 冲突，创建一个新目录在 Web 应用程序根目录中：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a new Dockerfile and add these lines:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 Dockerfile 并添加以下内容：
- en: '**`nginx/Dockerfile`**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**`nginx/Dockerfile`**'
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, create an `nginx.conf` file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个`nginx.conf`文件：
- en: '**`nginx/nginx.conf`**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**`nginx/nginx.conf`**'
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This configuration file tells Nginx to proxy incoming requests to `http://kestrel:5000`.
    (You'll see why `kestrel:5000` works in a moment.)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置文件告诉 Nginx 将传入的请求代理到`http://kestrel:5000`。（您很快就会明白为什么`kestrel:5000`有效。）
- en: Set up Docker Compose
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 Docker Compose
- en: 'There''s one more file to create. Up in the web application root directory,
    create `docker-compose.yml`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个文件需要创建。在 Web 应用程序根目录中，创建`docker-compose.yml`：
- en: '**`docker-compose.yml`**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**`docker-compose.yml`**'
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Docker Compose is a tool that helps you create and run multi-container applications.
    This configuration file defines two containers: `nginx` from the `./nginx/Dockerfile`
    recipe, and `kestrel` from the `./Dockerfile` recipe. The containers are explicitly
    linked together so they can communicate.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose 是一个帮助您创建和运行多容器应用程序的工具。这个配置文件定义了两个容器：从`./nginx/Dockerfile`配方创建的`nginx`，以及从`./Dockerfile`配方创建的`kestrel`。这些容器被明确地链接在一起，以便它们可以通信。
- en: 'You can try spinning up the entire multi-container application by running:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试通过运行以下命令来启动整个多容器应用程序：
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Try opening a browser and navigating to `http://localhost` (not 5000!). Nginx
    is listening on port 80 (the default HTTP port) and proxying requests to your
    ASP.NET Core application hosted by Kestrel.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试打开浏览器并导航到`http://localhost`（不是 5000！）。Nginx 在端口 80（默认 HTTP 端口）上监听，并将请求代理到由
    Kestrel 托管的 ASP.NET Core 应用程序。
- en: Set up a Docker server
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 Docker 服务器
- en: Specific setup instructions are outside the scope of this Little book, but any
    modern Linux distro (like Ubuntu) can be set up as a Docker host. For example,
    you could create a virtual machine with Amazon EC2, and install the Docker service.
    You can search for "amazon ec2 set up docker" (for example) for instructions.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 具体的设置说明超出了这本小书的范围，但任何现代 Linux 发行版（如 Ubuntu）都可以设置为 Docker 主机。例如，您可以在 Amazon EC2
    上创建一个虚拟机，并安装 Docker 服务。您可以搜索"amazon ec2 set up docker"（例如）以获取说明。
- en: I prefer DigitalOcean because they've made it really easy to get started. DigitalOcean
    has both a pre-built Docker virtual machine, and in-depth tutorials for getting
    Docker up and running (search for "digitalocean docker").
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢 DigitalOcean，因为他们让入门变得非常容易。DigitalOcean 既有预构建的 Docker 虚拟机，也有深入的教程来帮助您启动
    Docker（搜索"digitalocean docker"）。
