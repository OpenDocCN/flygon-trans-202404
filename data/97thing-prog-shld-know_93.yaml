- en: Write Code as If You Had to Support It for the Rest of Your Life
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写代码就像是你要支持它一辈子
- en: Write Code as If You Had to Support It for the Rest of Your Life
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写代码就像是你要支持它一辈子
- en: You could ask 97 people what every programmer should know and do, and you might
    hear back 97 distinct answers. This could be both overwhelming and intimidating
    at the same time. All advice is good, all principles are sound, and all stories
    are compelling, but where do you start? More important, once you have started,
    how do you keep up with all the best practices you've learned and how do you make
    them an integral part of your programming practice?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以问97个人，每个程序员都应该知道和做些什么，你可能会听到97个不同的答案。这既让人不知所措，又让人感到害怕。所有的建议都是好的，所有的原则都是正确的，所有的故事都是动人的，但你该从哪里开始呢？更重要的是，一旦你开始了，你如何跟上你学到的所有最佳实践，如何使它们成为你编程实践的一个组成部分呢？
- en: 'I think the answer lies in your frame of mind or, more plainly, in your attitude.
    If you don''t care about your fellow developers, testers, managers, sales and
    marketing people, and end users, then you will not be driven to employ Test-Driven
    Development or write clear comments in your code, for example. I think there is
    a simple way to adjust your attitude and always be driven to deliver the best
    quality products:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为答案在于你的心态，或者更直接地说，在于你的态度。如果你不在乎你的同行开发者、测试人员、经理、销售和市场人员以及最终用户，那么你就不会被驱使去采用测试驱动开发或在你的代码中写清晰的注释，例如。我认为有一种简单的方法可以调整你的态度，并始终被驱使交付最优质的产品：
- en: '*Write code as if you had to support it for the rest of your life.*'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*像是你要支持它一辈子一样写代码。*'
- en: That's it. If you accept this notion, many wonderful things will happen. If
    you were to accept that any of your previous or current employers had the right
    to call you in the middle of the night, asking you to explain the choices you
    made while writing the fooBar method, you would gradually improve toward becoming
    an expert programmer. You would naturally want to come up with better variable
    and method names. You would stay away from blocks of code comprising hundreds
    of lines. You would seek, learn, and use design patterns. You would write comments,
    test your code, and refactor continually. Supporting all the code you'd ever written
    for the rest of your life should also be a scalable endeavor. You would therefore
    have no choice but to become better, smarter, and more efficient.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。如果你接受了这个观念，会发生许多美好的事情。如果你接受你以前或现在的任何雇主都有权在半夜叫你起来，问你在写 fooBar 方法时做出的选择，你将逐渐成为一个专家程序员。你自然会想出更好的变量和方法名。你会远离包含数百行代码的代码块。你会寻找、学习并使用设计模式。你会写注释，测试你的代码，并不断重构。支持你写过的所有代码一辈子也应该是一项可扩展的工作。因此，你别无选择，只能变得更好、更聪明、更高效。
- en: If you reflect on it, the code you wrote many years ago still influences your
    career, whether you like it or not. You leave a trail of your knowledge, attitude,
    tenacity, professionalism, level of commitment, and degree of enjoyment with every
    method and class and module you design and write. People will form opinions about
    you based on the code that they see. If those opinions are constantly negative,
    you will get less from your career than you hoped. Take care of your career, of
    your clients, and of your users with every line of code — write code as if you
    had to support it for the rest of your life.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细思考一下，你多年前写的代码仍然会影响你的职业生涯，不管你喜不喜欢。你在设计和编写每个方法、类和模块时都留下了你的知识、态度、坚韧、专业精神、承诺程度和享受程度的痕迹。人们会根据他们看到的代码来形成对你的看法。如果这些看法总是消极的，你将得到比你希望的更少的职业发展。用心对待你的职业、你的客户和你的用户，用你写的每一行代码
    —— 像是你要支持它们一样写代码，直到你的余生。
- en: By [Yuriy Zubarev](http://programmer.97things.oreilly.com/wiki/index.php/Yuriy_Zubarev)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Yuriy Zubarev](http://programmer.97things.oreilly.com/wiki/index.php/Yuriy_Zubarev)提供
