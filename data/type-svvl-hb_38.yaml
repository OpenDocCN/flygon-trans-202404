- en: コンパニオンオブジェクトパターン
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: コンパニオンオブジェクトパターン
- en: 原文：[https://typescriptbook.jp/tips/companion-object](https://typescriptbook.jp/tips/companion-object)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/tips/companion-object](https://typescriptbook.jp/tips/companion-object)
- en: TypeScriptでは値と型に同名を与えてその両方を区別なく使うことができるテクニックがあります。これをコンパニオンオブジェクトと呼びます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScriptでは値と型に同名を与えてその両方を区別なく使うことができるテクニックがあります。これをコンパニオンオブジェクトと呼びます。
- en: これは、クラスを作るほどでもなけどそれっぽいファクトリーメソッドとオブジェクトが欲しいときに重宝します。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: これは、クラスを作るほどでもなけどそれっぽいファクトリーメソッドとオブジェクトが欲しいときに重宝します。
- en: コンパニオンオブジェクト (Companion Object)[​](#コンパニオンオブジェクト-companion-object "コンパニオンオブジェクト
    (Companion Object) への直接リンク")
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: コンパニオンオブジェクト (Companion Object)[​](#コンパニオンオブジェクト-companion-object "コンパニオンオブジェクト
    (Companion Object) への直接リンク")
- en: 次の例は長方形 (Rectangle) を作成するためのメソッド`from()`をもつオブジェクト`Rectangle`とその生成されるオブジェクトの型`Rectangle`です。これらの名称は衝突することなく定義ができ、外部から呼び出したときは同名で使用できます。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 次の例は長方形 (Rectangle) を作成するためのメソッド`from()`をもつオブジェクト`Rectangle`とその生成されるオブジェクトの型`Rectangle`です。これらの名称は衝突することなく定義ができ、外部から呼び出したときは同名で使用できます。
- en: 次の型と値 (ファクトリーメソッドを持つオブジェクト) は同じファイル`rectangle.ts`に存在するとします。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 次の型と値 (ファクトリーメソッドを持つオブジェクト) は同じファイル`rectangle.ts`に存在するとします。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 値も型も同名で定義します。これを外部から import してみます。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 値も型も同名で定義します。これを外部から import してみます。
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'このように import の部分は`Rectangle`のみとなり見通しもつきやすいという特徴があります。ちなみに`Rectangle.from()`のRectangleが値であり`const
    rec: Rectangle`のRectangleが型です。このようにTypeScriptでは同名の値と型を同時に使うことができます。'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 'このように import の部分は`Rectangle`のみとなり見通しもつきやすいという特徴があります。ちなみに`Rectangle.from()`のRectangleが値であり`const
    rec: Rectangle`のRectangleが型です。このようにTypeScriptでは同名の値と型を同時に使うことができます。'
