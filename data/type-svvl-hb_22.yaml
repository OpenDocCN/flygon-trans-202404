- en: Prettierでコード整形を自動化しよう
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[使用Prettier自动格式化代码](https://prettier.io/docs/en/options.html) '
- en: 原文：[https://typescriptbook.jp/tutorials/prettier](https://typescriptbook.jp/tutorials/prettier)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://typescriptbook.jp/tutorials/prettier](https://typescriptbook.jp/tutorials/prettier)
- en: このチュートリアルでは、コードフォーマッターの「Prettier」を使いTypeScriptのコードフォーマットを自動化することを学びます。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将使用代码格式化工具“Prettier”自动格式化TypeScript代码。
- en: 本章で学べること[​](#本章で学べること "本章で学べること への直接リンク")
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可以在本章学到以下内容：
- en: 本章ではPrettierを導入してコード整形を自動化することを目標に次のことを学びます。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章目标是引入Prettier并自动格式化代码。
- en: Prettierの導入方法
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Prettier的方法
- en: Prettierの実行方法
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prettier的执行方法
- en: 整形ルールの設定方法
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置格式规则的方法
- en: Prettierとは[​](#prettierとは "Prettierとは への直接リンク")
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解Prettier[​](#了解prettier "直达了解Prettier")
- en: Prettierはコードのフォーマットを自動整形するツールです。Prettierがサポートしている形式は幅広く次の形式をサポートしています。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier是一款自动格式化代码的工具。Prettier支持的格式广泛，包括但不限于以下格式。
- en: また、プラグインを利用することでPHPなどの他の言語のフォーマットを行うこともできます。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您也可以使用插件来格式化其他语言，如PHP等。
- en: JavaScript
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript
- en: TypeScript
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript
- en: '[JSX](/reference/jsx)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JSX](/reference/jsx)'
- en: Flow
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flow
- en: JSON
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON
- en: HTML
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML
- en: Vue
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue
- en: Angular
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular
- en: Ember
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember
- en: Css
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Css
- en: Less
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Less
- en: SCSS
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SCSS
- en: styled-components
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: styled-components
- en: styled-jsx
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: styled-jsx
- en: GraphQL
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL
- en: Markdown
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Markdown
- en: MDX
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MDX
- en: YAML
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML
- en: Svelte
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Svelte
- en: なぜPrettierを導入するのか[​](#なぜprettierを導入するのか "なぜPrettierを導入するのか への直接リンク")
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要引入Prettier[​](#为什么要引入prettier "直达为什么要引入Prettier")
- en: 複数人で開発していると、人によってインデントがズレていたり、オブジェクトの最後のカンマをつけるorつけないといったコードスタイルの違いが発生します。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队开发中，不同的开发者会产生缩进不一致、对象末尾是否加逗号等代码风格的差异。
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'ts`// オブジェクトの最後にカンマが付いている// 文字列はダブルクォート// 行末にセミコロンが付いているconst  user1  = { name:  "太郎",
    age:  20,};``// オブジェクトの最後にカンマが付かない// 文字列はシングルクォート// 行末にセミコロンが付かないconst  user2  =
    { name:  ''まさる'', age:  30}`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'ts`// 末尾带逗号的对象// 字符串使用双引号// 行尾没有分号const  user1  = { name:  "太郎", age:  20,};``//
    末尾不带逗号的对象// 字符串使用单引号// 行尾没有分号const  user2  = { name:  ''まさる'', age:  30}`'
- en: 手動でこれらのコードスタイルを統一するには、ガイドラインを作成してチーム内で共有をしてコードレビューで注意深くチェックする必要があります。また、新しいメンバーがチームに参加した際にはルールを共有する手間も発生します。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要手动统一这些代码风格，您需要创建指导方针，并在团队内共享，并在代码审查中仔细检查。另外，当新成员加入团队时，还需要共享规则。
- en: Prettierを導入してコード整形を自動化することで、簡単にコードのスタイルを統一することができます。開発者は細かいコードスタイルのことを意識する必要がなくなり開発に集中することができるようになるので、より効率的に開発をすることができます。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 引入Prettier并自动格式化代码后，您可以轻松统一代码风格。开发人员无需关注细节的代码样式，可以更专注于开发，从而提高开发效率。
- en: このチュートリアルに必要なもの[​](#このチュートリアルに必要なもの "このチュートリアルに必要なもの への直接リンク")
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本教程所需内容[​](#本教程所需内容 "直达本教程所需内容")
- en: このチュートリアルで必要なものは次のとおりです。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程所需内容如下：
- en: Node.js v16以上
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要Node.js v16或更高版本
- en: Yarn v1系 (このチュートリアルはv1.22.19で動作確認しています)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Yarn v1.x（本教程在v1.22.19上测试通过）
- en: Node.jsの導入については、[開発環境の準備](/tutorials/setup)をご覧ください。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何安装Node.js，请参阅[准备开发环境](/tutorials/setup)。
- en: パッケージ管理ツールとしてYarnを利用します。最初にインストールをしておきましょう。すでにインストール済みの方はここのステップはスキップして大丈夫です。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Yarn作为包管理工具。首先进行安装。如果您已经安装过，请跳过此步骤。
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: プロジェクトを作成する[​](#プロジェクトを作成する "プロジェクトを作成する への直接リンク")
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目[​](#创建项目 "直达创建项目")
- en: このチュートリアルに使うプロジェクトを作成します。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用于本教程的项目。
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: プロジェクトのルートにpackage.jsonを作成してください。内容は次のようにします。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目根目录下创建`package.json`文件，内容如下：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Prettierをインストール[​](#prettierをインストール "Prettierをインストール への直接リンク")
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Prettier[​](#安装prettier "直达安装Prettier")
- en: Prettierは開発時にだけ使うパッケージなので`-D`オプションをつけてインストールします。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier仅在开发时使用，因此请使用`-D`选项进行安装。
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: バージョンを表示してインストールを確認してください。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 检查版本并确认安装。
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: TypeScriptを自動整形する[​](#typescriptを自動整形する "TypeScriptを自動整形する への直接リンク")
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动格式化TypeScript[​](#自动格式化typescript "直达自动格式化TypeScript")
- en: '`prettier`コマンドを利用して、TypeScriptのファイルをPrettierで自動整形してみましょう。'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`prettier`命令，自动格式化TypeScript文件。
- en: 最初に`src`ディレクトリを作成して、`src/helloWorld.ts`を作成してください。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建`src`目录，并创建`src/helloWorld.ts`。
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`helloWorld.ts`の内容を次のように変更します。'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将`helloWorld.ts`的内容更改为以下内容。
- en: このコードは自動整形を確認するために、わざと見づらいコードになっています。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码被故意编写得难以阅读，以便进行自动格式化的确认。
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`prettier`コマンドを実行してみましょう。'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行`prettier`命令。
- en: コマンドは`prettier [オプション] [ファイル/ディレクトリ]`の形式で実行できます。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 命令格式为`prettier [options] [file/directory]`。
- en: 次の例では`src`を引数で指定することで`src`ディレクトリ配下のすべてファイルを対象として自動整形を実行します。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将自动格式化`src`目录下的所有文件。
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 整形結果が表示されていますが、`helloWorld.ts`を確認するとファイル内容が変更されていないことに気づくと思います。`prettier`コマンドをオプションなしで実行した場合は整形結果だけが表示されて、ファイルの書き換えは実行されません。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然显示了格式化结果，但是您会注意到`helloWorld.ts`未更改。如果在不带选项的情况下运行`prettier`命令，则仅会显示格式化结果，不会进行文件重写。
- en: ファイルの書き換えを一緒に実行する場合は`--write`オプションを指定します。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要同时执行文件重写，请使用`--write`选项。
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 実行後に`helloWorld.ts`を確認してみると、次のようにコードが整形されているのが確認できます。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，您可以检查`helloWorld.ts`，您会发现代码已经被格式化了。
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Prettierのデフォルトの整形ルール[​](#prettierのデフォルトの整形ルール "Prettierのデフォルトの整形ルール への直接リンク")
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Prettier的默认格式规则[​](#prettier的默认格式规则 "直达Prettier的默认格式规则")
- en: Prettierはデフォルトの整形ルールが定義されています。先ほどの実行結果を見るとインデントが幅2つのスペースでインデントがされているのが分かります。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier有默认的格式规则。从上述执行结果中可以看出，缩进是两个空格。
- en: 代表的な項目のデフォルト値は次のようになっています。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一些典型项目的默认值如下：
- en: すべての項目のデフォルト値を確認したい場合は、[Prettierの公式ドキュメント](https://prettier.io/docs/en/options.html)を参照してください。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看所有项目的默认值，请参阅[Prettier官方文档](https://prettier.io/docs/en/options.html)。
- en: '| 項目 | デフォルト値 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 项目 | 默认值 |'
- en: '| --- | --- |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1行の最大文字数 | 80 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 单行最大字符数 | 80 |'
- en: '| インデント幅 | 2 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 缩进宽度 | 2 |'
- en: '| インデント | スペース |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 缩进 | 空格 |'
- en: '| セミコロン | つける |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 分号 | 添加 |'
- en: '| クォート | ダブルクォート |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 引号 | 双引号 |'
- en: Prettierの整形ルールを設定する[​](#prettierの整形ルールを設定する "Prettierの整形ルールを設定する への直接リンク")
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Prettier的格式规则[​](#prettier的整形规则设置 "直达Prettier的整形规则设置")
- en: CLIオプションで設定[​](#cliオプションで設定 "CLIオプションで設定 への直接リンク")
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用CLI选项进行设置[​](#cli选项进行设置 "直达CLI选项进行设置")
- en: 整形ルールは`prettier`コマンドを実行する時にオプションとして指定することができます。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 格式规则可以在执行`prettier`命令时作为选项指定。
- en: 先ほど整形した`helloWorld.ts`を別の整形ルールで整形してみます。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用另一组格式规则对之前格式化的`helloWorld.ts`进行格式化。
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 整形されたコードを見るとセミコロンが消えて、インデント幅が2から4に変更されているのを確認できます。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 检查格式化后的代码，您会发现分号消失了，缩进从2改为4。
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 設定ファイルを作成する[​](#設定ファイルを作成する "設定ファイルを作成する への直接リンク")
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建配置文件[​](#設定ファイルを作成する "直接链接到创建配置文件")
- en: Prettierは整形ルールを設定ファイルに記述することもできます。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier也可以将格式化规则写入配置文件中。
- en: プロジェクトのルートに`.prettierrc`を作成します。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目根目录下创建`.prettierrc`。
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 次に`.prettierrc`を次のように変更します。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`.prettierrc`修改如下。
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 設定ファイルが作成できたら、`prettier`コマンドを実行してみましょう。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 创建配置文件后，尝试运行`prettier`命令。
- en: Prettierはプロジェクトルートに`.prettierrc`が存在する場合は自動で設定ファイルを読み込んで整形ルールを設定してくれます。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果项目根目录中存在`.prettierrc`，Prettier会自动加载配置文件并设置格式化规则。
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 設定ファイルで記述した整形ルールで`helloWorld.ts`が変更されているのを確認できます。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过配置文件中描述的格式化规则，查看`helloWorld.ts`的变化。
- en: '[PRE31]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 上記の例ではJSONフォーマットで設定ファイルを作成しましたが、PrettierはJSON以外にもJS,YAML,TOMLのフォーマットをサポートしています。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们使用JSON格式创建了配置文件，但是Prettier还支持JS、YAML、TOML等格式。
- en: '[PRE33]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`.prettierrc`以外でも自動で設定ファイルとして認識可能なファイル名がいくつか存在します。'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`.prettierrc`，还有一些其他文件名也可以被自动识别为配置文件。
- en: フォーマットとファイル名の組み合わせは次のとおりです。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 格式和文件名的组合如下：
- en: '| フォーマット | ファイル名 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 格式 | 文件名 |'
- en: '| :-- | :-- |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- |'
- en: '| json | `.prettierrc`, `.prettierrc.json`, `.prettierrc.json5` |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| json | `.prettierrc`, `.prettierrc.json`, `.prettierrc.json5` |'
- en: '| js | `.prettierrc.js`, `.prettierrc.cjs`, `prettier.config.js`,   `prettier.config.cjs`
    |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| js | `.prettierrc.js`, `.prettierrc.cjs`, `prettier.config.js`,   `prettier.config.cjs`
    |'
- en: '| yaml | `.prettierrc`, `.prettierrc.yml`, `.prettierrc.yaml` |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| yaml | `.prettierrc`, `.prettierrc.yml`, `.prettierrc.yaml` |'
- en: '| toml | `.prettierrc.toml` |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| toml | `.prettierrc.toml` |'
- en: 他の整形ルールを確認する[​](#他の整形ルールを確認する "他の整形ルールを確認する への直接リンク")
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看其他格式化规则[​](#他の整形ルールを確認する "直接链接到查看其他格式化规则")
- en: ここで紹介した以外にもいくつかの整形ルールが存在します。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这里介绍的，还有一些其他的格式化规则。
- en: 他の整形ルールやCLIコマンドのオプション名、設定ファイルのキー名などを確認したい場合は[Prettierの公式ドキュメント](https://prettier.io/docs/en/options.html)をご参照ください。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要查看其他格式化规则、CLI命令选项名称、配置文件键名等，请参考[Prettier的官方文档](https://prettier.io/docs/en/options.html)。
- en: どのような整形ルールがよいのか？[​](#どのような整形ルールがよいのか "どのような整形ルールがよいのか？ への直接リンク")
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么样的格式化规则是最好的？[​](#どのような整形ルールがよいのか "直接链接到什么样的格式化规则是最好的？")
- en: Prettierをプロジェクトに導入する時に整形ルールについて悩む場合があるかもしれません。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将Prettier引入项目时，可能会对格式化规则感到困惑。
- en: 整形ルールについては好みの部分も大きいので、プロジェクトの開発者で話し合って決めるようにしましょう。整形ルールを変更したい場合は`prettier`コマンドを実行するだけなので、後から簡単に変更できる前提で決めてしまっても問題ありません。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 由于格式化规则很大程度上取决于个人喜好，建议项目开发者们进行讨论并做出决定。如果想要更改格式化规则，只需运行`prettier`命令即可，因此事后更改也很容易。
- en: 特にこだわりが無い場合は、Prettierのデフォルトの整形ルールをそのまま利用するのがオススメです。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有特别偏好，建议直接使用Prettier的默认格式化规则。
- en: Prettierの自動整形を無効にする[​](#prettierの自動整形を無効にする "Prettierの自動整形を無効にする への直接リンク")
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用Prettier的自动格式化[​](#prettierの自動整形を無効にする "直接链接到禁用Prettier的自动格式化")
- en: '`prettier-ignore`をコメントとして記述することで、一部のコードをPrettierの自動整形の対象から除外することができます。'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在代码中添加`prettier-ignore`注释，可以排除部分代码不受Prettier的自动格式化影响。
- en: '[PRE39]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
