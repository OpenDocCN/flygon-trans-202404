- en: Web and Database Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web 和数据库编程
- en: May 15, 2014 - CS240H
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2014年5月15日 - CS240H
- en: Before we start…
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们开始之前…
- en: 'If you want to follow along on your laptop towards the end:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在笔记本电脑上跟进到最后：
- en: 'For ghc-7.6:'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 ghc-7.6：
- en: '[PRE0]'
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For ghc-7.8
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 ghc-7.8
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You’ll also need to have PostgreSQL installed
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要安装 PostgreSQL
- en: Agenda
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 议程
- en: Intro/motivation
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简介/动机
- en: Modeling a web application in Haskell
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Haskell 中建模 Web 应用程序
- en: Build a content management system
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建内容管理系统
- en: Why should you care about web programming?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么你应该关心 Web 编程？
- en: The WWW is starting to get *pretty* popular
  id: totrans-14
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网开始变得 *非常* 流行
- en: If you building something, there’s a good chance you’ll deploy as a web app
    the internet
  id: totrans-15
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在构建某些东西，很有可能你会将其部署为一个互联网 Web 应用程序
- en: Even if your application doesn’t seem very “webby”
  id: totrans-16
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使你的应用程序看起来不太“网页化”
- en: HTTP becoming prevelent general-purpose protocol for APIs (both internal and
    external)
  id: totrans-17
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP 正在成为普遍的通用协议，用于 API（内部和外部）
- en: Good client support
  id: totrans-18
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 良好的客户端支持
- en: Good server-side support (frameworks, SSL, virtual domains…)
  id: totrans-19
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 良好的服务器端支持（框架、SSL、虚拟域等）
- en: Easy to “sell” to management
  id: totrans-20
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于“向管理层推销”
- en: How do you people write a web app?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人们如何编写 Web 应用程序？
- en: Actually, that depends…
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际上，这取决于…
- en: A busy space of frameworks
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个繁忙的框架空间
- en: Used to be dominated by Java
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 曾经被 Java 主导
- en: terms like “Java Servlet Container”, “J2EE”, “Enterprise Java Beans”, “POJO”
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像“Java Servlet Container”、“J2EE”、“Enterprise Java Beans”、“POJO”这样的术语
- en: everybody had a really bad experience with that in the late 90s/early 2Ks
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人在90年代末/21世纪初都有一个非常糟糕的经历
- en: Java is still the primary server-side language for, e.g. Google, Amazon
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 仍然是主要的服务器端语言，例如 Google、Amazon
- en: The cool kids are mostly using dynamic languages
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 酷炫的孩子们大多在使用动态语言
- en: Ruby/Ruby on Rails/Sinatra
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ruby/Ruby on Rails/Sinatra
- en: Python/Django
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python/Django
- en: node.js/express
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: node.js/express
- en: PHP
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP
- en: etc…
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等…
- en: Web Programming - Most Popular Language Today?
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web 编程 - 今天最流行的语言？
- en: . . .
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: . . .
- en: But why dynamic languages?
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但为什么要使用动态语言？
- en: But why dynamic languages?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但为什么要使用动态语言？
- en: Less verbose
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更简洁
- en: e.g. no type declerations
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如没有类型声明
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: vs
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对比
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: But why dynamic languages?
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但为什么要使用动态语言？
- en: Advanced features
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级特性
- en: like closures
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 像闭包一样
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: vs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对比。
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: But why dynamic languages?
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但为什么要使用动态语言？
- en: Other less compelling reasons
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他不太具有说服力的原因
- en: Fast development and prototyping
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速开发和原型设计
- en: Dynamic language GOOD because *dynamic* web sites!
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态语言好因为 *动态* 网站！
- en: “When rendering web pages, often you have very many components interacting on
    a web page. You have buttons over here and little widgets over there and there
    are dozens of them on a webpage, as well as possibly dozens or hundreds of web
    pages on your website that are all **dynamic**. […] using a statically typed language
    is actually quite inflexible. […] like the whole system has to type check just
    to be able to move a button around”
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “在渲染网页时，通常会有很多组件在网页上进行交互。你在这里有按钮，在那里有小部件，在一个网页上可能有几十个，甚至可能有几十个或上百个网页在你的网站上，它们都是
    **动态** 的。[…] 使用静态类型语言实际上是相当不灵活的。[…] 就像整个系统必须进行类型检查才能移动一个按钮一样”
- en: '- Nick Kallen from Twitter'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 来自 Twitter 的 Nick Kallen'
- en: Is it really about dynamism?
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这真的是关于动态性吗？
- en: No type declerations (but still typed)
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 没有类型声明（但仍然有类型）
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Closures
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 闭包
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A lot of the arguments are really about weaknesses in Java et al.
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 很多论点实际上都是关于 Java 等语言的弱点。
- en: Modeling a web application in Haskell
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Haskell 中建模 Web 应用程序
- en: 'Claim: a web application does three things:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声称：一个 Web 应用程序做三件事：
- en: parses a request from the client
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析来自客户端的请求
- en: performs some side effects (e.g. reading/writing to a database)
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行一些副作用（例如读取/写入数据库）
- en: generates some response for the client
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为客户端生成一些响应
- en: 'Given the following two types:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定以下两种类型：
- en: '[PRE8]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Fill in the type for an `Application`:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 `Application` 填写类型：
- en: '[PRE9]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Boilerplate code: [http://cs240h.scs.stanford.edu/Application.hs](Application.hs)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 模板代码：[http://cs240h.scs.stanford.edu/Application.hs](Application.hs)
- en: Modeling a web application in Haskell
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Haskell 中建模 Web 应用程序
- en: '[PRE10]haskell data Request = Request {pathInfo :: [String], requestMethod
    :: Method, ...} data Response = Response Status [Header] String type Application
    = Request -> IO Response [PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE10]haskell 数据 Request = Request {pathInfo :: [String], requestMethod ::
    Method, ...} 数据 Response = Response Status [Header] String 类型 Application = Request
    -> IO Response [PRE11]'
- en: We’ve just implemented the WAI package – “Web Application Interface”!
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们刚刚实现了 WAI 包 - “Web Application Interface”！
- en: The WAI package
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WAI 包
- en: Common interface between servers and applications so you can mix-and-match
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器和应用程序之间的通用接口，这样你可以混合和匹配
- en: 'Servers:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器：
- en: warp
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: warp
- en: FastCGI
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: FastCGI
- en: wai-handler-devel (for development)
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: wai-handler-devel（用于开发）
- en: 'App frameworks:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用框架：
- en: Yesod
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yesod
- en: Scotty
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scotty
- en: Hails (shameless plug)
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hails（厚颜无耻的插播）
- en: Simple (shameless plug)
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单（厚颜无耻的宣传）
- en: Others through adapters
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他通过适配器
- en: The WAI package
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WAI 包
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: A really simple application
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个真正简单的应用程序
- en: Let’s build the simplest application that displays something in a browser
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建最简单的应用程序，在浏览器中显示一些内容
- en: 'First install `wai` and `warp`:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先安装 `wai` 和 `warp`：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Finally, build the app!
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，构建应用程序！
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Demo Time!
  id: totrans-94
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演示时间！
- en: Let’s build a CMS!
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们构建一个 CMS！
- en: (Very) quick intro to *Simple*
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （非常）快速介绍 *Simple*
- en: (Very) quick intro to *postgresql-orm*
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （非常）快速介绍 *postgresql-orm*
- en: Write some code
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写一些代码
- en: '*Simple* - a web framework in Haskell'
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*Simple* - 一个 Haskell 的 Web 框架'
- en: '*Simple* is a web framework with one type:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*Simple* 是一个只有一个类型的 Web 框架：'
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Very small wrapper around WAI’s `Application` type
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常小的 WAI `Application` 类型的包装器
- en: Let’s us refer to the `Request` anywhere without passing it around
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们在任何地方引用 `Request` 而不需要传递它
- en: Let’s us refer to some application state anywhere without passing it around
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们在任何地方引用一些应用程序状态而不需要传递它
- en: Let’s us decide we’re ready to respond and stop computing
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们决定我们已经准备好响应并停止计算
- en: Some *Simple* combinators
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些 *Simple* 组合器
- en: 'Stop computing and respond to a request:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止计算并响应请求：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Get the request and app state:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取请求和应用程序状态：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Parse query and form parameters:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析查询和表单参数：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Some *Simple* combinators
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些 *Simple* 组合器
- en: 'Routing combinators:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由组合器：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Higher-level *Simple* combinators
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更高级别的 *Simple* 组合器
- en: 'Common case is to match on method and a particular path pattern:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 常见情况是匹配方法和特定路径模式：
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'So a typical small app might look like:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一个典型的小应用程序可能如下所示：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: PostgreSQL ORM
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL ORM
- en: Object relational mapper (ORM)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象关系映射器（ORM）
- en: maps from native types to SQL
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从本地类型映射到 SQL
- en: In our case maps to PostgreSQL flavored SQL
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的情况下，映射到 PostgreSQL 风格的 SQL
- en: 'Haskell types must be of the form:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Haskell 类型必须是这种形式：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Instances of the `Model` class:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Model` 类的实例：'
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: PostgreSQL ORM
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL ORM
- en: If the `Model` derives `Generic` we don’t need to write an implementation
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `Model` 派生自 `Generic`，我们就不需要编写实现
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This gives us access to:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这使我们可以访问：
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Because we’re in Haskell, let’s us avoid a bunch of edge cases:'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为我们在 Haskell 中，让我们避免一堆边缘情况：
- en: Fields cannot be null (unless they are a `Maybe`)
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段不能为 null（除非它们是 `Maybe`）
- en: Fields cannot be different types (unless they are an `Either`)
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段不能是不同类型的（除非它们是 `Either`）
- en: Validation because redundant in many cases
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证在许多情况下是多余的
- en: 'OK, let’s get to coding:'
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 好的，让我们开始编码：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
