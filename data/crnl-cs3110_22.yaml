- en: 'Recitation 14: Async Programming'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14节：异步编程
- en: In the last lecture, we saw some simple examples of programming with deferred
    computations in `async`. In this recitation, we will implement a simple echo server
    using `async` and *pipes*. We will also briefly discuss exception handling in
    `async`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节课中，我们看到了一些在`async`中使用延迟计算的简单示例。在这次课上，我们将使用`async`和*管道*实现一个简单的回声服务器。我们还将简要讨论`async`中的异常处理。
- en: Pipes
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道
- en: 'Many programs have one component that produces some data and another component
    that consumes it. This idiom is sometimes called the *producer-consumer* pattern.
    A simple way to implement the producers and consumers is to keep them in lock
    step: whenever the producer generates an item, control is passed to the consumer
    which processes it, and finally returns control back to the producer. However,
    this is not very efficient, especially if not all items take the same amount of
    time to produce and consume.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 许多程序都有一个产生数据的组件和另一个消耗数据的组件。这种习惯用语有时被称为*生产者-消费者*模式。实现生产者和消费者的一种简单方法是保持它们同步：每当生产者生成一个项目时，控制权就会传递给消费者处理它，最后再将控制权返回给生产者。然而，这种方法效率不高，特别是如果不是所有的项目都需要相同的时间来生产和消费。
- en: 'Another different way to implement producers and consumers is to use a FIFO
    *pipe*. The producer generates data items and writes them into the pipe, and the
    consumer reads items from the pipe. Importantly, the pipe can contain many items,
    so the producer and consumer need not proceed in lock step. The `async` [Pipe](https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std.Pipe)
    module includes functions for creating and manipulating pipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种实现生产者和消费者的不同方法是使用 FIFO *管道*。生产者生成数据项并将其写入管道，消费者从管道中读取项。重要的是，管道可以包含许多项，因此生产者和消费者不需要同步进行。`async`
    [Pipe](https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/async/#Std.Pipe)
    模块包括用于创建和操作管道的函数：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Recall that the type `[ `Eof | `Ok of ''a]` is a *polymorphic variant*. For
    the purposes of this course, it can be treated as an ordinary datatype (whose
    constructors are prefixed with the backtick symbol, "`"). The Pipe module also
    includes other useful functions for closing the endpoints of a pipe and for mapping,
    filtering, and transferring pipe contents include:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，类型`[`Eof | `Ok of 'a]`是一种*多态变体*。在本课程中，它可以被视为一种普通的数据类型（其构造函数前缀为反引号符号“`”）。Pipe
    模块还包括其他有用的函数，用于关闭管道的端点以及映射、过滤和传输管道内容，包括：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The notation `f:('a -> b)` used in `map` and other functions is a *labled parameter*.
    To invoke a function with a labeled parameter, use the syntax `~f:(fun x -> x)`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在`map`和其他函数中使用的`f:('a -> b)`表示的是一个*标记参数*。要调用带有标记参数的函数，请使用语法`~f:(fun x -> x)`。
- en: 'Here is a simple example demonstrating how to move data across a pipe:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的示例演示了如何在管道中传输数据：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that the `write` returns a deferred unit that eventually becomes determined.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`write`返回一个最终确定的延迟单元。
- en: As a more substantial example, the following program implements an echo server
    (code adapted from [Real World OCaml](https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个更实质性的示例，以下程序实现了一个回声服务器（代码改编自[Real World OCaml](https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html)）。
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ocamlbuild -use-ocamlfind -pkg core -pkg async -tag thread server.byte
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ocamlbuild -use-ocamlfind -pkg core -pkg async -tag thread server.byte
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ./server.byte
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ./server.byte
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: cs3110 compile -t -p async server
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: cs3110 编译 -t -p async server
- en: cs3110 run server
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: cs3110 运行服务器
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '% telnet localhost 3110'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '% telnet localhost 3110'
- en: Trying 127.0.0.1...
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试 127.0.0.1...
- en: Connected to localhost.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到本地主机。
- en: Escape character is '^]'.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 转义字符是'^]'。
- en: Hello
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你好
- en: Hello
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你好
- en: World
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 世界
- en: World
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 世界
- en: Zardoz
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Zardoz
- en: Zardoz
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Zardoz
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'val try_with : (unit -> ''a Deferred.t) -> [`Ok of ''a | `Err of exn] Deferred.t'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: val try_with：(unit -> 'a Deferred.t) -> [`Ok of 'a | `Err of exn] Deferred.t
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
