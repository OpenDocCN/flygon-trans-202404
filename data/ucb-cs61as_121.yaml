- en: Example - Infinite Streams of Pairs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 - 无限对流
- en: 'Suppose we want to produce an infinite stream containing pairs of integers
    [mathjaxinline] (i, j) [/mathjaxinline] where [mathjaxinline]i \leq j[/mathjaxinline]
    and [mathjaxinline]i + j[/mathjaxinline] is prime. If `int-pairs` is the stream
    of pairs of all integers, our stream is:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要生成一个包含整数对[i, j]的无限流，其中i≤j且i + j是素数。如果`int-pairs`是所有整数对的流，我们的流是：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now all we have to do is define `int-pairs`. How do we do that? Let''s start
    by supposing that we have two streams, [mathjaxinline]S[/mathjaxinline] and [mathjaxinline]T[/mathjaxinline],
    which are both equivalent to `integers`. Now let''s imagine the array (or matrix,
    if you want to think of it that way) of pairs of [mathjaxinline]S[/mathjaxinline]
    and [mathjaxinline]T[/mathjaxinline]:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要定义`int-pairs`。我们该如何做呢？让我们假设我们有两个等同于`integers`的流[S]和[T]。现在让我们想象一下[S]和[T]的整数对数组（或矩阵，如果你想这样考虑的话）：
- en: '![](../Images/69a4180dd536dcfa0479b74fc01cd99f.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/69a4180dd536dcfa0479b74fc01cd99f.jpg)'
- en: 'The stream of pairs of integers is everything above the diagonal:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 整数对的流是对角线上方的所有内容：
- en: '![](../Images/bbfd42bec6190b3c92380777ded52152.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bbfd42bec6190b3c92380777ded52152.jpg)'
- en: 'Let''s call the general stream of pairs `(pairs s t)`, and consider it to be
    composed of three parts: the pair [mathjaxinline] (S_0, T_0) [/mathjaxinline],
    the rest of the pairs in the first row, and the remaining pairs.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们称一般的整数对流为`(pairs s t)`，并将其视为由三部分组成：对[S0, T0]，第一行中其余的对，以及剩余的对。
- en: '![](../Images/57c83d75e5f1c2494e71bd4ade2fdb90.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/57c83d75e5f1c2494e71bd4ade2fdb90.jpg)'
- en: 'The third piece in this decomposition (pairs that are not in the first row)
    is (recursively) the pairs formed from `(stream-cdr s)` and `(stream-cdr t)`.
    Also note that the second piece (the rest of the first row) is:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个分解中的第三部分（不在第一行的对）是由`(stream-cdr s)`和`(stream-cdr t)`形成的对（递归）。还要注意第二部分（第一行的其余部分）是：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then our stream of pairs is:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们的整数对流就是：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we just need to put the streams together using some sort of `combine` function.
    We know that appending doesn''t work—let''s use `interleave` instead! Our stream
    of pairs becomes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要使用某种`combine`函数将这些流组合在一起。我们知道追加不起作用，让我们使用`interleave`代替！我们的对流变成了：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
