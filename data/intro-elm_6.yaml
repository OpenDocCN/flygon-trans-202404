- en: Interop
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互操作性
- en: Interop
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互操作性
- en: Interop is extraordinarily important if you want your language to succeed!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让你的语言成功，互操作性就非常重要！
- en: This is just a historical fact. A huge part of why C++ was so successful was
    that it was easy to migrate a massive C codebase. If you look at the JVM, you
    see Scala and Clojure carving out pretty big niches for themselves thanks to their
    nice interop story with Java. For industrial users, there is no point in having
    an amazing language with great guarantees if there is no way to slowly introduce
    it into an existing codebase. It is exactly the same in browsers too.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个历史事实。C++之所以如此成功的一个巨大原因是它很容易迁移大规模的C代码库。如果你看看JVM，你会发现Scala和Clojure在与Java良好互操作性的情况下正在创造相当大的市场。对于工业用户来说，如果没有一种将令人惊叹的语言和出色的保证引入到现有代码库的方法，那就没有意义。在浏览器中也是如此。
- en: This section focuses on the major kinds of interop that you need when working
    in browsers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本节重点介绍在浏览器中工作时需要的主要互操作性。
- en: How to communicate with external services using JSON.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用JSON与外部服务进行通信。
- en: How to embed Elm programs in existing HTML or React apps.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将Elm程序嵌入到现有的HTML或React应用程序中。
- en: How to communicate with existing JavaScript code.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何与现有的JavaScript代码进行通信。
- en: Each of these types of interop are guided by the self-imposed constraints that
    (1) there must be a clear way to introduce Elm gradually into diverse environments
    and (2) Elm should not have to sacrifice its core design principles. In other
    words, **Elm should be great *and* it should be possible to use Elm at work.**
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的互操作性都受到自我强加的约束的指导，即（1）必须有一种明确的方法可以将Elm逐渐引入各种不同的环境中，以及（2）Elm不应该不得不牺牲其核心设计原则。换句话说，**Elm应该是伟大的*而且*在工作中使用Elm应该是可能的。**
- en: Advice on Introducing Elm
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入Elm的建议
- en: The correct path is to first use Elm in a small experiment. If the experiment
    goes bad, stop it! If it goes great, expand the experiment a bit more. Then just
    repeat this process until you are using Elm or not! History seems to suggest that
    there is no realistic way to translate an existing project into a new language
    all at once. You have to evolve gradually!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的路径是首先在一个小实验中使用Elm。如果实验失败了，就停止它！如果成功了，就再扩展一点实验。然后只需重复这个过程，直到你使用Elm或不使用！历史似乎表明，没有一种现实的方式可以一次性将现有项目转换为新语言。你必须逐渐发展！
- en: Every company I know of that introduced Elm into an existing codebase did it
    gradually. You need to make sure it is worth it. You probably need to do some
    pairing or mentorship to get your teammates comfortable. You may even want to
    use React as a stepping stone if you are on something before that. Basically,
    anything you can do to minimize risk and make the process feel gradual will improve
    your odds. Now none of this is as fun as just switching, but it has the great
    benefit of actually working out in practice.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我所知道的每家公司在现有代码库中引入Elm时都是逐渐进行的。你需要确保这是值得的。你可能需要做一些配对或指导工作，让你的团队成员感到舒适。如果你在那之前使用React，甚至可能会想要使用它作为一个过渡。基本上，任何你可以做的事情来最小化风险并使过程感觉逐渐进行都会提高你的胜算。现在，这些都不像直接切换那么有趣，但它有一个巨大的好处，那就是实际上会起作用。
- en: JSON
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON
- en: This section uses `elm-repl`. If you did not [install it](install.md) already,
    you can use the [online REPL](http://elmrepl.cuberoot.in/).
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本节使用`elm-repl`。如果你还没有[安装它](install.md)，你可以使用[在线REPL](http://elmrepl.cuberoot.in/)。
- en: JSON
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON
- en: You will be sending lots of JSON in your programs. You use [the `Json.Decode`
    library](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode)
    to convert wild and crazy JSON into nicely structured Elm values.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在你的程序中发送大量的JSON。你使用[Json.Decode库](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode)将狂野而疯狂的JSON转换为结构化良好的Elm值。
- en: The core concept for working with JSON is called a **decoder**. It decodes JSON
    values into Elm values. We will start out by looking at some very basic decoders
    and then look at how to put them together to handle more complex scenarios.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 处理JSON的核心概念称为**解码器**。它将JSON值解码为Elm值。我们将首先查看一些非常基本的解码器，然后看看如何将它们组合起来处理更复杂的情况。
- en: Primitive Decoders
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始解码器
- en: 'Here are the type signatures for a couple primitive decoders:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些基本解码器的类型签名：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These become useful when paired with the `decodeString` function:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些在与`decodeString`函数配对时变得有用：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This means we can do stuff like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以做这样的事情：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So our little decoders let us turn strings of JSON values into a `Result` telling
    us how the conversion went.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们的小解码器让我们可以将JSON值的字符串转换为一个告诉我们转换情况如何的`Result`。
- en: Now that we can handle the simplest JSON values, how can we deal with more complex
    things like arrays and objects?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以处理最简单的 JSON 值了，那么如何处理更复杂的东西，比如数组和对象呢？
- en: Combining Decoders
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并解码器
- en: 'The cool thing about decoders is that they snap together like building blocks.
    So if we want to handle a list of values, we would reach for the [`list`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#list)
    function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 解码器的很酷的地方在于它们像搭积木一样拼接在一起。所以如果我们想处理一个值的列表，我们会使用[`list`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#list)函数：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can combine this with all the primitive decoders now:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将所有基本解码器结合起来：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So now we can handle JSON arrays. If we want to get extra crazy, we can even
    nest lists.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以处理 JSON 数组了。如果我们想要更疯狂一点，甚至可以嵌套列表。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So that is `list`, but `Json.Decode` can handle many other data structures too.
    For example, [`dict`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#dict)
    helps you turn a JSON object into an Elm `Dict` and [`keyValuePairs`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#keyValuePairs)
    helps you turn a JSON object into an Elm list of keys and values.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是`list`，但`Json.Decode`也可以处理许多其他数据结构。例如，[`dict`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#dict)帮助你将一个
    JSON 对象转换为 Elm 的`Dict`，而[`keyValuePairs`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#keyValuePairs)帮助你将一个
    JSON 对象转换为 Elm 的键值对列表。
- en: Decoding Objects
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解码对象
- en: 'We decode JSON objects with the [`field`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#field)
    function. It snaps together decoders just like `list`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用[`field`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#field)函数解码
    JSON 对象。它像`list`一样拼接解码器：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So when you say `field "x" int` you are saying (1) I want a JSON object, (2)
    it should have a field `x`, and (3) the value at `x` should be an integer. So
    using it looks like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当你说`field "x" int`时，你是在说（1）我想要一个 JSON 对象，（2）它应该有一个字段`x`，（3）`x`处的值应该是一个整数。所以使用它看起来像这样：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Notice that the `field "x" int` decoder only cares about field `x`. The object
    can have other fields with other content. That is all separate. But what happens
    when you want to get information from *many* fields? Well, we just need to put
    together many decoders. This is possible with functions like [`map2`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#map2):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`field "x" int` 解码器只关心字段 `x`。对象可以有其他字段和其他内容。这都是分开的。但是当你想从*许多*字段中获取信息时会发生什么？嗯，我们只需要组合许多解码器。这可以通过[`map2`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#map2)等函数实现：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This function takes in two different decoders. If they are both successful,
    it uses the given function to combine their results. So now we can put together
    two different decoders:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接受两个不同的解码器。如果它们都成功，它将使用给定的函数来组合它们的结果。所以现在我们可以组合两个不同的解码器：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Okay, that covers two fields, but what about three? Or four? The core library
    provides [`map3`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#map3),
    [`map4`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#map4),
    and others for handling larger objects.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这涵盖了两个字段，但是三个呢？或者四个呢？核心库提供了[`map3`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#map3)、[`map4`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode#map4)等函数来处理更大的对象。
- en: 'As you start working with larger JSON objects, it is worth checking out [`NoRedInk/elm-decode-pipeline`](http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest).
    It builds on top of the core `Json.Decode` module described here and lets you
    write stuff like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始处理更大的 JSON 对象时，值得查看[`NoRedInk/elm-decode-pipeline`](http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest)。它建立在这里描述的核心`Json.Decode`模块之上，并让你编写类似这样的代码：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can have `optional` and `hardcoded` fields as well. It is quite a nice library,
    so take a look!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以有`optional`和`hardcoded`字段。这是一个相当不错的库，所以看一看！
- en: Broader Context
  id: totrans-47
  prefs:
  - PREF_BQ
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更广泛的背景
- en: ''
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By now you have seen a pretty big chunk of the actual `Json.Decode` API, so
    I want to give some additional context about how this fits into the broader world
    of Elm and web apps.
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 到目前为止，你已经看到了实际的`Json.Decode` API的相当大一部分，所以我想提供一些关于它如何融入更广泛的 Elm 和 web 应用程序世界的额外背景信息。
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Validating Server Data
  id: totrans-51
  prefs:
  - PREF_BQ
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证服务器数据
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The conversion from JSON to Elm doubles as a validation phase. You are not just
    converting from JSON, you are also making sure that JSON conforms to a particular
    structure.
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从 JSON 转换到 Elm 的过程同时也作为验证阶段。你不仅仅是将 JSON 转换过来，还要确保 JSON 符合特定的结构。
- en: ''
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In fact, decoders have revealed weird data coming from NoRedInk’s *backend*
    code! If your server is producing unexpected values for JavaScript, the client
    just gradually crashes as you run into missing fields. In contrast, Elm recognizes
    JSON values with unexpected structure, so NoRedInk gives a nice explanation to
    the user and logs the unexpected value. This has actually led to some patches
    in their Ruby server!
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 实际上，解码器已经揭示了来自 NoRedInk 的 *后端* 代码的奇怪数据！如果你的服务器为 JavaScript 生成了意外的值，那么客户端在遇到缺少字段时会逐渐崩溃。相比之下，Elm
    可以识别具有意外结构的 JSON 值，因此 NoRedInk 会为用户提供一个很好的解释并记录意外值。这实际上导致了他们的 Ruby 服务器的一些补丁！
- en: ''
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A General Pattern
  id: totrans-57
  prefs:
  - PREF_BQ
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用模式
- en: ''
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'JSON decoders are an example of a more general pattern in Elm. You see it whenever
    you want to wrap up complicated logic into small building blocks that snap together
    easily. Other examples include:'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: JSON 解码器是 Elm 中更一般模式的一个例子。你会在需要将复杂逻辑封装成易于组合的小模块时看到它。其他例子包括：
- en: ''
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Random` — The `Random` library has the concept of a `Generator`. So a `Generator
    Int` creates random integers. You start with primitive building blocks that generate
    random `Int` or `Bool`. From there, you use functions like `list` and `map` to
    build up generators for fancier types.'
  id: totrans-61
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Random` — `Random` 库有一个 `Generator` 的概念。因此，`Generator Int` 创建随机整数。你从生成随机 `Int`
    或 `Bool` 的原始构建块开始。然后，你使用 `list` 和 `map` 等函数来构建更复杂类型的生成器。'
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-63
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Easing` — The Easing library has the concept of an `Interpolation`. An `Interpolation
    Float` describes how to slide between two floating point numbers. You start with
    interpolations for primitives like `Float` or `Color`. The cool thing is that
    these interpolations compose, so you can build them up for much fancier types.'
  id: totrans-64
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Easing` — Easing 库有一个 `Interpolation` 的概念。一个 `Interpolation Float` 描述了如何在两个浮点数之间滑动。你从用于原始类型如
    `Float` 或 `Color` 的插值开始。酷的是这些插值可以组合，所以你可以为更复杂的类型构建它们。'
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-66
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As of this writing, there is some early work on Protocol Buffers (binary data
    format) that uses the same pattern. In the end you get a nice composable API for
    converting between Elm values and binary!
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 截至目前，有一些早期的 Protocol Buffers（二进制数据格式）工作使用了相同的模式。最终，你会得到一个很好的可组合的 API，用于在 Elm
    值和二进制之间进行转换！
- en: JavaScript
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript
- en: JavaScript Interop
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 互操作
- en: 'At some point your Elm program is probably going to need to talk to JavaScript.
    We do this by (1) embedding Elm in HTML and (2) sending messages back and forth
    between Elm and JavaScript:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些时候，你的 Elm 程序可能需要与 JavaScript 进行通信。我们通过（1）将 Elm 嵌入到 HTML 中和（2）在 Elm 和 JavaScript
    之间发送消息来实现这一点：
- en: '![](interop.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](interop.png)'
- en: This way we can have access to full power of JavaScript, the good and the bad,
    without giving up on all the things that are nice about Elm.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以访问 JavaScript 的全部功能，好的和不好的，而不放弃 Elm 的所有优点。
- en: 'Step 1: Embed in HTML'
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1：嵌入到 HTML 中
- en: 'Normally when you run the Elm compiler, it will give you an HTML file that
    sets everything up for you. So running this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，当你运行 Elm 编译器时，它会给你一个设置好一切的 HTML 文件。所以运行这个：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Will result in a `index.html` file that you can just open up and start using.
    To do fancier stuff, we want to compile to JavaScript, so we modify the command
    slightly:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生一个 `index.html` 文件，你只需打开即可开始使用。为了做更复杂的事情，我们想要编译到 JavaScript，所以我们稍微修改一下命令：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now the compiler will generate a JavaScript file that lets you initialize your
    program like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在编译器将生成一个 JavaScript 文件，让你可以这样初始化你的程序：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is doing three important things:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个做了三件重要的事情：
- en: We create a `<div>` that will hold the Elm program.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个 `<div>` 来容纳 Elm 程序。
- en: We load the JavaScript generated by the Elm compiler.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们加载 Elm 编译器生成的 JavaScript。
- en: We grab the relevant node and initialize our Elm program in it.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们抓取相关节点，并在其中初始化我们的 Elm 程序。
- en: So now we can set Elm up in any `<div>` we want. So if you are using React,
    you can create a component that just sets this kind of thing up. If you are using
    Angular or Ember or something else, it should not be too crazy either. Just take
    over a `<div>`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在任何想要的 `<div>` 中设置 Elm。所以如果你正在使用 React，你可以创建一个组件来设置这种类型的东西。如果你使用 Angular
    或 Ember 或其他东西，这也不会太疯狂。只需要接管一个 `<div>`。
- en: The next section gets into how to get your Elm and JavaScript code to communicate
    with each other in a nice way.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将介绍如何以一种好的方式使你的 Elm 和 JavaScript 代码进行通信。
- en: 'Step 2: Talk to JavaScript'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2：与 JavaScript 交流
- en: 'There are two major ways for Elm and JavaScript to talk to each other: **ports**
    and **flags**.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Elm 和 JavaScript 之间有两种主要的通信方式：**端口** 和 **标志**。
- en: Ports
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 端口
- en: Say we have a nice Elm program and everything is going fine, but we want to
    use some JavaScript spell-checking library to get a feature done real quick. The
    final result is shown [here](https://gist.github.com/evancz/e69723b23958e69b63d5b5502b0edf90),
    and we will walk through the most important parts here.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个很好的 Elm 程序，一切都进行得很顺利，但我们想要使用一些 JavaScript 拼写检查库来快速完成一个功能。最终结果显示[在这里](https://gist.github.com/evancz/e69723b23958e69b63d5b5502b0edf90)，我们将在这里逐步介绍最重要的部分。
- en: Okay, in Elm, **any communication with JavaScript goes through a port**. Think
    of it like a hole in the side of your Elm program where you can send values in
    and out. These work exactly like the commands and subscriptions from [the Architecture
    section](../architecture). Sending values out to JS is a command. Listening for
    values coming in from JS is a subscription. Pretty neat!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，在 Elm 中，**与 JavaScript 的任何通信都通过端口进行**。将其视为 Elm 程序侧面的一个孔，您可以通过它发送值进入和退出。这些工作方式与[架构部分](../architecture)中的命令和订阅完全相同。向
    JS 发送值是一个命令。监听从 JS 进来的值是一个订阅。非常棒！
- en: 'So if we want to talk to this spell-checking library, our Elm program will
    need these additional declarations:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我们想要与这个拼写检查库交流，我们的 Elm 程序将需要这些额外的声明：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Again, you can see the whole file [here](https://gist.github.com/evancz/e69723b23958e69b63d5b5502b0edf90),
    but these are the important additions:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您可以在[这里](https://gist.github.com/evancz/e69723b23958e69b63d5b5502b0edf90)看到整个文件，但这些是重要的补充部分：
- en: We change the `module` declaration to `port module`. This indicates that `port`
    declarations should be permitted. (Very few modules should have ports in them!)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将`module`声明更改为`port module`。这表明应允许`port`声明。（非常少的模块应该包含端口！）
- en: We create a `check` port. On the Elm side, we can create commands like `check
    "badger"`, resulting in a `Cmd msg` that sends strings to the JS side.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个`check`端口。在 Elm 一侧，我们可以创建命令，比如`check "badger"`，从而得到一个发送字符串到 JS 一侧的`Cmd
    msg`。
- en: We create a `suggestions` port. This one looks a bit fancier than the `check`
    port, but imagine that it is creating `Sub (List String)`. You are essentially
    subscribing to lists of strings sent into Elm from JS. So when the spell-checking
    library has a suggestion, it will send things through. Now, the type of `suggestions`
    is a bit fancier than that. You provide a function from `(List String -> msg)`
    so you can convert that list of strings to your `Msg` type immediately. This makes
    it easy to deal with in your `update` function, but it is just for convenience.
    The real point is to send a `List String` from JS into Elm.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个`suggestions`端口。这个看起来比`check`端口要复杂一些，但想象一下它创建的是`Sub (List String)`。您实际上是订阅了从
    JS 发送到 Elm 中的字符串列表。因此，当拼写检查库有建议时，它将发送这些建议。现在，`suggestions`的类型比那更复杂一些。您提供了一个从`(List
    String -> msg)`到您的`Msg`类型的函数，因此您可以立即将字符串列表转换为您的`Msg`类型。这使得在您的`update`函数中处理它变得容易，但这只是为了方便。真正的重点是从
    JS 发送`List String`到 Elm 中。
- en: 'Okay, so after you run `elm-make Spelling.elm --output=spelling.js` you embed
    it in HTML like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，所以在你运行`elm-make Spelling.elm --output=spelling.js`之后，你可以这样嵌入它到 HTML 中：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Okay, so all the ports you declare in your Elm program will be available as
    fields of `app.ports`. In the code above, we access `app.ports.check` and `app.ports.suggestions`.
    They work like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，所以你在 Elm 程序中声明的所有端口都将作为`app.ports`的字段可用。在上面的代码中，我们访问`app.ports.check`和`app.ports.suggestions`。它们的工作方式如下：
- en: We can subscribe to `app.ports.check`. Every time Elm says to send a value out,
    we will call this JavaScript function.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以订阅`app.ports.check`。每当 Elm 要求发送一个值时，我们将调用此 JavaScript 函数。
- en: We can send values to `app.ports.suggestions`. So whenever we have some new
    suggestions for Elm, we just `send` them through.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将值发送到`app.ports.suggestions`。所以每当 Elm 有一些新的建议时，我们只需通过`send`将它们发送过去。
- en: With that knowledge, we can communicate back and forth with JavaScript!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 具备这些知识，我们可以与 JavaScript 来回交流！
- en: '**Note:** Elm validates all values coming in from JavaScript. In Elm we said
    we can only handle `List String` so we need to make sure that the JavaScript code
    does not break that contract! More about that [farther down this page](#customs-and-border-protection).'
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** Elm 验证从 JavaScript 进来的所有值。在 Elm 中，我们说我们只能处理`List String`，所以我们需要确保 JavaScript
    代码不会违反该约定！有关此内容的更多信息，请参见[本页下面的内容](#customs-and-border-protection)。'
- en: Flags
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Flags
- en: The second way to talk to JavaScript is with *flags*. You can think of this
    as some static configuration for your Elm program.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与 JavaScript 交流的第二种方法是使用*flags*。您可以将其视为 Elm 程序的一些静态配置。
- en: 'Instead of creating a `Program` with the [`program`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html#program)
    function, we can use the [`programWithFlags`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html#programWithFlags).
    So say we want to get a value like this from JavaScript on initialization:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`program`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html#program)函数一起创建`Program`不同，我们可以使用[`programWithFlags`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html#programWithFlags)。因此，假设我们想在初始化时从
    JavaScript 获取这样的值：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We would set up our Elm program like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会像这样设置我们的 Elm 程序：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And on the JavaScript side, we start the program like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 而在 JavaScript 端，我们这样启动程序：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Notice that this is exactly the same as normal, but we provide an extra argument
    with all the flags we want.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这与正常情况完全相同，但我们提供了一个额外的参数，其中包含所有我们想要的标志。
- en: Just like ports, the values sent in from JavaScript are validated to make sure
    JavaScript bugs stay in JavaScript.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 就像端口一样，从 JavaScript 发送的值经过验证，以确保 JavaScript 的错误留在 JavaScript 中。
- en: Customs and Border Protection
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 海关和边境保护
- en: Ports and flags must be careful about what values are allowed through. Elm is
    statically typed, so each port is fitted with some border protection code that
    ensures that type errors are kept out. Ports also do some conversions so that
    you get nice colloquial data structures in both Elm and JS.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 端口和标志必须小心允许通过的值。Elm 是静态类型的，因此每个端口都配备了一些边界保护代码，以确保类型错误被排除在外。端口还会进行一些转换，以便在 Elm
    和 JS 中都获得漂亮的口语数据结构。
- en: 'The particular types that can be sent in and out of ports are quite flexible,
    covering [all valid JSON values](http://www.json.org/). Specifically, incoming
    ports can handle all the following Elm types:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在端口中发送和接收的特定类型非常灵活，涵盖了[所有有效的 JSON 值](http://www.json.org/)。具体来说，传入端口可以处理以下所有
    Elm 类型：
- en: '**Booleans and Strings** – both exist in Elm and JS!'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布尔值和字符串** – 在 Elm 和 JS 中都存在！'
- en: '**Numbers** – Elm ints and floats correspond to JS numbers'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数字** – Elm 的整数和浮点数对应于 JS 数字'
- en: '**Lists** – correspond to JS arrays'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列表** – 对应于 JS 数组'
- en: '**Arrays** – correspond to JS arrays'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数组** – 对应于 JS 数组'
- en: '**Tuples** – correspond to fixed-length, mixed-type JS arrays'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元组** – 对应于固定长度、混合类型的 JS 数组'
- en: '**Records** – correspond to JavaScript objects'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录** – 对应于 JavaScript 对象'
- en: '**Maybes** – `Nothing` and `Just 42` correspond to `null` and `42` in JS'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maybes** – `Nothing` 和 `Just 42` 对应于 JS 中的 `null` 和 `42`'
- en: '**Json** – [`Json.Encode.Value`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Encode#Value)
    corresponds to arbitrary JSON'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Json** – [`Json.Encode.Value`](http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Encode#Value)
    对应于任意 JSON'
- en: Now say Elm wants a `List String`, but someone calls `app.ports.suggestions.send(42)`
    on the JavaScript side. We *know* it will cause issues in Elm, and we *know* the
    code producing invalid data is on the JS side. So rather than letting the bad
    data into Elm and cause a runtime exception *eventually* (the JavaScript way!)
    we throw a runtime exception *immediately* when you call `send` with invalid data.
    So we cannot solve the problem of invalid data in JavaScript, but we can at least
    make sure it stays on the JavaScript side!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设 Elm 需要一个`List String`，但是在 JavaScript 端有人调用了`app.ports.suggestions.send(42)`。我们*知道*这将在
    Elm 中引起问题，而且我们*知道*产生无效数据的代码在 JS 端。因此，我们不会让坏数据进入 Elm 并*最终*引起运行时异常（JavaScript 的方式！），而是在你用无效数据调用`send`时立即抛出运行时异常。因此，我们无法解决
    JavaScript 中的无效数据问题，但至少可以确保它留在 JavaScript 端！
- en: Usage Advice
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用建议
- en: I showed an example where the ports were declared in the root module. This is
    not a strict requirement. You can actually create a `port module` that gets imported
    by various parts of your app.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我展示了一个示例，其中端口在根模块中声明。这不是一个严格的要求。实际上，你可以创建一个`端口模块`，然后被应用程序的各个部分导入。
- en: It seems like it is probably best to just have one `port module` for your project
    so it is easier to figure out the API on the JavaScript side. I plan to improve
    tooling such that you can just ask though.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最好只有一个`端口模块`，这样更容易在 JavaScript 端找到 API。我计划改进工具，以便你可以直接询问。
- en: '**Note:** Port modules are not permitted in the package repository. Imagine
    you download an Elm package and it just doesn''t work. You read the docs and discover
    you *also* need to get some JS code and hook it up properly. Lame. Bad experience.
    Now imagine if you had this risk with *every* package out there. It just would
    feel crappy, so we do not allow that.'
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 端口模块不允许在包存储库中。想象一下，你下载了一个 Elm 包，但它却无法正常工作。你阅读文档后发现你*还*需要获取一些 JS 代码并正确连接。糟糕。糟糕的体验。现在想象一下，如果你在*每个*包中都有这种风险。那将会感觉很��糕，所以我们不允许这样做。'
- en: Historical Context
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 历史背景
- en: Now I know that this is not the typical interpretation of *language interop*.
    Usually languages just go for full backwards compatibility. So C code can be used
    *anywhere* in C++ code. You can replace C/C++ with Java/Scala or JavaScript/TypeScript.
    This is the easiest solution, but it forces you to make quite extreme sacrifices
    in the new language. All the problems of the old language now exist in the new
    one too. Hopefully less though.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我知道这不是*语言互操作性*的典型解释。通常语言只是追求完全向后兼容。因此，C代码可以在C++代码的*任何地方*使用。你可以用Java/Scala或JavaScript/TypeScript替换C/C++。这是最简单的解决方案，但它迫使你在新语言中做出相当极端的牺牲。旧语言的所有问题现在也存在于新语言中。希望问题会少一些。
- en: Elm's interop is built on the observation that **by enforcing some architectural
    rules, you can make full use of the old language *without* making sacrifices in
    the new one.** This means we can keep making guarantees like "you will not see
    runtime errors in Elm" even as you start introducing whatever crazy JavaScript
    code you need.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Elm的互操作性建立在这样一个观察基础上：**通过强制执行一些架构规则，你可以充分利用旧语言，*而不必*在新语言中做出牺牲。** 这意味着我们可以继续提供像“在Elm中不会看到运行时错误”这样的保证，即使你开始引入任何你需要的疯狂JavaScript代码。
- en: So what are these architectural rules? Turns out it is just The Elm Architecture.
    Instead of embedding arbitrary JS code right in the middle of Elm, we use commands
    and subscriptions to send messages to external JavaScript code. So just like how
    the `WebSocket` library insulates you from all the crazy failures that might happen
    with web sockets, port modules insulate you from all the crazy failures that might
    happen in JavaScript. **It is like JavaScript-as-a-Service.**
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这些架构规则是什么？原来只是Elm架构。与其在Elm中嵌入任意JS代码，我们使用命令和订阅来向外部JavaScript代码发送消息。就像`WebSocket`库让你免受可能发生的所有与web套接字相关的疯狂故障一样，端口模块让你免受可能在JavaScript中发生的所有疯狂故障。**这就像JavaScript作为一种服务。**
