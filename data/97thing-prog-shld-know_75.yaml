- en: Simplicity Comes from Reduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单来自于简化
- en: Simplicity Comes from Reduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单来自于简化
- en: '"Do it again...," my boss told me as his finger pressed hard on the delete
    key. I watched the computer screen with an all too familiar sinking feeling, as
    my code — line after line — disappeared into oblivion.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: “再做一遍...，”我的老板告诉我，他的手指重重按在删除键上。我看着电脑屏幕，感到一种太熟悉的沉重感，因为我的代码——一行又一行——消失在虚无中。
- en: My boss, Stefan, wasn't always the most vocal of people, but he knew bad code
    when he saw it. And he knew exactly what to do with it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我的老板斯特凡并不总是最健谈的人，但他一看到糟糕的代码就知道。他确切地知道该怎么做。
- en: I had arrived in my present position as a student programmer with lots of energy,
    plenty of enthusiasm but absolutely no idea how to code. I had this horrible tendency
    to think that the solution to every problem was to add in another variable some
    place. Or throw in another line. On a bad day, instead of the logic getting better
    with each revision, my code gradually got larger, more complex, and farther away
    from working consistently.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我作为一名学生程序员来到现在的职位，充满了活力，充满了热情，但完全不知道如何编码。我有这种可怕的倾向，认为每个问题的解决方案都是在某个地方添加另一个变量。或者增加另一行。在糟糕的日子里，逻辑并没有随着每次修订而变得更好，我的代码逐渐变得更大、更复杂，离一致工作的距离越来越远。
- en: It's natural, particularly when in a rush, to just want to make the most minimal
    changes to an existing block of code, even if it is awful. Most programmers will
    preserve bad code, fearing that starting anew will require significantly more
    effort than just going back to the beginning. That can be true for code that is
    close to working, but there is just some code that is beyond all help.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在匆忙时，特别是想要对现有代码进行最小的更改，即使它很糟糕，也是很自然的。大多数程序员会保留糟糕的代码，担心重新开始需要比回到起点更多的努力。对于接近工作的代码来说，这可能是真的，但有些代码是无法帮助的。
- en: More time gets wasted in trying to salvage bad work than it should. Once something
    becomes a resource sink, it needs to be discarded. Quickly.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 浪费在试图挽救糟糕工作上的时间比应该的要多。一旦某物成为资源浪费，就需要被丢弃。迅速。
- en: Not that one should easily toss away all of that typing, naming, and formatting.
    My boss's reaction was extreme, but it did force me to rethink the code on the
    second (or occasionally third) attempt. Still, the best approach to fixing bad
    code is to flip into a mode were the code is mercilessly refactored, shifted around,
    or deleted.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不是说人们应该轻易地丢弃所有的打字、命名和格式化。我的老板的反应很极端，但这确实迫使我在第二次（或偶尔第三次）尝试时重新思考代码。然而，修复糟糕代码的最佳方法是切换到一种模式，无情地重构、移动或删除代码。
- en: The code should be simple. There should be a minimal number of variables, functions,
    declarations, and other syntactic language necessities. Extra lines, extra variables...
    extra *anything*, really, should be purged. Removed immediately. What's there,
    what's left, should only be just enough to get the job done, completing the algorithm
    or performing the calculations. Anything and everything else is just extra unwanted
    noise, introduced accidentally and obscuring the flow. Hiding the important stuff.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 代码应该简单。应该有最少数量的变量、函数、声明和其他语法语言必需品。额外的行、额外的变量...额外的*任何东西*，实际上都应该被清除。立即移除。留下的东西应该只是足够完成工作、完成算法或执行计算的东西。其他任何东西都只是多余的不需要的噪音，无意中引入并遮蔽了流程。隐藏了重要的东西。
- en: Of course, if that doesn't do it then just delete it all and type it in over
    again. Drawing from one's memory in that way can often help cut through a lot
    of unnecessarily clutter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果这样做不起作用，那就把它全部删除，重新输入。以这种方式从记忆中汲取灵感通常可以帮助消除许多不必要的混乱。
- en: By [Paul W. Homer](http://programmer.97things.oreilly.com/wiki/index.php/Paul_W._Homer)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[保罗·W·霍默](http://programmer.97things.oreilly.com/wiki/index.php/Paul_W._Homer)
