- en: Setting Up Rust
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Rust
- en: Setting up Rust
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Rust
- en: This section will talk you through setting up Rust for the first time and also
    how to keep it up to date.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将指导您首次设置 Rust，以及如何保持其更新。
- en: Getting started is incredibly easy but some details vary upon your target platform.
    Rust runs on Windows, Linux and MacOS. In addition you might wish to cross-compile
    code for the consumption of another platform.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 入门非常简单，但一些细节因目标平台而异。Rust 可在 Windows、Linux 和 MacOS 上运行。此外，您可能希望为另一个平台的消费交叉编译代码。
- en: Use Rustup
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Rustup
- en: The easiest way to get started is to download and run `rustup-init` which you
    can do by visiting the [Rustup site](https://www.rustup.rs/).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 开始的最简单方法是下载并运行`rustup-init`，您可以通过访问[Rustup 网站](https://www.rustup.rs/)来执行。
- en: 'The instructions differ for Windows and Unix-like systems:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 说明针对 Windows 和类 Unix 系统有所不同：
- en: On Windows, rustup-init is an exe installer.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上，rustup-init 是一个 exe 安装程序。
- en: On Unix / OS X / Linux rust-init is a shell script.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Unix / OS X / Linux 上，rust-init 是一个 shell 脚本。
- en: Either way, when you follow the instructions the installer will download and
    install put rustc, cargo, and rustup in your bin directory which is `~/.cargo/bin`
    on Unix and `%USERPROFILE%.cargo.\bin` on Windows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，当您按照说明操作时，安装程序将下载并安装 rustc、cargo 和 rustup 到您的 bin 目录，Unix 上为`~/.cargo/bin`，Windows
    上为`%USERPROFILE%.cargo.\bin`。
- en: It will also set your `PATH` environment variable so that you can open a terminal
    and type rustc, cargo, rustup etc.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 它还会设置您的`PATH`环境变量，以便您可以打开终端并输入 rustc、cargo、rustup 等命令。
- en: 'Once `rustup` is installed you can also use the tool for maintenance:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完`rustup`后，您还可以使用该工具进行维护：
- en: Install additional Rust toolchains (e.g. if you are cross-compiling or supporting
    multiple targets you may have more than one toolchain)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装额外的 Rust 工具链（例如，如果您要进行交叉编译或支持多个目标，则可能会有多个工具链）
- en: Change the default toolchain that is invoked when you type `rustc` or `cargo`.
    Rustup will create symbolic links / scripts that invoke the appropriate toolchain
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改默认的工具链，当您输入`rustc`或`cargo`时会调用该工具链。Rustup将创建符号链接/脚本来调用适当的工具链。
- en: Update the toolchain when a new version of Rust is released
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 Rust 发布新版本时更新工具链
- en: Fetch source and documentation
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取源代码和文档
- en: Unix / Linux
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unix / Linux
- en: 'The process for running `rustup-init.sh` is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`rustup-init.sh`的过程如下：
- en: Open a terminal / console
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端/控制台
- en: Type "curl [https://sh.rustup.rs](https://sh.rustup.rs) -sSf | sh"
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 "curl [https://sh.rustup.rs](https://sh.rustup.rs) -sSf | sh"
- en: This will download and execute a script which will examine your environment,
    recommend the toolchain to download, and offer to modify your `PATH` environment
    variable.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将下载并执行一个脚本，该脚本将检查您的环境，推荐要下载的工具链，并提供修改您的`PATH`环境变量的选项。
- en: Choose the option 1 to proceed. Or customize if you want to modify something
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择选项 1 继续。或者自定义如果您想修改一些内容
- en: Wait for download to complete
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待下载完成
- en: You're done.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成。
- en: If you don't have curl, then you must install it first to proceed, or save the
    [shell script](https://sh.rustup.rs) from a browser to disk and execute that.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有 curl，则必须先安装它才能继续，或者从浏览器保存[shell 脚本](https://sh.rustup.rs)到磁盘并执行该脚本。
- en: To install `curl` in Linux you would invoke a command like this to install it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Linux 中安装`curl`，您需要调用类似这样的命令来安装它。
- en: Debian / Ubuntu - `sudo apt get curl`
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Debian / Ubuntu - `sudo apt get curl`
- en: Fedora / Redhat - `sudo dnf install curl`
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fedora / Redhat - `sudo dnf install curl`
- en: Windows
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows
- en: Download rustup-init.exe from rustup.rs.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 rustup.rs 下载 rustup-init.exe。
- en: Double click on the rust-init.exe and a console will open
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 rust-init.exe，一个控制台将打开
- en: Choose the option 1 to proceed. Or customize if you want to modify something
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择选项 1 继续。或者自定义如果您想修改一些内容
- en: Wait for download to complete
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待下载完成
- en: You're done.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成。
- en: 'If you prefer not to go with the defaults, here are some choices you should
    decide upon:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用默认设置，这里有一些您应该决定的选择：
- en: 32/64 bit version. Most Windows installations are going to be 64-bits these
    days but you may have a reason to choose 32-bit.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 32/64 位版本。如今大多数 Windows 安装都是 64 位的，但您可能有理由选择 32 位。
- en: GNU or MSVC ABI. This depends on what toolchain and runtimes you wish to be
    compatible with.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GNU 或 MSVC ABI。这取决于您希望与之兼容的工具链和运行时。
- en: The second choice concerns the application binary interface (ABI) you want Rust
    to be compatible with.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选择涉及您希望 Rust 兼容的应用程序二进制接口（ABI）。
- en: If you don't care about linking to anything then choose the GNU ABI. Also choose
    it if you have DLLs produced by MingW / MSYS. The advantage of this ABI is that
    it is more mature.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你不关心链接到任何内容，那么选择 GNU ABI。如果你有由 MingW / MSYS 产生的 DLL，也选择它。这个 ABI 的优点是它更成熟。
- en: If you have Visual Studio installed or intend to use Rust against DLLs created
    with Visual Studio, that's the ABI you need. One advantage of this option is that
    you can debug Rust inside of Visual Studio- the compiler will produce .pdb files
    that allow you to step debug Rust.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你已经安装了 Visual Studio，或者打算使用 Rust 与 Visual Studio 创建的 DLL 进行交互，那么你需要选择这个 ABI。这个选项的一个优点是你可以在
    Visual Studio 内部调试 Rust，编译器会生成允许你逐步调试 Rust 的 .pdb 文件。
- en: Keeping Rust up to date
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保持 Rust 更新
- en: 'New versions of Rust appear in a semi-frequent basis. If you want to update
    your environment to the latest version, it is as simple as this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 的新版本会经常发布。如果你想将你的环境更新到最新版本，只需执行以下简单操作：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Sometimes rustup will get an update of its own in which case you type:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候 rustup 会有更新，这时你只需要输入：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Adding Rust source
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 Rust 源码
- en: 'Rustup installs a rust toolchain but if you''re writing code or debugging you
    probably should also get the Rust source code so you can step into it or look
    at the implementation:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Rustup 安装了一个 Rust 工具链，但如果你要编写代码或进行调试，可能还需要获取 Rust 源代码，这样你就可以进行步进调试或查看实现代码：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Manual installation
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动安装
- en: If you prefer manual installation of Rust then there are packages and instructions
    on the [Rust site](https://www.rust-lang.org/en-US/downloads.html).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢手动安装 Rust，那么你可以在 [Rust 网站](https://www.rust-lang.org/en-US/downloads.html)
    上找到相关的软件包和说明。
- en: Just be aware that Rust has a fairly rapid release cycle so you probably only
    want to do this if you have a reason to choose a specific version of Rust and
    stick with it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Rust 的发布周期相当快，因此只有当你有理由选择特定版本并坚持使用时，才需要手动安装。
- en: Otherwise you may find yourself uninstalling and reinstalling a new version
    6 weeks later all over again.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，也许你会发现自己在 6 周后重新卸载和安装新版本。
- en: Setting up a debugger
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置调试器
- en: Unix / Linux
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unix / Linux
- en: Debugging Rust is little different from debugging C or C++.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 的调试与调试 C 或 C++ 有些不同。
- en: You must install gdb for your platform and then you may invoke it from a console
    or your favourite front-end to debug Rust code.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须为你的平台安装 gdb，然后你可以从控制台或你喜欢的前端调用它来调试 Rust 代码。
- en: 'On Linux systems you would normally install gdb from a package with one of
    these commands:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 系统上，你通常会使用以下其中一个命令来安装 gdb 软件包：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You may also prefer to use lldb which is a companion project to LLVM (the backend
    compiler used by Rust). Refer to the [lldb website](http://lldb.llvm.org/) for
    information on using it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也更喜欢使用 lldb，它是 LLVM 的伴随项目（Rust 使用的后端编译器）。请参考 [lldb 网站](http://lldb.llvm.org/)
    了解如何使用它。
- en: Rust comes with a few scripts that wrap gdb and lldb to provide pretty-printing
    to assist with debugging. When debugging, you can invoke `rust-gdb` or `rust-lldb`
    to use them.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 自带一些包装 gdb 和 lldb 的脚本，以提供漂亮的打印输出，帮助调试。在调试时，你可以调用 `rust-gdb` 或 `rust-lldb`
    来使用它们。
- en: Windows
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows
- en: If you have chosen Rust with the MSVC ABI then you can debug through Visual
    Studio with some limitations. When you create a debug build of your code, the
    compile will also create a .pdb file to go with it. You may open your executable
    in Visual Studio and step debug it, inspect variables and so on.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择了使用 MSVC ABI 的 Rust，那么你可以通过 Visual Studio 进行调试，但有一些限制。当你创建代码的调试构建时，编译器也会创建一个
    .pdb 文件。你可以在 Visual Studio 中打开可执行文件，进行逐步调试、检查变量等操作。
- en: GDB
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: GDB
- en: GDB on Windows is available through MSYS / MingW distributions.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 上的 GDB 可以通过 MSYS / MingW 发行版获得。
- en: For example downloads of the TDM-GCC distribution of MSYS can be found [here](http://tdm-gcc.tdragon.net/download).
    At the time of writing this, there is a standalone gdb-7.9.1-tdm64-2.zip containing
    the Choose the 32 or 64-bit version according to your Rust environment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如 TDM-GCC 分发的 MSYS 下载可以在 [这里](http://tdm-gcc.tdragon.net/download) 找到。在撰写本文时，有一个独立的
    gdb-7.9.1-tdm64-2.zip，其中包含根据你的 Rust 环境选择的 32 位或 64 位版本。
- en: 'Extract the zip file to a directory, e.g. `C:\tools\gdb-7.9.1-tdm64-2` and
    add a value to your `PATH` environment variable:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将 zip 文件解压到一个目录，例如 `C:\tools\gdb-7.9.1-tdm64-2`，并将一个值添加到你的 `PATH` 环境变量中：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can invoke `gdb` from the command line but more normally you'd prefer a
    front end.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从命令行中调用 `gdb`，但更常见的是你可能更喜欢一个前端。
- en: At the time of writing, perhaps the best option is Visual Studio Code which
    has plugins for debugging with GDB and for Rust development. So you can edit and
    debug from the same IDE.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，也许最好的选择是 Visual Studio Code，它有用于使用 GDB 进行调试和 Rust 开发的插件。因此，您可以从同一个 IDE
    编辑和调试。
- en: Pretty printer
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 漂亮的打印机
- en: Rust supplies a pretty printer for variable inspection that you can add to the
    GDB. The pretty printer is a script written in Python that GDB will invoke to
    display variables.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 提供了一个用于变量检查的漂亮打印机，你可以将其添加到 GDB 中。漂亮的打印机是一个用 Python 编写的脚本，GDB 将调用它来显示变量。
- en: First ensure you have Python 2.7 installed in your path.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先确保你的路径下安装了 Python 2.7。
- en: The script is bundled with the Rust source code so you need to have installed
    that first.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本与 Rust 源代码捆绑在一起，因此您首先需要安装它。
- en: 'If you installed it with `rustup` then it can be found in your `%USERPROFILE%\.rustup`
    directory:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你用 `rustup` 安装它，那么它可以在你的 `%USERPROFILE%\.rustup` 目录下找到：
- en: e.g.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 例如
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Otherwise it can be found wherever you unzipped your Rust source code under
    `src\rust\src\etc`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，它可以在你解压 Rust 源代码的任何地方找到，例如 `src\rust\src\etc`。
- en: Note the fully qualified path its under and edit `C:\tools\gdb-7.9.1-tdm64-2\bin\gdbinit`
    to insert the path using *forward* slashes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意完全限定的路径，以及使用*正斜杠*编辑 `C:\tools\gdb-7.9.1-tdm64-2\bin\gdbinit` 插入路径。
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Setting up an IDE
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置一个集成开发环境（IDE）
- en: Rust is still behind some other languages when it comes to IDE integration but
    there are already plugins that provide much of the functionality you need.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到 IDE 集成时，Rust 还落后于一些其他语言，但已经有插件提供了您需要的大部分功能。
- en: Popular IDEs such as Eclipse, IntelliJ, Visual Studio all have plugins that
    work to varying degrees of integration with Rust.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的 IDE，如 Eclipse、IntelliJ、Visual Studio，都有插件，与 Rust 集成的程度不同。
- en: '[Visual Studio Code](https://code.visualstudio.com/) (not to be confused with
    Visual Studio) is a cross-platform programming editor and has a lot of plugins.
    It can be set up into a complete Rust development environment by following this
    [tutorial](https://sherryummen.in/2016/09/02/debugging-rust-on-windows-using-visual-studio-code/).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Visual Studio Code](https://code.visualstudio.com/) （不要与 Visual Studio 混淆）是一个跨平台的编程编辑器，拥有大量插件。通过按照这个
    [教程](https://sherryummen.in/2016/09/02/debugging-rust-on-windows-using-visual-studio-code/)
    进行设置，它可以成为一个完整的 Rust 开发环境。'
- en: '[Rust plugin for IntelliJ IDEA](https://intellij-rust.github.io/) is under
    active development. This plugin has a lot of traction and is turning around new
    versions on a nearly weekly basis. Offers syntax highlighting, autocomplete (via
    built-in parser), cargo builts and eventually other functionality. [IntelliJ](https://www.jetbrains.com/idea/download/#section=windows)
    is a commercial product but it comes in a community edition which is sufficient
    for development.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Rust plugin for IntelliJ IDEA](https://intellij-rust.github.io/) 正在积极开发中。该插件受到了很多关注，并且几乎每周都发布新版本。提供语法高亮、自动补全（通过内置解析器）、cargo
    构建以及最终其他功能。[IntelliJ](https://www.jetbrains.com/idea/download/#section=windows)
    是一个商业产品，但它有一个足够用于开发的社区版。'
- en: '[Visual Rust plugin for Microsoft Studio](https://github.com/PistonDevelopers/VisualRust)
    . Offers syntax highlighting, autocompletion, interactive debugging.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Visual Rust plugin for Microsoft Studio](https://github.com/PistonDevelopers/VisualRust)
    。提供语法高亮、自动补全、交互式调试。'
- en: '[RustDT for Eclipse](https://github.com/RustDT/RustDT) is also under active
    development. It adds syntax highlighting, autocomplete (via racer), cargo builds
    and rustfmt functionality to Eclipse.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[RustDT for Eclipse](https://github.com/RustDT/RustDT) 也在积极开发中。它为 Eclipse 添加了语法高亮、自动补全（通过
    racer）、cargo 构建和 rustfmt 功能。'
- en: 'Atom is a popular editor with heaps of plugins. These plugins are very useful
    for Rust:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Atom 是一个拥有大量插件的流行编辑器。这些插件在 Rust 中非常有用：
- en: '[language-rust](https://atom.io/packages/language-rust) provides basic syntax
    highlighting'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[language-rust](https://atom.io/packages/language-rust) 提供基本的语法高亮'
- en: '[racer](https://atom.io/packages/racer) for autocompletion functionality'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[racer](https://atom.io/packages/racer) 提供自动补全功能'
- en: '[atom-beautify](https://atom.io/packages/atom-beautify) invokes rustfmt to
    make code look pretty.'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[atom-beautify](https://atom.io/packages/atom-beautify) 调用 rustfmt 使代码看起来漂亮。'
- en: '[build-cargo](https://atom.io/packages/build-cargo) invokes cargo for you showing
    errors and warnings inline.'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[build-cargo](https://atom.io/packages/build-cargo) 为您调用 cargo，显示内联错误和警告。'
- en: For other editors and IDEs refer to the [Rust and IDEs](https://forge.rust-lang.org/ides.html)
    page on the Rust website.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他编辑器和 IDE，请参考 Rust 网站上的 [Rust and IDEs](https://forge.rust-lang.org/ides.html)
    页面。
- en: Racer / Rustfmt
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Racer / Rustfmt
- en: Some of the plugins above make use of Racer and Rustfmt.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的一些插件使用了 Racer 和 Rustfmt。
- en: Racer is used by some plugins to provide autocompletion functionality.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一些插件使用 Racer 提供自动补全功能。
- en: Rustfmt is a source code formatting tool that makes sure your Rust source code
    is pretty to look at, adding spacing, indentation and so on.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Rustfmt 是一个源代码格式化工具，确保你的 Rust 源代码看起来漂亮，添加空格、缩进等。
- en: You can get both just by typing these commands and waiting for the tools to
    download and build themselves - they're written in Rust and built through cargo.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入这些命令并等待工具下载和构建自身，你可以同时获得它们 - 它们是用 Rust 编写的，并通过 cargo 构建。
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
