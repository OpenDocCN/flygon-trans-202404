- en: Chapter 4 - Element Node Selecting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 - 元素节点选择
- en: 4.1 Selecting a specific element node
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.1 选择特定的元素节点
- en: 'The most common methods for getting a reference to a single element node are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 获取单个元素节点的最常见方法有：
- en: '*querySelector()*'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*querySelector()*'
- en: '*getElementById()*'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*getElementById()*'
- en: In the code below I leverage both of these methods to select an element node
    from the HTML document.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我利用这两种方法来从HTML文档中选择一个元素节点。
- en: 'live code: [http://jsfiddle.net/domenlightenment/b4Rch](http://jsfiddle.net/domenlightenment/b4Rch)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/b4Rch](http://jsfiddle.net/domenlightenment/b4Rch)
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The *getElementById()* method is pretty simple compared to the more robust *querySelector()*
    method. The *querySelector()* method permits a parameter in the form of a [CSS
    selector syntax](http://www.w3.org/TR/css3-selectors/#selectors). Basically you
    can pass this method a CSS 3 selector (e.g. *'#score>tbody>tr>td:nth-of-type(2)'*)
    which it will use to select a single element in the DOM.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*getElementById()*方法相对于更强大的*querySelector()*方法来说相当简单。*querySelector()*方法允许以[CSS选择器语法](http://www.w3.org/TR/css3-selectors/#selectors)的形式传递参数。基本上，你可以传递一个CSS
    3选择器（例如*''#score>tbody>tr>td:nth-of-type(2)''*），它将用于在DOM中选择单个元素。'
- en: Notes
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*querySelector()* will return the first node element found in the document
    based on the selector. For example, in the code example above we pass a selector
    that would select all the li''s in CSS, but only the first one is returned.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*querySelector()*会根据选择器在文档中找到的第一个节点元素。例如，在上面的代码示例中，我们传递了一个选择器，该选择器将选择所有的li元素，但只返回第一个。'
- en: '*querySelector()* is also defined on element nodes. This allows for the method
    to limit (allows for context querying) its results to a specific vein of the DOM
    tree'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*querySelector()*也在元素节点上定义。这允许该方法将结果限制在DOM树的特定部分（允许上下文查询）。'
- en: 4.2 Selecting/creating a list (aka *NodeList*) of element nodes
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.2 选择/创建元素节点列表（也称为*NodeList*）
- en: 'The most common methods for selecting/creating a list of nodes in an HTML document
    are:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML文档中选择/创建节点列表的最常见方法有：
- en: '*querySelectorAll()*'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*querySelectorAll()*'
- en: '*getElementsByTagName()*'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*getElementsByTagName()*'
- en: '*getElementsByClassName()*'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*getElementsByClassName()*'
- en: Below we use all three of these methods to create a list of the *<li>* elements
    in the document.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面，我们使用这三种方法来创建文档中*<li>*元素的列表。
- en: 'live code: [http://jsfiddle.net/domenlightenment/nT7Lr](http://jsfiddle.net/domenlightenment/nT7Lr)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/nT7Lr](http://jsfiddle.net/domenlightenment/nT7Lr)
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If its not clear the methods used in the code example above do not select a
    specific element, but instead creates a list (aka [*NodeLists*](https://developer.mozilla.org/En/DOM/NodeList))
    of elements that you can select from.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在上面的代码示例中使用的方法没有选择特定元素的清晰，而是创建了一个元素列表（也称为[*NodeLists*](https://developer.mozilla.org/En/DOM/NodeList)），你可以从中选择元素。
- en: Notes
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*NodeLists* created from *getElementsByTagName()* and *getElementsByClassName()*
    are considered live are will always reflect the state of the document even if
    the document is updated after the list is created/selected.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从*getElementsByTagName()*和*getElementsByClassName()*创建的*NodeLists*被认为是动态的，即使在创建/选择列表后更新文档，它们也会始终反映文档的状态。
- en: The *querySelectorAll()* method does not return a live list of elements. Meaning
    that the list created from *querySelectorAll()* is a snap shot of the document
    at the time it was created and is not reflective of the document as it changes.
    The list is static not live.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*querySelectorAll()*方法不会返回一个动态的元素列表。这意味着从*querySelectorAll()*创建的列表是在创建时对文档的快照，不会随着文档的更改而变化。该列表是静态的，不是动态的。'
- en: '*querySelectorAll()*, *getElementsByTagName()*, and *getElementsByClassName*
    are also defined on element nodes. This allows for the method to limit its results
    to specific vein(s) of the DOM tree (e.g. *document.getElementById(''header'').getElementsByClassName(''a'')*).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*querySelectorAll()*、*getElementsByTagName()*和*getElementsByClassName*也在元素节点上定义。这允许该方法将结果限制在DOM树的特定部分（例如*document.getElementById(''header'').getElementsByClassName(''a'')*）。'
- en: I did not mention the *getElementsByName()* method as it not commonly leverage
    over other solutions but you should be aware of its existence for selecting form,
    img, frame, embed, and object elements from a document that all have the same
    name attribute value.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有提到*getElementsByName()*方法，因为它不常用于其他解决方案，但你应该知道它的存在，用于从具有相同名称属性值的文档中选择表单、img、frame、embed和object元素。
- en: Passing either *querySelectorAll()* or *getElementsByTagName()* the string *'*'*,
    which generally means all, will return a list of all elements in the document.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 *querySelectorAll()* 或 *getElementsByTagName()* 字符串 *'*'*，通常表示全部，将返回文档中所有元素的列表。
- en: Keep in mind that *childNodes* will also return a *NodeList* just like *querySelectorAll()*,
    *getElementsByTagName()*, and *getElementsByClassName*
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，*childNodes* 会返回一个 *NodeList*，就像 *querySelectorAll()*、*getElementsByTagName()*
    和 *getElementsByClassName* 一样。
- en: The *NodeLists* are array like (but does not inherit array methods) lists/collections
    and have a read only *length* property
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*NodeLists* 类似于数组（但不继承数组方法）的列表/集合，并且具有只读的 *length* 属性'
- en: 4.3 Selecting all immediate child element nodes
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.3 选择所有立即子元素节点
- en: Using the *children* property from an element node we can get a list (aka [*HTMLCollection*](https://developer.mozilla.org/en/DOM/HTMLCollection))
    of all the immediate children nodes that are element nodes. In the code below
    I use *children* to create a selection/list of all of the *<li>*'s contained wiithin
    the *<ul>*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用元素节点的 *children* 属性，我们可以得到一个（又名 [*HTMLCollection*](https://developer.mozilla.org/en/DOM/HTMLCollection)）包含所有立即子节点的元素节点的列表。在下面的代码中，我使用
    *children* 来创建一个包含所有在 *<ul>* 中的 *<li>* 的选择/列表。
- en: 'live code: [http://jsfiddle.net/domenlightenment/svfRC](http://jsfiddle.net/domenlightenment/svfRC)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/svfRC](http://jsfiddle.net/domenlightenment/svfRC)
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that using *children* only gives us the immediate element nodes excluding
    any nodes (e.g. text nodes) that are not elements. If the element has no children
    then *children* will return an empty array-like-list.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，只使用 *children* 仅会给我们返回立即元素节点，排除了任何不是元素的节点（例如文本节点）。如果元素没有子元素，则 *children*
    将返回一个空的类似数组的列表。
- en: Notes
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: '*HTMLCollection*''s contain elements in document order, that is they are placed
    in the array in the order the elements appear in the DOM'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*HTMLCollection* 包含按文档顺序排列的元素，也就是说它们按照它们在 DOM 中出现的顺序放置在数组中。'
- en: '*HTMLCollection*''s are live, which means any change to the document will be
    reflected dynamically in the collection'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*HTMLCollection* 是动态的，这意味着对文档的任何更改都会动态地反映在集合中。'
- en: 4.4 Contextual element selecting
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.4 上下文元素选择
- en: The methods *querySelector()*, *querySelectorAll()*, *getElementsByTagName()*,
    and *getElementsByClassName* typically accessed from the *document* object are
    also defined on element nodes. This allows for these methods to limit its results
    to specific vein(s) of the DOM tree. Or said another, you can select a specific
    context in which you would like the methods to search for element nodes by invoking
    these methods on element node objects.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*querySelector()*、*querySelectorAll()*、*getElementsByTagName()* 和 *getElementsByClassName*
    这些通常从 *document* 对象访问的方法也在元素节点上定义了。这允许这些方法将结果限制在 DOM 树的特定分支上。换句话说，你可以通过在元素节点对象上调用这些方法来选择你想要这些方法在其中搜索元素节点的特定上下文。'
- en: 'live code: [http://jsfiddle.net/domenlightenment/fL6tV](http://jsfiddle.net/domenlightenment/fL6tV)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/fL6tV](http://jsfiddle.net/domenlightenment/fL6tV)
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These methods not only operate on the live dom but programatic DOM structures
    that are created in code as well.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法不仅适用于 live dom，还适用于在代码中创建的编程 DOM 结构。
- en: 'live code: [http://jsfiddle.net/domenlightenment/CCnva](http://jsfiddle.net/domenlightenment/CCnva)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 实时代码：[http://jsfiddle.net/domenlightenment/CCnva](http://jsfiddle.net/domenlightenment/CCnva)
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 4.5 Pre-configured selections/lists of element nodes
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.5 元素节点的预配置选择/列表
- en: You should be aware that there are some legacy, pre-configured arrays-like-lists,
    containing element nodes from an HTML document. Below I list a couple of these
    (not the complete list) that might be handy to be aware of.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该知道，有一些遗留的、预配置的类似数组的列表，包含了来自 HTML 文档的元素节点。下面我列出了一些（不是完整的列表），可能对你有所帮助。
- en: '*document.all* - all elements in HTML document'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*document.all* - HTML 文档中的所有元素'
- en: '*document.forms* - all *<form>* elements in HTML document'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*document.forms* - HTML 文档中的所有 *<form>* 元素'
- en: '*document.images* - all *<img>* elements in HTML document'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*document.images* - HTML 文档中的所有 *<img>* 元素'
- en: '*document.links* - all *<a>* elements in HTML document'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*document.links* - HTML 文档中的所有 *<a>* 元素'
- en: '*document.scripts* - all *<script>* elements in HTML document'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*document.scripts* - HTML 文档中的所有 *<script>* 元素'
- en: '*document.styleSheets* - all *<link>* or *<style>* objects in HTML document'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*document.styleSheets* - HTML 文档中的所有 *<link>* 或 *<style>* 对象'
- en: Notes
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: These pre-configured arrays are constucted from the [HTMLCollection](https://developer.mozilla.org/en/DOM/HTMLCollection)
    interface/object, except *document.styleSheets* it uses *StyleSheetList*
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些预配置的数组是从 [HTMLCollection](https://developer.mozilla.org/en/DOM/HTMLCollection)
    接口/对象构建的，除了 *document.styleSheets*，它使用的是 *StyleSheetList*
- en: '*[HTMLCollection](https://developer.mozilla.org/en-US/docs/DOM/HTMLCollection)*''s
    are live just like *[NodeList](https://developer.mozilla.org/En/DOM/NodeList)*''s.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*[HTMLCollection](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection)*和*[NodeList](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList)*一样是动态的。'
- en: Oddly *document.all* is constucted from a *HTMLAllCollection* not an *HTMLCollection*
    and is not supported in Firefox
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 奇怪的是*document.all*是由*HTMLAllCollection*而不是*HTMLCollection*构造的，并且在Firefox中不受支持。
- en: 4.6 Verify an element will be selected using *matchesSelector()*
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.6 使用*matchesSelector()*验证元素是否被选中。
- en: Using the *matchesSelector()* method we can determine if an element will match
    a selector string. For example say we want to determine if an *<li>* is the first
    child element of a *<ul>*. In the code example below I select the first *<li>*
    inside of the *<ul>* and then ask if that element matches the selector, *li:first-child*.
    Because it in fact does, the *matchesSelector()* method returns *true*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*matchesSelector()*方法，我们可以确定元素是否匹配选择器字符串。例如，假设我们想要确定一个*<li>*是否是*<ul>*的第一个子元素。在下面的代码示例中，我选择了*<ul>*中的第一个*<li>*，然后询问该元素是否匹配选择器*li:first-child*。因为实际上是这样的，所以*matchesSelector()*方法返回*true*。
- en: 'live code: [http://jsfiddle.net/domenlightenment/9RayM](http://jsfiddle.net/domenlightenment/9RayM)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在线代码：[http://jsfiddle.net/domenlightenment/9RayM](http://jsfiddle.net/domenlightenment/9RayM)
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notes
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: matchesSelector has not seen much love from the browsers as its usage is behind
    browser prefixes *mozMatchesSelector()*, *webkitMatchesSelector()*, *oMatchesSelector()*,
    *msMatchesSelector()*
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: matchesSelector在浏览器中的使用情况并不乐观，因为它的使用方式落后于浏览器前缀*mozMatchesSelector()*、*webkitMatchesSelector()*、*oMatchesSelector()*、*msMatchesSelector()*。
- en: In the future *matchesSelector()* will be renamed to *matches()*
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将来*matchesSelector()*将被重命名为*matches()*。
