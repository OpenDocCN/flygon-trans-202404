- en: Considering Safety
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑安全性
- en: Considering Safety
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑安全性
- en: Const as Much as Possible
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尽可能使用const
- en: '`const` tells the compiler that a variable or method is immutable. This helps
    the compiler optimize the code and helps the developer know if a function has
    a side effect. Also, using `const &` prevents the compiler from copying data unnecessarily.
    The [comments on `const` from John Carmack](http://kotaku.com/454293019) are also
    a good read.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`const`告诉编译器变量或方法是不可变的。这有助于编译器优化代码，并帮助开发人员知道函数是否具有副作用。此外，使用`const &`可以防止编译器不必要地复制数据。John
    Carmack对`const`的[评论](http://kotaku.com/454293019)也值得一读。'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Carefully Consider Your Return Types
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仔细考虑你的返回类型
- en: Getters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取器
- en: Returning by `&` or `const &` can have significant performance savings when
    the normal use of the returned value is for observation
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`&`或`const &`返回可以在正常情况下观察返回值时节省显著的性能
- en: Returning by value is better for thread safety and if the normal use of the
    returned value is to make a copy anyhow, there's no performance lost
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过值返回对线程安全性更好，如果返回值的正常使用是进行复制，那么不会有性能损失
- en: If your API uses covariant return types, you must return by `&` or `*`
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的API使用协变返回类型，你必须通过`&`或`*`返回
- en: Temporaries and local values
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 临时值和本地值
- en: Always return by value.
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是通过值返回。
- en: 'references: [https://github.com/lefticus/cppbestpractices/issues/21](https://github.com/lefticus/cppbestpractices/issues/21)
    [https://twitter.com/lefticus/status/635943577328095232](https://twitter.com/lefticus/status/635943577328095232)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 参考链接：[https://github.com/lefticus/cppbestpractices/issues/21](https://github.com/lefticus/cppbestpractices/issues/21)
    [https://twitter.com/lefticus/status/635943577328095232](https://twitter.com/lefticus/status/635943577328095232)
- en: Do not pass and return simple types by const ref
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要通过const引用传递和返回简单类型
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Instead, pass and return simple types by value. If you plan not to change passed
    value, declare them as `const`, but not `const` refs:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，通过值传递和返回简单类型。如果计划不更改传递的值，请将它们声明为`const`，而不是`const`引用：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Why? Because passing and returning by reference leads to pointer operations
    instead by much more faster passing values in processor registers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？因为通过引用传递和返回会导致指针操作，而通过更快地在处理器寄存器中传递值。
- en: Avoid Raw Memory Access
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免原始内存访问
- en: Raw memory access, allocation and deallocation, are difficult to get correct
    in C++ without [risking memory errors and leaks](http://blog2.emptycrate.com/content/nobody-understands-c-part-6-are-you-still-using-pointers).
    C++11 provides tools to avoid these problems.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，原始内存访问、分配和释放很难正确处理，而不会[出现内存错误和泄漏的风险](http://blog2.emptycrate.com/content/nobody-understands-c-part-6-are-you-still-using-pointers)。C++11提供了避免这些问题的工具。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Use `std::array` or `std::vector` Instead of C-style Arrays
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`std::array`或`std::vector`代替C风格数组
- en: Both of these guarantee contiguous memory layout of objects and can (and should)
    completely replace your usage of C-style arrays for many of the reasons listed
    for not using bare pointers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者都保证对象的连续内存布局，并且可以（也应该）完全替代你使用裸指针的许多原因。
- en: Also, [avoid](http://stackoverflow.com/questions/3266443/can-you-use-a-shared-ptr-for-raii-of-c-style-arrays)
    using `std::shared_ptr` to hold an array.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，[避免](http://stackoverflow.com/questions/3266443/can-you-use-a-shared-ptr-for-raii-of-c-style-arrays)使用`std::shared_ptr`来持有数组。
- en: Use Exceptions
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用异常
- en: Exceptions cannot be ignored. Return values, such as using `boost::optional`,
    can be ignored and if not checked can cause crashes or memory errors. An exception,
    on the other hand, can be caught and handled. Potentially all the way up the highest
    level of the application with a log and automatic restart of the application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 异常不能被忽略。返回值，比如使用`boost::optional`，可以被忽略，如果不检查可能会导致崩溃或内存错误。另一方面，异常可以被捕获和处理。潜在地一直到应用程序的最高级别，记录并自动重新启动应用程序。
- en: Stroustrup, the original designer of C++, [makes this point](http://www.stroustrup.com/bs_faq2.html#exceptions-why)
    much better than I ever could.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: C++的原始设计者Stroustrup，[更好地阐述了这一点](http://www.stroustrup.com/bs_faq2.html#exceptions-why)。
- en: Use C++-style cast instead of C-style cast
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用C++风格的转换而不是C风格的转换
- en: Use the C++-style cast (static_cast<>, dynamic_cast<> ...) instead of the C-style
    cast. The C++-style cast allows more compiler checks and is considerable safer.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用C++风格的转换（static_cast<>, dynamic_cast<> ...）而不是C风格的转换。C++风格的转换允许更多的编译器检查，更加安全。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Additionally the C++ cast style is more visible and has the possibility to search
    for.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，C++转换风格更加可见，并且有搜索的可能性。
- en: But consider refactoring of program logic (for example, additional checking
    on overflow and underflow) if you need to cast `double` to `int`. Measure three
    times and cut 0.9999999999981 times.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果需要将`double`转换为`int`，请考虑重构程序逻辑（例如，对溢出和下溢进行额外检查）。三思而后行，少切0.9999999999981次。
- en: Do not define a variadic function
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要定义可变参数函数
- en: Variadic functions can accept a variable number of parameters. The probably
    best known example is printf(). You have the possibility to define this kind of
    functions by yourself but this is a possible security risk. The usage of variadic
    functions is not type safe and the wrong input parameters can cause a program
    termination with an undefined behavior. This undefined behavior can be exploited
    to a security problem. If you have the possibility to use a compiler that supports
    C++11, you can use variadic templates instead.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可变参数函数可以接受可变数量的参数。可能最为人熟知的例子是printf()。你有可能自己定义这种函数，但这可能存在安全风险。可变参数函数的使用不是类型安全的，错误的输入参数可能导致程序以未定义的行为终止。这种未定义的行为可能被利用成为安全问题。如果你有可能使用支持C++11的编译器，可以使用可变模板代替。
- en: '[It is technically possible to make typesafe C-style variadic functions with
    some compilers](https://github.com/lefticus/cppbestpractices/issues/53)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[某些编译器技术上可以实现类型安全的C风格可变参数函数](https://github.com/lefticus/cppbestpractices/issues/53)'
- en: Additional Resources
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他资源
- en: '[How to Prevent The Next Heartbleed](http://www.dwheeler.com/essays/heartbleed.html)
    by David Wheeler is a good analysis of the current state of code safety and how
    to ensure safe code.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何防止下一个Heartbleed](http://www.dwheeler.com/essays/heartbleed.html) 是David
    Wheeler对当前代码安全状态的良好分析，以及如何确保代码安全的建议。'
