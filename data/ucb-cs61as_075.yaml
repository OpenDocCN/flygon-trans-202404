- en: Message Passing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息传递
- en: What is Message Passing?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是消息传递？
- en: In conventional style, the operators are represented as functions that know
    about the different types; the types themselves are just data. In Data-Directed-Programming,
    the operators and types are all data, and there is one universal operate function
    that does the work. We can also stand conventional style on its head, representing
    the types as functions and the operations as mere data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统风格中，运算符被表示为知道不同类型的函数；类型本身只是数据。在数据导向编程中，运算符和类型都是数据，并且有一个通用的operate函数来完成工作。我们还可以颠倒传统的风格，将类型表示为函数，将操作仅表示为数据。
- en: In fact, not only are the types functions, but so are the individual data themselves.
    That is, there is a function (`make-circle` below) that represents the circle
    type, and when you invoke that function, it returns a function that represents
    the particular circle you give it as its argument. Each circle is an object and
    the function that represents it is a dispatch procedure that takes as its argument
    a message saying which operation to perform.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，不仅类型是函数，而且单个数据本身也是函数。也就是说，有一个函数（如下所示的`make-circle`），表示圆形类型，当你调用该函数时，它会返回一个代表你给定的特定圆形的函数作为其参数。每个圆形都是一个对象，表示它的函数是一个分发过程，它以一个消息作为其参数，该消息说明要执行哪个操作。
- en: The new definitions of `make-square` and `make-circle` are below.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`make-square`和`make-circle`的新定义。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Why is Message Passing Important?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么消息传递很重要？
- en: Message passing may seem like an overly complicated way to handle this problem
    of shapes, but we'll see in the next lesson that it's one of the key ideas in
    creating object-oriented programming. Message passing becomes much more powerful
    when combined with the idea of local state that we'll learn next week.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 消息传递可能看起来是处理这个形状问题的过于复杂的方式，但我们将在下一课中看到，它是创建面向对象编程的关键思想之一。当与我们下周将学习的局部状态的概念相结合时，消息传递变得更加强大。
- en: We seem to have abandoned tagged data; every shape type is just some function,
    and it's hard to tell which type of shape a given function represents. We could
    combine message passing with tagged data, if desired, by adding a `type` message
    that each object understands.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们似乎放弃了带标记的数据；每种形状类型只是一些函数，很难确定给定函数代表哪种类型的形状。如果需要，我们可以通过添加每个对象都理解的`type`消息来将消息传递与带标记的数据结合起来。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
