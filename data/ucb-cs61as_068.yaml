- en: Quotation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引用
- en: This section is a short review and overview of the `quote` function (more commonly
    seen as `'`) and its functionalities to help you prep for the next section, `calc.rkt`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本节是对 `quote` 函数（更常见的是 `'`）及其功能的简短回顾和概述，以帮助你准备下一节 `calc.rkt`。
- en: Refresher
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复习
- en: 'We have used quotation `''` as a shortcut to create words and sentences since
    the beginning of this class. The example below should be painstakingly simple
    to understand:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 自从这门课程开始，我们一直使用引号 `'` 作为创建单词和句子的快捷方式。下面的例子应该非常简单易懂：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The use of a single quote is actually a shortcut - `'a` is equivalent to `(quote
    a)`. Similarly, `'(a 1 b 2)` is equivalent to `(quote (a 1 b 2))`
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单引号实际上是一个快捷方式 - `'a` 等同于 `(quote a)`。类似地，`'(a 1 b 2)` 等同于 `(quote (a 1 b 2))`
- en: '**Test Your Understanding**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: The function quote (') is a special form.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 quote（'）是一个特殊形式。
- en: Predicates and Quotes
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谓词和引用
- en: To check for equality, we can use the primitive `eq?`
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查相等性，我们可以使用原始函数 `eq?`
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Another useful primitive for handling symbols/quotes is `memq`. `memq` takes
    two arguments, a symbol and a list. If the symbol is not contained in the list
    (i.e., it is not `eq?` to any item in the list), then `memq` returns `false`.
    Otherwise, it returns the sublist of the list beginning with the first occurrence
    of the symbol:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 处理符号/引用的另一个有用的原始函数是 `memq`。`memq` 接受两个参数，一个符号和一个列表。如果符号不包含在列表中（即它与列表中的任何项都不是
    `eq?`），那么 `memq` 返回 `false`。否则，它返回列表的子列表，从符号的第一次出现开始：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that the last example returns `#f` because `(eq? ''apple ''(apple android))`
    returns #f. Thus, `memq` does not work on deep lists.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '注意最后一个例子返回 `#f`，因为 `(eq? ''apple ''(apple android))` 返回 #f。因此，`memq` 在深层列表上不起作用。'
- en: 'You can implement `memq` with the following definition:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用以下定义来实现 `memq`：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Test Your Understanding**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试你的理解**'
- en: What do the following expressions return?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表达式返回什么？
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What Will Racket Print?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Racket 会打印什么？
- en: For each of the following expressions, predict what Racket will print without
    using the interpreter. Then, use the interpreter to check your answers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下每个表达式，预测 Racket 会打印什么，而不使用解释器。然后，使用解释器检查你的答案。
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Takeaways
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: 'In this subsection, you learned:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，你学到了：
- en: '`''hi` is a shorcut for `(quote hi)`.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''hi` 是 `(quote hi)` 的简写。'
- en: '`memq` is a predicate that determines whether a symbol is in a list.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`memq` 是一个判断符号是否在列表中的谓词。'
