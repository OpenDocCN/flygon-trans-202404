- en: AutoMore Automation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AutoMore 自动化
- en: '[PRE0]'
  id: totrans-1
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Require Import Coq.omega.Omega.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 Coq.omega.Omega。
- en: Require Import Maps.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 导入映射。
- en: Require Import Imp.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 Imp。
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Ltac inv H := inversion H; subst; clear H.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Ltac inv H := inversion H；替换；清除 H。
- en: 'Theorem ceval_deterministic: ∀c st st[1] st[2],'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '定理 ceval_deterministic: ∀c st st[1] st[2]，'
- en: c / st ⇓ st[1]  →
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: c / st ⇓ st[1] →
- en: c / st ⇓ st[2] →
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: c / st ⇓ st[2] →
- en: st[1] = st[2].
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: st[1] = st[2]。
- en: Proof.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: intros c st st[1] st[2] E[1] E[2];
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: intros c st st[1] st[2] E[1] E[2]；
- en: generalize dependent st[2];
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 推广依赖于 st[2]；
- en: induction E[1]; intros st[2] E[2]; inv E[2].
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对 E[1] 进行归纳；intros st[2] E[2]；inv E[2]。
- en: '- (* E_Skip *) reflexivity.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* E_Skip *) 反射性。'
- en: '- (* E_Ass *) reflexivity.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* E_Ass *) 反射性。'
- en: '- (* E_Seq *)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* E_Seq *)'
- en: assert (st' = st'0) as EQ[1].
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 断言 (st' = st'0) 如 EQ[1]。
- en: '{ (* Proof of assertion *) apply IHE1_1; assumption. }'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '{ (* 断言的证明 *) 应用 IHE1_1；假设。 }'
- en: subst st'0.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 替换 st'0。
- en: apply IHE1_2. assumption.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 IHE1_2。假设。
- en: (* E_IfTrue *)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: (* E_IfTrue *)
- en: '- (* b evaluates to true *)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* b 评估为 true *)'
- en: apply IHE1. assumption.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 IHE1。假设。
- en: '- (* b evaluates to false (contradiction) *)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* b 评估为 false（矛盾） *)'
- en: rewrite H in H[5]. inversion H[5].
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H[5] 中重写 H。反演 H[5]。
- en: (* E_IfFalse *)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: (* E_IfFalse *)
- en: '- (* b evaluates to true (contradiction) *)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* b 评估为 true（矛盾） *)'
- en: rewrite H in H[5]. inversion H[5].
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H[2] 中重写 H。反演 H[2]。
- en: '- (* b evaluates to false *)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* b 评估为 false *)'
- en: apply IHE1. assumption.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 IHE1。假设。
- en: (* E_WhileEnd *)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: (* E_WhileEnd *)
- en: '- (* b evaluates to false *)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* b 评估为 false *)'
- en: reflexivity.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 反射性。
- en: '- (* b evaluates to true (contradiction) *)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* b 评估为 true（矛盾） *)'
- en: rewrite H in H[2]. inversion H[2].
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H[2] 中重写 H。反演 H[2]。
- en: (* E_WhileLoop *)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: (* E_WhileLoop *)
- en: '- (* b evaluates to false (contradiction) *)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* b 评估为 false（矛盾） *)'
- en: rewrite H in H[4]. inversion H[4].
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H[4] 中重写 H。反演 H[4]。
- en: '- (* b evaluates to true *)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* b 评估为 true *)'
- en: assert (st' = st'0) as EQ[1].
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 断言 (st' = st'0) 如 EQ[1]。
- en: '{ (* Proof of assertion *) apply IHE1_1; assumption. }'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '{ (* 断言的证明 *) 应用 IHE1_1；假设。 }'
- en: subst st'0.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 替换 st'0。
- en: apply IHE1_2. assumption. Qed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 IHE1_2。假设。Qed。
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Example auto_example_1 : ∀(P Q R: Prop),'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '例子 auto_example_1: ∀(P Q R：命��)，'
- en: (P → Q) → (Q → R) → P → R.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: (P → Q) → (Q → R) → P → R。
- en: Proof.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: intros P Q R H[1] H[2] H[3].
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: intros P Q R H[1] H[2] H[3].
- en: apply H[2]. apply H[1]. assumption.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 H[2]。应用 H[1]。假设。
- en: Qed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Qed。
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Example auto_example_1'' : ∀(P Q R: Prop),'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例子 auto_example_1'：∀(P Q R：命题)，
- en: (P → Q) → (Q → R) → P → R.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: (P → Q) → (Q → R) → P → R。
- en: Proof.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: intros P Q R H[1] H[2] H[3].
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: intros P Q R H[1] H[2] H[3]。
- en: auto.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: auto。
- en: Qed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Qed。
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Example auto_example_2 : ∀P Q R S T U : Prop,'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '例子 auto_example_2: ∀P Q R S T U：命题，'
- en: (P → Q) →
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: (P → Q) →
- en: (P → R) →
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: (P → R) →
- en: (T → R) →
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: (T → R) →
- en: (S → T → U) →
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: (S → T → U) →
- en: ((P→Q) → (P→S)) →
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ((P→Q) → (P→S)) →
- en: T →
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: T →
- en: P →
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: P →
- en: U.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: U。
- en: Proof. auto. Qed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。auto。Qed。
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Example auto_example_3 : ∀(P Q R S T U: Prop),'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '例子 auto_example_3: ∀(P Q R S T U：命题)，'
- en: (P → Q) →
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: (P → Q) →
- en: (Q → R) →
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: (Q → R) →
- en: (R → S) →
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: (R → S) →
- en: (S → T) →
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: (S → T) →
- en: (T → U) →
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: (T → U) →
- en: P →
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: P →
- en: U.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: U。
- en: Proof.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: (* When it cannot solve the goal, auto does nothing *)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: (* 当它无法解决目标时，auto 什么也不做 *)
- en: auto.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: auto。
- en: (* Optional argument says how deep to search (default is 5) *)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: (* 可选参数表示搜索的深度（默认为 5） *)
- en: auto 6.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: auto 6。
- en: Qed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Qed。
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Example auto_example_4 : ∀P Q R : Prop,'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '例子 auto_example_4: ∀P Q R：命题，'
- en: Q →
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Q →
- en: (Q → R) →
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: (Q → R) →
- en: P ∨ (Q ∧ R).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: P ∨ (Q ∧ R)。
- en: Proof. auto. Qed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。auto。Qed。
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Lemma le_antisym : ∀n m: nat, (n ≤ m ∧ m ≤ n) → n = m.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '引理 le_antisym: ∀n m：自然数，(n ≤ m ∧ m ≤ n) → n = m。'
- en: Proof. intros. omega. Qed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。intros。omega。Qed。
- en: 'Example auto_example_6 : ∀n m p : nat,'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '例子 auto_example_6: ∀n m p：自然数，'
- en: (n ≤ p → (n ≤ m ∧ m ≤ n)) →
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: (n ≤ p → (n ≤ m ∧ m ≤ n)) →
- en: n ≤ p →
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: n ≤ p →
- en: n = m.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: n = m。
- en: Proof.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: intros.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: intros。
- en: auto. (* does nothing: auto doesn't destruct hypotheses! *)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: auto。(* 什么也不做：auto 不会分解假设！ *)
- en: auto using le_antisym.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 le_antisym 自动。
- en: Qed.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Qed。
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Hint Resolve T.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Hint Resolve T。
- en: at the top level, where T is a top-level theorem or a
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在顶层，其中 T 是顶层定理或
- en: constructor of an inductively defined proposition (i.e., anything
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个归纳定义命题的构造函数（即，任何东西
- en: whose type is an implication).  As a shorthand, we can write
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其类型是一个蕴含）。作为简写，我们可以写
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Hint Unfold d.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Hint Unfold d。
- en: where d is a defined symbol, so that auto knows to expand uses
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中 d 是一个定义的符号，因此 auto 知道要展开使用
- en: of d, thus enabling further possibilities for applying lemmas that
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 的 d，从而为应用引理打开进一步的可能性
- en: it knows about.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它知道的。
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now let's take a first pass over ceval_deterministic to simplify
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在让我们首先简化 ceval_deterministic
- en: the proof script.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明脚本。
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When we are using a particular tactic many times in a proof, we
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们在证明中多次使用特定策略时
- en: can use a variant of the Proof command to make that tactic into
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用 Proof 命令的变体将该策略转换为
- en: a default within the proof.  Saying Proof with t (where t is
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在证明中的默认。说 Proof with t（其中 t 是
- en: an arbitrary tactic) allows us to use t[1]... as a shorthand for
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任意策略）允许我们使用 t[1]... 作为 t 的缩写
- en: t[1];t within the proof.  As an illustration, here is an alternate
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: t[1];t 在证明中。 作为示例，这里是一个替代
- en: version of the previous proof, using Proof with auto.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 先前证明的版本，使用Proof with auto。
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Searching For Hypotheses
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找假设
- en: The proof has become simpler, but there is still an annoying
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证明变得更简单了，但仍然有一个恼人的
- en: amount of repetition. Let's start by tackling the contradiction
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重复的数量。让我们从解决矛盾开始
- en: cases. Each of them occurs in a situation where we have both
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 情况。每种情况发生在我们同时拥有
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: H[2]: beval st b = true
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'H[2]: beval st b = true'
- en: as hypotheses.  The contradiction is evident, but demonstrating it
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为假设。矛盾是显而易见的，但证明它
- en: 'is a little complicated: we have to locate the two hypotheses H[1]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有点复杂：我们必须找到两个假设H[1]
- en: and H[2] and do a rewrite following by an inversion.  We'd
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和H[2]并进行重写，然后进行反演。我们会
- en: like to automate this process.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 喜欢自动化这个过程。
- en: (In fact, Coq has a built-in tactic congruence that will do the
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （事实上，Coq有一个内置的tactic congruence，可以做到
- en: job in this case.  But we'll ignore the existence of this tactic
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下完成��这项工作。但我们将忽略这个tactic的存在
- en: for now, in order to demonstrate how to build forward search
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前，为了演示如何构建前向搜索
- en: tactics by hand.)
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 手动tactics。）
- en: As a first step, we can abstract out the piece of script in
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为第一步，我们可以将脚本中的一部分抽象出来
- en: question by writing a little function in Coq's tactic programming
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过在Coq的tactic编程中编写一个小函数来回答
- en: language, Ltac.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语言，Ltac。
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That was is a bit better, but not much.  We really want Coq to
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 那是有点好一点，但不多。我们真的希望Coq能够
- en: discover the relevant hypotheses for us.  We can do this by using
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为我们发现相关的假设。我们可以通过使用
- en: the match goal facility of Ltac.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Ltac的match goal功能。
- en: '[PRE15]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The match goal tactic looks for two distinct hypotheses that
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: match goal tactic寻找两个不同的假设
- en: have the form of equalities, with the same arbitrary expression
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有相同任意表达式的等式形式
- en: E on the left and with conflicting boolean values on the right.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: E在左边，右边有冲突的布尔值。
- en: If such hypotheses are found, it binds H[1] and H[2] to their
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果找到这样的假设，它将把H[1]和H[2]绑定到它们的
- en: names and applies the rwinv tactic to H[1] and H[2].
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称并将rwinv tactic应用于H[1]和H[2]。
- en: Adding this tactic to the ones that we invoke in each case of the
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将这个tactic添加到我们在每种情况下调用的tactic中
- en: induction handles all of the contradictory cases.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 归纳处理所有矛盾情况。
- en: '[PRE16]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let's see about the remaining cases. Each of them involves
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们看看剩下的情况。每种情况都涉及
- en: applying a conditional hypothesis to extract an equality.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用条件假设来提取一个等式。
- en: Currently we have phrased these as assertions, so that we have to
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前我们已经将这些表述为断言，所以我们必须
- en: predict what the resulting equality will be (although we can then
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预测结果的等式将是什么（尽管我们可以
- en: use auto to prove it).  An alternative is to pick the relevant
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用auto来证明它）。另一种方法是选择相关的
- en: 'hypotheses to use and then rewrite with them, as follows:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用的假设，然后按照以下方式重写：
- en: '[PRE17]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now we can automate the task of finding the relevant hypotheses to
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们可以自动化找到相关假设的任务
- en: rewrite with.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重写。
- en: '[PRE18]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The pattern ∀ x, ?P x → ?L = ?R matches any hypothesis of
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模式∀ x，?P x → ?L = ?R匹配任何假设
- en: the form "for all x, *some property of x* implies *some equality*."  The property
    of x is bound to the pattern variable
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 形式为“对于所有x，*x的某个属性*意味着*某个相等*。” x的属性绑定到模式变量
- en: P, and the left- and right-hand sides of the equality are bound
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: P，等式的左右两侧被绑定
- en: to L and R.  The name of this hypothesis is bound to H[1].
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到L和R。这个假设的名称绑定到H[1]。
- en: Then the pattern ?P ?X matches any hypothesis that provides
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后模式?P ?X匹配任何提供
- en: evidence that P holds for some concrete X.  If both patterns
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证据表明P对某个具体X成立。如果两种模式
- en: succeed, we apply the rewrite tactic (instantiating the
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 成功，我们应用重写tactic（实例化
- en: quantified x with X and providing H[2] as the required
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用X量化x并提供H[2]作为所需的
- en: evidence for P X) in all hypotheses and the goal.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 证据P X)在所有假设和目标中。
- en: 'One problem remains: in general, there may be several pairs of'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个问题仍然存在：一般来说，可能有几对
- en: hypotheses that have the right general form, and it seems tricky
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有正确一般形式的假设，看起来很棘手
- en: to pick out the ones we actually need.  A key trick is to realize
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择我们实际需要的那些。一个关键技巧是意识到
- en: 'that we can *try them all*!  Here''s how this works:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以*尝试它们全部*！这是它的工作原理：
- en: each execution of match goal will keep trying to find a valid pair of hypotheses
    until the tactic on the RHS of the match succeeds; if there are no such pairs,
    it fails;
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次执行match goal都会继续尝试找到一对有效的假设，直到match右侧的tactic成功为止；如果没有这样的对，它就会失败；
- en: rewrite will fail given a trivial equation of the form X = X;
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重写将失败，给出形式为X = X的平凡方程；
- en: we can wrap the whole thing in a repeat, which will keep doing useful rewrites
    until only trivial ones are left.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将整个事情包装在一个重复中，这将一直进行有用的重写，直到只剩下琐碎的重写。
- en: '[PRE19]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The big payoff in this approach is that our proof script
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种方法的巨大回报是我们的证明脚本
- en: should be robust in the face of modest changes to our language.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应该在我们的语言面对适度变化时具有鲁棒性。
- en: For example, we can add a REPEAT command to the language.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，我们可以向语言添加一个 REPEAT 命令。
- en: '[PRE20]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: REPEAT behaves like WHILE, except that the loop guard is
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: REPEAT的行为类似于WHILE，只是循环保护是
- en: checked *after* each execution of the body, with the loop
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在每次执行主体之后检查*，循环
- en: repeating as long as the guard stays *false*.  Because of this,
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只要保持*false*，就重复。由于这个原因，
- en: the body will always execute at least once.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主体将始终至少执行一次。
- en: '[PRE21]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Our first attempt at the proof is disappointing: the E_RepeatEnd'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们对证明的第一次尝试令人失望：E_RepeatEnd
- en: and E_RepeatLoop cases are not handled by our previous
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和 E_RepeatLoop 情况不被我们之前处理
- en: automation.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自动化。
- en: '[PRE22]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: To fix this, we just have to swap the invocations of find_eqn
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要解决这个问题，我们只需交换 find_eqn 的调用
- en: and find_rwinv.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和 find_rwinv。
- en: '[PRE23]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: These examples just give a flavor of what "hyper-automation" can
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些例子只是展示了“超自动化”可以做什么
- en: achieve in Coq.  The details of match goal are a bit tricky, and
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Coq 中实现。match goal 的细节有点棘手，而且
- en: debugging scripts using it is, frankly, not very pleasant.  But it
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用它调试脚本，坦率地说，不是很愉快。但是
- en: is well worth adding at least simple uses to your proofs, both to
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值得至少将简单用法添加到您的证明中，以便
- en: avoid tedium and to "future proof" them.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 避免枯燥和“未来证明”它们。
- en: eapply and eauto
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: eapply 和 eauto
- en: To close the chapter, we'll introduce one more convenient feature
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了结束本章，我们将介绍一个更方便的功能
- en: 'of Coq: its ability to delay instantiation of quantifiers.  To'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Coq的一个特点：它能够延迟量词的实例化。为了
- en: motivate this feature, recall this example from the [Imp](Imp.html)
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了激发这一特性，回想一下来自[Imp](Imp.html)的例子
- en: 'chapter:'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 章节：
- en: '[PRE24]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the first step of the proof, we had to explicitly provide a
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在证明的第一步中，我们不得不明确提供一个
- en: longish expression to help Coq instantiate a "hidden" argument to
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 较长的表达式帮助 Coq 实例化一个“隐藏”的参数
- en: the E_Seq constructor.  This was needed because the definition
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: E_Seq构造函数。这是必要的，因为定义
- en: of E_Seq...
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: E_Seq的...
- en: '[PRE25]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Example ceval''_example1:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 例子 ceval'_example1：
- en: (X ::= ANum 2;;
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: (X ::= ANum 2;;
- en: IFB BLe (AId X) (ANum 1)
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: IFB BLe（AId X）（ANum 1）
- en: THEN Y ::= ANum 3
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 Y ::= ANum 3
- en: ELSE Z ::= ANum 4
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: ELSE Z ::= ANum 4
- en: FI)
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: FI)
- en: / empty_state
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: / 空状态
- en: ⇓ (t_update (t_update empty_state X 2) Z 4).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: ⇓ (t_update (t_update empty_state X 2) Z 4)。
- en: Proof.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。
- en: eapply E_Seq. (* 1 *)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: eapply E_Seq。(* 1 *)
- en: '- apply E_Ass. (* 2 *)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '- 应用 E_Ass。(* 2 *)'
- en: reflexivity. (* 3 *)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性。(* 3 *)
- en: '- (* 4 *) apply E_IfFalse. reflexivity. apply E_Ass. reflexivity.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '- (* 4 *) 应用 E_IfFalse。一致性。应用 E_Ass。一致性。'
- en: Qed.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Qed.
- en: '[PRE26]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Hint Constructors ceval.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Hint 构造者 ceval。
- en: Hint Transparent state.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Hint 透明状态。
- en: Hint Transparent total_map.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Hint 透明 total_map。
- en: Definition st[12] := t_update (t_update empty_state X 1) Y 2.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 st[12] := t_update（t_update empty_state X 1）Y 2。
- en: Definition st[21] := t_update (t_update empty_state X 2) Y 1.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 st[21] := t_update（t_update empty_state X 2）Y 1。
- en: 'Example auto_example_8 : ∃s'','
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 例子 auto_example_8：∃s'，
- en: (IFB (BLe (AId X) (AId Y))
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: （IFB（BLe（AId X）（AId Y））
- en: THEN (Z ::= AMinus (AId Y) (AId X))
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 然后（Z ::= AMinus（AId Y）（AId X））
- en: ELSE (Y ::= APlus (AId X) (AId Z))
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: ELSE（Y ::= APlus（AId X）（AId Z））
- en: FI) / st[21] ⇓ s'.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: FI）/ st[21] ⇓ s'。
- en: Proof. eauto. Qed.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。eauto。Qed。
- en: '[PRE27]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
