- en: Course Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程概述
- en: 'Q: What will we study in this course?'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'Q: 我们在这门课程中会学习什么？'
- en: 'There will be two primary themes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这门课程有两个主要主题：
- en: Implementing and analyzing efficient data structures, particularly in the context
    of functional programming languages.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数编程语言的上下文中实现和分析高效的数据结构。
- en: Functional reactive programming (FRP) for interactive programs.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于交互式程序的函数响应式编程（FRP）。
- en: Why? Well, because all of you have seen at least one functional programming
    language before (Racket in 151 or Haskell in 161, and perhaps Standard ML in 221
    or 226x), there's an implicit "Advanced" or "Topics in" that prefixes the "Functional
    Programming" name of this course. So, we need to choose *some* topics to study.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？嗯，因为你们所有人至少已经见过一种功能编程语言（151 中的 Racket 或 161 中的 Haskell，也许是 221 或 226x 中的
    Standard ML），这门课程的“功能编程”名称前面有一个隐含的“高级”或“主题”，所以我们需要选择 *一些* 主题来学习。
- en: There's certainly plenty of interesting and important topics related to data
    structures, some of which you may have seen in other courses. But probably few
    of you have seen *all* of the data structures and analysis techniques we will
    cover, and fewer still will have spent much time with them in the context of a
    purely functional language. That's one good topic.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与数据结构相关的许多有趣和重要的主题，其中一些你可能在其他课程中已经见过。但是你们可能没有见过 *所有* 我们将要涵盖的数据结构和分析技术，更少有人会在纯函数语言的上下文中花费大量时间来研究它们。这是一个很好的主题。
- en: Functional reactivity is a neat idea for building interactive programs. It's
    not really mainstream yet, so probably few of you have spent much time with it
    before. That's makes for another good topic.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 函数响应是一种构建交互式程序的好主意。它现在还不是主流，所以你们可能之前没有花过太多时间研究它。这是另一个很好的主题。
- en: And as it happens, I have wanted an excuse to learn more about both of these,
    so why not make a course out of it? (I am curious, and so can you!)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 恰好我也想找个借口学习更多关于这两个方面的知识，那么为什么不把这门课程做成呢？（我很好奇，你也可以！）
- en: 'Q: What language will we use?'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'Q: 我们会使用什么语言？'
- en: '![](../Images/b3da096a987ed26a87149cc6ccec1a4a.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3da096a987ed26a87149cc6ccec1a4a.jpg)'
- en: The vehicle we will use for programming is [Elm](http://elm-lang.org/), an exciting,
    new-kid-on-the-block language that features FRP at its core and that compiles
    to JavaScript for browser integration.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用于编程的工具是 [Elm](http://elm-lang.org/)，这是一种令人兴奋的新语言，以 FRP 为核心，并且编译为 JavaScript
    以便与浏览器集成。
- en: The core of Elm, on top of which FRP primitives are built, is a small dialect
    of ML.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Elm 的核心是 ML 的一个小方言，FRP 基元构建在其之上。
- en: Machine Learning... huh?
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 机器学习... 嗯？
- en: No, not *that* ML. In our world, [ML](http://en.wikipedia.org/wiki/ML_%28programming_language%29)
    refers to a family of functional programming languages, developed since the 1970s,
    which has served as seminal work for decades of programming language design and
    engineering work.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不是，不是*那个* ML。在我们的世界中，[ML](http://en.wikipedia.org/wiki/ML_%28programming_language%29)
    指的是一系列功能编程语言家族，自上世纪70年代以来发展壮大，对几十年的编程语言设计和工程工作产生了重要影响。
- en: I like to think of ML as kind of sitting halfway between Racket and Haskell
    for several reasons.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢将 ML 看作是一种坐落在 Racket 和 Haskell 之间的语言，有几个原因。
- en: '*Evaluation Strategy*.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*评估策略*。'
- en: Like Racket and pretty much every language you may know besides Haskell, Elm
    is *eager* — expressions will be evaluated even when their resulting values are
    not immediately, or ever, needed elsewhere in the program.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像 Racket 和你可能知道的几乎每种语言一样，Elm 是 *急切* 的 —— 表达式将被评估，即使它们的结果值在程序的其他地方不是立即，或者永远也不是立即，需要的。
- en: Interestingly, however, we will see that *lazy* evaluation is actually crucial
    to building efficient data structures in purely functional languages (i.e. without
    mutable variables).
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有趣的是，我们将看到*惰性*评估实际上对于在纯函数语言中构建有效的数据结构是至关重要的（即不使用可变变量）。
- en: To bridge this gap, Elm (and most other ML dialects) do provide mechanisms for
    lazy evaluation on top of the eager semantics.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了弥合这一差距，Elm（以及大多数其他 ML 方言）确实提供了在急切语义之上进行惰性评估的机制。
- en: '*Types*.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*类型*。'
- en: Unlike Racket but like Haskell, ML has a static type system that rejects programs
    that might possibly (but not necessarily) fail with certain kinds of run-time
    errors.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不像 Racket 但像 Haskell，ML 有一个静态类型系统，会拒绝可能（但不一定）在运行时出现某些类型的错误的程序。
- en: ML type systems feature a bunch of really neat and powerful features — such
    as parametric polymorphism and automatic type inference — but generally do not
    employ mechanisms like Haskell's type classes.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ML 类型系统具有一系列非常聪明和强大的功能 —— 比如参数多态性和自动类型推断 —— 但通常不使用像 Haskell 的类型类之类的机制。
- en: 'Note: there is a statically typed dialect of Racket called [Typed Racket](http://docs.racket-lang.org/ts-guide/).
    In fact, designing typed dialects of "dynamic" languages like Racket, JavaScript,
    Python, etc. is an active area of programming languages research.'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意：Racket 有一个名为[Typed Racket](http://docs.racket-lang.org/ts-guide/)的静态类型方言。事实上，设计
    Racket、JavaScript、Python 等"动态"语言的静态类型方言是编程语言研究的一个活跃领域。
- en: '*Side Effects*.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*副作用*。'
- en: Even when functional programming languages do offer imperative (or *impure*)
    features such as mutable variables, their use is discouraged and typically used
    in small, local ways.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使函数式编程语言提供了诸如可变变量等命令式（或*不纯*）特性，其使用也是不鼓励的，通常以小范围、局部的方式使用。
- en: Although both ML and Haskell languages do have features that produce side effects,
    their type systems track such features in very different ways. Such effects typically
    "go outside" an ML type system, whereas in Haskell effects are recorded in types.
    Functions of type `Int -> String` in ML may possibly perform I/O with the user,
    but in Haskell they cannot. Instead, such functions would have type `IO (Int ->
    String)` in Haskell.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管 ML 和 Haskell 语言都具有产生副作用的特性，但它们的类型系统以非常不同的方式跟踪这些特性。这样的效果通常"越过"了 ML 类型系统，而在
    Haskell 中效果记录在类型中。在 ML 中类型为 `Int -> String` 的函数可能与用户进行 I/O，但在 Haskell 中不可以。相反，这样的函数在
    Haskell 中的类型将是 `IO (Int -> String)`。
- en: Although Elm does not offer mutable variables, we will see other mechanisms
    that it provides which break out of the purely functional paradigm.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然 Elm 不提供可变变量，但我们将看到它提供的其他机制，打破了纯函数式范例。
- en: What makes Elm a "small" dialect?
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 是什么让 Elm 成为一个"小"方言？
- en: Practical languages that build on an ML core typically have many additional
    features — such as objects, modules, threads, exceptions, laziness, and many forms
    of syntactic sugar — that help with real-world programming. Popular full-fledged
    ML dialects include [Standard ML](http://sml-family.org/), [OCaml](https://ocaml.org/),
    and [F#](http://fsharp.org/). Elm, in comparison, is a much smaller ML language
    with fewer additional features beyond those for FRP.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 建立在 ML 核心上的实用语言通常具有许多附加功能，如对象、模块、线程、异常、惰性和许多形式的语法糖，这些功能有助于实际编程。流行的成熟 ML 方言包括[标准
    ML](http://sml-family.org/)、[OCaml](https://ocaml.org/)和[F#](http://fsharp.org/)。相比之下，Elm
    是一种功能更少的 ML 语言，除了 FRP 之外几乎没有其他附加功能。
- en: 'Q: What else should I know?'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'Q: 我还应该知道什么？'
- en: This course will feature usual things like homeworks, exams, grades, TAs, etc.
    See the [Course Info](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/CourseInfo.html)
    page for details.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程将包括作业、考试、成绩、助教等常见内容。详细信息请参阅[课程信息](https://www.classes.cs.uchicago.edu/archive/2015/winter/22300-1/CourseInfo.html)页面。
- en: If you like programming and math (in other words, if you like computer science),
    I think you will like this course.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢编程和数学（换句话说，如果你喜欢计算机科学），我认为你会喜欢这门课程。
- en: If you like only courses that are super-polished, however, then perhaps this
    course is not for you. This is the first time I'm teaching these topics, some
    of which, like I said, I will be grokking for the first time. In addition, although
    the Elm language, libraries, and tools are really coming along nicely, it is still
    a small language with a small (but helpful!) community. As a result of these factors,
    there may be times during the course when you will have to get your hands a bit
    dirty. That said, I think we'll have some fun.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你只喜欢非常精致的课程，那么也许这门课程不适合你。这是我第一次教授这些主题，其中一些，如我所说，我将是第一次理解。此外，尽管 Elm 语言、库和工具确实进展顺利，但它仍然是一种小语言，拥有一个小（但有帮助！）的社区。因此，在课程期间可能会有一些需要动手的时候。话虽如此，我认为我们会玩得很开心。
