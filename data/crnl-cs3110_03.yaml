- en: 'Lecture 3: Tuples, records and datatypes'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三讲：元组、记录和数据类型
- en: Tuples
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元组
- en: Every function in OCaml takes exactly one value and returns exactly one result. 
    For instance, our `squareRoot` function takes one float value and returns one
    float value.  The advantage of always taking one argument and returning one result
    is that the language is extremely uniform.   Later, we'll see that this buys us
    a lot when it comes to *composing* new functions out of old ones.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在OCaml中，每个函数都接受一个值并返回一个结果。例如，我们的`squareRoot`函数接受一个浮点数值并返回一个浮点数值。始终接受一个参数并返回一个结果的优势在于语言非常统一。稍后，我们将看到，当涉及将旧函数组合成新函数时，这给我们带来了很多好处。
- en: 'But it looks like we can write functions that take more than one argument! 
    For instance, we may write:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但看起来我们可以编写接受多个参数的函数！例如，我们可以写成：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: and it appears as if max1 takes two arguments.  In truth max1 takes one argument
    that is a *2-tuple* (also known as an *ordered pair*.)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来`max1`接受两个参数。事实上，`max1`接受一个*2元组*（也称为*有序对*）作为参数。
- en: In general, an *n-tuple* is an ordered sequence of *n* values written in parenthesis
    and separated by commas as (*expr, expr,* ..., *expr*).  For instance, `(42, "hello",
    true)` is a 3-tuple that contains the integer `42` as its first component, the
    string `"hello"` as its second component, and the boolean value `true` as its
    third component.  Note that *n* can be 0, which gives the empty tuple `()`.  This
    is called "unit" in OCaml.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，*n元组*是一个有序的*n*个值的序列，用括号括起来，用逗号分隔，如(*expr, expr,* ..., *expr*)。例如，`(42,
    "hello", true)`是一个3元组，它包含整数`42`作为其第一个分量，字符串`"hello"`作为其第二个分量，布尔值`true`作为其第三个分量。注意*n*可以为0，这给出了空元组`()`。这在OCaml中称为"unit"。
- en: 'When you call a function in OCaml that takes more than one argument, you can
    pass it the arguments in a tuple.  For instance, when we write:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在OCaml中调用一个接受多个参数的函数时，您可以将参数传递给一个元组。例如，当我们写：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'we''re passing the 2-tuple `(3.1415, 2.718)` to the function `max1`.  We could
    just as well write:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将2元组`(3.1415, 2.718)`传递给函数`max1`。我们也可以写成：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: which would then allow us to write
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们能够编写
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The type of an n-tuple is written *t*[1]`*`...`*`*t[n]*.  For instance, the
    type of args above is `float * float`.  This notation is based on the Cartesian
    product in mathematics (i.e., the plane is R^2 = R * R).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: n元组的类型写作*t*[1]`*`...`*`*t[n]*。例如，上面args的类型是`float * float`。这种表示法基于数学中的笛卡尔积（即平面是R^2
    = R * R）。
- en: Similarly, the 3-tuple `(42, "hello", true)` has type `int * string * bool`. 
    Notice that `max1` has type `(float * float) -> float`, indicating that it takes
    one argument (a 2-tuple of floats) and returns one result (a float).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，3元组`(42, "hello", true)`的类型为`int * string * bool`。请注意，`max1`的类型为`(float
    * float) -> float`，表示它接受一个参数（包含两个浮点数的2元组）并返回一个结果（一个浮点数）。
- en: 'Combining what we''ve seen so far, we can write a grammar for the basic types
    as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 结合我们迄今所见，我们可以写出基本类型的语法如下：
- en: '*t*  ::=  `int`  |  `float`  |  `bool`  |  `string`  |  `char`  |   *t*[1]
    `*` ... `*` *t[n]*  |  *t*[1] `->` *t*[2]  |  `(`*t*`)`'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*t*  ::=  `int`  |  `float`  |  `bool`  |  `string`  |  `char`  |   *t*[1]
    `*` ... `*` *t[n]*  |  *t*[1] `->` *t*[2]  |  `(`*t*`)`'
- en: There are a few tricky parts to this. The two most important are that `->` has
    lower precedence than `*`, so the types `(float * float) -> float` and `float
    * float -> float` are exactly the same type. The second is that `->` is right-associative,
    which means that
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这有一些棘手的部分。最重要的两点是`->`的优先级低于`*`，因此类型`(float * float) -> float`和`float * float
    -> float`是完全相同的类型。第二点是`->`是右结合的，这意味着
- en: '*t*[1]`->`*t*[2]`->`*t*[3]        and        *t*[1] -> (*t*[2]`->`*t*[3])'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*t*[1]`->`*t*[2]`->`*t*[3]        和        *t*[1] -> (*t*[2]`->`*t*[3])'
- en: are the same. This will come up when higher-order functions are discussed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 是相同的。这将在讨论高阶函数时出现。
- en: You can extract the first two components of a tuple by using the `fst` and `snd`
    operators, which retreive the first and second elements of a tuple, respectively. 
    However, there are no analogous functions for the other elements of a tuple.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`fst`和`snd`运算符提取元组的前两个分量，它们分别检索元组的第一个和第二个元素。然而，对于元组的其他元素没有类似的函数。
- en: 'So, for instance, we can rewrite the max function as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，我们可以将max函数重写如下：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'and this is completely equivalent to the first definition.  This emphasizes
    that `max` really does take just one argument -- a pair of floating point numbers. 
    But of course, it''s somewhat less readable than the first definition.  We can
    get closer to the first definition by declaring local values r1 and r2 and bind
    them to the appropriate components of the pair:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 而这与第一个定义完全等价。这强调了 `max` 真的只接受一个参数 -- 一个浮点数对。但是当然，它比第一个定义稍微不那么可读。我们可以通过声明局部值
    `r1` 和 `r2` 并将它们绑定到对的适当组件来更接近第一个定义：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Pattern-matching tuples
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式匹配元组
- en: 'This is a little better because we avoid re-computing the same expressions
    over and over again.  However, it''s still not as succinct as our first definition
    of max.  This is because the first definition uses *pattern matching* to implicitly
    de-construct the 2-tuple and bind the components to variables `r1` and `r2`. 
    You can use pattern matching in a `let` declaration or in a function definition
    to deconstruct a tuple.  A tuple pattern is always of the form `(`*x*[1]:*t*[1], *x*[2]:*t*[2],..., *x[n]*:*t[n]*`)`. 
    Pattern matching (either in a `let` or in the function declaration) is the encouraged
    method of extracting elements from tuples. It is often more efficient, and is
    almost always more concise and easier to read. For instance, here is yet another
    version of max that uses a pattern in a `let` declaration to deconstruct the pair:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做会稍微好一些，因为我们避免了一遍又一遍地重新计算相同的表达式。但是，仍然不如我们第一个定义的 max 那样简洁。这是因为第一个定义使用*模式匹配*来隐式解构
    2-元组并将组件绑定到变量 `r1` 和 `r2`。您可以在 `let` 声明或函数定义中使用模式匹配来解构元组。元组模式始终为 `(`*x*[1]:*t*[1],
    *x*[2]:*t*[2],..., *x[n]*:*t[n]*`)` 的形式。模式匹配（无论是在 `let` 还是函数声明中）是从元组中提取元素的推荐方法。它通常更有效，并且几乎总是更简洁且更易读。例如，这是另一个使用
    `let` 声明中的模式来解构对的 max 版本：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the example above, the `let` declaration matches the pair against the tuple-pattern
    `(r1, r2)`.   This binds `r1` to the first component `(fst pair)` of the pair
    and `r2` to the second component `(snd pair)`.  A similar thing happens when you
    write a function using a tuple-pattern as in the original definition of max:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`let` 声明将对与元组模式 `(r1, r2)` 匹配。这将 `r1` 绑定到对的第一个组件 `(fst pair)`，`r2` 绑定到对的第二个组件
    `(snd pair)`。当您编写一个使用元组模式的函数时，就像 max 的原始定义中一样，也会发生类似的情况：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, when we call max with the pair `(3.1415, 2.718)`, the tuple is matched
    against the pattern `(r1, r2)` and `r1` is bound to `3.1415` and `r2` to `2.718`. 
    As we'll see later on, OCaml uses pattern matching in a number of places to simplify
    expressions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当我们使用对 `(3.1415, 2.718)` 调用 max 时，元组与模式 `(r1, r2)` 匹配，`r1` 绑定到 `3.1415`，`r2`
    绑定到 `2.718`。正如我们后面将看到的那样，OCaml 在许多地方使用模式匹配来简化表达式。
- en: 'Suppose we wanted to extract both the minimum and the maximum of two numbers
    in a single function. With tuples, this is easy: we just return a tuple containing
    both results. Using a let, we can extract both results into separate variables
    conveniently, too:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要在单个函数中提取两个数字的最小值和最大值。使用元组，这很容易：我们只需返回一个包含两个结果的元组。使用 let，我们也可以方便地将两个结果分别提取到不同的变量中：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This binds `mn` to `1.0` and `mx` to `2.0`. The type of `minmax` is `(float
    * float) -> (float * float)`, which we can write without the parentheses because
    `*` has a higher precedence than `->` when writing type expressions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 `mn` 绑定到 `1.0`，`mx` 绑定到 `2.0`。`minmax` 的类型是 `(float * float) -> (float *
    float)`，我们可以省略括号，因为在写类型表达式时 `*` 的优先级高于 `->`。
- en: 'In summary:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 总结：
- en: every function in OCaml takes one argument and returns one result.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OCaml 中的每个函数都接受一个参数并返回一个结果。
- en: the value of the expression `(`*e*[1]`,` ...`,` *e[n]*`)` is an *n*-tuple.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式 `(`*e*[1]`,` ...`,` *e[n]*`)` 的值是一个 *n*-元组。
- en: tuple types look like  *t*[1] `*` ... `*` *t[n]*
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组类型看起来像 *t*[1] `*` ... `*` *t[n]*
- en: the functions `fst` and `snd` extract the first and second components of a 2-tuple
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数 `fst` 和 `snd` 提取 2-元组的第一个和第二个组件
- en: '`let``(`*x*[1]:*t*[1], *x*[2]:*t*[2],..., *x[n]*:*t[n]*`)`*=* *e*matches the
    value of the expression *e*, which must be an *n*-tuple, against the tuple-pattern
    `(`*x*[1]:*t*[1], *x*[2]:*t*[2],..., *x[n]*:*t[n]*`)` and binds the identifiers
    in the pattern to the appropriate components of the tuple.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`let``(`*x*[1]:*t*[1], *x*[2]:*t*[2],..., *x[n]*:*t[n]*`)`*=* *e* 匹配表达式 *e*
    的值（*e* 必须是一个 *n*-元组）与元组模式 `(`*x*[1]:*t*[1], *x*[2]:*t*[2],..., *x[n]*:*t[n]*`)`
    并将模式中的标识符绑定到元组的适当组件。'
- en: '`let` *y*`(`*x*[1]:*t*[1], *x*[2]:*t*[2],..., *x[n]*:*t[n]*`)`*=* *e* is a
    declaration of a function *y* that takes an *n*-tuple as an argument and matches
    that tuple against the tuple-pattern `(`*x*[1]:*t*[1], *x*[2]:*t*[2],..., *x[n]*:*t[n]*`)`,
    then evaluates *e* with those bindings.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`let` *y*`(`*x*[1]:*t*[1], *x*[2]:*t*[2],..., *x[n]*:*t[n]*`)`*=* *e*是一个接受*n*-元组作为参数并将该元组与元组模式`(`*x*[1]:*t*[1], *x*[2]:*t*[2],..., *x[n]*:*t[n]*`)`匹配，然后使用这些绑定评估*e*的函数*y*的声明。'
- en: Records
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录
- en: 'Records are similar to tuples in that they are data structures for holding
    multiple values.  However, they are different from tuples in that they carry an
    *unordered* collection of *labeled* values.  Record expressions are of the form
    `**{**`*x*`[1]=`*e*[1]`;`...`;`*x[n]*`=`*e[n]*`**}**` where the identifiers *x*
    are labels.  Before making a record, however, you must give its type a name, using
    the `type` keyword.  To declare a record type, the type must be enclosed in braces
    and each field must be given a name and a type of its own. For example, the following
    declares an `account` type:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 记录类似于元组，因为它们是用于保存多个值的数据结构。但是，它们与元组不同，因为它们携带一个*无序*的*带标签*值集合。记录表达式的形式为`**{**`*x*`[1]=`*e*[1]`;`...`;`*x[n]*`=`*e[n]*`**}**`，其中标识符*x*是标签。然而，在创建记录之前，你必须使用`type`关键字为其类型命名。要声明记录类型，类型必须用大括号括起来，并且每个字段必须被赋予自己的名称和类型。例如，以下声明了一个`account`类型：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once you have declared the type, you may create records of that type. For example,
    given the declaration of the `account` type, the expression
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你声明了类型，你就可以创建该类型的记录。例如，给定`account`类型的声明，表达式
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: is a record with four fields named `first`, `last`, `age`, and `balance`.  You
    can extract a field from a record by using `exp.id` where `exp` is the record
    and `id` is the field that you want to extract.  For instance, applying `.age`
    to the record above yields 150, whereas applying `.balance` yields 0.12.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个具有四个名为`first`、`last`、`age`和`balance`的字段的记录。你可以通过使用`exp.id`从记录中提取字段，其中`exp`是记录，`id`是你想要提取的字段。例如，对上面的记录应用`.age`会得到150，而应用`.balance`会得到0.12。
- en: When creating a record, it does not matter in what order you give the fields. 
    So the record
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 创建记录时，给出字段的顺序并不重要。因此，记录
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'is equivalent to the example above.  When you type in one of these records
    to the OCaml top-level, it sorts the fields into a canonical order, based on the
    order in the declaration of the type:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于上面的例子。当你在OCaml顶层输入其中一个记录时，它会根据类型声明中的顺序将字段排序为规范顺序：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The type of a record is written as `**{**`*x*[1]:*t*[1]; *x*[2]:*t*[2]; ...
    ; *x[n]*:*t[n]*`**}**` *.*
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 记录的类型写作`**{**`*x*[1]:*t*[1]; *x*[2]:*t*[2]; ... ; *x[n]*:*t[n]*`**}**`。
- en: 'Just as you can use pattern-matching to extract the components of a tuple,
    you can use pattern matching to extract the fields of a record.  For instance,
    you can write:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你可以使用模式匹配来提取元组的组件一样，你也可以使用模式匹配来提取记录的字段。例如，你可以写：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'and OCaml responds with:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: OCaml的回应是：
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'thereby binding the identifiers `first`, `last`, `age`, and `balance` to the
    respective components of the record.  You can also write functions where the argument
    is a record using a record pattern. For example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从而将标识符`first`、`last`、`age`和`balance`绑定到记录的各个组件。你还可以编写参数为记录的函数，使用记录模式。例如：
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Calling `full_name` and passing it the record `pers` yields `"John Doe"` as
    an answer.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`full_name`并将记录`pers`传递给它会得到`"John Doe"`作为答案。
- en: It turns out that we can think of tuples as shorthand for records.  In particular,
    the tuple expression `(3.14, "Greg", true)` is like the record expression `{1=3.14;
    2="Greg"; 3=true}`.  So in some sense, tuples are just syntactic sugar for records.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将元组视为记录的简写。特别地，元组表达式`(3.14, "Greg", true)`类似于记录表达式`{1=3.14; 2="Greg"; 3=true}`。因此，在某种意义上，元组只是记录的语法糖。
- en: 'In summary:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 总结：
- en: you must declare record types using `type` before making them
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在创建记录之前，你必须使用`type`声明记录类型。
- en: record expressions are of the form **`{`***x*[1] `=` *e*[1]`;` *x*[2] `=` *e*[2]`;`
    ...`;` *x[n]* `=` *e[n]***`}`**.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录表达式的形式为**`{`***x*[1] `=` *e*[1]`;` *x*[2] `=` *e*[2]`;` ...`;` *x[n]* `=`
    *e[n]***`}`**。
- en: record types are of the form `**{**`*x*[1]:*t*[1]; *x*[2]:*t*[2]; ... ; *x[n]*:*t[n]*`**}**`.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录类型的形式为`**{**`*x*[1]:*t*[1]; *x*[2]:*t*[2]; ... ; *x[n]*:*t[n]*`**}**`。
- en: you can extract a field from a record by writing *e*`.`*x*, where *x* is the
    name of the field.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过写*e*`.`*x*来从记录中提取字段，其中*x*是字段的名称。
- en: you can pattern match records using a pattern of the form `**{**`*x*[1]=*id*[1]; *x*[2]=*id*[2];
    ... ; *x[n]*=*id[n]*`**}**`.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用形式为`**{**`*x*[1]=*id*[1]; *x*[2]=*id*[2]; ... ; *x[n]*=*id[n]*`**}**`的模式匹配记录。
- en: We'll cover more kinds of types (datatypes) and more pattern matching constructs
    next week.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下周我们将介绍更多种类的类型（数据类型）和更多的模式匹配结构。
- en: '* * *'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Simple Datatypes and Match Expressions
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单数据类型和匹配表达式
- en: 'Datatypes are used for two basic purposes which we''ll describe by example. 
    The first example of a datatype declaration is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型用于两个基本目的，我们将通过示例描述。数据类型声明的第一个示例如下：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This definition declares a new type (`mybool`) and two constructors (`Mytrue`
    and `Myfalse`) for creating values of type `mybool`.  In other words, after entering
    this definition into OCaml, we can use `Mytrue` and `Myfalse` as values of type
    `mybool`.  Indeed, these are the *only* values of type `mybool`.  So one purpose
    of datatypes is to introduce new types into the language and to introduce ways
    of creating values of this new type.  In fact, the builtin `bool` type is simply
    defined as:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义声明了一个新类型（`mybool`）和两个构造器（`Mytrue`和`Myfalse`）来创建`mybool`类型的值。换句话说，在将这个定义输入到OCaml之后，我们可以使用`Mytrue`和`Myfalse`作为`mybool`类型的值。实际上，这些是`mybool`类型的*唯一*值。因此，数据类型的一个目的是引入新类型到语言中，并引入创建此新类型值的方法。实际上，内置的`bool`类型简单地定义为：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Notice that a datatype definition is a lot like a BNF grammar.  For instance,
    we can think of bool as consisting of `true` or `false`.  We'll use this built-in
    grammar fracility in OCaml to good effect when we start building implementations
    of languages.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，数据类型定义很像BNF语法。例如，我们可以认为bool由`true`或`false`组成。当我们开始构建语言的实现时，我们将会充分利用OCaml中的这种内置语法。
- en: '**Side note:** the logical operators for conjunction and disjunction are as
    follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**旁注：**逻辑连接和逻辑析取的运算符如下：'
- en: '*exp*   ::=   ...   |   *e1* && *e2*   |   *e1* | | *e2*'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*exp*   ::=   ...   |   *e1* && *e2*   |   *e1* | | *e2*'
- en: Note that `and` is not for logical conjunction, although it is a keyword.  These
    appear to be like binary operators; however, they are different from infix functions
    as all the other binary operators evaluate both expressions.  These two logical
    constructs have a special capability called short-circuiting.  If the result of
    the logical formula can be determined by evaluating the left-hand expression,
    the right-hand expression will remain unevaluated.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`and`并不是用于逻辑连接的，尽管它是一个关键字。它们看起来像二元运算符；但是，它们不同于中缀函数，因为所有其他二元运算符都会评估两个表达式。这两个逻辑构造具有称为短路评估的特殊功能。如果可以通过评估左侧表达式来确定逻辑公式的结果，则右侧表达式将保持未评估状态。
- en: 'Another example of a datatype declaration is as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个数据类型声明的示例如下：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This declaration defines a new type (`day`) and seven new constructors for
    that type (`Sun`–`Sat`).  So, for example, we can write a function which maps
    a number to a day of the week:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个声明定义了一个新类型（`day`）和七个该类型的新构造器（`Sun`–`Sat`）。例如，我们可以编写一个将数字映射到一周中的某一天的函数：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This sequence of `if` expressions where we test the value `i` is rather tedious. 
    A more concise way to write this is to use a `match` expression:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这一系列`if`表达式测试值`i`相当繁琐。更简洁的写法是使用`match`表达式：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `match` expression is similar to the `switch` statement in languages such
    as Java or C.  In the example above, we perform a case on the value of (`i mod
    7`) and match it against a set of number patterns (i.e., 0, 1, 2, etc.)   The
    last pattern is a wildcard and matches any value.  In Java, we would write the
    above as something like:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`match`表达式类似于诸如Java或C等语言中的`switch`语句。在上面的示例中，我们对(`i mod 7`)的值进行分析，并将其与一组数字模式进行匹配（即，0,
    1, 2等）。最后一个模式是通配符，可以匹配任何值。在Java中，我们可以将上述内容写成类似于以下的形式：'
- en: '[PRE23]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: So much for mapping integers to days.  How about mapping days to integer?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就可以将整数映射到日期。那么将日期映射到整数呢？
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With `match` expressions, we technically don''t need an `if` expression form. 
    In particular, an expression of the form `if` *exp1* `then` *exp2* `else` *exp3*
    is equivalent to:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`match`表达式，我们技术上不需要`if`表达式形式。特别是，形式为`if` *exp1* `then` *exp2* `else` *exp3*的表达式等价于：
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In fact it turns out that with the general form of datatypes and case expressions,
    we can encode a lot of things that appear to be built in to the language.  This
    is a good thing because it simplifies the number of special forms that we have
    to reason about.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，事实证明，通过数据类型的一般形式和case表达式，我们可以编码许多似乎内置在语言中的东西。这是一件好事，因为它简化了我们需要考虑的特殊形式的数量。
- en: 'In summary:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 总之：
- en: '`type` *id* = *id1 | id2 | id3 | ... | idn*declares a new type (*id1*) with
    *n data* constructors (*id1 id2 id3 ... idn).  *'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type` *id* = *id1 | id2 | id3 | ... | idn*声明了一个新类型（*id1*），具有*n个数据*构造器（*id1
    id2 id3 ... idn)*。'
- en: '`match` *exp* `with` *pat1 -> exp1 | pat2 -> exp2 | ... | patn -> expn* evaluates
    *exp* and then successively matches it against the patterns.  That is, the first
    pattern (*pat1*) is tried first and if matching succeeds, then we evaluate the
    corresponding expression (*exp1*).  If matching fails, then we proceed to the
    next pattern *pat2* and so on.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`match` *exp* `with` *pat1 -> exp1 | pat2 -> exp2 | ... | patn -> expn* 评估
    *exp*，然后依次将其与模式匹配。也就是说，首先尝试第一个模式（*pat1*），如果匹配成功，则评估相应的表达式（*exp1*）。如果匹配失败，则继续下一个模式
    *pat2*，依此类推。'
- en: So far, patterns can be made up of integers (e.g., 12, ~4), identifiers that
    are variables (e.g., `x`), tuple patterns, record patterns, or identifiers that
    are data constructors (e.g., `Sun`, `Mon`, `true`, etc.)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到目前为止，模式可以由整数（例如，12，~4）、作为变量的标识符（例如，`x`）、元组模式、记录模式或作为数据构造函数的标识符（例如，`Sun`，`Mon`，`true`等）组成。
- en: The `if`-expression is a syntactic sugar for a `match`-expression.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`-表达式是对 `match`-表达式的语法糖。'
- en: '* * *'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Algebraic Datatypes and Even More Pattern Matching:'
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代数数据类型和更多模式匹配：
- en: 'A record (or tuple) is logically like an "and".  For instance, a tuple of type
    `int * float * string` is an object that contains an `int` *and* a `float` *and*
    a `string`.  Datatypes, in the most general form, are used for defining "or" types
    -- when something needs to be one type or another.  In particular, suppose we
    want to define a new type "number" that includes elements of type either `int`
    or `float`.  This can be accomplished in OCaml by the following datatype definition:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 记录（或元组）在逻辑上类似于“和”。例如，类型为 `int * float * string` 的元组是一个包含 `int` *和* `float` *和*
    `string` 的对象。数据类型，在最一般的形式上，用于定义“或”类型--当某物需要是一种类型或另一种类型时。特别是，假设我们想要定义一个包括 `int`
    或 `float` 类型元素的新类型“number”。这可以通过以下数据类型定义在 OCaml 中完成：
- en: '[PRE26]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This declaration gives us a new type (`num`) and two constructors `Int_num`
    and `Real_num`.  The `Int_num` constructor takes an `int` as an argument and returns
    a `num`, while the `Real_num` constructor takes a `float` as an argument and returns
    a `num`.  In this fashion, we can create a type that is the (disjoint) union of
    two other types.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个声明给了我们一个新类型（`num`）和两个构造函数 `Int_num` 和 `Real_num`。`Int_num` 构造函数以 `int` 作为参数并返回一个
    `num`，而 `Real_num` 构造函数以 `float` 作为参数并返回一个 `num`。通过这种方式，我们可以创建两种其他类型的（不相交的）联合类型。
- en: 'But how do we use a value of type `num`?  We can''t apply an operation such
    as + to it, because + is only defined for `int`.  In order to use a value of type
    `num`, we have to use pattern matching to deconstruct it.  For example, the following
    function computes the maximum of two nums:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们如何使用类型为 `num` 的值呢？我们不能对其应用诸如 + 之类的操作，因为 + 仅对 `int` 定义。为了使用类型为 `num` 的值，我们必须使用模式匹配来解构它。例如，以下函数计算两个
    nums 的最大值：
- en: '[PRE27]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The strategy is simple:  convert the numbers to floats and then compare the
    two floating point numbers, returning the larger of the two.  In order to make
    the return value a `num` (as opposed to a `float`), we have to put the result
    in a `Real_num` constructor.  We could just have well written this as:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个策略很简单：将数字转换为浮点数，然后比较这两个浮点数，返回较大的那个。为了使返回值是一个 `num`（而不是一个 `float`），我们必须将结果放在一个
    `Real_num` 构造函数中。我们可以写成这样：
- en: '[PRE29]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, we've wrapped the whole `if`-expression with the `Real_num` constructor. 
    This is one advantage of treating `if` as an *expression* as opposed to a statement.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们用 `Real_num` 构造函数包装了整个 `if`-表达式。这是将 `if` 视为*表达式*而不是语句的一个优势。
- en: Notice that in the function `num_to_float`, we use a `match`-expression to determine
    whether the number *n* is an integer or float.  The pattern `Int_num i` matches
    *n* if and only if *n* was created using the `Int_num` data constructor, and `Real_num
    r` matches *n* if and only if it was created with the `Real_num` data constructor. 
    Also, notice that in the `Int_num i` case, we have bound the underlying integer
    carried by the data constructor to the variable `i` and that this is used in the
    expression `float_of_int i`.  Similarly, the `Real_num r` pattern extracts the
    underlying float value carried by the data constructor and binds it to `r`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在函数 `num_to_float` 中，我们使用了一个 `match`-表达式来确定数字 *n* 是整数还是浮点数。模式 `Int_num i`
    只有当 *n* 是使用 `Int_num` 数据构造函数创建的时候才匹配 *n*，而 `Real_num r` 只有当它是用 `Real_num` 数据构造函数创建的时候才匹配
    *n*。此外，请注意在 `Int_num i` 案例中，我们将由数据构造函数承载的基础整数绑定到变量 `i` 上，并且这在表达式 `float_of_int
    i` 中使用。类似地，`Real_num r` 模式提取由数据构造函数承载的基础浮点值，并将其绑定到 `r` 上。
- en: So, for instance, calling `num_to_float (Int_num 3)` matches the first pattern,
    binds `i` to 3, and then returns `float_of_int i` = `float_of_int 3` = `3.0`. 
    Calling `num_to_float (Real_num 4.5)` fails to match the first pattern, succeeds
    in matching the second pattern, binds the `r` to 4.5, and then returns `r` = `4.5`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，调用`num_to_float (Int_num 3)`匹配第一个模式，将`i`绑定到3，然后返回`float_of_int i` = `float_of_int
    3` = `3.0`。调用`num_to_float (Real_num 4.5)`无法匹配第一个模式，但可以匹配第二个模式，将`r`绑定到4.5，然后返回`r`
    = `4.5`。
- en: Here is an alternative definition of max on numbers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是关于数字最大值的另一种定义。
- en: '[PRE30]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Notice that that `match` expression in `max2` matches a tuple of the numbers
    `n1` and `n2`.  Thus, all of the patterns in the case expressions are of the tuple
    form.  For example, the pattern `(Real_num r1, Real_num r2)` matches if and only
    if both the numbers are floats.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`max2`中的`match`表达式匹配了数字`n1`和`n2`的元组。因此，案例表达式中的所有模式都是元组形式。例如，模式`(Real_num
    r1, Real_num r2)`只有当两个数字都是浮点数时才匹配。
- en: In the third and fourth patterns, we've used a "wildcard" (or default) pattern. 
    For instance, the third pattern `(_, Int_num i2)` matches iff the first number
    is anything, but the second is an integer.  In this case, we simply convert the
    integer to a float and then call ourselves recursively.  Similarly, the fourth
    pattern `(Int_num i1, _)` the first number is an integer and the second number
    is anything.  In this case, we convert the first number to a float and call ourselves
    recursively.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三和第四种模式中，我们使用了一个“通配符”（或默认）模式。例如，第三种模式`(_, Int_num i2)`匹配的条件是第一个数字可以是任何值，但第二个数字必须是整数。在这种情况下，我们只需将整数转换为浮点数，然后递归调用自身。同样，第四种模式`(Int_num
    i1, _)`第一个数字是整数，第二个数字可以是任何值。在这种情况下，我们将第一个数字转换为浮点数，然后递归调用自身。
- en: Now suppose we call `max2` with two integers `max2 (Int_num 3, Int_num 4)`. 
    It appears as if this matches any of the last three cases, so which one do we
    select? The answer is that we try the matches in order.  So the second pattern
    will succeed and the other patterns won't even be tried.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们用两个整数调用`max2 max2 (Int_num 3, Int_num 4)`。看起来好像这匹配了最后三种情况中的任何一种，那么我们应该选择哪一个呢？答案是我们按顺序尝试匹配。因此第二种模式会成功，其他模式甚至不会尝试。
- en: 'Another question is, how do we know if there is a case for every situation? 
    For instance, suppose we accidentally wrote:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，我们如何知道每种情况都有一个案例呢？例如，假设我们不小心写成：
- en: '[PRE31]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now there is no case for when `n1` and `n2` are both floats.  If you type this
    in to OCaml, then it will complain that the pattern match is not exhaustive. 
    This is wonderful because it tells you your code might fail since you forgot a
    case!  In general, we will *not* accept code that has a match not exhaustive warning. 
    That is, you must make sure you never turn in code that doesn't cover all of the
    cases.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在没有考虑`n1`和`n2`都是浮点数的情况。如果你在OCaml中输入这个，它会抱怨模式匹配不是穷尽的。这很好，因为它告诉你你的代码可能会失败，因为你忘记了一个情况！一般来说，我们*不会*接受有不穷尽警告的代码。也就是说，你必须确保你永远不会提交没有覆盖所有情况的代码。
- en: 'What happens if we put in too many cases?  For instance, suppose we wrote:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们添加了太多的情况会发生什么？例如，假设我们写成：
- en: '[PRE32]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Then OCaml complains that the last match case is unused (i.e., it will never
    be reached).  Again, this is wonderful because it tells us there's some useless
    code that we should either trim away, or reexamine to see why it will never be
    executed.  Again, we will *not* accept code that has redundant patterns.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后OCaml会抱怨最后一个匹配情况未被使用（即永远不会被执行）。这很棒，因为它告诉我们有一些无用的代码，我们应该将其删除或重新检查为什么它永远不会被执行。再次强调，我们*不会*接受有冗余模式的代码。
- en: So how can the OCaml type-checker determine that a pattern match is exhaustive
    and that there are no dead cases?  The reason is that patterns can only test a
    finite number of things (there are no loops in patterns), the tests are fairly
    simple (e.g., is this a `Real_num` or an `Int_num`?) and the set of datatype constructors
    for a given type is *closed*.  That is, after defining a datatype, we can't simply
    add new data constructors to it.  Note that if we could, then *every* pattern
    match would be potentially inexhaustive.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 那么OCaml类型检查器如何确定模式匹配是穷尽的，没有死代码呢？原因是模式只能测试有限数量的事物（模式中没有循环），测试相当简单（例如，这是一个`Real_num`还是一个`Int_num`？）并且给定类型的数据构造函数集是*封闭*的。也就是说，在定义数据类型之后，我们不能简单地向其添加新的数据构造函数。请注意，如果可以的话，那么*每个*模式匹配都可能是不穷尽的。
- en: At first, this seems to be a shortcoming of the language.  Adding new constructors
    is something that happens all the time, just as adding new subclasses happens
    all the time in Java programs.  The difference in OCaml is that, if you add a
    new data constructor to a datatype declaration, then the compiler will tell you
    where you need to examine or change your code through "match inexhaustive" errors. 
    This makes pattern matching an invaluable tool for maintaining and evolving programs.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，这似乎是语言的一个缺点。添加新的构造函数是经常发生的事情，就像在Java程序中经常添加新的子类一样。在OCaml中的区别在于，如果您向数据类型声明添加了新的数据构造函数，那么编译器将通过“匹配不完全”错误告诉您需要检查或更改代码的位置。这使得模式匹配成为程序维护和演化的无价工具。
- en: So sometimes, by *limiting* a programming language we gain some power.  In the
    case of the pattern-matching sub-language of OCaml, the designers have restricted
    the set of tests that can be performed so that the compiler can automatically
    tell you where you need to look at your code to get it in sync with your definitions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，通过*限制*编程语言，我们可以获得一些力量。在OCaml的模式匹配子语言中，设计者限制了可以执行的测试集，以便编译器可以自动告诉您需要查看代码的位置，以使其与您的定义同步。
