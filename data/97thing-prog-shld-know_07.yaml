- en: Beware the Share
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警惕共享。
- en: Beware the Share
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警惕共享。
- en: It was my first project at the company. I'd just finished my degree and was
    anxious to prove myself, staying late every day going through the existing code.
    As I worked through my first feature I took extra care to put in place everything
    I had learned — commenting, logging, pulling out shared code into libraries where
    possible, the works. The code review that I had felt so ready for came as a rude
    awakening — reuse was frowned upon!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在公司的第一个项目。我刚刚完成了学位，急于证明自己，每天都会加班查看现有的代码。当我完成我的第一个功能时，我特别注意了我所学到的一切——注释、日志记录、在可能的情况下将共享代码提取到库中，等等。我原以为自己已经准备好了的代码审查却成了一次惊醒——重用被视为不好的做法！
- en: How could this be? All through college reuse was held up as the epitome of quality
    software engineering. All the articles I had read, the textbooks, the seasoned
    software professionals who taught me. Was it all wrong?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这怎么可能呢？整个大学期间，重用都被视为高质量软件工程的典范。所有我读过的文章、教科书，以及教导我的经验丰富的软件专业人士。难道这一切都错了吗？
- en: It turns out that I was missing something critical.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 结果证明我错过了一些关键的东西。
- en: Context.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文。
- en: The fact that two wildly different parts of the system performed some logic
    in the same way meant less than I thought. Up until I had pulled out those libraries
    of shared code, these parts were not dependent on each other. Each could evolve
    independently. Each could change its logic to suit the needs of the system's changing
    business environment. Those four lines of similar code were accidental — a temporal
    anomaly, a coincidence. That is, until I came along.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的两个完全不同的部分以相同的方式执行某些逻辑的事实意义不大，我之前认为这很重要。直到我提取出那些共享代码库之前，这些部分都不依赖于彼此。每个部分都可以独立发展。每个部分都可以根据系统不断变化的业务环境需求改变其逻辑。那四行相似的代码是偶然的——一个时间上的异常，一个巧合。直到我出现之前。
- en: The libraries of shared code I created tied the shoelaces of each foot to each
    other. Steps by one business domain could not be made without first synchronizing
    with the other. Maintenance costs in those independent functions used to be negligible,
    but the common library required an order of magnitude more testing.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建的共享代码库将每个业务领域的鞋带绑在一起。一个业务领域的步骤不能脱离另一个领域同步。那些独立函数中的维护成本曾经是微不足道的，但常用库需要进行更多数量级的测试。
- en: While I'd decreased the absolute number of lines of code in the system, I had
    increased the number of dependencies. The context of these dependencies is critical
    — had they been localized, it may have been justified and had some positive value.
    When these dependencies aren't held in check, their tendrils entangle the larger
    concerns of the system even though the code itself looks just fine.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我减少了系统中的代码行数，但增加了依赖项的数量。这些依赖项的上下文至关重要——如果它们是局部的，那么可能是合理的并且具有一些积极的价值。当这些依赖项没有受到控制时，它们的触角会纠缠着系统的更大关注点，即使代码本身看起来也很好。
- en: These mistakes are insidious in that, at their core, they sound like a good
    idea. When applied in the right context, these techniques are valuable. In the
    wrong context, they increase cost rather than value. When coming into an existing
    code base with no knowledge of the context where the various parts will be used,
    I'm much more careful these days about what is shared.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误很阴险，因为它们在本质上听起来像是一个好主意。当在正确的上下文中应用时，这些技术是有价值的。在错误的上下文中，它们增加了成本而不是价值。当进入一个没有关于各个部分将被使用的上下文知识的现有代码库时，我现在更加谨慎地考虑分享什么。
- en: Beware the share. Check your context. Only then, proceed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 警惕共享。检查你的上下文。然后再继续。
- en: By [Udi Dahan](http://programmer.97things.oreilly.com/wiki/index.php/Udi_Dahan)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Udi Dahan](http://programmer.97things.oreilly.com/wiki/index.php/Udi_Dahan)提供。
