- en: Don't Nail Your Program into the Upright Position
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要将程序钉在竖直位置
- en: Don't Nail Your Program into the Upright Position
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要将程序钉在竖直位置
- en: 'I once wrote a spoof C++ quiz, in which I satirically suggested the following
    strategy for exception handling:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经写过一个讽刺性的 C++ 测验，其中我讽刺性地建议了以下异常处理策略：
- en: By dint of plentiful `try...catch` constructs throughout our code base, we are
    sometimes able to prevent our applications from aborting. We think of the resultant
    state as "nailing the corpse in the upright position."
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通过我们代码库中丰富的`try...catch`结构，我们有时能够阻止应用程序中止。我们将结果状态视为“将尸体钉在竖直位置”。
- en: Despite my levity, I was actually summarizing a lesson I received at the knee
    of Dame Bitter Experience herself.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我言谈轻松，但我实际上总结了我从苦涩经验女士那里得到的一课。
- en: 'It was a base application class in our own, homemade C++ library. It had suffered
    the pokings of many programmers'' fingers over the years: Nobody''s hands were
    clean. It contained code to deal with all escaped exceptions from everything else.
    Taking our lead from Yossarian in Catch-22, we decided, or rather felt (*decided*
    implies more thought than went into the construction of this monster) that an
    instance of this class should live forever or die in the attempt.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们自己制作的 C++ 库中的一个基础应用程序类。多年来，它遭受了许多程序员的指指点点：没有人的手是干净的。它包含了处理来自其他所有地方的所有逃逸异常的代码。我们效仿《第二十二条军规》中的约瑟里安，我们决定，或者说（*决定*意味着比构建这个怪物所需的思考更多）感觉到这个类的实例应该永生或者在尝试中死去。
- en: To this end, we intertwined multiple exception handlers. We mixed in Windows'
    structured exception handling with the native kind (remember `__try...__except`
    in C++? Me neither). When things threw unexpectedly, we tried calling them again,
    pressing the parameters harder. Looking back, I like to think that when writing
    an inner `try...catch` handler within the catch clause of another, some sort of
    awareness crept over me that I might have accidentally taken a slip road from
    the motorway of good practice into the aromatic but insalubrious lane of lunacy.
    However, this is probably retrospective wisdom.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们交织了多个异常处理程序。我们混合了 Windows 的结构化异常处理和本地类型（还记得 C++ 中的`__try...__except`吗？我也不记得了）。当事情出乎意料地抛出时，我们尝试再次调用它们，更加努力地传递参数。回顾过去，我喜欢想象，在另一个`try...catch`处理程序内部写入另一个的catch子句时，某种意识悄然而至，我可能无意中从良好实践的高速公路上转入了芬芳但不健康的疯狂小巷。然而，这可能是事后的智慧。
- en: Needless to say, whenever something went wrong in applications based on this
    class, they vanished like Mafia victims at the dockside, leaving behind no useful
    trail of bubbles to indicate what the hell happened, notwithstanding the dump
    routines that were supposedly called to record the disaster. Eventually — a long
    eventually — we took stock of what we had done, and experienced shame. We replaced
    the whole mess with a minimal and robust reporting mechanism. But this was many
    crashes down the line.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不用说，每当基于这个类的应用程序出现问题时，它们就像码头边的黑手党受害者一样消失了，留下没有用的气泡痕迹来指示到底发生了什么，尽管据说调用了用于记录灾难的转储例程。最终——一个漫长的最终——我们审视了我们所做的事情，并感到羞愧。我们用一个简洁而强大的报告机制替换了整个混乱。但这是在许多次崩溃之后。
- en: I wouldn't bother you with this — for surely nobody else could ever be as stupid
    as we were — but for an online argument I had recently with a bloke whose academic
    job title declared he should know better. We were discussing Java code in a remote
    transaction. If the code failed, he argued, it should catch and block the exception
    *in situ*. ("And then do *what* with it?" I asked. "Cook it for supper?")
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会为此烦扰你——因为毫无疑问，没有人会像我们那样愚蠢——但最近我与一个学术头衔声称他应该知道得更好的家伙在网上发生了争论。我们讨论了远程事务中的 Java
    代码。如果代码失败，他认为应该在原地捕获和阻止异常。 （“然后用它做*什么*？”我问。“煮晚餐吗？”）
- en: 'He quoted the UI designers'' rule: NEVER LET THE USER SEE AN EXCEPTION REPORT,
    rather as though this settled the matter, what with it being in caps and everything.
    I wonder if he was responsible for the code in one of those blue-screened ATMs
    whose photos decorate the feebler blogs, and had been permanently traumatized.
    Anyway, if you should meet him, nod and smile and take no notice, as you sidle
    towards the door.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 他引用了 UI 设计师的规则：永远不要让用户看到异常报告，仿佛这就解决了问题，因为这是大写的。我想知道他是否负责那些装饰着较弱博客的蓝屏 ATM 机中的代码，并且永久受到创伤。无论如何，如果你遇到他，点头微笑，不要理会，悄悄朝门口走去。
- en: By [Verity Stob](http://programmer.97things.oreilly.com/wiki/index.php/Verity_Stob)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Verity Stob](http://programmer.97things.oreilly.com/wiki/index.php/Verity_Stob)撰写。
