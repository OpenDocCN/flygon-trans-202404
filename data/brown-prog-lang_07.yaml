- en: 7Introduction to Structured Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7 结构化数据入门
- en: '|     [7.1 Understanding the Kinds of Compound Data](#%28part._.Understanding_the_.Kinds_of_.Compound_.Data%29)
    |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|     [7.1 理解复合数据的类型](#%28part._.Understanding_the_.Kinds_of_.Compound_.Data%29)
    |'
- en: '|       [7.1.1 A First Peek at Structured Data](#%28part._.A_.First_.Peek_at_.Structured_.Data%29)
    |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|       [7.1.1 首次窥视结构化数据](#%28part._.A_.First_.Peek_at_.Structured_.Data%29)
    |'
- en: '|       [7.1.2 A First Peek at Conditional Data](#%28part._.A_.First_.Peek_at_.Conditional_.Data%29)
    |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '|       [7.1.2 条件数据的首次窥视](#%28part._.A_.First_.Peek_at_.Conditional_.Data%29)
    |'
- en: '|     [7.2 Defining and Creating Structured and Conditional Data](#%28part._.Defining_and_.Creating_.Structured_and_.Conditional_.Data%29)
    |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|     [7.2 定义和创建结构化和条件数据](#%28part._.Defining_and_.Creating_.Structured_and_.Conditional_.Data%29)
    |'
- en: '|       [7.2.1 Defining and Creating Structured Data](#%28part._struct-data-eg%29)
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|       [7.2.1 定义和创建结构化数据](#%28part._struct-data-eg%29) |'
- en: '|       [7.2.2 Annotations for Structured Data](#%28part._.Annotations_for_.Structured_.Data%29)
    |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|       [7.2.2 结构化数据的注释](#%28part._.Annotations_for_.Structured_.Data%29) |'
- en: '|       [7.2.3 Defining and Creating Conditional Data](#%28part._.Defining_and_.Creating_.Conditional_.Data%29)
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|       [7.2.3 定义和创建条件数据](#%28part._.Defining_and_.Creating_.Conditional_.Data%29)
    |'
- en: '|     [7.3 Programming with Structured and Conditional Data](#%28part._.Programming_with_.Structured_and_.Conditional_.Data%29)
    |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|     [7.3 使用结构化和条件数据进行编程](#%28part._.Programming_with_.Structured_and_.Conditional_.Data%29)
    |'
- en: '|       [7.3.1 Extracting Fields from Structured Data](#%28part._.Extracting_.Fields_from_.Structured_.Data%29)
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|       [7.3.1 从结构化数据中提取字段](#%28part._.Extracting_.Fields_from_.Structured_.Data%29)
    |'
- en: '|       [7.3.2 Telling Apart Variants of Conditional Data](#%28part._.Telling_.Apart_.Variants_of_.Conditional_.Data%29)
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|       [7.3.2 区分条件数据的变体](#%28part._.Telling_.Apart_.Variants_of_.Conditional_.Data%29)
    |'
- en: '|       [7.3.3 Processing Fields of Variants](#%28part._.Processing_.Fields_of_.Variants%29)
    |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|       [7.3.3 处理变体的字段](#%28part._.Processing_.Fields_of_.Variants%29) |'
- en: Earlier we had our first look at types. Until now, we have only seen the types
    that Pyret provides us, which is an interesting but nevertheless quite limited
    set. Most programs we write will contain many more kinds of data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候我们初次接触了类型。直到现在，我们只看到了 Pyret 提供给我们的类型，这是一个有趣但相当有限的集合。我们编写的大多数程序都将包含许多其他类型的数据。
- en: 7.1Understanding the Kinds of Compound Data
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.1理解复合数据的类型
- en: 7.1.1A First Peek at Structured Data
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.1.1首次窥视结构化数据
- en: 'There are times when a datum has many attributes, or parts. We need to keep
    them all together, and sometimes take them apart. For instance:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有时一个数据具有许多属性或部分。我们需要将它们全部保持在一起，有时还需要将它们分开。例如：
- en: 'An iTunes entry contains a bunch of information about a single song: not only
    its name but also its singer, its length, its genre, and so on.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iTunes 条目包含有关单首歌曲的大量信息：不仅包括其名称，还包括歌手、长度、流派等等。
- en: '![](../Images/a5746e5632ffd80a93693329e9ccfc68.jpg)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/a5746e5632ffd80a93693329e9ccfc68.jpg)'
- en: 'Your GMail application contains a bunch of information about a single message:
    its sender, the subject line, the conversation it’s part of, the body, and quite
    a bit more.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的 GMail 应用包含有关单个消息的大量信息：发送者、主题行、所在对话、正文等等。
- en: '![](../Images/a40118b4022356546ffdd3780b31dfb6.jpg)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/a40118b4022356546ffdd3780b31dfb6.jpg)'
- en: 'In examples like this, we see the need for structured data: a single datum
    has structure, i.e., it actually consists of many pieces. The number of pieces
    is fixed, but may be of different kinds (some might be numbers, some strings,
    some images, and different types may be mixed together in that one datum). Some
    might even be other structured data: for instance, a date usually has at least
    three parts, the day, month, and year. The parts of a structured datum are called
    its fields.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的示例中，我们看到了对结构化数据的需求：一个单一的数据具有结构，即，它实际上由许多部分组成。这些部分的数量是固定的，但可能是不同种类的（有些可能是数字，有些是字符串，有些是图像，不同类型可能混合在一个数据中）。有些甚至可能是其他结构化数据：例如，日期通常至少有三个部分，即天、月和年。结构化数据的各个部分称为其字段。
- en: 7.1.2A First Peek at Conditional Data
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.1.2首次窥视条件数据
- en: 'Then there are times when we want to represent different kinds of data under
    a single, collective umbrella. Here are a few examples:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后有时我们想要在一个单一的、集体的伞下表示不同类型的数据。以下是一些例子：
- en: 'A traffic light can be in different states: red, yellow, or green.Yes, in some
    countries there are different or more colors and color-combinations. Collectively,
    they represent one thing: a new type called a traffic light state.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交通灯可以处于不同的状态：红色、黄色或绿色。是的，在一些国家，颜色和颜色组合是不同的或更多的。它们共同代表一件事：一种称为交通灯状态的新类型。
- en: 'A zoo consists of many kinds of animals. Collectively, they represent one thing:
    a new type called an animal. Some condition determines which particular kind of
    animal a zookeeper might be dealing with.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动物园由许多种类的动物组成。总体上，它们代表一种新类型：动物。某种条件决定了饲养员可能正在处理的特定动物类型。
- en: 'A social network consists of different kinds of pages. Some pages represent
    individual humans, some places, some organizations, some might stand for activities,
    and so on. Collectively, they represent a new type: a social media page.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交网络由不同种类的页面组成。有些页面代表个人，有些代表地点，有些代表组织，有些可能代表活动，等等。总体上，它们代表一种新类型：社交媒体页面。
- en: 'A notification application may report many kinds of events. Some are for email
    messages (which have many fields, as we’ve discussed), some are for reminders
    (which might have a timestamp and a note), some for instant messages (similar
    to an email message, but without a subject), some might even be for the arrival
    of a package by physical mail (with a timestamp, shipper, tracking number, and
    delivery note). Collectively, these all represent a new type: a notification.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知应用程序可能报告许多类型的事件。有些是针对电子邮件消息的（如我们讨论过的，具有许多字段），有些是针对提醒的（可能具有时间戳和备注），有些是针对即时消息的（类似于电子邮件消息，但没有主题），甚至有些可能是针对物理邮件包到达的通知（具有时间戳、承运人、跟踪号码和交货单）。总体上，所有这些都代表一种新类型：通知。
- en: 'We call these “conditional” data because they represent an “or”: a traffic
    light is red or green or yellow; a social medium’s page is for a person or location
    or organization; and so on. Sometimes we care exactly which kind of thing we’re
    looking at: a driver behaves differently on different colors, and a zookeeper
    feeds each animal differently. At other times, we might not care: if we’re just
    counting how many animals are in the zoo, or how many pages are on a social network,
    or how many unread notifications we have, their details don’t matter. Therefore,
    there are times when we ignore the conditional and treat the datum as a member
    of the collective, and other times when we do care about the conditional and do
    different things depending on the individual datum. We will make all this concrete
    as we start to write programs.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些称为“条件”数据，因为它们表示“或”：交通灯是红色或绿色或黄色；社交媒体页面是一个人或地点或组织；等等。有时候我们确切地关心我们正在查看的是哪种类型的事物：驾驶员在不同颜色的交通灯下的行为不同，饲养员会根据不同的动物喂食。在其他时候，我们可能不关心：如果我们只是计算动物园里有多少动物，或者社交网络上有多少页面，或者有多少未读通知，它们的细节就不重要了。因此，有时我们忽略条件并将数据视为集体的一部分，有时我们确实关心条件，并根据每个个体的数据采取不同的行动。随着我们开始编写程序，我们将把所有这些具体化。
- en: 7.2Defining and Creating Structured and Conditional Data
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.2定义和创建结构化和条件数据
- en: We have used the word “data” above, but that’s actually been a bit of a lie.
    As we said earlier [REF], data are how we represent information in the computer.
    What we’ve been discussing above is really different kinds of information, not
    exactly how they are represented. But to write programs, we must wrestle concretely
    with representations. That’s what we will do now, i.e., actually show data representations
    of all this information.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上面使用了“数据”这个词，但实际上有点欺骗性。正如我们之前所说[REF]，数据是我们在计算机中表示信息的方式。我们上面讨论的实际上是不同种类的信息，而不是它们的表示方式。但是为了编写程序，我们必须具体考虑表示方式。现在就是我们要做的，即实际展示所有这些信息的数据表示。
- en: 7.2.1Defining and Creating Structured Data
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.2.1定义和创建结构化数据
- en: 'Let’s start with defining structured data, such as an iTunes song record. Here’s
    a simplified version of the information such an app might store:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从定义结构化数据开始，比如 iTunes 歌曲记录。以下是这样一个应用程序可能存储的信息的简化版本：
- en: The song’s name, which is a String.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 歌曲的名称，是一个字符串。
- en: The song’s singer, which is also a String.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 歌曲的歌手，也是一个字符串。
- en: The song’s year, which is a Number.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 歌曲的年份，是一个数字。
- en: 'Let’s now introduce the syntax by which we can teach this to Pyret:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们介绍一下我们可以用 Pyret 教授这些知识的语法：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This tells Pyret to introduce a new type of data, in this case called ITunesSongWe
    follow a convention that types always begin with a capital letter.. The way we
    actually make one of these data is by calling song with three parameters; for
    instance:It’s worth noting that music managers that are capable of making distinctions
    between, say, Dance, Electronica, and Electronic/Dance, classify two of these
    three songs by a single genre: “World”.<structured-examples> ::='
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '这告诉Pyret引入了一个新类型的数据，这种情况下称为ITunesSong我们遵循的约定是类型始终以大写字母开头。我们实际上创建这些数据的方式是通过用三个参数调用song函数；例如：值得注意的是，能够区分舞蹈、电子音乐和电子/舞蹈的音乐管理器，将这三首歌中的两首归类为一个流派：“世界”。
    <structured-examples> :: ='
- en: '|   song("La Vie en Rose", "Édith Piaf", 1945) |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|   song("La Vie en Rose", "Édith Piaf", 1945) |'
- en: '|   song("Stressed Out", "twenty one pilots", 2015) |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|   song("Stressed Out", "twenty one pilots", 2015) |'
- en: '|   song("Waqt Ne Kiya Kya Haseen Sitam", "Geeta Dutt", 1959) |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|   song("Waqt Ne Kiya Kya Haseen Sitam", "Geeta Dutt", 1959) |'
- en: 'Always follow a data definition with a few concrete instances of the data!
    This makes sure you actually do know how to make data of that form. Indeed, it’s
    not essential but a good habit to give names to the data we’ve defined, so that
    we can use them later:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据定义后始终跟几个具体实例的数据！这确保你确实知道如何创建那种形式的数据。事实上，给我们定义的数据取个名字是一个好习惯，虽然不是必须的，这样我们以后可以使用它们：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 7.2.2Annotations for Structured Data
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.2.2结构化数据的注释
- en: 'Recall that in [REF] we discussed annotating our functions. Well, we can annotate
    our data, too! In particular, we can annotate both the definition of data and
    their creation. For the former, consider this data definition, which makes the
    annotation information we’d recorded informally in text a formal part of the program:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下我们在[REF]中讨论过给函数添加注释。嗯，我们也可以给数据添加注释！特别是，我们可以给数据的定义和它们的创建都加注释。对于前者，请考虑这个数据定义，它使我们在文本中非正式记录的注释信息成为程序的正式部分：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Similarly, we can annotate the variables bound to examples of the data. But
    what should we write here?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以注释绑定到数据示例的变量。但是这里应该写什么？
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Recall that annotations takes names of types, and the new type we’ve created
    is called ITunesSong. Therefore, we should write
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 记得注释采用类型的名称，我们创建的新类型称为ITunesSong。因此，我们应该写
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Do Now!
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就做！
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What happens if we instead write this?
  id: totrans-52
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果我们改成这样会发生什么？
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-54
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ''
  id: totrans-55
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: What error do we get? How about if instead we write these?
  id: totrans-56
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们会得到什么错误？如果我们改成这样会怎样？
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Make sure you familiarize yourself with the error messages that you get.
  id: totrans-60
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 确保您熟悉您收到的错误消息。
- en: 7.2.3Defining and Creating Conditional Data
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.2.3定义和创建条件数据
- en: 'The data construct in Pyret also lets us create conditional data, with a slightly
    different syntax. For instance, say we want to define the colors of a traffic
    light:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pyret中，数据构造也允许我们创建条件数据，语法略有不同。例如，假设我们想定义交通灯的颜色：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Conventionally, the names of the options begin in lower-case, but if they have
    no additional structure, we often capitalize the initial to make them look different
    from ordinary variables: i.e., Red rather than red. Each | (pronounced “stick”)
    introduces another option. You would make instances of traffic light colors as'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，选项的名称以小写字母开头，但如果它们没有额外的结构，我们通常大写首字母以使它们与普通变量看起来不同：即，Red而不是red。每个|（发音为“stick”）引入另一个选项。您可以像这样创建交通灯的实例：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A more interesting and common example is when each condition has some structure
    to it; for instance:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 更有趣和常见的例子是当每个条件都具有一定的结构时；例如：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In Texas, there ain’t nothin’ in the middle of the road except a yellow line
    and a dead armadillo. We can make examples of them as you would expect:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在得克萨斯州，路中间除了有一条黄线和一只死犰狳外什么都没有。我们可以像你预料的那样给出一些例子：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We call the different conditions variants.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称不同的条件为变体。
- en: Do Now!
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在就做！
- en: ''
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How would you annotate the three variable bindings?
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你会如何注释这三个变量绑定？
- en: Notice that the distinction between boas and armadillos is lost in the annotation.
    When we get to refinements [REF] we can recapture this distinction if we really
    want it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在注释中，玻璃蛇和犰狳之间的区别被忽略了。当我们进入细化[REF]时，如果我们真的想要的话，我们可以重新捕获这个区别。
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When defining a conditional datum the first stick is actually optional, but
    adding it makes the variants line up nicely. This helps us realize that our first
    example
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当定义条件数据时，第一个竖杠实际上是可选的，但添加它使得变体排列得更整齐。这有助于我们意识到我们的第一个示例
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: is really just the same as
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上与
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: i.e., a conditional type with just one condition, where that one condition is
    structured.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 即一个只有一个条件的条件类型，其中这一个条件是结构化的。
- en: 7.3Programming with Structured and Conditional Data
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.3 用结构化和条件数据进行编程
- en: So far we’ve learned how to create structured and conditional data, but not
    yet how to take them apart or write any expressions that involve them. As you
    might expect, we need to figure out how to
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何创建结构化和条件数据，但还没有学会如何将它们拆分或编写涉及它们的任何表达式。正如你可能期望的那样，我们需要弄清楚如何
- en: take apart the fields of a structured datum, and
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拆分结构化数据的字段，并
- en: tell apart the variants of a conditional datum.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分条件数据的变体。
- en: As we’ll see, Pyret also gives us a convenient way to do both together.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将看到的，Pyret 还为我们提供了一个方便的方法来同时执行这两个操作。
- en: 7.3.1Extracting Fields from Structured Data
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.3.1 从结构化数据中提取字段
- en: Let’s write a function that tells us how old a song is. First, let’s think about
    what the function consumes (an ITunesSong) and produces (a Number). This gives
    us a rough skeleton for the function:<song-age> ::=
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一个函数来告诉我们一首歌有多老。首先，让我们思考这个函数消耗什么（一个 ITunesSong）和产生什么（一个数字）。这为我们的函数提供了一个大致的框架：<song-age>
    ::=
- en: '|   fun song-age(s :: ITunesSong) -> Number: |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '|   fun song-age(s :: ITunesSong) -> Number: |'
- en: '|     [<song-age-body>](#%28elem._song-age-body%29) |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '|     [<song-age-body>](#%28elem._song-age-body%29) |'
- en: '|   end |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '|   end |'
- en: We know that the form of the body must be roughly:<song-age-body> ::=
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道身体的形式必须大致是：<song-age-body> ::=
- en: '|   2016 - <get the song year> |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '|   2016 - <get the song year> |'
- en: We can get the song year by using Pyret’s field access, which is a . followed
    by a field’s name—<wbr>in this case, year—<wbr>following the variable that holds
    the structured datum. Thus, we get the year field of s (the parameter to song-age)
    with
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 Pyret 的字段访问来获得歌曲的年份，即一个 .，然后是一个字段的名称——在这种情况下，年份——跟随着持有结构化数据的变量。因此，我们通过以下方式获取
    s（传递给 song-age 的参数）的年份字段
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'So the entire function body is:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因此整个函数体是：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It would be good to also record some examples ([<structured-examples>](#%28elem._structured-examples%29)),
    giving us a comprehensive definition of the function:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以记录一些示例（[<structured-examples>](#%28elem._structured-examples%29)），这样我们就可以全面地定义函数了：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 7.3.2Telling Apart Variants of Conditional Data
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.3.2 区分条件数据的变体
- en: 'Now let’s see how we tell apart variants. For this, we have to introduce another
    new piece of Pyret syntax: cases. A cases expression has several branches: exactly
    as many as there are in the data definition. Each branch corresponds to one of
    the variants. Thus, if we wanted to compute advice for a driver based on a traffic
    light’s state, we might write:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何区分变体。为此，我们必须引入 Pyret 语法的另一个新部分：cases。cases 表达式有几个分支：与数据定义中的数量完全相同。每个分支对应于一个变体。因此，如果我们想要根据交通灯的状态为驾驶员提供建议，我们可以编写：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that cases is followed by the name of the conditionally-defined type in
    parentheses (here, TLColor), and then an expression that computes a value of that
    type (in this case, c is already bound to such a value). Each variant is followed
    by =>, and then an expression that computes an answer for that variant.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，cases 后面跟着有条件地定义类型的名称（在这里是 TLColor 的括号），然后是计算该类型值的表达式（在这种情况下，c 已经绑定到这样一个值）。每个变体后面跟着
    =>，然后是计算该变体答案的表达式。
- en: Do Now!
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What happens if you leave out the =>?
  id: totrans-105
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你省略了 => 会发生什么？
- en: Do Now!
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在做！
- en: ''
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What if you leave out a variant? Leave out the Red Variant, then try both advice(Yellow)
    and advice(Red).
  id: totrans-108
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你省略一个变体会怎么样？省略红色变体，然后尝试 advice(Yellow) 和 advice(Red)。
- en: 7.3.3Processing Fields of Variants
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.3.3 处理变体的字段
- en: In this example, the variants had no fields. But if the variant has fields,
    Pyret expects you to list names of variables for those fields, and will then automatically
    bind those variables—<wbr>so you don’t need to use the .-notation to get the field
    values.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，变体没有字段。但是如果变体有字段，Pyret 会期望你列出这些字段的变量名，然后将自动绑定这些变量——因此你不需要使用 .-表示法来获取字段值。
- en: To illustrate this, assume we want to get the name of any animal:<animal-name>
    ::=
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要说明这一点，假设我们想要获取任何动物的名字：<animal-name> ::=
- en: '|   fun animal-name(a :: Animal) -> String: |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '|   fun animal-name(a :: Animal) -> String: |'
- en: '|     [<animal-name-body>](#%28elem._animal-name-body%29) |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '|     [<animal-name-body>](#%28elem._animal-name-body%29) |'
- en: '|   end |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '|   end |'
- en: Because an Animal is conditionally defined, we know that we are likely to want
    a cases to pull it apart; furthermore, we should give names to each of the fields:Note
    that the names of the variables do not have to match the names of fields. Conventionally,
    we give longer, descriptive names to the field definitions and short names to
    the corresponding variables.<animal-name-body> ::=
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于动物是有条件定义的，我们知道我们可能想要一个 cases 来将其分解；此外，我们应该为每个字段命名：请注意变量的名称不必与字段的名称匹配。通常，我们为字段定义给出更长的描述性名称，并为相应的变量给出较短的名称。<animal-name-body>
    ::=
- en: '|   cases (Animal) a: |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '|   cases（动物）a： |'
- en: '|     &#124; boa(n, l) => ... |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '|     &#124; 蟒蛇(n, l) => ... |'
- en: '|     &#124; armadillo(n, l) => ... |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '|     &#124; 犰狳(n, l) => ... |'
- en: '|   end |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '|   end |'
- en: 'In both cases, we want to return the field n, giving us the complete function:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，我们都希望返回字段 n，从而得到完整的函数：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
