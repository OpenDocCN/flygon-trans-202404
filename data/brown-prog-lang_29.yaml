- en: 29Parametric Polymorphism
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 29参数化多态性
- en: '|     [29.1 Parameterized Types](#%28part._.Parameterized_.Types%29) |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|     [29.1 Parameterized Types](#%28part._.Parameterized_.Types%29) |'
- en: '|     [29.2 Making Parameters Explicit](#%28part._.Making_.Parameters_.Explicit%29)
    |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|     [29.2 Making Parameters Explicit](#%28part._.Making_.Parameters_.Explicit%29)
    |'
- en: '|     [29.3 Rank-1 Polymorphism](#%28part._.Rank-1_.Polymorphism%29) |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '|     [29.3 Rank-1 Polymorphism](#%28part._.Rank-1_.Polymorphism%29) |'
- en: '|     [29.4 Interpreting Rank-1 Polymorphism as Desugaring](#%28part._.Interpreting_.Rank-1_.Polymorphism_as_.Desugaring%29)
    |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|     [29.4 Interpreting Rank-1 Polymorphism as Desugaring](#%28part._.Interpreting_.Rank-1_.Polymorphism_as_.Desugaring%29)
    |'
- en: '|     [29.5 Alternate Implementations](#%28part._.Alternate_.Implementations%29)
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|     [29.5 Alternate Implementations](#%28part._.Alternate_.Implementations%29)
    |'
- en: '|     [29.6 Relational Parametricity](#%28part._relnl-param%29) |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|     [29.6 Relational Parametricity](#%28part._relnl-param%29) |'
- en: Which of these is the same?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些中哪个是相同的？
- en: List<String>
  id: totrans-8
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: List<String>
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-10
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: List<String>
  id: totrans-11
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: List<String>
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: List<String>
  id: totrans-14
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: List<String>
- en: Actually, none of these is quite the same. But the first and third are very
    alike, because the first is in Java and the third in ML, whereas the second, in
    C++, is different. All clear? No? Good, read on!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这些都不太一样。但是第一个和第三个非常相似，因为第一个是在 Java 中，第三个是在 ML 中，而第二个，在 C++ 中，是不同的。清楚了吗？没有？好的，继续读下去！
- en: 29.1Parameterized Types
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 29.1参数化类型
- en: 'Consider what would be the intended type of map in Pyret:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑在 Pyret 中 map 的预期类型是什么：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This says that for all types A and B, map consumes a function that generates
    B values from A values, and a list of A values, and generates the corresponding
    list of B values. Here, A and B are not concrete types; rather, each is a [☛ type
    variable](glossary.html#%28elem._glossary-type._variable%29) (in our terminology,
    these should properly be called “type identifiers” because they don’t change within
    the course of an instantiation; however, we will stick to the traditional terminology).A
    different way to understand this is that there is actually an infinite family
    of map functions. For instance, there is a map that has this type:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这说明对于所有类型 A 和 B，map 函数消耗一个从 A 值生成 B 值的函数，以及一个 A 值列表，并生成相应的 B 值列表。这里，A 和 B 不是具体的类型；相反，每个都是一个[☛
    类型变量](glossary.html#%28elem._glossary-type._variable%29)（在我们的术语中，这些应该适当地称为“类型标识符”，因为它们在实例化过程中不会改变；然而，我们将坚持传统的术语）。理解这一点的另一种方法是，实际上存在无限多个
    map 函数。例如，有一个具有此类型的 map：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'and another one of this type (nothing says the types have to be base types):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个具有此类型的 map（没有规定类型必须是基本类型）：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and yet another one of this type (nothing says A and B can’t be the same):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个具有此类型的 map（没有规定 A 和 B 不能是相同的）：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'and so on. Because they have different types, they would need different names:
    map-num-str, map-num-num-to-num, map-str-str, and so on. But that would make them
    different functions, so we’d have to always refer to a specific map rather than
    each of the generic one.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以此类推。因为它们有不同的类型，所以它们需要不同的名称：map-num-str，map-num-num-to-num，map-str-str 等等。但这将使它们成为不同的函数，所以我们必须始终引用特定的
    map 而不是每个通用 map。
- en: 'Obviously, it is impossible to load all these functions into our standard library:
    there’s an infinite number of these! We’d rather have a way to obtain each of
    these functions on demand. Our naming convention offers a hint: it is as if map
    takes two type parameters in addition to its two regular value ones. Given the
    pair of types as arguments, we can then obtain a map that is customized to that
    particular type. This kind of parameterization over types is called parametric
    polymorphism.Not to be confused with the “polymorphism” of objects, which we will
    discuss separately [REF].'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，不可能将所有这些函数加载到我们的标准库中：这些函数的数量是无限的！我们宁愿有一种方式按需获取每个这些函数。我们的命名约定提供了一个提示：就好像 map
    除了它的两个常规值之外还需要两个类型参数。给定类型对作为参数，然后我们可以获得一个针对特定类型定制的 map。这种对类型的参数化称为参数多态性。不要与我们将单独讨论的对象“多态性”混淆[REF]。
- en: 29.2Making Parameters Explicit
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 29.2使参数明确
- en: In other words, we’re effectively saying that map is actually a function of
    perhaps four arguments, two of them types and two of them actual values (a function
    and a list). In a language with explicit types, we might try to write
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们实际上是在说 map 实际上是一个函数，可能有四个参数，其中两个是类型，另外两个是实际值（函数和列表）。在具有显式类型的语言中，我们可能会尝试编写
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'but this raises many questions:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但这带来了许多问题：
- en: What goes in place of the ???? These are the types that are going to take the
    place of A and B on an actual use. But if A and B are bound to types, then what
    is their type?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ???? 的位置应该填什么？这些是将在实际使用中取代 A 和 B 的类型。但如果 A 和 B 绑定到类型，那么它们的类型是什么？
- en: Do we really want to call map with four arguments every time we invoke it?
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们真的想要每次调用 map 都带着四个参数吗？
- en: Do we want to be passing types—<wbr>which are static—<wbr>at the same time as
    dynamic values?
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们想要在传递静态的类型的同时传递动态值吗？
- en: If these are types but they are only provided at run-time invocation, how can
    we type-check clients, who need to know what kind of list they are getting?
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这些是类型，但它们只在运行时调用时提供，那么我们如何为需要知道他们获得什么样的列表的客户端进行类型检查？
- en: The answers to these questions actually lead to a very rich space of polymorphic
    type systems, most of which we will not explore here.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这些问题的答案导致了一个非常丰富的多态类型系统空间，其中大多数我们在这里不会探索。
- en: Observe that once we start parameterizing, more code than we expect ends up
    being parameterized. For instance, consider the type of the humble link. Its type
    really is parametric over the type of values in the list (even though it doesn’t
    actually depend on those values!—<wbr>more on that in a bit ([Relational Parametricity](#%28part._relnl-param%29)))
    so every use of link must be instantiated at the appropriate type. For that matter,
    even empty must be instantiated to create an empty list of the correct type! Of
    course, Java and C++ programmers are familiar with this pain.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一旦我们开始参数化，就会有比我们期望的更多的代码被参数化。例如，考虑普通链表的类型。它的类型实际上是关于列表中值类型的参数化（即使它实际上并不依赖于这些值！——稍后再说（[关于关系参数化](#%28part._relnl-param%29））），所以每个链表的使用都必须实例化为相应的类型。同样，甚至空列表也必须实例化为创建正确类型的空列表！当然，Java
    和 C++ 程序员都熟悉这种痛苦。
- en: 29.3Rank-1 Polymorphism
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 29.3 一阶多态性
- en: Instead, we will limit ourselves to one particularly useful and tractable point
    in this space, which is the type system of Standard ML, of earlier versions of
    Haskell, roughly that of Java and C# with generics, and roughly that obtained
    using templates in C++. This language defines what is called predicative, rank-1,
    or prenex polymorphism.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们将限制自己在这个领域中选择一个特别有用且易于处理的点，即 Standard ML 的类型系统，较早版本的 Haskell，大致相当于 Java
    和 C# 的泛型，以及在 C++ 中使用模板所获得的类型系统。这种语言定义了所谓的谓词、一阶或前缀多态性。
- en: 'We first divide the world of types into two groups. The first group consists
    of the type language we’ve used until now, but extended to include type variables;
    these are called monotypes. The second group, known as polytypes, consists of
    parameterized types; these are conventionally written with a ∀ prefix, a list
    of type variables, and then a monotype expression that might use these variables.
    Thus, the type of map would be:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将类型的世界分为两组。第一组包括我们到目前为止使用的类型语言，但扩展为包括类型变量；这些被称为单态。第二组，称为多态，包括参数化类型；这些通常以∀前缀、类型变量列表和可能使用这些变量的单态表达式书写。因此，map
    的类型将是：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Since “∀” is the logic symbol for “for all”, you would read this as: “for all
    types A and B, the type of map is...”.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于“∀”是“对于所有”的逻辑符号，你可以将其读作：“对于所有类型 A 和 B，map 的类型是...”。
- en: In rank-1 polymorphism, the type variables can only be substituted with monotypes.
    (Furthermore, these can only be concrete types, because there would be nothing
    left to substitute any remaining type variables.) As a result, we obtain a clear
    separation between the type variable-parameters and regular parameters. We don’t
    need to provide a “type annotation” for the type variables because we know precisely
    what kind of thing they can be. This produces a relatively clean language that
    still offers considerable expressive power.Impredicative languages erase the distinction
    between monotypes and polytypes, so a type variable can be instantiated with another
    polymorphic type.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在一阶多态性中，类型变量只能被单态替换。（此外，这些只能是具体类型，因为没有剩余的类型变量可以替换。）因此，我们得到了类型变量参数和常规参数之间的明确分离。我们不需要为类型变量提供“类型注释”，因为我们确切地知道它们可以是什么样的东西。这产生了一种相对清洁的语言，仍然提供了相当大的表现力。非预测性语言消除了单态和多态之间的区别，因此类型变量可以用另一个多态类型来实例化。
- en: Observe that because type variables can only be replaced with monotypes, they
    are all independent of each other. As a result, all type parameters can be brought
    to the front of the parameter list. In Pyret, for instance, the following defines
    a polymorphic identity function:<pyret-poly-id> ::=
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，因为类型变量只能被单态替换，它们彼此之间都是独立的。因此，所有类型参数都可以移到参数列表的前面。例如，在 Pyret 中，以下定义了一个多态的
    identity 函数：<pyret-poly-id> :::'
- en: '|   fun<T> id(x :: T) -> T: x; |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '|   fun<T> id(x :: T) -> T: x; |'
- en: 'where T is the type parameter. At every use, we separate the provision of type
    parameters from value parameters by using <...> for the type parameters and (...)
    for the values. In general, then, we can write types in the form ∀ tv, ... : t
    where the tv are type variables and t is a monotype (that might refer to those
    variables). This justifies not only the syntax but also the name “prenex”. It
    will prove to also be useful in the implementation.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '在每次使用时，我们通过使用 <...> 表示类型参数，使用 (...) 表示值参数来区分提供类型参数和值参数。一般来说，我们可以将类型写成 ∀ tv,
    ... : t 的形式，其中 tv 是类型变量，t 是单态（可能引用这些变量）。这不仅证明了语法，还证明了“前束”的名称是合理的。在实现中，这也会被证明是有用的。'
- en: 29.4Interpreting Rank-1 Polymorphism as Desugaring
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 29.4 将 Rank-1 多态解释为展开
- en: 'The simplest implementation of this feature is to view it as a form of desugaring:
    this is essentially the interpretation taken by C++. (Put differently, because
    C++ has a macro system in the form of templates, by a happy accident it obtains
    a form of rank-1 polymorphism through the use of templates.) Consider the abve
    polymorphic identity function ([<pyret-poly-id>](#%28elem._pyret-poly-id%29)).
    Suppose the implementation is that, on every provision of a type to the name,
    it replaces the type variable with the given type in the body: given a concrete
    type for T, it yields a procedure of one argument of type (T -> T) (where T is
    appropriately substituted). Thus we can instantiate id at many different types—<wbr>'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能的最简单的实现方法是将其视为一种展开形式：这基本上是 C++ 所采用的解释。（换句话说，因为 C++ 有一个模板形式的宏系统，由于一种幸运的偶然，它通过使用模板获得了一种
    rank-1 多态的形式。）考虑上面的多态 identity 函数。假设实现是，在每次对名称提供类型时，它都在主体中用给定类型替换类型变量：给定 T 的具体类型，它产生一个类型为
    (T -> T) 的一个参数的过程（其中 T 被适当替换）。因此，我们可以在许多不同的类型上实例化 id—
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '—<wbr>thereby obtaining identity functions at each of those types:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: —因此我们可以获得每个类型的 identity 函数：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In contrast, expressions like
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，像
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: will, as we would expect, fail to type-check (rather than fail at run-time).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所期望的那样，将无法通过类型检查（而不是在运行时失败）。
- en: However, this approach has two important limitations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法有两个重要的局限性。
- en: 'Let’s try to define a recursive polymorphic function, such as filter. Earlier
    we have said that we ought to instantiate every single polymorphic value (such
    as even cons and empty) with types, but to keep our code concise we’ll focus just
    on type parameters for filter. Here’s the code:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试定义一个递归的多态函数，比如 filter。早先我们已经说过，我们应该为每个多态值（比如 even cons 和 empty）实例化类型，但为了保持我们的代码简洁，我们将只关注
    filter 的类型参数。以下是代码：
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Observe that at the recursive uses of filter, we must instantiate it with the
    appropriate type.This is a perfectly good definition. There’s just one problem.
    If we try to use it—<wbr>e.g.,
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意在 filter 的递归使用中，我们必须用适当的类型对其进行实例化。这是一个完全良好的定义。只有一个问题。如果我们试图使用它—比如，
- en: '[PRE10]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: the implementation will not terminate. This is because the desugarer is repeatedly
    trying to make new copies of the code of filter at each recursive call.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现将无法终止。这是因为 desugarer 在每次递归调用时都在重复尝试制作 filter 代码的新副本。
- en: Exercise
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 练习
- en: ''
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: If, in contrast, we define a local helper function that performs the recursion,
    this problem can be made to disappear. Can you figure out that version?
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 相反，如果我们定义一个执行递归的本地辅助函数，这个问题就可以消失了。你能想出那个版本吗？
- en: Consider two instantiations of the identity function. They would necessarily
    be different because they are two different pieces of code residing at different
    locations in memory.Indeed, the use of parametric polymorphism in C++ is notorious
    for creating code bloat. However, all this duplication is unnecessary! There’s
    absolutely nothing in the body of id, for instance, that actually depends on the
    type of the argument. Indeed, the entire infinite family of id functions can share
    just one implementation. The simple desugaring strategy fails to provide this.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑两个 identity 函数的实例化。它们必然是不同的，因为它们是位于内存中不同位置的两段不同的代码。事实上，在 C++ 中使用参数多态性是以创建代码膨胀而著称的。然而，所有这些复制都是不必要的！事实上，id
    的整个无限族函数可以共享同一个实现。简单的展开策略无法实现这一点。
- en: In other words, the desugaring based strategy, which is essentially an implementation
    by substitution, has largely the same problems we saw earlier with regards to
    substitution as an implementation of parameter instantiation ([From Substitution
    to Environments](Interpreting_Functions.html#%28part._subst-to-env%29)). However,
    in other cases substitution also gives us a ground truth for what we expect as
    the program’s behavior. The same will be true with polymorphism, as we will soon
    see.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，基于去糖化的策略，本质上是一种替换实现，与我们之前在参数实例化作为实现的替换方面看到的问题基本相同（[从替换到环境](Interpreting_Functions.html#%28part._subst-to-env%29)）。然而，在其他情况下，替换也为我们提供了程序行为的基准真值。同样适用于多态性，我们很快就会看到。
- en: Observe that one virtue to the desugaring strategy is that it does not require
    our type checker to “know” about polymorphism. Rather, the core type language
    can continue to be monomorphic, and all the (rank-1) polymorphism is handled entirely
    through expansion. This offers a cheap strategy for adding polymorphism to a language,
    though—<wbr>as C++ shows—<wbr>it also introduces significant overheads.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，去糖化策略的一个优点是它不需要我们的类型检查器“了解”多态性。相反，核心类型语言可以继续保持单态化，并且所有（秩-1）多态性完全通过扩展处理。这提供了一种廉价的策略，用于将多态性添加到语言中，尽管——<wbr>正如C++所示——<wbr>它也引入了重大的开销。
- en: Finally, though we have only focused on functions, the preceding discussion
    applies equally well to data structures.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，虽然我们只关注了函数，但前面的讨论同样适用于数据结构。
- en: 29.5Alternate Implementations
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 29.5备用实现
- en: 'There are other implementation strategies that don’t suffer from these problems.
    We won’t go into them here, but the essence is to memoize ([REF]) expansion. Because
    we can be certain that, for a given set of type parameters, we will always get
    the same typed body, we never need to instantiate a polymorphic function at the
    same type twice. This avoids the infinite loop. If we type-check the instantiated
    body once, we can avoid checking at other instantiations of the same type (because
    the body will not have changed). Furthermore, we do not need to retain the instantiated
    sources: once we have checked the expanded program, we can dispose of the expanded
    terms and retain just one copy at run-time. This avoids all the problems discussed
    in the pure desugaring strategy shown above, while retaining the benefits.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他不会遭受这些问题的实现策略。我们在这里不会详细介绍，但其核心是对扩展进行备忘录化（[REF]）。因为我们可以确定，对于给定的一组类型参数，我们总是会得到相同类型的体，所以我们永远不需要在相同类型的多态函数上进行实例化两次。这避免了无限循环。如果我们对实例化的体进行了类型检查一次，我们就可以避免在相同类型的其他实例化上进行检查（因为体不会发生变化）。此外，我们不需要保留实例化的源代码：一旦我们检查了扩展程序，我们就可以丢弃扩展术语并仅在运行时保留一个副本。这避免了上面展示的纯去糖化策略中讨论的所有问题，同时保留了优点。
- en: Actually, we are being a little too glib. One of the benefits of static types
    is that they enable us to pick more precise run-time representations. For instance,
    in most languages a static type can tell us whether we have a 32-bit or 64-bit
    number, or for that matter a 32-bit value or a 1-bit value (effectively, a boolean).
    A compiler can then generate specialized code for each representation, taking
    advantage of how the bits are laid out (for example, 32 booleans can use a [☛
    packed representation](glossary.html#%28elem._glossary-packed._representation%29)
    to fit into a single 32-bit word). Thus, after type-checking at each used type,
    the polymorphic instantiator may keep track of all the special types at which
    a function or data structure was used, and provide this information to the compiler
    for code-generation. This will then result in several copies of the function,
    but only as many as those for which the compiler can generate distinct, efficient
    representations—<wbr>which is usually fixed, and far fewer than the total number
    of types a program can use. Furthermore, the decision to make these copies reflects
    a [☛ space-time tradeoff](glossary.html#%28elem._glossary-space-time._tradeoff%29).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们有点太过轻率了。静态类型的一个好处是它们使我们能够选择更精确的运行时表示。例如，在大多数语言中，静态类型可以告诉我们是 32 位还是 64
    位数字，或者是 32 位值还是 1 位值（实际上，布尔值）。然后，编译器可以为每个表示生成专门的代码，利用位的布局（例如，32 个布尔值可以使用紧凑的表示法来放入一个单独的
    32 位字中）。因此，在每个使用的类型的类型检查之后，多态实例化器可以跟踪函数或数据结构使用的所有特殊类型，并将此信息提供给编译器用于代码生成。然后，这将导致函数的多个副本，但只有编译器可以生成不同、高效表示的那些副本，通常是固定的，并且远远少于程序可以使用的类型总数。此外，制作这些副本的决定反映了一种时空权衡。
- en: 29.6Relational Parametricity
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系参数化
- en: There’s one last detail we must address regarding polymorphism.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 关于多态性，我们必须解决的最后一个细节。
- en: We earlier said that a function like cons doesn’t depend on the specific values
    of its arguments. This is also true of map, filter, and so on. When map and filter
    want to operate on individual elements, they take as a parameter another function
    which in turn is responsible for making decisions about how to treat the elements;
    map and filter themselves simply obey their parameter functions.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前说过，像 cons 这样的函数并不依赖于其参数的具体值。map、filter 等函数也是如此。当 map 和 filter 想要操作单个元素时，它们将另一个函数作为参数，而这个函数又负责决定如何处理这些元素；map
    和 filter 本身只是遵循其参数函数。
- en: One way to “test” whether this is true is to substitute some different values
    in the argument list, and a correspondingly different parameter function. That
    is, imagine we have a relation between two sets of values; we convert the list
    elements according to the relation, and the parameter function as well. The question
    is, will the output from map and filter also be predictable by the relation? If,
    for some input, this was not true of the output of map, then it must be that map
    somehow affected the value itself, not just letting the function do it. But in
    fact this won’t happen for map, or indeed most of the standard polymorphic functions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一个“测试”这是否正确的方法是在参数列表中替换一些不同的值，并相应地替换不同的参数函数。也就是说，想象我们有两组值之间的关系；我们根据关系转换列表元素和参数函数。问题是，map
    和 filter 的输出是否也可以通过关系来预测？如果对于某些输入，map 的输出不是由关系确定的，那么必须是 map 在某种程度上影响了值本身，而不仅仅是让函数来做。但事实上，这对于
    map，或者标准多态函数中的大多数来说都不会发生。
- en: 'Functions that obey this relational rule are called relationally parametricRead
    Wadler’s Theorems for Free! and Reynolds’s Types, Abstraction and Parametric Polymorphism..
    This is another very powerful property that types give us, because they tell us
    there is a strong limit on the kinds of operations such polymorphic functions
    can perform: essentially, that they can drop, duplicate, and rearrange elements,
    but not directly inspect and make decisions on them.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 遵守这种关系规则的函数被称为关系参数化函数。这是类型赋予我们的另一个非常强大的属性，因为它告诉我们，这些多态函数能执行的操作种类受到了很强的限制：基本上，它们可以删除、复制和重新排列元素，但不能直接检查并对其进行决策。
- en: 'At first this sounds very impressive (and it is!), but on inspection you might
    realize this doesn’t square with your experience. In Java, for instance, a polymorphic
    method can still use instanceof to check which particular kind of value it obtained
    at run-time, and change its behavior accordingly. Such a method would not be relationally
    parametric!On the Web, you will often find this property described as the inability
    of a function to inspect the argument—<wbr>which is not quite right. In fact,
    relational parametricity can equally be viewed as a statement of the weakness
    of the language: that it permits only a very limited set of operations. (You could
    still inspect the type—<wbr>but not act upon what you learned, which makes the
    inspection pointless. Therefore, a run-time system that wants to simulate relational
    parametricity would have to remove operations like instanceof as well as various
    proxies to it: for instance, adding 1 to a value and catching exceptions would
    reveal whether the value is a number.) Nevertheless, it is a very elegant and
    surprising result, and shows the power of program reasoning possible with rich
    type systems.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，这听起来非常令人印象深刻（而且确实如此！），但仔细检查后，您可能会意识到这与您的经验不符。例如，在Java中，多态方法仍然可以使用 instanceof
    来检查在运行时获取的特定类型的值，并相应地更改其行为。这样的方法就不是关系参数化的！在Web上，您经常会发现这个属性被描述为函数无法检查参数——这并不完全正确。事实上，关系参数化也可以被看作是语言弱点的陈述：它只允许一组非常有限的操作。（您仍然可以检查类型——但不能根据所学内容采取行动，这使得检查无意义。因此，想要模拟关系参数化的运行时系统必须删除像
    instanceof 这样的操作，以及各种代理：例如，对值添加 1 并捕获异常将会显示出值是否为数字。）尽管如此，这是一个非常优雅和令人惊讶的结果，并展示了丰富类型系统可能实现的程序推理的力量。
