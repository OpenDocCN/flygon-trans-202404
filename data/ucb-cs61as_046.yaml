- en: Space
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空间
- en: Recursive Processes
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 递归过程
- en: 'To begin exploring how procedures use space, consider the following procedure:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始探索过程如何使用空间，请考虑以下过程：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If we were to evaluate `(factorial 5)` by hand, writing out each step we get
    the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们手动评估`(factorial 5)`，写出每一步，我们会得到以下结果：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Each line describes a new step of the computation--what we need to remember
    at that time step in order to continue the evaluation. Here is the key observation:
    if we chose a large enough input for factorial, say 10000, then at some step,
    we wouldn''t be able fit the entire line in our minds.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行描述了计算的一个新步骤——我们需要在那个时间步骤记住什么以便继续评估。这里是关键观察：如果我们选择一个足够大的输入，比如10000，那么在某个步骤，我们将无法将整行记在脑中。
- en: Computers evaluate procedure calls in the same way. Each function call is stored
    in the computer's working memory—a place to store intermediary, incomplete computations.
    This space is finite and can be overflowed. The important thing to remember is
    that this problem only occurs on very large inputs. The "working memory" is called
    the "call stack". When that space is used up by a program, it's called a "stack
    overflow".
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机以相同的方式评估过程调用。每个函数调用都存储在计算机的工作内存中——这是一个用于存储中间、不完整计算的地方。这个空间是有限的，可能会溢出。需要记住的重要一点是，这个问题只会在非常大的输入上发生。这个"工作内存"被称为"调用堆栈"。当程序使用完这个空间时，就会发生"堆栈溢出"。
- en: Iterative Processes
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迭代过程
- en: 'Is there a way to fix factorial such that it does not force the computer to
    run out of space on large inputs? Consider the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有没有一种方法可以修复阶乘，使其在大输入时不会使计算机耗尽空间？考虑以下内容：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Test your understanding. Why must we say `(> counter max-count)`? What happens
    if we were to do `(fact-iter 1 1 3)`? Now if we were to diagram `(factorial 5)`
    with the code above, we would get the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 测试你的理解。为什么我们必须说`(> counter max-count)`？如果我们执行`(fact-iter 1 1 3)`会发生什么？现在如果我们用上面的代码来绘制`(factorial
    5)`，我们会得到以下结果：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this case, the amount of incomplete computations we had to keep in our minds
    as we carried through the evaluation didn't grow at each step. We instead carried
    the *incomplete answer to the computation* through the arguments, which saves
    space. In other words, the complete state of the computation is kept in the arguments
    to the recursive call--calling `(fact-iter 2 3 5)` would produce the same result
    as `(fact-iter 1 1 5)`, whereas calling `(factorial 3)` would produce a different
    result from calling `(factorial 5)`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们在评估过程中需要保留的不完整计算量在每一步都没有增长。相反，我们通过参数传递*计算的不完整答案*，这样可以节省空间。换句话说，计算的完整状态保存在递归调用的参数中——调用`(fact-iter
    2 3 5)`会产生与调用`(fact-iter 1 1 5)`相同的结果，而调用`(factorial 3)`会产生与调用`(factorial 5)`不同的结果。
- en: Note that this iterative process still uses Recursion, but this is different
    than saying it is a recursive process.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个迭代过程仍然使用递归，但这与说它是一个递归过程是不同的。
- en: Comparing Iterative and Recursive Processes
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较迭代和递归过程
- en: Looking at these functions side by side, we can identify how these two procedures
    relate.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些函数并排看，我们可以确定这两个过程之间的关系。
- en: '| Recursive | Iterative |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 递归 | 迭代 |'
- en: '| --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Important observations on the differences:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两个过程的重要观察：
- en: The value that is returned as base case in the Recursive version acts as the
    starting point for `product` in the iterative version (1). Notice that calling
    iterative `(factorial 1)`causes the base case to be triggered in `fact-iter`,
    and 1 is returned.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归版本中作为基本情况返回的值充当迭代版本中`product`的起始点（1）。注意，调用迭代`(factorial 1)`会导致在`fact-iter`中触发基本情况，并返回1。
- en: In the Recursive version, The `*` procedure is called outside of the recursive
    call. In the iterative version, all of the arguments are transformed before (or
    inside of) the recursive call. I.e., `(* counter product)` happens first, and
    then the recursive call gets made. **This is the key to why the Iterative version
    is more space efficent.**
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在递归版本中，`*`过程在递归调用之外被调用。在迭代版本中，所有参数在（或在）递归调用之前被转换。也就是说，`(* counter product)`首先发生，然后进行递归调用。**这就是迭代版本更节省空间的关键所在。**
- en: As a corollary, this means the recursive call is the "last" expression that
    is evaluated in a procedure call (as opposed to a multiplcation.)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为一个推论，这意味着递归调用是在过程调用中被"最后"评估的表达式（与乘法相反）。
- en: Because the Iterative version needed to keep track of more arguments, it needed
    a helper procedure where the recursion actually took place. This is often the
    case for Iterative procedures.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为迭代版本需要跟踪更多的参数，它需要一个辅助过程，递归实际上发生在那里。这在迭代过程中经常发生。
- en: Tail Recursion and Writing Tail Recursive Procedures
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尾递归和编写尾递归过程
- en: In formal terms, the Iterative `factorial` is more space efficent because the
    Racket interpreter impliements [Tail Call Elimination](https://en.wikipedia.org/wiki/Tail_call).
    In other programming languages and other interpreters that aren't Tail Call optimized,
    the Recursive and Iterative versions use the same amount of space when run. So
    why do we care?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在正式术语中，迭代`factorial`更加节省空间，因为Racket解释器实现了[尾递归消除](https://en.wikipedia.org/wiki/Tail_call)。在其他编程语言和其他未经过尾递归优化的解释器中，递归和迭代版本在运行时使用相同的空间。那么我们为什么要关心呢？
- en: Introducing these topics gives us a deeper understanding of recursion, evaluation,
    and programming languages, which provides a solid background for other topics
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入这些主题使我们更深入地理解递归、求值和编程语言，为其他主题提供了坚实的背景
- en: This is a chance to practice thinking critically about resource usage and tradeoffs,
    which is generally important to Software Engineering and Computer Science.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个练习思考资源使用和权衡的机会，这对软件工程和计算机科学通常很重要。
- en: In order to write a *tail-recursive* procedure, here are a few tips.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写*尾递归*过程，以下是一些建议。
- en: Figure out if you'll need to keep extra arguments in order to keep track of
    the state of the computation, and whether or not a helper procedure is necessary.
    Almost always, you'll need some sort of argument to keep track of the "answer
    so far". In `factorial`, that was `product`.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弄清楚是否需要保留额外的参数来跟踪计算状态，以及是否需要辅助过程。几乎总是需要某种参数来跟踪"到目前为止的答案"。在`factorial`中，这是`product`。
- en: In fact as a general rule, the Recursive version of procedures will try to make
    its arguments progressively smaller, whereas the Iterative version builds up a
    result. Thus when writing an iterative procedure, think of the starting values
    needed in order to "build" your answer. In `factorial`, that was 1, 1, and `n`,
    in `(fact-iter 1 1 n)`.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际上，作为一个一般规则，过程的递归版本会尝试使其参数逐渐变小，而迭代版本则会构建一个结果。因此，在编写迭代过程时，考虑一下需要的起始值以便"构建"你的答案。在`factorial`中，这是1、1和`n`，在`(fact-iter
    1 1 n)`中。
- en: Ensure that the recursive call happens "at the last moment". In practice, this
    means that the arguments are processed (added, subtrated, multiplied, `butfirst`'d,
    etc.) before the recursive call is made.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保递归调用发生在"最后一刻"。实际上，这意味着在进行递归调用之前处理参数（相加、相减、相乘、`butfirst`等）。
- en: Exercises
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: The following questions are for your understanding. You will not be graded.
    You can check your answers with a staff member.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题是为了帮助你理解。你不会被评分。你可以向工作人员核对你的答案。
- en: Iterative `factorial` keeps track of three things in `fact-iter`. What were
    those things? Could we rewrite `factorial` yet again in order to only keep track
    of two things?
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代`factorial`在`fact-iter`中跟踪三件事。那些事情是什么？我们能否再次重写`factorial`以便只跟踪两件事？
- en: If we use an iterative version, will we ever run out of space calling `factorial`?
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们使用迭代版本，调用`factorial`会不会导致空间耗尽？
- en: Further Reading
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[SICP 1.2.1 - Linear Recursion and Iteration](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.1)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[SICP 1.2.1 - 线性递归和迭代](https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.1)'
