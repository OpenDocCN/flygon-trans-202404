- en: '| [![Disneyland.  Los Angeles, California.](../Images/997c56feee4f0bd05b8b2eb03a2d95ab.jpg)](/http://philip.greenspun.com/images/pcd1647/disney-10.tcl)
    |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| [![迪士尼乐园。加利福尼亚州洛杉矶。](../Images/997c56feee4f0bd05b8b2eb03a2d95ab.jpg)](/http://philip.greenspun.com/images/pcd1647/disney-10.tcl)
    |'
- en: Views
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: part of [SQL for Web Nerds](index.html) by [Philip Greenspun](http://philip.greenspun.com/)
    |
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQL for Web Nerds](index.html) 的一部分，作者是 [Philip Greenspun](http://philip.greenspun.com/)
    |'
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[![A view of the Spider Rock in Canyon de Chelly.  This is where the spider
    woman came down and taught the Navajo how to weave.](../Images/58b97d62554bbe64ed6cfb423e9d4aa9.jpg)](/http://philip.greenspun.com/images/pcd2148/canyon-de-chelly-spider-rock-6.4.jpg)
    The relational database provides programmers with a high degree of abstraction
    from the physical world of the computer. You can''t tell where on the disk the
    RDBMS is putting each row of a table. For all you know, information in a single
    row might be split up and spread out across multiple disk drives. The RDBMS lets
    you add a column to a billion-row table. Is the new information for each row going
    to be placed next to the pre-existing columns or will a big new block of disk
    space be allocated to hold the new column value for all billion rows? You can''t
    know and shouldn''t really care.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[![查看位于Canyon de Chelly的蜘蛛岩。这是蜘蛛女降临并教导纳瓦霍人编织的地方。](../Images/58b97d62554bbe64ed6cfb423e9d4aa9.jpg)](/http://philip.greenspun.com/images/pcd2148/canyon-de-chelly-spider-rock-6.4.jpg)
    关系数据库为程序员提供了与计算机物理世界高度抽象的能力。你无法知道RDBMS将表的每一行放在磁盘的哪个位置。你甚至不知道一行中的信息是否会被分割并分布在多个磁盘驱动器上。RDBMS允许你向一个拥有十亿行的表中添加一列。新信息对于每一行将放在现有列的旁边，还是会分配一个大的新磁盘空间块来保存所有十亿行的新列值？你无法知道，也不应该真的关心。'
- en: A view is a way of building even greater abstraction.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是构建更大抽象的一种方式。
- en: 'Suppose that Jane in marketing says that she wants to see a table containing
    the following information:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设市场部的简说她想看到一个包含以下信息的表：
- en: user_id
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户ID
- en: email address
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件地址
- en: number of static pages viewed
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看的静态页面数量
- en: number of bboard postings made
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发帖数量
- en: number of comments made
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发表评论数量
- en: 'This information is spread out among four tables. However, having read the
    preceding chapters of this book, you''re perfectly equipped to serve Jane''s needs
    with the following query:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息分布在四个表中。然而，通过阅读本书前面的章节，你完全有能力通过以下查询满足简的需求：
- en: '[PRE0]'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then Jane adds "I want to see this every day, updated with the latest information.
    I want to have a programmer write me some desktop software that connects directly
    to the database and looks at this information; I don't want my desktop software
    breaking if you reorganize the data model."
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后简（Jane）补充说：“我想每天都看到这个，更新最新信息。我想让一个程序员为我编写一些桌面软件，直接连接数据库并查看这些信息；如果你重新组织数据模型，我不希望我的桌面软件出现故障。”
- en: '[PRE1]'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To Jane, this will look and act just like a table when she queries it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对简来说，当她查询时，这将看起来和表格一样：
- en: '[PRE2]'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Why should she need to be aware that information is coming from four tables?
    Or that you've reorganized the RDBMS so that the information subsequently comes
    from six tables?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 她为什么需要知道信息来自四个表？或者你已经重新组织了RDBMS，以便随后的信息来自六个表？
- en: Protecting Privacy with Views
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过视图保护隐私
- en: 'A common use of views is protecting confidential data. For example, suppose
    that all the people who work in a hospital collaborate by using a relational database.
    Here is the data model:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 视图的一个常见用途是保护机密数据。例如，假设所有在医院工作的人通过使用关系数据库进行协作。这是数据模型：
- en: '[PRE3]'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If a bunch of hippie idealists are running the hospital, they'll think that
    the medical doctors shouldn't be aware of a patient's insurance status. So when
    a doc is looking up a patient's medical record, the looking is done through
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一群嬉皮理想主义者在管理医院，他们会认为医生不应该知道患者的保险状况。因此，当医生查看患者的病历时，查看是通过以下方式进行的
- en: '[PRE4]'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The folks over in accounting shouldn''t get access to the patients'' medical
    records just because they''re trying to squeeze money out of them:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 会计部门的人员不应该因为他们试图从患者身上榨取钱财而获得访问患者的病历的权限：
- en: '[PRE5]'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Relational databases have elaborate permission systems similar to those on time-shared
    computer systems. Each person in a hospital has a unique database user ID. Permission
    will be granted to view or modify certain tables on a per-user or per-group-of-users
    basis. Generally the RDBMS permissions facilities aren't very useful for Web applications.
    It is the Web server that is talking to the database, not a user's desktop computer.
    So the Web server is responsible for figuring out who is requesting a page and
    how much to show in response.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库拥有类似于分时计算机系统的复杂权限系统。医院中的每个人都有一个唯一的数据库用户ID。权限将根据每个用户或用户组来授予查看或修改某些表的权限。一般来说，关系数据库管理系统的权限设施对Web应用程序并不是很有用。是Web服务器在与数据库通信，而不是用户的桌面电脑。因此，Web服务器负责确定谁在请求页面以及如何响应。
- en: Protecting Your Own Source Code
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保护自己的源代码
- en: 'The ArsDigita Shoppe system, described in [http://philip.greenspun.com/panda/ecommerce](/panda/ecommerce),
    represents all orders in one table, whether they were denied by the credit card
    processor, returned by the user, or voided by the merchant. This is fine for transaction
    processing but you don''t want your accounting or tax reports corrupted by the
    inclusion of failed orders. You can make a decision in one place as to what constitutes
    a reportable order and then have all of your report programs query the view:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: ArsDigita Shoppe系统在[http://philip.greenspun.com/panda/ecommerce](/panda/ecommerce)中描述，将所有订单都表示在一个表中，无论它们是被信用卡处理器拒绝、用户退回，还是商家作废。这对于交易处理来说是可以的，但你不希望你的会计或税务报告因包含失败订单而受损。你可以在一个地方做出决定，即什么构成了可报告的订单，然后让所有报告程序查询该视图：
- en: '[PRE6]'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that in the privacy example (above) we were using the view to leave unwanted
    columns behind whereas here we are using the view to leave behind unwanted rows.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上面的隐私示例中，我们使用视图来留下不需要的列，而在这里我们使用视图来留下不需要的行。
- en: If we add some order states or otherwise change the data model, the reporting
    programs need not be touched; we only have to keep this view definition up to
    date. Note that you can define every view with "create or replace view" rather
    than "create view"; this saves a bit of typing when you have to edit the definition
    later.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们添加一些订单状态或以其他方式更改数据模型，报告程序无需更改；我们只需要保持这个视图定义的最新即可。请注意，你可以用“create or replace
    view”来定义每个视图，而不是“create view”；这在以后编辑定义时可以节省一些输入。
- en: If you've used `select *` to define a view and subsequently alter any of the
    underlying tables, you have to redefine the view. Otherwise, your view won't contain
    any of the new columns. You might consider this a bug but Oracle has documented
    it, thus turning the behavior into a feature.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`select *`来定义一个视图，然后修改底层表中的任何一个，你必须重新定义视图。否则，你的视图将不包含任何新列。你可能认为这是一个bug，但Oracle已经记录了这一点，因此将这种行为转变为了一个特性。
- en: Views-on-the-fly and OUTER JOIN
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 即时视图和外连接
- en: 'Let''s return to our first OUTER JOIN example, from the simple queries chapter:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们第一个外连接示例，来自简单查询章节：
- en: '[PRE7]'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The plus sign after `classified_ads.user_id` is our instruction to Oracle to
    "add NULL rows if you can't meet this JOIN constraint".
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`classified_ads.user_id`后面的加号是我们对Oracle的指令，即“如果无法满足此JOIN约束条件，则添加NULL行”。
- en: 'Suppose that this report has gotten very long and we''re only interested in
    users whose email addresses start with "db". We can add a WHERE clause constraint
    on the `email` column of the `users` table:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这份报告变得非常长，我们只对邮箱地址以“db”开头的用户感兴趣。我们可以在`users`表的`email`列上添加一个WHERE子句约束：
- en: '[PRE8]'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Suppose that we decide we''re only interested in classified ads since January
    1, 1999\. Let''s try the naive approach, adding another WHERE clause constraint,
    this time on a column from the `classified_ads` table:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们决定只对1999年1月1日以后的分类广告感兴趣。让我们尝试天真的方法，添加另一个WHERE子句约束，这次是针对`classified_ads`表的一列：
- en: '[PRE9]'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Hey! This completely wrecked our outer join! All of the rows where the user
    had not posted any ads have now disappeared. Why? They didn''t meet the `and classified_ads.posted
    > ''1999-01-01''` constraint. The outer join added NULLs to every column in the
    report where there was no corresponding row in the `classified_ads` table. The
    new constraint is comparing NULL to January 1, 1999 and the answer is... NULL.
    That''s three-valued logic for you. Any computation involving a NULL turns out
    NULL. Each WHERE clause constraint must evaluate to true for a row to be kept
    in the result set of the SELECT. What''s the solution? A "view on the fly". Instead
    of OUTER JOINing the `users` table to the `classified_ads`, we will OUTER JOIN
    `users` to a *view* of `classified_ads` that contains only those ads posted since
    January 1, 1999:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿！这完全破坏了我们的外连接！所有用户没有发布任何广告的行都消失了。为什么？因为它们不符合`and classified_ads.posted > '1999-01-01'`的约束条件。外连接在报告中的每一列都添加了NULL，其中`classified_ads`表中没有对应行的地方。新的约束条件是将NULL与1999年1月1日进行比较，答案是...
    NULL。这就是三值逻辑。任何涉及NULL的计算结果都是NULL。每个WHERE子句约束条件必须对SELECT的结果集中的行求值为true。解决方案是什么？一个“即时视图”。我们将`users`表与仅包含自1999年1月1日以来发布的广告的`classified_ads`的*视图*进行外连接，而不是与`classified_ads`进行外连接：
- en: '[PRE10]'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that we've named our "view on the fly" `ad_view` for the duration of this
    query.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们为本次查询命名了我们的“即时视图”为`ad_view`。
- en: How Views Work
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视图的工作原理
- en: 'Programmers aren''t supposed to have to think about how views work. However,
    it is worth noting that the RDBMS merely stores the view definition and not any
    of the data in a view. Querying against a view versus the underlying tables does
    not change the way that data are retrieved or cached. Standard RDBMS views exist
    to make programming more convenient or to address security concerns, not to make
    data access more efficient. ### How *Materialized* Views Work [![Powerscourt.
    South of Dublin, Ireland.](../Images/4d87cdd0b98d5f110195d521b292ff9d.jpg)](/http://philip.greenspun.com/images/pcd0558/powerscourt-5.tcl)
    Starting with Oracle 8.1.5, introduced in March 1999, you can have a *materialized
    view*, also known as a *summary*. Like a regular view, a materialized view can
    be used to build a black-box abstraction for the programmer. In other words, the
    view might be created with a complicated JOIN, or an expensive GROUP BY with sums
    and averages. With a regular view, this expensive operation would be done every
    time you issued a query. With a materialized view, the expensive operation is
    done when the view is created and thus an individual query need not involve substantial
    computation.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员不应该考虑视图的工作原理。然而，值得注意的是，关系数据库管理系统仅存储视图定义，而不存储视图中的任何数据。针对视图与底层表的查询不会改变数据检索或缓存的方式。标准的关系数据库管理系统视图存在是为了使编程更方便或解决安全问题，而不是为了使数据访问更高效。###
    *物化*视图的工作原理 [![爱尔兰都柏林南部的Powerscourt。](../Images/4d87cdd0b98d5f110195d521b292ff9d.jpg)](/http://philip.greenspun.com/images/pcd0558/powerscourt-5.tcl)
    从Oracle 8.1.5开始，于1999年3月推出，您可以拥有*物化视图*，也称为*摘要*。与常规视图类似，物化视图可用于为程序员构建黑盒抽象。换句话说，视图可能是使用复杂的JOIN或昂贵的GROUP
    BY与求和和平均值创建的。对于常规视图，每次发出查询时都会执行这个昂贵的操作。对于物化视图，这个昂贵的操作是在创建视图时完成的，因此一个单独的查询不需要涉及大量计算。
- en: Materialized views consume space because Oracle is keeping a copy of the data
    or at least a copy of information derivable from the data. More importantly, a
    materialized view does not contain up-to-the-minute information. When you query
    a regular view, your results includes changes made up to the last committed transaction
    before your SELECT. When you query a materialized view, you're getting results
    as of the time that the view was created or refreshed. Note that Oracle lets you
    specify a refresh interval at which the materialized view will automatically be
    refreshed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 物化视图会占用空间，因为Oracle会保留数据的副本，或者至少保留可以从数据中派生的信息的副本。更重要的是，物化视图不包含最新信息。当您查询常规视图时，您的结果包括在您的SELECT之前最后一个提交的事务所做的更改。当您查询物化视图时，您得到的结果是在视图创建或刷新时的结果。请注意，Oracle允许您指定刷新间隔，物化视图将在该间隔内自动刷新。
- en: 'At this point, you''d expect an experienced Oracle user to say "Hey, these
    aren''t new. This is the old CREATE SNAPSHOT facility that we used to keep semi-up-to-date
    copies of tables on machines across the network!" What is new with materialized
    views is that you can create them with the ENABLE QUERY REWRITE option. This authorizes
    the SQL parser to look at a query involving aggregates or JOINs and go to the
    materialized view instead. Consider the following query, from the ArsDigita Community
    System''s /admin/users/registration-history.tcl page:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您可能会期望一个经验丰富的Oracle用户说：“嘿，这些不是新的。这是我们过去用来在网络中的机器上保持表的半更新副本的旧CREATE SNAPSHOT功能！”使用物化视图的新功能是您可以使用ENABLE
    QUERY REWRITE选项创建它们。这授权SQL解析器查看涉及聚合或连接的查询，并转到物化视图。考虑以下查询，来自ArsDigita社区系统的/admin/users/registration-history.tcl页面：
- en: '[PRE11]'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For each month, we have a count of how many users registered at photo.net. To
    execute the query, Oracle must sequentially scan the `users` table. If the users
    table grew large and you wanted the query to be instant, you'd sacrifice some
    timeliness in the stats with
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个月份，我们都有一个在photo.net注册的用户数量统计。要执行这个查询，Oracle必须顺序扫描`users`表。如果用户表变得很大，而您希望查询立即完成，您将牺牲一些统计数据的及时性。
- en: '[PRE12]'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Oracle will build this view just after midnight on March 28, 1999\. The view
    will be refreshed every 24 hours after that. Because of the `enable query rewrite`
    clause, Oracle will feel free to grab data from the view even when a user's query
    does not mention the view. For example, given the query
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle将在1999年3月28日午夜后立即构建此视图。此视图将每隔24小时刷新一次。由于`enable query rewrite`子句，Oracle将自由地从视图中获取数据，即使用户的查询没有提及该视图。例如，给定查询
- en: '[PRE13]'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Oracle would ignore the `users` table altogether and pull information from `users_by_month`.
    This would give the same result with much less work. Suppose that the current
    month is March 1999, though. The query
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle将完全忽略`users`表，并从`users_by_month`中提取信息。这将以更少的工作获得相同的结果。尽管当前月份是1999年3月。查询
- en: '[PRE14]'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE14]'
- en: will also hit the materialized view rather than the `users` table and hence
    will miss anyone who has registered since midnight (i.e., the query rewriting
    will cause a different result to be returned).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 也将命中物化视图而不是`users`表，因此将错过自午夜以来注册的任何人（即，查询重写将导致返回不同的结果）。
- en: 'More:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 更多：
- en: Reference
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考
- en: 'High level: Oracle8 Server Concepts, [View section](http://www.oradoc.com/keyword/views).
    Oracle Application Developer''s Guide, [Managing Views section.](http://www.oradoc.com/keyword/managing_views)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级：Oracle8服务器概念，[查看部分](http://www.oradoc.com/keyword/views)。Oracle应用程序开发人员指南，[管理视图部分](http://www.oradoc.com/keyword/managing_views)。
- en: 'Low level: Oracle8 Server SQL Reference, [Create View syntax](http://www.oradoc.com/keyword/create_view),
    and [Create Materialized View section](http://www.oradoc.com/keyword/create_materialized_view)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低级：Oracle8服务器SQL参考，[创建视图语法](http://www.oradoc.com/keyword/create_view)，以及[创建物化视图部分](http://www.oradoc.com/keyword/create_materialized_view)
- en: 'Next: [style](style.html)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个：[样式](style.html)
- en: '* * *'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[philg@mit.edu](http://philip.greenspun.com/)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[philg@mit.edu](http://philip.greenspun.com/)'
- en: Reader's Comments
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读者评论
- en: In this on views you state that condition "classified_ads.posted > '1999-01-01'
    " will not give the desired results because the column 'posted' is nullable hence
    this condition will compute to NULL whenever 'posted' column is NULL. Hence the
    query will never return rows where 'posted' value is NULL.
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这个关于视图的问题中，您指出条件“classified_ads.posted > '1999-01-01'”将不会给出期望的结果，因为'posted'列是可空的，因此当'posted'列为NULL时，此条件将计算为NULL。因此，查询永远不会返回'posted'值为NULL的行。
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'And in order to solve this issue you go onto to create a view with the following
    query: (select * from classified_ads where posted > ''1999-01-01'')'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了解决这个问题，您继续创建以下查询的视图：（select * from classified_ads where posted > '1999-01-01'）
- en: ''
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Wont this view suffer from the same issue? Why will this view contain columns
    where 'posted' column is NULL.
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个视图不会遇到相同的问题吗？为什么这个视图会包含'posted'列为NULL的列。
- en: ''
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Please explain.
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请解释。
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [sanjay raj](/shared/community-member?user_id=264352), August 25, 2005
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [sanjay raj](/shared/community-member?user_id=264352)，2005年8月25日
- en: 'Re Sanjay Raj''s comment: Well it has been almost 9 years since you asked the
    question, so probably by now you''ve either found the answer elsewhere or lost
    interest in databases altogether. But since others might be confused and no one
    else has responded I figured I would. This view-on-the-fly (ad_view) is a list
    of all ads with dates after 1999-01-01\. This is then outer joined to the users
    table ("where users.user_id = ad_view.user_id(+)") so that users whose ids are
    included in ad_view will have their ads next to them, but all other users (including
    both those with no ads and those whose most recent ads were before 1999-01-01
    and thus didn''t make the cut for ad_view) will be listed with null/white space.'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Re Sanjay Raj的评论：嗯，距离你提出这个问题已经将近9年了，所以你可能已经在其他地方找到了答案，或者完全失去了对数据库的兴趣。但由于其他人可能会感到困惑，而且没有其他人回应，我觉得我应该回答一下。这个即时视图（ad_view）是一个所有日期在1999-01-01之后的广告列表。然后将其与用户表进行外连接（"where
    users.user_id = ad_view.user_id(+)"），这样在ad_view中包含的用户将在其旁边显示他们的广告，但所有其他用户（包括那些没有广告的用户以及那些最近的广告在1999-01-01之前，因此没有进入ad_view的用户）将被列出为空/空格。
- en: ''
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The difference is that rather than outer joining and then filtering for date,
    which breaks it because you're filtering out the nulls, you're instead filtering
    for date first by creating the view, and then outer joining, so you don't touch
    the nulls after they're created.
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 区别在于，不是先进行外连接然后按日期过滤，这样会破坏它，因为你会过滤掉空值，而是首先通过创建视图来按日期过滤，然后进行外连接，这样在创建后就不会再触及空值。
- en: ''
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -- [Dan Cusher](/shared/community-member?user_id=348055), June 10, 2014
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -- [Dan Cusher](/shared/community-member?user_id=348055)，2014年6月10日
- en: '[Add a comment](/comments/add?page_id=3463)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加评论](/comments/add?page_id=3463)'
