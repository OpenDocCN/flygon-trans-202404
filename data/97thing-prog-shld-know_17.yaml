- en: Comment Only What the Code Cannot Say
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅对代码无法表达的内容进行评论
- en: Comment Only What the Code Cannot Say
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅对代码无法表达的内容进行评论
- en: 'The difference between theory and practice is greater in practice than it is
    in theory — an observation that certainly applies to comments. In theory, the
    general idea of commenting code sounds like a worthy one: Offer the reader detail,
    an explanation of what''s going on. What could be more helpful than being helpful?
    In practice, however, comments often become a blight. As with any other form of
    writing, there is a skill to writing good comments. Much of the skill is in knowing
    when not to write them.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 理论与实践之间的差距在实践中比在理论中更大——这一观察在注释中显然适用。在理论上，评论代码的一般想法听起来是值得的：为读者提供细节，解释正在发生的事情。有什么比帮助更有帮助的呢？然而，在实践中，注释经常成为一个祸害。与任何其他形式的写作一样，写好注释也是一门技术。很大一部分技巧在于知道何时不写它们。
- en: When code is ill-formed, compilers, interpreters, and other tools will be sure
    to object. If the code is in some way functionally incorrect, reviews, static
    analysis, tests, and day-to-day use in a production environment will flush most
    bugs out. But what about comments? In The *Elements of Programming Style* Kernighan
    and Plauger noted that "a comment is of zero (or negative) value if it is wrong."
    And yet such comments often litter and survive in a code base in a way that coding
    errors never could. They provide a constant source of distraction and misinformation,
    a subtle but constant drag on a programmer's thinking.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码形式不正确时，编译器、解释器和其他工具肯定会提出异议。如果代码在某种程度上功能不正确，审查、静态分析、测试以及在生产环境中的日常使用将排除大多数错误。但是注释呢？在《编程风格的要素》中，Kernighan和Plauger指出，“如果注释是错误的，它的价值就是零（或负值）。”
    然而，这样的注释经常在代码库中散落并存活，而编码错误永远不可能。它们提供了一个持续的干扰和错误信息源，对程序员的思维产生微妙但持续的拖累。
- en: What of comments that are not technically wrong, but add no value to the code?
    Such comments are noise. Comments that parrot the code offer nothing extra to
    the reader — stating something once in code and again in natural language does
    not make it any truer or more real. Commented-out code is not executable code,
    so it has no useful effect for either reader or runtime. It also becomes stale
    very quickly. Version-related comments and commented-out code try to address questions
    of versioning and history. These questions have already been answered (far more
    effectively) by version control tools.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 那些在技术上没有错误但对代码没有任何价值的注释呢？这些注释是噪音。重复代码的注释对读者没有任何额外的帮助——在代码中和自然语言中重复一次并不会使它更真实或更真实。被注释掉的代码不是可执行代码，因此对读者或运行时没有任何有用的效果。它也很快变得过时。与版本相关的注释和被注释掉的代码试图解决版本控制和历史问题。这些问题已经被版本控制工具（更有效地）回答了。
- en: 'A prevalence of noisy comments and incorrect comments in a code base encourage
    programmers to ignore all comments, either by skipping past them or by taking
    active measures to hide them. Programmers are resourceful and will route around
    anything perceived to be damage: folding comments up; switching coloring scheme
    so that comments and the background are the same color; scripting to filter out
    comments. To save a code base from such misapplications of programmer ingenuity,
    and to reduce the risk of overlooking any comments of genuine value, comments
    should be treated as if they were code. Each comment should add some value for
    the reader, otherwise it is waste that should be removed or rewritten.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 代码库中存在大量嘈杂和不正确的注释会促使程序员忽略所有注释，要么跳过它们，要么采取积极措施隐藏它们。程序员很有创造力，会绕过任何被视为有害的东西：折叠注释；切换颜色方案，使注释和背景颜色相同；编写脚本来过滤注释。为了避免程序员创造力被误用，并减少忽略任何有价值注释的风险，应该将注释视为代码。每个注释都应该为读者增加一些价值，否则它就是应该被删除或重写的浪费。
- en: What then qualifies as value? Comments should say something code does not and
    cannot say. A comment explaining what a piece of code should already say is an
    invitation to change code structure or coding conventions so the code speaks for
    itself. Instead of compensating for poor method or class names, rename them. Instead
    of commenting sections in long functions, extract smaller functions whose names
    capture the former sections' intent. Try to express as much as possible through
    code. Any shortfall between what you can express in code and what you would like
    to express in total becomes a plausible candidate for a useful comment. Comment
    what the code cannot say, not simply what it does not say.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 什么才算是价值？注释应该说出代码所不能说的东西。解释代码本应该说明的内容只会邀请修改代码结构或编码约定，让代码自己说话。不要弥补糟糕的方法或类名，而是重新命名它们。不要为长函数中的部分添加注释，而是提取出能够捕捉前述部分意图的较小函数。尽量通过代码来表达。在代码中能够表达的内容和您想要总体表达的内容之间的任何差距都可能成为一个有用注释的合理候选。注释应该说出代码无法说出的内容，而不只是说出代码未说出的内容。
- en: By [Kevlin Henney](http://programmer.97things.oreilly.com/wiki/index.php/Kevlin_Henney)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[Kevlin Henney](http://programmer.97things.oreilly.com/wiki/index.php/Kevlin_Henney)
